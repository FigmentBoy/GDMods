dist/main.dylib:
(__TEXT,__text) section
__ZNSaIP12ModContainerEC1Ev:
00000000000010e0	pushq	%rbp
00000000000010e1	movq	%rsp, %rbp
00000000000010e4	subq	$0x10, %rsp
00000000000010e8	movq	%rdi, -0x8(%rbp)
00000000000010ec	movq	-0x8(%rbp), %rdi
00000000000010f0	callq	0x1f3d4 ## symbol stub for: __ZNSaIP12ModContainerEC2Ev
00000000000010f5	addq	$0x10, %rsp
00000000000010f9	popq	%rbp
00000000000010fa	retq
00000000000010fb	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EEC1ERKS2_:
0000000000001100	pushq	%rbp
0000000000001101	movq	%rsp, %rbp
0000000000001104	subq	$0x10, %rsp
0000000000001108	movq	%rdi, -0x8(%rbp)
000000000000110c	movq	%rsi, -0x10(%rbp)
0000000000001110	movq	-0x8(%rbp), %rdi
0000000000001114	movq	-0x10(%rbp), %rsi
0000000000001118	callq	0x1f4f4 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EEC2ERKS2_
000000000000111d	addq	$0x10, %rsp
0000000000001121	popq	%rbp
0000000000001122	retq
0000000000001123	nopw	%cs:(%rax,%rax)
000000000000112d	nopl	(%rax)
__ZNSaIP12ModContainerED1Ev:
0000000000001130	pushq	%rbp
0000000000001131	movq	%rsp, %rbp
0000000000001134	subq	$0x10, %rsp
0000000000001138	movq	%rdi, -0x8(%rbp)
000000000000113c	movq	-0x8(%rbp), %rdi
0000000000001140	callq	0x1f3e0 ## symbol stub for: __ZNSaIP12ModContainerED2Ev
0000000000001145	addq	$0x10, %rsp
0000000000001149	popq	%rbp
000000000000114a	retq
000000000000114b	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EED1Ev:
0000000000001150	pushq	%rbp
0000000000001151	movq	%rsp, %rbp
0000000000001154	subq	$0x10, %rsp
0000000000001158	movq	%rdi, -0x8(%rbp)
000000000000115c	movq	-0x8(%rbp), %rdi
0000000000001160	callq	0x1f4fa ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EED2Ev
0000000000001165	addq	$0x10, %rsp
0000000000001169	popq	%rbp
000000000000116a	retq
000000000000116b	nopl	(%rax,%rax)
__ZN13BaseContainerD2Ev:
0000000000001170	pushq	%rbp
0000000000001171	movq	%rsp, %rbp
0000000000001174	subq	$0x20, %rsp
0000000000001178	movq	%rdi, -0x8(%rbp)
000000000000117c	movq	-0x8(%rbp), %rdi
0000000000001180	leaq	0x654f9(%rip), %rax
0000000000001187	movq	%rax, (%rdi)
000000000000118a	movq	0x64e8f(%rip), %rdi ## literal pool symbol address: __ZSt4cout
0000000000001191	leaq	0x5f720(%rip), %rsi ## literal pool for: "bye"
0000000000001198	callq	0x1f5fc ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000000119d	movq	%rax, -0x10(%rbp)
00000000000011a1	jmp	0x11a6
00000000000011a6	movq	0x64e7b(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
00000000000011ad	movq	-0x10(%rbp), %rdi
00000000000011b1	callq	0x1f416 ## symbol stub for: __ZNSolsEPFRSoS_E
00000000000011b6	movq	%rax, -0x18(%rbp)
00000000000011ba	jmp	0x11bf
00000000000011bf	addq	$0x20, %rsp
00000000000011c3	popq	%rbp
00000000000011c4	retq
00000000000011c5	movq	%rax, %rdi
00000000000011c8	movq	%rdx, -0x20(%rbp)
00000000000011cc	callq	___clang_call_terminate
00000000000011d1	nopw	%cs:(%rax,%rax)
00000000000011db	nopl	(%rax,%rax)
__ZN13BaseContainerD1Ev:
00000000000011e0	pushq	%rbp
00000000000011e1	movq	%rsp, %rbp
00000000000011e4	subq	$0x10, %rsp
00000000000011e8	movq	%rdi, -0x8(%rbp)
00000000000011ec	movq	-0x8(%rbp), %rdi
00000000000011f0	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000011f5	addq	$0x10, %rsp
00000000000011f9	popq	%rbp
00000000000011fa	retq
00000000000011fb	nopl	(%rax,%rax)
__ZN13BaseContainerD0Ev:
0000000000001200	pushq	%rbp
0000000000001201	movq	%rsp, %rbp
0000000000001204	subq	$0x10, %rsp
0000000000001208	movq	%rdi, -0x8(%rbp)
000000000000120c	movq	-0x8(%rbp), %rdi
0000000000001210	movq	%rdi, -0x10(%rbp)
0000000000001214	callq	__ZN13BaseContainerD1Ev ## BaseContainer::~BaseContainer()
0000000000001219	movq	-0x10(%rbp), %rdi
000000000000121d	callq	0x1f602 ## symbol stub for: __ZdlPv
0000000000001222	addq	$0x10, %rsp
0000000000001226	popq	%rbp
0000000000001227	retq
0000000000001228	nopl	(%rax,%rax)
__ZN15MemoryContainerC2ElmPc:
0000000000001230	pushq	%rbp
0000000000001231	movq	%rsp, %rbp
0000000000001234	subq	$0x60, %rsp
0000000000001238	movq	0x64e19(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
000000000000123f	movq	(%rax), %rax
0000000000001242	movq	%rax, -0x8(%rbp)
0000000000001246	movq	%rdi, -0x10(%rbp)
000000000000124a	movq	%rsi, -0x18(%rbp)
000000000000124e	movq	%rdx, -0x20(%rbp)
0000000000001252	movq	%rcx, -0x28(%rbp)
0000000000001256	movq	-0x10(%rbp), %rax
000000000000125a	movq	%rax, %rdi
000000000000125d	movq	%rax, -0x50(%rbp)
0000000000001261	callq	0x1f27e ## symbol stub for: __ZN13BaseContainerC2Ev
0000000000001266	leaq	0x65433(%rip), %rax
000000000000126d	movq	-0x50(%rbp), %rcx
0000000000001271	movq	%rax, (%rcx)
0000000000001274	movq	-0x18(%rbp), %rax
0000000000001278	movq	%rax, 0x8(%rcx)
000000000000127c	movq	-0x20(%rbp), %rax
0000000000001280	movq	%rax, 0x10(%rcx)
0000000000001284	movq	0x10(%rcx), %rax
0000000000001288	movq	%rsp, %rdx
000000000000128b	movq	%rdx, -0x30(%rbp)
000000000000128f	movq	%rax, %rdx
0000000000001292	addq	$0xf, %rdx
0000000000001296	andq	$-0x10, %rdx
000000000000129a	movq	%rsp, %rsi
000000000000129d	subq	%rdx, %rsi
00000000000012a0	movq	%rsi, %rsp
00000000000012a3	movq	%rax, -0x38(%rbp)
00000000000012a7	movq	0x8(%rcx), %rdi
00000000000012ab	movq	0x10(%rcx), %rax
00000000000012af	movq	%rsi, -0x58(%rbp)
00000000000012b3	movq	%rax, %rsi
00000000000012b6	movq	-0x58(%rbp), %rdx
00000000000012ba	callq	__Z6readPMymPc ## readPM(unsigned long long, unsigned long, char*)
00000000000012bf	movl	%eax, -0x5c(%rbp)
00000000000012c2	jmp	0x12c7
00000000000012c7	movq	-0x50(%rbp), %rax
00000000000012cb	movq	-0x58(%rbp), %rcx
00000000000012cf	movq	%rcx, 0x18(%rax)
00000000000012d3	movq	-0x28(%rbp), %rdx
00000000000012d7	movq	%rdx, 0x20(%rax)
00000000000012db	movq	-0x30(%rbp), %rdx
00000000000012df	movq	%rdx, %rsp
00000000000012e2	movq	0x64d6f(%rip), %rdx ## literal pool symbol address: ___stack_chk_guard
00000000000012e9	movq	(%rdx), %rdx
00000000000012ec	movq	-0x8(%rbp), %rsi
00000000000012f0	cmpq	%rsi, %rdx
00000000000012f3	jne	0x131e
00000000000012f9	movq	%rbp, %rsp
00000000000012fc	popq	%rbp
00000000000012fd	retq
00000000000012fe	movl	%edx, %ecx
0000000000001300	movq	%rax, -0x40(%rbp)
0000000000001304	movl	%ecx, -0x44(%rbp)
0000000000001307	movq	-0x50(%rbp), %rax
000000000000130b	movq	%rax, %rdi
000000000000130e	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
0000000000001313	movq	-0x40(%rbp), %rdi
0000000000001317	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000000131c	ud2
000000000000131e	callq	0x1f656 ## symbol stub for: ___stack_chk_fail
0000000000001323	ud2
0000000000001325	nopw	%cs:(%rax,%rax)
000000000000132f	nop
__ZN13BaseContainerC2Ev:
0000000000001330	pushq	%rbp
0000000000001331	movq	%rsp, %rbp
0000000000001334	leaq	__ZTV13BaseContainer(%rip), %rax ## vtable for BaseContainer
000000000000133b	addq	$0x10, %rax
000000000000133f	movq	%rdi, -0x8(%rbp)
0000000000001343	movq	-0x8(%rbp), %rdi
0000000000001347	movq	%rax, (%rdi)
000000000000134a	popq	%rbp
000000000000134b	retq
000000000000134c	nopl	(%rax)
__ZN15MemoryContainerC1ElmPc:
0000000000001350	pushq	%rbp
0000000000001351	movq	%rsp, %rbp
0000000000001354	subq	$0x20, %rsp
0000000000001358	movq	%rdi, -0x8(%rbp)
000000000000135c	movq	%rsi, -0x10(%rbp)
0000000000001360	movq	%rdx, -0x18(%rbp)
0000000000001364	movq	%rcx, -0x20(%rbp)
0000000000001368	movq	-0x8(%rbp), %rdi
000000000000136c	movq	-0x10(%rbp), %rsi
0000000000001370	movq	-0x18(%rbp), %rdx
0000000000001374	movq	-0x20(%rbp), %rcx
0000000000001378	callq	__ZN15MemoryContainerC2ElmPc ## MemoryContainer::MemoryContainer(long, unsigned long, char*)
000000000000137d	addq	$0x20, %rsp
0000000000001381	popq	%rbp
0000000000001382	retq
0000000000001383	nopw	%cs:(%rax,%rax)
000000000000138d	nopl	(%rax)
__ZN15MemoryContainerD2Ev:
0000000000001390	pushq	%rbp
0000000000001391	movq	%rsp, %rbp
0000000000001394	subq	$0x30, %rsp
0000000000001398	movq	%rdi, -0x8(%rbp)
000000000000139c	movq	-0x8(%rbp), %rdi
00000000000013a0	leaq	0x652f9(%rip), %rax
00000000000013a7	movq	%rax, (%rdi)
00000000000013aa	movq	0x64c6f(%rip), %rax ## literal pool symbol address: __ZSt4cout
00000000000013b1	leaq	0x5f504(%rip), %rsi ## literal pool for: "bye from memory"
00000000000013b8	movq	%rdi, -0x20(%rbp)
00000000000013bc	movq	%rax, %rdi
00000000000013bf	callq	0x1f5fc ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
00000000000013c4	movq	%rax, -0x28(%rbp)
00000000000013c8	jmp	0x13cd
00000000000013cd	movq	0x64c54(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
00000000000013d4	movq	-0x28(%rbp), %rdi
00000000000013d8	callq	0x1f416 ## symbol stub for: __ZNSolsEPFRSoS_E
00000000000013dd	movq	%rax, -0x30(%rbp)
00000000000013e1	jmp	0x13e6
00000000000013e6	movq	-0x20(%rbp), %rax
00000000000013ea	movq	%rax, %rdi
00000000000013ed	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000013f2	addq	$0x30, %rsp
00000000000013f6	popq	%rbp
00000000000013f7	retq
00000000000013f8	movl	%edx, %ecx
00000000000013fa	movq	%rax, -0x10(%rbp)
00000000000013fe	movl	%ecx, -0x14(%rbp)
0000000000001401	movq	-0x20(%rbp), %rax
0000000000001405	movq	%rax, %rdi
0000000000001408	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
000000000000140d	movq	-0x10(%rbp), %rdi
0000000000001411	callq	___clang_call_terminate
0000000000001416	nopw	%cs:(%rax,%rax)
__ZN15MemoryContainerD1Ev:
0000000000001420	pushq	%rbp
0000000000001421	movq	%rsp, %rbp
0000000000001424	subq	$0x10, %rsp
0000000000001428	movq	%rdi, -0x8(%rbp)
000000000000142c	movq	-0x8(%rbp), %rdi
0000000000001430	callq	__ZN15MemoryContainerD2Ev ## MemoryContainer::~MemoryContainer()
0000000000001435	addq	$0x10, %rsp
0000000000001439	popq	%rbp
000000000000143a	retq
000000000000143b	nopl	(%rax,%rax)
__ZN15MemoryContainerD0Ev:
0000000000001440	pushq	%rbp
0000000000001441	movq	%rsp, %rbp
0000000000001444	subq	$0x10, %rsp
0000000000001448	movq	%rdi, -0x8(%rbp)
000000000000144c	movq	-0x8(%rbp), %rdi
0000000000001450	movq	%rdi, -0x10(%rbp)
0000000000001454	callq	__ZN15MemoryContainerD1Ev ## MemoryContainer::~MemoryContainer()
0000000000001459	movq	-0x10(%rbp), %rdi
000000000000145d	callq	0x1f602 ## symbol stub for: __ZdlPv
0000000000001462	addq	$0x10, %rsp
0000000000001466	popq	%rbp
0000000000001467	retq
0000000000001468	nopl	(%rax,%rax)
__ZN13HookContainerC2ElPFvvE:
0000000000001470	pushq	%rbp
0000000000001471	movq	%rsp, %rbp
0000000000001474	subq	$0x90, %rsp
000000000000147b	movq	0x64bd6(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
0000000000001482	movq	(%rax), %rax
0000000000001485	movq	%rax, -0x8(%rbp)
0000000000001489	movq	%rdi, -0x10(%rbp)
000000000000148d	movq	%rsi, -0x18(%rbp)
0000000000001491	movq	%rdx, -0x20(%rbp)
0000000000001495	movq	-0x10(%rbp), %rax
0000000000001499	movq	%rax, %rdi
000000000000149c	movq	%rax, -0x50(%rbp)
00000000000014a0	callq	0x1f27e ## symbol stub for: __ZN13BaseContainerC2Ev
00000000000014a5	leaq	0x65214(%rip), %rax
00000000000014ac	movq	-0x50(%rbp), %rdx
00000000000014b0	movq	%rax, (%rdx)
00000000000014b3	movq	-0x18(%rbp), %rax
00000000000014b7	movq	%rax, 0x8(%rdx)
00000000000014bb	movq	-0x18(%rbp), %rdi
00000000000014bf	addq	$0x28, %rdx
00000000000014c3	movq	%rdx, %rsi
00000000000014c6	callq	__Z4dupePvPS_ ## dupe(void*, void**)
00000000000014cb	movl	%eax, -0x54(%rbp)
00000000000014ce	jmp	0x14d3
00000000000014d3	movq	-0x50(%rbp), %rax
00000000000014d7	movq	$0x10, 0x10(%rax)
00000000000014df	movq	0x10(%rax), %rdi
00000000000014e3	callq	0x1f698 ## symbol stub for: _malloc
00000000000014e8	movq	%rax, -0x60(%rbp)
00000000000014ec	jmp	0x14f1
00000000000014f1	movq	-0x50(%rbp), %rax
00000000000014f5	movq	-0x60(%rbp), %rcx
00000000000014f9	movq	%rcx, 0x18(%rax)
00000000000014fd	movq	0x10(%rax), %rdi
0000000000001501	callq	0x1f698 ## symbol stub for: _malloc
0000000000001506	movq	%rax, -0x68(%rbp)
000000000000150a	jmp	0x150f
000000000000150f	movq	-0x50(%rbp), %rax
0000000000001513	movq	-0x68(%rbp), %rcx
0000000000001517	movq	%rcx, 0x20(%rax)
000000000000151b	movq	0x10(%rax), %rdx
000000000000151f	movq	%rsp, %rsi
0000000000001522	movq	%rsi, -0x38(%rbp)
0000000000001526	movq	%rdx, %rsi
0000000000001529	addq	$0xf, %rsi
000000000000152d	andq	$-0x10, %rsi
0000000000001531	movq	%rsp, %rdi
0000000000001534	subq	%rsi, %rdi
0000000000001537	movq	%rdi, %rsp
000000000000153a	movq	%rdx, -0x40(%rbp)
000000000000153e	movq	0x8(%rax), %rdx
0000000000001542	movq	0x10(%rax), %rsi
0000000000001546	movq	%rdi, -0x70(%rbp)
000000000000154a	movq	%rdx, %rdi
000000000000154d	movq	-0x70(%rbp), %rdx
0000000000001551	callq	__Z6readPMymPc ## readPM(unsigned long long, unsigned long, char*)
0000000000001556	movl	%eax, -0x74(%rbp)
0000000000001559	jmp	0x155e
000000000000155e	movq	-0x50(%rbp), %rax
0000000000001562	movq	0x10(%rax), %rdx
0000000000001566	movq	0x18(%rax), %rdi
000000000000156a	movq	-0x70(%rbp), %rsi
000000000000156e	callq	0x1f69e ## symbol stub for: _memcpy
0000000000001573	movq	-0x50(%rbp), %rdx
0000000000001577	movq	0x10(%rdx), %rsi
000000000000157b	movq	%rsi, %rdi
000000000000157e	addq	$0xf, %rdi
0000000000001582	andq	$-0x10, %rdi
0000000000001586	movq	%rsp, %rcx
0000000000001589	subq	%rdi, %rcx
000000000000158c	movq	%rcx, %rsp
000000000000158f	movq	%rsi, -0x48(%rbp)
0000000000001593	movq	-0x20(%rbp), %rdi
0000000000001597	movq	%rcx, %rsi
000000000000159a	movq	%rax, -0x80(%rbp)
000000000000159e	movq	%rcx, -0x88(%rbp)
00000000000015a5	callq	__Z14_get_jmp_bytesPvPc ## _get_jmp_bytes(void*, char*)
00000000000015aa	movl	%eax, -0x8c(%rbp)
00000000000015b0	jmp	0x15b5
00000000000015b5	movq	-0x50(%rbp), %rax
00000000000015b9	movq	0x20(%rax), %rdi
00000000000015bd	movq	0x10(%rax), %rdx
00000000000015c1	movq	-0x88(%rbp), %rsi
00000000000015c8	callq	0x1f69e ## symbol stub for: _memcpy
00000000000015cd	movq	-0x38(%rbp), %rax
00000000000015d1	movq	%rax, %rsp
00000000000015d4	movq	0x64a7d(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
00000000000015db	movq	(%rax), %rax
00000000000015de	movq	-0x8(%rbp), %rdx
00000000000015e2	cmpq	%rdx, %rax
00000000000015e5	jne	0x1610
00000000000015eb	movq	%rbp, %rsp
00000000000015ee	popq	%rbp
00000000000015ef	retq
00000000000015f0	movl	%edx, %ecx
00000000000015f2	movq	%rax, -0x28(%rbp)
00000000000015f6	movl	%ecx, -0x2c(%rbp)
00000000000015f9	movq	-0x50(%rbp), %rax
00000000000015fd	movq	%rax, %rdi
0000000000001600	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
0000000000001605	movq	-0x28(%rbp), %rdi
0000000000001609	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000000160e	ud2
0000000000001610	callq	0x1f656 ## symbol stub for: ___stack_chk_fail
0000000000001615	ud2
0000000000001617	nopw	(%rax,%rax)
__ZN13HookContainerC1ElPFvvE:
0000000000001620	pushq	%rbp
0000000000001621	movq	%rsp, %rbp
0000000000001624	subq	$0x20, %rsp
0000000000001628	movq	%rdi, -0x8(%rbp)
000000000000162c	movq	%rsi, -0x10(%rbp)
0000000000001630	movq	%rdx, -0x18(%rbp)
0000000000001634	movq	-0x8(%rbp), %rdi
0000000000001638	movq	-0x10(%rbp), %rsi
000000000000163c	movq	-0x18(%rbp), %rdx
0000000000001640	callq	__ZN13HookContainerC2ElPFvvE ## HookContainer::HookContainer(long, void (*)())
0000000000001645	addq	$0x20, %rsp
0000000000001649	popq	%rbp
000000000000164a	retq
000000000000164b	nopl	(%rax,%rax)
__ZN13HookContainer11getOriginalEv:
0000000000001650	pushq	%rbp
0000000000001651	movq	%rsp, %rbp
0000000000001654	movq	%rdi, -0x8(%rbp)
0000000000001658	movq	-0x8(%rbp), %rdi
000000000000165c	movq	0x28(%rdi), %rax
0000000000001660	popq	%rbp
0000000000001661	retq
0000000000001662	nopw	%cs:(%rax,%rax)
000000000000166c	nopl	(%rax)
__ZN13HookContainerD2Ev:
0000000000001670	pushq	%rbp
0000000000001671	movq	%rsp, %rbp
0000000000001674	subq	$0x30, %rsp
0000000000001678	movq	%rdi, -0x8(%rbp)
000000000000167c	movq	-0x8(%rbp), %rdi
0000000000001680	leaq	0x65039(%rip), %rax
0000000000001687	movq	%rax, (%rdi)
000000000000168a	movq	0x6498f(%rip), %rax ## literal pool symbol address: __ZSt4cout
0000000000001691	leaq	0x5f234(%rip), %rsi ## literal pool for: "bye from hook"
0000000000001698	movq	%rdi, -0x20(%rbp)
000000000000169c	movq	%rax, %rdi
000000000000169f	callq	0x1f5fc ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
00000000000016a4	movq	%rax, -0x28(%rbp)
00000000000016a8	jmp	0x16ad
00000000000016ad	movq	0x64974(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
00000000000016b4	movq	-0x28(%rbp), %rdi
00000000000016b8	callq	0x1f416 ## symbol stub for: __ZNSolsEPFRSoS_E
00000000000016bd	movq	%rax, -0x30(%rbp)
00000000000016c1	jmp	0x16c6
00000000000016c6	movq	-0x20(%rbp), %rax
00000000000016ca	movq	%rax, %rdi
00000000000016cd	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000016d2	addq	$0x30, %rsp
00000000000016d6	popq	%rbp
00000000000016d7	retq
00000000000016d8	movl	%edx, %ecx
00000000000016da	movq	%rax, -0x10(%rbp)
00000000000016de	movl	%ecx, -0x14(%rbp)
00000000000016e1	movq	-0x20(%rbp), %rax
00000000000016e5	movq	%rax, %rdi
00000000000016e8	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000016ed	movq	-0x10(%rbp), %rdi
00000000000016f1	callq	___clang_call_terminate
00000000000016f6	nopw	%cs:(%rax,%rax)
__ZN13HookContainerD1Ev:
0000000000001700	pushq	%rbp
0000000000001701	movq	%rsp, %rbp
0000000000001704	subq	$0x10, %rsp
0000000000001708	movq	%rdi, -0x8(%rbp)
000000000000170c	movq	-0x8(%rbp), %rdi
0000000000001710	callq	__ZN13HookContainerD2Ev ## HookContainer::~HookContainer()
0000000000001715	addq	$0x10, %rsp
0000000000001719	popq	%rbp
000000000000171a	retq
000000000000171b	nopl	(%rax,%rax)
__ZN13HookContainerD0Ev:
0000000000001720	pushq	%rbp
0000000000001721	movq	%rsp, %rbp
0000000000001724	subq	$0x10, %rsp
0000000000001728	movq	%rdi, -0x8(%rbp)
000000000000172c	movq	-0x8(%rbp), %rdi
0000000000001730	movq	%rdi, -0x10(%rbp)
0000000000001734	callq	__ZN13HookContainerD1Ev ## HookContainer::~HookContainer()
0000000000001739	movq	-0x10(%rbp), %rdi
000000000000173d	callq	0x1f602 ## symbol stub for: __ZdlPv
0000000000001742	addq	$0x10, %rsp
0000000000001746	popq	%rbp
0000000000001747	retq
0000000000001748	nopl	(%rax,%rax)
__ZN13BaseContainer6enableEv:
0000000000001750	pushq	%rbp
0000000000001751	movq	%rsp, %rbp
0000000000001754	subq	$0x10, %rsp
0000000000001758	movq	%rdi, -0x8(%rbp)
000000000000175c	movq	-0x8(%rbp), %rdi
0000000000001760	movq	0x8(%rdi), %rax
0000000000001764	movq	0x10(%rdi), %rsi
0000000000001768	movq	0x20(%rdi), %rdx
000000000000176c	movq	%rax, %rdi
000000000000176f	callq	__Z7writePMymPc ## writePM(unsigned long long, unsigned long, char*)
0000000000001774	movl	%eax, -0xc(%rbp)
0000000000001777	addq	$0x10, %rsp
000000000000177b	popq	%rbp
000000000000177c	retq
000000000000177d	nopl	(%rax)
__ZN13BaseContainer7disableEv:
0000000000001780	pushq	%rbp
0000000000001781	movq	%rsp, %rbp
0000000000001784	subq	$0x10, %rsp
0000000000001788	movq	%rdi, -0x8(%rbp)
000000000000178c	movq	-0x8(%rbp), %rdi
0000000000001790	movq	0x8(%rdi), %rax
0000000000001794	movq	0x10(%rdi), %rsi
0000000000001798	movq	0x18(%rdi), %rdx
000000000000179c	movq	%rax, %rdi
000000000000179f	callq	__Z7writePMymPc ## writePM(unsigned long long, unsigned long, char*)
00000000000017a4	movl	%eax, -0xc(%rbp)
00000000000017a7	addq	$0x10, %rsp
00000000000017ab	popq	%rbp
00000000000017ac	retq
00000000000017ad	nopl	(%rax)
__ZN12ModContainer6enableEv:
00000000000017b0	pushq	%rbp
00000000000017b1	movq	%rsp, %rbp
00000000000017b4	subq	$0x30, %rsp
00000000000017b8	movq	%rdi, -0x8(%rbp)
00000000000017bc	movq	-0x8(%rbp), %rdi
00000000000017c0	movq	%rdi, -0x10(%rbp)
00000000000017c4	movq	-0x10(%rbp), %rdi
00000000000017c8	callq	0x1f50c ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
00000000000017cd	movq	%rax, -0x18(%rbp)
00000000000017d1	movq	-0x10(%rbp), %rdi
00000000000017d5	callq	0x1f506 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
00000000000017da	movq	%rax, -0x20(%rbp)
00000000000017de	leaq	-0x18(%rbp), %rdi
00000000000017e2	leaq	-0x20(%rbp), %rsi
00000000000017e6	callq	0x1f34a ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
00000000000017eb	testb	$0x1, %al
00000000000017ed	jne	0x17f8
00000000000017f3	jmp	0x1823
00000000000017f8	leaq	-0x18(%rbp), %rdi
00000000000017fc	callq	0x1f386 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000001801	movq	(%rax), %rax
0000000000001804	movq	%rax, -0x28(%rbp)
0000000000001808	movq	-0x28(%rbp), %rdi
000000000000180c	callq	__ZN13BaseContainer6enableEv ## BaseContainer::enable()
0000000000001811	leaq	-0x18(%rbp), %rdi
0000000000001815	callq	0x1f32c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000181a	movq	%rax, -0x30(%rbp)
000000000000181e	jmp	0x17de
0000000000001823	addq	$0x30, %rsp
0000000000001827	popq	%rbp
0000000000001828	retq
0000000000001829	nopl	(%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv:
0000000000001830	pushq	%rbp
0000000000001831	movq	%rsp, %rbp
0000000000001834	subq	$0x20, %rsp
0000000000001838	movq	%rdi, -0x10(%rbp)
000000000000183c	movq	-0x10(%rbp), %rdi
0000000000001840	leaq	-0x8(%rbp), %rax
0000000000001844	movq	%rdi, -0x18(%rbp)
0000000000001848	movq	%rax, %rdi
000000000000184b	movq	-0x18(%rbp), %rsi
000000000000184f	callq	0x1f320 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000001854	movq	-0x8(%rbp), %rax
0000000000001858	addq	$0x20, %rsp
000000000000185c	popq	%rbp
000000000000185d	retq
000000000000185e	nop
__ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
0000000000001860	pushq	%rbp
0000000000001861	movq	%rsp, %rbp
0000000000001864	subq	$0x20, %rsp
0000000000001868	movq	%rdi, -0x8(%rbp)
000000000000186c	movq	%rsi, -0x10(%rbp)
0000000000001870	movq	-0x8(%rbp), %rdi
0000000000001874	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000001879	movq	(%rax), %rax
000000000000187c	movq	-0x10(%rbp), %rdi
0000000000001880	movq	%rax, -0x18(%rbp)
0000000000001884	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000001889	movq	-0x18(%rbp), %rsi
000000000000188d	cmpq	(%rax), %rsi
0000000000001890	setne	%cl
0000000000001893	andb	$0x1, %cl
0000000000001896	movzbl	%cl, %eax
0000000000001899	addq	$0x20, %rsp
000000000000189d	popq	%rbp
000000000000189e	retq
000000000000189f	nop
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv:
00000000000018a0	pushq	%rbp
00000000000018a1	movq	%rsp, %rbp
00000000000018a4	movq	%rdi, -0x8(%rbp)
00000000000018a8	movq	-0x8(%rbp), %rdi
00000000000018ac	movq	(%rdi), %rax
00000000000018af	addq	$0x8, %rax
00000000000018b3	movq	%rax, (%rdi)
00000000000018b6	movq	%rdi, %rax
00000000000018b9	popq	%rbp
00000000000018ba	retq
00000000000018bb	nopl	(%rax,%rax)
__ZN12ModContainer7disableEv:
00000000000018c0	pushq	%rbp
00000000000018c1	movq	%rsp, %rbp
00000000000018c4	subq	$0x30, %rsp
00000000000018c8	movq	%rdi, -0x8(%rbp)
00000000000018cc	movq	-0x8(%rbp), %rdi
00000000000018d0	movq	%rdi, -0x10(%rbp)
00000000000018d4	movq	-0x10(%rbp), %rdi
00000000000018d8	callq	0x1f50c ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
00000000000018dd	movq	%rax, -0x18(%rbp)
00000000000018e1	movq	-0x10(%rbp), %rdi
00000000000018e5	callq	0x1f506 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
00000000000018ea	movq	%rax, -0x20(%rbp)
00000000000018ee	leaq	-0x18(%rbp), %rdi
00000000000018f2	leaq	-0x20(%rbp), %rsi
00000000000018f6	callq	0x1f34a ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
00000000000018fb	testb	$0x1, %al
00000000000018fd	jne	0x1908
0000000000001903	jmp	0x1933
0000000000001908	leaq	-0x18(%rbp), %rdi
000000000000190c	callq	0x1f386 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000001911	movq	(%rax), %rax
0000000000001914	movq	%rax, -0x28(%rbp)
0000000000001918	movq	-0x28(%rbp), %rdi
000000000000191c	callq	__ZN13BaseContainer7disableEv ## BaseContainer::disable()
0000000000001921	leaq	-0x18(%rbp), %rdi
0000000000001925	callq	0x1f32c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000192a	movq	%rax, -0x30(%rbp)
000000000000192e	jmp	0x18ee
0000000000001933	addq	$0x30, %rsp
0000000000001937	popq	%rbp
0000000000001938	retq
0000000000001939	nopl	(%rax)
__ZN12ModContainerC2EPKc:
0000000000001940	pushq	%rbp
0000000000001941	movq	%rsp, %rbp
0000000000001944	subq	$0x50, %rsp
0000000000001948	movq	%rdi, -0x8(%rbp)
000000000000194c	movq	%rsi, -0x10(%rbp)
0000000000001950	movq	-0x8(%rbp), %rsi
0000000000001954	movq	%rsi, %rdi
0000000000001957	leaq	-0x18(%rbp), %rax
000000000000195b	movq	%rdi, -0x38(%rbp)
000000000000195f	movq	%rax, %rdi
0000000000001962	movq	%rsi, -0x40(%rbp)
0000000000001966	movq	%rax, -0x48(%rbp)
000000000000196a	callq	0x1f3ec ## symbol stub for: __ZNSaIP13BaseContainerEC1Ev
000000000000196f	movq	-0x40(%rbp), %rdi
0000000000001973	movq	-0x48(%rbp), %rsi
0000000000001977	callq	0x1f518 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EEC1ERKS2_
000000000000197c	jmp	0x1981
0000000000001981	leaq	-0x18(%rbp), %rdi
0000000000001985	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000000198a	movq	-0x10(%rbp), %rdi
000000000000198e	movq	-0x38(%rbp), %rax
0000000000001992	movq	%rdi, 0x18(%rax)
0000000000001996	movq	%rax, -0x30(%rbp)
000000000000199a	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
00000000000019a1	leaq	-0x30(%rbp), %rsi
00000000000019a5	callq	0x1f4e8 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE9push_backERKS1_
00000000000019aa	jmp	0x19af
00000000000019af	addq	$0x50, %rsp
00000000000019b3	popq	%rbp
00000000000019b4	retq
00000000000019b5	movl	%edx, %ecx
00000000000019b7	movq	%rax, -0x20(%rbp)
00000000000019bb	movl	%ecx, -0x24(%rbp)
00000000000019be	leaq	-0x18(%rbp), %rdi
00000000000019c2	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000019c7	jmp	0x19de
00000000000019cc	movl	%edx, %ecx
00000000000019ce	movq	%rax, -0x20(%rbp)
00000000000019d2	movl	%ecx, -0x24(%rbp)
00000000000019d5	movq	-0x40(%rbp), %rdi
00000000000019d9	callq	0x1f524 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
00000000000019de	movq	-0x20(%rbp), %rdi
00000000000019e2	callq	0x1f260 ## symbol stub for: __Unwind_Resume
00000000000019e7	ud2
00000000000019e9	nopl	(%rax)
__ZNSaIP13BaseContainerEC1Ev:
00000000000019f0	pushq	%rbp
00000000000019f1	movq	%rsp, %rbp
00000000000019f4	subq	$0x10, %rsp
00000000000019f8	movq	%rdi, -0x8(%rbp)
00000000000019fc	movq	-0x8(%rbp), %rdi
0000000000001a00	callq	0x1f3f8 ## symbol stub for: __ZNSaIP13BaseContainerEC2Ev
0000000000001a05	addq	$0x10, %rsp
0000000000001a09	popq	%rbp
0000000000001a0a	retq
0000000000001a0b	nopl	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EEC1ERKS2_:
0000000000001a10	pushq	%rbp
0000000000001a11	movq	%rsp, %rbp
0000000000001a14	subq	$0x10, %rsp
0000000000001a18	movq	%rdi, -0x8(%rbp)
0000000000001a1c	movq	%rsi, -0x10(%rbp)
0000000000001a20	movq	-0x8(%rbp), %rdi
0000000000001a24	movq	-0x10(%rbp), %rsi
0000000000001a28	callq	0x1f51e ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EEC2ERKS2_
0000000000001a2d	addq	$0x10, %rsp
0000000000001a31	popq	%rbp
0000000000001a32	retq
0000000000001a33	nopw	%cs:(%rax,%rax)
0000000000001a3d	nopl	(%rax)
__ZNSaIP13BaseContainerED1Ev:
0000000000001a40	pushq	%rbp
0000000000001a41	movq	%rsp, %rbp
0000000000001a44	subq	$0x10, %rsp
0000000000001a48	movq	%rdi, -0x8(%rbp)
0000000000001a4c	movq	-0x8(%rbp), %rdi
0000000000001a50	callq	0x1f404 ## symbol stub for: __ZNSaIP13BaseContainerED2Ev
0000000000001a55	addq	$0x10, %rsp
0000000000001a59	popq	%rbp
0000000000001a5a	retq
0000000000001a5b	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EE9push_backERKS1_:
0000000000001a60	pushq	%rbp
0000000000001a61	movq	%rsp, %rbp
0000000000001a64	subq	$0x20, %rsp
0000000000001a68	movq	%rdi, -0x8(%rbp)
0000000000001a6c	movq	%rsi, -0x10(%rbp)
0000000000001a70	movq	-0x8(%rbp), %rsi
0000000000001a74	movq	0x8(%rsi), %rdi
0000000000001a78	cmpq	0x10(%rsi), %rdi
0000000000001a7c	movq	%rsi, -0x20(%rbp)
0000000000001a80	je	0x1ab3
0000000000001a86	movq	-0x20(%rbp), %rax
0000000000001a8a	movq	-0x20(%rbp), %rcx
0000000000001a8e	movq	0x8(%rcx), %rsi
0000000000001a92	movq	-0x10(%rbp), %rdx
0000000000001a96	movq	%rax, %rdi
0000000000001a99	callq	0x1f2b4 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
0000000000001a9e	movq	-0x20(%rbp), %rax
0000000000001aa2	movq	0x8(%rax), %rcx
0000000000001aa6	addq	$0x8, %rcx
0000000000001aaa	movq	%rcx, 0x8(%rax)
0000000000001aae	jmp	0x1ad1
0000000000001ab3	movq	-0x20(%rbp), %rdi
0000000000001ab7	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001abc	movq	%rax, -0x18(%rbp)
0000000000001ac0	movq	-0x10(%rbp), %rdx
0000000000001ac4	movq	-0x18(%rbp), %rsi
0000000000001ac8	movq	-0x20(%rbp), %rdi
0000000000001acc	callq	0x1f4d0 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
0000000000001ad1	addq	$0x20, %rsp
0000000000001ad5	popq	%rbp
0000000000001ad6	retq
0000000000001ad7	nopw	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev:
0000000000001ae0	pushq	%rbp
0000000000001ae1	movq	%rsp, %rbp
0000000000001ae4	subq	$0x10, %rsp
0000000000001ae8	movq	%rdi, -0x8(%rbp)
0000000000001aec	movq	-0x8(%rbp), %rdi
0000000000001af0	callq	0x1f52a ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED2Ev
0000000000001af5	addq	$0x10, %rsp
0000000000001af9	popq	%rbp
0000000000001afa	retq
0000000000001afb	nopl	(%rax,%rax)
__ZN12ModContainerC1EPKc:
0000000000001b00	pushq	%rbp
0000000000001b01	movq	%rsp, %rbp
0000000000001b04	subq	$0x10, %rsp
0000000000001b08	movq	%rdi, -0x8(%rbp)
0000000000001b0c	movq	%rsi, -0x10(%rbp)
0000000000001b10	movq	-0x8(%rbp), %rdi
0000000000001b14	movq	-0x10(%rbp), %rsi
0000000000001b18	callq	__ZN12ModContainerC2EPKc ## ModContainer::ModContainer(char const*)
0000000000001b1d	addq	$0x10, %rsp
0000000000001b21	popq	%rbp
0000000000001b22	retq
0000000000001b23	nopw	%cs:(%rax,%rax)
0000000000001b2d	nopl	(%rax)
__ZN12ModContainerD2Ev:
0000000000001b30	pushq	%rbp
0000000000001b31	movq	%rsp, %rbp
0000000000001b34	subq	$0x80, %rsp
0000000000001b3b	movq	%rdi, -0x8(%rbp)
0000000000001b3f	movq	-0x8(%rbp), %rdi
0000000000001b43	movq	%rdi, -0x50(%rbp)
0000000000001b47	callq	__ZN12ModContainer7disableEv ## ModContainer::disable()
0000000000001b4c	jmp	0x1b51
0000000000001b51	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000001b58	callq	0x1f4dc ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv
0000000000001b5d	movq	%rax, -0x58(%rbp)
0000000000001b61	jmp	0x1b66
0000000000001b66	movq	-0x58(%rbp), %rax
0000000000001b6a	movq	%rax, -0x28(%rbp)
0000000000001b6e	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000001b75	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001b7a	movq	%rax, -0x60(%rbp)
0000000000001b7e	jmp	0x1b83
0000000000001b83	movq	-0x60(%rbp), %rax
0000000000001b87	movq	%rax, -0x30(%rbp)
0000000000001b8b	movq	-0x50(%rbp), %rcx
0000000000001b8f	movq	%rcx, -0x38(%rbp)
0000000000001b93	movq	-0x28(%rbp), %rdi
0000000000001b97	movq	-0x30(%rbp), %rsi
0000000000001b9b	leaq	-0x38(%rbp), %rdx
0000000000001b9f	callq	0x1f5d2 ## symbol stub for: __ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_
0000000000001ba4	movq	%rax, -0x68(%rbp)
0000000000001ba8	jmp	0x1bad
0000000000001bad	movq	-0x68(%rbp), %rax
0000000000001bb1	movq	%rax, -0x20(%rbp)
0000000000001bb5	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000001bbc	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001bc1	movq	%rax, -0x70(%rbp)
0000000000001bc5	jmp	0x1bca
0000000000001bca	movq	-0x70(%rbp), %rax
0000000000001bce	movq	%rax, -0x40(%rbp)
0000000000001bd2	movq	-0x20(%rbp), %rsi
0000000000001bd6	movq	-0x40(%rbp), %rdx
0000000000001bda	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000001be1	callq	0x1f4e2 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_
0000000000001be6	movq	%rax, -0x78(%rbp)
0000000000001bea	jmp	0x1bef
0000000000001bef	movq	-0x78(%rbp), %rax
0000000000001bf3	movq	%rax, -0x48(%rbp)
0000000000001bf7	movq	-0x50(%rbp), %rdi
0000000000001bfb	callq	0x1f524 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
0000000000001c00	addq	$0x80, %rsp
0000000000001c07	popq	%rbp
0000000000001c08	retq
0000000000001c09	movl	%edx, %ecx
0000000000001c0b	movq	%rax, -0x10(%rbp)
0000000000001c0f	movl	%ecx, -0x14(%rbp)
0000000000001c12	movq	-0x50(%rbp), %rdi
0000000000001c16	callq	0x1f524 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
0000000000001c1b	movq	-0x10(%rbp), %rdi
0000000000001c1f	callq	0x1f62c ## symbol stub for: ___cxa_call_unexpected
0000000000001c24	nopw	%cs:(%rax,%rax)
0000000000001c2e	nop
__ZNSt6vectorIP12ModContainerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_:
0000000000001c30	pushq	%rbp
0000000000001c31	movq	%rsp, %rbp
0000000000001c34	subq	$0x80, %rsp
0000000000001c3b	movq	%rsi, -0x10(%rbp)
0000000000001c3f	movq	%rdx, -0x18(%rbp)
0000000000001c43	movq	%rdi, -0x20(%rbp)
0000000000001c47	movq	-0x20(%rbp), %rdx
0000000000001c4b	movq	-0x18(%rbp), %rsi
0000000000001c4f	movq	%rsi, -0x30(%rbp)
0000000000001c53	movq	%rdx, %rdi
0000000000001c56	movq	%rdx, -0x70(%rbp)
0000000000001c5a	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001c5f	movq	%rax, -0x38(%rbp)
0000000000001c63	movq	-0x10(%rbp), %rax
0000000000001c67	movq	%rax, -0x40(%rbp)
0000000000001c6b	movq	-0x30(%rbp), %rdi
0000000000001c6f	movq	-0x38(%rbp), %rsi
0000000000001c73	movq	-0x40(%rbp), %rdx
0000000000001c77	callq	0x1f5b4 ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000001c7c	movq	%rax, -0x28(%rbp)
0000000000001c80	movq	-0x28(%rbp), %rax
0000000000001c84	movq	%rax, -0x48(%rbp)
0000000000001c88	movq	-0x70(%rbp), %rdi
0000000000001c8c	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001c91	movq	%rax, -0x50(%rbp)
0000000000001c95	leaq	-0x58(%rbp), %rax
0000000000001c99	movq	%rax, %rdi
0000000000001c9c	movq	-0x70(%rbp), %rsi
0000000000001ca0	movq	%rax, -0x78(%rbp)
0000000000001ca4	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000001ca9	movq	-0x48(%rbp), %rdi
0000000000001cad	movq	-0x50(%rbp), %rsi
0000000000001cb1	movq	-0x78(%rbp), %rdx
0000000000001cb5	callq	0x1f5d8 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
0000000000001cba	jmp	0x1cbf
0000000000001cbf	leaq	-0x58(%rbp), %rdi
0000000000001cc3	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000001cc8	movq	-0x70(%rbp), %rdi
0000000000001ccc	movq	0x8(%rdi), %rax
0000000000001cd0	leaq	-0x18(%rbp), %rdi
0000000000001cd4	leaq	-0x10(%rbp), %rsi
0000000000001cd8	movq	%rax, -0x80(%rbp)
0000000000001cdc	callq	0x1f33e ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
0000000000001ce1	xorl	%ecx, %ecx
0000000000001ce3	movl	%ecx, %esi
0000000000001ce5	subq	%rax, %rsi
0000000000001ce8	shlq	$0x3, %rsi
0000000000001cec	movq	-0x80(%rbp), %rax
0000000000001cf0	addq	%rsi, %rax
0000000000001cf3	movq	-0x70(%rbp), %rsi
0000000000001cf7	movq	%rax, 0x8(%rsi)
0000000000001cfb	movq	-0x10(%rbp), %rax
0000000000001cff	movq	%rax, -0x8(%rbp)
0000000000001d03	movq	-0x8(%rbp), %rax
0000000000001d07	addq	$0x80, %rsp
0000000000001d0e	popq	%rbp
0000000000001d0f	retq
0000000000001d10	movl	%edx, %ecx
0000000000001d12	movq	%rax, -0x60(%rbp)
0000000000001d16	movl	%ecx, -0x64(%rbp)
0000000000001d19	leaq	-0x58(%rbp), %rdi
0000000000001d1d	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000001d22	movq	-0x60(%rbp), %rdi
0000000000001d26	callq	0x1f260 ## symbol stub for: __Unwind_Resume
0000000000001d2b	ud2
0000000000001d2d	nopl	(%rax)
__ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_:
0000000000001d30	pushq	%rbp
0000000000001d31	movq	%rsp, %rbp
0000000000001d34	subq	$0x60, %rsp
0000000000001d38	movq	%rdi, -0x10(%rbp)
0000000000001d3c	movq	%rsi, -0x18(%rbp)
0000000000001d40	movq	%rdx, -0x20(%rbp)
0000000000001d44	movq	-0x10(%rbp), %rdx
0000000000001d48	movq	%rdx, -0x30(%rbp)
0000000000001d4c	movq	-0x18(%rbp), %rdx
0000000000001d50	movq	%rdx, -0x38(%rbp)
0000000000001d54	movq	-0x20(%rbp), %rdx
0000000000001d58	movq	-0x30(%rbp), %rdi
0000000000001d5c	movq	-0x38(%rbp), %rsi
0000000000001d60	callq	0x1f5c6 ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_
0000000000001d65	movq	%rax, -0x28(%rbp)
0000000000001d69	movq	-0x28(%rbp), %rax
0000000000001d6d	movq	%rax, -0x10(%rbp)
0000000000001d71	movq	-0x10(%rbp), %rax
0000000000001d75	movq	%rax, -0x40(%rbp)
0000000000001d79	leaq	-0x10(%rbp), %rdi
0000000000001d7d	leaq	-0x18(%rbp), %rsi
0000000000001d81	callq	0x1f332 ## symbol stub for: __ZN9__gnu_cxxeqIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000001d86	testb	$0x1, %al
0000000000001d88	jne	0x1d93
0000000000001d8e	jmp	0x1da0
0000000000001d93	movq	-0x10(%rbp), %rax
0000000000001d97	movq	%rax, -0x8(%rbp)
0000000000001d9b	jmp	0x1dd9
0000000000001da0	leaq	-0x40(%rbp), %rdi
0000000000001da4	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000001da9	movq	(%rax), %rax
0000000000001dac	movq	%rax, -0x48(%rbp)
0000000000001db0	movq	-0x18(%rbp), %rax
0000000000001db4	movq	%rax, -0x50(%rbp)
0000000000001db8	movq	-0x10(%rbp), %rax
0000000000001dbc	movq	%rax, -0x58(%rbp)
0000000000001dc0	movq	-0x20(%rbp), %rcx
0000000000001dc4	movq	-0x48(%rbp), %rdi
0000000000001dc8	movq	-0x50(%rbp), %rsi
0000000000001dcc	movq	-0x58(%rbp), %rdx
0000000000001dd0	callq	0x1f54e ## symbol stub for: __ZSt11remove_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_RKT1_
0000000000001dd5	movq	%rax, -0x8(%rbp)
0000000000001dd9	movq	-0x8(%rbp), %rax
0000000000001ddd	addq	$0x60, %rsp
0000000000001de1	popq	%rbp
0000000000001de2	retq
0000000000001de3	nopw	%cs:(%rax,%rax)
0000000000001ded	nopl	(%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv:
0000000000001df0	pushq	%rbp
0000000000001df1	movq	%rsp, %rbp
0000000000001df4	subq	$0x20, %rsp
0000000000001df8	movq	%rdi, -0x10(%rbp)
0000000000001dfc	movq	-0x10(%rbp), %rdi
0000000000001e00	leaq	-0x8(%rbp), %rax
0000000000001e04	movq	%rdi, -0x18(%rbp)
0000000000001e08	movq	%rax, %rdi
0000000000001e0b	movq	-0x18(%rbp), %rsi
0000000000001e0f	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000001e14	movq	-0x8(%rbp), %rax
0000000000001e18	addq	$0x20, %rsp
0000000000001e1c	popq	%rbp
0000000000001e1d	retq
0000000000001e1e	nop
__ZNSt6vectorIP12ModContainerSaIS1_EE3endEv:
0000000000001e20	pushq	%rbp
0000000000001e21	movq	%rsp, %rbp
0000000000001e24	subq	$0x20, %rsp
0000000000001e28	movq	%rdi, -0x10(%rbp)
0000000000001e2c	movq	-0x10(%rbp), %rdi
0000000000001e30	addq	$0x8, %rdi
0000000000001e34	leaq	-0x8(%rbp), %rax
0000000000001e38	movq	%rdi, -0x18(%rbp)
0000000000001e3c	movq	%rax, %rdi
0000000000001e3f	movq	-0x18(%rbp), %rsi
0000000000001e43	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000001e48	movq	-0x8(%rbp), %rax
0000000000001e4c	addq	$0x20, %rsp
0000000000001e50	popq	%rbp
0000000000001e51	retq
0000000000001e52	nopw	%cs:(%rax,%rax)
0000000000001e5c	nopl	(%rax)
__ZN12ModContainerD1Ev:
0000000000001e60	pushq	%rbp
0000000000001e61	movq	%rsp, %rbp
0000000000001e64	subq	$0x10, %rsp
0000000000001e68	movq	%rdi, -0x8(%rbp)
0000000000001e6c	movq	-0x8(%rbp), %rdi
0000000000001e70	callq	__ZN12ModContainerD2Ev ## ModContainer::~ModContainer()
0000000000001e75	addq	$0x10, %rsp
0000000000001e79	popq	%rbp
0000000000001e7a	retq
0000000000001e7b	nopl	(%rax,%rax)
__ZN12ModContainer7getNameEv:
0000000000001e80	pushq	%rbp
0000000000001e81	movq	%rsp, %rbp
0000000000001e84	movq	%rdi, -0x8(%rbp)
0000000000001e88	movq	-0x8(%rbp), %rdi
0000000000001e8c	movq	0x18(%rdi), %rax
0000000000001e90	popq	%rbp
0000000000001e91	retq
0000000000001e92	nopw	%cs:(%rax,%rax)
0000000000001e9c	nopl	(%rax)
__ZN12ModContainer13registerWriteElmPc:
0000000000001ea0	pushq	%rbp
0000000000001ea1	movq	%rsp, %rbp
0000000000001ea4	subq	$0x70, %rsp
0000000000001ea8	movq	%rdi, -0x8(%rbp)
0000000000001eac	movq	%rsi, -0x10(%rbp)
0000000000001eb0	movq	%rdx, -0x18(%rbp)
0000000000001eb4	movq	%rcx, -0x20(%rbp)
0000000000001eb8	movq	-0x8(%rbp), %rdi
0000000000001ebc	movq	-0x10(%rbp), %rsi
0000000000001ec0	movq	-0x18(%rbp), %rdx
0000000000001ec4	movq	-0x20(%rbp), %rcx
0000000000001ec8	leaq	-0x48(%rbp), %rax
0000000000001ecc	movq	%rdi, -0x68(%rbp)
0000000000001ed0	movq	%rax, %rdi
0000000000001ed3	movq	%rax, -0x70(%rbp)
0000000000001ed7	callq	__ZN15MemoryContainerC1ElmPc ## MemoryContainer::MemoryContainer(long, unsigned long, char*)
0000000000001edc	movq	-0x70(%rbp), %rax
0000000000001ee0	movq	%rax, -0x50(%rbp)
0000000000001ee4	leaq	-0x50(%rbp), %rsi
0000000000001ee8	movq	-0x68(%rbp), %rdi
0000000000001eec	callq	0x1f512 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
0000000000001ef1	jmp	0x1ef6
0000000000001ef6	leaq	-0x48(%rbp), %rdi
0000000000001efa	callq	__ZN15MemoryContainerD1Ev ## MemoryContainer::~MemoryContainer()
0000000000001eff	addq	$0x70, %rsp
0000000000001f03	popq	%rbp
0000000000001f04	retq
0000000000001f05	movl	%edx, %ecx
0000000000001f07	movq	%rax, -0x58(%rbp)
0000000000001f0b	movl	%ecx, -0x5c(%rbp)
0000000000001f0e	leaq	-0x48(%rbp), %rdi
0000000000001f12	callq	__ZN15MemoryContainerD1Ev ## MemoryContainer::~MemoryContainer()
0000000000001f17	movq	-0x58(%rbp), %rdi
0000000000001f1b	callq	0x1f260 ## symbol stub for: __Unwind_Resume
0000000000001f20	ud2
0000000000001f22	nopw	%cs:(%rax,%rax)
0000000000001f2c	nopl	(%rax)
__ZN12ModContainer11getOriginalEl:
0000000000001f30	pushq	%rbp
0000000000001f31	movq	%rsp, %rbp
0000000000001f34	subq	$0x60, %rsp
0000000000001f38	movq	%rdi, -0x8(%rbp)
0000000000001f3c	movq	%rsi, -0x10(%rbp)
0000000000001f40	movq	-0x8(%rbp), %rsi
0000000000001f44	movq	%rsi, -0x18(%rbp)
0000000000001f48	movq	-0x18(%rbp), %rdi
0000000000001f4c	callq	0x1f50c ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
0000000000001f51	movq	%rax, -0x20(%rbp)
0000000000001f55	movq	-0x18(%rbp), %rdi
0000000000001f59	callq	0x1f506 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
0000000000001f5e	movq	%rax, -0x28(%rbp)
0000000000001f62	leaq	-0x20(%rbp), %rdi
0000000000001f66	leaq	-0x28(%rbp), %rsi
0000000000001f6a	callq	0x1f34a ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000001f6f	testb	$0x1, %al
0000000000001f71	jne	0x1f7c
0000000000001f77	jmp	0x2018
0000000000001f7c	leaq	-0x20(%rbp), %rdi
0000000000001f80	callq	0x1f386 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000001f85	movq	(%rax), %rax
0000000000001f88	movq	%rax, -0x30(%rbp)
0000000000001f8c	movq	-0x30(%rbp), %rax
0000000000001f90	movq	0x8(%rax), %rax
0000000000001f94	cmpq	-0x10(%rbp), %rax
0000000000001f98	jne	0x2001
0000000000001f9e	movq	-0x30(%rbp), %rax
0000000000001fa2	cmpq	$0x0, %rax
0000000000001fa6	movq	%rax, -0x38(%rbp)
0000000000001faa	je	0x1fe2
0000000000001fb0	leaq	__ZTI13BaseContainer(%rip), %rax ## typeinfo for BaseContainer
0000000000001fb7	leaq	__ZTI13HookContainer(%rip), %rcx ## typeinfo for HookContainer
0000000000001fbe	xorl	%edx, %edx
0000000000001fc0	movl	%edx, %esi
0000000000001fc2	movq	-0x38(%rbp), %rdi
0000000000001fc6	movq	%rsi, -0x40(%rbp)
0000000000001fca	movq	%rax, %rsi
0000000000001fcd	movq	%rcx, %rdx
0000000000001fd0	movq	-0x40(%rbp), %rcx
0000000000001fd4	callq	0x1f644 ## symbol stub for: ___dynamic_cast
0000000000001fd9	movq	%rax, -0x48(%rbp)
0000000000001fdd	jmp	0x1fef
0000000000001fe2	xorl	%eax, %eax
0000000000001fe4	movl	%eax, %ecx
0000000000001fe6	movq	%rcx, -0x48(%rbp)
0000000000001fea	jmp	0x1fef
0000000000001fef	movq	-0x48(%rbp), %rax
0000000000001ff3	movq	%rax, %rdi
0000000000001ff6	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
0000000000001ffb	addq	$0x60, %rsp
0000000000001fff	popq	%rbp
0000000000002000	retq
0000000000002001	jmp	0x2006
0000000000002006	leaq	-0x20(%rbp), %rdi
000000000000200a	callq	0x1f32c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000200f	movq	%rax, -0x50(%rbp)
0000000000002013	jmp	0x1f62
0000000000002018	movl	$0x8, %edi
000000000000201d	callq	0x1f61a ## symbol stub for: ___cxa_allocate_exception
0000000000002022	movq	$0x0, (%rax)
0000000000002029	movq	%rax, %rdi
000000000000202c	movq	%rax, -0x58(%rbp)
0000000000002030	callq	0x1f284 ## symbol stub for: __ZN25OriginalNotFoundExceptionC1Ev
0000000000002035	movq	0x63ff4(%rip), %rsi ## literal pool symbol address: __ZTI25OriginalNotFoundException
000000000000203c	movq	0x63fc5(%rip), %rdx ## literal pool symbol address: __ZN25OriginalNotFoundExceptionD1Ev
0000000000002043	movq	-0x58(%rbp), %rdi
0000000000002047	callq	0x1f63e ## symbol stub for: ___cxa_throw
000000000000204c	nopl	(%rax)
__ZN25OriginalNotFoundExceptionC1Ev:
0000000000002050	pushq	%rbp
0000000000002051	movq	%rsp, %rbp
0000000000002054	subq	$0x10, %rsp
0000000000002058	movq	%rdi, -0x8(%rbp)
000000000000205c	movq	-0x8(%rbp), %rdi
0000000000002060	callq	0x1f28a ## symbol stub for: __ZN25OriginalNotFoundExceptionC2Ev
0000000000002065	addq	$0x10, %rsp
0000000000002069	popq	%rbp
000000000000206a	retq
000000000000206b	nopl	(%rax,%rax)
__ZN25OriginalNotFoundExceptionD1Ev:
0000000000002070	pushq	%rbp
0000000000002071	movq	%rsp, %rbp
0000000000002074	subq	$0x10, %rsp
0000000000002078	movq	%rdi, -0x8(%rbp)
000000000000207c	movq	-0x8(%rbp), %rdi
0000000000002080	callq	0x1f296 ## symbol stub for: __ZN25OriginalNotFoundExceptionD2Ev
0000000000002085	addq	$0x10, %rsp
0000000000002089	popq	%rbp
000000000000208a	retq
000000000000208b	nopl	(%rax,%rax)
__Z7getBasev:
0000000000002090	pushq	%rbp
0000000000002091	movq	%rsp, %rbp
0000000000002094	xorl	%edi, %edi
0000000000002096	callq	0x1f662 ## symbol stub for: __dyld_get_image_vmaddr_slide
000000000000209b	movabsq	$0x100000000, %rcx
00000000000020a5	addq	%rcx, %rax
00000000000020a8	popq	%rbp
00000000000020a9	retq
00000000000020aa	nopw	(%rax,%rax)
__ZN25OriginalNotFoundExceptionC2Ev:
00000000000020b0	pushq	%rbp
00000000000020b1	movq	%rsp, %rbp
00000000000020b4	subq	$0x10, %rsp
00000000000020b8	movq	%rdi, -0x8(%rbp)
00000000000020bc	movq	-0x8(%rbp), %rdi
00000000000020c0	movq	%rdi, %rax
00000000000020c3	movq	%rdi, -0x10(%rbp)
00000000000020c7	movq	%rax, %rdi
00000000000020ca	callq	0x1f536 ## symbol stub for: __ZNSt9exceptionC2Ev
00000000000020cf	movq	0x63f62(%rip), %rax ## literal pool symbol address: __ZTV25OriginalNotFoundException
00000000000020d6	addq	$0x10, %rax
00000000000020da	movq	-0x10(%rbp), %rdi
00000000000020de	movq	%rax, (%rdi)
00000000000020e1	addq	$0x10, %rsp
00000000000020e5	popq	%rbp
00000000000020e6	retq
00000000000020e7	nopw	(%rax,%rax)
__ZNSt9exceptionC2Ev:
00000000000020f0	pushq	%rbp
00000000000020f1	movq	%rsp, %rbp
00000000000020f4	movq	0x63f4d(%rip), %rax ## literal pool symbol address: __ZTVSt9exception
00000000000020fb	addq	$0x10, %rax
00000000000020ff	movq	%rdi, -0x8(%rbp)
0000000000002103	movq	-0x8(%rbp), %rdi
0000000000002107	movq	%rax, (%rdi)
000000000000210a	popq	%rbp
000000000000210b	retq
000000000000210c	nopl	(%rax)
__ZN25OriginalNotFoundExceptionD0Ev:
0000000000002110	pushq	%rbp
0000000000002111	movq	%rsp, %rbp
0000000000002114	subq	$0x10, %rsp
0000000000002118	movq	%rdi, -0x8(%rbp)
000000000000211c	movq	-0x8(%rbp), %rdi
0000000000002120	movq	%rdi, -0x10(%rbp)
0000000000002124	callq	0x1f290 ## symbol stub for: __ZN25OriginalNotFoundExceptionD1Ev
0000000000002129	movq	-0x10(%rbp), %rdi
000000000000212d	callq	0x1f602 ## symbol stub for: __ZdlPv
0000000000002132	addq	$0x10, %rsp
0000000000002136	popq	%rbp
0000000000002137	retq
0000000000002138	nopl	(%rax,%rax)
__ZNK25OriginalNotFoundException4whatEv:
0000000000002140	pushq	%rbp
0000000000002141	movq	%rsp, %rbp
0000000000002144	movq	%rdi, -0x8(%rbp)
0000000000002148	leaq	0x5e78b(%rip), %rax ## literal pool for: "Cannot find the original address of this function"
000000000000214f	popq	%rbp
0000000000002150	retq
0000000000002151	nopw	%cs:(%rax,%rax)
000000000000215b	nopl	(%rax,%rax)
__ZN25OriginalNotFoundExceptionD2Ev:
0000000000002160	pushq	%rbp
0000000000002161	movq	%rsp, %rbp
0000000000002164	subq	$0x10, %rsp
0000000000002168	movq	%rdi, -0x8(%rbp)
000000000000216c	movq	-0x8(%rbp), %rdi
0000000000002170	callq	0x1f53c ## symbol stub for: __ZNSt9exceptionD2Ev
0000000000002175	addq	$0x10, %rsp
0000000000002179	popq	%rbp
000000000000217a	retq
000000000000217b	nopl	(%rax,%rax)
__ZNSaIP12ModContainerEC2Ev:
0000000000002180	pushq	%rbp
0000000000002181	movq	%rsp, %rbp
0000000000002184	subq	$0x10, %rsp
0000000000002188	movq	%rdi, -0x8(%rbp)
000000000000218c	movq	-0x8(%rbp), %rdi
0000000000002190	callq	0x1f2c0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2Ev
0000000000002195	addq	$0x10, %rsp
0000000000002199	popq	%rbp
000000000000219a	retq
000000000000219b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2Ev:
00000000000021a0	pushq	%rbp
00000000000021a1	movq	%rsp, %rbp
00000000000021a4	movq	%rdi, -0x8(%rbp)
00000000000021a8	popq	%rbp
00000000000021a9	retq
00000000000021aa	nopw	(%rax,%rax)
__ZNSaIP12ModContainerED2Ev:
00000000000021b0	pushq	%rbp
00000000000021b1	movq	%rsp, %rbp
00000000000021b4	subq	$0x10, %rsp
00000000000021b8	movq	%rdi, -0x8(%rbp)
00000000000021bc	movq	-0x8(%rbp), %rdi
00000000000021c0	callq	0x1f2c6 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerED2Ev
00000000000021c5	addq	$0x10, %rsp
00000000000021c9	popq	%rbp
00000000000021ca	retq
00000000000021cb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerED2Ev:
00000000000021d0	pushq	%rbp
00000000000021d1	movq	%rsp, %rbp
00000000000021d4	movq	%rdi, -0x8(%rbp)
00000000000021d8	popq	%rbp
00000000000021d9	retq
00000000000021da	nopw	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EEC2ERKS2_:
00000000000021e0	pushq	%rbp
00000000000021e1	movq	%rsp, %rbp
00000000000021e4	subq	$0x20, %rsp
00000000000021e8	movq	%rdi, -0x8(%rbp)
00000000000021ec	movq	%rsi, -0x10(%rbp)
00000000000021f0	movq	-0x8(%rbp), %rsi
00000000000021f4	movq	-0x10(%rbp), %rdi
00000000000021f8	movq	%rdi, -0x18(%rbp)
00000000000021fc	movq	%rsi, %rdi
00000000000021ff	movq	-0x18(%rbp), %rsi
0000000000002203	callq	0x1f452 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EEC2ERKS2_
0000000000002208	addq	$0x20, %rsp
000000000000220c	popq	%rbp
000000000000220d	retq
000000000000220e	nop
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EEC2ERKS2_:
0000000000002210	pushq	%rbp
0000000000002211	movq	%rsp, %rbp
0000000000002214	subq	$0x10, %rsp
0000000000002218	movq	%rdi, -0x8(%rbp)
000000000000221c	movq	%rsi, -0x10(%rbp)
0000000000002220	movq	-0x8(%rbp), %rdi
0000000000002224	movq	-0x10(%rbp), %rsi
0000000000002228	callq	0x1f434 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC1ERKS2_
000000000000222d	addq	$0x10, %rsp
0000000000002231	popq	%rbp
0000000000002232	retq
0000000000002233	nopw	%cs:(%rax,%rax)
000000000000223d	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC1ERKS2_:
0000000000002240	pushq	%rbp
0000000000002241	movq	%rsp, %rbp
0000000000002244	subq	$0x10, %rsp
0000000000002248	movq	%rdi, -0x8(%rbp)
000000000000224c	movq	%rsi, -0x10(%rbp)
0000000000002250	movq	-0x8(%rbp), %rdi
0000000000002254	movq	-0x10(%rbp), %rsi
0000000000002258	callq	0x1f43a ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC2ERKS2_
000000000000225d	addq	$0x10, %rsp
0000000000002261	popq	%rbp
0000000000002262	retq
0000000000002263	nopw	%cs:(%rax,%rax)
000000000000226d	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC2ERKS2_:
0000000000002270	pushq	%rbp
0000000000002271	movq	%rsp, %rbp
0000000000002274	subq	$0x20, %rsp
0000000000002278	movq	%rdi, -0x8(%rbp)
000000000000227c	movq	%rsi, -0x10(%rbp)
0000000000002280	movq	-0x8(%rbp), %rsi
0000000000002284	movq	%rsi, %rdi
0000000000002287	movq	-0x10(%rbp), %rax
000000000000228b	movq	%rsi, -0x18(%rbp)
000000000000228f	movq	%rax, %rsi
0000000000002292	callq	0x1f3ce ## symbol stub for: __ZNSaIP12ModContainerEC2ERKS1_
0000000000002297	movq	-0x18(%rbp), %rax
000000000000229b	movq	$0x0, (%rax)
00000000000022a2	movq	$0x0, 0x8(%rax)
00000000000022aa	movq	$0x0, 0x10(%rax)
00000000000022b2	addq	$0x20, %rsp
00000000000022b6	popq	%rbp
00000000000022b7	retq
00000000000022b8	nopl	(%rax,%rax)
__ZNSaIP12ModContainerEC2ERKS1_:
00000000000022c0	pushq	%rbp
00000000000022c1	movq	%rsp, %rbp
00000000000022c4	subq	$0x20, %rsp
00000000000022c8	movq	%rdi, -0x8(%rbp)
00000000000022cc	movq	%rsi, -0x10(%rbp)
00000000000022d0	movq	-0x8(%rbp), %rsi
00000000000022d4	movq	-0x10(%rbp), %rdi
00000000000022d8	movq	%rdi, -0x18(%rbp)
00000000000022dc	movq	%rsi, %rdi
00000000000022df	movq	-0x18(%rbp), %rsi
00000000000022e3	callq	0x1f2ba ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2ERKS3_
00000000000022e8	addq	$0x20, %rsp
00000000000022ec	popq	%rbp
00000000000022ed	retq
00000000000022ee	nop
__ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2ERKS3_:
00000000000022f0	pushq	%rbp
00000000000022f1	movq	%rsp, %rbp
00000000000022f4	movq	%rdi, -0x8(%rbp)
00000000000022f8	movq	%rsi, -0x10(%rbp)
00000000000022fc	popq	%rbp
00000000000022fd	retq
00000000000022fe	nop
__ZNSt6vectorIP12ModContainerSaIS1_EED2Ev:
0000000000002300	pushq	%rbp
0000000000002301	movq	%rsp, %rbp
0000000000002304	subq	$0x40, %rsp
0000000000002308	movq	%rdi, -0x8(%rbp)
000000000000230c	movq	-0x8(%rbp), %rdi
0000000000002310	movq	(%rdi), %rax
0000000000002313	movq	0x8(%rdi), %rsi
0000000000002317	leaq	-0x10(%rbp), %rcx
000000000000231b	movq	%rdi, -0x28(%rbp)
000000000000231f	movq	%rcx, %rdi
0000000000002322	movq	-0x28(%rbp), %rcx
0000000000002326	movq	%rsi, -0x30(%rbp)
000000000000232a	movq	%rcx, %rsi
000000000000232d	movq	%rax, -0x38(%rbp)
0000000000002331	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002336	jmp	0x233b
000000000000233b	leaq	-0x10(%rbp), %rdx
000000000000233f	movq	-0x38(%rbp), %rdi
0000000000002343	movq	-0x30(%rbp), %rsi
0000000000002347	callq	0x1f5de ## symbol stub for: __ZSt8_DestroyIPP12ModContainerSaIS1_EEvT_S4_T0_
000000000000234c	jmp	0x2351
0000000000002351	leaq	-0x10(%rbp), %rdi
0000000000002355	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
000000000000235a	movq	-0x28(%rbp), %rdi
000000000000235e	callq	0x1f458 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev
0000000000002363	addq	$0x40, %rsp
0000000000002367	popq	%rbp
0000000000002368	retq
0000000000002369	movl	%edx, %ecx
000000000000236b	movq	%rax, -0x18(%rbp)
000000000000236f	movl	%ecx, -0x1c(%rbp)
0000000000002372	jmp	0x2389
0000000000002377	movl	%edx, %ecx
0000000000002379	movq	%rax, -0x18(%rbp)
000000000000237d	movl	%ecx, -0x1c(%rbp)
0000000000002380	leaq	-0x10(%rbp), %rdi
0000000000002384	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002389	movq	-0x28(%rbp), %rax
000000000000238d	movq	%rax, %rdi
0000000000002390	callq	0x1f458 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev
0000000000002395	movq	-0x18(%rbp), %rdi
0000000000002399	callq	0x1f62c ## symbol stub for: ___cxa_call_unexpected
000000000000239e	nop
__ZSt8_DestroyIPP12ModContainerSaIS1_EEvT_S4_T0_:
00000000000023a0	pushq	%rbp
00000000000023a1	movq	%rsp, %rbp
00000000000023a4	subq	$0x20, %rsp
00000000000023a8	movq	%rdi, -0x8(%rbp)
00000000000023ac	movq	%rsi, -0x10(%rbp)
00000000000023b0	movq	%rdx, -0x18(%rbp)
00000000000023b4	movq	-0x8(%rbp), %rax
00000000000023b8	cmpq	-0x10(%rbp), %rax
00000000000023bc	je	0x23e3
00000000000023c2	movq	-0x18(%rbp), %rax
00000000000023c6	movq	-0x8(%rbp), %rsi
00000000000023ca	movq	%rax, %rdi
00000000000023cd	callq	0x1f2a8 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_
00000000000023d2	movq	-0x8(%rbp), %rax
00000000000023d6	addq	$0x8, %rax
00000000000023da	movq	%rax, -0x8(%rbp)
00000000000023de	jmp	0x23b4
00000000000023e3	addq	$0x20, %rsp
00000000000023e7	popq	%rbp
00000000000023e8	retq
00000000000023e9	nopl	(%rax)
__ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv:
00000000000023f0	pushq	%rbp
00000000000023f1	movq	%rsp, %rbp
00000000000023f4	subq	$0x10, %rsp
00000000000023f8	movq	%rdi, %rax
00000000000023fb	movq	%rsi, -0x8(%rbp)
00000000000023ff	movq	-0x8(%rbp), %rsi
0000000000002403	movq	%rax, -0x10(%rbp)
0000000000002407	callq	0x1f3c2 ## symbol stub for: __ZNSaIP12ModContainerEC1ERKS1_
000000000000240c	movq	-0x10(%rbp), %rax
0000000000002410	addq	$0x10, %rsp
0000000000002414	popq	%rbp
0000000000002415	retq
0000000000002416	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev:
0000000000002420	pushq	%rbp
0000000000002421	movq	%rsp, %rbp
0000000000002424	subq	$0x20, %rsp
0000000000002428	movq	%rdi, -0x8(%rbp)
000000000000242c	movq	-0x8(%rbp), %rdi
0000000000002430	movq	(%rdi), %rax
0000000000002433	movq	0x10(%rdi), %rcx
0000000000002437	subq	%rax, %rcx
000000000000243a	sarq	$0x3, %rcx
000000000000243e	movq	%rdi, -0x20(%rbp)
0000000000002442	movq	%rax, %rsi
0000000000002445	movq	%rcx, %rdx
0000000000002448	callq	0x1f44c ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
000000000000244d	jmp	0x2452
0000000000002452	movq	-0x20(%rbp), %rdi
0000000000002456	callq	0x1f440 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev
000000000000245b	addq	$0x20, %rsp
000000000000245f	popq	%rbp
0000000000002460	retq
0000000000002461	movl	%edx, %ecx
0000000000002463	movq	%rax, -0x10(%rbp)
0000000000002467	movl	%ecx, -0x14(%rbp)
000000000000246a	movq	-0x20(%rbp), %rdi
000000000000246e	callq	0x1f440 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev
0000000000002473	movq	-0x10(%rbp), %rdi
0000000000002477	callq	0x1f62c ## symbol stub for: ___cxa_call_unexpected
000000000000247c	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_:
0000000000002480	pushq	%rbp
0000000000002481	movq	%rsp, %rbp
0000000000002484	movq	%rdi, -0x8(%rbp)
0000000000002488	movq	%rsi, -0x10(%rbp)
000000000000248c	popq	%rbp
000000000000248d	retq
000000000000248e	nop
__ZNSaIP12ModContainerEC1ERKS1_:
0000000000002490	pushq	%rbp
0000000000002491	movq	%rsp, %rbp
0000000000002494	subq	$0x10, %rsp
0000000000002498	movq	%rdi, -0x8(%rbp)
000000000000249c	movq	%rsi, -0x10(%rbp)
00000000000024a0	movq	-0x8(%rbp), %rdi
00000000000024a4	movq	-0x10(%rbp), %rsi
00000000000024a8	callq	0x1f3ce ## symbol stub for: __ZNSaIP12ModContainerEC2ERKS1_
00000000000024ad	addq	$0x10, %rsp
00000000000024b1	popq	%rbp
00000000000024b2	retq
00000000000024b3	nopw	%cs:(%rax,%rax)
00000000000024bd	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m:
00000000000024c0	pushq	%rbp
00000000000024c1	movq	%rsp, %rbp
00000000000024c4	subq	$0x20, %rsp
00000000000024c8	movq	%rdi, -0x8(%rbp)
00000000000024cc	movq	%rsi, -0x10(%rbp)
00000000000024d0	movq	%rdx, -0x18(%rbp)
00000000000024d4	movq	-0x8(%rbp), %rdx
00000000000024d8	cmpq	$0x0, -0x10(%rbp)
00000000000024dd	movq	%rdx, -0x20(%rbp)
00000000000024e1	je	0x24fb
00000000000024e7	movq	-0x20(%rbp), %rax
00000000000024eb	movq	-0x10(%rbp), %rsi
00000000000024ef	movq	-0x18(%rbp), %rdx
00000000000024f3	movq	%rax, %rdi
00000000000024f6	callq	0x1f2a2 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE10deallocateEPS2_m
00000000000024fb	addq	$0x20, %rsp
00000000000024ff	popq	%rbp
0000000000002500	retq
0000000000002501	nopw	%cs:(%rax,%rax)
000000000000250b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev:
0000000000002510	pushq	%rbp
0000000000002511	movq	%rsp, %rbp
0000000000002514	subq	$0x10, %rsp
0000000000002518	movq	%rdi, -0x8(%rbp)
000000000000251c	movq	-0x8(%rbp), %rdi
0000000000002520	callq	0x1f446 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD2Ev
0000000000002525	addq	$0x10, %rsp
0000000000002529	popq	%rbp
000000000000252a	retq
000000000000252b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE10deallocateEPS2_m:
0000000000002530	pushq	%rbp
0000000000002531	movq	%rsp, %rbp
0000000000002534	subq	$0x20, %rsp
0000000000002538	movq	%rdi, -0x8(%rbp)
000000000000253c	movq	%rsi, -0x10(%rbp)
0000000000002540	movq	%rdx, -0x18(%rbp)
0000000000002544	movq	-0x10(%rbp), %rdx
0000000000002548	movq	%rdx, %rdi
000000000000254b	callq	0x1f602 ## symbol stub for: __ZdlPv
0000000000002550	addq	$0x20, %rsp
0000000000002554	popq	%rbp
0000000000002555	retq
0000000000002556	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD2Ev:
0000000000002560	pushq	%rbp
0000000000002561	movq	%rsp, %rbp
0000000000002564	subq	$0x10, %rsp
0000000000002568	movq	%rdi, -0x8(%rbp)
000000000000256c	movq	-0x8(%rbp), %rdi
0000000000002570	callq	0x1f3e0 ## symbol stub for: __ZNSaIP12ModContainerED2Ev
0000000000002575	addq	$0x10, %rsp
0000000000002579	popq	%rbp
000000000000257a	retq
000000000000257b	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_:
0000000000002580	pushq	%rbp
0000000000002581	movq	%rsp, %rbp
0000000000002584	subq	$0x10, %rsp
0000000000002588	movq	%rdi, -0x8(%rbp)
000000000000258c	movq	%rsi, -0x10(%rbp)
0000000000002590	movq	-0x8(%rbp), %rdi
0000000000002594	movq	-0x10(%rbp), %rsi
0000000000002598	callq	0x1f326 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_
000000000000259d	addq	$0x10, %rsp
00000000000025a1	popq	%rbp
00000000000025a2	retq
00000000000025a3	nopw	%cs:(%rax,%rax)
00000000000025ad	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_:
00000000000025b0	pushq	%rbp
00000000000025b1	movq	%rsp, %rbp
00000000000025b4	movq	%rdi, -0x8(%rbp)
00000000000025b8	movq	%rsi, -0x10(%rbp)
00000000000025bc	movq	-0x8(%rbp), %rsi
00000000000025c0	movq	-0x10(%rbp), %rdi
00000000000025c4	movq	(%rdi), %rdi
00000000000025c7	movq	%rdi, (%rsi)
00000000000025ca	popq	%rbp
00000000000025cb	retq
00000000000025cc	nopl	(%rax)
__ZNSaIP13BaseContainerEC2Ev:
00000000000025d0	pushq	%rbp
00000000000025d1	movq	%rsp, %rbp
00000000000025d4	subq	$0x10, %rsp
00000000000025d8	movq	%rdi, -0x8(%rbp)
00000000000025dc	movq	-0x8(%rbp), %rdi
00000000000025e0	callq	0x1f2ea ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2Ev
00000000000025e5	addq	$0x10, %rsp
00000000000025e9	popq	%rbp
00000000000025ea	retq
00000000000025eb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2Ev:
00000000000025f0	pushq	%rbp
00000000000025f1	movq	%rsp, %rbp
00000000000025f4	movq	%rdi, -0x8(%rbp)
00000000000025f8	popq	%rbp
00000000000025f9	retq
00000000000025fa	nopw	(%rax,%rax)
__ZNSaIP13BaseContainerED2Ev:
0000000000002600	pushq	%rbp
0000000000002601	movq	%rsp, %rbp
0000000000002604	subq	$0x10, %rsp
0000000000002608	movq	%rdi, -0x8(%rbp)
000000000000260c	movq	-0x8(%rbp), %rdi
0000000000002610	callq	0x1f2f0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerED2Ev
0000000000002615	addq	$0x10, %rsp
0000000000002619	popq	%rbp
000000000000261a	retq
000000000000261b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerED2Ev:
0000000000002620	pushq	%rbp
0000000000002621	movq	%rsp, %rbp
0000000000002624	movq	%rdi, -0x8(%rbp)
0000000000002628	popq	%rbp
0000000000002629	retq
000000000000262a	nopw	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EEC2ERKS2_:
0000000000002630	pushq	%rbp
0000000000002631	movq	%rsp, %rbp
0000000000002634	subq	$0x20, %rsp
0000000000002638	movq	%rdi, -0x8(%rbp)
000000000000263c	movq	%rsi, -0x10(%rbp)
0000000000002640	movq	-0x8(%rbp), %rsi
0000000000002644	movq	-0x10(%rbp), %rdi
0000000000002648	movq	%rdi, -0x18(%rbp)
000000000000264c	movq	%rsi, %rdi
000000000000264f	movq	-0x18(%rbp), %rsi
0000000000002653	callq	0x1f488 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EEC2ERKS2_
0000000000002658	addq	$0x20, %rsp
000000000000265c	popq	%rbp
000000000000265d	retq
000000000000265e	nop
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EEC2ERKS2_:
0000000000002660	pushq	%rbp
0000000000002661	movq	%rsp, %rbp
0000000000002664	subq	$0x10, %rsp
0000000000002668	movq	%rdi, -0x8(%rbp)
000000000000266c	movq	%rsi, -0x10(%rbp)
0000000000002670	movq	-0x8(%rbp), %rdi
0000000000002674	movq	-0x10(%rbp), %rsi
0000000000002678	callq	0x1f464 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC1ERKS2_
000000000000267d	addq	$0x10, %rsp
0000000000002681	popq	%rbp
0000000000002682	retq
0000000000002683	nopw	%cs:(%rax,%rax)
000000000000268d	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC1ERKS2_:
0000000000002690	pushq	%rbp
0000000000002691	movq	%rsp, %rbp
0000000000002694	subq	$0x10, %rsp
0000000000002698	movq	%rdi, -0x8(%rbp)
000000000000269c	movq	%rsi, -0x10(%rbp)
00000000000026a0	movq	-0x8(%rbp), %rdi
00000000000026a4	movq	-0x10(%rbp), %rsi
00000000000026a8	callq	0x1f46a ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC2ERKS2_
00000000000026ad	addq	$0x10, %rsp
00000000000026b1	popq	%rbp
00000000000026b2	retq
00000000000026b3	nopw	%cs:(%rax,%rax)
00000000000026bd	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC2ERKS2_:
00000000000026c0	pushq	%rbp
00000000000026c1	movq	%rsp, %rbp
00000000000026c4	subq	$0x20, %rsp
00000000000026c8	movq	%rdi, -0x8(%rbp)
00000000000026cc	movq	%rsi, -0x10(%rbp)
00000000000026d0	movq	-0x8(%rbp), %rsi
00000000000026d4	movq	%rsi, %rdi
00000000000026d7	movq	-0x10(%rbp), %rax
00000000000026db	movq	%rsi, -0x18(%rbp)
00000000000026df	movq	%rax, %rsi
00000000000026e2	callq	0x1f3f2 ## symbol stub for: __ZNSaIP13BaseContainerEC2ERKS1_
00000000000026e7	movq	-0x18(%rbp), %rax
00000000000026eb	movq	$0x0, (%rax)
00000000000026f2	movq	$0x0, 0x8(%rax)
00000000000026fa	movq	$0x0, 0x10(%rax)
0000000000002702	addq	$0x20, %rsp
0000000000002706	popq	%rbp
0000000000002707	retq
0000000000002708	nopl	(%rax,%rax)
__ZNSaIP13BaseContainerEC2ERKS1_:
0000000000002710	pushq	%rbp
0000000000002711	movq	%rsp, %rbp
0000000000002714	subq	$0x20, %rsp
0000000000002718	movq	%rdi, -0x8(%rbp)
000000000000271c	movq	%rsi, -0x10(%rbp)
0000000000002720	movq	-0x8(%rbp), %rsi
0000000000002724	movq	-0x10(%rbp), %rdi
0000000000002728	movq	%rdi, -0x18(%rbp)
000000000000272c	movq	%rsi, %rdi
000000000000272f	movq	-0x18(%rbp), %rsi
0000000000002733	callq	0x1f2e4 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2ERKS3_
0000000000002738	addq	$0x20, %rsp
000000000000273c	popq	%rbp
000000000000273d	retq
000000000000273e	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2ERKS3_:
0000000000002740	pushq	%rbp
0000000000002741	movq	%rsp, %rbp
0000000000002744	movq	%rdi, -0x8(%rbp)
0000000000002748	movq	%rsi, -0x10(%rbp)
000000000000274c	popq	%rbp
000000000000274d	retq
000000000000274e	nop
__ZNSt6vectorIP13BaseContainerSaIS1_EED2Ev:
0000000000002750	pushq	%rbp
0000000000002751	movq	%rsp, %rbp
0000000000002754	subq	$0x40, %rsp
0000000000002758	movq	%rdi, -0x8(%rbp)
000000000000275c	movq	-0x8(%rbp), %rdi
0000000000002760	movq	(%rdi), %rax
0000000000002763	movq	0x8(%rdi), %rsi
0000000000002767	leaq	-0x10(%rbp), %rcx
000000000000276b	movq	%rdi, -0x28(%rbp)
000000000000276f	movq	%rcx, %rdi
0000000000002772	movq	-0x28(%rbp), %rcx
0000000000002776	movq	%rsi, -0x30(%rbp)
000000000000277a	movq	%rcx, %rsi
000000000000277d	movq	%rax, -0x38(%rbp)
0000000000002781	callq	0x1f392 ## symbol stub for: __ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE13get_allocatorEv
0000000000002786	jmp	0x278b
000000000000278b	leaq	-0x10(%rbp), %rdx
000000000000278f	movq	-0x38(%rbp), %rdi
0000000000002793	movq	-0x30(%rbp), %rsi
0000000000002797	callq	0x1f5f0 ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerSaIS1_EEvT_S4_T0_
000000000000279c	jmp	0x27a1
00000000000027a1	leaq	-0x10(%rbp), %rdi
00000000000027a5	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000027aa	movq	-0x28(%rbp), %rdi
00000000000027ae	callq	0x1f48e ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev
00000000000027b3	addq	$0x40, %rsp
00000000000027b7	popq	%rbp
00000000000027b8	retq
00000000000027b9	movl	%edx, %ecx
00000000000027bb	movq	%rax, -0x18(%rbp)
00000000000027bf	movl	%ecx, -0x1c(%rbp)
00000000000027c2	jmp	0x27d9
00000000000027c7	movl	%edx, %ecx
00000000000027c9	movq	%rax, -0x18(%rbp)
00000000000027cd	movl	%ecx, -0x1c(%rbp)
00000000000027d0	leaq	-0x10(%rbp), %rdi
00000000000027d4	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000027d9	movq	-0x28(%rbp), %rax
00000000000027dd	movq	%rax, %rdi
00000000000027e0	callq	0x1f48e ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev
00000000000027e5	movq	-0x18(%rbp), %rdi
00000000000027e9	callq	0x1f62c ## symbol stub for: ___cxa_call_unexpected
00000000000027ee	nop
__ZSt8_DestroyIPP13BaseContainerSaIS1_EEvT_S4_T0_:
00000000000027f0	pushq	%rbp
00000000000027f1	movq	%rsp, %rbp
00000000000027f4	subq	$0x20, %rsp
00000000000027f8	movq	%rdi, -0x8(%rbp)
00000000000027fc	movq	%rsi, -0x10(%rbp)
0000000000002800	movq	%rdx, -0x18(%rbp)
0000000000002804	movq	-0x8(%rbp), %rax
0000000000002808	cmpq	-0x10(%rbp), %rax
000000000000280c	je	0x2833
0000000000002812	movq	-0x18(%rbp), %rax
0000000000002816	movq	-0x8(%rbp), %rsi
000000000000281a	movq	%rax, %rdi
000000000000281d	callq	0x1f2d2 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_
0000000000002822	movq	-0x8(%rbp), %rax
0000000000002826	addq	$0x8, %rax
000000000000282a	movq	%rax, -0x8(%rbp)
000000000000282e	jmp	0x2804
0000000000002833	addq	$0x20, %rsp
0000000000002837	popq	%rbp
0000000000002838	retq
0000000000002839	nopl	(%rax)
__ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE13get_allocatorEv:
0000000000002840	pushq	%rbp
0000000000002841	movq	%rsp, %rbp
0000000000002844	subq	$0x10, %rsp
0000000000002848	movq	%rdi, %rax
000000000000284b	movq	%rsi, -0x8(%rbp)
000000000000284f	movq	-0x8(%rbp), %rsi
0000000000002853	movq	%rax, -0x10(%rbp)
0000000000002857	callq	0x1f3e6 ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000000285c	movq	-0x10(%rbp), %rax
0000000000002860	addq	$0x10, %rsp
0000000000002864	popq	%rbp
0000000000002865	retq
0000000000002866	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev:
0000000000002870	pushq	%rbp
0000000000002871	movq	%rsp, %rbp
0000000000002874	subq	$0x20, %rsp
0000000000002878	movq	%rdi, -0x8(%rbp)
000000000000287c	movq	-0x8(%rbp), %rdi
0000000000002880	movq	(%rdi), %rax
0000000000002883	movq	0x10(%rdi), %rcx
0000000000002887	subq	%rax, %rcx
000000000000288a	sarq	$0x3, %rcx
000000000000288e	movq	%rdi, -0x20(%rbp)
0000000000002892	movq	%rax, %rsi
0000000000002895	movq	%rcx, %rdx
0000000000002898	callq	0x1f47c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
000000000000289d	jmp	0x28a2
00000000000028a2	movq	-0x20(%rbp), %rdi
00000000000028a6	callq	0x1f470 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev
00000000000028ab	addq	$0x20, %rsp
00000000000028af	popq	%rbp
00000000000028b0	retq
00000000000028b1	movl	%edx, %ecx
00000000000028b3	movq	%rax, -0x10(%rbp)
00000000000028b7	movl	%ecx, -0x14(%rbp)
00000000000028ba	movq	-0x20(%rbp), %rdi
00000000000028be	callq	0x1f470 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev
00000000000028c3	movq	-0x10(%rbp), %rdi
00000000000028c7	callq	0x1f62c ## symbol stub for: ___cxa_call_unexpected
00000000000028cc	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_:
00000000000028d0	pushq	%rbp
00000000000028d1	movq	%rsp, %rbp
00000000000028d4	movq	%rdi, -0x8(%rbp)
00000000000028d8	movq	%rsi, -0x10(%rbp)
00000000000028dc	popq	%rbp
00000000000028dd	retq
00000000000028de	nop
__ZNSaIP13BaseContainerEC1ERKS1_:
00000000000028e0	pushq	%rbp
00000000000028e1	movq	%rsp, %rbp
00000000000028e4	subq	$0x10, %rsp
00000000000028e8	movq	%rdi, -0x8(%rbp)
00000000000028ec	movq	%rsi, -0x10(%rbp)
00000000000028f0	movq	-0x8(%rbp), %rdi
00000000000028f4	movq	-0x10(%rbp), %rsi
00000000000028f8	callq	0x1f3f2 ## symbol stub for: __ZNSaIP13BaseContainerEC2ERKS1_
00000000000028fd	addq	$0x10, %rsp
0000000000002901	popq	%rbp
0000000000002902	retq
0000000000002903	nopw	%cs:(%rax,%rax)
000000000000290d	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev:
0000000000002910	pushq	%rbp
0000000000002911	movq	%rsp, %rbp
0000000000002914	subq	$0x10, %rsp
0000000000002918	movq	%rdi, -0x8(%rbp)
000000000000291c	movq	-0x8(%rbp), %rdi
0000000000002920	callq	0x1f476 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD2Ev
0000000000002925	addq	$0x10, %rsp
0000000000002929	popq	%rbp
000000000000292a	retq
000000000000292b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD2Ev:
0000000000002930	pushq	%rbp
0000000000002931	movq	%rsp, %rbp
0000000000002934	subq	$0x10, %rsp
0000000000002938	movq	%rdi, -0x8(%rbp)
000000000000293c	movq	-0x8(%rbp), %rdi
0000000000002940	callq	0x1f404 ## symbol stub for: __ZNSaIP13BaseContainerED2Ev
0000000000002945	addq	$0x10, %rsp
0000000000002949	popq	%rbp
000000000000294a	retq
000000000000294b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_:
0000000000002950	pushq	%rbp
0000000000002951	movq	%rsp, %rbp
0000000000002954	movq	%rdi, -0x8(%rbp)
0000000000002958	movq	%rsi, -0x10(%rbp)
000000000000295c	movq	%rdx, -0x18(%rbp)
0000000000002960	movq	-0x10(%rbp), %rdx
0000000000002964	movq	-0x18(%rbp), %rsi
0000000000002968	movq	(%rsi), %rsi
000000000000296b	movq	%rsi, (%rdx)
000000000000296e	popq	%rbp
000000000000296f	retq
__ZNSt6vectorIP12ModContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
0000000000002970	pushq	%rbp
0000000000002971	movq	%rsp, %rbp
0000000000002974	subq	$0x180, %rsp
000000000000297b	movq	%rsi, -0x8(%rbp)
000000000000297f	movq	%rdi, -0x10(%rbp)
0000000000002983	movq	%rdx, -0x18(%rbp)
0000000000002987	movq	-0x10(%rbp), %rdx
000000000000298b	movq	0x8(%rdx), %rsi
000000000000298f	cmpq	0x10(%rdx), %rsi
0000000000002993	movq	%rdx, -0x110(%rbp)
000000000000299a	je	0x2a59
00000000000029a0	movq	-0x110(%rbp), %rax
00000000000029a7	movq	-0x110(%rbp), %rcx
00000000000029ae	movq	0x8(%rcx), %rsi
00000000000029b2	movq	0x8(%rcx), %rdx
00000000000029b6	addq	$-0x8, %rdx
00000000000029ba	movq	%rax, %rdi
00000000000029bd	callq	0x1f2b4 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
00000000000029c2	movq	-0x110(%rbp), %rax
00000000000029c9	movq	0x8(%rax), %rcx
00000000000029cd	addq	$0x8, %rcx
00000000000029d1	movq	%rcx, 0x8(%rax)
00000000000029d5	movq	-0x18(%rbp), %rcx
00000000000029d9	movq	(%rcx), %rcx
00000000000029dc	movq	%rcx, -0x20(%rbp)
00000000000029e0	movq	-0x8(%rbp), %rcx
00000000000029e4	movq	%rcx, -0x28(%rbp)
00000000000029e8	movq	0x8(%rax), %rcx
00000000000029ec	addq	$-0x10, %rcx
00000000000029f0	movq	%rcx, -0x38(%rbp)
00000000000029f4	leaq	-0x30(%rbp), %rdi
00000000000029f8	leaq	-0x38(%rbp), %rsi
00000000000029fc	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002a01	movq	-0x110(%rbp), %rax
0000000000002a08	movq	0x8(%rax), %rcx
0000000000002a0c	addq	$-0x8, %rcx
0000000000002a10	movq	%rcx, -0x48(%rbp)
0000000000002a14	leaq	-0x40(%rbp), %rdi
0000000000002a18	leaq	-0x48(%rbp), %rsi
0000000000002a1c	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002a21	movq	-0x28(%rbp), %rdi
0000000000002a25	movq	-0x30(%rbp), %rsi
0000000000002a29	movq	-0x40(%rbp), %rdx
0000000000002a2d	callq	0x1f55a ## symbol stub for: __ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000002a32	movq	%rax, -0x50(%rbp)
0000000000002a36	movq	-0x20(%rbp), %rax
0000000000002a3a	leaq	-0x8(%rbp), %rdi
0000000000002a3e	movq	%rax, -0x118(%rbp)
0000000000002a45	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000002a4a	movq	-0x118(%rbp), %rcx
0000000000002a51	movq	%rcx, (%rax)
0000000000002a54	jmp	0x2efc
0000000000002a59	movq	-0x110(%rbp), %rdi
0000000000002a60	callq	0x1f3a4 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE4sizeEv
0000000000002a65	movq	%rax, -0x58(%rbp)
0000000000002a69	movq	-0x58(%rbp), %rax
0000000000002a6d	movq	-0x110(%rbp), %rdi
0000000000002a74	movq	%rax, -0x120(%rbp)
0000000000002a7b	callq	0x1f3b0 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv
0000000000002a80	movq	-0x120(%rbp), %rdi
0000000000002a87	cmpq	%rax, %rdi
0000000000002a8a	jne	0x2a9c
0000000000002a90	leaq	0x603a1(%rip), %rdi ## literal pool for: "vector::_M_insert_aux"
0000000000002a97	callq	0x1f590 ## symbol stub for: __ZSt20__throw_length_errorPKc
0000000000002a9c	cmpq	$0x0, -0x58(%rbp)
0000000000002aa1	je	0x2abb
0000000000002aa7	movq	-0x58(%rbp), %rax
0000000000002aab	shlq	$0x1, %rax
0000000000002aaf	movq	%rax, -0x128(%rbp)
0000000000002ab6	jmp	0x2acc
0000000000002abb	movl	$0x1, %eax
0000000000002ac0	movq	%rax, -0x128(%rbp)
0000000000002ac7	jmp	0x2acc
0000000000002acc	movq	-0x128(%rbp), %rax
0000000000002ad3	movq	%rax, -0x60(%rbp)
0000000000002ad7	movq	-0x60(%rbp), %rax
0000000000002adb	cmpq	-0x58(%rbp), %rax
0000000000002adf	jae	0x2af5
0000000000002ae5	movq	-0x110(%rbp), %rdi
0000000000002aec	callq	0x1f3b0 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv
0000000000002af1	movq	%rax, -0x60(%rbp)
0000000000002af5	movq	-0x60(%rbp), %rsi
0000000000002af9	movq	-0x110(%rbp), %rdi
0000000000002b00	callq	0x1f42e ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE11_M_allocateEm
0000000000002b05	movq	%rax, -0x70(%rbp)
0000000000002b09	leaq	-0x68(%rbp), %rdi
0000000000002b0d	leaq	-0x70(%rbp), %rsi
0000000000002b11	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002b16	movq	-0x68(%rbp), %rax
0000000000002b1a	movq	%rax, -0x78(%rbp)
0000000000002b1e	leaq	-0x88(%rbp), %rdi
0000000000002b25	movq	-0x110(%rbp), %rsi
0000000000002b2c	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002b31	jmp	0x2b36
0000000000002b36	movq	-0x8(%rbp), %rax
0000000000002b3a	movq	%rax, -0xa0(%rbp)
0000000000002b41	movq	-0x68(%rbp), %rax
0000000000002b45	movq	%rax, -0xa8(%rbp)
0000000000002b4c	leaq	-0xb0(%rbp), %rdi
0000000000002b53	movq	-0x110(%rbp), %rsi
0000000000002b5a	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002b5f	jmp	0x2b64
0000000000002b64	movq	-0x88(%rbp), %rdi
0000000000002b6b	movq	-0xa0(%rbp), %rsi
0000000000002b72	movq	-0xa8(%rbp), %rdx
0000000000002b79	leaq	-0xb0(%rbp), %rcx
0000000000002b80	callq	0x1f596 ## symbol stub for: __ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
0000000000002b85	movq	%rax, -0x130(%rbp)
0000000000002b8c	jmp	0x2b91
0000000000002b91	movq	-0x130(%rbp), %rax
0000000000002b98	movq	%rax, -0x80(%rbp)
0000000000002b9c	movq	-0x80(%rbp), %rcx
0000000000002ba0	movq	%rcx, -0x78(%rbp)
0000000000002ba4	leaq	-0xb0(%rbp), %rdi
0000000000002bab	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002bb0	movq	-0x110(%rbp), %rax
0000000000002bb7	leaq	-0x78(%rbp), %rdi
0000000000002bbb	movq	%rax, -0x138(%rbp)
0000000000002bc2	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000002bc7	movq	%rax, -0x140(%rbp)
0000000000002bce	jmp	0x2bd3
0000000000002bd3	movq	-0x140(%rbp), %rax
0000000000002bda	movq	(%rax), %rsi
0000000000002bdd	movq	-0x18(%rbp), %rdx
0000000000002be1	movq	-0x138(%rbp), %rdi
0000000000002be8	callq	0x1f2b4 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
0000000000002bed	jmp	0x2bf2
0000000000002bf2	leaq	-0x78(%rbp), %rdi
0000000000002bf6	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000002bfb	movq	%rax, -0x148(%rbp)
0000000000002c02	jmp	0x2c07
0000000000002c07	movq	-0x8(%rbp), %rax
0000000000002c0b	movq	%rax, -0xc0(%rbp)
0000000000002c12	movq	-0x110(%rbp), %rax
0000000000002c19	addq	$0x8, %rax
0000000000002c1d	leaq	-0xc8(%rbp), %rdi
0000000000002c24	movq	%rax, %rsi
0000000000002c27	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002c2c	jmp	0x2c31
0000000000002c31	movq	-0x78(%rbp), %rax
0000000000002c35	movq	%rax, -0xd0(%rbp)
0000000000002c3c	leaq	-0xd8(%rbp), %rdi
0000000000002c43	movq	-0x110(%rbp), %rsi
0000000000002c4a	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002c4f	jmp	0x2c54
0000000000002c54	movq	-0xc0(%rbp), %rdi
0000000000002c5b	movq	-0xc8(%rbp), %rsi
0000000000002c62	movq	-0xd0(%rbp), %rdx
0000000000002c69	leaq	-0xd8(%rbp), %rcx
0000000000002c70	callq	0x1f596 ## symbol stub for: __ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
0000000000002c75	movq	%rax, -0x150(%rbp)
0000000000002c7c	jmp	0x2c81
0000000000002c81	movq	-0x150(%rbp), %rax
0000000000002c88	movq	%rax, -0xb8(%rbp)
0000000000002c8f	movq	-0xb8(%rbp), %rcx
0000000000002c96	movq	%rcx, -0x78(%rbp)
0000000000002c9a	leaq	-0xd8(%rbp), %rdi
0000000000002ca1	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002ca6	jmp	0x2df3
0000000000002cab	movl	%edx, %ecx
0000000000002cad	movq	%rax, -0x90(%rbp)
0000000000002cb4	movl	%ecx, -0x94(%rbp)
0000000000002cba	jmp	0x2cfa
0000000000002cbf	movl	%edx, %ecx
0000000000002cc1	movq	%rax, -0x90(%rbp)
0000000000002cc8	movl	%ecx, -0x94(%rbp)
0000000000002cce	leaq	-0xb0(%rbp), %rdi
0000000000002cd5	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002cda	jmp	0x2cfa
0000000000002cdf	movl	%edx, %ecx
0000000000002ce1	movq	%rax, -0x90(%rbp)
0000000000002ce8	movl	%ecx, -0x94(%rbp)
0000000000002cee	leaq	-0xd8(%rbp), %rdi
0000000000002cf5	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002cfa	movq	-0x90(%rbp), %rdi
0000000000002d01	callq	0x1f626 ## symbol stub for: ___cxa_begin_catch
0000000000002d06	movq	-0x68(%rbp), %rdi
0000000000002d0a	movq	%rdi, -0xe0(%rbp)
0000000000002d11	movq	-0x78(%rbp), %rdi
0000000000002d15	movq	%rdi, -0xe8(%rbp)
0000000000002d1c	leaq	-0xf0(%rbp), %rdi
0000000000002d23	movq	-0x110(%rbp), %rsi
0000000000002d2a	movq	%rax, -0x158(%rbp)
0000000000002d31	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002d36	jmp	0x2d3b
0000000000002d3b	movq	-0xe0(%rbp), %rdi
0000000000002d42	movq	-0xe8(%rbp), %rsi
0000000000002d49	leaq	-0xf0(%rbp), %rdx
0000000000002d50	callq	0x1f5d8 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
0000000000002d55	jmp	0x2d5a
0000000000002d5a	leaq	-0xf0(%rbp), %rdi
0000000000002d61	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002d66	movq	-0x110(%rbp), %rdi
0000000000002d6d	leaq	-0x68(%rbp), %rax
0000000000002d71	movq	%rdi, -0x160(%rbp)
0000000000002d78	movq	%rax, %rdi
0000000000002d7b	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000002d80	movq	%rax, -0x168(%rbp)
0000000000002d87	jmp	0x2d8c
0000000000002d8c	movq	-0x168(%rbp), %rax
0000000000002d93	movq	(%rax), %rsi
0000000000002d96	movq	-0x60(%rbp), %rdx
0000000000002d9a	movq	-0x160(%rbp), %rdi
0000000000002da1	callq	0x1f44c ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000002da6	jmp	0x2dab
0000000000002dab	callq	0x1f638 ## symbol stub for: ___cxa_rethrow
0000000000002db0	jmp	0x2f22
0000000000002db5	movl	%edx, %ecx
0000000000002db7	movq	%rax, -0x90(%rbp)
0000000000002dbe	movl	%ecx, -0x94(%rbp)
0000000000002dc4	jmp	0x2de4
0000000000002dc9	movl	%edx, %ecx
0000000000002dcb	movq	%rax, -0x90(%rbp)
0000000000002dd2	movl	%ecx, -0x94(%rbp)
0000000000002dd8	leaq	-0xf0(%rbp), %rdi
0000000000002ddf	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002de4	callq	0x1f632 ## symbol stub for: ___cxa_end_catch
0000000000002de9	jmp	0x2dee
0000000000002dee	jmp	0x2f05
0000000000002df3	movq	-0x110(%rbp), %rdi
0000000000002dfa	callq	0x1f4dc ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv
0000000000002dff	movq	%rax, -0xf8(%rbp)
0000000000002e06	movq	-0x110(%rbp), %rdi
0000000000002e0d	callq	0x1f4d6 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000002e12	movq	%rax, -0x100(%rbp)
0000000000002e19	leaq	-0x108(%rbp), %rax
0000000000002e20	movq	%rax, %rdi
0000000000002e23	movq	-0x110(%rbp), %rsi
0000000000002e2a	movq	%rax, -0x170(%rbp)
0000000000002e31	callq	0x1f38c ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002e36	movq	-0xf8(%rbp), %rdi
0000000000002e3d	movq	-0x100(%rbp), %rsi
0000000000002e44	movq	-0x170(%rbp), %rdx
0000000000002e4b	callq	0x1f5d8 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
0000000000002e50	jmp	0x2e55
0000000000002e55	leaq	-0x108(%rbp), %rdi
0000000000002e5c	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002e61	movq	-0x110(%rbp), %rdi
0000000000002e68	movq	-0x110(%rbp), %rax
0000000000002e6f	movq	(%rax), %rsi
0000000000002e72	movq	0x10(%rax), %rcx
0000000000002e76	movq	(%rax), %rdx
0000000000002e79	subq	%rdx, %rcx
0000000000002e7c	sarq	$0x3, %rcx
0000000000002e80	movq	%rcx, %rdx
0000000000002e83	callq	0x1f44c ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000002e88	leaq	-0x68(%rbp), %rdi
0000000000002e8c	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000002e91	movq	(%rax), %rax
0000000000002e94	movq	-0x110(%rbp), %rcx
0000000000002e9b	movq	%rax, (%rcx)
0000000000002e9e	leaq	-0x78(%rbp), %rdi
0000000000002ea2	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000002ea7	movq	(%rax), %rax
0000000000002eaa	movq	-0x110(%rbp), %rcx
0000000000002eb1	movq	%rax, 0x8(%rcx)
0000000000002eb5	leaq	-0x68(%rbp), %rdi
0000000000002eb9	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000002ebe	movq	(%rax), %rax
0000000000002ec1	movq	-0x60(%rbp), %rcx
0000000000002ec5	shlq	$0x3, %rcx
0000000000002ec9	addq	%rcx, %rax
0000000000002ecc	movq	-0x110(%rbp), %rcx
0000000000002ed3	movq	%rax, 0x10(%rcx)
0000000000002ed7	jmp	0x2efc
0000000000002edc	movl	%edx, %ecx
0000000000002ede	movq	%rax, -0x90(%rbp)
0000000000002ee5	movl	%ecx, -0x94(%rbp)
0000000000002eeb	leaq	-0x108(%rbp), %rdi
0000000000002ef2	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002ef7	jmp	0x2f05
0000000000002efc	addq	$0x180, %rsp
0000000000002f03	popq	%rbp
0000000000002f04	retq
0000000000002f05	movq	-0x90(%rbp), %rdi
0000000000002f0c	callq	0x1f260 ## symbol stub for: __Unwind_Resume
0000000000002f11	ud2
0000000000002f13	movq	%rax, %rdi
0000000000002f16	movq	%rdx, -0x178(%rbp)
0000000000002f1d	callq	___clang_call_terminate
0000000000002f22	ud2
0000000000002f24	nopw	%cs:(%rax,%rax)
0000000000002f2e	nop
__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000002f30	pushq	%rbp
0000000000002f31	movq	%rsp, %rbp
0000000000002f34	subq	$0x40, %rsp
0000000000002f38	movq	%rdi, -0x10(%rbp)
0000000000002f3c	movq	%rsi, -0x18(%rbp)
0000000000002f40	movq	%rdx, -0x20(%rbp)
0000000000002f44	movb	$0x1, -0x21(%rbp)
0000000000002f48	movb	$0x1, -0x22(%rbp)
0000000000002f4c	movq	-0x10(%rbp), %rdx
0000000000002f50	movq	%rdx, -0x30(%rbp)
0000000000002f54	movq	-0x18(%rbp), %rdx
0000000000002f58	movq	%rdx, -0x38(%rbp)
0000000000002f5c	movq	-0x20(%rbp), %rdx
0000000000002f60	movq	%rdx, -0x40(%rbp)
0000000000002f64	movq	-0x30(%rbp), %rdi
0000000000002f68	movq	-0x38(%rbp), %rsi
0000000000002f6c	movq	-0x40(%rbp), %rdx
0000000000002f70	callq	0x1f4b8 ## symbol stub for: __ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000002f75	movq	%rax, -0x8(%rbp)
0000000000002f79	movq	-0x8(%rbp), %rax
0000000000002f7d	addq	$0x40, %rsp
0000000000002f81	popq	%rbp
0000000000002f82	retq
0000000000002f83	nopw	%cs:(%rax,%rax)
0000000000002f8d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_:
0000000000002f90	pushq	%rbp
0000000000002f91	movq	%rsp, %rbp
0000000000002f94	subq	$0x10, %rsp
0000000000002f98	movq	%rdi, -0x8(%rbp)
0000000000002f9c	movq	%rsi, -0x10(%rbp)
0000000000002fa0	movq	-0x8(%rbp), %rdi
0000000000002fa4	movq	-0x10(%rbp), %rsi
0000000000002fa8	callq	0x1f314 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_
0000000000002fad	addq	$0x10, %rsp
0000000000002fb1	popq	%rbp
0000000000002fb2	retq
0000000000002fb3	nopw	%cs:(%rax,%rax)
0000000000002fbd	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv:
0000000000002fc0	pushq	%rbp
0000000000002fc1	movq	%rsp, %rbp
0000000000002fc4	movq	%rdi, -0x8(%rbp)
0000000000002fc8	movq	-0x8(%rbp), %rdi
0000000000002fcc	movq	(%rdi), %rax
0000000000002fcf	popq	%rbp
0000000000002fd0	retq
0000000000002fd1	nopw	%cs:(%rax,%rax)
0000000000002fdb	nopl	(%rax,%rax)
__ZNKSt6vectorIP12ModContainerSaIS1_EE4sizeEv:
0000000000002fe0	pushq	%rbp
0000000000002fe1	movq	%rsp, %rbp
0000000000002fe4	subq	$0x20, %rsp
0000000000002fe8	movq	%rdi, -0x8(%rbp)
0000000000002fec	movq	-0x8(%rbp), %rdi
0000000000002ff0	movq	%rdi, -0x20(%rbp)
0000000000002ff4	callq	0x1f39e ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000002ff9	movq	%rax, -0x10(%rbp)
0000000000002ffd	movq	-0x20(%rbp), %rdi
0000000000003001	callq	0x1f3aa ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE5beginEv
0000000000003006	movq	%rax, -0x18(%rbp)
000000000000300a	leaq	-0x10(%rbp), %rdi
000000000000300e	leaq	-0x18(%rbp), %rsi
0000000000003012	callq	0x1f338 ## symbol stub for: __ZN9__gnu_cxxmiIPKP12ModContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE
0000000000003017	addq	$0x20, %rsp
000000000000301b	popq	%rbp
000000000000301c	retq
000000000000301d	nopl	(%rax)
__ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv:
0000000000003020	pushq	%rbp
0000000000003021	movq	%rsp, %rbp
0000000000003024	movq	%rdi, -0x8(%rbp)
0000000000003028	movabsq	$0x1fffffffffffffff, %rax
0000000000003032	popq	%rbp
0000000000003033	retq
0000000000003034	nopw	%cs:(%rax,%rax)
000000000000303e	nop
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE11_M_allocateEm:
0000000000003040	pushq	%rbp
0000000000003041	movq	%rsp, %rbp
0000000000003044	subq	$0x20, %rsp
0000000000003048	xorl	%eax, %eax
000000000000304a	movl	%eax, %edx
000000000000304c	movq	%rdi, -0x8(%rbp)
0000000000003050	movq	%rsi, -0x10(%rbp)
0000000000003054	movq	-0x8(%rbp), %rsi
0000000000003058	movq	-0x10(%rbp), %rdi
000000000000305c	movq	%rdi, -0x18(%rbp)
0000000000003060	movq	%rsi, %rdi
0000000000003063	movq	-0x18(%rbp), %rsi
0000000000003067	callq	0x1f2ae ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE8allocateEmPKv
000000000000306c	addq	$0x20, %rsp
0000000000003070	popq	%rbp
0000000000003071	retq
0000000000003072	nopw	%cs:(%rax,%rax)
000000000000307c	nopl	(%rax)
__ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E:
0000000000003080	pushq	%rbp
0000000000003081	movq	%rsp, %rbp
0000000000003084	subq	$0x40, %rsp
0000000000003088	movq	%rdi, -0x10(%rbp)
000000000000308c	movq	%rsi, -0x18(%rbp)
0000000000003090	movq	%rdx, -0x20(%rbp)
0000000000003094	movq	-0x10(%rbp), %rdx
0000000000003098	movq	%rdx, -0x28(%rbp)
000000000000309c	movq	-0x18(%rbp), %rdx
00000000000030a0	movq	%rdx, -0x30(%rbp)
00000000000030a4	movq	-0x20(%rbp), %rdx
00000000000030a8	movq	%rdx, -0x38(%rbp)
00000000000030ac	movq	-0x28(%rbp), %rdi
00000000000030b0	movq	-0x30(%rbp), %rsi
00000000000030b4	movq	-0x38(%rbp), %rdx
00000000000030b8	movq	%rcx, -0x40(%rbp)
00000000000030bc	callq	0x1f56c ## symbol stub for: __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
00000000000030c1	movq	%rax, -0x8(%rbp)
00000000000030c5	movq	-0x8(%rbp), %rax
00000000000030c9	addq	$0x40, %rsp
00000000000030cd	popq	%rbp
00000000000030ce	retq
00000000000030cf	nop
__ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv:
00000000000030d0	pushq	%rbp
00000000000030d1	movq	%rsp, %rbp
00000000000030d4	movq	%rdi, -0x8(%rbp)
00000000000030d8	movq	-0x8(%rbp), %rax
00000000000030dc	popq	%rbp
00000000000030dd	retq
00000000000030de	nop
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv:
00000000000030e0	pushq	%rbp
00000000000030e1	movq	%rsp, %rbp
00000000000030e4	movq	%rdi, -0x8(%rbp)
00000000000030e8	movq	-0x8(%rbp), %rdi
00000000000030ec	movq	(%rdi), %rax
00000000000030ef	addq	$0x8, %rax
00000000000030f3	movq	%rax, (%rdi)
00000000000030f6	movq	%rdi, %rax
00000000000030f9	popq	%rbp
00000000000030fa	retq
00000000000030fb	nopl	(%rax,%rax)
__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_:
0000000000003100	pushq	%rbp
0000000000003101	movq	%rsp, %rbp
0000000000003104	subq	$0x30, %rsp
0000000000003108	movq	%rdi, -0x8(%rbp)
000000000000310c	movq	%rsi, -0x10(%rbp)
0000000000003110	movq	%rdx, -0x18(%rbp)
0000000000003114	leaq	-0x8(%rbp), %rdi
0000000000003118	leaq	-0x10(%rbp), %rsi
000000000000311c	callq	0x1f344 ## symbol stub for: __ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003121	testb	$0x1, %al
0000000000003123	jne	0x312e
0000000000003129	jmp	0x315d
000000000000312e	movq	-0x18(%rbp), %rax
0000000000003132	leaq	-0x8(%rbp), %rdi
0000000000003136	movq	%rax, -0x20(%rbp)
000000000000313a	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
000000000000313f	movq	-0x20(%rbp), %rdi
0000000000003143	movq	%rax, %rsi
0000000000003146	callq	0x1f2a8 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_
000000000000314b	leaq	-0x8(%rbp), %rdi
000000000000314f	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003154	movq	%rax, -0x28(%rbp)
0000000000003158	jmp	0x3114
000000000000315d	addq	$0x30, %rsp
0000000000003161	popq	%rbp
0000000000003162	retq
0000000000003163	nopw	%cs:(%rax,%rax)
000000000000316d	nopl	(%rax)
__ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003170	pushq	%rbp
0000000000003171	movq	%rsp, %rbp
0000000000003174	subq	$0x40, %rsp
0000000000003178	movq	%rdi, -0x10(%rbp)
000000000000317c	movq	%rsi, -0x18(%rbp)
0000000000003180	movq	%rdx, -0x20(%rbp)
0000000000003184	leaq	-0x10(%rbp), %rdi
0000000000003188	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000000318d	movq	(%rax), %rdi
0000000000003190	leaq	-0x18(%rbp), %rax
0000000000003194	movq	%rdi, -0x30(%rbp)
0000000000003198	movq	%rax, %rdi
000000000000319b	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000031a0	movq	(%rax), %rsi
00000000000031a3	leaq	-0x20(%rbp), %rdi
00000000000031a7	movq	%rsi, -0x38(%rbp)
00000000000031ab	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000031b0	movq	(%rax), %rdx
00000000000031b3	movq	-0x30(%rbp), %rdi
00000000000031b7	movq	-0x38(%rbp), %rsi
00000000000031bb	callq	0x1f57e ## symbol stub for: __ZSt19__copy_backward_auxIPP12ModContainerS2_ET0_T_S4_S3_
00000000000031c0	movq	%rax, -0x28(%rbp)
00000000000031c4	leaq	-0x8(%rbp), %rdi
00000000000031c8	leaq	-0x28(%rbp), %rsi
00000000000031cc	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
00000000000031d1	movq	-0x8(%rbp), %rax
00000000000031d5	addq	$0x40, %rsp
00000000000031d9	popq	%rbp
00000000000031da	retq
00000000000031db	nopl	(%rax,%rax)
__ZSt19__copy_backward_auxIPP12ModContainerS2_ET0_T_S4_S3_:
00000000000031e0	pushq	%rbp
00000000000031e1	movq	%rsp, %rbp
00000000000031e4	subq	$0x20, %rsp
00000000000031e8	movq	%rdi, -0x8(%rbp)
00000000000031ec	movq	%rsi, -0x10(%rbp)
00000000000031f0	movq	%rdx, -0x18(%rbp)
00000000000031f4	movb	$0x1, -0x19(%rbp)
00000000000031f8	movq	-0x8(%rbp), %rdi
00000000000031fc	movq	-0x10(%rbp), %rsi
0000000000003200	movq	-0x18(%rbp), %rdx
0000000000003204	callq	0x1f4a6 ## symbol stub for: __ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP12ModContainerEEPT_PKS5_S8_S6_
0000000000003209	addq	$0x20, %rsp
000000000000320d	popq	%rbp
000000000000320e	retq
000000000000320f	nop
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP12ModContainerEEPT_PKS5_S8_S6_:
0000000000003210	pushq	%rbp
0000000000003211	movq	%rsp, %rbp
0000000000003214	subq	$0x40, %rsp
0000000000003218	xorl	%eax, %eax
000000000000321a	movl	%eax, %ecx
000000000000321c	movq	%rdi, -0x8(%rbp)
0000000000003220	movq	%rsi, -0x10(%rbp)
0000000000003224	movq	%rdx, -0x18(%rbp)
0000000000003228	movq	-0x10(%rbp), %rdx
000000000000322c	movq	-0x8(%rbp), %rsi
0000000000003230	subq	%rsi, %rdx
0000000000003233	sarq	$0x3, %rdx
0000000000003237	movq	%rdx, -0x20(%rbp)
000000000000323b	movq	-0x18(%rbp), %rdx
000000000000323f	movq	%rcx, %rsi
0000000000003242	subq	-0x20(%rbp), %rsi
0000000000003246	shlq	$0x3, %rsi
000000000000324a	addq	%rsi, %rdx
000000000000324d	movq	-0x8(%rbp), %rsi
0000000000003251	movq	-0x20(%rbp), %rdi
0000000000003255	shlq	$0x3, %rdi
0000000000003259	movq	%rdi, -0x28(%rbp)
000000000000325d	movq	%rdx, %rdi
0000000000003260	movq	-0x28(%rbp), %rdx
0000000000003264	movq	%rcx, -0x30(%rbp)
0000000000003268	callq	0x1f6a4 ## symbol stub for: _memmove
000000000000326d	movq	-0x18(%rbp), %rcx
0000000000003271	movq	-0x30(%rbp), %rdx
0000000000003275	subq	-0x20(%rbp), %rdx
0000000000003279	shlq	$0x3, %rdx
000000000000327d	addq	%rdx, %rcx
0000000000003280	movq	%rax, -0x38(%rbp)
0000000000003284	movq	%rcx, %rax
0000000000003287	addq	$0x40, %rsp
000000000000328b	popq	%rbp
000000000000328c	retq
000000000000328d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_:
0000000000003290	pushq	%rbp
0000000000003291	movq	%rsp, %rbp
0000000000003294	movq	%rdi, -0x8(%rbp)
0000000000003298	movq	%rsi, -0x10(%rbp)
000000000000329c	movq	-0x8(%rbp), %rsi
00000000000032a0	movq	-0x10(%rbp), %rdi
00000000000032a4	movq	(%rdi), %rdi
00000000000032a7	movq	%rdi, (%rsi)
00000000000032aa	popq	%rbp
00000000000032ab	retq
00000000000032ac	nopl	(%rax)
__ZN9__gnu_cxxmiIPKP12ModContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE:
00000000000032b0	pushq	%rbp
00000000000032b1	movq	%rsp, %rbp
00000000000032b4	subq	$0x20, %rsp
00000000000032b8	movq	%rdi, -0x8(%rbp)
00000000000032bc	movq	%rsi, -0x10(%rbp)
00000000000032c0	movq	-0x8(%rbp), %rdi
00000000000032c4	callq	0x1f368 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000032c9	movq	(%rax), %rax
00000000000032cc	movq	-0x10(%rbp), %rdi
00000000000032d0	movq	%rax, -0x18(%rbp)
00000000000032d4	callq	0x1f368 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000032d9	movq	(%rax), %rax
00000000000032dc	movq	-0x18(%rbp), %rsi
00000000000032e0	subq	%rax, %rsi
00000000000032e3	sarq	$0x3, %rsi
00000000000032e7	movq	%rsi, %rax
00000000000032ea	addq	$0x20, %rsp
00000000000032ee	popq	%rbp
00000000000032ef	retq
__ZNKSt6vectorIP12ModContainerSaIS1_EE3endEv:
00000000000032f0	pushq	%rbp
00000000000032f1	movq	%rsp, %rbp
00000000000032f4	subq	$0x20, %rsp
00000000000032f8	movq	%rdi, -0x10(%rbp)
00000000000032fc	movq	-0x10(%rbp), %rdi
0000000000003300	movq	0x8(%rdi), %rdi
0000000000003304	movq	%rdi, -0x18(%rbp)
0000000000003308	leaq	-0x8(%rbp), %rdi
000000000000330c	leaq	-0x18(%rbp), %rsi
0000000000003310	callq	0x1f2f6 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003315	movq	-0x8(%rbp), %rax
0000000000003319	addq	$0x20, %rsp
000000000000331d	popq	%rbp
000000000000331e	retq
000000000000331f	nop
__ZNKSt6vectorIP12ModContainerSaIS1_EE5beginEv:
0000000000003320	pushq	%rbp
0000000000003321	movq	%rsp, %rbp
0000000000003324	subq	$0x20, %rsp
0000000000003328	movq	%rdi, -0x10(%rbp)
000000000000332c	movq	-0x10(%rbp), %rdi
0000000000003330	movq	(%rdi), %rdi
0000000000003333	movq	%rdi, -0x18(%rbp)
0000000000003337	leaq	-0x8(%rbp), %rdi
000000000000333b	leaq	-0x18(%rbp), %rsi
000000000000333f	callq	0x1f2f6 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003344	movq	-0x8(%rbp), %rax
0000000000003348	addq	$0x20, %rsp
000000000000334c	popq	%rbp
000000000000334d	retq
000000000000334e	nop
__ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv:
0000000000003350	pushq	%rbp
0000000000003351	movq	%rsp, %rbp
0000000000003354	movq	%rdi, -0x8(%rbp)
0000000000003358	movq	-0x8(%rbp), %rax
000000000000335c	popq	%rbp
000000000000335d	retq
000000000000335e	nop
__ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_:
0000000000003360	pushq	%rbp
0000000000003361	movq	%rsp, %rbp
0000000000003364	subq	$0x10, %rsp
0000000000003368	movq	%rdi, -0x8(%rbp)
000000000000336c	movq	%rsi, -0x10(%rbp)
0000000000003370	movq	-0x8(%rbp), %rdi
0000000000003374	movq	-0x10(%rbp), %rsi
0000000000003378	callq	0x1f2fc ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_
000000000000337d	addq	$0x10, %rsp
0000000000003381	popq	%rbp
0000000000003382	retq
0000000000003383	nopw	%cs:(%rax,%rax)
000000000000338d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_:
0000000000003390	pushq	%rbp
0000000000003391	movq	%rsp, %rbp
0000000000003394	movq	%rdi, -0x8(%rbp)
0000000000003398	movq	%rsi, -0x10(%rbp)
000000000000339c	movq	-0x8(%rbp), %rsi
00000000000033a0	movq	-0x10(%rbp), %rdi
00000000000033a4	movq	(%rdi), %rdi
00000000000033a7	movq	%rdi, (%rsi)
00000000000033aa	popq	%rbp
00000000000033ab	retq
00000000000033ac	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE8allocateEmPKv:
00000000000033b0	pushq	%rbp
00000000000033b1	movq	%rsp, %rbp
00000000000033b4	subq	$0x20, %rsp
00000000000033b8	movq	%rdi, -0x8(%rbp)
00000000000033bc	movq	%rsi, -0x10(%rbp)
00000000000033c0	movq	%rdx, -0x18(%rbp)
00000000000033c4	movq	-0x8(%rbp), %rdi
00000000000033c8	movq	-0x10(%rbp), %rdx
00000000000033cc	movq	%rdx, -0x20(%rbp)
00000000000033d0	callq	0x1f35c ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP12ModContainerE8max_sizeEv
00000000000033d5	movq	-0x20(%rbp), %rdx
00000000000033d9	cmpq	%rax, %rdx
00000000000033dc	jbe	0x33e7
00000000000033e2	callq	0x1f566 ## symbol stub for: __ZSt17__throw_bad_allocv
00000000000033e7	movq	-0x10(%rbp), %rax
00000000000033eb	shlq	$0x3, %rax
00000000000033ef	movq	%rax, %rdi
00000000000033f2	callq	0x1f608 ## symbol stub for: __Znwm
00000000000033f7	addq	$0x20, %rsp
00000000000033fb	popq	%rbp
00000000000033fc	retq
00000000000033fd	nopl	(%rax)
__ZNK9__gnu_cxx13new_allocatorIP12ModContainerE8max_sizeEv:
0000000000003400	pushq	%rbp
0000000000003401	movq	%rsp, %rbp
0000000000003404	movq	%rdi, -0x8(%rbp)
0000000000003408	movabsq	$0x1fffffffffffffff, %rax
0000000000003412	popq	%rbp
0000000000003413	retq
0000000000003414	nopw	%cs:(%rax,%rax)
000000000000341e	nop
__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003420	pushq	%rbp
0000000000003421	movq	%rsp, %rbp
0000000000003424	subq	$0x40, %rsp
0000000000003428	movq	%rdi, -0x10(%rbp)
000000000000342c	movq	%rsi, -0x18(%rbp)
0000000000003430	movq	%rdx, -0x20(%rbp)
0000000000003434	movq	-0x10(%rbp), %rdx
0000000000003438	movq	%rdx, -0x28(%rbp)
000000000000343c	movq	-0x18(%rbp), %rdx
0000000000003440	movq	%rdx, -0x30(%rbp)
0000000000003444	movq	-0x20(%rbp), %rdx
0000000000003448	movq	%rdx, -0x38(%rbp)
000000000000344c	movq	-0x28(%rbp), %rdi
0000000000003450	movq	-0x30(%rbp), %rsi
0000000000003454	movq	-0x38(%rbp), %rdx
0000000000003458	callq	0x1f5a2 ## symbol stub for: __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
000000000000345d	movq	%rax, -0x8(%rbp)
0000000000003461	movq	-0x8(%rbp), %rax
0000000000003465	addq	$0x40, %rsp
0000000000003469	popq	%rbp
000000000000346a	retq
000000000000346b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:
0000000000003470	pushq	%rbp
0000000000003471	movq	%rsp, %rbp
0000000000003474	subq	$0x40, %rsp
0000000000003478	movq	%rdi, -0x10(%rbp)
000000000000347c	movq	%rsi, -0x18(%rbp)
0000000000003480	movq	%rdx, -0x20(%rbp)
0000000000003484	movq	-0x10(%rbp), %rdx
0000000000003488	movq	%rdx, -0x30(%rbp)
000000000000348c	movq	-0x18(%rbp), %rdx
0000000000003490	movq	%rdx, -0x38(%rbp)
0000000000003494	movq	-0x20(%rbp), %rdx
0000000000003498	movq	%rdx, -0x40(%rbp)
000000000000349c	movq	-0x30(%rbp), %rdi
00000000000034a0	movq	-0x38(%rbp), %rsi
00000000000034a4	movq	-0x40(%rbp), %rdx
00000000000034a8	callq	0x1f5b4 ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
00000000000034ad	movq	%rax, -0x8(%rbp)
00000000000034b1	movq	-0x8(%rbp), %rax
00000000000034b5	addq	$0x40, %rsp
00000000000034b9	popq	%rbp
00000000000034ba	retq
00000000000034bb	nopl	(%rax,%rax)
__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
00000000000034c0	pushq	%rbp
00000000000034c1	movq	%rsp, %rbp
00000000000034c4	subq	$0x40, %rsp
00000000000034c8	movq	%rdi, -0x10(%rbp)
00000000000034cc	movq	%rsi, -0x18(%rbp)
00000000000034d0	movq	%rdx, -0x20(%rbp)
00000000000034d4	movb	$0x1, -0x21(%rbp)
00000000000034d8	movb	$0x1, -0x22(%rbp)
00000000000034dc	movq	-0x10(%rbp), %rdx
00000000000034e0	movq	%rdx, -0x30(%rbp)
00000000000034e4	movq	-0x18(%rbp), %rdx
00000000000034e8	movq	%rdx, -0x38(%rbp)
00000000000034ec	movq	-0x20(%rbp), %rdx
00000000000034f0	movq	%rdx, -0x40(%rbp)
00000000000034f4	movq	-0x30(%rbp), %rdi
00000000000034f8	movq	-0x38(%rbp), %rsi
00000000000034fc	movq	-0x40(%rbp), %rdx
0000000000003500	callq	0x1f49a ## symbol stub for: __ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000003505	movq	%rax, -0x8(%rbp)
0000000000003509	movq	-0x8(%rbp), %rax
000000000000350d	addq	$0x40, %rsp
0000000000003511	popq	%rbp
0000000000003512	retq
0000000000003513	nopw	%cs:(%rax,%rax)
000000000000351d	nopl	(%rax)
__ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003520	pushq	%rbp
0000000000003521	movq	%rsp, %rbp
0000000000003524	subq	$0x40, %rsp
0000000000003528	movq	%rdi, -0x10(%rbp)
000000000000352c	movq	%rsi, -0x18(%rbp)
0000000000003530	movq	%rdx, -0x20(%rbp)
0000000000003534	leaq	-0x10(%rbp), %rdi
0000000000003538	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000000353d	movq	(%rax), %rdi
0000000000003540	leaq	-0x18(%rbp), %rax
0000000000003544	movq	%rdi, -0x30(%rbp)
0000000000003548	movq	%rax, %rdi
000000000000354b	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003550	movq	(%rax), %rsi
0000000000003553	leaq	-0x20(%rbp), %rdi
0000000000003557	movq	%rsi, -0x38(%rbp)
000000000000355b	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003560	movq	(%rax), %rdx
0000000000003563	movq	-0x30(%rbp), %rdi
0000000000003567	movq	-0x38(%rbp), %rsi
000000000000356b	callq	0x1f542 ## symbol stub for: __ZSt10__copy_auxIPP12ModContainerS2_ET0_T_S4_S3_
0000000000003570	movq	%rax, -0x28(%rbp)
0000000000003574	leaq	-0x8(%rbp), %rdi
0000000000003578	leaq	-0x28(%rbp), %rsi
000000000000357c	callq	0x1f30e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003581	movq	-0x8(%rbp), %rax
0000000000003585	addq	$0x40, %rsp
0000000000003589	popq	%rbp
000000000000358a	retq
000000000000358b	nopl	(%rax,%rax)
__ZSt10__copy_auxIPP12ModContainerS2_ET0_T_S4_S3_:
0000000000003590	pushq	%rbp
0000000000003591	movq	%rsp, %rbp
0000000000003594	subq	$0x20, %rsp
0000000000003598	movq	%rdi, -0x8(%rbp)
000000000000359c	movq	%rsi, -0x10(%rbp)
00000000000035a0	movq	%rdx, -0x18(%rbp)
00000000000035a4	movb	$0x1, -0x19(%rbp)
00000000000035a8	movq	-0x8(%rbp), %rdi
00000000000035ac	movq	-0x10(%rbp), %rsi
00000000000035b0	movq	-0x18(%rbp), %rdx
00000000000035b4	callq	0x1f4c4 ## symbol stub for: __ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP12ModContainerEEPT_PKS5_S8_S6_
00000000000035b9	addq	$0x20, %rsp
00000000000035bd	popq	%rbp
00000000000035be	retq
00000000000035bf	nop
__ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP12ModContainerEEPT_PKS5_S8_S6_:
00000000000035c0	pushq	%rbp
00000000000035c1	movq	%rsp, %rbp
00000000000035c4	subq	$0x30, %rsp
00000000000035c8	movq	%rdi, -0x8(%rbp)
00000000000035cc	movq	%rsi, -0x10(%rbp)
00000000000035d0	movq	%rdx, -0x18(%rbp)
00000000000035d4	movq	-0x18(%rbp), %rdx
00000000000035d8	movq	-0x8(%rbp), %rsi
00000000000035dc	movq	-0x10(%rbp), %rdi
00000000000035e0	movq	-0x8(%rbp), %rax
00000000000035e4	subq	%rax, %rdi
00000000000035e7	sarq	$0x3, %rdi
00000000000035eb	shlq	$0x3, %rdi
00000000000035ef	movq	%rdi, -0x20(%rbp)
00000000000035f3	movq	%rdx, %rdi
00000000000035f6	movq	-0x20(%rbp), %rdx
00000000000035fa	callq	0x1f6a4 ## symbol stub for: _memmove
00000000000035ff	movq	-0x18(%rbp), %rdx
0000000000003603	movq	-0x10(%rbp), %rsi
0000000000003607	movq	-0x8(%rbp), %rdi
000000000000360b	subq	%rdi, %rsi
000000000000360e	sarq	$0x3, %rsi
0000000000003612	shlq	$0x3, %rsi
0000000000003616	addq	%rsi, %rdx
0000000000003619	movq	%rax, -0x28(%rbp)
000000000000361d	movq	%rdx, %rax
0000000000003620	addq	$0x30, %rsp
0000000000003624	popq	%rbp
0000000000003625	retq
0000000000003626	nopw	%cs:(%rax,%rax)
__ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
0000000000003630	pushq	%rbp
0000000000003631	movq	%rsp, %rbp
0000000000003634	subq	$0x20, %rsp
0000000000003638	movq	%rdi, -0x8(%rbp)
000000000000363c	movq	%rsi, -0x10(%rbp)
0000000000003640	movq	-0x8(%rbp), %rdi
0000000000003644	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003649	movq	(%rax), %rax
000000000000364c	movq	-0x10(%rbp), %rdi
0000000000003650	movq	%rax, -0x18(%rbp)
0000000000003654	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003659	movq	-0x18(%rbp), %rsi
000000000000365d	cmpq	(%rax), %rsi
0000000000003660	setne	%cl
0000000000003663	andb	$0x1, %cl
0000000000003666	movzbl	%cl, %eax
0000000000003669	addq	$0x20, %rsp
000000000000366d	popq	%rbp
000000000000366e	retq
000000000000366f	nop
__ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_:
0000000000003670	pushq	%rbp
0000000000003671	movq	%rsp, %rbp
0000000000003674	subq	$0x50, %rsp
0000000000003678	movq	%rdi, -0x10(%rbp)
000000000000367c	movq	%rsi, -0x18(%rbp)
0000000000003680	movq	%rdx, -0x20(%rbp)
0000000000003684	movq	-0x10(%rbp), %rdx
0000000000003688	movq	%rdx, -0x28(%rbp)
000000000000368c	movq	-0x18(%rbp), %rdx
0000000000003690	movq	%rdx, -0x30(%rbp)
0000000000003694	movq	-0x20(%rbp), %rdx
0000000000003698	leaq	-0x10(%rbp), %rdi
000000000000369c	movq	%rdx, -0x48(%rbp)
00000000000036a0	callq	0x1f58a ## symbol stub for: __ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_
00000000000036a5	movq	-0x28(%rbp), %rdi
00000000000036a9	movq	-0x30(%rbp), %rsi
00000000000036ad	movq	-0x48(%rbp), %rdx
00000000000036b1	callq	0x1f5cc ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_St26random_access_iterator_tag
00000000000036b6	movq	%rax, -0x8(%rbp)
00000000000036ba	movq	-0x8(%rbp), %rax
00000000000036be	addq	$0x50, %rsp
00000000000036c2	popq	%rbp
00000000000036c3	retq
00000000000036c4	nopw	%cs:(%rax,%rax)
00000000000036ce	nop
__ZN9__gnu_cxxeqIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
00000000000036d0	pushq	%rbp
00000000000036d1	movq	%rsp, %rbp
00000000000036d4	subq	$0x20, %rsp
00000000000036d8	movq	%rdi, -0x8(%rbp)
00000000000036dc	movq	%rsi, -0x10(%rbp)
00000000000036e0	movq	-0x8(%rbp), %rdi
00000000000036e4	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000036e9	movq	(%rax), %rax
00000000000036ec	movq	-0x10(%rbp), %rdi
00000000000036f0	movq	%rax, -0x18(%rbp)
00000000000036f4	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000036f9	movq	-0x18(%rbp), %rsi
00000000000036fd	cmpq	(%rax), %rsi
0000000000003700	sete	%cl
0000000000003703	andb	$0x1, %cl
0000000000003706	movzbl	%cl, %eax
0000000000003709	addq	$0x20, %rsp
000000000000370d	popq	%rbp
000000000000370e	retq
000000000000370f	nop
__ZSt11remove_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_RKT1_:
0000000000003710	pushq	%rbp
0000000000003711	movq	%rsp, %rbp
0000000000003714	subq	$0x40, %rsp
0000000000003718	movq	%rdi, -0x10(%rbp)
000000000000371c	movq	%rsi, -0x18(%rbp)
0000000000003720	movq	%rdx, -0x20(%rbp)
0000000000003724	movq	%rcx, -0x28(%rbp)
0000000000003728	leaq	-0x10(%rbp), %rdi
000000000000372c	leaq	-0x18(%rbp), %rsi
0000000000003730	callq	0x1f344 ## symbol stub for: __ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003735	testb	$0x1, %al
0000000000003737	jne	0x3742
000000000000373d	jmp	0x379f
0000000000003742	leaq	-0x10(%rbp), %rdi
0000000000003746	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
000000000000374b	movq	(%rax), %rax
000000000000374e	movq	-0x28(%rbp), %rdi
0000000000003752	cmpq	(%rdi), %rax
0000000000003755	je	0x3788
000000000000375b	leaq	-0x10(%rbp), %rdi
000000000000375f	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003764	movq	(%rax), %rax
0000000000003767	leaq	-0x20(%rbp), %rdi
000000000000376b	movq	%rax, -0x30(%rbp)
000000000000376f	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003774	movq	-0x30(%rbp), %rdi
0000000000003778	movq	%rdi, (%rax)
000000000000377b	leaq	-0x20(%rbp), %rdi
000000000000377f	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003784	movq	%rax, -0x38(%rbp)
0000000000003788	jmp	0x378d
000000000000378d	leaq	-0x10(%rbp), %rdi
0000000000003791	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003796	movq	%rax, -0x40(%rbp)
000000000000379a	jmp	0x3728
000000000000379f	movq	-0x20(%rbp), %rax
00000000000037a3	movq	%rax, -0x8(%rbp)
00000000000037a7	movq	-0x8(%rbp), %rax
00000000000037ab	addq	$0x40, %rsp
00000000000037af	popq	%rbp
00000000000037b0	retq
00000000000037b1	nopw	%cs:(%rax,%rax)
00000000000037bb	nopl	(%rax,%rax)
__ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_St26random_access_iterator_tag:
00000000000037c0	pushq	%rbp
00000000000037c1	movq	%rsp, %rbp
00000000000037c4	subq	$0x80, %rsp
00000000000037cb	movq	%rdi, -0x10(%rbp)
00000000000037cf	movq	%rsi, -0x18(%rbp)
00000000000037d3	movq	%rdx, -0x28(%rbp)
00000000000037d7	leaq	-0x18(%rbp), %rdi
00000000000037db	leaq	-0x10(%rbp), %rsi
00000000000037df	callq	0x1f33e ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
00000000000037e4	sarq	$0x2, %rax
00000000000037e8	movq	%rax, -0x30(%rbp)
00000000000037ec	cmpq	$0x0, -0x30(%rbp)
00000000000037f1	jle	0x38d4
00000000000037f7	leaq	-0x10(%rbp), %rdi
00000000000037fb	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003800	movq	(%rax), %rax
0000000000003803	movq	-0x28(%rbp), %rdi
0000000000003807	cmpq	(%rdi), %rax
000000000000380a	jne	0x381d
0000000000003810	movq	-0x10(%rbp), %rax
0000000000003814	movq	%rax, -0x8(%rbp)
0000000000003818	jmp	0x39b0
000000000000381d	leaq	-0x10(%rbp), %rdi
0000000000003821	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003826	leaq	-0x10(%rbp), %rdi
000000000000382a	movq	%rax, -0x38(%rbp)
000000000000382e	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003833	movq	(%rax), %rax
0000000000003836	movq	-0x28(%rbp), %rdi
000000000000383a	cmpq	(%rdi), %rax
000000000000383d	jne	0x3850
0000000000003843	movq	-0x10(%rbp), %rax
0000000000003847	movq	%rax, -0x8(%rbp)
000000000000384b	jmp	0x39b0
0000000000003850	leaq	-0x10(%rbp), %rdi
0000000000003854	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003859	leaq	-0x10(%rbp), %rdi
000000000000385d	movq	%rax, -0x40(%rbp)
0000000000003861	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003866	movq	(%rax), %rax
0000000000003869	movq	-0x28(%rbp), %rdi
000000000000386d	cmpq	(%rdi), %rax
0000000000003870	jne	0x3883
0000000000003876	movq	-0x10(%rbp), %rax
000000000000387a	movq	%rax, -0x8(%rbp)
000000000000387e	jmp	0x39b0
0000000000003883	leaq	-0x10(%rbp), %rdi
0000000000003887	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000388c	leaq	-0x10(%rbp), %rdi
0000000000003890	movq	%rax, -0x48(%rbp)
0000000000003894	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003899	movq	(%rax), %rax
000000000000389c	movq	-0x28(%rbp), %rdi
00000000000038a0	cmpq	(%rdi), %rax
00000000000038a3	jne	0x38b6
00000000000038a9	movq	-0x10(%rbp), %rax
00000000000038ad	movq	%rax, -0x8(%rbp)
00000000000038b1	jmp	0x39b0
00000000000038b6	leaq	-0x10(%rbp), %rdi
00000000000038ba	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
00000000000038bf	movq	%rax, -0x50(%rbp)
00000000000038c3	movq	-0x30(%rbp), %rax
00000000000038c7	addq	$-0x1, %rax
00000000000038cb	movq	%rax, -0x30(%rbp)
00000000000038cf	jmp	0x37ec
00000000000038d4	leaq	-0x18(%rbp), %rdi
00000000000038d8	leaq	-0x10(%rbp), %rsi
00000000000038dc	callq	0x1f33e ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
00000000000038e1	movq	%rax, %rsi
00000000000038e4	subq	$0x3, %rax
00000000000038e8	movq	%rsi, -0x58(%rbp)
00000000000038ec	movq	%rax, -0x60(%rbp)
00000000000038f0	ja	0x39a8
00000000000038f6	leaq	0xc3(%rip), %rax
00000000000038fd	movq	-0x58(%rbp), %rcx
0000000000003901	movslq	(%rax,%rcx,4), %rdx
0000000000003905	addq	%rax, %rdx
0000000000003908	jmpq	*%rdx
000000000000390a	leaq	-0x10(%rbp), %rdi
000000000000390e	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003913	movq	(%rax), %rax
0000000000003916	movq	-0x28(%rbp), %rdi
000000000000391a	cmpq	(%rdi), %rax
000000000000391d	jne	0x3930
0000000000003923	movq	-0x10(%rbp), %rax
0000000000003927	movq	%rax, -0x8(%rbp)
000000000000392b	jmp	0x39b0
0000000000003930	leaq	-0x10(%rbp), %rdi
0000000000003934	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003939	movq	%rax, -0x68(%rbp)
000000000000393d	leaq	-0x10(%rbp), %rdi
0000000000003941	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003946	movq	(%rax), %rax
0000000000003949	movq	-0x28(%rbp), %rdi
000000000000394d	cmpq	(%rdi), %rax
0000000000003950	jne	0x3963
0000000000003956	movq	-0x10(%rbp), %rax
000000000000395a	movq	%rax, -0x8(%rbp)
000000000000395e	jmp	0x39b0
0000000000003963	leaq	-0x10(%rbp), %rdi
0000000000003967	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000396c	movq	%rax, -0x70(%rbp)
0000000000003970	leaq	-0x10(%rbp), %rdi
0000000000003974	callq	0x1f37a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003979	movq	(%rax), %rax
000000000000397c	movq	-0x28(%rbp), %rdi
0000000000003980	cmpq	(%rdi), %rax
0000000000003983	jne	0x3996
0000000000003989	movq	-0x10(%rbp), %rax
000000000000398d	movq	%rax, -0x8(%rbp)
0000000000003991	jmp	0x39b0
0000000000003996	leaq	-0x10(%rbp), %rdi
000000000000399a	callq	0x1f31a ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
000000000000399f	movq	%rax, -0x78(%rbp)
00000000000039a3	jmp	0x39a8
00000000000039a8	movq	-0x18(%rbp), %rax
00000000000039ac	movq	%rax, -0x8(%rbp)
00000000000039b0	movq	-0x8(%rbp), %rax
00000000000039b4	addq	$0x80, %rsp
00000000000039bb	popq	%rbp
00000000000039bc	retq
00000000000039bd	nopl	(%rax)
00000000000039c0	jrcxz	0x39c1
00000000000039c2	.byte 0xff #bad opcode
00000000000039c3	pushq	0x7dffffff(%rax)
00000000000039c9	.byte 0xff #bad opcode
00000000000039ca	.byte 0xff #bad opcode
00000000000039cb	decl	-0x1(%rdx)
00000000000039ce	.byte 0xff #bad opcode
00000000000039cf	callq	*0x48(%rbp)
__ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_:
00000000000039d0	pushq	%rbp
00000000000039d1	movq	%rsp, %rbp
00000000000039d4	movq	%rdi, -0x10(%rbp)
00000000000039d8	popq	%rbp
00000000000039d9	retq
00000000000039da	nopw	(%rax,%rax)
__ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE:
00000000000039e0	pushq	%rbp
00000000000039e1	movq	%rsp, %rbp
00000000000039e4	subq	$0x20, %rsp
00000000000039e8	movq	%rdi, -0x8(%rbp)
00000000000039ec	movq	%rsi, -0x10(%rbp)
00000000000039f0	movq	-0x8(%rbp), %rdi
00000000000039f4	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000039f9	movq	(%rax), %rax
00000000000039fc	movq	-0x10(%rbp), %rdi
0000000000003a00	movq	%rax, -0x18(%rbp)
0000000000003a04	callq	0x1f374 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003a09	movq	(%rax), %rax
0000000000003a0c	movq	-0x18(%rbp), %rsi
0000000000003a10	subq	%rax, %rsi
0000000000003a13	sarq	$0x3, %rsi
0000000000003a17	movq	%rsi, %rax
0000000000003a1a	addq	$0x20, %rsp
0000000000003a1e	popq	%rbp
0000000000003a1f	retq
__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003a20	pushq	%rbp
0000000000003a21	movq	%rsp, %rbp
0000000000003a24	subq	$0x40, %rsp
0000000000003a28	movq	%rdi, -0x10(%rbp)
0000000000003a2c	movq	%rsi, -0x18(%rbp)
0000000000003a30	movq	%rdx, -0x20(%rbp)
0000000000003a34	movb	$0x1, -0x21(%rbp)
0000000000003a38	movb	$0x1, -0x22(%rbp)
0000000000003a3c	movq	-0x10(%rbp), %rdx
0000000000003a40	movq	%rdx, -0x30(%rbp)
0000000000003a44	movq	-0x18(%rbp), %rdx
0000000000003a48	movq	%rdx, -0x38(%rbp)
0000000000003a4c	movq	-0x20(%rbp), %rdx
0000000000003a50	movq	%rdx, -0x40(%rbp)
0000000000003a54	movq	-0x30(%rbp), %rdi
0000000000003a58	movq	-0x38(%rbp), %rsi
0000000000003a5c	movq	-0x40(%rbp), %rdx
0000000000003a60	callq	0x1f4be ## symbol stub for: __ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000003a65	movq	%rax, -0x8(%rbp)
0000000000003a69	movq	-0x8(%rbp), %rax
0000000000003a6d	addq	$0x40, %rsp
0000000000003a71	popq	%rbp
0000000000003a72	retq
0000000000003a73	nopw	%cs:(%rax,%rax)
0000000000003a7d	nopl	(%rax)
__ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E:
0000000000003a80	pushq	%rbp
0000000000003a81	movq	%rsp, %rbp
0000000000003a84	subq	$0x40, %rsp
0000000000003a88	movq	%rdi, -0x10(%rbp)
0000000000003a8c	movq	%rsi, -0x18(%rbp)
0000000000003a90	movq	%rdx, -0x20(%rbp)
0000000000003a94	movq	-0x10(%rbp), %rdx
0000000000003a98	movq	%rdx, -0x28(%rbp)
0000000000003a9c	movq	-0x18(%rbp), %rdx
0000000000003aa0	movq	%rdx, -0x30(%rbp)
0000000000003aa4	movq	-0x20(%rbp), %rdx
0000000000003aa8	movq	%rdx, -0x38(%rbp)
0000000000003aac	movq	-0x28(%rbp), %rdi
0000000000003ab0	movq	-0x30(%rbp), %rsi
0000000000003ab4	movq	-0x38(%rbp), %rdx
0000000000003ab8	movq	%rcx, -0x40(%rbp)
0000000000003abc	callq	0x1f572 ## symbol stub for: __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000003ac1	movq	%rax, -0x8(%rbp)
0000000000003ac5	movq	-0x8(%rbp), %rax
0000000000003ac9	addq	$0x40, %rsp
0000000000003acd	popq	%rbp
0000000000003ace	retq
0000000000003acf	nop
__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_:
0000000000003ad0	pushq	%rbp
0000000000003ad1	movq	%rsp, %rbp
0000000000003ad4	subq	$0x30, %rsp
0000000000003ad8	movq	%rdi, -0x8(%rbp)
0000000000003adc	movq	%rsi, -0x10(%rbp)
0000000000003ae0	movq	%rdx, -0x18(%rbp)
0000000000003ae4	leaq	-0x8(%rbp), %rdi
0000000000003ae8	leaq	-0x10(%rbp), %rsi
0000000000003aec	callq	0x1f34a ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003af1	testb	$0x1, %al
0000000000003af3	jne	0x3afe
0000000000003af9	jmp	0x3b2d
0000000000003afe	movq	-0x18(%rbp), %rax
0000000000003b02	leaq	-0x8(%rbp), %rdi
0000000000003b06	movq	%rax, -0x20(%rbp)
0000000000003b0a	callq	0x1f386 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003b0f	movq	-0x20(%rbp), %rdi
0000000000003b13	movq	%rax, %rsi
0000000000003b16	callq	0x1f2d2 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_
0000000000003b1b	leaq	-0x8(%rbp), %rdi
0000000000003b1f	callq	0x1f32c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003b24	movq	%rax, -0x28(%rbp)
0000000000003b28	jmp	0x3ae4
0000000000003b2d	addq	$0x30, %rsp
0000000000003b31	popq	%rbp
0000000000003b32	retq
0000000000003b33	nopw	%cs:(%rax,%rax)
0000000000003b3d	nopl	(%rax)
__ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003b40	pushq	%rbp
0000000000003b41	movq	%rsp, %rbp
0000000000003b44	subq	$0x40, %rsp
0000000000003b48	movq	%rdi, -0x10(%rbp)
0000000000003b4c	movq	%rsi, -0x18(%rbp)
0000000000003b50	movq	%rdx, -0x20(%rbp)
0000000000003b54	leaq	-0x10(%rbp), %rdi
0000000000003b58	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003b5d	movq	(%rax), %rdi
0000000000003b60	leaq	-0x18(%rbp), %rax
0000000000003b64	movq	%rdi, -0x30(%rbp)
0000000000003b68	movq	%rax, %rdi
0000000000003b6b	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003b70	movq	(%rax), %rsi
0000000000003b73	leaq	-0x20(%rbp), %rdi
0000000000003b77	movq	%rsi, -0x38(%rbp)
0000000000003b7b	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003b80	movq	(%rax), %rdx
0000000000003b83	movq	-0x30(%rbp), %rdi
0000000000003b87	movq	-0x38(%rbp), %rsi
0000000000003b8b	callq	0x1f584 ## symbol stub for: __ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000003b90	movq	%rax, -0x28(%rbp)
0000000000003b94	leaq	-0x8(%rbp), %rdi
0000000000003b98	leaq	-0x28(%rbp), %rsi
0000000000003b9c	callq	0x1f320 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003ba1	movq	-0x8(%rbp), %rax
0000000000003ba5	addq	$0x40, %rsp
0000000000003ba9	popq	%rbp
0000000000003baa	retq
0000000000003bab	nopl	(%rax,%rax)
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP13BaseContainerEEPT_PKS5_S8_S6_:
0000000000003bb0	pushq	%rbp
0000000000003bb1	movq	%rsp, %rbp
0000000000003bb4	subq	$0x40, %rsp
0000000000003bb8	xorl	%eax, %eax
0000000000003bba	movl	%eax, %ecx
0000000000003bbc	movq	%rdi, -0x8(%rbp)
0000000000003bc0	movq	%rsi, -0x10(%rbp)
0000000000003bc4	movq	%rdx, -0x18(%rbp)
0000000000003bc8	movq	-0x10(%rbp), %rdx
0000000000003bcc	movq	-0x8(%rbp), %rsi
0000000000003bd0	subq	%rsi, %rdx
0000000000003bd3	sarq	$0x3, %rdx
0000000000003bd7	movq	%rdx, -0x20(%rbp)
0000000000003bdb	movq	-0x18(%rbp), %rdx
0000000000003bdf	movq	%rcx, %rsi
0000000000003be2	subq	-0x20(%rbp), %rsi
0000000000003be6	shlq	$0x3, %rsi
0000000000003bea	addq	%rsi, %rdx
0000000000003bed	movq	-0x8(%rbp), %rsi
0000000000003bf1	movq	-0x20(%rbp), %rdi
0000000000003bf5	shlq	$0x3, %rdi
0000000000003bf9	movq	%rdi, -0x28(%rbp)
0000000000003bfd	movq	%rdx, %rdi
0000000000003c00	movq	-0x28(%rbp), %rdx
0000000000003c04	movq	%rcx, -0x30(%rbp)
0000000000003c08	callq	0x1f6a4 ## symbol stub for: _memmove
0000000000003c0d	movq	-0x18(%rbp), %rcx
0000000000003c11	movq	-0x30(%rbp), %rdx
0000000000003c15	subq	-0x20(%rbp), %rdx
0000000000003c19	shlq	$0x3, %rdx
0000000000003c1d	addq	%rdx, %rcx
0000000000003c20	movq	%rax, -0x38(%rbp)
0000000000003c24	movq	%rcx, %rax
0000000000003c27	addq	$0x40, %rsp
0000000000003c2b	popq	%rbp
0000000000003c2c	retq
0000000000003c2d	nopl	(%rax)
__ZN9__gnu_cxxmiIPKP13BaseContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE:
0000000000003c30	pushq	%rbp
0000000000003c31	movq	%rsp, %rbp
0000000000003c34	subq	$0x20, %rsp
0000000000003c38	movq	%rdi, -0x8(%rbp)
0000000000003c3c	movq	%rsi, -0x10(%rbp)
0000000000003c40	movq	-0x8(%rbp), %rdi
0000000000003c44	callq	0x1f36e ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003c49	movq	(%rax), %rax
0000000000003c4c	movq	-0x10(%rbp), %rdi
0000000000003c50	movq	%rax, -0x18(%rbp)
0000000000003c54	callq	0x1f36e ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003c59	movq	(%rax), %rax
0000000000003c5c	movq	-0x18(%rbp), %rsi
0000000000003c60	subq	%rax, %rsi
0000000000003c63	sarq	$0x3, %rsi
0000000000003c67	movq	%rsi, %rax
0000000000003c6a	addq	$0x20, %rsp
0000000000003c6e	popq	%rbp
0000000000003c6f	retq
__ZNKSt6vectorIP13BaseContainerSaIS1_EE3endEv:
0000000000003c70	pushq	%rbp
0000000000003c71	movq	%rsp, %rbp
0000000000003c74	subq	$0x20, %rsp
0000000000003c78	movq	%rdi, -0x10(%rbp)
0000000000003c7c	movq	-0x10(%rbp), %rdi
0000000000003c80	movq	0x8(%rdi), %rdi
0000000000003c84	movq	%rdi, -0x18(%rbp)
0000000000003c88	leaq	-0x8(%rbp), %rdi
0000000000003c8c	leaq	-0x18(%rbp), %rsi
0000000000003c90	callq	0x1f302 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003c95	movq	-0x8(%rbp), %rax
0000000000003c99	addq	$0x20, %rsp
0000000000003c9d	popq	%rbp
0000000000003c9e	retq
0000000000003c9f	nop
__ZNKSt6vectorIP13BaseContainerSaIS1_EE5beginEv:
0000000000003ca0	pushq	%rbp
0000000000003ca1	movq	%rsp, %rbp
0000000000003ca4	subq	$0x20, %rsp
0000000000003ca8	movq	%rdi, -0x10(%rbp)
0000000000003cac	movq	-0x10(%rbp), %rdi
0000000000003cb0	movq	(%rdi), %rdi
0000000000003cb3	movq	%rdi, -0x18(%rbp)
0000000000003cb7	leaq	-0x8(%rbp), %rdi
0000000000003cbb	leaq	-0x18(%rbp), %rsi
0000000000003cbf	callq	0x1f302 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003cc4	movq	-0x8(%rbp), %rax
0000000000003cc8	addq	$0x20, %rsp
0000000000003ccc	popq	%rbp
0000000000003ccd	retq
0000000000003cce	nop
__ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv:
0000000000003cd0	pushq	%rbp
0000000000003cd1	movq	%rsp, %rbp
0000000000003cd4	movq	%rdi, -0x8(%rbp)
0000000000003cd8	movq	-0x8(%rbp), %rax
0000000000003cdc	popq	%rbp
0000000000003cdd	retq
0000000000003cde	nop
__ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_:
0000000000003ce0	pushq	%rbp
0000000000003ce1	movq	%rsp, %rbp
0000000000003ce4	subq	$0x10, %rsp
0000000000003ce8	movq	%rdi, -0x8(%rbp)
0000000000003cec	movq	%rsi, -0x10(%rbp)
0000000000003cf0	movq	-0x8(%rbp), %rdi
0000000000003cf4	movq	-0x10(%rbp), %rsi
0000000000003cf8	callq	0x1f308 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_
0000000000003cfd	addq	$0x10, %rsp
0000000000003d01	popq	%rbp
0000000000003d02	retq
0000000000003d03	nopw	%cs:(%rax,%rax)
0000000000003d0d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_:
0000000000003d10	pushq	%rbp
0000000000003d11	movq	%rsp, %rbp
0000000000003d14	movq	%rdi, -0x8(%rbp)
0000000000003d18	movq	%rsi, -0x10(%rbp)
0000000000003d1c	movq	-0x8(%rbp), %rsi
0000000000003d20	movq	-0x10(%rbp), %rdi
0000000000003d24	movq	(%rdi), %rdi
0000000000003d27	movq	%rdi, (%rsi)
0000000000003d2a	popq	%rbp
0000000000003d2b	retq
0000000000003d2c	nopl	(%rax)
__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003d30	pushq	%rbp
0000000000003d31	movq	%rsp, %rbp
0000000000003d34	subq	$0x40, %rsp
0000000000003d38	movq	%rdi, -0x10(%rbp)
0000000000003d3c	movq	%rsi, -0x18(%rbp)
0000000000003d40	movq	%rdx, -0x20(%rbp)
0000000000003d44	movq	-0x10(%rbp), %rdx
0000000000003d48	movq	%rdx, -0x28(%rbp)
0000000000003d4c	movq	-0x18(%rbp), %rdx
0000000000003d50	movq	%rdx, -0x30(%rbp)
0000000000003d54	movq	-0x20(%rbp), %rdx
0000000000003d58	movq	%rdx, -0x38(%rbp)
0000000000003d5c	movq	-0x28(%rbp), %rdi
0000000000003d60	movq	-0x30(%rbp), %rsi
0000000000003d64	movq	-0x38(%rbp), %rdx
0000000000003d68	callq	0x1f5a8 ## symbol stub for: __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
0000000000003d6d	movq	%rax, -0x8(%rbp)
0000000000003d71	movq	-0x8(%rbp), %rax
0000000000003d75	addq	$0x40, %rsp
0000000000003d79	popq	%rbp
0000000000003d7a	retq
0000000000003d7b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:
0000000000003d80	pushq	%rbp
0000000000003d81	movq	%rsp, %rbp
0000000000003d84	subq	$0x40, %rsp
0000000000003d88	movq	%rdi, -0x10(%rbp)
0000000000003d8c	movq	%rsi, -0x18(%rbp)
0000000000003d90	movq	%rdx, -0x20(%rbp)
0000000000003d94	movq	-0x10(%rbp), %rdx
0000000000003d98	movq	%rdx, -0x30(%rbp)
0000000000003d9c	movq	-0x18(%rbp), %rdx
0000000000003da0	movq	%rdx, -0x38(%rbp)
0000000000003da4	movq	-0x20(%rbp), %rdx
0000000000003da8	movq	%rdx, -0x40(%rbp)
0000000000003dac	movq	-0x30(%rbp), %rdi
0000000000003db0	movq	-0x38(%rbp), %rsi
0000000000003db4	movq	-0x40(%rbp), %rdx
0000000000003db8	callq	0x1f5ba ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000003dbd	movq	%rax, -0x8(%rbp)
0000000000003dc1	movq	-0x8(%rbp), %rax
0000000000003dc5	addq	$0x40, %rsp
0000000000003dc9	popq	%rbp
0000000000003dca	retq
0000000000003dcb	nopl	(%rax,%rax)
__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003dd0	pushq	%rbp
0000000000003dd1	movq	%rsp, %rbp
0000000000003dd4	subq	$0x40, %rsp
0000000000003dd8	movq	%rdi, -0x10(%rbp)
0000000000003ddc	movq	%rsi, -0x18(%rbp)
0000000000003de0	movq	%rdx, -0x20(%rbp)
0000000000003de4	movb	$0x1, -0x21(%rbp)
0000000000003de8	movb	$0x1, -0x22(%rbp)
0000000000003dec	movq	-0x10(%rbp), %rdx
0000000000003df0	movq	%rdx, -0x30(%rbp)
0000000000003df4	movq	-0x18(%rbp), %rdx
0000000000003df8	movq	%rdx, -0x38(%rbp)
0000000000003dfc	movq	-0x20(%rbp), %rdx
0000000000003e00	movq	%rdx, -0x40(%rbp)
0000000000003e04	movq	-0x30(%rbp), %rdi
0000000000003e08	movq	-0x38(%rbp), %rsi
0000000000003e0c	movq	-0x40(%rbp), %rdx
0000000000003e10	callq	0x1f4a0 ## symbol stub for: __ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000003e15	movq	%rax, -0x8(%rbp)
0000000000003e19	movq	-0x8(%rbp), %rax
0000000000003e1d	addq	$0x40, %rsp
0000000000003e21	popq	%rbp
0000000000003e22	retq
0000000000003e23	nopw	%cs:(%rax,%rax)
0000000000003e2d	nopl	(%rax)
__ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003e30	pushq	%rbp
0000000000003e31	movq	%rsp, %rbp
0000000000003e34	subq	$0x40, %rsp
0000000000003e38	movq	%rdi, -0x10(%rbp)
0000000000003e3c	movq	%rsi, -0x18(%rbp)
0000000000003e40	movq	%rdx, -0x20(%rbp)
0000000000003e44	leaq	-0x10(%rbp), %rdi
0000000000003e48	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003e4d	movq	(%rax), %rdi
0000000000003e50	leaq	-0x18(%rbp), %rax
0000000000003e54	movq	%rdi, -0x30(%rbp)
0000000000003e58	movq	%rax, %rdi
0000000000003e5b	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003e60	movq	(%rax), %rsi
0000000000003e63	leaq	-0x20(%rbp), %rdi
0000000000003e67	movq	%rsi, -0x38(%rbp)
0000000000003e6b	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003e70	movq	(%rax), %rdx
0000000000003e73	movq	-0x30(%rbp), %rdi
0000000000003e77	movq	-0x38(%rbp), %rsi
0000000000003e7b	callq	0x1f548 ## symbol stub for: __ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000003e80	movq	%rax, -0x28(%rbp)
0000000000003e84	leaq	-0x8(%rbp), %rdi
0000000000003e88	leaq	-0x28(%rbp), %rsi
0000000000003e8c	callq	0x1f320 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003e91	movq	-0x8(%rbp), %rax
0000000000003e95	addq	$0x40, %rsp
0000000000003e99	popq	%rbp
0000000000003e9a	retq
0000000000003e9b	nopl	(%rax,%rax)
___cxx_global_var_init:
0000000000003ea0	pushq	%rbp
0000000000003ea1	movq	%rsp, %rbp
0000000000003ea4	subq	$0x10, %rsp
0000000000003ea8	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
0000000000003eaf	callq	0x1f530 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
0000000000003eb4	movq	0x6215d(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
0000000000003ebb	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
0000000000003ec2	leaq	-0x3ec9(%rip), %rdx
0000000000003ec9	callq	0x1f620 ## symbol stub for: ___cxa_atexit
0000000000003ece	movl	%eax, -0x4(%rbp)
0000000000003ed1	addq	$0x10, %rsp
0000000000003ed5	popq	%rbp
0000000000003ed6	retq
0000000000003ed7	nopw	(%rax,%rax)
___cxx_global_var_init.1:
0000000000003ee0	pushq	%rbp
0000000000003ee1	movq	%rsp, %rbp
0000000000003ee4	subq	$0x30, %rsp
0000000000003ee8	leaq	-0x8(%rbp), %rax
0000000000003eec	movq	%rax, %rdi
0000000000003eef	movq	%rax, -0x20(%rbp)
0000000000003ef3	callq	0x1f3c8 ## symbol stub for: __ZNSaIP12ModContainerEC1Ev
0000000000003ef8	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000003eff	movq	-0x20(%rbp), %rsi
0000000000003f03	callq	0x1f4ee ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EEC1ERKS2_
0000000000003f08	jmp	0x3f0d
0000000000003f0d	leaq	-0x8(%rbp), %rdi
0000000000003f11	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000003f16	movq	0x620f3(%rip), %rdi ## literal pool symbol address: __ZNSt6vectorIP12ModContainerSaIS1_EED1Ev
0000000000003f1d	leaq	__ZN12ModContainer10containersE(%rip), %rax ## ModContainer::containers
0000000000003f24	movq	%rax, %rsi
0000000000003f27	leaq	-0x3f2e(%rip), %rdx
0000000000003f2e	callq	0x1f620 ## symbol stub for: ___cxa_atexit
0000000000003f33	movl	%eax, -0x24(%rbp)
0000000000003f36	addq	$0x30, %rsp
0000000000003f3a	popq	%rbp
0000000000003f3b	retq
0000000000003f3c	movl	%edx, %ecx
0000000000003f3e	movq	%rax, -0x10(%rbp)
0000000000003f42	movl	%ecx, -0x14(%rbp)
0000000000003f45	leaq	-0x8(%rbp), %rdi
0000000000003f49	callq	0x1f3da ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000003f4e	movq	-0x10(%rbp), %rdi
0000000000003f52	callq	0x1f260 ## symbol stub for: __Unwind_Resume
0000000000003f57	ud2
0000000000003f59	nopl	(%rax)
__GLOBAL__sub_I_GDML.cpp:
0000000000003f60	pushq	%rbp
0000000000003f61	movq	%rsp, %rbp
0000000000003f64	callq	___cxx_global_var_init
0000000000003f69	callq	___cxx_global_var_init.1
0000000000003f6e	popq	%rbp
0000000000003f6f	retq
__Z4dupePvPS_:
0000000000003f70	pushq	%rbp
0000000000003f71	movq	%rsp, %rbp
0000000000003f74	subq	$0x90, %rsp
0000000000003f7b	movq	%rdi, -0x10(%rbp)
0000000000003f7f	movq	%rsi, -0x18(%rbp)
0000000000003f83	cmpq	$0x0, -0x10(%rbp)
0000000000003f88	je	0x3f99
0000000000003f8e	cmpq	$0x0, -0x18(%rbp)
0000000000003f93	jne	0x3fa5
0000000000003f99	movl	$0x4, -0x4(%rbp)
0000000000003fa0	jmp	0x424c
0000000000003fa5	xorl	%esi, %esi
0000000000003fa7	movq	$0x0, -0x20(%rbp)
0000000000003faf	movq	$0x0, -0x28(%rbp)
0000000000003fb7	leaq	-0x48(%rbp), %rax
0000000000003fbb	movq	%rax, %rcx
0000000000003fbe	movq	%rcx, %rdi
0000000000003fc1	movl	$0x20, %edx
0000000000003fc6	movq	%rax, -0x78(%rbp)
0000000000003fca	callq	0x1f6aa ## symbol stub for: _memset
0000000000003fcf	movq	-0x10(%rbp), %rdi
0000000000003fd3	movq	-0x78(%rbp), %rsi
0000000000003fd7	callq	0x1f66e ## symbol stub for: _dladdr
0000000000003fdc	cmpl	$0x0, %eax
0000000000003fdf	je	0x3fed
0000000000003fe5	movq	-0x40(%rbp), %rax
0000000000003fe9	movq	%rax, -0x20(%rbp)
0000000000003fed	cmpq	$0x0, -0x20(%rbp)
0000000000003ff2	jne	0x402b
0000000000003ff8	movq	0x62061(%rip), %rax ## literal pool symbol address: ___stderrp
0000000000003fff	movq	(%rax), %rdi
0000000000004002	leaq	0x5c903(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Could not found a loaded mach-o image containing the given function.\n"
0000000000004009	leaq	0x5c951(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
0000000000004010	movl	$0x1a, %ecx
0000000000004015	movb	$0x0, %al
0000000000004017	callq	0x1f674 ## symbol stub for: _fprintf
000000000000401c	movl	$0x5, -0x4(%rbp)
0000000000004023	movl	%eax, -0x7c(%rbp)
0000000000004026	jmp	0x424c
000000000000402b	movl	$0x0, -0x4c(%rbp)
0000000000004032	movl	-0x4c(%rbp), %eax
0000000000004035	movl	%eax, -0x80(%rbp)
0000000000004038	callq	0x1f668 ## symbol stub for: __dyld_image_count
000000000000403d	movl	-0x80(%rbp), %ecx
0000000000004040	cmpl	%eax, %ecx
0000000000004042	jae	0x408f
0000000000004048	movq	-0x20(%rbp), %rax
000000000000404c	movl	-0x4c(%rbp), %edi
000000000000404f	movq	%rax, -0x88(%rbp)
0000000000004056	callq	0x1f65c ## symbol stub for: __dyld_get_image_header
000000000000405b	movq	-0x88(%rbp), %rcx
0000000000004062	cmpq	%rax, %rcx
0000000000004065	jne	0x407c
000000000000406b	movl	-0x4c(%rbp), %edi
000000000000406e	callq	0x1f662 ## symbol stub for: __dyld_get_image_vmaddr_slide
0000000000004073	movq	%rax, -0x28(%rbp)
0000000000004077	jmp	0x408f
000000000000407c	jmp	0x4081
0000000000004081	movl	-0x4c(%rbp), %eax
0000000000004084	addl	$0x1, %eax
0000000000004087	movl	%eax, -0x4c(%rbp)
000000000000408a	jmp	0x4032
000000000000408f	movw	$0x0, -0x4e(%rbp)
0000000000004095	movzwl	-0x4e(%rbp), %eax
0000000000004099	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %ecx ## dupe(void*, void**)::history_size
00000000000040a0	cmpl	%ecx, %eax
00000000000040a2	jge	0x4126
00000000000040a8	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rax ## dupe(void*, void**)::injection_history
00000000000040af	movzwl	-0x4e(%rbp), %ecx
00000000000040b3	movl	%ecx, %edx
00000000000040b5	shlq	$0x4, %rdx
00000000000040b9	addq	%rdx, %rax
00000000000040bc	movq	(%rax), %rax
00000000000040bf	movq	-0x20(%rbp), %rdx
00000000000040c3	cmpq	%rdx, %rax
00000000000040c6	jne	0x4110
00000000000040cc	cmpq	$0x0, -0x18(%rbp)
00000000000040d1	je	0x4104
00000000000040d7	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rax ## dupe(void*, void**)::injection_history
00000000000040de	movzwl	-0x4e(%rbp), %ecx
00000000000040e2	movl	%ecx, %edx
00000000000040e4	shlq	$0x4, %rdx
00000000000040e8	addq	%rdx, %rax
00000000000040eb	movq	0x8(%rax), %rax
00000000000040ef	movq	-0x10(%rbp), %rdx
00000000000040f3	movq	-0x20(%rbp), %rsi
00000000000040f7	subq	%rsi, %rdx
00000000000040fa	addq	%rdx, %rax
00000000000040fd	movq	-0x18(%rbp), %rdx
0000000000004101	movq	%rax, (%rdx)
0000000000004104	movl	$0x0, -0x4(%rbp)
000000000000410b	jmp	0x424c
0000000000004110	jmp	0x4115
0000000000004115	movw	-0x4e(%rbp), %ax
0000000000004119	addw	$0x1, %ax
000000000000411d	movw	%ax, -0x4e(%rbp)
0000000000004121	jmp	0x4095
0000000000004126	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %eax ## dupe(void*, void**)::history_size
000000000000412d	addl	$0x1, %eax
0000000000004130	movslq	%eax, %rcx
0000000000004133	movq	%rcx, -0x58(%rbp)
0000000000004137	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
000000000000413e	movq	-0x58(%rbp), %rdx
0000000000004142	shlq	$0x4, %rdx
0000000000004146	movq	%rcx, %rdi
0000000000004149	movq	%rdx, %rsi
000000000000414c	callq	0x1f6b6 ## symbol stub for: _realloc
0000000000004151	movq	%rax, __ZZ4dupePvPS_E17injection_history(%rip) ## dupe(void*, void**)::injection_history
0000000000004158	movq	-0x20(%rbp), %rax
000000000000415c	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
0000000000004163	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %r8d ## dupe(void*, void**)::history_size
000000000000416b	movl	%r8d, %edx
000000000000416e	shlq	$0x4, %rdx
0000000000004172	addq	%rdx, %rcx
0000000000004175	movq	%rax, (%rcx)
0000000000004178	movq	$0x0, -0x60(%rbp)
0000000000004180	movq	-0x20(%rbp), %rdi
0000000000004184	movq	-0x28(%rbp), %rsi
0000000000004188	leaq	-0x60(%rbp), %rdx
000000000000418c	callq	__Z12_remap_imagePvyPy ## _remap_image(void*, unsigned long long, unsigned long long*)
0000000000004191	xorl	%r8d, %r8d
0000000000004194	movl	%eax, -0x64(%rbp)
0000000000004197	cmpl	-0x64(%rbp), %r8d
000000000000419b	je	0x41d6
00000000000041a1	movq	0x61eb8(%rip), %rax ## literal pool symbol address: ___stderrp
00000000000041a8	movq	(%rax), %rdi
00000000000041ab	leaq	0x5c7c1(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to remap segements of the image. See error messages above.\n"
00000000000041b2	leaq	0x5c7a8(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
00000000000041b9	movl	$0x3c, %ecx
00000000000041be	movb	$0x0, %al
00000000000041c0	callq	0x1f674 ## symbol stub for: _fprintf
00000000000041c5	movl	-0x64(%rbp), %ecx
00000000000041c8	movl	%ecx, -0x4(%rbp)
00000000000041cb	movl	%eax, -0x8c(%rbp)
00000000000041d1	jmp	0x424c
00000000000041d6	cmpq	$0x0, -0x18(%rbp)
00000000000041db	je	0x4210
00000000000041e1	movq	-0x60(%rbp), %rax
00000000000041e5	movq	-0x10(%rbp), %rcx
00000000000041e9	movq	-0x20(%rbp), %rdx
00000000000041ed	subq	%rdx, %rcx
00000000000041f0	addq	%rcx, %rax
00000000000041f3	movq	-0x18(%rbp), %rcx
00000000000041f7	movq	%rax, (%rcx)
00000000000041fa	movq	-0x10(%rbp), %rdi
00000000000041fe	movq	-0x18(%rbp), %rax
0000000000004202	movq	(%rax), %rsi
0000000000004205	callq	__Z17_island_jump_backPvS_ ## _island_jump_back(void*, void*)
000000000000420a	movl	%eax, -0x90(%rbp)
0000000000004210	movq	-0x60(%rbp), %rax
0000000000004214	movq	%rax, -0x70(%rbp)
0000000000004218	movq	-0x70(%rbp), %rax
000000000000421c	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
0000000000004223	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %edx ## dupe(void*, void**)::history_size
000000000000422a	movl	%edx, %esi
000000000000422c	shlq	$0x4, %rsi
0000000000004230	addq	%rsi, %rcx
0000000000004233	movq	%rax, 0x8(%rcx)
0000000000004237	movq	-0x58(%rbp), %rax
000000000000423b	movw	%ax, %di
000000000000423e	movw	%di, 0x6324b(%rip)
0000000000004245	movl	$0x0, -0x4(%rbp)
000000000000424c	movl	-0x4(%rbp), %eax
000000000000424f	addq	$0x90, %rsp
0000000000004256	popq	%rbp
0000000000004257	retq
0000000000004258	nopl	(%rax,%rax)
__Z12_remap_imagePvyPy:
0000000000004260	pushq	%rbp
0000000000004261	movq	%rsp, %rbp
0000000000004264	subq	$0xd0, %rsp
000000000000426b	movq	%rdi, -0x10(%rbp)
000000000000426f	movq	%rsi, -0x18(%rbp)
0000000000004273	movq	%rdx, -0x20(%rbp)
0000000000004277	cmpq	$0x0, -0x10(%rbp)
000000000000427c	setne	%al
000000000000427f	xorb	$-0x1, %al
0000000000004281	testb	$0x1, %al
0000000000004283	jne	0x428e
0000000000004289	jmp	0x42ad
000000000000428e	leaq	0x5c730(%rip), %rdi ## literal pool for: "_remap_image"
0000000000004295	leaq	0x5c6c5(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
000000000000429c	leaq	0x5c72f(%rip), %rcx ## literal pool for: "image"
00000000000042a3	movl	$0x4f, %edx
00000000000042a8	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000042ad	jmp	0x42b2
00000000000042b2	cmpq	$0x0, -0x20(%rbp)
00000000000042b7	setne	%al
00000000000042ba	xorb	$-0x1, %al
00000000000042bc	testb	$0x1, %al
00000000000042be	jne	0x42c9
00000000000042c4	jmp	0x42e8
00000000000042c9	leaq	0x5c6f5(%rip), %rdi ## literal pool for: "_remap_image"
00000000000042d0	leaq	0x5c68a(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
00000000000042d7	leaq	0x5c6fa(%rip), %rcx ## literal pool for: "new_location"
00000000000042de	movl	$0x50, %edx
00000000000042e3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000042e8	jmp	0x42ed
00000000000042ed	movq	$0x0, -0x28(%rbp)
00000000000042f5	movq	-0x10(%rbp), %rdi
00000000000042f9	movq	-0x18(%rbp), %rsi
00000000000042fd	leaq	-0x28(%rbp), %rdx
0000000000004301	callq	__Z11_image_sizePvyPy ## _image_size(void*, unsigned long long, unsigned long long*)
0000000000004306	movq	0x61d5b(%rip), %rdx ## literal pool symbol address: _mach_task_self_
000000000000430d	movq	%rax, -0x30(%rbp)
0000000000004311	movl	$0x5, -0x34(%rbp)
0000000000004318	movq	-0x20(%rbp), %rax
000000000000431c	movq	$0x0, (%rax)
0000000000004323	movl	(%rdx), %edi
0000000000004325	movq	-0x20(%rbp), %rsi
0000000000004329	movq	-0x30(%rbp), %rax
000000000000432d	addq	-0x28(%rbp), %rax
0000000000004331	movq	%rax, %rdx
0000000000004334	movl	$0x1, %ecx
0000000000004339	callq	0x1f67a ## symbol stub for: _mach_vm_allocate
000000000000433e	xorl	%ecx, %ecx
0000000000004340	movl	%eax, -0x34(%rbp)
0000000000004343	movq	-0x28(%rbp), %rdx
0000000000004347	movq	-0x20(%rbp), %rsi
000000000000434b	addq	(%rsi), %rdx
000000000000434e	movq	%rdx, (%rsi)
0000000000004351	cmpl	-0x34(%rbp), %ecx
0000000000004354	je	0x4393
000000000000435a	movq	0x61cff(%rip), %rax ## literal pool symbol address: ___stderrp
0000000000004361	movq	(%rax), %rdi
0000000000004364	movl	-0x34(%rbp), %r8d
0000000000004368	leaq	0x5c676(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to allocate a memory region for the function copy - mach_vm_allocate() returned 0x%x\n\n"
000000000000436f	leaq	0x5c5eb(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
0000000000004376	movl	$0x75, %ecx
000000000000437b	movb	$0x0, %al
000000000000437d	callq	0x1f674 ## symbol stub for: _fprintf
0000000000004382	movl	-0x34(%rbp), %ecx
0000000000004385	movl	%ecx, -0x4(%rbp)
0000000000004388	movl	%eax, -0x84(%rbp)
000000000000438e	jmp	0x4503
0000000000004393	movq	-0x10(%rbp), %rax
0000000000004397	movq	%rax, -0x40(%rbp)
000000000000439b	movq	-0x40(%rbp), %rax
000000000000439f	addq	$0x20, %rax
00000000000043a3	movq	%rax, -0x48(%rbp)
00000000000043a7	movl	$0x0, -0x4c(%rbp)
00000000000043ae	movl	-0x4c(%rbp), %eax
00000000000043b1	movq	-0x40(%rbp), %rcx
00000000000043b5	cmpl	0x10(%rcx), %eax
00000000000043b8	jae	0x44c4
00000000000043be	movq	-0x48(%rbp), %rax
00000000000043c2	cmpl	$0x19, (%rax)
00000000000043c5	je	0x43d0
00000000000043cb	jmp	0x44a2
00000000000043d0	movq	-0x48(%rbp), %rax
00000000000043d4	movq	%rax, -0x58(%rbp)
00000000000043d8	movq	-0x58(%rbp), %rax
00000000000043dc	movq	0x18(%rax), %rax
00000000000043e0	movq	%rax, -0x60(%rbp)
00000000000043e4	movq	-0x58(%rbp), %rax
00000000000043e8	movq	0x20(%rax), %rax
00000000000043ec	movq	%rax, -0x68(%rbp)
00000000000043f0	cmpq	$0x0, -0x68(%rbp)
00000000000043f5	jne	0x4400
00000000000043fb	jmp	0x44a2
0000000000004400	xorl	%eax, %eax
0000000000004402	movl	%eax, %ecx
0000000000004404	xorl	%eax, %eax
0000000000004406	movq	0x61c5b(%rip), %rdx ## literal pool symbol address: _mach_task_self_
000000000000440d	movq	-0x60(%rbp), %rsi
0000000000004411	addq	-0x18(%rbp), %rsi
0000000000004415	movq	%rsi, -0x70(%rbp)
0000000000004419	movq	-0x20(%rbp), %rsi
000000000000441d	movq	(%rsi), %rsi
0000000000004420	movq	-0x70(%rbp), %rdi
0000000000004424	movq	-0x40(%rbp), %r8
0000000000004428	subq	%r8, %rdi
000000000000442b	addq	%rdi, %rsi
000000000000442e	movq	%rsi, -0x78(%rbp)
0000000000004432	movl	(%rdx), %edi
0000000000004434	movq	-0x68(%rbp), %rsi
0000000000004438	movl	(%rdx), %r9d
000000000000443b	movq	-0x70(%rbp), %rdx
000000000000443f	leaq	-0x78(%rbp), %r8
0000000000004443	movq	%rsi, -0x90(%rbp)
000000000000444a	movq	%r8, %rsi
000000000000444d	movq	-0x90(%rbp), %r8
0000000000004454	movq	%rdx, -0x98(%rbp)
000000000000445b	movq	%r8, %rdx
000000000000445e	movl	$0x4000, %r10d
0000000000004464	movl	%r10d, %r8d
0000000000004467	movq	-0x98(%rbp), %r11
000000000000446e	movq	%r11, (%rsp)
0000000000004472	movl	$0x1, 0x8(%rsp)
000000000000447a	leaq	-0x7c(%rbp), %r11
000000000000447e	movq	%r11, 0x10(%rsp)
0000000000004483	leaq	-0x80(%rbp), %r11
0000000000004487	movq	%r11, 0x18(%rsp)
000000000000448c	movl	$0x0, 0x20(%rsp)
0000000000004494	movl	%eax, -0x9c(%rbp)
000000000000449a	callq	0x1f68c ## symbol stub for: _mach_vm_remap
000000000000449f	movl	%eax, -0x34(%rbp)
00000000000044a2	movl	-0x4c(%rbp), %eax
00000000000044a5	addl	$0x1, %eax
00000000000044a8	movl	%eax, -0x4c(%rbp)
00000000000044ab	movq	-0x48(%rbp), %rcx
00000000000044af	movq	-0x48(%rbp), %rdx
00000000000044b3	movl	0x4(%rdx), %eax
00000000000044b6	movl	%eax, %edx
00000000000044b8	addq	%rdx, %rcx
00000000000044bb	movq	%rcx, -0x48(%rbp)
00000000000044bf	jmp	0x43ae
00000000000044c4	xorl	%eax, %eax
00000000000044c6	cmpl	-0x34(%rbp), %eax
00000000000044c9	je	0x44fd
00000000000044cf	movq	0x61b8a(%rip), %rax ## literal pool symbol address: ___stderrp
00000000000044d6	movq	(%rax), %rdi
00000000000044d9	movl	-0x34(%rbp), %r8d
00000000000044dd	leaq	0x5c56e(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to remap the function implementation to the new address - mach_vm_remap() returned 0x%x\n\n"
00000000000044e4	leaq	0x5c476(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
00000000000044eb	movl	$0x9f, %ecx
00000000000044f0	movb	$0x0, %al
00000000000044f2	callq	0x1f674 ## symbol stub for: _fprintf
00000000000044f7	movl	%eax, -0xa0(%rbp)
00000000000044fd	movl	-0x34(%rbp), %eax
0000000000004500	movl	%eax, -0x4(%rbp)
0000000000004503	movl	-0x4(%rbp), %eax
0000000000004506	addq	$0xd0, %rsp
000000000000450d	popq	%rbp
000000000000450e	retq
000000000000450f	nop
__Z17_island_jump_backPvS_:
0000000000004510	pushq	%rbp
0000000000004511	movq	%rsp, %rbp
0000000000004514	subq	$0x670, %rsp
000000000000451b	xorl	%eax, %eax
000000000000451d	movq	0x61b34(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
0000000000004524	movq	(%rcx), %rcx
0000000000004527	movq	%rcx, -0x8(%rbp)
000000000000452b	movq	%rdi, -0x70(%rbp)
000000000000452f	movq	%rsi, -0x78(%rbp)
0000000000004533	movl	$0x1e, -0x7c(%rbp)
000000000000453a	leaq	-0x20(%rbp), %rdi
000000000000453e	movl	%eax, %esi
0000000000004540	movl	$0x2, %edx
0000000000004545	callq	_ZydisDecoderInit
000000000000454a	movl	$0x0, -0x80(%rbp)
0000000000004551	leaq	-0x60(%rbp), %rcx
0000000000004555	movq	-0x78(%rbp), %rsi
0000000000004559	movq	%rcx, %rdi
000000000000455c	movl	$0x40, %edx
0000000000004561	movl	%eax, -0x650(%rbp)
0000000000004567	callq	0x1f69e ## symbol stub for: _memcpy
000000000000456c	movb	$0x0, -0x81(%rbp)
0000000000004573	leaq	-0x60(%rbp), %rax
0000000000004577	movslq	-0x80(%rbp), %rcx
000000000000457b	addq	%rcx, %rax
000000000000457e	movl	$0x22, %edx
0000000000004583	subl	-0x80(%rbp), %edx
0000000000004586	movslq	%edx, %rdx
0000000000004589	leaq	-0x20(%rbp), %rdi
000000000000458d	movq	%rax, %rsi
0000000000004590	leaq	-0x648(%rbp), %rcx
0000000000004597	callq	_ZydisDecoderDecodeBuffer
000000000000459c	andl	$0x80000000, %eax
00000000000045a1	cmpl	$0x0, %eax
00000000000045a4	setne	%r8b
00000000000045a8	xorb	$-0x1, %r8b
00000000000045ac	testb	$0x1, %r8b
00000000000045b0	jne	0x45bb
00000000000045b6	jmp	0x45e3
00000000000045bb	movzbl	-0x640(%rbp), %eax
00000000000045c2	addl	-0x80(%rbp), %eax
00000000000045c5	movl	%eax, -0x80(%rbp)
00000000000045c8	cmpl	$0x1e, -0x80(%rbp)
00000000000045cc	jl	0x45de
00000000000045d2	movb	$0x1, -0x81(%rbp)
00000000000045d9	jmp	0x45e3
00000000000045de	jmp	0x4573
00000000000045e3	testb	$0x1, -0x81(%rbp)
00000000000045ea	je	0x4696
00000000000045f0	movq	-0x70(%rbp), %rax
00000000000045f4	addq	$0x1e, %rax
00000000000045f8	movslq	-0x80(%rbp), %rcx
00000000000045fc	leaq	-0x60(%rbp), %rdx
0000000000004600	addq	%rcx, %rdx
0000000000004603	movq	%rax, %rdi
0000000000004606	movq	%rdx, %rsi
0000000000004609	callq	__Z14_get_jmp_bytesPvPc ## _get_jmp_bytes(void*, char*)
000000000000460e	movl	%eax, -0x64c(%rbp)
0000000000004614	cmpl	$0x0, -0x64c(%rbp)
000000000000461b	jne	0x4691
0000000000004621	movq	-0x78(%rbp), %rdi
0000000000004625	movl	$0x40, %esi
000000000000462a	movl	$0x7, %edx
000000000000462f	callq	__Z21_protectProcessMemoryymi ## _protectProcessMemory(unsigned long long, unsigned long, int)
0000000000004634	movq	-0x78(%rbp), %rdi
0000000000004638	leaq	-0x60(%rbp), %rsi
000000000000463c	movl	$0x40, %edx
0000000000004641	movl	%eax, -0x654(%rbp)
0000000000004647	callq	0x1f69e ## symbol stub for: _memcpy
000000000000464c	movq	-0x78(%rbp), %rsi
0000000000004650	movq	-0x70(%rbp), %rdx
0000000000004654	addq	$0x1e, %rdx
0000000000004658	addq	$0x4, %rdx
000000000000465c	leaq	0x5c479(%rip), %rdi ## literal pool for: "Patched %p + %d with a jump to %p\n"
0000000000004663	movl	$0x1e, %eax
0000000000004668	movq	%rdx, -0x660(%rbp)
000000000000466f	movl	%eax, %edx
0000000000004671	movq	-0x660(%rbp), %rcx
0000000000004678	movb	$0x0, %al
000000000000467a	callq	0x1f6b0 ## symbol stub for: _printf
000000000000467f	movl	$0x0, -0x64(%rbp)
0000000000004686	movl	%eax, -0x664(%rbp)
000000000000468c	jmp	0x46c7
0000000000004691	jmp	0x46c7
0000000000004696	movq	0x619c3(%rip), %rax ## literal pool symbol address: ___stderrp
000000000000469d	movq	(%rax), %rdi
00000000000046a0	leaq	0x5c458(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Could not parse assembly, this really shouldnt happen wtf\n"
00000000000046a7	leaq	0x5c2b3(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
00000000000046ae	movl	$0xea, %ecx
00000000000046b3	movb	$0x0, %al
00000000000046b5	callq	0x1f674 ## symbol stub for: _fprintf
00000000000046ba	movl	$0x3, -0x64(%rbp)
00000000000046c1	movl	%eax, -0x668(%rbp)
00000000000046c7	movl	-0x64(%rbp), %eax
00000000000046ca	movq	0x61987(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
00000000000046d1	movq	(%rcx), %rcx
00000000000046d4	movq	-0x8(%rbp), %rdx
00000000000046d8	cmpq	%rdx, %rcx
00000000000046db	movl	%eax, -0x66c(%rbp)
00000000000046e1	jne	0x46f6
00000000000046e7	movl	-0x66c(%rbp), %eax
00000000000046ed	addq	$0x670, %rsp
00000000000046f4	popq	%rbp
00000000000046f5	retq
00000000000046f6	callq	0x1f656 ## symbol stub for: ___stack_chk_fail
00000000000046fb	ud2
00000000000046fd	nopl	(%rax)
__Z11_image_sizePvyPy:
0000000000004700	pushq	%rbp
0000000000004701	movq	%rsp, %rbp
0000000000004704	subq	$0x60, %rsp
0000000000004708	movq	%rdi, -0x8(%rbp)
000000000000470c	movq	%rsi, -0x10(%rbp)
0000000000004710	movq	%rdx, -0x18(%rbp)
0000000000004714	cmpq	$0x0, -0x8(%rbp)
0000000000004719	setne	%al
000000000000471c	xorb	$-0x1, %al
000000000000471e	testb	$0x1, %al
0000000000004720	jne	0x472b
0000000000004726	jmp	0x474a
000000000000472b	leaq	0x5c390(%rip), %rdi ## literal pool for: "_image_size"
0000000000004732	leaq	0x5c228(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
0000000000004739	leaq	0x5c292(%rip), %rcx ## literal pool for: "image"
0000000000004740	movl	$0xa7, %edx
0000000000004745	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000474a	jmp	0x474f
000000000000474f	movq	-0x8(%rbp), %rax
0000000000004753	movq	%rax, -0x20(%rbp)
0000000000004757	movq	-0x20(%rbp), %rax
000000000000475b	addq	$0x20, %rax
000000000000475f	movq	%rax, -0x28(%rbp)
0000000000004763	movq	-0x8(%rbp), %rax
0000000000004767	subq	-0x10(%rbp), %rax
000000000000476b	movq	%rax, -0x30(%rbp)
000000000000476f	movq	-0x30(%rbp), %rax
0000000000004773	movq	%rax, -0x38(%rbp)
0000000000004777	movq	$0x0, -0x40(%rbp)
000000000000477f	movq	$0x0, -0x48(%rbp)
0000000000004787	movl	$0x0, -0x4c(%rbp)
000000000000478e	movl	-0x4c(%rbp), %eax
0000000000004791	movq	-0x20(%rbp), %rcx
0000000000004795	cmpl	0x10(%rcx), %eax
0000000000004798	jae	0x487d
000000000000479e	movq	-0x28(%rbp), %rax
00000000000047a2	cmpl	$0x19, (%rax)
00000000000047a5	je	0x47b0
00000000000047ab	jmp	0x485b
00000000000047b0	xorl	%eax, %eax
00000000000047b2	movq	-0x28(%rbp), %rcx
00000000000047b6	movq	%rcx, -0x58(%rbp)
00000000000047ba	movq	-0x58(%rbp), %rcx
00000000000047be	addq	$0x8, %rcx
00000000000047c2	leaq	0x5c305(%rip), %rdi ## literal pool for: "__DATA"
00000000000047c9	movq	%rcx, %rsi
00000000000047cc	movl	%eax, -0x5c(%rbp)
00000000000047cf	callq	0x1f6bc ## symbol stub for: _strcmp
00000000000047d4	movl	-0x5c(%rbp), %edx
00000000000047d7	cmpl	%eax, %edx
00000000000047d9	jne	0x47f0
00000000000047df	movq	-0x58(%rbp), %rax
00000000000047e3	movq	0x18(%rax), %rax
00000000000047e7	movq	%rax, -0x40(%rbp)
00000000000047eb	jmp	0x4828
00000000000047f0	xorl	%eax, %eax
00000000000047f2	movq	-0x58(%rbp), %rcx
00000000000047f6	addq	$0x8, %rcx
00000000000047fa	leaq	0x5c2d4(%rip), %rdi ## literal pool for: "__TEXT"
0000000000004801	movq	%rcx, %rsi
0000000000004804	movl	%eax, -0x60(%rbp)
0000000000004807	callq	0x1f6bc ## symbol stub for: _strcmp
000000000000480c	movl	-0x60(%rbp), %edx
000000000000480f	cmpl	%eax, %edx
0000000000004811	jne	0x4823
0000000000004817	movq	-0x58(%rbp), %rax
000000000000481b	movq	0x18(%rax), %rax
000000000000481f	movq	%rax, -0x48(%rbp)
0000000000004823	jmp	0x4828
0000000000004828	movq	-0x58(%rbp), %rax
000000000000482c	movq	0x18(%rax), %rax
0000000000004830	movq	-0x58(%rbp), %rcx
0000000000004834	addq	0x20(%rcx), %rax
0000000000004838	cmpq	-0x38(%rbp), %rax
000000000000483c	jbe	0x4856
0000000000004842	movq	-0x58(%rbp), %rax
0000000000004846	movq	0x18(%rax), %rax
000000000000484a	movq	-0x58(%rbp), %rcx
000000000000484e	addq	0x20(%rcx), %rax
0000000000004852	movq	%rax, -0x38(%rbp)
0000000000004856	jmp	0x485b
000000000000485b	movl	-0x4c(%rbp), %eax
000000000000485e	addl	$0x1, %eax
0000000000004861	movl	%eax, -0x4c(%rbp)
0000000000004864	movq	-0x28(%rbp), %rcx
0000000000004868	movq	-0x28(%rbp), %rdx
000000000000486c	movl	0x4(%rdx), %eax
000000000000486f	movl	%eax, %edx
0000000000004871	addq	%rdx, %rcx
0000000000004874	movq	%rcx, -0x28(%rbp)
0000000000004878	jmp	0x478e
000000000000487d	movq	-0x40(%rbp), %rax
0000000000004881	cmpq	-0x48(%rbp), %rax
0000000000004885	jae	0x489a
000000000000488b	movq	-0x48(%rbp), %rax
000000000000488f	subq	-0x40(%rbp), %rax
0000000000004893	movq	-0x18(%rbp), %rcx
0000000000004897	movq	%rax, (%rcx)
000000000000489a	movq	-0x38(%rbp), %rax
000000000000489e	subq	-0x30(%rbp), %rax
00000000000048a2	addq	$0x60, %rsp
00000000000048a6	popq	%rbp
00000000000048a7	retq
00000000000048a8	nopl	(%rax,%rax)
__Z14_get_jmp_bytesPvPc:
00000000000048b0	pushq	%rbp
00000000000048b1	movq	%rsp, %rbp
00000000000048b4	subq	$0x40, %rsp
00000000000048b8	movq	0x61799(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
00000000000048bf	movq	(%rax), %rax
00000000000048c2	movq	%rax, -0x8(%rbp)
00000000000048c6	movq	%rdi, -0x10(%rbp)
00000000000048ca	movq	%rsi, -0x18(%rbp)
00000000000048ce	movl	$0x10, -0x1c(%rbp)
00000000000048d5	movl	$0x0, -0x20(%rbp)
00000000000048dc	movl	-0x1c(%rbp), %ecx
00000000000048df	movl	%ecx, %eax
00000000000048e1	movq	%rsp, %rsi
00000000000048e4	movq	%rsi, -0x28(%rbp)
00000000000048e8	movq	%rax, %rsi
00000000000048eb	addq	$0xf, %rsi
00000000000048ef	andq	$-0x10, %rsi
00000000000048f3	movq	%rsp, %rdi
00000000000048f6	subq	%rsi, %rdi
00000000000048f9	movq	%rdi, %rsp
00000000000048fc	movq	%rax, -0x30(%rbp)
0000000000004900	movb	$-0x1, (%rdi)
0000000000004903	movb	$0x25, 0x1(%rdi)
0000000000004907	movl	$0x0, 0x2(%rdi)
000000000000490e	movq	-0x10(%rbp), %rax
0000000000004912	movq	%rax, 0x6(%rdi)
0000000000004916	movq	-0x18(%rbp), %rax
000000000000491a	movl	-0x1c(%rbp), %ecx
000000000000491d	movl	%ecx, %edx
000000000000491f	movq	%rdi, -0x38(%rbp)
0000000000004923	movq	%rax, %rdi
0000000000004926	movq	-0x38(%rbp), %rsi
000000000000492a	callq	0x1f69e ## symbol stub for: _memcpy
000000000000492f	movl	-0x20(%rbp), %eax
0000000000004932	movq	-0x28(%rbp), %rdx
0000000000004936	movq	%rdx, %rsp
0000000000004939	movq	0x61718(%rip), %rdx ## literal pool symbol address: ___stack_chk_guard
0000000000004940	movq	(%rdx), %rdx
0000000000004943	movq	-0x8(%rbp), %rsi
0000000000004947	cmpq	%rsi, %rdx
000000000000494a	movl	%eax, -0x3c(%rbp)
000000000000494d	jne	0x495b
0000000000004953	movl	-0x3c(%rbp), %eax
0000000000004956	movq	%rbp, %rsp
0000000000004959	popq	%rbp
000000000000495a	retq
000000000000495b	callq	0x1f656 ## symbol stub for: ___stack_chk_fail
0000000000004960	ud2
0000000000004962	nopw	%cs:(%rax,%rax)
000000000000496c	nopl	(%rax)
__Z21_protectProcessMemoryymi:
0000000000004970	pushq	%rbp
0000000000004971	movq	%rsp, %rbp
0000000000004974	subq	$0x20, %rsp
0000000000004978	xorl	%ecx, %ecx
000000000000497a	movq	0x616e7(%rip), %rax ## literal pool symbol address: _mach_task_self_
0000000000004981	movq	%rdi, -0x8(%rbp)
0000000000004985	movq	%rsi, -0x10(%rbp)
0000000000004989	movl	%edx, -0x14(%rbp)
000000000000498c	movl	(%rax), %edi
000000000000498e	movq	-0x8(%rbp), %rsi
0000000000004992	movq	-0x10(%rbp), %rdx
0000000000004996	movl	-0x14(%rbp), %r8d
000000000000499a	callq	0x1f680 ## symbol stub for: _mach_vm_protect
000000000000499f	addq	$0x20, %rsp
00000000000049a3	popq	%rbp
00000000000049a4	retq
00000000000049a5	nopw	%cs:(%rax,%rax)
00000000000049af	nop
__Z6readPMymPc:
00000000000049b0	pushq	%rbp
00000000000049b1	movq	%rsp, %rbp
00000000000049b4	subq	$0x20, %rsp
00000000000049b8	movq	0x616a9(%rip), %rax ## literal pool symbol address: _mach_task_self_
00000000000049bf	movq	%rdi, -0x8(%rbp)
00000000000049c3	movq	%rsi, -0x10(%rbp)
00000000000049c7	movq	%rdx, -0x18(%rbp)
00000000000049cb	movl	(%rax), %edi
00000000000049cd	movq	-0x8(%rbp), %rsi
00000000000049d1	movq	-0x10(%rbp), %rdx
00000000000049d5	movq	-0x18(%rbp), %rax
00000000000049d9	movq	%rax, %rcx
00000000000049dc	leaq	-0x1c(%rbp), %r8
00000000000049e0	callq	0x1f686 ## symbol stub for: _mach_vm_read
00000000000049e5	addq	$0x20, %rsp
00000000000049e9	popq	%rbp
00000000000049ea	retq
00000000000049eb	nopl	(%rax,%rax)
__Z7writePMymPc:
00000000000049f0	pushq	%rbp
00000000000049f1	movq	%rsp, %rbp
00000000000049f4	subq	$0x30, %rsp
00000000000049f8	movq	%rdi, -0x10(%rbp)
00000000000049fc	movq	%rsi, -0x18(%rbp)
0000000000004a00	movq	%rdx, -0x20(%rbp)
0000000000004a04	movq	-0x10(%rbp), %rdi
0000000000004a08	movq	-0x18(%rbp), %rsi
0000000000004a0c	movl	$0x7, %edx
0000000000004a11	callq	__Z21_protectProcessMemoryymi ## _protectProcessMemory(unsigned long long, unsigned long, int)
0000000000004a16	movl	%eax, -0x24(%rbp)
0000000000004a19	cmpl	$0x0, -0x24(%rbp)
0000000000004a1d	je	0x4a2e
0000000000004a23	movl	-0x24(%rbp), %eax
0000000000004a26	movl	%eax, -0x4(%rbp)
0000000000004a29	jmp	0x4a4d
0000000000004a2e	movq	0x61633(%rip), %rax ## literal pool symbol address: _mach_task_self_
0000000000004a35	movl	(%rax), %edi
0000000000004a37	movq	-0x10(%rbp), %rsi
0000000000004a3b	movq	-0x20(%rbp), %rdx
0000000000004a3f	movq	-0x18(%rbp), %rax
0000000000004a43	movl	%eax, %ecx
0000000000004a45	callq	0x1f692 ## symbol stub for: _mach_vm_write
0000000000004a4a	movl	%eax, -0x4(%rbp)
0000000000004a4d	movl	-0x4(%rbp), %eax
0000000000004a50	addq	$0x30, %rsp
0000000000004a54	popq	%rbp
0000000000004a55	retq
0000000000004a56	nop
0000000000004a57	nop
0000000000004a58	nop
0000000000004a59	nop
0000000000004a5a	nop
0000000000004a5b	nop
0000000000004a5c	nop
0000000000004a5d	nop
0000000000004a5e	nop
0000000000004a5f	nop
_ZydisRegisterEncode:
0000000000004a60	pushq	%rbp
0000000000004a61	movq	%rsp, %rbp
0000000000004a64	movb	%sil, %al
0000000000004a67	movl	%edi, -0x8(%rbp)
0000000000004a6a	movb	%al, -0x9(%rbp)
0000000000004a6d	movl	-0x8(%rbp), %esi
0000000000004a70	testl	%esi, %esi
0000000000004a72	movl	%esi, -0x10(%rbp)
0000000000004a75	je	0x4a97
0000000000004a7b	jmp	0x4a80
0000000000004a80	movl	-0x10(%rbp), %eax
0000000000004a83	addl	$-0xb, %eax
0000000000004a86	subl	$0x1, %eax
0000000000004a89	movl	%eax, -0x14(%rbp)
0000000000004a8c	ja	0x4a9c
0000000000004a92	jmp	0x4a97
0000000000004a97	jmp	0x4b0a
0000000000004a9c	movl	-0x8(%rbp), %eax
0000000000004a9f	movl	%eax, %ecx
0000000000004aa1	cmpq	$0x13, %rcx
0000000000004aa5	jae	0x4b05
0000000000004aab	movzbl	-0x9(%rbp), %eax
0000000000004aaf	movl	-0x8(%rbp), %ecx
0000000000004ab2	movl	%ecx, %edx
0000000000004ab4	shlq	$0x4, %rdx
0000000000004ab8	leaq	_REGISTER_MAP(%rip), %rsi
0000000000004abf	movq	%rsi, %rdi
0000000000004ac2	addq	%rdx, %rdi
0000000000004ac5	movl	0x8(%rdi), %ecx
0000000000004ac8	movl	-0x8(%rbp), %r8d
0000000000004acc	movl	%r8d, %edx
0000000000004acf	shlq	$0x4, %rdx
0000000000004ad3	addq	%rdx, %rsi
0000000000004ad6	subl	0x4(%rsi), %ecx
0000000000004ad9	cmpl	%ecx, %eax
0000000000004adb	ja	0x4b05
0000000000004ae1	movl	-0x8(%rbp), %eax
0000000000004ae4	movl	%eax, %ecx
0000000000004ae6	shlq	$0x4, %rcx
0000000000004aea	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004af1	addq	%rcx, %rdx
0000000000004af4	movl	0x4(%rdx), %eax
0000000000004af7	movzbl	-0x9(%rbp), %esi
0000000000004afb	addl	%esi, %eax
0000000000004afd	movl	%eax, -0x4(%rbp)
0000000000004b00	jmp	0x4b11
0000000000004b05	jmp	0x4b0a
0000000000004b0a	movl	$0x0, -0x4(%rbp)
0000000000004b11	movl	-0x4(%rbp), %eax
0000000000004b14	popq	%rbp
0000000000004b15	retq
0000000000004b16	nopw	%cs:(%rax,%rax)
_ZydisRegisterGetId:
0000000000004b20	pushq	%rbp
0000000000004b21	movq	%rsp, %rbp
0000000000004b24	movl	%edi, -0x8(%rbp)
0000000000004b27	movq	$0x0, -0x10(%rbp)
0000000000004b2f	cmpq	$0x13, -0x10(%rbp)
0000000000004b34	jae	0x4bf3
0000000000004b3a	movq	-0x10(%rbp), %rax
0000000000004b3e	shlq	$0x4, %rax
0000000000004b42	leaq	_REGISTER_MAP(%rip), %rcx
0000000000004b49	movl	(%rax,%rcx), %edx
0000000000004b4c	testl	%edx, %edx
0000000000004b4e	movl	%edx, -0x14(%rbp)
0000000000004b51	je	0x4b73
0000000000004b57	jmp	0x4b5c
0000000000004b5c	movl	-0x14(%rbp), %eax
0000000000004b5f	addl	$-0xb, %eax
0000000000004b62	subl	$0x1, %eax
0000000000004b65	movl	%eax, -0x18(%rbp)
0000000000004b68	ja	0x4b78
0000000000004b6e	jmp	0x4b73
0000000000004b73	jmp	0x4bdd
0000000000004b78	movl	-0x8(%rbp), %eax
0000000000004b7b	movq	-0x10(%rbp), %rcx
0000000000004b7f	shlq	$0x4, %rcx
0000000000004b83	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004b8a	addq	%rcx, %rdx
0000000000004b8d	cmpl	0x4(%rdx), %eax
0000000000004b90	jb	0x4bd8
0000000000004b96	movl	-0x8(%rbp), %eax
0000000000004b99	movq	-0x10(%rbp), %rcx
0000000000004b9d	shlq	$0x4, %rcx
0000000000004ba1	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004ba8	addq	%rcx, %rdx
0000000000004bab	cmpl	0x8(%rdx), %eax
0000000000004bae	ja	0x4bd8
0000000000004bb4	movl	-0x8(%rbp), %eax
0000000000004bb7	movq	-0x10(%rbp), %rcx
0000000000004bbb	shlq	$0x4, %rcx
0000000000004bbf	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004bc6	addq	%rcx, %rdx
0000000000004bc9	subl	0x4(%rdx), %eax
0000000000004bcc	movb	%al, %sil
0000000000004bcf	movb	%sil, -0x1(%rbp)
0000000000004bd3	jmp	0x4bf7
0000000000004bd8	jmp	0x4bdd
0000000000004bdd	jmp	0x4be2
0000000000004be2	movq	-0x10(%rbp), %rax
0000000000004be6	addq	$0x1, %rax
0000000000004bea	movq	%rax, -0x10(%rbp)
0000000000004bee	jmp	0x4b2f
0000000000004bf3	movb	$-0x1, -0x1(%rbp)
0000000000004bf7	movsbl	-0x1(%rbp), %eax
0000000000004bfb	popq	%rbp
0000000000004bfc	retq
0000000000004bfd	nopl	(%rax)
_ZydisRegisterGetClass:
0000000000004c00	pushq	%rbp
0000000000004c01	movq	%rsp, %rbp
0000000000004c04	movl	%edi, -0x8(%rbp)
0000000000004c07	movq	$0x0, -0x10(%rbp)
0000000000004c0f	cmpq	$0x13, -0x10(%rbp)
0000000000004c14	jae	0x4c88
0000000000004c1a	movl	-0x8(%rbp), %eax
0000000000004c1d	movq	-0x10(%rbp), %rcx
0000000000004c21	shlq	$0x4, %rcx
0000000000004c25	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004c2c	addq	%rcx, %rdx
0000000000004c2f	cmpl	0x4(%rdx), %eax
0000000000004c32	jb	0x4c72
0000000000004c38	movl	-0x8(%rbp), %eax
0000000000004c3b	movq	-0x10(%rbp), %rcx
0000000000004c3f	shlq	$0x4, %rcx
0000000000004c43	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004c4a	addq	%rcx, %rdx
0000000000004c4d	cmpl	0x8(%rdx), %eax
0000000000004c50	ja	0x4c72
0000000000004c56	movq	-0x10(%rbp), %rax
0000000000004c5a	shlq	$0x4, %rax
0000000000004c5e	leaq	_REGISTER_MAP(%rip), %rcx
0000000000004c65	addq	%rax, %rcx
0000000000004c68	movl	(%rcx), %edx
0000000000004c6a	movl	%edx, -0x4(%rbp)
0000000000004c6d	jmp	0x4c8f
0000000000004c72	jmp	0x4c77
0000000000004c77	movq	-0x10(%rbp), %rax
0000000000004c7b	addq	$0x1, %rax
0000000000004c7f	movq	%rax, -0x10(%rbp)
0000000000004c83	jmp	0x4c0f
0000000000004c88	movl	$0x0, -0x4(%rbp)
0000000000004c8f	movl	-0x4(%rbp), %eax
0000000000004c92	popq	%rbp
0000000000004c93	retq
0000000000004c94	nopw	%cs:(%rax,%rax)
0000000000004c9e	nop
_ZydisRegisterGetWidth:
0000000000004ca0	pushq	%rbp
0000000000004ca1	movq	%rsp, %rbp
0000000000004ca4	movl	%edi, -0x8(%rbp)
0000000000004ca7	movl	%esi, -0xc(%rbp)
0000000000004caa	movl	-0xc(%rbp), %esi
0000000000004cad	movl	%esi, %edi
0000000000004caf	addl	$-0x4d, %edi
0000000000004cb2	subl	$0x3, %edi
0000000000004cb5	movl	%esi, -0x1c(%rbp)
0000000000004cb8	movl	%edi, -0x20(%rbp)
0000000000004cbb	jb	0x4d92
0000000000004cc1	jmp	0x4cc6
0000000000004cc6	movl	-0x1c(%rbp), %eax
0000000000004cc9	subl	$0xc0, %eax
0000000000004cce	movl	%eax, -0x24(%rbp)
0000000000004cd1	je	0x4d9d
0000000000004cd7	jmp	0x4cdc
0000000000004cdc	movl	-0x1c(%rbp), %eax
0000000000004cdf	subl	$0xc1, %eax
0000000000004ce4	movl	%eax, -0x28(%rbp)
0000000000004ce7	je	0x4da8
0000000000004ced	jmp	0x4cf2
0000000000004cf2	movl	-0x1c(%rbp), %eax
0000000000004cf5	subl	$0xc2, %eax
0000000000004cfa	movl	%eax, -0x2c(%rbp)
0000000000004cfd	je	0x4db3
0000000000004d03	jmp	0x4d08
0000000000004d08	movl	-0x1c(%rbp), %eax
0000000000004d0b	subl	$0xc3, %eax
0000000000004d10	movl	%eax, -0x30(%rbp)
0000000000004d13	je	0x4d9d
0000000000004d19	jmp	0x4d1e
0000000000004d1e	movl	-0x1c(%rbp), %eax
0000000000004d21	subl	$0xc4, %eax
0000000000004d26	movl	%eax, -0x34(%rbp)
0000000000004d29	je	0x4da8
0000000000004d2f	jmp	0x4d34
0000000000004d34	movl	-0x1c(%rbp), %eax
0000000000004d37	subl	$0xc5, %eax
0000000000004d3c	movl	%eax, -0x38(%rbp)
0000000000004d3f	je	0x4db3
0000000000004d45	jmp	0x4d4a
0000000000004d4a	movl	-0x1c(%rbp), %eax
0000000000004d4d	addl	$0xfffffefc, %eax
0000000000004d52	subl	$0x2, %eax
0000000000004d55	movl	%eax, -0x3c(%rbp)
0000000000004d58	jb	0x4dcf
0000000000004d5e	jmp	0x4d63
0000000000004d63	movl	-0x1c(%rbp), %eax
0000000000004d66	addl	$0xfffffefa, %eax
0000000000004d6b	subl	$0x2, %eax
0000000000004d6e	movl	%eax, -0x40(%rbp)
0000000000004d71	jb	0x4de5
0000000000004d77	jmp	0x4d7c
0000000000004d7c	movl	-0x1c(%rbp), %eax
0000000000004d7f	subl	$0x108, %eax
0000000000004d84	movl	%eax, -0x44(%rbp)
0000000000004d87	je	0x4dda
0000000000004d8d	jmp	0x4df0
0000000000004d92	movw	$0x10, -0x2(%rbp)
0000000000004d98	jmp	0x4eb0
0000000000004d9d	movw	$0x10, -0x2(%rbp)
0000000000004da3	jmp	0x4eb0
0000000000004da8	movw	$0x20, -0x2(%rbp)
0000000000004dae	jmp	0x4eb0
0000000000004db3	xorl	%eax, %eax
0000000000004db5	movl	-0x8(%rbp), %ecx
0000000000004db8	cmpl	$0x0, %ecx
0000000000004dbb	movl	$0x40, %ecx
0000000000004dc0	cmovel	%ecx, %eax
0000000000004dc3	movw	%ax, %dx
0000000000004dc6	movw	%dx, -0x2(%rbp)
0000000000004dca	jmp	0x4eb0
0000000000004dcf	movw	$0x40, -0x2(%rbp)
0000000000004dd5	jmp	0x4eb0
0000000000004dda	movw	$0x40, -0x2(%rbp)
0000000000004de0	jmp	0x4eb0
0000000000004de5	movw	$0x20, -0x2(%rbp)
0000000000004deb	jmp	0x4eb0
0000000000004df0	jmp	0x4df5
0000000000004df5	movq	$0x0, -0x18(%rbp)
0000000000004dfd	cmpq	$0x13, -0x18(%rbp)
0000000000004e02	jae	0x4eaa
0000000000004e08	movl	-0xc(%rbp), %eax
0000000000004e0b	movq	-0x18(%rbp), %rcx
0000000000004e0f	shlq	$0x4, %rcx
0000000000004e13	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004e1a	addq	%rcx, %rdx
0000000000004e1d	cmpl	0x4(%rdx), %eax
0000000000004e20	jb	0x4e94
0000000000004e26	movl	-0xc(%rbp), %eax
0000000000004e29	movq	-0x18(%rbp), %rcx
0000000000004e2d	shlq	$0x4, %rcx
0000000000004e31	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004e38	addq	%rcx, %rdx
0000000000004e3b	cmpl	0x8(%rdx), %eax
0000000000004e3e	ja	0x4e94
0000000000004e44	cmpl	$0x0, -0x8(%rbp)
0000000000004e48	jne	0x4e6c
0000000000004e4e	movq	-0x18(%rbp), %rax
0000000000004e52	shlq	$0x4, %rax
0000000000004e56	leaq	_REGISTER_MAP(%rip), %rcx
0000000000004e5d	addq	%rax, %rcx
0000000000004e60	movzwl	0xe(%rcx), %edx
0000000000004e64	movl	%edx, -0x48(%rbp)
0000000000004e67	jmp	0x4e85
0000000000004e6c	movq	-0x18(%rbp), %rax
0000000000004e70	shlq	$0x4, %rax
0000000000004e74	leaq	_REGISTER_MAP(%rip), %rcx
0000000000004e7b	addq	%rax, %rcx
0000000000004e7e	movzwl	0xc(%rcx), %edx
0000000000004e82	movl	%edx, -0x48(%rbp)
0000000000004e85	movl	-0x48(%rbp), %eax
0000000000004e88	movw	%ax, %cx
0000000000004e8b	movw	%cx, -0x2(%rbp)
0000000000004e8f	jmp	0x4eb0
0000000000004e94	jmp	0x4e99
0000000000004e99	movq	-0x18(%rbp), %rax
0000000000004e9d	addq	$0x1, %rax
0000000000004ea1	movq	%rax, -0x18(%rbp)
0000000000004ea5	jmp	0x4dfd
0000000000004eaa	movw	$0x0, -0x2(%rbp)
0000000000004eb0	movzwl	-0x2(%rbp), %eax
0000000000004eb4	popq	%rbp
0000000000004eb5	retq
0000000000004eb6	nopw	%cs:(%rax,%rax)
_ZydisRegisterGetLargestEnclosing:
0000000000004ec0	pushq	%rbp
0000000000004ec1	movq	%rsp, %rbp
0000000000004ec4	movl	%edi, -0x8(%rbp)
0000000000004ec7	movl	%esi, -0xc(%rbp)
0000000000004eca	movq	$0x0, -0x18(%rbp)
0000000000004ed2	cmpq	$0x13, -0x18(%rbp)
0000000000004ed7	jae	0x50b0
0000000000004edd	movl	-0xc(%rbp), %eax
0000000000004ee0	movq	-0x18(%rbp), %rcx
0000000000004ee4	shlq	$0x4, %rcx
0000000000004ee8	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004eef	addq	%rcx, %rdx
0000000000004ef2	cmpl	0x4(%rdx), %eax
0000000000004ef5	jb	0x509a
0000000000004efb	movl	-0xc(%rbp), %eax
0000000000004efe	movq	-0x18(%rbp), %rcx
0000000000004f02	shlq	$0x4, %rcx
0000000000004f06	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004f0d	addq	%rcx, %rdx
0000000000004f10	cmpl	0x8(%rdx), %eax
0000000000004f13	ja	0x509a
0000000000004f19	movq	-0x18(%rbp), %rax
0000000000004f1d	shlq	$0x4, %rax
0000000000004f21	leaq	_REGISTER_MAP(%rip), %rcx
0000000000004f28	addq	%rax, %rcx
0000000000004f2b	movl	(%rcx), %edx
0000000000004f2d	movl	%edx, -0x1c(%rbp)
0000000000004f30	cmpl	$0x4, -0x1c(%rbp)
0000000000004f34	jne	0x4f50
0000000000004f3a	cmpl	$0x0, -0x8(%rbp)
0000000000004f3e	je	0x4f50
0000000000004f44	movl	$0x0, -0x4(%rbp)
0000000000004f4b	jmp	0x50b7
0000000000004f50	movl	-0xc(%rbp), %eax
0000000000004f53	movl	-0x1c(%rbp), %ecx
0000000000004f56	movl	%ecx, %edx
0000000000004f58	shlq	$0x4, %rdx
0000000000004f5c	leaq	_REGISTER_MAP(%rip), %rsi
0000000000004f63	movl	0x4(%rdx,%rsi), %ecx
0000000000004f67	subl	%ecx, %eax
0000000000004f69	movb	%al, %dil
0000000000004f6c	movb	%dil, -0x1d(%rbp)
0000000000004f70	movl	-0x1c(%rbp), %eax
0000000000004f73	movl	%eax, %ecx
0000000000004f75	subl	$0x1, %ecx
0000000000004f78	movl	%eax, -0x24(%rbp)
0000000000004f7b	movl	%ecx, -0x28(%rbp)
0000000000004f7e	je	0x4fb7
0000000000004f84	jmp	0x4f89
0000000000004f89	movl	-0x24(%rbp), %eax
0000000000004f8c	addl	$-0x2, %eax
0000000000004f8f	subl	$0x3, %eax
0000000000004f92	movl	%eax, -0x2c(%rbp)
0000000000004f95	jb	0x4fcc
0000000000004f9b	jmp	0x4fa0
0000000000004fa0	movl	-0x24(%rbp), %eax
0000000000004fa3	addl	$-0x7, %eax
0000000000004fa6	subl	$0x3, %eax
0000000000004fa9	movl	%eax, -0x30(%rbp)
0000000000004fac	jb	0x507a
0000000000004fb2	jmp	0x508e
0000000000004fb7	movzbl	-0x1d(%rbp), %eax
0000000000004fbb	movl	%eax, %ecx
0000000000004fbd	leaq	_ZydisRegisterGetLargestEnclosing.GPR8_MAPPING(%rip), %rdx
0000000000004fc4	movb	(%rdx,%rcx), %sil
0000000000004fc8	movb	%sil, -0x1d(%rbp)
0000000000004fcc	movl	-0x8(%rbp), %eax
0000000000004fcf	testl	%eax, %eax
0000000000004fd1	movl	%eax, -0x34(%rbp)
0000000000004fd4	je	0x5032
0000000000004fda	jmp	0x4fdf
0000000000004fdf	movl	-0x34(%rbp), %eax
0000000000004fe2	subl	$0x1, %eax
0000000000004fe5	movl	%eax, -0x38(%rbp)
0000000000004fe8	je	0x5046
0000000000004fee	jmp	0x4ff3
0000000000004ff3	movl	-0x34(%rbp), %eax
0000000000004ff6	subl	$0x2, %eax
0000000000004ff9	movl	%eax, -0x3c(%rbp)
0000000000004ffc	je	0x505a
0000000000005002	jmp	0x5007
0000000000005007	movl	-0x34(%rbp), %eax
000000000000500a	subl	$0x3, %eax
000000000000500d	movl	%eax, -0x40(%rbp)
0000000000005010	je	0x5046
0000000000005016	jmp	0x501b
000000000000501b	movl	-0x34(%rbp), %eax
000000000000501e	addl	$-0x4, %eax
0000000000005021	subl	$0x2, %eax
0000000000005024	movl	%eax, -0x44(%rbp)
0000000000005027	jb	0x505a
000000000000502d	jmp	0x506e
0000000000005032	movl	0x1a8ec(%rip), %eax
0000000000005038	movzbl	-0x1d(%rbp), %ecx
000000000000503c	addl	%ecx, %eax
000000000000503e	movl	%eax, -0x4(%rbp)
0000000000005041	jmp	0x50b7
0000000000005046	movl	0x1a8c8(%rip), %eax
000000000000504c	movzbl	-0x1d(%rbp), %ecx
0000000000005050	addl	%ecx, %eax
0000000000005052	movl	%eax, -0x4(%rbp)
0000000000005055	jmp	0x50b7
000000000000505a	movl	0x1a8a4(%rip), %eax
0000000000005060	movzbl	-0x1d(%rbp), %ecx
0000000000005064	addl	%ecx, %eax
0000000000005066	movl	%eax, -0x4(%rbp)
0000000000005069	jmp	0x50b7
000000000000506e	movl	$0x0, -0x4(%rbp)
0000000000005075	jmp	0x50b7
000000000000507a	movl	0x1a8f4(%rip), %eax
0000000000005080	movzbl	-0x1d(%rbp), %ecx
0000000000005084	addl	%ecx, %eax
0000000000005086	movl	%eax, -0x4(%rbp)
0000000000005089	jmp	0x50b7
000000000000508e	movl	$0x0, -0x4(%rbp)
0000000000005095	jmp	0x50b7
000000000000509a	jmp	0x509f
000000000000509f	movq	-0x18(%rbp), %rax
00000000000050a3	addq	$0x1, %rax
00000000000050a7	movq	%rax, -0x18(%rbp)
00000000000050ab	jmp	0x4ed2
00000000000050b0	movl	$0x0, -0x4(%rbp)
00000000000050b7	movl	-0x4(%rbp), %eax
00000000000050ba	popq	%rbp
00000000000050bb	retq
00000000000050bc	nopl	(%rax)
_ZydisRegisterGetString:
00000000000050c0	pushq	%rbp
00000000000050c1	movq	%rsp, %rbp
00000000000050c4	movl	%edi, -0xc(%rbp)
00000000000050c7	movl	-0xc(%rbp), %edi
00000000000050ca	movl	%edi, %eax
00000000000050cc	cmpq	$0x109, %rax
00000000000050d2	jb	0x50e5
00000000000050d8	movq	$0x0, -0x8(%rbp)
00000000000050e0	jmp	0x50ff
00000000000050e5	movl	-0xc(%rbp), %eax
00000000000050e8	movl	%eax, %ecx
00000000000050ea	imulq	$0x9, %rcx, %rcx
00000000000050ee	leaq	_STR_REGISTER(%rip), %rdx
00000000000050f5	addq	%rcx, %rdx
00000000000050f8	movq	(%rdx), %rcx
00000000000050fb	movq	%rcx, -0x8(%rbp)
00000000000050ff	movq	-0x8(%rbp), %rax
0000000000005103	popq	%rbp
0000000000005104	retq
0000000000005105	nopw	%cs:(%rax,%rax)
000000000000510f	nop
_ZydisRegisterGetStringWrapped:
0000000000005110	pushq	%rbp
0000000000005111	movq	%rsp, %rbp
0000000000005114	movl	%edi, -0xc(%rbp)
0000000000005117	movl	-0xc(%rbp), %edi
000000000000511a	movl	%edi, %eax
000000000000511c	cmpq	$0x109, %rax
0000000000005122	jb	0x5135
0000000000005128	movq	$0x0, -0x8(%rbp)
0000000000005130	jmp	0x514c
0000000000005135	movl	-0xc(%rbp), %eax
0000000000005138	movl	%eax, %ecx
000000000000513a	imulq	$0x9, %rcx, %rcx
000000000000513e	leaq	_STR_REGISTER(%rip), %rdx
0000000000005145	addq	%rcx, %rdx
0000000000005148	movq	%rdx, -0x8(%rbp)
000000000000514c	movq	-0x8(%rbp), %rax
0000000000005150	popq	%rbp
0000000000005151	retq
0000000000005152	nopw	%cs:(%rax,%rax)
000000000000515c	nopl	(%rax)
_ZydisRegisterClassGetWidth:
0000000000005160	pushq	%rbp
0000000000005161	movq	%rsp, %rbp
0000000000005164	movl	%edi, -0x8(%rbp)
0000000000005167	movl	%esi, -0xc(%rbp)
000000000000516a	movl	-0xc(%rbp), %esi
000000000000516d	movl	%esi, %eax
000000000000516f	cmpq	$0x13, %rax
0000000000005173	jae	0x51cb
0000000000005179	cmpl	$0x0, -0x8(%rbp)
000000000000517d	jne	0x51a2
0000000000005183	movl	-0xc(%rbp), %eax
0000000000005186	movl	%eax, %ecx
0000000000005188	shlq	$0x4, %rcx
000000000000518c	leaq	_REGISTER_MAP(%rip), %rdx
0000000000005193	addq	%rcx, %rdx
0000000000005196	movzwl	0xe(%rdx), %eax
000000000000519a	movl	%eax, -0x10(%rbp)
000000000000519d	jmp	0x51bc
00000000000051a2	movl	-0xc(%rbp), %eax
00000000000051a5	movl	%eax, %ecx
00000000000051a7	shlq	$0x4, %rcx
00000000000051ab	leaq	_REGISTER_MAP(%rip), %rdx
00000000000051b2	addq	%rcx, %rdx
00000000000051b5	movzwl	0xc(%rdx), %eax
00000000000051b9	movl	%eax, -0x10(%rbp)
00000000000051bc	movl	-0x10(%rbp), %eax
00000000000051bf	movw	%ax, %cx
00000000000051c2	movw	%cx, -0x2(%rbp)
00000000000051c6	jmp	0x51d1
00000000000051cb	movw	$0x0, -0x2(%rbp)
00000000000051d1	movzwl	-0x2(%rbp), %eax
00000000000051d5	popq	%rbp
00000000000051d6	retq
00000000000051d7	nop
00000000000051d8	nop
00000000000051d9	nop
00000000000051da	nop
00000000000051db	nop
00000000000051dc	nop
00000000000051dd	nop
00000000000051de	nop
00000000000051df	nop
_ZydisGetInstructionDefinition:
00000000000051e0	pushq	%rbp
00000000000051e1	movq	%rsp, %rbp
00000000000051e4	subq	$0x20, %rsp
00000000000051e8	movw	%si, %ax
00000000000051eb	movl	%edi, -0x4(%rbp)
00000000000051ee	movw	%ax, -0x6(%rbp)
00000000000051f2	movq	%rdx, -0x10(%rbp)
00000000000051f6	movl	-0x4(%rbp), %esi
00000000000051f9	movl	%esi, %edx
00000000000051fb	movq	%rdx, %rcx
00000000000051fe	subq	$0x5, %rcx
0000000000005202	movq	%rdx, -0x18(%rbp)
0000000000005206	movq	%rcx, -0x20(%rbp)
000000000000520a	ja	0x52e4
0000000000005210	leaq	0xf5(%rip), %rax
0000000000005217	movq	-0x18(%rbp), %rcx
000000000000521b	movslq	(%rax,%rcx,4), %rdx
000000000000521f	addq	%rax, %rdx
0000000000005222	jmpq	*%rdx
0000000000005224	leaq	_ISTR_DEFINITIONS_LEGACY(%rip), %rax
000000000000522b	movzwl	-0x6(%rbp), %ecx
000000000000522f	movl	%ecx, %edx
0000000000005231	imulq	$0xd, %rdx, %rdx
0000000000005235	addq	%rdx, %rax
0000000000005238	movq	-0x10(%rbp), %rdx
000000000000523c	movq	%rax, (%rdx)
000000000000523f	jmp	0x5303
0000000000005244	leaq	_ISTR_DEFINITIONS_3DNOW(%rip), %rax
000000000000524b	movzwl	-0x6(%rbp), %ecx
000000000000524f	movl	%ecx, %edx
0000000000005251	imulq	$0xb, %rdx, %rdx
0000000000005255	addq	%rdx, %rax
0000000000005258	movq	-0x10(%rbp), %rdx
000000000000525c	movq	%rax, (%rdx)
000000000000525f	jmp	0x5303
0000000000005264	leaq	_ISTR_DEFINITIONS_XOP(%rip), %rax
000000000000526b	movzwl	-0x6(%rbp), %ecx
000000000000526f	movl	%ecx, %edx
0000000000005271	imulq	$0xc, %rdx, %rdx
0000000000005275	addq	%rdx, %rax
0000000000005278	movq	-0x10(%rbp), %rdx
000000000000527c	movq	%rax, (%rdx)
000000000000527f	jmp	0x5303
0000000000005284	leaq	_ISTR_DEFINITIONS_VEX(%rip), %rax
000000000000528b	movzwl	-0x6(%rbp), %ecx
000000000000528f	movl	%ecx, %edx
0000000000005291	imulq	$0xc, %rdx, %rdx
0000000000005295	addq	%rdx, %rax
0000000000005298	movq	-0x10(%rbp), %rdx
000000000000529c	movq	%rax, (%rdx)
000000000000529f	jmp	0x5303
00000000000052a4	leaq	_ISTR_DEFINITIONS_EVEX(%rip), %rax
00000000000052ab	movzwl	-0x6(%rbp), %ecx
00000000000052af	movl	%ecx, %edx
00000000000052b1	imulq	$0xe, %rdx, %rdx
00000000000052b5	addq	%rdx, %rax
00000000000052b8	movq	-0x10(%rbp), %rdx
00000000000052bc	movq	%rax, (%rdx)
00000000000052bf	jmp	0x5303
00000000000052c4	leaq	_ISTR_DEFINITIONS_MVEX(%rip), %rax
00000000000052cb	movzwl	-0x6(%rbp), %ecx
00000000000052cf	movl	%ecx, %edx
00000000000052d1	imulq	$0xd, %rdx, %rdx
00000000000052d5	addq	%rdx, %rax
00000000000052d8	movq	-0x10(%rbp), %rdx
00000000000052dc	movq	%rax, (%rdx)
00000000000052df	jmp	0x5303
00000000000052e4	leaq	0x5bd55(%rip), %rdi ## literal pool for: "ZydisGetInstructionDefinition"
00000000000052eb	leaq	0x5bd6c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000052f2	leaq	0x5c113(%rip), %rcx ## literal pool for: "0"
00000000000052f9	movl	$0x66, %edx
00000000000052fe	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000005303	addq	$0x20, %rsp
0000000000005307	popq	%rbp
0000000000005308	retq
0000000000005309	nopl	(%rax)
000000000000530c	sbbb	%bh, %bh
000000000000530e	.byte 0xff #bad opcode
000000000000530f	.byte 0xff #bad opcode
0000000000005310	cmpb	%bh, %bh
0000000000005312	.byte 0xff #bad opcode
0000000000005313	lcalll	*-0x1(%rax)
0000000000005316	.byte 0xff #bad opcode
0000000000005317	.byte 0xff #bad opcode
0000000000005318	js	0x5319
000000000000531a	.byte 0xff #bad opcode
000000000000531b	lcalll	*-0x47000001(%rax)
0000000000005321	.byte 0xff #bad opcode
0000000000005322	.byte 0xff #bad opcode
0000000000005323	jmpq	*0x2e(%rsi)
0000000000005326	nopl	(%rax,%rax)
000000000000532e	nop
_ZydisGetOperandDefinitions:
0000000000005330	pushq	%rbp
0000000000005331	movq	%rsp, %rbp
0000000000005334	subq	$0x20, %rsp
0000000000005338	movq	%rdi, -0x10(%rbp)
000000000000533c	movq	%rsi, -0x18(%rbp)
0000000000005340	movq	-0x10(%rbp), %rsi
0000000000005344	movq	(%rsi), %rsi
0000000000005347	shrq	$0xb, %rsi
000000000000534b	movb	%sil, %al
000000000000534e	andb	$0xf, %al
0000000000005350	movzbl	%al, %ecx
0000000000005353	cmpl	$0x0, %ecx
0000000000005356	jne	0x5370
000000000000535c	movq	-0x18(%rbp), %rax
0000000000005360	movq	$0x0, (%rax)
0000000000005367	movb	$0x0, -0x1(%rbp)
000000000000536b	jmp	0x540c
0000000000005370	movq	-0x10(%rbp), %rax
0000000000005374	movq	(%rax), %rax
0000000000005377	movl	%eax, %ecx
0000000000005379	shrl	$0xf, %ecx
000000000000537c	andl	$0x7fff, %ecx
0000000000005382	movw	%cx, %dx
0000000000005385	movzwl	%dx, %ecx
0000000000005388	cmpl	$0xffff, %ecx
000000000000538e	setne	%sil
0000000000005392	xorb	$-0x1, %sil
0000000000005396	andb	$0x1, %sil
000000000000539a	movzbl	%sil, %ecx
000000000000539e	movslq	%ecx, %rax
00000000000053a1	cmpq	$0x0, %rax
00000000000053a5	je	0x53ca
00000000000053ab	leaq	0x5bce4(%rip), %rdi ## literal pool for: "ZydisGetOperandDefinitions"
00000000000053b2	leaq	0x5bca5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000053b9	leaq	0x5bcf1(%rip), %rcx ## literal pool for: "definition->operand_reference != 0xFFFF"
00000000000053c0	movl	$0x77, %edx
00000000000053c5	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000053ca	jmp	0x53cf
00000000000053cf	movq	-0x10(%rbp), %rax
00000000000053d3	movl	(%rax), %ecx
00000000000053d5	shrl	$0xf, %ecx
00000000000053d8	andl	$0x7fff, %ecx
00000000000053de	movl	%ecx, %eax
00000000000053e0	leaq	(%rax,%rax,2), %rax
00000000000053e4	leaq	_OPERAND_DEFINITIONS(%rip), %rdx
00000000000053eb	leaq	(%rdx,%rax,4), %rax
00000000000053ef	movq	-0x18(%rbp), %rdx
00000000000053f3	movq	%rax, (%rdx)
00000000000053f6	movq	-0x10(%rbp), %rax
00000000000053fa	movq	(%rax), %rax
00000000000053fd	shrq	$0xb, %rax
0000000000005401	movb	%al, %sil
0000000000005404	andb	$0xf, %sil
0000000000005408	movb	%sil, -0x1(%rbp)
000000000000540c	movzbl	-0x1(%rbp), %eax
0000000000005410	addq	$0x20, %rsp
0000000000005414	popq	%rbp
0000000000005415	retq
0000000000005416	nopw	%cs:(%rax,%rax)
_ZydisGetElementInfo:
0000000000005420	pushq	%rbp
0000000000005421	movq	%rsp, %rbp
0000000000005424	subq	$0x20, %rsp
0000000000005428	movl	%edi, -0x4(%rbp)
000000000000542b	movq	%rsi, -0x10(%rbp)
000000000000542f	movq	%rdx, -0x18(%rbp)
0000000000005433	movl	-0x4(%rbp), %edi
0000000000005436	movl	%edi, %edx
0000000000005438	cmpq	$0x17, %rdx
000000000000543c	setb	%al
000000000000543f	xorb	$-0x1, %al
0000000000005441	andb	$0x1, %al
0000000000005443	movzbl	%al, %edi
0000000000005446	movslq	%edi, %rdx
0000000000005449	cmpq	$0x0, %rdx
000000000000544d	je	0x5472
0000000000005453	leaq	0x5bc7f(%rip), %rdi ## literal pool for: "ZydisGetElementInfo"
000000000000545a	leaq	0x5bbfd(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
0000000000005461	leaq	0x5bc85(%rip), %rcx ## literal pool for: "element < (sizeof(lookup) / sizeof((lookup)[0]))"
0000000000005468	movl	$0xa4, %edx
000000000000546d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000005472	jmp	0x5477
0000000000005477	movl	-0x4(%rbp), %eax
000000000000547a	movl	%eax, %ecx
000000000000547c	leaq	_ZydisGetElementInfo.lookup(%rip), %rdx
0000000000005483	movl	(%rdx,%rcx,8), %eax
0000000000005486	movq	-0x10(%rbp), %rcx
000000000000548a	movl	%eax, (%rcx)
000000000000548c	movl	-0x4(%rbp), %eax
000000000000548f	movl	%eax, %ecx
0000000000005491	movw	0x4(%rdx,%rcx,8), %si
0000000000005496	movq	-0x18(%rbp), %rcx
000000000000549a	movw	%si, (%rcx)
000000000000549d	addq	$0x20, %rsp
00000000000054a1	popq	%rbp
00000000000054a2	retq
00000000000054a3	nopw	%cs:(%rax,%rax)
00000000000054ad	nopl	(%rax)
_ZydisGetAccessedFlags:
00000000000054b0	pushq	%rbp
00000000000054b1	movq	%rsp, %rbp
00000000000054b4	subq	$0x10, %rsp
00000000000054b8	movq	%rdi, -0x8(%rbp)
00000000000054bc	movq	%rsi, -0x10(%rbp)
00000000000054c0	movq	-0x8(%rbp), %rsi
00000000000054c4	movq	(%rsi), %rsi
00000000000054c7	shrq	$0x23, %rsi
00000000000054cb	movb	%sil, %al
00000000000054ce	andb	$0x7f, %al
00000000000054d0	movzbl	%al, %ecx
00000000000054d3	movl	%ecx, %esi
00000000000054d5	cmpq	$0x48, %rsi
00000000000054d9	setb	%al
00000000000054dc	xorb	$-0x1, %al
00000000000054de	andb	$0x1, %al
00000000000054e0	movzbl	%al, %ecx
00000000000054e3	movslq	%ecx, %rsi
00000000000054e6	cmpq	$0x0, %rsi
00000000000054ea	je	0x550f
00000000000054f0	leaq	0x5bc27(%rip), %rdi ## literal pool for: "ZydisGetAccessedFlags"
00000000000054f7	leaq	0x5bb60(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000054fe	leaq	0x5bc2f(%rip), %rcx ## literal pool for: "definition->flags_reference < (sizeof(ACCESSED_FLAGS) / sizeof((ACCESSED_FLAGS)[0]))"
0000000000005505	movl	$0xb3, %edx
000000000000550a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000550f	jmp	0x5514
0000000000005514	movq	-0x8(%rbp), %rax
0000000000005518	movq	(%rax), %rax
000000000000551b	shrq	$0x23, %rax
000000000000551f	movl	%eax, %ecx
0000000000005521	andl	$0x7f, %ecx
0000000000005524	movl	%ecx, %eax
0000000000005526	imulq	$0x54, %rax, %rax
000000000000552a	leaq	_ACCESSED_FLAGS(%rip), %rdx
0000000000005531	addq	%rax, %rdx
0000000000005534	movq	-0x10(%rbp), %rax
0000000000005538	movq	%rdx, (%rax)
000000000000553b	movq	-0x8(%rbp), %rax
000000000000553f	movq	(%rax), %rax
0000000000005542	shrq	$0x23, %rax
0000000000005546	movb	%al, %sil
0000000000005549	andb	$0x7f, %sil
000000000000554d	movzbl	%sil, %ecx
0000000000005551	cmpl	$0x0, %ecx
0000000000005554	setne	%sil
0000000000005558	andb	$0x1, %sil
000000000000555c	movzbl	%sil, %ecx
0000000000005560	movb	%cl, %sil
0000000000005563	movzbl	%sil, %eax
0000000000005567	addq	$0x10, %rsp
000000000000556b	popq	%rbp
000000000000556c	retq
000000000000556d	nop
000000000000556e	nop
000000000000556f	nop
_ZydisDecoderInit:
0000000000005570	pushq	%rbp
0000000000005571	movq	%rsp, %rbp
0000000000005574	subq	$0x30, %rsp
0000000000005578	movq	%rdi, -0x10(%rbp)
000000000000557c	movl	%esi, -0x14(%rbp)
000000000000557f	movl	%edx, -0x18(%rbp)
0000000000005582	cmpq	$0x0, -0x10(%rbp)
0000000000005587	jne	0x5599
000000000000558d	movl	$0x80100004, -0x4(%rbp)
0000000000005594	jmp	0x564f
0000000000005599	movl	-0x14(%rbp), %eax
000000000000559c	testl	%eax, %eax
000000000000559e	movl	%eax, -0x1c(%rbp)
00000000000055a1	je	0x55c2
00000000000055a7	jmp	0x55ac
00000000000055ac	movl	-0x1c(%rbp), %eax
00000000000055af	decl	%eax
00000000000055b1	subl	$0x5, %eax
00000000000055b4	movl	%eax, -0x20(%rbp)
00000000000055b7	jb	0x55dd
00000000000055bd	jmp	0x5602
00000000000055c2	cmpl	$0x2, -0x18(%rbp)
00000000000055c6	je	0x55d8
00000000000055cc	movl	$0x80100004, -0x4(%rbp)
00000000000055d3	jmp	0x564f
00000000000055d8	jmp	0x560e
00000000000055dd	cmpl	$0x0, -0x18(%rbp)
00000000000055e1	je	0x55fd
00000000000055e7	cmpl	$0x1, -0x18(%rbp)
00000000000055eb	je	0x55fd
00000000000055f1	movl	$0x80100004, -0x4(%rbp)
00000000000055f8	jmp	0x564f
00000000000055fd	jmp	0x560e
0000000000005602	movl	$0x80100004, -0x4(%rbp)
0000000000005609	jmp	0x564f
000000000000560e	movq	$-0x1, %rcx
0000000000005615	movl	-0x14(%rbp), %eax
0000000000005618	movq	-0x10(%rbp), %rdx
000000000000561c	movl	%eax, (%rdx)
000000000000561e	movl	-0x18(%rbp), %eax
0000000000005621	movq	-0x10(%rbp), %rdx
0000000000005625	movl	%eax, 0x4(%rdx)
0000000000005628	movq	-0x10(%rbp), %rdx
000000000000562c	addq	$0x8, %rdx
0000000000005630	movq	%rdx, %rdi
0000000000005633	leaq	_ZydisDecoderInit.decoderModes(%rip), %rsi
000000000000563a	movl	$0x9, %edx
000000000000563f	callq	0x1f64a ## symbol stub for: ___memcpy_chk
0000000000005644	movl	$0x100000, -0x4(%rbp)
000000000000564b	movq	%rax, -0x28(%rbp)
000000000000564f	movl	-0x4(%rbp), %eax
0000000000005652	addq	$0x30, %rsp
0000000000005656	popq	%rbp
0000000000005657	retq
0000000000005658	nopl	(%rax,%rax)
_ZydisDecoderEnableMode:
0000000000005660	pushq	%rbp
0000000000005661	movq	%rsp, %rbp
0000000000005664	movb	%dl, %al
0000000000005666	movq	%rdi, -0x10(%rbp)
000000000000566a	movl	%esi, -0x14(%rbp)
000000000000566d	movb	%al, -0x15(%rbp)
0000000000005670	cmpq	$0x0, -0x10(%rbp)
0000000000005675	je	0x5685
000000000000567b	cmpl	$0x8, -0x14(%rbp)
000000000000567f	jbe	0x5691
0000000000005685	movl	$0x80100004, -0x4(%rbp)
000000000000568c	jmp	0x56a8
0000000000005691	movb	-0x15(%rbp), %al
0000000000005694	movq	-0x10(%rbp), %rcx
0000000000005698	movl	-0x14(%rbp), %edx
000000000000569b	movl	%edx, %esi
000000000000569d	movb	%al, 0x8(%rcx,%rsi)
00000000000056a1	movl	$0x100000, -0x4(%rbp)
00000000000056a8	movl	-0x4(%rbp), %eax
00000000000056ab	popq	%rbp
00000000000056ac	retq
00000000000056ad	nopl	(%rax)
_ZydisDecoderDecodeBuffer:
00000000000056b0	pushq	%rbp
00000000000056b1	movq	%rsp, %rbp
00000000000056b4	subq	$0x90, %rsp
00000000000056bb	movq	%rdi, -0x10(%rbp)
00000000000056bf	movq	%rsi, -0x18(%rbp)
00000000000056c3	movq	%rdx, -0x20(%rbp)
00000000000056c7	movq	%rcx, -0x28(%rbp)
00000000000056cb	cmpq	$0x0, -0x10(%rbp)
00000000000056d0	je	0x56e1
00000000000056d6	cmpq	$0x0, -0x28(%rbp)
00000000000056db	jne	0x56ed
00000000000056e1	movl	$0x80100004, -0x4(%rbp)
00000000000056e8	jmp	0x57ff
00000000000056ed	cmpq	$0x0, -0x18(%rbp)
00000000000056f2	je	0x5703
00000000000056f8	cmpq	$0x0, -0x20(%rbp)
00000000000056fd	jne	0x570f
0000000000005703	movl	$0x80200000, -0x4(%rbp)
000000000000570a	jmp	0x57ff
000000000000570f	xorl	%eax, %eax
0000000000005711	movq	$-0x1, %rcx
0000000000005718	leaq	-0x68(%rbp), %rdx
000000000000571c	movq	%rdx, %rdi
000000000000571f	movl	%eax, %esi
0000000000005721	movl	$0x40, %edx
0000000000005726	movl	%eax, -0x74(%rbp)
0000000000005729	movq	%rcx, -0x80(%rbp)
000000000000572d	callq	0x1f6aa ## symbol stub for: _memset
0000000000005732	movq	-0x10(%rbp), %rcx
0000000000005736	movq	%rcx, -0x68(%rbp)
000000000000573a	movq	-0x18(%rbp), %rcx
000000000000573e	movq	%rcx, -0x60(%rbp)
0000000000005742	movq	-0x20(%rbp), %rcx
0000000000005746	movq	%rcx, -0x58(%rbp)
000000000000574a	movq	-0x28(%rbp), %rcx
000000000000574e	movq	%rcx, %rdi
0000000000005751	movl	-0x74(%rbp), %esi
0000000000005754	movl	$0x5c0, %edx
0000000000005759	movq	-0x80(%rbp), %rcx
000000000000575d	callq	0x1f650 ## symbol stub for: ___memset_chk
0000000000005762	movq	-0x10(%rbp), %rcx
0000000000005766	movl	(%rcx), %esi
0000000000005768	movq	-0x28(%rbp), %rcx
000000000000576c	movl	%esi, (%rcx)
000000000000576e	movq	-0x10(%rbp), %rcx
0000000000005772	movl	0x4(%rcx), %esi
0000000000005775	movl	%esi, %ecx
0000000000005777	leaq	_ZydisDecoderDecodeBuffer.lookup(%rip), %rdx
000000000000577e	movb	(%rdx,%rcx), %r8b
0000000000005782	movq	-0x28(%rbp), %rcx
0000000000005786	movb	%r8b, 0x15(%rcx)
000000000000578a	movq	%rax, -0x88(%rbp)
0000000000005791	movq	-0x28(%rbp), %rsi
0000000000005795	leaq	-0x68(%rbp), %rdi
0000000000005799	callq	_ZydisCollectOptionalPrefixes
000000000000579e	movl	%eax, -0x6c(%rbp)
00000000000057a1	movl	-0x6c(%rbp), %eax
00000000000057a4	andl	$0x80000000, %eax
00000000000057a9	cmpl	$0x0, %eax
00000000000057ac	je	0x57bd
00000000000057b2	movl	-0x6c(%rbp), %eax
00000000000057b5	movl	%eax, -0x4(%rbp)
00000000000057b8	jmp	0x57ff
00000000000057bd	jmp	0x57c2
00000000000057c2	jmp	0x57c7
00000000000057c7	movq	-0x28(%rbp), %rsi
00000000000057cb	leaq	-0x68(%rbp), %rdi
00000000000057cf	callq	_ZydisDecodeInstruction
00000000000057d4	movl	%eax, -0x70(%rbp)
00000000000057d7	movl	-0x70(%rbp), %eax
00000000000057da	andl	$0x80000000, %eax
00000000000057df	cmpl	$0x0, %eax
00000000000057e2	je	0x57f3
00000000000057e8	movl	-0x70(%rbp), %eax
00000000000057eb	movl	%eax, -0x4(%rbp)
00000000000057ee	jmp	0x57ff
00000000000057f3	jmp	0x57f8
00000000000057f8	movl	$0x100000, -0x4(%rbp)
00000000000057ff	movl	-0x4(%rbp), %eax
0000000000005802	addq	$0x90, %rsp
0000000000005809	popq	%rbp
000000000000580a	retq
000000000000580b	nopl	(%rax,%rax)
_ZydisCollectOptionalPrefixes:
0000000000005810	pushq	%rbp
0000000000005811	movq	%rsp, %rbp
0000000000005814	subq	$0x50, %rsp
0000000000005818	movq	%rdi, -0x10(%rbp)
000000000000581c	movq	%rsi, -0x18(%rbp)
0000000000005820	cmpq	$0x0, -0x10(%rbp)
0000000000005825	setne	%al
0000000000005828	xorb	$-0x1, %al
000000000000582a	andb	$0x1, %al
000000000000582c	movzbl	%al, %ecx
000000000000582f	movslq	%ecx, %rsi
0000000000005832	cmpq	$0x0, %rsi
0000000000005836	je	0x585b
000000000000583c	leaq	0x5b946(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
0000000000005843	leaq	0x5b95c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000584a	leaq	0x5b98a(%rip), %rcx ## literal pool for: "context"
0000000000005851	movl	$0xc3e, %edx
0000000000005856	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000585b	jmp	0x5860
0000000000005860	cmpq	$0x0, -0x18(%rbp)
0000000000005865	setne	%al
0000000000005868	xorb	$-0x1, %al
000000000000586a	andb	$0x1, %al
000000000000586c	movzbl	%al, %ecx
000000000000586f	movslq	%ecx, %rdx
0000000000005872	cmpq	$0x0, %rdx
0000000000005876	je	0x589b
000000000000587c	leaq	0x5b906(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
0000000000005883	leaq	0x5b91c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000588a	leaq	0x5b952(%rip), %rcx ## literal pool for: "instruction"
0000000000005891	movl	$0xc3f, %edx
0000000000005896	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000589b	jmp	0x58a0
00000000000058a0	movq	-0x18(%rbp), %rax
00000000000058a4	movzbl	0x4c8(%rax), %ecx
00000000000058ab	cmpl	$0x0, %ecx
00000000000058ae	sete	%dl
00000000000058b1	xorb	$-0x1, %dl
00000000000058b4	andb	$0x1, %dl
00000000000058b7	movzbl	%dl, %ecx
00000000000058ba	movslq	%ecx, %rax
00000000000058bd	cmpq	$0x0, %rax
00000000000058c1	je	0x58e6
00000000000058c7	leaq	0x5b8bb(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
00000000000058ce	leaq	0x5b8d1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000058d5	leaq	0x5b913(%rip), %rcx ## literal pool for: "instruction->raw.prefix_count == 0"
00000000000058dc	movl	$0xc40, %edx
00000000000058e1	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000058e6	jmp	0x58eb
00000000000058eb	movb	$0x0, -0x19(%rbp)
00000000000058ef	movb	$0x0, -0x1a(%rbp)
00000000000058f3	movb	$0x0, -0x1b(%rbp)
00000000000058f7	jmp	0x58fc
00000000000058fc	movq	-0x10(%rbp), %rdi
0000000000005900	movq	-0x18(%rbp), %rsi
0000000000005904	leaq	-0x1c(%rbp), %rdx
0000000000005908	callq	_ZydisInputPeek
000000000000590d	movl	%eax, -0x20(%rbp)
0000000000005910	movl	-0x20(%rbp), %eax
0000000000005913	andl	$0x80000000, %eax
0000000000005918	cmpl	$0x0, %eax
000000000000591b	je	0x592c
0000000000005921	movl	-0x20(%rbp), %eax
0000000000005924	movl	%eax, -0x4(%rbp)
0000000000005927	jmp	0x5cf8
000000000000592c	jmp	0x5931
0000000000005931	movzbl	-0x1c(%rbp), %eax
0000000000005935	movl	%eax, %ecx
0000000000005937	subl	$0x26, %ecx
000000000000593a	movl	%eax, -0x24(%rbp)
000000000000593d	movl	%ecx, -0x28(%rbp)
0000000000005940	je	0x5a71
0000000000005946	jmp	0x594b
000000000000594b	movl	-0x24(%rbp), %eax
000000000000594e	subl	$0x2e, %eax
0000000000005951	movl	%eax, -0x2c(%rbp)
0000000000005954	je	0x5a62
000000000000595a	jmp	0x595f
000000000000595f	movl	-0x24(%rbp), %eax
0000000000005962	subl	$0x36, %eax
0000000000005965	movl	%eax, -0x30(%rbp)
0000000000005968	je	0x5a67
000000000000596e	jmp	0x5973
0000000000005973	movl	-0x24(%rbp), %eax
0000000000005976	subl	$0x3e, %eax
0000000000005979	movl	%eax, -0x34(%rbp)
000000000000597c	je	0x5a6c
0000000000005982	jmp	0x5987
0000000000005987	movl	-0x24(%rbp), %eax
000000000000598a	subl	$0x64, %eax
000000000000598d	movl	%eax, -0x38(%rbp)
0000000000005990	je	0x5ad0
0000000000005996	jmp	0x599b
000000000000599b	movl	-0x24(%rbp), %eax
000000000000599e	subl	$0x65, %eax
00000000000059a1	movl	%eax, -0x3c(%rbp)
00000000000059a4	je	0x5ad5
00000000000059aa	jmp	0x59af
00000000000059af	movl	-0x24(%rbp), %eax
00000000000059b2	subl	$0x66, %eax
00000000000059b5	movl	%eax, -0x40(%rbp)
00000000000059b8	je	0x5b02
00000000000059be	jmp	0x59c3
00000000000059c3	movl	-0x24(%rbp), %eax
00000000000059c6	subl	$0x67, %eax
00000000000059c9	movl	%eax, -0x44(%rbp)
00000000000059cc	je	0x5b4d
00000000000059d2	jmp	0x59d7
00000000000059d7	movl	-0x24(%rbp), %eax
00000000000059da	subl	$0xf0, %eax
00000000000059df	movl	%eax, -0x48(%rbp)
00000000000059e2	je	0x5a19
00000000000059e8	jmp	0x59ed
00000000000059ed	movl	-0x24(%rbp), %eax
00000000000059f0	subl	$0xf2, %eax
00000000000059f5	movl	%eax, -0x4c(%rbp)
00000000000059f8	je	0x5a30
00000000000059fe	jmp	0x5a03
0000000000005a03	movl	-0x24(%rbp), %eax
0000000000005a06	subl	$0xf3, %eax
0000000000005a0b	movl	%eax, -0x50(%rbp)
0000000000005a0e	je	0x5a35
0000000000005a14	jmp	0x5b78
0000000000005a19	movq	-0x10(%rbp), %rax
0000000000005a1d	movb	$0x1, 0x18(%rax)
0000000000005a21	movb	-0x1a(%rbp), %cl
0000000000005a24	movq	-0x10(%rbp), %rax
0000000000005a28	movb	%cl, 0x1d(%rax)
0000000000005a2b	jmp	0x5bbb
0000000000005a30	jmp	0x5a35
0000000000005a35	movb	-0x1c(%rbp), %al
0000000000005a38	movq	-0x10(%rbp), %rcx
0000000000005a3c	movb	%al, 0x19(%rcx)
0000000000005a3f	movb	-0x1c(%rbp), %al
0000000000005a42	movq	-0x10(%rbp), %rcx
0000000000005a46	movb	%al, 0x1c(%rcx)
0000000000005a49	movb	-0x1a(%rbp), %al
0000000000005a4c	movq	-0x10(%rbp), %rcx
0000000000005a50	movb	%al, 0x1e(%rcx)
0000000000005a53	movb	-0x1a(%rbp), %al
0000000000005a56	movq	-0x10(%rbp), %rcx
0000000000005a5a	movb	%al, 0x23(%rcx)
0000000000005a5d	jmp	0x5bbb
0000000000005a62	jmp	0x5a67
0000000000005a67	jmp	0x5a6c
0000000000005a6c	jmp	0x5a71
0000000000005a71	movb	-0x1c(%rbp), %al
0000000000005a74	movq	-0x10(%rbp), %rcx
0000000000005a78	movb	%al, 0x1a(%rcx)
0000000000005a7b	movb	-0x1a(%rbp), %al
0000000000005a7e	movq	-0x10(%rbp), %rcx
0000000000005a82	movb	%al, 0x1f(%rcx)
0000000000005a85	movq	-0x10(%rbp), %rcx
0000000000005a89	movq	(%rcx), %rcx
0000000000005a8c	cmpl	$0x0, (%rcx)
0000000000005a8f	jne	0x5ab7
0000000000005a95	movq	-0x10(%rbp), %rax
0000000000005a99	movzbl	0x1b(%rax), %ecx
0000000000005a9d	cmpl	$0x64, %ecx
0000000000005aa0	je	0x5acb
0000000000005aa6	movq	-0x10(%rbp), %rax
0000000000005aaa	movzbl	0x1b(%rax), %ecx
0000000000005aae	cmpl	$0x65, %ecx
0000000000005ab1	je	0x5acb
0000000000005ab7	movb	-0x1c(%rbp), %al
0000000000005aba	movq	-0x10(%rbp), %rcx
0000000000005abe	movb	%al, 0x1b(%rcx)
0000000000005ac1	movb	-0x1a(%rbp), %al
0000000000005ac4	movq	-0x10(%rbp), %rcx
0000000000005ac8	movb	%al, 0x22(%rcx)
0000000000005acb	jmp	0x5bbb
0000000000005ad0	jmp	0x5ad5
0000000000005ad5	movb	-0x1c(%rbp), %al
0000000000005ad8	movq	-0x10(%rbp), %rcx
0000000000005adc	movb	%al, 0x1a(%rcx)
0000000000005adf	movb	-0x1a(%rbp), %al
0000000000005ae2	movq	-0x10(%rbp), %rcx
0000000000005ae6	movb	%al, 0x1f(%rcx)
0000000000005ae9	movb	-0x1c(%rbp), %al
0000000000005aec	movq	-0x10(%rbp), %rcx
0000000000005af0	movb	%al, 0x1b(%rcx)
0000000000005af3	movb	-0x1a(%rbp), %al
0000000000005af6	movq	-0x10(%rbp), %rcx
0000000000005afa	movb	%al, 0x22(%rcx)
0000000000005afd	jmp	0x5bbb
0000000000005b02	movb	-0x1a(%rbp), %al
0000000000005b05	movq	-0x10(%rbp), %rcx
0000000000005b09	movb	%al, 0x20(%rcx)
0000000000005b0c	movq	-0x10(%rbp), %rcx
0000000000005b10	cmpb	$0x0, 0x1c(%rcx)
0000000000005b14	jne	0x5b2c
0000000000005b1a	movq	-0x10(%rbp), %rax
0000000000005b1e	movb	$0x66, 0x1c(%rax)
0000000000005b22	movb	-0x1a(%rbp), %cl
0000000000005b25	movq	-0x10(%rbp), %rax
0000000000005b29	movb	%cl, 0x23(%rax)
0000000000005b2c	movq	-0x18(%rbp), %rax
0000000000005b30	movabsq	$0x400000000, %rcx
0000000000005b3a	orq	0x430(%rax), %rcx
0000000000005b41	movq	%rcx, 0x430(%rax)
0000000000005b48	jmp	0x5bbb
0000000000005b4d	movb	-0x1a(%rbp), %al
0000000000005b50	movq	-0x10(%rbp), %rcx
0000000000005b54	movb	%al, 0x21(%rcx)
0000000000005b57	movq	-0x18(%rbp), %rcx
0000000000005b5b	movabsq	$0x800000000, %rdx
0000000000005b65	orq	0x430(%rcx), %rdx
0000000000005b6c	movq	%rdx, 0x430(%rcx)
0000000000005b73	jmp	0x5bbb
0000000000005b78	movq	-0x10(%rbp), %rax
0000000000005b7c	movq	(%rax), %rax
0000000000005b7f	cmpl	$0x0, (%rax)
0000000000005b82	jne	0x5bb2
0000000000005b88	movzbl	-0x1c(%rbp), %eax
0000000000005b8c	andl	$0xf0, %eax
0000000000005b91	cmpl	$0x40, %eax
0000000000005b94	jne	0x5bb2
0000000000005b9a	movb	-0x1c(%rbp), %al
0000000000005b9d	movb	%al, -0x19(%rbp)
0000000000005ba0	movb	-0x1a(%rbp), %al
0000000000005ba3	movq	-0x18(%rbp), %rcx
0000000000005ba7	movb	%al, 0x548(%rcx)
0000000000005bad	jmp	0x5bb6
0000000000005bb2	movb	$0x1, -0x1b(%rbp)
0000000000005bb6	jmp	0x5bbb
0000000000005bbb	cmpb	$0x0, -0x1b(%rbp)
0000000000005bbf	jne	0x5c34
0000000000005bc5	movzbl	-0x19(%rbp), %eax
0000000000005bc9	cmpl	$0x0, %eax
0000000000005bcc	je	0x5bf1
0000000000005bd2	movzbl	-0x19(%rbp), %eax
0000000000005bd6	movzbl	-0x1c(%rbp), %ecx
0000000000005bda	cmpl	%ecx, %eax
0000000000005bdc	je	0x5bf1
0000000000005be2	movb	$0x0, -0x19(%rbp)
0000000000005be6	movq	-0x18(%rbp), %rax
0000000000005bea	movb	$0x0, 0x548(%rax)
0000000000005bf1	movb	-0x1c(%rbp), %al
0000000000005bf4	movq	-0x18(%rbp), %rcx
0000000000005bf8	movq	-0x18(%rbp), %rdx
0000000000005bfc	movb	0x4c8(%rdx), %sil
0000000000005c03	movb	%sil, %dil
0000000000005c06	addb	$0x1, %dil
0000000000005c0a	movb	%dil, 0x4c8(%rdx)
0000000000005c11	movzbl	%sil, %r8d
0000000000005c15	movl	%r8d, %edx
0000000000005c18	movb	%al, 0x4d0(%rcx,%rdx,8)
0000000000005c1f	movq	-0x10(%rbp), %rdi
0000000000005c23	movq	-0x18(%rbp), %rsi
0000000000005c27	callq	_ZydisInputSkip
0000000000005c2c	movb	-0x1a(%rbp), %al
0000000000005c2f	addb	$0x1, %al
0000000000005c31	movb	%al, -0x1a(%rbp)
0000000000005c34	jmp	0x5c39
0000000000005c39	cmpb	$0x0, -0x1b(%rbp)
0000000000005c3d	setne	%al
0000000000005c40	xorb	$-0x1, %al
0000000000005c42	testb	$0x1, %al
0000000000005c44	jne	0x58f7
0000000000005c4a	movq	-0x18(%rbp), %rax
0000000000005c4e	movabsq	$0x400000000, %rcx
0000000000005c58	andq	0x430(%rax), %rcx
0000000000005c5f	cmpq	$0x0, %rcx
0000000000005c63	je	0x5c82
0000000000005c69	movq	-0x18(%rbp), %rax
0000000000005c6d	movq	-0x10(%rbp), %rcx
0000000000005c71	movzbl	0x20(%rcx), %edx
0000000000005c75	movl	%edx, %ecx
0000000000005c77	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000005c82	movq	-0x18(%rbp), %rax
0000000000005c86	movabsq	$0x800000000, %rcx
0000000000005c90	andq	0x430(%rax), %rcx
0000000000005c97	cmpq	$0x0, %rcx
0000000000005c9b	je	0x5cba
0000000000005ca1	movq	-0x18(%rbp), %rax
0000000000005ca5	movq	-0x10(%rbp), %rcx
0000000000005ca9	movzbl	0x21(%rcx), %edx
0000000000005cad	movl	%edx, %ecx
0000000000005caf	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000005cba	cmpb	$0x0, -0x19(%rbp)
0000000000005cbe	je	0x5cf1
0000000000005cc4	movq	-0x18(%rbp), %rax
0000000000005cc8	movq	-0x18(%rbp), %rcx
0000000000005ccc	movzbl	0x548(%rcx), %edx
0000000000005cd3	movl	%edx, %ecx
0000000000005cd5	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000005ce0	movq	-0x10(%rbp), %rdi
0000000000005ce4	movq	-0x18(%rbp), %rsi
0000000000005ce8	movzbl	-0x19(%rbp), %edx
0000000000005cec	callq	_ZydisDecodeREX
0000000000005cf1	movl	$0x100000, -0x4(%rbp)
0000000000005cf8	movl	-0x4(%rbp), %eax
0000000000005cfb	addq	$0x50, %rsp
0000000000005cff	popq	%rbp
0000000000005d00	retq
0000000000005d01	nopw	%cs:(%rax,%rax)
0000000000005d0b	nopl	(%rax,%rax)
_ZydisDecodeInstruction:
0000000000005d10	pushq	%rbp
0000000000005d11	movq	%rsp, %rbp
0000000000005d14	subq	$0x90, %rsp
0000000000005d1b	movq	%rdi, -0x10(%rbp)
0000000000005d1f	movq	%rsi, -0x18(%rbp)
0000000000005d23	cmpq	$0x0, -0x10(%rbp)
0000000000005d28	setne	%al
0000000000005d2b	xorb	$-0x1, %al
0000000000005d2d	andb	$0x1, %al
0000000000005d2f	movzbl	%al, %ecx
0000000000005d32	movslq	%ecx, %rsi
0000000000005d35	cmpq	$0x0, %rsi
0000000000005d39	je	0x5d5e
0000000000005d3f	leaq	0x5b52e(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000005d46	leaq	0x5b459(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000005d4d	leaq	0x5b487(%rip), %rcx ## literal pool for: "context"
0000000000005d54	movl	$0x1201, %edx
0000000000005d59	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000005d5e	jmp	0x5d63
0000000000005d63	cmpq	$0x0, -0x18(%rbp)
0000000000005d68	setne	%al
0000000000005d6b	xorb	$-0x1, %al
0000000000005d6d	andb	$0x1, %al
0000000000005d6f	movzbl	%al, %ecx
0000000000005d72	movslq	%ecx, %rdx
0000000000005d75	cmpq	$0x0, %rdx
0000000000005d79	je	0x5d9e
0000000000005d7f	leaq	0x5b4ee(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000005d86	leaq	0x5b419(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000005d8d	leaq	0x5b44f(%rip), %rcx ## literal pool for: "instruction"
0000000000005d94	movl	$0x1202, %edx
0000000000005d99	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000005d9e	jmp	0x5da3
0000000000005da3	callq	_ZydisDecoderTreeGetRootNode
0000000000005da8	movq	%rax, -0x20(%rbp)
0000000000005dac	movq	$0x0, -0x28(%rbp)
0000000000005db4	movq	-0x20(%rbp), %rax
0000000000005db8	movb	(%rax), %cl
0000000000005dba	movb	%cl, -0x29(%rbp)
0000000000005dbd	movw	$0x0, -0x2c(%rbp)
0000000000005dc3	movl	$0x0, -0x30(%rbp)
0000000000005dca	movzbl	-0x29(%rbp), %edx
0000000000005dce	movl	%edx, %eax
0000000000005dd0	movq	%rax, %rsi
0000000000005dd3	subq	$0x1b, %rsi
0000000000005dd7	movq	%rax, -0x68(%rbp)
0000000000005ddb	movq	%rsi, -0x70(%rbp)
0000000000005ddf	ja	0x61a7
0000000000005de5	leaq	0x90c(%rip), %rax
0000000000005dec	movq	-0x68(%rbp), %rcx
0000000000005df0	movslq	(%rax,%rcx,4), %rdx
0000000000005df4	addq	%rax, %rdx
0000000000005df7	jmpq	*%rdx
0000000000005df9	cmpq	$0x0, -0x28(%rbp)
0000000000005dfe	je	0x5ea5
0000000000005e04	movq	-0x28(%rbp), %rax
0000000000005e08	movq	%rax, -0x20(%rbp)
0000000000005e0c	movq	$0x0, -0x28(%rbp)
0000000000005e14	movb	$0xc, -0x29(%rbp)
0000000000005e18	movq	-0x10(%rbp), %rax
0000000000005e1c	movzbl	0x1c(%rax), %ecx
0000000000005e20	cmpl	$0x0, %ecx
0000000000005e23	je	0x5e42
0000000000005e29	movq	-0x18(%rbp), %rax
0000000000005e2d	movq	-0x10(%rbp), %rcx
0000000000005e31	movzbl	0x23(%rcx), %edx
0000000000005e35	movl	%edx, %ecx
0000000000005e37	movl	$0x0, 0x4cc(%rax,%rcx,8)
0000000000005e42	movq	-0x10(%rbp), %rax
0000000000005e46	movzbl	0x1c(%rax), %ecx
0000000000005e4a	cmpl	$0x66, %ecx
0000000000005e4d	jne	0x5ea0
0000000000005e53	movq	-0x10(%rbp), %rax
0000000000005e57	movzbl	0x20(%rax), %ecx
0000000000005e5b	movq	-0x10(%rbp), %rax
0000000000005e5f	movzbl	0x23(%rax), %edx
0000000000005e63	cmpl	%edx, %ecx
0000000000005e65	jne	0x5e84
0000000000005e6b	movq	-0x18(%rbp), %rax
0000000000005e6f	movq	-0x10(%rbp), %rcx
0000000000005e73	movzbl	0x23(%rcx), %edx
0000000000005e77	movl	%edx, %ecx
0000000000005e79	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000005e84	movq	-0x18(%rbp), %rax
0000000000005e88	movabsq	$0x400000000, %rcx
0000000000005e92	orq	0x430(%rax), %rcx
0000000000005e99	movq	%rcx, 0x430(%rax)
0000000000005ea0	jmp	0x66a5
0000000000005ea5	movl	$0x80200001, -0x4(%rbp)
0000000000005eac	jmp	0x66e9
0000000000005eb1	movq	-0x18(%rbp), %rdi
0000000000005eb5	leaq	-0x2c(%rbp), %rsi
0000000000005eb9	callq	_ZydisNodeHandlerXOP
0000000000005ebe	movl	%eax, -0x30(%rbp)
0000000000005ec1	jmp	0x6668
0000000000005ec6	movq	-0x18(%rbp), %rdi
0000000000005eca	leaq	-0x2c(%rbp), %rsi
0000000000005ece	callq	_ZydisNodeHandlerVEX
0000000000005ed3	movl	%eax, -0x30(%rbp)
0000000000005ed6	jmp	0x6668
0000000000005edb	movq	-0x18(%rbp), %rdi
0000000000005edf	leaq	-0x2c(%rbp), %rsi
0000000000005ee3	callq	_ZydisNodeHandlerEMVEX
0000000000005ee8	movl	%eax, -0x30(%rbp)
0000000000005eeb	jmp	0x6668
0000000000005ef0	movq	-0x10(%rbp), %rdi
0000000000005ef4	movq	-0x18(%rbp), %rsi
0000000000005ef8	leaq	-0x2c(%rbp), %rdx
0000000000005efc	callq	_ZydisNodeHandlerOpcode
0000000000005f01	movl	%eax, -0x30(%rbp)
0000000000005f04	jmp	0x6668
0000000000005f09	movq	-0x10(%rbp), %rdi
0000000000005f0d	leaq	-0x2c(%rbp), %rsi
0000000000005f11	callq	_ZydisNodeHandlerMode
0000000000005f16	movl	%eax, -0x30(%rbp)
0000000000005f19	jmp	0x6668
0000000000005f1e	movq	-0x10(%rbp), %rdi
0000000000005f22	leaq	-0x2c(%rbp), %rsi
0000000000005f26	callq	_ZydisNodeHandlerModeCompact
0000000000005f2b	movl	%eax, -0x30(%rbp)
0000000000005f2e	jmp	0x6668
0000000000005f33	movq	-0x10(%rbp), %rdi
0000000000005f37	movq	-0x18(%rbp), %rsi
0000000000005f3b	leaq	-0x2c(%rbp), %rdx
0000000000005f3f	callq	_ZydisNodeHandlerModrmMod
0000000000005f44	movl	%eax, -0x30(%rbp)
0000000000005f47	jmp	0x6668
0000000000005f4c	movq	-0x10(%rbp), %rdi
0000000000005f50	movq	-0x18(%rbp), %rsi
0000000000005f54	leaq	-0x2c(%rbp), %rdx
0000000000005f58	callq	_ZydisNodeHandlerModrmModCompact
0000000000005f5d	movl	%eax, -0x30(%rbp)
0000000000005f60	jmp	0x6668
0000000000005f65	movq	-0x10(%rbp), %rdi
0000000000005f69	movq	-0x18(%rbp), %rsi
0000000000005f6d	leaq	-0x2c(%rbp), %rdx
0000000000005f71	callq	_ZydisNodeHandlerModrmReg
0000000000005f76	movl	%eax, -0x30(%rbp)
0000000000005f79	jmp	0x6668
0000000000005f7e	movq	-0x10(%rbp), %rdi
0000000000005f82	movq	-0x18(%rbp), %rsi
0000000000005f86	leaq	-0x2c(%rbp), %rdx
0000000000005f8a	callq	_ZydisNodeHandlerModrmRm
0000000000005f8f	movl	%eax, -0x30(%rbp)
0000000000005f92	jmp	0x6668
0000000000005f97	xorl	%eax, %eax
0000000000005f99	movq	-0x10(%rbp), %rcx
0000000000005f9d	movzbl	0x19(%rcx), %edx
0000000000005fa1	cmpl	$0x0, %edx
0000000000005fa4	movl	$0x1, %edx
0000000000005fa9	cmovnel	%edx, %eax
0000000000005fac	movw	%ax, %si
0000000000005faf	movw	%si, -0x2c(%rbp)
0000000000005fb3	jmp	0x6668
0000000000005fb8	movq	-0x10(%rbp), %rdi
0000000000005fbc	movq	-0x18(%rbp), %rsi
0000000000005fc0	leaq	-0x2c(%rbp), %rdx
0000000000005fc4	callq	_ZydisNodeHandlerMandatoryPrefix
0000000000005fc9	xorl	%esi, %esi
0000000000005fcb	movl	%eax, -0x30(%rbp)
0000000000005fce	movq	-0x20(%rbp), %rdi
0000000000005fd2	callq	_ZydisDecoderTreeGetChildNode
0000000000005fd7	movq	%rax, -0x28(%rbp)
0000000000005fdb	jmp	0x6668
0000000000005fe0	movq	-0x10(%rbp), %rdi
0000000000005fe4	movq	-0x18(%rbp), %rsi
0000000000005fe8	leaq	-0x2c(%rbp), %rdx
0000000000005fec	callq	_ZydisNodeHandlerOperandSize
0000000000005ff1	movl	%eax, -0x30(%rbp)
0000000000005ff4	jmp	0x6668
0000000000005ff9	movq	-0x10(%rbp), %rdi
0000000000005ffd	movq	-0x18(%rbp), %rsi
0000000000006001	leaq	-0x2c(%rbp), %rdx
0000000000006005	callq	_ZydisNodeHandlerAddressSize
000000000000600a	movl	%eax, -0x30(%rbp)
000000000000600d	jmp	0x6668
0000000000006012	movq	-0x10(%rbp), %rdi
0000000000006016	movq	-0x18(%rbp), %rsi
000000000000601a	leaq	-0x2c(%rbp), %rdx
000000000000601e	callq	_ZydisNodeHandlerVectorLength
0000000000006023	movl	%eax, -0x30(%rbp)
0000000000006026	jmp	0x6668
000000000000602b	movq	-0x10(%rbp), %rdi
000000000000602f	movq	-0x18(%rbp), %rsi
0000000000006033	leaq	-0x2c(%rbp), %rdx
0000000000006037	callq	_ZydisNodeHandlerRexW
000000000000603c	movl	%eax, -0x30(%rbp)
000000000000603f	jmp	0x6668
0000000000006044	movq	-0x10(%rbp), %rdi
0000000000006048	movq	-0x18(%rbp), %rsi
000000000000604c	leaq	-0x2c(%rbp), %rdx
0000000000006050	callq	_ZydisNodeHandlerRexB
0000000000006055	movl	%eax, -0x30(%rbp)
0000000000006058	jmp	0x6668
000000000000605d	movq	-0x18(%rbp), %rdi
0000000000006061	leaq	-0x2c(%rbp), %rsi
0000000000006065	callq	_ZydisNodeHandlerEvexB
000000000000606a	movl	%eax, -0x30(%rbp)
000000000000606d	jmp	0x6668
0000000000006072	movq	-0x18(%rbp), %rdi
0000000000006076	leaq	-0x2c(%rbp), %rsi
000000000000607a	callq	_ZydisNodeHandlerMvexE
000000000000607f	movl	%eax, -0x30(%rbp)
0000000000006082	jmp	0x6668
0000000000006087	xorl	%eax, %eax
0000000000006089	movq	-0x10(%rbp), %rcx
000000000000608d	movq	(%rcx), %rcx
0000000000006090	movzbl	0x9(%rcx), %edx
0000000000006094	cmpl	$0x0, %edx
0000000000006097	movl	$0x1, %edx
000000000000609c	cmovnel	%edx, %eax
000000000000609f	movw	%ax, %si
00000000000060a2	movw	%si, -0x2c(%rbp)
00000000000060a6	jmp	0x6668
00000000000060ab	xorl	%eax, %eax
00000000000060ad	movq	-0x10(%rbp), %rcx
00000000000060b1	movq	(%rcx), %rcx
00000000000060b4	movzbl	0xa(%rcx), %edx
00000000000060b8	cmpl	$0x0, %edx
00000000000060bb	movl	$0x1, %edx
00000000000060c0	cmovnel	%edx, %eax
00000000000060c3	movw	%ax, %si
00000000000060c6	movw	%si, -0x2c(%rbp)
00000000000060ca	jmp	0x6668
00000000000060cf	xorl	%eax, %eax
00000000000060d1	movq	-0x10(%rbp), %rcx
00000000000060d5	movq	(%rcx), %rcx
00000000000060d8	movzbl	0xb(%rcx), %edx
00000000000060dc	cmpl	$0x0, %edx
00000000000060df	movl	$0x1, %edx
00000000000060e4	cmovnel	%edx, %eax
00000000000060e7	movw	%ax, %si
00000000000060ea	movw	%si, -0x2c(%rbp)
00000000000060ee	jmp	0x6668
00000000000060f3	xorl	%eax, %eax
00000000000060f5	movq	-0x10(%rbp), %rcx
00000000000060f9	movq	(%rcx), %rcx
00000000000060fc	movzbl	0xc(%rcx), %edx
0000000000006100	cmpl	$0x0, %edx
0000000000006103	movl	$0x1, %edx
0000000000006108	cmovnel	%edx, %eax
000000000000610b	movw	%ax, %si
000000000000610e	movw	%si, -0x2c(%rbp)
0000000000006112	jmp	0x6668
0000000000006117	xorl	%eax, %eax
0000000000006119	movq	-0x10(%rbp), %rcx
000000000000611d	movq	(%rcx), %rcx
0000000000006120	movzbl	0xd(%rcx), %edx
0000000000006124	cmpl	$0x0, %edx
0000000000006127	movl	$0x1, %edx
000000000000612c	cmovnel	%edx, %eax
000000000000612f	movw	%ax, %si
0000000000006132	movw	%si, -0x2c(%rbp)
0000000000006136	jmp	0x6668
000000000000613b	xorl	%eax, %eax
000000000000613d	movq	-0x10(%rbp), %rcx
0000000000006141	movq	(%rcx), %rcx
0000000000006144	movzbl	0xe(%rcx), %edx
0000000000006148	cmpl	$0x0, %edx
000000000000614b	movl	$0x1, %edx
0000000000006150	cmovnel	%edx, %eax
0000000000006153	movw	%ax, %si
0000000000006156	movw	%si, -0x2c(%rbp)
000000000000615a	jmp	0x6668
000000000000615f	xorl	%eax, %eax
0000000000006161	movq	-0x10(%rbp), %rcx
0000000000006165	movq	(%rcx), %rcx
0000000000006168	movzbl	0xf(%rcx), %edx
000000000000616c	cmpl	$0x0, %edx
000000000000616f	movl	$0x1, %edx
0000000000006174	cmovnel	%edx, %eax
0000000000006177	movw	%ax, %si
000000000000617a	movw	%si, -0x2c(%rbp)
000000000000617e	jmp	0x6668
0000000000006183	xorl	%eax, %eax
0000000000006185	movq	-0x10(%rbp), %rcx
0000000000006189	movq	(%rcx), %rcx
000000000000618c	movzbl	0x10(%rcx), %edx
0000000000006190	cmpl	$0x0, %edx
0000000000006193	movl	$0x1, %edx
0000000000006198	cmovnel	%edx, %eax
000000000000619b	movw	%ax, %si
000000000000619e	movw	%si, -0x2c(%rbp)
00000000000061a2	jmp	0x6668
00000000000061a7	movzbl	-0x29(%rbp), %eax
00000000000061ab	andl	$0x80, %eax
00000000000061b0	cmpl	$0x0, %eax
00000000000061b3	je	0x6649
00000000000061b9	movq	-0x18(%rbp), %rax
00000000000061bd	movl	0xc(%rax), %edi
00000000000061c0	movq	-0x20(%rbp), %rax
00000000000061c4	movzwl	0x1(%rax), %esi
00000000000061c8	leaq	-0x38(%rbp), %rdx
00000000000061cc	callq	_ZydisGetInstructionDefinition
00000000000061d1	movq	-0x10(%rbp), %rdi
00000000000061d5	movq	-0x18(%rbp), %rsi
00000000000061d9	movq	-0x38(%rbp), %rdx
00000000000061dd	callq	_ZydisSetEffectiveOperandWidth
00000000000061e2	movq	-0x10(%rbp), %rdi
00000000000061e6	movq	-0x18(%rbp), %rsi
00000000000061ea	movq	-0x38(%rbp), %rdx
00000000000061ee	callq	_ZydisSetEffectiveAddressWidth
00000000000061f3	movq	-0x20(%rbp), %rdi
00000000000061f7	leaq	-0x40(%rbp), %rsi
00000000000061fb	callq	_ZydisGetInstructionEncodingInfo
0000000000006200	movq	-0x10(%rbp), %rdi
0000000000006204	movq	-0x18(%rbp), %rsi
0000000000006208	movq	-0x40(%rbp), %rdx
000000000000620c	callq	_ZydisDecodeOptionalInstructionParts
0000000000006211	movl	%eax, -0x44(%rbp)
0000000000006214	movl	-0x44(%rbp), %eax
0000000000006217	andl	$0x80000000, %eax
000000000000621c	cmpl	$0x0, %eax
000000000000621f	je	0x6230
0000000000006225	movl	-0x44(%rbp), %eax
0000000000006228	movl	%eax, -0x4(%rbp)
000000000000622b	jmp	0x66e9
0000000000006230	jmp	0x6235
0000000000006235	jmp	0x623a
000000000000623a	movq	-0x10(%rbp), %rdi
000000000000623e	movq	-0x18(%rbp), %rsi
0000000000006242	movq	-0x38(%rbp), %rdx
0000000000006246	callq	_ZydisCheckErrorConditions
000000000000624b	movl	%eax, -0x48(%rbp)
000000000000624e	movl	-0x48(%rbp), %eax
0000000000006251	andl	$0x80000000, %eax
0000000000006256	cmpl	$0x0, %eax
0000000000006259	je	0x626a
000000000000625f	movl	-0x48(%rbp), %eax
0000000000006262	movl	%eax, -0x4(%rbp)
0000000000006265	jmp	0x66e9
000000000000626a	jmp	0x626f
000000000000626f	movq	-0x18(%rbp), %rax
0000000000006273	cmpl	$0x1, 0xc(%rax)
0000000000006277	jne	0x63fd
000000000000627d	jmp	0x6282
0000000000006282	movq	-0x10(%rbp), %rdi
0000000000006286	movq	-0x18(%rbp), %rsi
000000000000628a	movq	-0x18(%rbp), %rax
000000000000628e	addq	$0x14, %rax
0000000000006292	movq	%rax, %rdx
0000000000006295	callq	_ZydisInputNext
000000000000629a	movl	%eax, -0x4c(%rbp)
000000000000629d	movl	-0x4c(%rbp), %eax
00000000000062a0	andl	$0x80000000, %eax
00000000000062a5	cmpl	$0x0, %eax
00000000000062a8	je	0x62b9
00000000000062ae	movl	-0x4c(%rbp), %eax
00000000000062b1	movl	%eax, -0x4(%rbp)
00000000000062b4	jmp	0x66e9
00000000000062b9	jmp	0x62be
00000000000062be	callq	_ZydisDecoderTreeGetRootNode
00000000000062c3	movq	%rax, -0x20(%rbp)
00000000000062c7	movq	-0x20(%rbp), %rdi
00000000000062cb	movl	$0xf, %esi
00000000000062d0	callq	_ZydisDecoderTreeGetChildNode
00000000000062d5	movq	%rax, -0x20(%rbp)
00000000000062d9	movq	-0x20(%rbp), %rdi
00000000000062dd	movl	$0xf, %esi
00000000000062e2	callq	_ZydisDecoderTreeGetChildNode
00000000000062e7	movq	%rax, -0x20(%rbp)
00000000000062eb	movq	-0x20(%rbp), %rdi
00000000000062ef	movq	-0x18(%rbp), %rax
00000000000062f3	movzbl	0x14(%rax), %esi
00000000000062f7	movw	%si, %cx
00000000000062fa	movzwl	%cx, %esi
00000000000062fd	callq	_ZydisDecoderTreeGetChildNode
0000000000006302	movq	%rax, -0x20(%rbp)
0000000000006306	movq	-0x20(%rbp), %rax
000000000000630a	movzbl	(%rax), %esi
000000000000630d	cmpl	$0x0, %esi
0000000000006310	jne	0x6322
0000000000006316	movl	$0x80200001, -0x4(%rbp)
000000000000631d	jmp	0x66e9
0000000000006322	movq	-0x20(%rbp), %rax
0000000000006326	movzbl	(%rax), %ecx
0000000000006329	cmpl	$0x8, %ecx
000000000000632c	sete	%dl
000000000000632f	xorb	$-0x1, %dl
0000000000006332	andb	$0x1, %dl
0000000000006335	movzbl	%dl, %ecx
0000000000006338	movslq	%ecx, %rax
000000000000633b	cmpq	$0x0, %rax
000000000000633f	je	0x6364
0000000000006345	leaq	0x5af28(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
000000000000634c	leaq	0x5ae53(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006353	leaq	0x5af31(%rip), %rcx ## literal pool for: "node->type == ZYDIS_NODETYPE_FILTER_MODRM_MOD_COMPACT"
000000000000635a	movl	$0x1299, %edx
000000000000635f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006364	jmp	0x6369
0000000000006369	xorl	%eax, %eax
000000000000636b	movq	-0x20(%rbp), %rdi
000000000000636f	movq	-0x18(%rbp), %rcx
0000000000006373	movzbl	0x578(%rcx), %edx
000000000000637a	cmpl	$0x3, %edx
000000000000637d	movl	$0x1, %edx
0000000000006382	cmovel	%eax, %edx
0000000000006385	movw	%dx, %si
0000000000006388	movzwl	%si, %esi
000000000000638b	callq	_ZydisDecoderTreeGetChildNode
0000000000006390	movq	%rax, -0x20(%rbp)
0000000000006394	movq	-0x20(%rbp), %rax
0000000000006398	movzbl	(%rax), %edx
000000000000639b	andl	$0x80, %edx
00000000000063a1	cmpl	$0x0, %edx
00000000000063a4	setne	%r8b
00000000000063a8	xorb	$-0x1, %r8b
00000000000063ac	andb	$0x1, %r8b
00000000000063b0	movzbl	%r8b, %edx
00000000000063b4	movslq	%edx, %rax
00000000000063b7	cmpq	$0x0, %rax
00000000000063bb	je	0x63e0
00000000000063c1	leaq	0x5aeac(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
00000000000063c8	leaq	0x5add7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000063cf	leaq	0x5aeeb(%rip), %rcx ## literal pool for: "node->type & ZYDIS_NODETYPE_DEFINITION_MASK"
00000000000063d6	movl	$0x129c, %edx
00000000000063db	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000063e0	jmp	0x63e5
00000000000063e5	movq	-0x18(%rbp), %rax
00000000000063e9	movl	0xc(%rax), %edi
00000000000063ec	movq	-0x20(%rbp), %rax
00000000000063f0	movzwl	0x1(%rax), %esi
00000000000063f4	leaq	-0x38(%rbp), %rdx
00000000000063f8	callq	_ZydisGetInstructionDefinition
00000000000063fd	movq	-0x38(%rbp), %rax
0000000000006401	movl	(%rax), %ecx
0000000000006403	andl	$0x7ff, %ecx
0000000000006409	movq	-0x18(%rbp), %rax
000000000000640d	movl	%ecx, 0x4(%rax)
0000000000006410	movq	-0x38(%rbp), %rax
0000000000006414	movq	(%rax), %rax
0000000000006417	shrq	$0x2b, %rax
000000000000641b	movl	%eax, %ecx
000000000000641d	andl	$0x7f, %ecx
0000000000006420	movq	-0x18(%rbp), %rax
0000000000006424	movl	%ecx, 0x4b0(%rax)
000000000000642a	movq	-0x38(%rbp), %rax
000000000000642e	movq	(%rax), %rax
0000000000006431	shrq	$0x32, %rax
0000000000006435	movl	%eax, %ecx
0000000000006437	movb	%cl, %dl
0000000000006439	movzbl	%dl, %ecx
000000000000643c	movq	-0x18(%rbp), %rax
0000000000006440	movl	%ecx, 0x4b4(%rax)
0000000000006446	movq	-0x38(%rbp), %rax
000000000000644a	movq	(%rax), %rsi
000000000000644d	movzwl	0x8(%rax), %ecx
0000000000006451	shll	$0x6, %ecx
0000000000006454	shrq	$0x3a, %rsi
0000000000006458	movl	%esi, %edi
000000000000645a	orl	%ecx, %edi
000000000000645c	andl	$0x7f, %edi
000000000000645f	movq	-0x18(%rbp), %rax
0000000000006463	movl	%edi, 0x4b8(%rax)
0000000000006469	movq	-0x38(%rbp), %rax
000000000000646d	movb	0x8(%rax), %dl
0000000000006470	shrb	%dl
0000000000006472	andb	$0x3, %dl
0000000000006475	movzbl	%dl, %ecx
0000000000006478	movq	-0x18(%rbp), %rax
000000000000647c	movl	%ecx, 0x4bc(%rax)
0000000000006482	movq	-0x18(%rbp), %rax
0000000000006486	cmpl	$0x0, 0x4bc(%rax)
000000000000648d	movb	$0x1, %dl
000000000000648f	movb	%dl, -0x71(%rbp)
0000000000006492	je	0x64f1
0000000000006498	movq	-0x18(%rbp), %rax
000000000000649c	cmpl	$0x14, 0x4b0(%rax)
00000000000064a3	movb	$0x1, %cl
00000000000064a5	movb	%cl, -0x72(%rbp)
00000000000064a8	je	0x64eb
00000000000064ae	movq	-0x18(%rbp), %rax
00000000000064b2	cmpl	$0x1c, 0x4b0(%rax)
00000000000064b9	movb	$0x1, %cl
00000000000064bb	movb	%cl, -0x72(%rbp)
00000000000064be	je	0x64eb
00000000000064c4	movq	-0x18(%rbp), %rax
00000000000064c8	cmpl	$0x5a, 0x4b0(%rax)
00000000000064cf	movb	$0x1, %cl
00000000000064d1	movb	%cl, -0x72(%rbp)
00000000000064d4	je	0x64eb
00000000000064da	movq	-0x18(%rbp), %rax
00000000000064de	cmpl	$0x46, 0x4b0(%rax)
00000000000064e5	sete	%cl
00000000000064e8	movb	%cl, -0x72(%rbp)
00000000000064eb	movb	-0x72(%rbp), %al
00000000000064ee	movb	%al, -0x71(%rbp)
00000000000064f1	movb	-0x71(%rbp), %al
00000000000064f4	xorb	$-0x1, %al
00000000000064f6	andb	$0x1, %al
00000000000064f8	movzbl	%al, %ecx
00000000000064fb	movslq	%ecx, %rdx
00000000000064fe	cmpq	$0x0, %rdx
0000000000006502	je	0x6527
0000000000006508	leaq	0x5ad65(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
000000000000650f	leaq	0x5ac90(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006516	leaq	0x5add0(%rip), %rcx ## literal pool for: "(instruction->meta.branch_type == ZYDIS_BRANCH_TYPE_NONE) || ((instruction->meta.category == ZYDIS_CATEGORY_CALL) || (instruction->meta.category == ZYDIS_CATEGORY_COND_BR) || (instruction->meta.category == ZYDIS_CATEGORY_UNCOND_BR) || (instruction->meta.category == ZYDIS_CATEGORY_RET))"
000000000000651d	movl	$0x12aa, %edx
0000000000006522	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006527	jmp	0x652c
000000000000652c	movq	-0x38(%rbp), %rax
0000000000006530	movzwl	0x8(%rax), %ecx
0000000000006534	movl	%ecx, %eax
0000000000006536	shrq	$0x3, %rax
000000000000653a	movb	%al, %dl
000000000000653c	andb	$0x3f, %dl
000000000000653f	movzbl	%dl, %ecx
0000000000006542	movq	-0x18(%rbp), %rax
0000000000006546	movl	%ecx, 0x4c0(%rax)
000000000000654c	movq	-0x10(%rbp), %rax
0000000000006550	movq	(%rax), %rax
0000000000006553	cmpb	$0x0, 0x8(%rax)
0000000000006557	jne	0x663d
000000000000655d	movq	-0x10(%rbp), %rdi
0000000000006561	movq	-0x18(%rbp), %rsi
0000000000006565	movq	-0x38(%rbp), %rdx
0000000000006569	callq	_ZydisSetAttributes
000000000000656e	movq	-0x18(%rbp), %rdx
0000000000006572	movl	0xc(%rdx), %eax
0000000000006575	addl	$-0x2, %eax
0000000000006578	subl	$0x3, %eax
000000000000657b	movl	%eax, -0x78(%rbp)
000000000000657e	ja	0x659f
0000000000006584	jmp	0x6589
0000000000006589	movq	-0x10(%rbp), %rdi
000000000000658d	movq	-0x18(%rbp), %rsi
0000000000006591	movq	-0x38(%rbp), %rdx
0000000000006595	callq	_ZydisSetAVXInformation
000000000000659a	jmp	0x65a4
000000000000659f	jmp	0x65a4
00000000000065a4	jmp	0x65a9
00000000000065a9	movq	-0x10(%rbp), %rdi
00000000000065ad	movq	-0x18(%rbp), %rsi
00000000000065b1	movq	-0x38(%rbp), %rdx
00000000000065b5	callq	_ZydisDecodeOperands
00000000000065ba	movl	%eax, -0x50(%rbp)
00000000000065bd	movl	-0x50(%rbp), %eax
00000000000065c0	andl	$0x80000000, %eax
00000000000065c5	cmpl	$0x0, %eax
00000000000065c8	je	0x65d9
00000000000065ce	movl	-0x50(%rbp), %eax
00000000000065d1	movl	%eax, -0x4(%rbp)
00000000000065d4	jmp	0x66e9
00000000000065d9	jmp	0x65de
00000000000065de	movq	-0x38(%rbp), %rdi
00000000000065e2	leaq	-0x58(%rbp), %rsi
00000000000065e6	callq	_ZydisGetAccessedFlags
00000000000065eb	cmpb	$0x0, %al
00000000000065ed	je	0x6638
00000000000065f3	movq	$-0x1, %rcx
00000000000065fa	movq	-0x18(%rbp), %rax
00000000000065fe	movabsq	$0x1000000000, %rdx
0000000000006608	orq	0x430(%rax), %rdx
000000000000660f	movq	%rdx, 0x430(%rax)
0000000000006616	movq	-0x18(%rbp), %rax
000000000000661a	addq	$0x438, %rax
0000000000006620	movq	-0x58(%rbp), %rdx
0000000000006624	movq	%rax, %rdi
0000000000006627	movq	%rdx, %rsi
000000000000662a	movl	$0x54, %edx
000000000000662f	callq	0x1f64a ## symbol stub for: ___memcpy_chk
0000000000006634	movq	%rax, -0x80(%rbp)
0000000000006638	jmp	0x663d
000000000000663d	movl	$0x100000, -0x4(%rbp)
0000000000006644	jmp	0x66e9
0000000000006649	leaq	0x5ac24(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000006650	leaq	0x5ab4f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006657	leaq	0x5adae(%rip), %rcx ## literal pool for: "0"
000000000000665e	movl	$0x12cc, %edx
0000000000006663	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006668	jmp	0x666d
000000000000666d	movl	-0x30(%rbp), %eax
0000000000006670	movl	%eax, -0x5c(%rbp)
0000000000006673	movl	-0x5c(%rbp), %eax
0000000000006676	andl	$0x80000000, %eax
000000000000667b	cmpl	$0x0, %eax
000000000000667e	je	0x668f
0000000000006684	movl	-0x5c(%rbp), %eax
0000000000006687	movl	%eax, -0x4(%rbp)
000000000000668a	jmp	0x66e9
000000000000668f	jmp	0x6694
0000000000006694	movq	-0x20(%rbp), %rdi
0000000000006698	movzwl	-0x2c(%rbp), %esi
000000000000669c	callq	_ZydisDecoderTreeGetChildNode
00000000000066a1	movq	%rax, -0x20(%rbp)
00000000000066a5	xorl	%eax, %eax
00000000000066a7	movb	%al, %cl
00000000000066a9	movzbl	-0x29(%rbp), %eax
00000000000066ad	cmpl	$0x0, %eax
00000000000066b0	movb	%cl, -0x81(%rbp)
00000000000066b6	je	0x66d4
00000000000066bc	movzbl	-0x29(%rbp), %eax
00000000000066c0	andl	$0x80, %eax
00000000000066c5	cmpl	$0x0, %eax
00000000000066c8	setne	%cl
00000000000066cb	xorb	$-0x1, %cl
00000000000066ce	movb	%cl, -0x81(%rbp)
00000000000066d4	movb	-0x81(%rbp), %al
00000000000066da	testb	$0x1, %al
00000000000066dc	jne	0x5db4
00000000000066e2	movl	$0x100000, -0x4(%rbp)
00000000000066e9	movl	-0x4(%rbp), %eax
00000000000066ec	addq	$0x90, %rsp
00000000000066f3	popq	%rbp
00000000000066f4	retq
00000000000066f5	nopl	(%rax)
00000000000066f8	addl	%esi, %edi
00000000000066fa	.byte 0xff #bad opcode
00000000000066fb	.byte 0xff #bad opcode
00000000000066fc	movl	$0xcefffff7, %ecx
0000000000006701	idivl	%edi
0000000000006703	jmpq	*%rbx
0000000000006705	idivl	%edi
0000000000006707	.byte 0xff #bad opcode
0000000000006708	clc
0000000000006709	idivl	%edi
000000000000670b	callq	*(%rcx)
000000000000670d	clc
000000000000670e	.byte 0xff #bad opcode
000000000000670f	jmpq	*(%rsi)
0000000000006711	clc
0000000000006712	.byte 0xff #bad opcode
0000000000006713	.byte 0xff #bad opcode
0000000000006714	cmpl	%eax, %edi
0000000000006716	.byte 0xff #bad opcode
0000000000006717	callq	*-0x1(%rax,%rdi,8)
000000000000671b	ljmpl	*-0x8(%rbp)
000000000000671e	.byte 0xff #bad opcode
000000000000671f	incl	-0x60000008(%rsi)
0000000000006725	clc
0000000000006726	.byte 0xff #bad opcode
0000000000006727	incl	%eax
0000000000006729	clc
000000000000672a	.byte 0xff #bad opcode
000000000000672b	.byte 0xff #bad opcode
000000000000672c	callq	0x2006729
0000000000006731	stc
0000000000006732	.byte 0xff #bad opcode
0000000000006733	lcalll	*(%rdx)
0000000000006735	stc
0000000000006736	.byte 0xff #bad opcode
0000000000006737	pushq	(%rbx)
0000000000006739	stc
000000000000673a	.byte 0xff #bad opcode
000000000000673b	decl	-0x1(%rcx,%rdi,8)
000000000000673f	jmpq	*-0x7(%rbp)
0000000000006742	.byte 0xff #bad opcode
0000000000006743	.byte 0xff #bad opcode
0000000000006744	jp	0x673f
0000000000006746	.byte 0xff #bad opcode
0000000000006747	decl	-0x4c000007(%rdi)
000000000000674d	stc
000000000000674e	.byte 0xff #bad opcode
000000000000674f	callq	*%rdi
0000000000006751	stc
0000000000006752	.byte 0xff #bad opcode
0000000000006753	.byte 0xff #bad opcode
0000000000006754	sti
0000000000006755	stc
0000000000006756	.byte 0xff #bad opcode
0000000000006757	lcalll	*(%rdi)
0000000000006759	cli
000000000000675a	.byte 0xff #bad opcode
000000000000675b	incl	-0x6(%rbx)
000000000000675e	.byte 0xff #bad opcode
000000000000675f	jmpq	*-0x6(%rdi)
0000000000006762	.byte 0xff #bad opcode
0000000000006763	decl	0xffffffa(%rbx)
0000000000006769	.byte 0x1f #bad opcode
000000000000676a	testb	%al, (%rax)
000000000000676c	addb	%al, (%rax)
000000000000676e	addb	%al, (%rax)
_ZydisInputPeek:
0000000000006770	pushq	%rbp
0000000000006771	movq	%rsp, %rbp
0000000000006774	subq	$0x20, %rsp
0000000000006778	movq	%rdi, -0x10(%rbp)
000000000000677c	movq	%rsi, -0x18(%rbp)
0000000000006780	movq	%rdx, -0x20(%rbp)
0000000000006784	cmpq	$0x0, -0x10(%rbp)
0000000000006789	setne	%al
000000000000678c	xorb	$-0x1, %al
000000000000678e	andb	$0x1, %al
0000000000006790	movzbl	%al, %ecx
0000000000006793	movslq	%ecx, %rdx
0000000000006796	cmpq	$0x0, %rdx
000000000000679a	je	0x67bf
00000000000067a0	leaq	0x5aa6b(%rip), %rdi ## literal pool for: "ZydisInputPeek"
00000000000067a7	leaq	0x5a9f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000067ae	leaq	0x5aa26(%rip), %rcx ## literal pool for: "context"
00000000000067b5	movl	$0x127, %edx
00000000000067ba	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000067bf	jmp	0x67c4
00000000000067c4	cmpq	$0x0, -0x18(%rbp)
00000000000067c9	setne	%al
00000000000067cc	xorb	$-0x1, %al
00000000000067ce	andb	$0x1, %al
00000000000067d0	movzbl	%al, %ecx
00000000000067d3	movslq	%ecx, %rdx
00000000000067d6	cmpq	$0x0, %rdx
00000000000067da	je	0x67ff
00000000000067e0	leaq	0x5aa2b(%rip), %rdi ## literal pool for: "ZydisInputPeek"
00000000000067e7	leaq	0x5a9b8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000067ee	leaq	0x5a9ee(%rip), %rcx ## literal pool for: "instruction"
00000000000067f5	movl	$0x128, %edx
00000000000067fa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000067ff	jmp	0x6804
0000000000006804	cmpq	$0x0, -0x20(%rbp)
0000000000006809	setne	%al
000000000000680c	xorb	$-0x1, %al
000000000000680e	andb	$0x1, %al
0000000000006810	movzbl	%al, %ecx
0000000000006813	movslq	%ecx, %rdx
0000000000006816	cmpq	$0x0, %rdx
000000000000681a	je	0x683f
0000000000006820	leaq	0x5a9eb(%rip), %rdi ## literal pool for: "ZydisInputPeek"
0000000000006827	leaq	0x5a978(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000682e	leaq	0x5a9ec(%rip), %rcx ## literal pool for: "value"
0000000000006835	movl	$0x129, %edx
000000000000683a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000683f	jmp	0x6844
0000000000006844	movq	-0x18(%rbp), %rax
0000000000006848	movzbl	0x8(%rax), %ecx
000000000000684c	cmpl	$0xf, %ecx
000000000000684f	jl	0x6861
0000000000006855	movl	$0x80200002, -0x4(%rbp)
000000000000685c	jmp	0x6893
0000000000006861	movq	-0x10(%rbp), %rax
0000000000006865	cmpq	$0x0, 0x10(%rax)
000000000000686a	jbe	0x688c
0000000000006870	movq	-0x10(%rbp), %rax
0000000000006874	movq	0x8(%rax), %rax
0000000000006878	movb	(%rax), %cl
000000000000687a	movq	-0x20(%rbp), %rax
000000000000687e	movb	%cl, (%rax)
0000000000006880	movl	$0x100000, -0x4(%rbp)
0000000000006887	jmp	0x6893
000000000000688c	movl	$0x80200000, -0x4(%rbp)
0000000000006893	movl	-0x4(%rbp), %eax
0000000000006896	addq	$0x20, %rsp
000000000000689a	popq	%rbp
000000000000689b	retq
000000000000689c	nopl	(%rax)
_ZydisInputSkip:
00000000000068a0	pushq	%rbp
00000000000068a1	movq	%rsp, %rbp
00000000000068a4	subq	$0x10, %rsp
00000000000068a8	movq	%rdi, -0x8(%rbp)
00000000000068ac	movq	%rsi, -0x10(%rbp)
00000000000068b0	cmpq	$0x0, -0x8(%rbp)
00000000000068b5	setne	%al
00000000000068b8	xorb	$-0x1, %al
00000000000068ba	andb	$0x1, %al
00000000000068bc	movzbl	%al, %ecx
00000000000068bf	movslq	%ecx, %rsi
00000000000068c2	cmpq	$0x0, %rsi
00000000000068c6	je	0x68eb
00000000000068cc	leaq	0x5a954(%rip), %rdi ## literal pool for: "ZydisInputSkip"
00000000000068d3	leaq	0x5a8cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000068da	leaq	0x5a8fa(%rip), %rcx ## literal pool for: "context"
00000000000068e1	movl	$0x145, %edx
00000000000068e6	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000068eb	jmp	0x68f0
00000000000068f0	cmpq	$0x0, -0x10(%rbp)
00000000000068f5	setne	%al
00000000000068f8	xorb	$-0x1, %al
00000000000068fa	andb	$0x1, %al
00000000000068fc	movzbl	%al, %ecx
00000000000068ff	movslq	%ecx, %rdx
0000000000006902	cmpq	$0x0, %rdx
0000000000006906	je	0x692b
000000000000690c	leaq	0x5a914(%rip), %rdi ## literal pool for: "ZydisInputSkip"
0000000000006913	leaq	0x5a88c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000691a	leaq	0x5a8c2(%rip), %rcx ## literal pool for: "instruction"
0000000000006921	movl	$0x146, %edx
0000000000006926	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000692b	jmp	0x6930
0000000000006930	movq	-0x10(%rbp), %rax
0000000000006934	movzbl	0x8(%rax), %ecx
0000000000006938	cmpl	$0xf, %ecx
000000000000693b	setl	%dl
000000000000693e	xorb	$-0x1, %dl
0000000000006941	andb	$0x1, %dl
0000000000006944	movzbl	%dl, %ecx
0000000000006947	movslq	%ecx, %rax
000000000000694a	cmpq	$0x0, %rax
000000000000694e	je	0x6973
0000000000006954	leaq	0x5a8cc(%rip), %rdi ## literal pool for: "ZydisInputSkip"
000000000000695b	leaq	0x5a844(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006962	leaq	0x5a8cd(%rip), %rcx ## literal pool for: "instruction->length < 15"
0000000000006969	movl	$0x147, %edx
000000000000696e	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006973	jmp	0x6978
0000000000006978	movq	-0x10(%rbp), %rax
000000000000697c	movb	0x8(%rax), %cl
000000000000697f	addb	$0x1, %cl
0000000000006982	movb	%cl, 0x8(%rax)
0000000000006985	movq	-0x8(%rbp), %rax
0000000000006989	movq	0x8(%rax), %rdx
000000000000698d	addq	$0x1, %rdx
0000000000006991	movq	%rdx, 0x8(%rax)
0000000000006995	movq	-0x8(%rbp), %rax
0000000000006999	movq	0x10(%rax), %rdx
000000000000699d	addq	$-0x1, %rdx
00000000000069a1	movq	%rdx, 0x10(%rax)
00000000000069a5	addq	$0x10, %rsp
00000000000069a9	popq	%rbp
00000000000069aa	retq
00000000000069ab	nopl	(%rax,%rax)
_ZydisDecodeREX:
00000000000069b0	pushq	%rbp
00000000000069b1	movq	%rsp, %rbp
00000000000069b4	subq	$0x20, %rsp
00000000000069b8	movb	%dl, %al
00000000000069ba	movq	%rdi, -0x8(%rbp)
00000000000069be	movq	%rsi, -0x10(%rbp)
00000000000069c2	movb	%al, -0x11(%rbp)
00000000000069c5	cmpq	$0x0, -0x10(%rbp)
00000000000069ca	setne	%al
00000000000069cd	xorb	$-0x1, %al
00000000000069cf	andb	$0x1, %al
00000000000069d1	movzbl	%al, %edx
00000000000069d4	movslq	%edx, %rsi
00000000000069d7	cmpq	$0x0, %rsi
00000000000069db	je	0x6a00
00000000000069e1	leaq	0x5a867(%rip), %rdi ## literal pool for: "ZydisDecodeREX"
00000000000069e8	leaq	0x5a7b7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000069ef	leaq	0x5a7ed(%rip), %rcx ## literal pool for: "instruction"
00000000000069f6	movl	$0x1a7, %edx
00000000000069fb	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006a00	jmp	0x6a05
0000000000006a05	movzbl	-0x11(%rbp), %eax
0000000000006a09	andl	$0xf0, %eax
0000000000006a0e	cmpl	$0x40, %eax
0000000000006a11	sete	%cl
0000000000006a14	xorb	$-0x1, %cl
0000000000006a17	andb	$0x1, %cl
0000000000006a1a	movzbl	%cl, %eax
0000000000006a1d	movslq	%eax, %rdx
0000000000006a20	cmpq	$0x0, %rdx
0000000000006a24	je	0x6a49
0000000000006a2a	leaq	0x5a81e(%rip), %rdi ## literal pool for: "ZydisDecodeREX"
0000000000006a31	leaq	0x5a76e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006a38	leaq	0x5a81f(%rip), %rcx ## literal pool for: "(data & 0xF0) == 0x40"
0000000000006a3f	movl	$0x1a8, %edx
0000000000006a44	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006a49	jmp	0x6a4e
0000000000006a4e	movq	-0x10(%rbp), %rax
0000000000006a52	movq	0x430(%rax), %rcx
0000000000006a59	orq	$0x4, %rcx
0000000000006a5d	movq	%rcx, 0x430(%rax)
0000000000006a64	movzbl	-0x11(%rbp), %edx
0000000000006a68	sarl	$0x3, %edx
0000000000006a6b	andl	$0x1, %edx
0000000000006a6e	movb	%dl, %sil
0000000000006a71	movq	-0x10(%rbp), %rax
0000000000006a75	movb	%sil, 0x544(%rax)
0000000000006a7c	movzbl	-0x11(%rbp), %edx
0000000000006a80	sarl	$0x2, %edx
0000000000006a83	andl	$0x1, %edx
0000000000006a86	movb	%dl, %sil
0000000000006a89	movq	-0x10(%rbp), %rax
0000000000006a8d	movb	%sil, 0x545(%rax)
0000000000006a94	movzbl	-0x11(%rbp), %edx
0000000000006a98	sarl	$0x1, %edx
0000000000006a9b	andl	$0x1, %edx
0000000000006a9e	movb	%dl, %sil
0000000000006aa1	movq	-0x10(%rbp), %rax
0000000000006aa5	movb	%sil, 0x546(%rax)
0000000000006aac	movzbl	-0x11(%rbp), %edx
0000000000006ab0	sarl	$0x0, %edx
0000000000006ab3	andl	$0x1, %edx
0000000000006ab6	movb	%dl, %sil
0000000000006ab9	movq	-0x10(%rbp), %rax
0000000000006abd	movb	%sil, 0x547(%rax)
0000000000006ac4	movq	-0x10(%rbp), %rax
0000000000006ac8	movb	0x544(%rax), %sil
0000000000006acf	movq	-0x8(%rbp), %rax
0000000000006ad3	movb	%sil, 0x26(%rax)
0000000000006ad7	movq	-0x10(%rbp), %rax
0000000000006adb	movb	0x545(%rax), %sil
0000000000006ae2	movq	-0x8(%rbp), %rax
0000000000006ae6	movb	%sil, 0x27(%rax)
0000000000006aea	movq	-0x10(%rbp), %rax
0000000000006aee	movb	0x546(%rax), %sil
0000000000006af5	movq	-0x8(%rbp), %rax
0000000000006af9	movb	%sil, 0x28(%rax)
0000000000006afd	movq	-0x10(%rbp), %rax
0000000000006b01	movb	0x547(%rax), %sil
0000000000006b08	movq	-0x8(%rbp), %rax
0000000000006b0c	movb	%sil, 0x29(%rax)
0000000000006b10	addq	$0x20, %rsp
0000000000006b14	popq	%rbp
0000000000006b15	retq
0000000000006b16	nopw	%cs:(%rax,%rax)
_ZydisDecoderTreeGetRootNode:
0000000000006b20	pushq	%rbp
0000000000006b21	movq	%rsp, %rbp
0000000000006b24	leaq	_zydis_decoder_tree_root(%rip), %rax
0000000000006b2b	popq	%rbp
0000000000006b2c	retq
0000000000006b2d	nopl	(%rax)
_ZydisNodeHandlerXOP:
0000000000006b30	pushq	%rbp
0000000000006b31	movq	%rsp, %rbp
0000000000006b34	subq	$0x20, %rsp
0000000000006b38	movq	%rdi, -0x8(%rbp)
0000000000006b3c	movq	%rsi, -0x10(%rbp)
0000000000006b40	cmpq	$0x0, -0x8(%rbp)
0000000000006b45	setne	%al
0000000000006b48	xorb	$-0x1, %al
0000000000006b4a	andb	$0x1, %al
0000000000006b4c	movzbl	%al, %ecx
0000000000006b4f	movslq	%ecx, %rsi
0000000000006b52	cmpq	$0x0, %rsi
0000000000006b56	je	0x6b7b
0000000000006b5c	leaq	0x5a8ab(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000006b63	leaq	0x5a63c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006b6a	leaq	0x5a672(%rip), %rcx ## literal pool for: "instruction"
0000000000006b71	movl	$0xe1f, %edx
0000000000006b76	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006b7b	jmp	0x6b80
0000000000006b80	cmpq	$0x0, -0x10(%rbp)
0000000000006b85	setne	%al
0000000000006b88	xorb	$-0x1, %al
0000000000006b8a	andb	$0x1, %al
0000000000006b8c	movzbl	%al, %ecx
0000000000006b8f	movslq	%ecx, %rdx
0000000000006b92	cmpq	$0x0, %rdx
0000000000006b96	je	0x6bbb
0000000000006b9c	leaq	0x5a86b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000006ba3	leaq	0x5a5fc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006baa	leaq	0x5a871(%rip), %rcx ## literal pool for: "index"
0000000000006bb1	movl	$0xe20, %edx
0000000000006bb6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006bbb	jmp	0x6bc0
0000000000006bc0	movq	-0x8(%rbp), %rax
0000000000006bc4	movl	0xc(%rax), %ecx
0000000000006bc7	testl	%ecx, %ecx
0000000000006bc9	movl	%ecx, -0x14(%rbp)
0000000000006bcc	je	0x6beb
0000000000006bd2	jmp	0x6bd7
0000000000006bd7	movl	-0x14(%rbp), %eax
0000000000006bda	subl	$0x2, %eax
0000000000006bdd	movl	%eax, -0x18(%rbp)
0000000000006be0	je	0x6bf9
0000000000006be6	jmp	0x6c79
0000000000006beb	movq	-0x10(%rbp), %rax
0000000000006bef	movw	$0x0, (%rax)
0000000000006bf4	jmp	0x6c98
0000000000006bf9	movq	-0x8(%rbp), %rax
0000000000006bfd	movq	0x430(%rax), %rax
0000000000006c04	andq	$0x8, %rax
0000000000006c08	cmpq	$0x0, %rax
0000000000006c0c	setne	%cl
0000000000006c0f	xorb	$-0x1, %cl
0000000000006c12	andb	$0x1, %cl
0000000000006c15	movzbl	%cl, %edx
0000000000006c18	movslq	%edx, %rax
0000000000006c1b	cmpq	$0x0, %rax
0000000000006c1f	je	0x6c44
0000000000006c25	leaq	0x5a7e2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000006c2c	leaq	0x5a573(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006c33	leaq	0x5a7ee(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
0000000000006c3a	movl	$0xe28, %edx
0000000000006c3f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006c44	jmp	0x6c49
0000000000006c49	movq	-0x8(%rbp), %rax
0000000000006c4d	movzbl	0x54c(%rax), %ecx
0000000000006c54	subl	$0x8, %ecx
0000000000006c57	movq	-0x8(%rbp), %rax
0000000000006c5b	movzbl	0x550(%rax), %edx
0000000000006c62	imull	$0x3, %edx, %edx
0000000000006c65	addl	%edx, %ecx
0000000000006c67	addl	$0x1, %ecx
0000000000006c6a	movw	%cx, %si
0000000000006c6d	movq	-0x10(%rbp), %rax
0000000000006c71	movw	%si, (%rax)
0000000000006c74	jmp	0x6c98
0000000000006c79	leaq	0x5a78e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000006c80	leaq	0x5a51f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006c87	leaq	0x5a77e(%rip), %rcx ## literal pool for: "0"
0000000000006c8e	movl	$0xe2c, %edx
0000000000006c93	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006c98	movl	$0x100000, %eax
0000000000006c9d	addq	$0x20, %rsp
0000000000006ca1	popq	%rbp
0000000000006ca2	retq
0000000000006ca3	nopw	%cs:(%rax,%rax)
0000000000006cad	nopl	(%rax)
_ZydisNodeHandlerVEX:
0000000000006cb0	pushq	%rbp
0000000000006cb1	movq	%rsp, %rbp
0000000000006cb4	subq	$0x20, %rsp
0000000000006cb8	movq	%rdi, -0x8(%rbp)
0000000000006cbc	movq	%rsi, -0x10(%rbp)
0000000000006cc0	cmpq	$0x0, -0x8(%rbp)
0000000000006cc5	setne	%al
0000000000006cc8	xorb	$-0x1, %al
0000000000006cca	andb	$0x1, %al
0000000000006ccc	movzbl	%al, %ecx
0000000000006ccf	movslq	%ecx, %rsi
0000000000006cd2	cmpq	$0x0, %rsi
0000000000006cd6	je	0x6cfb
0000000000006cdc	leaq	0x5a772(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
0000000000006ce3	leaq	0x5a4bc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006cea	leaq	0x5a4f2(%rip), %rcx ## literal pool for: "instruction"
0000000000006cf1	movl	$0xe33, %edx
0000000000006cf6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006cfb	jmp	0x6d00
0000000000006d00	cmpq	$0x0, -0x10(%rbp)
0000000000006d05	setne	%al
0000000000006d08	xorb	$-0x1, %al
0000000000006d0a	andb	$0x1, %al
0000000000006d0c	movzbl	%al, %ecx
0000000000006d0f	movslq	%ecx, %rdx
0000000000006d12	cmpq	$0x0, %rdx
0000000000006d16	je	0x6d3b
0000000000006d1c	leaq	0x5a732(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
0000000000006d23	leaq	0x5a47c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006d2a	leaq	0x5a6f1(%rip), %rcx ## literal pool for: "index"
0000000000006d31	movl	$0xe34, %edx
0000000000006d36	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006d3b	jmp	0x6d40
0000000000006d40	movq	-0x8(%rbp), %rax
0000000000006d44	movl	0xc(%rax), %ecx
0000000000006d47	testl	%ecx, %ecx
0000000000006d49	movl	%ecx, -0x14(%rbp)
0000000000006d4c	je	0x6d6b
0000000000006d52	jmp	0x6d57
0000000000006d57	movl	-0x14(%rbp), %eax
0000000000006d5a	subl	$0x3, %eax
0000000000006d5d	movl	%eax, -0x18(%rbp)
0000000000006d60	je	0x6d79
0000000000006d66	jmp	0x6df6
0000000000006d6b	movq	-0x10(%rbp), %rax
0000000000006d6f	movw	$0x0, (%rax)
0000000000006d74	jmp	0x6e15
0000000000006d79	movq	-0x8(%rbp), %rax
0000000000006d7d	movq	0x430(%rax), %rax
0000000000006d84	andq	$0x10, %rax
0000000000006d88	cmpq	$0x0, %rax
0000000000006d8c	setne	%cl
0000000000006d8f	xorb	$-0x1, %cl
0000000000006d92	andb	$0x1, %cl
0000000000006d95	movzbl	%cl, %edx
0000000000006d98	movslq	%edx, %rax
0000000000006d9b	cmpq	$0x0, %rax
0000000000006d9f	je	0x6dc4
0000000000006da5	leaq	0x5a6a9(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
0000000000006dac	leaq	0x5a3f3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006db3	leaq	0x5a6af(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
0000000000006dba	movl	$0xe3c, %edx
0000000000006dbf	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006dc4	jmp	0x6dc9
0000000000006dc9	movq	-0x8(%rbp), %rax
0000000000006dcd	movzbl	0x555(%rax), %ecx
0000000000006dd4	movq	-0x8(%rbp), %rax
0000000000006dd8	movzbl	0x559(%rax), %edx
0000000000006ddf	shll	$0x2, %edx
0000000000006de2	addl	%edx, %ecx
0000000000006de4	addl	$0x1, %ecx
0000000000006de7	movw	%cx, %si
0000000000006dea	movq	-0x10(%rbp), %rax
0000000000006dee	movw	%si, (%rax)
0000000000006df1	jmp	0x6e15
0000000000006df6	leaq	0x5a658(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
0000000000006dfd	leaq	0x5a3a2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006e04	leaq	0x5a601(%rip), %rcx ## literal pool for: "0"
0000000000006e0b	movl	$0xe40, %edx
0000000000006e10	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006e15	movl	$0x100000, %eax
0000000000006e1a	addq	$0x20, %rsp
0000000000006e1e	popq	%rbp
0000000000006e1f	retq
_ZydisNodeHandlerEMVEX:
0000000000006e20	pushq	%rbp
0000000000006e21	movq	%rsp, %rbp
0000000000006e24	subq	$0x20, %rsp
0000000000006e28	movq	%rdi, -0x8(%rbp)
0000000000006e2c	movq	%rsi, -0x10(%rbp)
0000000000006e30	cmpq	$0x0, -0x8(%rbp)
0000000000006e35	setne	%al
0000000000006e38	xorb	$-0x1, %al
0000000000006e3a	andb	$0x1, %al
0000000000006e3c	movzbl	%al, %ecx
0000000000006e3f	movslq	%ecx, %rsi
0000000000006e42	cmpq	$0x0, %rsi
0000000000006e46	je	0x6e6b
0000000000006e4c	leaq	0x5a643(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000006e53	leaq	0x5a34c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006e5a	leaq	0x5a382(%rip), %rcx ## literal pool for: "instruction"
0000000000006e61	movl	$0xe47, %edx
0000000000006e66	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006e6b	jmp	0x6e70
0000000000006e70	cmpq	$0x0, -0x10(%rbp)
0000000000006e75	setne	%al
0000000000006e78	xorb	$-0x1, %al
0000000000006e7a	andb	$0x1, %al
0000000000006e7c	movzbl	%al, %ecx
0000000000006e7f	movslq	%ecx, %rdx
0000000000006e82	cmpq	$0x0, %rdx
0000000000006e86	je	0x6eab
0000000000006e8c	leaq	0x5a603(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000006e93	leaq	0x5a30c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006e9a	leaq	0x5a581(%rip), %rcx ## literal pool for: "index"
0000000000006ea1	movl	$0xe48, %edx
0000000000006ea6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006eab	jmp	0x6eb0
0000000000006eb0	movq	-0x8(%rbp), %rax
0000000000006eb4	movl	0xc(%rax), %ecx
0000000000006eb7	testl	%ecx, %ecx
0000000000006eb9	movl	%ecx, -0x14(%rbp)
0000000000006ebc	je	0x6eef
0000000000006ec2	jmp	0x6ec7
0000000000006ec7	movl	-0x14(%rbp), %eax
0000000000006eca	subl	$0x4, %eax
0000000000006ecd	movl	%eax, -0x18(%rbp)
0000000000006ed0	je	0x6efd
0000000000006ed6	jmp	0x6edb
0000000000006edb	movl	-0x14(%rbp), %eax
0000000000006ede	subl	$0x5, %eax
0000000000006ee1	movl	%eax, -0x1c(%rbp)
0000000000006ee4	je	0x6f7a
0000000000006eea	jmp	0x6ff7
0000000000006eef	movq	-0x10(%rbp), %rax
0000000000006ef3	movw	$0x0, (%rax)
0000000000006ef8	jmp	0x7016
0000000000006efd	movq	-0x8(%rbp), %rax
0000000000006f01	movq	0x430(%rax), %rax
0000000000006f08	andq	$0x20, %rax
0000000000006f0c	cmpq	$0x0, %rax
0000000000006f10	setne	%cl
0000000000006f13	xorb	$-0x1, %cl
0000000000006f16	andb	$0x1, %cl
0000000000006f19	movzbl	%cl, %edx
0000000000006f1c	movslq	%edx, %rax
0000000000006f1f	cmpq	$0x0, %rax
0000000000006f23	je	0x6f48
0000000000006f29	leaq	0x5a566(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000006f30	leaq	0x5a26f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006f37	leaq	0x5a56e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
0000000000006f3e	movl	$0xe50, %edx
0000000000006f43	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006f48	jmp	0x6f4d
0000000000006f4d	movq	-0x8(%rbp), %rax
0000000000006f51	movzbl	0x560(%rax), %ecx
0000000000006f58	movq	-0x8(%rbp), %rax
0000000000006f5c	movzbl	0x563(%rax), %edx
0000000000006f63	shll	$0x2, %edx
0000000000006f66	addl	%edx, %ecx
0000000000006f68	addl	$0x1, %ecx
0000000000006f6b	movw	%cx, %si
0000000000006f6e	movq	-0x10(%rbp), %rax
0000000000006f72	movw	%si, (%rax)
0000000000006f75	jmp	0x7016
0000000000006f7a	movq	-0x8(%rbp), %rax
0000000000006f7e	movq	0x430(%rax), %rax
0000000000006f85	andq	$0x40, %rax
0000000000006f89	cmpq	$0x0, %rax
0000000000006f8d	setne	%cl
0000000000006f90	xorb	$-0x1, %cl
0000000000006f93	andb	$0x1, %cl
0000000000006f96	movzbl	%cl, %edx
0000000000006f99	movslq	%edx, %rax
0000000000006f9c	cmpq	$0x0, %rax
0000000000006fa0	je	0x6fc5
0000000000006fa6	leaq	0x5a4e9(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000006fad	leaq	0x5a1f2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006fb4	leaq	0x5a51e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000006fbb	movl	$0xe54, %edx
0000000000006fc0	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000006fc5	jmp	0x6fca
0000000000006fca	movq	-0x8(%rbp), %rax
0000000000006fce	movzbl	0x56f(%rax), %ecx
0000000000006fd5	movq	-0x8(%rbp), %rax
0000000000006fd9	movzbl	0x572(%rax), %edx
0000000000006fe0	shll	$0x2, %edx
0000000000006fe3	addl	%edx, %ecx
0000000000006fe5	addl	$0x11, %ecx
0000000000006fe8	movw	%cx, %si
0000000000006feb	movq	-0x10(%rbp), %rax
0000000000006fef	movw	%si, (%rax)
0000000000006ff2	jmp	0x7016
0000000000006ff7	leaq	0x5a498(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000006ffe	leaq	0x5a1a1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007005	leaq	0x5a400(%rip), %rcx ## literal pool for: "0"
000000000000700c	movl	$0xe58, %edx
0000000000007011	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007016	movl	$0x100000, %eax
000000000000701b	addq	$0x20, %rsp
000000000000701f	popq	%rbp
0000000000007020	retq
0000000000007021	nopw	%cs:(%rax,%rax)
000000000000702b	nopl	(%rax,%rax)
_ZydisNodeHandlerOpcode:
0000000000007030	pushq	%rbp
0000000000007031	movq	%rsp, %rbp
0000000000007034	subq	$0xc0, %rsp
000000000000703b	movq	%rdi, -0x10(%rbp)
000000000000703f	movq	%rsi, -0x18(%rbp)
0000000000007043	movq	%rdx, -0x20(%rbp)
0000000000007047	cmpq	$0x0, -0x10(%rbp)
000000000000704c	setne	%al
000000000000704f	xorb	$-0x1, %al
0000000000007051	andb	$0x1, %al
0000000000007053	movzbl	%al, %ecx
0000000000007056	movslq	%ecx, %rdx
0000000000007059	cmpq	$0x0, %rdx
000000000000705d	je	0x7082
0000000000007063	leaq	0x5a49c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
000000000000706a	leaq	0x5a135(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007071	leaq	0x5a163(%rip), %rcx ## literal pool for: "context"
0000000000007078	movl	$0xe60, %edx
000000000000707d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007082	jmp	0x7087
0000000000007087	cmpq	$0x0, -0x18(%rbp)
000000000000708c	setne	%al
000000000000708f	xorb	$-0x1, %al
0000000000007091	andb	$0x1, %al
0000000000007093	movzbl	%al, %ecx
0000000000007096	movslq	%ecx, %rdx
0000000000007099	cmpq	$0x0, %rdx
000000000000709d	je	0x70c2
00000000000070a3	leaq	0x5a45c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000070aa	leaq	0x5a0f5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000070b1	leaq	0x5a12b(%rip), %rcx ## literal pool for: "instruction"
00000000000070b8	movl	$0xe61, %edx
00000000000070bd	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000070c2	jmp	0x70c7
00000000000070c7	cmpq	$0x0, -0x20(%rbp)
00000000000070cc	setne	%al
00000000000070cf	xorb	$-0x1, %al
00000000000070d1	andb	$0x1, %al
00000000000070d3	movzbl	%al, %ecx
00000000000070d6	movslq	%ecx, %rdx
00000000000070d9	cmpq	$0x0, %rdx
00000000000070dd	je	0x7102
00000000000070e3	leaq	0x5a41c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000070ea	leaq	0x5a0b5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000070f1	leaq	0x5a32a(%rip), %rcx ## literal pool for: "index"
00000000000070f8	movl	$0xe62, %edx
00000000000070fd	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007102	jmp	0x7107
0000000000007107	movq	-0x18(%rbp), %rax
000000000000710b	movl	0xc(%rax), %ecx
000000000000710e	testl	%ecx, %ecx
0000000000007110	movl	%ecx, -0x64(%rbp)
0000000000007113	je	0x7132
0000000000007119	jmp	0x711e
000000000000711e	movl	-0x64(%rbp), %eax
0000000000007121	subl	$0x1, %eax
0000000000007124	movl	%eax, -0x68(%rbp)
0000000000007127	je	0x7a54
000000000000712d	jmp	0x7a69
0000000000007132	jmp	0x7137
0000000000007137	movq	-0x10(%rbp), %rdi
000000000000713b	movq	-0x18(%rbp), %rsi
000000000000713f	movq	-0x18(%rbp), %rax
0000000000007143	addq	$0x14, %rax
0000000000007147	movq	%rax, %rdx
000000000000714a	callq	_ZydisInputNext
000000000000714f	movl	%eax, -0x24(%rbp)
0000000000007152	movl	-0x24(%rbp), %eax
0000000000007155	andl	$0x80000000, %eax
000000000000715a	cmpl	$0x0, %eax
000000000000715d	je	0x716e
0000000000007163	movl	-0x24(%rbp), %eax
0000000000007166	movl	%eax, -0x4(%rbp)
0000000000007169	jmp	0x7ac8
000000000000716e	jmp	0x7173
0000000000007173	movq	-0x18(%rbp), %rax
0000000000007177	movl	0x10(%rax), %ecx
000000000000717a	testl	%ecx, %ecx
000000000000717c	movl	%ecx, -0x6c(%rbp)
000000000000717f	je	0x71cc
0000000000007185	jmp	0x718a
000000000000718a	movl	-0x6c(%rbp), %eax
000000000000718d	subl	$0x1, %eax
0000000000007190	movl	%eax, -0x70(%rbp)
0000000000007193	je	0x7974
0000000000007199	jmp	0x719e
000000000000719e	movl	-0x6c(%rbp), %eax
00000000000071a1	addl	$-0x2, %eax
00000000000071a4	subl	$0x2, %eax
00000000000071a7	movl	%eax, -0x74(%rbp)
00000000000071aa	jb	0x7a2b
00000000000071b0	jmp	0x71b5
00000000000071b5	movl	-0x6c(%rbp), %eax
00000000000071b8	addl	$-0x5, %eax
00000000000071bb	subl	$0x3, %eax
00000000000071be	movl	%eax, -0x78(%rbp)
00000000000071c1	jb	0x7a2b
00000000000071c7	jmp	0x7a30
00000000000071cc	movq	-0x18(%rbp), %rax
00000000000071d0	movzbl	0x14(%rax), %ecx
00000000000071d4	movl	%ecx, %edx
00000000000071d6	subl	$0xf, %edx
00000000000071d9	movl	%ecx, -0x7c(%rbp)
00000000000071dc	movl	%edx, -0x80(%rbp)
00000000000071df	je	0x7236
00000000000071e5	jmp	0x71ea
00000000000071ea	movl	-0x7c(%rbp), %eax
00000000000071ed	subl	$0x62, %eax
00000000000071f0	movl	%eax, -0x84(%rbp)
00000000000071f6	je	0x7246
00000000000071fc	jmp	0x7201
0000000000007201	movl	-0x7c(%rbp), %eax
0000000000007204	subl	$0x8f, %eax
0000000000007209	movl	%eax, -0x88(%rbp)
000000000000720f	je	0x77fe
0000000000007215	jmp	0x721a
000000000000721a	movl	-0x7c(%rbp), %eax
000000000000721d	addl	$0xffffff3c, %eax
0000000000007222	subl	$0x2, %eax
0000000000007225	movl	%eax, -0x8c(%rbp)
000000000000722b	jb	0x7246
0000000000007231	jmp	0x796a
0000000000007236	movq	-0x18(%rbp), %rax
000000000000723a	movl	$0x1, 0x10(%rax)
0000000000007241	jmp	0x796f
0000000000007246	jmp	0x724b
000000000000724b	movq	-0x10(%rbp), %rdi
000000000000724f	movq	-0x18(%rbp), %rsi
0000000000007253	leaq	-0x25(%rbp), %rdx
0000000000007257	callq	_ZydisInputPeek
000000000000725c	movl	%eax, -0x2c(%rbp)
000000000000725f	movl	-0x2c(%rbp), %eax
0000000000007262	andl	$0x80000000, %eax
0000000000007267	cmpl	$0x0, %eax
000000000000726a	je	0x727b
0000000000007270	movl	-0x2c(%rbp), %eax
0000000000007273	movl	%eax, -0x4(%rbp)
0000000000007276	jmp	0x7ac8
000000000000727b	jmp	0x7280
0000000000007280	movzbl	-0x25(%rbp), %eax
0000000000007284	andl	$0xf0, %eax
0000000000007289	cmpl	$0xc0, %eax
000000000000728e	jge	0x72a4
0000000000007294	movq	-0x10(%rbp), %rax
0000000000007298	movq	(%rax), %rax
000000000000729b	cmpl	$0x0, (%rax)
000000000000729e	jne	0x77f9
00000000000072a4	movq	-0x18(%rbp), %rax
00000000000072a8	movq	0x430(%rax), %rax
00000000000072af	andq	$0x4, %rax
00000000000072b3	cmpq	$0x0, %rax
00000000000072b7	je	0x72c9
00000000000072bd	movl	$0x80200006, -0x4(%rbp)
00000000000072c4	jmp	0x7ac8
00000000000072c9	movq	-0x10(%rbp), %rax
00000000000072cd	cmpb	$0x0, 0x18(%rax)
00000000000072d1	je	0x72e3
00000000000072d7	movl	$0x80200004, -0x4(%rbp)
00000000000072de	jmp	0x7ac8
00000000000072e3	movq	-0x10(%rbp), %rax
00000000000072e7	cmpb	$0x0, 0x1c(%rax)
00000000000072eb	je	0x72fd
00000000000072f1	movl	$0x80200005, -0x4(%rbp)
00000000000072f8	jmp	0x7ac8
00000000000072fd	movl	$0x0, -0x30(%rbp)
0000000000007304	movq	-0x18(%rbp), %rax
0000000000007308	movb	0x14(%rax), %cl
000000000000730b	movb	%cl, -0x30(%rbp)
000000000000730e	movq	-0x18(%rbp), %rax
0000000000007312	movzbl	0x14(%rax), %edx
0000000000007316	movl	%edx, %esi
0000000000007318	subl	$0x62, %esi
000000000000731b	movl	%edx, -0x90(%rbp)
0000000000007321	movl	%esi, -0x94(%rbp)
0000000000007327	je	0x74cf
000000000000732d	jmp	0x7332
0000000000007332	movl	-0x90(%rbp), %eax
0000000000007338	subl	$0xc4, %eax
000000000000733d	movl	%eax, -0x98(%rbp)
0000000000007343	je	0x736a
0000000000007349	jmp	0x734e
000000000000734e	movl	-0x90(%rbp), %eax
0000000000007354	subl	$0xc5, %eax
0000000000007359	movl	%eax, -0x9c(%rbp)
000000000000735f	je	0x741f
0000000000007365	jmp	0x75c0
000000000000736a	movq	-0x18(%rbp), %rax
000000000000736e	movzbl	0x8(%rax), %ecx
0000000000007372	subl	$0x1, %ecx
0000000000007375	movb	%cl, %dl
0000000000007377	movq	-0x18(%rbp), %rax
000000000000737b	movb	%dl, 0x55a(%rax)
0000000000007381	movq	-0x18(%rbp), %rax
0000000000007385	movq	0x430(%rax), %rax
000000000000738c	andq	$0x10, %rax
0000000000007390	cmpq	$0x0, %rax
0000000000007394	setne	%dl
0000000000007397	xorb	$-0x1, %dl
000000000000739a	xorb	$-0x1, %dl
000000000000739d	andb	$0x1, %dl
00000000000073a0	movzbl	%dl, %ecx
00000000000073a3	movslq	%ecx, %rax
00000000000073a6	cmpq	$0x0, %rax
00000000000073aa	je	0x73cf
00000000000073b0	leaq	0x5a14f(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000073b7	leaq	0x59de8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000073be	leaq	0x5a158(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000010)"
00000000000073c5	movl	$0xe8d, %edx
00000000000073ca	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000073cf	jmp	0x73d4
00000000000073d4	jmp	0x73d9
00000000000073d9	movq	-0x10(%rbp), %rdi
00000000000073dd	movq	-0x18(%rbp), %rsi
00000000000073e1	leaq	-0x30(%rbp), %rax
00000000000073e5	addq	$0x1, %rax
00000000000073e9	movq	%rax, %rdx
00000000000073ec	movl	$0x2, %ecx
00000000000073f1	callq	_ZydisInputNextBytes
00000000000073f6	movl	%eax, -0x34(%rbp)
00000000000073f9	movl	-0x34(%rbp), %eax
00000000000073fc	andl	$0x80000000, %eax
0000000000007401	cmpl	$0x0, %eax
0000000000007404	je	0x7415
000000000000740a	movl	-0x34(%rbp), %eax
000000000000740d	movl	%eax, -0x4(%rbp)
0000000000007410	jmp	0x7ac8
0000000000007415	jmp	0x741a
000000000000741a	jmp	0x75df
000000000000741f	movq	-0x18(%rbp), %rax
0000000000007423	movzbl	0x8(%rax), %ecx
0000000000007427	subl	$0x1, %ecx
000000000000742a	movb	%cl, %dl
000000000000742c	movq	-0x18(%rbp), %rax
0000000000007430	movb	%dl, 0x55a(%rax)
0000000000007436	movq	-0x18(%rbp), %rax
000000000000743a	movq	0x430(%rax), %rax
0000000000007441	andq	$0x10, %rax
0000000000007445	cmpq	$0x0, %rax
0000000000007449	setne	%dl
000000000000744c	xorb	$-0x1, %dl
000000000000744f	xorb	$-0x1, %dl
0000000000007452	andb	$0x1, %dl
0000000000007455	movzbl	%dl, %ecx
0000000000007458	movslq	%ecx, %rax
000000000000745b	cmpq	$0x0, %rax
000000000000745f	je	0x7484
0000000000007465	leaq	0x5a09a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
000000000000746c	leaq	0x59d33(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007473	leaq	0x5a0a3(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000010)"
000000000000747a	movl	$0xe93, %edx
000000000000747f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007484	jmp	0x7489
0000000000007489	jmp	0x748e
000000000000748e	movq	-0x10(%rbp), %rdi
0000000000007492	movq	-0x18(%rbp), %rsi
0000000000007496	leaq	-0x30(%rbp), %rax
000000000000749a	addq	$0x1, %rax
000000000000749e	movq	%rax, %rdx
00000000000074a1	callq	_ZydisInputNext
00000000000074a6	movl	%eax, -0x38(%rbp)
00000000000074a9	movl	-0x38(%rbp), %eax
00000000000074ac	andl	$0x80000000, %eax
00000000000074b1	cmpl	$0x0, %eax
00000000000074b4	je	0x74c5
00000000000074ba	movl	-0x38(%rbp), %eax
00000000000074bd	movl	%eax, -0x4(%rbp)
00000000000074c0	jmp	0x7ac8
00000000000074c5	jmp	0x74ca
00000000000074ca	jmp	0x75df
00000000000074cf	movq	-0x18(%rbp), %rax
00000000000074d3	movq	0x430(%rax), %rax
00000000000074da	andq	$0x20, %rax
00000000000074de	cmpq	$0x0, %rax
00000000000074e2	setne	%cl
00000000000074e5	xorb	$-0x1, %cl
00000000000074e8	xorb	$-0x1, %cl
00000000000074eb	andb	$0x1, %cl
00000000000074ee	movzbl	%cl, %edx
00000000000074f1	movslq	%edx, %rax
00000000000074f4	cmpq	$0x0, %rax
00000000000074f8	je	0x751d
00000000000074fe	leaq	0x5a001(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007505	leaq	0x59c9a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000750c	leaq	0x5a03a(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000020)"
0000000000007513	movl	$0xe99, %edx
0000000000007518	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000751d	jmp	0x7522
0000000000007522	movq	-0x18(%rbp), %rax
0000000000007526	movq	0x430(%rax), %rax
000000000000752d	andq	$0x40, %rax
0000000000007531	cmpq	$0x0, %rax
0000000000007535	setne	%cl
0000000000007538	xorb	$-0x1, %cl
000000000000753b	xorb	$-0x1, %cl
000000000000753e	andb	$0x1, %cl
0000000000007541	movzbl	%cl, %edx
0000000000007544	movslq	%edx, %rax
0000000000007547	cmpq	$0x0, %rax
000000000000754b	je	0x7570
0000000000007551	leaq	0x59fae(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007558	leaq	0x59c47(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000755f	leaq	0x5a017(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000040)"
0000000000007566	movl	$0xe9a, %edx
000000000000756b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007570	jmp	0x7575
0000000000007575	jmp	0x757a
000000000000757a	movq	-0x10(%rbp), %rdi
000000000000757e	movq	-0x18(%rbp), %rsi
0000000000007582	leaq	-0x30(%rbp), %rax
0000000000007586	addq	$0x1, %rax
000000000000758a	movq	%rax, %rdx
000000000000758d	movl	$0x3, %ecx
0000000000007592	callq	_ZydisInputNextBytes
0000000000007597	movl	%eax, -0x3c(%rbp)
000000000000759a	movl	-0x3c(%rbp), %eax
000000000000759d	andl	$0x80000000, %eax
00000000000075a2	cmpl	$0x0, %eax
00000000000075a5	je	0x75b6
00000000000075ab	movl	-0x3c(%rbp), %eax
00000000000075ae	movl	%eax, -0x4(%rbp)
00000000000075b1	jmp	0x7ac8
00000000000075b6	jmp	0x75bb
00000000000075bb	jmp	0x75df
00000000000075c0	leaq	0x59f3f(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000075c7	leaq	0x59bd8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000075ce	leaq	0x59e37(%rip), %rcx ## literal pool for: "0"
00000000000075d5	movl	$0xea1, %edx
00000000000075da	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000075df	movq	-0x18(%rbp), %rax
00000000000075e3	movzbl	0x14(%rax), %ecx
00000000000075e7	movl	%ecx, %edx
00000000000075e9	subl	$0x62, %edx
00000000000075ec	movl	%ecx, -0xa0(%rbp)
00000000000075f2	movl	%edx, -0xa4(%rbp)
00000000000075f8	je	0x767c
00000000000075fe	jmp	0x7603
0000000000007603	movl	-0xa0(%rbp), %eax
0000000000007609	addl	$0xffffff3c, %eax
000000000000760e	subl	$0x1, %eax
0000000000007611	movl	%eax, -0xa8(%rbp)
0000000000007617	ja	0x77d5
000000000000761d	jmp	0x7622
0000000000007622	movq	-0x18(%rbp), %rax
0000000000007626	movl	$0x3, 0xc(%rax)
000000000000762d	leaq	-0x30(%rbp), %rdx
0000000000007631	movq	-0x10(%rbp), %rdi
0000000000007635	movq	-0x18(%rbp), %rsi
0000000000007639	callq	_ZydisDecodeVEX
000000000000763e	movl	%eax, -0x40(%rbp)
0000000000007641	movl	-0x40(%rbp), %eax
0000000000007644	andl	$0x80000000, %eax
0000000000007649	cmpl	$0x0, %eax
000000000000764c	je	0x765d
0000000000007652	movl	-0x40(%rbp), %eax
0000000000007655	movl	%eax, -0x4(%rbp)
0000000000007658	jmp	0x7ac8
000000000000765d	jmp	0x7662
0000000000007662	movq	-0x18(%rbp), %rax
0000000000007666	movzbl	0x555(%rax), %ecx
000000000000766d	addl	$0x0, %ecx
0000000000007670	movq	-0x18(%rbp), %rax
0000000000007674	movl	%ecx, 0x10(%rax)
0000000000007677	jmp	0x77f4
000000000000767c	movb	-0x2e(%rbp), %al
000000000000767f	shrb	$0x2, %al
0000000000007682	movzbl	%al, %ecx
0000000000007685	andl	$0x1, %ecx
0000000000007688	movl	%ecx, -0xac(%rbp)
000000000000768e	je	0x76b3
0000000000007694	jmp	0x7699
0000000000007699	movl	-0xac(%rbp), %eax
000000000000769f	subl	$0x1, %eax
00000000000076a2	movl	%eax, -0xb0(%rbp)
00000000000076a8	je	0x7740
00000000000076ae	jmp	0x77b1
00000000000076b3	movq	-0x18(%rbp), %rax
00000000000076b7	movzbl	0x8(%rax), %ecx
00000000000076bb	subl	$0x4, %ecx
00000000000076be	movb	%cl, %dl
00000000000076c0	movq	-0x18(%rbp), %rax
00000000000076c4	movb	%dl, 0x577(%rax)
00000000000076ca	movq	-0x10(%rbp), %rax
00000000000076ce	movq	(%rax), %rax
00000000000076d1	cmpl	$0x0, (%rax)
00000000000076d4	je	0x76e6
00000000000076da	movl	$0x80200001, -0x4(%rbp)
00000000000076e1	jmp	0x7ac8
00000000000076e6	movq	-0x18(%rbp), %rax
00000000000076ea	movl	$0x5, 0xc(%rax)
00000000000076f1	leaq	-0x30(%rbp), %rdx
00000000000076f5	movq	-0x10(%rbp), %rdi
00000000000076f9	movq	-0x18(%rbp), %rsi
00000000000076fd	callq	_ZydisDecodeMVEX
0000000000007702	movl	%eax, -0x44(%rbp)
0000000000007705	movl	-0x44(%rbp), %eax
0000000000007708	andl	$0x80000000, %eax
000000000000770d	cmpl	$0x0, %eax
0000000000007710	je	0x7721
0000000000007716	movl	-0x44(%rbp), %eax
0000000000007719	movl	%eax, -0x4(%rbp)
000000000000771c	jmp	0x7ac8
0000000000007721	jmp	0x7726
0000000000007726	movq	-0x18(%rbp), %rax
000000000000772a	movzbl	0x56f(%rax), %ecx
0000000000007731	addl	$0x0, %ecx
0000000000007734	movq	-0x18(%rbp), %rax
0000000000007738	movl	%ecx, 0x10(%rax)
000000000000773b	jmp	0x77d0
0000000000007740	movq	-0x18(%rbp), %rax
0000000000007744	movzbl	0x8(%rax), %ecx
0000000000007748	subl	$0x4, %ecx
000000000000774b	movb	%cl, %dl
000000000000774d	movq	-0x18(%rbp), %rax
0000000000007751	movb	%dl, 0x56a(%rax)
0000000000007757	movq	-0x18(%rbp), %rax
000000000000775b	movl	$0x4, 0xc(%rax)
0000000000007762	leaq	-0x30(%rbp), %rdx
0000000000007766	movq	-0x10(%rbp), %rdi
000000000000776a	movq	-0x18(%rbp), %rsi
000000000000776e	callq	_ZydisDecodeEVEX
0000000000007773	movl	%eax, -0x48(%rbp)
0000000000007776	movl	-0x48(%rbp), %eax
0000000000007779	andl	$0x80000000, %eax
000000000000777e	cmpl	$0x0, %eax
0000000000007781	je	0x7792
0000000000007787	movl	-0x48(%rbp), %eax
000000000000778a	movl	%eax, -0x4(%rbp)
000000000000778d	jmp	0x7ac8
0000000000007792	jmp	0x7797
0000000000007797	movq	-0x18(%rbp), %rax
000000000000779b	movzbl	0x560(%rax), %ecx
00000000000077a2	addl	$0x0, %ecx
00000000000077a5	movq	-0x18(%rbp), %rax
00000000000077a9	movl	%ecx, 0x10(%rax)
00000000000077ac	jmp	0x77d0
00000000000077b1	leaq	0x59d4e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000077b8	leaq	0x599e7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000077bf	leaq	0x59c46(%rip), %rcx ## literal pool for: "0"
00000000000077c6	movl	$0xed4, %edx
00000000000077cb	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000077d0	jmp	0x77f4
00000000000077d5	leaq	0x59d2a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000077dc	leaq	0x599c3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000077e3	leaq	0x59c22(%rip), %rcx ## literal pool for: "0"
00000000000077ea	movl	$0xed9, %edx
00000000000077ef	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000077f4	jmp	0x77f9
00000000000077f9	jmp	0x796f
00000000000077fe	jmp	0x7803
0000000000007803	movq	-0x10(%rbp), %rdi
0000000000007807	movq	-0x18(%rbp), %rsi
000000000000780b	leaq	-0x49(%rbp), %rdx
000000000000780f	callq	_ZydisInputPeek
0000000000007814	movl	%eax, -0x50(%rbp)
0000000000007817	movl	-0x50(%rbp), %eax
000000000000781a	andl	$0x80000000, %eax
000000000000781f	cmpl	$0x0, %eax
0000000000007822	je	0x7833
0000000000007828	movl	-0x50(%rbp), %eax
000000000000782b	movl	%eax, -0x4(%rbp)
000000000000782e	jmp	0x7ac8
0000000000007833	jmp	0x7838
0000000000007838	movzbl	-0x49(%rbp), %eax
000000000000783c	andl	$0x1f, %eax
000000000000783f	cmpl	$0x8, %eax
0000000000007842	jl	0x7965
0000000000007848	movq	-0x18(%rbp), %rax
000000000000784c	movq	0x430(%rax), %rax
0000000000007853	andq	$0x4, %rax
0000000000007857	cmpq	$0x0, %rax
000000000000785b	je	0x786d
0000000000007861	movl	$0x80200006, -0x4(%rbp)
0000000000007868	jmp	0x7ac8
000000000000786d	movq	-0x10(%rbp), %rax
0000000000007871	cmpb	$0x0, 0x18(%rax)
0000000000007875	je	0x7887
000000000000787b	movl	$0x80200004, -0x4(%rbp)
0000000000007882	jmp	0x7ac8
0000000000007887	movq	-0x10(%rbp), %rax
000000000000788b	cmpb	$0x0, 0x1c(%rax)
000000000000788f	je	0x78a1
0000000000007895	movl	$0x80200005, -0x4(%rbp)
000000000000789c	jmp	0x7ac8
00000000000078a1	movq	-0x18(%rbp), %rax
00000000000078a5	movzbl	0x8(%rax), %ecx
00000000000078a9	subl	$0x1, %ecx
00000000000078ac	movb	%cl, %dl
00000000000078ae	movq	-0x18(%rbp), %rax
00000000000078b2	movb	%dl, 0x551(%rax)
00000000000078b8	movw	0x44e5d(%rip), %si
00000000000078bf	movw	%si, -0x53(%rbp)
00000000000078c3	movb	0x44e55(%rip), %dl
00000000000078c9	movb	%dl, -0x51(%rbp)
00000000000078cc	movq	-0x10(%rbp), %rdi
00000000000078d0	movq	-0x18(%rbp), %rsi
00000000000078d4	leaq	-0x53(%rbp), %rax
00000000000078d8	addq	$0x1, %rax
00000000000078dc	movq	%rax, %rdx
00000000000078df	movl	$0x2, %ecx
00000000000078e4	callq	_ZydisInputNextBytes
00000000000078e9	movl	%eax, -0x58(%rbp)
00000000000078ec	movl	-0x58(%rbp), %eax
00000000000078ef	andl	$0x80000000, %eax
00000000000078f4	cmpl	$0x0, %eax
00000000000078f7	je	0x7908
00000000000078fd	movl	-0x58(%rbp), %eax
0000000000007900	movl	%eax, -0x4(%rbp)
0000000000007903	jmp	0x7ac8
0000000000007908	jmp	0x790d
000000000000790d	movq	-0x18(%rbp), %rax
0000000000007911	movl	$0x2, 0xc(%rax)
0000000000007918	leaq	-0x53(%rbp), %rdx
000000000000791c	movq	-0x10(%rbp), %rdi
0000000000007920	movq	-0x18(%rbp), %rsi
0000000000007924	callq	_ZydisDecodeXOP
0000000000007929	movl	%eax, -0x5c(%rbp)
000000000000792c	movl	-0x5c(%rbp), %eax
000000000000792f	andl	$0x80000000, %eax
0000000000007934	cmpl	$0x0, %eax
0000000000007937	je	0x7948
000000000000793d	movl	-0x5c(%rbp), %eax
0000000000007940	movl	%eax, -0x4(%rbp)
0000000000007943	jmp	0x7ac8
0000000000007948	jmp	0x794d
000000000000794d	movq	-0x18(%rbp), %rax
0000000000007951	movzbl	0x54c(%rax), %ecx
0000000000007958	addl	$0x5, %ecx
000000000000795b	subl	$0x8, %ecx
000000000000795e	movq	-0x18(%rbp), %rax
0000000000007962	movl	%ecx, 0x10(%rax)
0000000000007965	jmp	0x796f
000000000000796a	jmp	0x796f
000000000000796f	jmp	0x7a4f
0000000000007974	movq	-0x18(%rbp), %rax
0000000000007978	movzbl	0x14(%rax), %ecx
000000000000797c	movl	%ecx, %edx
000000000000797e	subl	$0xf, %edx
0000000000007981	movl	%ecx, -0xb4(%rbp)
0000000000007987	movl	%edx, -0xb8(%rbp)
000000000000798d	je	0x79cc
0000000000007993	jmp	0x7998
0000000000007998	movl	-0xb4(%rbp), %eax
000000000000799e	subl	$0x38, %eax
00000000000079a1	movl	%eax, -0xbc(%rbp)
00000000000079a7	je	0x7a01
00000000000079ad	jmp	0x79b2
00000000000079b2	movl	-0xb4(%rbp), %eax
00000000000079b8	subl	$0x3a, %eax
00000000000079bb	movl	%eax, -0xc0(%rbp)
00000000000079c1	je	0x7a11
00000000000079c7	jmp	0x7a21
00000000000079cc	movq	-0x10(%rbp), %rax
00000000000079d0	cmpb	$0x0, 0x18(%rax)
00000000000079d4	je	0x79e6
00000000000079da	movl	$0x80200004, -0x4(%rbp)
00000000000079e1	jmp	0x7ac8
00000000000079e6	movq	-0x18(%rbp), %rax
00000000000079ea	movl	$0x1, 0xc(%rax)
00000000000079f1	movq	-0x18(%rbp), %rax
00000000000079f5	movl	$0x4, 0x10(%rax)
00000000000079fc	jmp	0x7a26
0000000000007a01	movq	-0x18(%rbp), %rax
0000000000007a05	movl	$0x2, 0x10(%rax)
0000000000007a0c	jmp	0x7a26
0000000000007a11	movq	-0x18(%rbp), %rax
0000000000007a15	movl	$0x3, 0x10(%rax)
0000000000007a1c	jmp	0x7a26
0000000000007a21	jmp	0x7a26
0000000000007a26	jmp	0x7a4f
0000000000007a2b	jmp	0x7a4f
0000000000007a30	leaq	0x59acf(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007a37	leaq	0x59768(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007a3e	leaq	0x599c7(%rip), %rcx ## literal pool for: "0"
0000000000007a45	movl	$0xf1d, %edx
0000000000007a4a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007a4f	jmp	0x7aaf
0000000000007a54	movq	-0x20(%rbp), %rax
0000000000007a58	movw	$0xc, (%rax)
0000000000007a5d	movl	$0x100000, -0x4(%rbp)
0000000000007a64	jmp	0x7ac8
0000000000007a69	jmp	0x7a6e
0000000000007a6e	movq	-0x10(%rbp), %rdi
0000000000007a72	movq	-0x18(%rbp), %rsi
0000000000007a76	movq	-0x18(%rbp), %rax
0000000000007a7a	addq	$0x14, %rax
0000000000007a7e	movq	%rax, %rdx
0000000000007a81	callq	_ZydisInputNext
0000000000007a86	movl	%eax, -0x60(%rbp)
0000000000007a89	movl	-0x60(%rbp), %eax
0000000000007a8c	andl	$0x80000000, %eax
0000000000007a91	cmpl	$0x0, %eax
0000000000007a94	je	0x7aa5
0000000000007a9a	movl	-0x60(%rbp), %eax
0000000000007a9d	movl	%eax, -0x4(%rbp)
0000000000007aa0	jmp	0x7ac8
0000000000007aa5	jmp	0x7aaa
0000000000007aaa	jmp	0x7aaf
0000000000007aaf	movq	-0x18(%rbp), %rax
0000000000007ab3	movzbl	0x14(%rax), %ecx
0000000000007ab7	movw	%cx, %dx
0000000000007aba	movq	-0x20(%rbp), %rax
0000000000007abe	movw	%dx, (%rax)
0000000000007ac1	movl	$0x100000, -0x4(%rbp)
0000000000007ac8	movl	-0x4(%rbp), %eax
0000000000007acb	addq	$0xc0, %rsp
0000000000007ad2	popq	%rbp
0000000000007ad3	retq
0000000000007ad4	nopw	%cs:(%rax,%rax)
0000000000007ade	nop
_ZydisNodeHandlerMode:
0000000000007ae0	pushq	%rbp
0000000000007ae1	movq	%rsp, %rbp
0000000000007ae4	subq	$0x30, %rsp
0000000000007ae8	movq	%rdi, -0x8(%rbp)
0000000000007aec	movq	%rsi, -0x10(%rbp)
0000000000007af0	cmpq	$0x0, -0x8(%rbp)
0000000000007af5	setne	%al
0000000000007af8	xorb	$-0x1, %al
0000000000007afa	andb	$0x1, %al
0000000000007afc	movzbl	%al, %ecx
0000000000007aff	movslq	%ecx, %rsi
0000000000007b02	cmpq	$0x0, %rsi
0000000000007b06	je	0x7b2b
0000000000007b0c	leaq	0x59ca5(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
0000000000007b13	leaq	0x5968c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007b1a	leaq	0x596ba(%rip), %rcx ## literal pool for: "context"
0000000000007b21	movl	$0xf30, %edx
0000000000007b26	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007b2b	jmp	0x7b30
0000000000007b30	cmpq	$0x0, -0x10(%rbp)
0000000000007b35	setne	%al
0000000000007b38	xorb	$-0x1, %al
0000000000007b3a	andb	$0x1, %al
0000000000007b3c	movzbl	%al, %ecx
0000000000007b3f	movslq	%ecx, %rdx
0000000000007b42	cmpq	$0x0, %rdx
0000000000007b46	je	0x7b6b
0000000000007b4c	leaq	0x59c65(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
0000000000007b53	leaq	0x5964c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007b5a	leaq	0x598c1(%rip), %rcx ## literal pool for: "index"
0000000000007b61	movl	$0xf31, %edx
0000000000007b66	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007b6b	jmp	0x7b70
0000000000007b70	movq	-0x8(%rbp), %rax
0000000000007b74	movq	(%rax), %rax
0000000000007b77	movl	(%rax), %ecx
0000000000007b79	testl	%ecx, %ecx
0000000000007b7b	movl	%ecx, -0x14(%rbp)
0000000000007b7e	je	0x7bf8
0000000000007b84	jmp	0x7b89
0000000000007b89	movl	-0x14(%rbp), %eax
0000000000007b8c	subl	$0x1, %eax
0000000000007b8f	movl	%eax, -0x18(%rbp)
0000000000007b92	je	0x7bea
0000000000007b98	jmp	0x7b9d
0000000000007b9d	movl	-0x14(%rbp), %eax
0000000000007ba0	subl	$0x2, %eax
0000000000007ba3	movl	%eax, -0x1c(%rbp)
0000000000007ba6	je	0x7bdc
0000000000007bac	jmp	0x7bb1
0000000000007bb1	movl	-0x14(%rbp), %eax
0000000000007bb4	subl	$0x3, %eax
0000000000007bb7	movl	%eax, -0x20(%rbp)
0000000000007bba	je	0x7bea
0000000000007bc0	jmp	0x7bc5
0000000000007bc5	movl	-0x14(%rbp), %eax
0000000000007bc8	addl	$-0x4, %eax
0000000000007bcb	subl	$0x1, %eax
0000000000007bce	movl	%eax, -0x24(%rbp)
0000000000007bd1	ja	0x7c06
0000000000007bd7	jmp	0x7bdc
0000000000007bdc	movq	-0x10(%rbp), %rax
0000000000007be0	movw	$0x0, (%rax)
0000000000007be5	jmp	0x7c25
0000000000007bea	movq	-0x10(%rbp), %rax
0000000000007bee	movw	$0x1, (%rax)
0000000000007bf3	jmp	0x7c25
0000000000007bf8	movq	-0x10(%rbp), %rax
0000000000007bfc	movw	$0x2, (%rax)
0000000000007c01	jmp	0x7c25
0000000000007c06	leaq	0x59bab(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
0000000000007c0d	leaq	0x59592(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007c14	leaq	0x597f1(%rip), %rcx ## literal pool for: "0"
0000000000007c1b	movl	$0xf42, %edx
0000000000007c20	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007c25	movl	$0x100000, %eax
0000000000007c2a	addq	$0x30, %rsp
0000000000007c2e	popq	%rbp
0000000000007c2f	retq
_ZydisNodeHandlerModeCompact:
0000000000007c30	pushq	%rbp
0000000000007c31	movq	%rsp, %rbp
0000000000007c34	subq	$0x10, %rsp
0000000000007c38	movq	%rdi, -0x8(%rbp)
0000000000007c3c	movq	%rsi, -0x10(%rbp)
0000000000007c40	cmpq	$0x0, -0x8(%rbp)
0000000000007c45	setne	%al
0000000000007c48	xorb	$-0x1, %al
0000000000007c4a	andb	$0x1, %al
0000000000007c4c	movzbl	%al, %ecx
0000000000007c4f	movslq	%ecx, %rsi
0000000000007c52	cmpq	$0x0, %rsi
0000000000007c56	je	0x7c7b
0000000000007c5c	leaq	0x59b6a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModeCompact"
0000000000007c63	leaq	0x5953c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007c6a	leaq	0x5956a(%rip), %rcx ## literal pool for: "context"
0000000000007c71	movl	$0xf49, %edx
0000000000007c76	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007c7b	jmp	0x7c80
0000000000007c80	cmpq	$0x0, -0x10(%rbp)
0000000000007c85	setne	%al
0000000000007c88	xorb	$-0x1, %al
0000000000007c8a	andb	$0x1, %al
0000000000007c8c	movzbl	%al, %ecx
0000000000007c8f	movslq	%ecx, %rdx
0000000000007c92	cmpq	$0x0, %rdx
0000000000007c96	je	0x7cbb
0000000000007c9c	leaq	0x59b2a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModeCompact"
0000000000007ca3	leaq	0x594fc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007caa	leaq	0x59771(%rip), %rcx ## literal pool for: "index"
0000000000007cb1	movl	$0xf4a, %edx
0000000000007cb6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007cbb	jmp	0x7cc0
0000000000007cc0	xorl	%eax, %eax
0000000000007cc2	movq	-0x8(%rbp), %rcx
0000000000007cc6	movq	(%rcx), %rcx
0000000000007cc9	movl	(%rcx), %edx
0000000000007ccb	cmpl	$0x0, %edx
0000000000007cce	movl	$0x1, %edx
0000000000007cd3	cmovel	%eax, %edx
0000000000007cd6	movw	%dx, %si
0000000000007cd9	movq	-0x10(%rbp), %rcx
0000000000007cdd	movw	%si, (%rcx)
0000000000007ce0	movl	$0x100000, %eax
0000000000007ce5	addq	$0x10, %rsp
0000000000007ce9	popq	%rbp
0000000000007cea	retq
0000000000007ceb	nopl	(%rax,%rax)
_ZydisNodeHandlerModrmMod:
0000000000007cf0	pushq	%rbp
0000000000007cf1	movq	%rsp, %rbp
0000000000007cf4	subq	$0x30, %rsp
0000000000007cf8	movq	%rdi, -0x10(%rbp)
0000000000007cfc	movq	%rsi, -0x18(%rbp)
0000000000007d00	movq	%rdx, -0x20(%rbp)
0000000000007d04	cmpq	$0x0, -0x10(%rbp)
0000000000007d09	setne	%al
0000000000007d0c	xorb	$-0x1, %al
0000000000007d0e	andb	$0x1, %al
0000000000007d10	movzbl	%al, %ecx
0000000000007d13	movslq	%ecx, %rdx
0000000000007d16	cmpq	$0x0, %rdx
0000000000007d1a	je	0x7d3f
0000000000007d20	leaq	0x59ac2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
0000000000007d27	leaq	0x59478(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007d2e	leaq	0x594a6(%rip), %rcx ## literal pool for: "context"
0000000000007d35	movl	$0xf53, %edx
0000000000007d3a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007d3f	jmp	0x7d44
0000000000007d44	cmpq	$0x0, -0x18(%rbp)
0000000000007d49	setne	%al
0000000000007d4c	xorb	$-0x1, %al
0000000000007d4e	andb	$0x1, %al
0000000000007d50	movzbl	%al, %ecx
0000000000007d53	movslq	%ecx, %rdx
0000000000007d56	cmpq	$0x0, %rdx
0000000000007d5a	je	0x7d7f
0000000000007d60	leaq	0x59a82(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
0000000000007d67	leaq	0x59438(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007d6e	leaq	0x5946e(%rip), %rcx ## literal pool for: "instruction"
0000000000007d75	movl	$0xf54, %edx
0000000000007d7a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007d7f	jmp	0x7d84
0000000000007d84	cmpq	$0x0, -0x20(%rbp)
0000000000007d89	setne	%al
0000000000007d8c	xorb	$-0x1, %al
0000000000007d8e	andb	$0x1, %al
0000000000007d90	movzbl	%al, %ecx
0000000000007d93	movslq	%ecx, %rdx
0000000000007d96	cmpq	$0x0, %rdx
0000000000007d9a	je	0x7dbf
0000000000007da0	leaq	0x59a42(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
0000000000007da7	leaq	0x593f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007dae	leaq	0x5966d(%rip), %rcx ## literal pool for: "index"
0000000000007db5	movl	$0xf55, %edx
0000000000007dba	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007dbf	jmp	0x7dc4
0000000000007dc4	movq	-0x18(%rbp), %rax
0000000000007dc8	cmpb	$0x0, 0x57b(%rax)
0000000000007dcf	jne	0x7e28
0000000000007dd5	movq	-0x18(%rbp), %rax
0000000000007dd9	movb	0x8(%rax), %cl
0000000000007ddc	movq	-0x18(%rbp), %rax
0000000000007de0	movb	%cl, 0x57b(%rax)
0000000000007de6	movq	-0x10(%rbp), %rdi
0000000000007dea	movq	-0x18(%rbp), %rsi
0000000000007dee	leaq	-0x21(%rbp), %rdx
0000000000007df2	callq	_ZydisInputNext
0000000000007df7	movl	%eax, -0x28(%rbp)
0000000000007dfa	movl	-0x28(%rbp), %eax
0000000000007dfd	andl	$0x80000000, %eax
0000000000007e02	cmpl	$0x0, %eax
0000000000007e05	je	0x7e16
0000000000007e0b	movl	-0x28(%rbp), %eax
0000000000007e0e	movl	%eax, -0x4(%rbp)
0000000000007e11	jmp	0x7e44
0000000000007e16	jmp	0x7e1b
0000000000007e1b	movq	-0x18(%rbp), %rdi
0000000000007e1f	movzbl	-0x21(%rbp), %esi
0000000000007e23	callq	_ZydisDecodeModRM
0000000000007e28	movq	-0x18(%rbp), %rax
0000000000007e2c	movzbl	0x578(%rax), %ecx
0000000000007e33	movw	%cx, %dx
0000000000007e36	movq	-0x20(%rbp), %rax
0000000000007e3a	movw	%dx, (%rax)
0000000000007e3d	movl	$0x100000, -0x4(%rbp)
0000000000007e44	movl	-0x4(%rbp), %eax
0000000000007e47	addq	$0x30, %rsp
0000000000007e4b	popq	%rbp
0000000000007e4c	retq
0000000000007e4d	nopl	(%rax)
_ZydisNodeHandlerModrmModCompact:
0000000000007e50	pushq	%rbp
0000000000007e51	movq	%rsp, %rbp
0000000000007e54	subq	$0x30, %rsp
0000000000007e58	movq	%rdi, -0x10(%rbp)
0000000000007e5c	movq	%rsi, -0x18(%rbp)
0000000000007e60	movq	%rdx, -0x20(%rbp)
0000000000007e64	movq	-0x10(%rbp), %rdi
0000000000007e68	movq	-0x18(%rbp), %rsi
0000000000007e6c	movq	-0x20(%rbp), %rdx
0000000000007e70	callq	_ZydisNodeHandlerModrmMod
0000000000007e75	movl	%eax, -0x24(%rbp)
0000000000007e78	movl	-0x24(%rbp), %eax
0000000000007e7b	andl	$0x80000000, %eax
0000000000007e80	cmpl	$0x0, %eax
0000000000007e83	je	0x7e94
0000000000007e89	movl	-0x24(%rbp), %eax
0000000000007e8c	movl	%eax, -0x4(%rbp)
0000000000007e8f	jmp	0x7ebe
0000000000007e94	jmp	0x7e99
0000000000007e99	xorl	%eax, %eax
0000000000007e9b	movq	-0x20(%rbp), %rcx
0000000000007e9f	movzwl	(%rcx), %edx
0000000000007ea2	cmpl	$0x3, %edx
0000000000007ea5	movl	$0x1, %edx
0000000000007eaa	cmovel	%eax, %edx
0000000000007ead	movw	%dx, %si
0000000000007eb0	movq	-0x20(%rbp), %rcx
0000000000007eb4	movw	%si, (%rcx)
0000000000007eb7	movl	$0x100000, -0x4(%rbp)
0000000000007ebe	movl	-0x4(%rbp), %eax
0000000000007ec1	addq	$0x30, %rsp
0000000000007ec5	popq	%rbp
0000000000007ec6	retq
0000000000007ec7	nopw	(%rax,%rax)
_ZydisNodeHandlerModrmReg:
0000000000007ed0	pushq	%rbp
0000000000007ed1	movq	%rsp, %rbp
0000000000007ed4	subq	$0x30, %rsp
0000000000007ed8	movq	%rdi, -0x10(%rbp)
0000000000007edc	movq	%rsi, -0x18(%rbp)
0000000000007ee0	movq	%rdx, -0x20(%rbp)
0000000000007ee4	cmpq	$0x0, -0x10(%rbp)
0000000000007ee9	setne	%al
0000000000007eec	xorb	$-0x1, %al
0000000000007eee	andb	$0x1, %al
0000000000007ef0	movzbl	%al, %ecx
0000000000007ef3	movslq	%ecx, %rdx
0000000000007ef6	cmpq	$0x0, %rdx
0000000000007efa	je	0x7f1f
0000000000007f00	leaq	0x59975(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000007f07	leaq	0x59298(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007f0e	leaq	0x592c6(%rip), %rcx ## literal pool for: "context"
0000000000007f15	movl	$0xf6d, %edx
0000000000007f1a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007f1f	jmp	0x7f24
0000000000007f24	cmpq	$0x0, -0x18(%rbp)
0000000000007f29	setne	%al
0000000000007f2c	xorb	$-0x1, %al
0000000000007f2e	andb	$0x1, %al
0000000000007f30	movzbl	%al, %ecx
0000000000007f33	movslq	%ecx, %rdx
0000000000007f36	cmpq	$0x0, %rdx
0000000000007f3a	je	0x7f5f
0000000000007f40	leaq	0x59935(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000007f47	leaq	0x59258(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007f4e	leaq	0x5928e(%rip), %rcx ## literal pool for: "instruction"
0000000000007f55	movl	$0xf6e, %edx
0000000000007f5a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007f5f	jmp	0x7f64
0000000000007f64	cmpq	$0x0, -0x20(%rbp)
0000000000007f69	setne	%al
0000000000007f6c	xorb	$-0x1, %al
0000000000007f6e	andb	$0x1, %al
0000000000007f70	movzbl	%al, %ecx
0000000000007f73	movslq	%ecx, %rdx
0000000000007f76	cmpq	$0x0, %rdx
0000000000007f7a	je	0x7f9f
0000000000007f80	leaq	0x598f5(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000007f87	leaq	0x59218(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007f8e	leaq	0x5948d(%rip), %rcx ## literal pool for: "index"
0000000000007f95	movl	$0xf6f, %edx
0000000000007f9a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000007f9f	jmp	0x7fa4
0000000000007fa4	movq	-0x18(%rbp), %rax
0000000000007fa8	cmpb	$0x0, 0x57b(%rax)
0000000000007faf	jne	0x8008
0000000000007fb5	movq	-0x18(%rbp), %rax
0000000000007fb9	movb	0x8(%rax), %cl
0000000000007fbc	movq	-0x18(%rbp), %rax
0000000000007fc0	movb	%cl, 0x57b(%rax)
0000000000007fc6	movq	-0x10(%rbp), %rdi
0000000000007fca	movq	-0x18(%rbp), %rsi
0000000000007fce	leaq	-0x21(%rbp), %rdx
0000000000007fd2	callq	_ZydisInputNext
0000000000007fd7	movl	%eax, -0x28(%rbp)
0000000000007fda	movl	-0x28(%rbp), %eax
0000000000007fdd	andl	$0x80000000, %eax
0000000000007fe2	cmpl	$0x0, %eax
0000000000007fe5	je	0x7ff6
0000000000007feb	movl	-0x28(%rbp), %eax
0000000000007fee	movl	%eax, -0x4(%rbp)
0000000000007ff1	jmp	0x8024
0000000000007ff6	jmp	0x7ffb
0000000000007ffb	movq	-0x18(%rbp), %rdi
0000000000007fff	movzbl	-0x21(%rbp), %esi
0000000000008003	callq	_ZydisDecodeModRM
0000000000008008	movq	-0x18(%rbp), %rax
000000000000800c	movzbl	0x579(%rax), %ecx
0000000000008013	movw	%cx, %dx
0000000000008016	movq	-0x20(%rbp), %rax
000000000000801a	movw	%dx, (%rax)
000000000000801d	movl	$0x100000, -0x4(%rbp)
0000000000008024	movl	-0x4(%rbp), %eax
0000000000008027	addq	$0x30, %rsp
000000000000802b	popq	%rbp
000000000000802c	retq
000000000000802d	nopl	(%rax)
_ZydisNodeHandlerModrmRm:
0000000000008030	pushq	%rbp
0000000000008031	movq	%rsp, %rbp
0000000000008034	subq	$0x30, %rsp
0000000000008038	movq	%rdi, -0x10(%rbp)
000000000000803c	movq	%rsi, -0x18(%rbp)
0000000000008040	movq	%rdx, -0x20(%rbp)
0000000000008044	cmpq	$0x0, -0x10(%rbp)
0000000000008049	setne	%al
000000000000804c	xorb	$-0x1, %al
000000000000804e	andb	$0x1, %al
0000000000008050	movzbl	%al, %ecx
0000000000008053	movslq	%ecx, %rdx
0000000000008056	cmpq	$0x0, %rdx
000000000000805a	je	0x807f
0000000000008060	leaq	0x5982e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
0000000000008067	leaq	0x59138(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000806e	leaq	0x59166(%rip), %rcx ## literal pool for: "context"
0000000000008075	movl	$0xf7f, %edx
000000000000807a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000807f	jmp	0x8084
0000000000008084	cmpq	$0x0, -0x18(%rbp)
0000000000008089	setne	%al
000000000000808c	xorb	$-0x1, %al
000000000000808e	andb	$0x1, %al
0000000000008090	movzbl	%al, %ecx
0000000000008093	movslq	%ecx, %rdx
0000000000008096	cmpq	$0x0, %rdx
000000000000809a	je	0x80bf
00000000000080a0	leaq	0x597ee(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
00000000000080a7	leaq	0x590f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000080ae	leaq	0x5912e(%rip), %rcx ## literal pool for: "instruction"
00000000000080b5	movl	$0xf80, %edx
00000000000080ba	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000080bf	jmp	0x80c4
00000000000080c4	cmpq	$0x0, -0x20(%rbp)
00000000000080c9	setne	%al
00000000000080cc	xorb	$-0x1, %al
00000000000080ce	andb	$0x1, %al
00000000000080d0	movzbl	%al, %ecx
00000000000080d3	movslq	%ecx, %rdx
00000000000080d6	cmpq	$0x0, %rdx
00000000000080da	je	0x80ff
00000000000080e0	leaq	0x597ae(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
00000000000080e7	leaq	0x590b8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000080ee	leaq	0x5932d(%rip), %rcx ## literal pool for: "index"
00000000000080f5	movl	$0xf81, %edx
00000000000080fa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000080ff	jmp	0x8104
0000000000008104	movq	-0x18(%rbp), %rax
0000000000008108	cmpb	$0x0, 0x57b(%rax)
000000000000810f	jne	0x8168
0000000000008115	movq	-0x18(%rbp), %rax
0000000000008119	movb	0x8(%rax), %cl
000000000000811c	movq	-0x18(%rbp), %rax
0000000000008120	movb	%cl, 0x57b(%rax)
0000000000008126	movq	-0x10(%rbp), %rdi
000000000000812a	movq	-0x18(%rbp), %rsi
000000000000812e	leaq	-0x21(%rbp), %rdx
0000000000008132	callq	_ZydisInputNext
0000000000008137	movl	%eax, -0x28(%rbp)
000000000000813a	movl	-0x28(%rbp), %eax
000000000000813d	andl	$0x80000000, %eax
0000000000008142	cmpl	$0x0, %eax
0000000000008145	je	0x8156
000000000000814b	movl	-0x28(%rbp), %eax
000000000000814e	movl	%eax, -0x4(%rbp)
0000000000008151	jmp	0x8184
0000000000008156	jmp	0x815b
000000000000815b	movq	-0x18(%rbp), %rdi
000000000000815f	movzbl	-0x21(%rbp), %esi
0000000000008163	callq	_ZydisDecodeModRM
0000000000008168	movq	-0x18(%rbp), %rax
000000000000816c	movzbl	0x57a(%rax), %ecx
0000000000008173	movw	%cx, %dx
0000000000008176	movq	-0x20(%rbp), %rax
000000000000817a	movw	%dx, (%rax)
000000000000817d	movl	$0x100000, -0x4(%rbp)
0000000000008184	movl	-0x4(%rbp), %eax
0000000000008187	addq	$0x30, %rsp
000000000000818b	popq	%rbp
000000000000818c	retq
000000000000818d	nopl	(%rax)
_ZydisNodeHandlerMandatoryPrefix:
0000000000008190	pushq	%rbp
0000000000008191	movq	%rsp, %rbp
0000000000008194	subq	$0x30, %rsp
0000000000008198	movq	%rdi, -0x8(%rbp)
000000000000819c	movq	%rsi, -0x10(%rbp)
00000000000081a0	movq	%rdx, -0x18(%rbp)
00000000000081a4	cmpq	$0x0, -0x8(%rbp)
00000000000081a9	setne	%al
00000000000081ac	xorb	$-0x1, %al
00000000000081ae	andb	$0x1, %al
00000000000081b0	movzbl	%al, %ecx
00000000000081b3	movslq	%ecx, %rdx
00000000000081b6	cmpq	$0x0, %rdx
00000000000081ba	je	0x81df
00000000000081c0	leaq	0x596e6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
00000000000081c7	leaq	0x58fd8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000081ce	leaq	0x59006(%rip), %rcx ## literal pool for: "context"
00000000000081d5	movl	$0xf91, %edx
00000000000081da	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000081df	jmp	0x81e4
00000000000081e4	cmpq	$0x0, -0x10(%rbp)
00000000000081e9	setne	%al
00000000000081ec	xorb	$-0x1, %al
00000000000081ee	andb	$0x1, %al
00000000000081f0	movzbl	%al, %ecx
00000000000081f3	movslq	%ecx, %rdx
00000000000081f6	cmpq	$0x0, %rdx
00000000000081fa	je	0x821f
0000000000008200	leaq	0x596a6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
0000000000008207	leaq	0x58f98(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000820e	leaq	0x58fce(%rip), %rcx ## literal pool for: "instruction"
0000000000008215	movl	$0xf92, %edx
000000000000821a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000821f	jmp	0x8224
0000000000008224	cmpq	$0x0, -0x18(%rbp)
0000000000008229	setne	%al
000000000000822c	xorb	$-0x1, %al
000000000000822e	andb	$0x1, %al
0000000000008230	movzbl	%al, %ecx
0000000000008233	movslq	%ecx, %rdx
0000000000008236	cmpq	$0x0, %rdx
000000000000823a	je	0x825f
0000000000008240	leaq	0x59666(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
0000000000008247	leaq	0x58f58(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000824e	leaq	0x591cd(%rip), %rcx ## literal pool for: "index"
0000000000008255	movl	$0xf93, %edx
000000000000825a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000825f	jmp	0x8264
0000000000008264	movq	-0x8(%rbp), %rax
0000000000008268	movzbl	0x1c(%rax), %ecx
000000000000826c	movl	%ecx, %edx
000000000000826e	subl	$0x66, %edx
0000000000008271	movl	%ecx, -0x1c(%rbp)
0000000000008274	movl	%edx, -0x20(%rbp)
0000000000008277	je	0x82ae
000000000000827d	jmp	0x8282
0000000000008282	movl	-0x1c(%rbp), %eax
0000000000008285	subl	$0xf2, %eax
000000000000828a	movl	%eax, -0x24(%rbp)
000000000000828d	je	0x8318
0000000000008293	jmp	0x8298
0000000000008298	movl	-0x1c(%rbp), %eax
000000000000829b	subl	$0xf3, %eax
00000000000082a0	movl	%eax, -0x28(%rbp)
00000000000082a3	je	0x82f1
00000000000082a9	jmp	0x833f
00000000000082ae	movq	-0x10(%rbp), %rax
00000000000082b2	movq	-0x8(%rbp), %rcx
00000000000082b6	movzbl	0x23(%rcx), %edx
00000000000082ba	movl	%edx, %ecx
00000000000082bc	movl	$0x2, 0x4cc(%rax,%rcx,8)
00000000000082c7	movq	-0x10(%rbp), %rax
00000000000082cb	movabsq	$-0x400000001, %rcx
00000000000082d5	andq	0x430(%rax), %rcx
00000000000082dc	movq	%rcx, 0x430(%rax)
00000000000082e3	movq	-0x18(%rbp), %rax
00000000000082e7	movw	$0x2, (%rax)
00000000000082ec	jmp	0x8348
00000000000082f1	movq	-0x10(%rbp), %rax
00000000000082f5	movq	-0x8(%rbp), %rcx
00000000000082f9	movzbl	0x23(%rcx), %edx
00000000000082fd	movl	%edx, %ecx
00000000000082ff	movl	$0x2, 0x4cc(%rax,%rcx,8)
000000000000830a	movq	-0x18(%rbp), %rax
000000000000830e	movw	$0x3, (%rax)
0000000000008313	jmp	0x8348
0000000000008318	movq	-0x10(%rbp), %rax
000000000000831c	movq	-0x8(%rbp), %rcx
0000000000008320	movzbl	0x23(%rcx), %edx
0000000000008324	movl	%edx, %ecx
0000000000008326	movl	$0x2, 0x4cc(%rax,%rcx,8)
0000000000008331	movq	-0x18(%rbp), %rax
0000000000008335	movw	$0x4, (%rax)
000000000000833a	jmp	0x8348
000000000000833f	movq	-0x18(%rbp), %rax
0000000000008343	movw	$0x1, (%rax)
0000000000008348	movl	$0x100000, %eax
000000000000834d	addq	$0x30, %rsp
0000000000008351	popq	%rbp
0000000000008352	retq
0000000000008353	nopw	%cs:(%rax,%rax)
000000000000835d	nopl	(%rax)
_ZydisNodeHandlerOperandSize:
0000000000008360	pushq	%rbp
0000000000008361	movq	%rsp, %rbp
0000000000008364	subq	$0x30, %rsp
0000000000008368	movq	%rdi, -0x8(%rbp)
000000000000836c	movq	%rsi, -0x10(%rbp)
0000000000008370	movq	%rdx, -0x18(%rbp)
0000000000008374	cmpq	$0x0, -0x8(%rbp)
0000000000008379	setne	%al
000000000000837c	xorb	$-0x1, %al
000000000000837e	andb	$0x1, %al
0000000000008380	movzbl	%al, %ecx
0000000000008383	movslq	%ecx, %rdx
0000000000008386	cmpq	$0x0, %rdx
000000000000838a	je	0x83af
0000000000008390	leaq	0x59536(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008397	leaq	0x58e08(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000839e	leaq	0x58e36(%rip), %rcx ## literal pool for: "context"
00000000000083a5	movl	$0xfb3, %edx
00000000000083aa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000083af	jmp	0x83b4
00000000000083b4	cmpq	$0x0, -0x10(%rbp)
00000000000083b9	setne	%al
00000000000083bc	xorb	$-0x1, %al
00000000000083be	andb	$0x1, %al
00000000000083c0	movzbl	%al, %ecx
00000000000083c3	movslq	%ecx, %rdx
00000000000083c6	cmpq	$0x0, %rdx
00000000000083ca	je	0x83ef
00000000000083d0	leaq	0x594f6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
00000000000083d7	leaq	0x58dc8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000083de	leaq	0x58dfe(%rip), %rcx ## literal pool for: "instruction"
00000000000083e5	movl	$0xfb4, %edx
00000000000083ea	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000083ef	jmp	0x83f4
00000000000083f4	cmpq	$0x0, -0x18(%rbp)
00000000000083f9	setne	%al
00000000000083fc	xorb	$-0x1, %al
00000000000083fe	andb	$0x1, %al
0000000000008400	movzbl	%al, %ecx
0000000000008403	movslq	%ecx, %rdx
0000000000008406	cmpq	$0x0, %rdx
000000000000840a	je	0x842f
0000000000008410	leaq	0x594b6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008417	leaq	0x58d88(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000841e	leaq	0x58ffd(%rip), %rcx ## literal pool for: "index"
0000000000008425	movl	$0xfb5, %edx
000000000000842a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000842f	jmp	0x8434
0000000000008434	movq	-0x8(%rbp), %rax
0000000000008438	movq	(%rax), %rax
000000000000843b	cmpl	$0x0, (%rax)
000000000000843e	jne	0x8463
0000000000008444	movq	-0x8(%rbp), %rax
0000000000008448	movzbl	0x26(%rax), %ecx
000000000000844c	cmpl	$0x0, %ecx
000000000000844f	je	0x8463
0000000000008455	movq	-0x18(%rbp), %rax
0000000000008459	movw	$0x2, (%rax)
000000000000845e	jmp	0x8581
0000000000008463	movq	-0x10(%rbp), %rax
0000000000008467	movabsq	$0x400000000, %rcx
0000000000008471	andq	0x430(%rax), %rcx
0000000000008478	cmpq	$0x0, %rcx
000000000000847c	je	0x849b
0000000000008482	movq	-0x10(%rbp), %rax
0000000000008486	movq	-0x8(%rbp), %rcx
000000000000848a	movzbl	0x20(%rcx), %edx
000000000000848e	movl	%edx, %ecx
0000000000008490	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000849b	movq	-0x8(%rbp), %rax
000000000000849f	movq	(%rax), %rax
00000000000084a2	movl	(%rax), %ecx
00000000000084a4	movl	%ecx, %edx
00000000000084a6	subl	$0x2, %edx
00000000000084a9	movl	%ecx, -0x1c(%rbp)
00000000000084ac	movl	%edx, -0x20(%rbp)
00000000000084af	jb	0x852b
00000000000084b5	jmp	0x84ba
00000000000084ba	movl	-0x1c(%rbp), %eax
00000000000084bd	subl	$0x2, %eax
00000000000084c0	movl	%eax, -0x24(%rbp)
00000000000084c3	je	0x84f9
00000000000084c9	jmp	0x84ce
00000000000084ce	movl	-0x1c(%rbp), %eax
00000000000084d1	subl	$0x3, %eax
00000000000084d4	movl	%eax, -0x28(%rbp)
00000000000084d7	je	0x852b
00000000000084dd	jmp	0x84e2
00000000000084e2	movl	-0x1c(%rbp), %eax
00000000000084e5	addl	$-0x4, %eax
00000000000084e8	subl	$0x1, %eax
00000000000084eb	movl	%eax, -0x2c(%rbp)
00000000000084ee	ja	0x855d
00000000000084f4	jmp	0x84f9
00000000000084f9	xorl	%eax, %eax
00000000000084fb	movq	-0x10(%rbp), %rcx
00000000000084ff	movabsq	$0x400000000, %rdx
0000000000008509	andq	0x430(%rcx), %rdx
0000000000008510	cmpq	$0x0, %rdx
0000000000008514	movl	$0x1, %esi
0000000000008519	cmovnel	%esi, %eax
000000000000851c	movw	%ax, %di
000000000000851f	movq	-0x18(%rbp), %rcx
0000000000008523	movw	%di, (%rcx)
0000000000008526	jmp	0x857c
000000000000852b	xorl	%eax, %eax
000000000000852d	movq	-0x10(%rbp), %rcx
0000000000008531	movabsq	$0x400000000, %rdx
000000000000853b	andq	0x430(%rcx), %rdx
0000000000008542	cmpq	$0x0, %rdx
0000000000008546	movl	$0x1, %esi
000000000000854b	cmovnel	%eax, %esi
000000000000854e	movw	%si, %di
0000000000008551	movq	-0x18(%rbp), %rcx
0000000000008555	movw	%di, (%rcx)
0000000000008558	jmp	0x857c
000000000000855d	leaq	0x59369(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008564	leaq	0x58c3b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000856b	leaq	0x58e9a(%rip), %rcx ## literal pool for: "0"
0000000000008572	movl	$0xfce, %edx
0000000000008577	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000857c	jmp	0x8581
0000000000008581	movl	$0x100000, %eax
0000000000008586	addq	$0x30, %rsp
000000000000858a	popq	%rbp
000000000000858b	retq
000000000000858c	nopl	(%rax)
_ZydisNodeHandlerAddressSize:
0000000000008590	pushq	%rbp
0000000000008591	movq	%rsp, %rbp
0000000000008594	subq	$0x30, %rsp
0000000000008598	movq	%rdi, -0x8(%rbp)
000000000000859c	movq	%rsi, -0x10(%rbp)
00000000000085a0	movq	%rdx, -0x18(%rbp)
00000000000085a4	cmpq	$0x0, -0x8(%rbp)
00000000000085a9	setne	%al
00000000000085ac	xorb	$-0x1, %al
00000000000085ae	andb	$0x1, %al
00000000000085b0	movzbl	%al, %ecx
00000000000085b3	movslq	%ecx, %rdx
00000000000085b6	cmpq	$0x0, %rdx
00000000000085ba	je	0x85df
00000000000085c0	leaq	0x59322(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
00000000000085c7	leaq	0x58bd8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000085ce	leaq	0x58c06(%rip), %rcx ## literal pool for: "context"
00000000000085d5	movl	$0xfd8, %edx
00000000000085da	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000085df	jmp	0x85e4
00000000000085e4	cmpq	$0x0, -0x10(%rbp)
00000000000085e9	setne	%al
00000000000085ec	xorb	$-0x1, %al
00000000000085ee	andb	$0x1, %al
00000000000085f0	movzbl	%al, %ecx
00000000000085f3	movslq	%ecx, %rdx
00000000000085f6	cmpq	$0x0, %rdx
00000000000085fa	je	0x861f
0000000000008600	leaq	0x592e2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008607	leaq	0x58b98(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000860e	leaq	0x58bce(%rip), %rcx ## literal pool for: "instruction"
0000000000008615	movl	$0xfd9, %edx
000000000000861a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000861f	jmp	0x8624
0000000000008624	cmpq	$0x0, -0x18(%rbp)
0000000000008629	setne	%al
000000000000862c	xorb	$-0x1, %al
000000000000862e	andb	$0x1, %al
0000000000008630	movzbl	%al, %ecx
0000000000008633	movslq	%ecx, %rdx
0000000000008636	cmpq	$0x0, %rdx
000000000000863a	je	0x865f
0000000000008640	leaq	0x592a2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008647	leaq	0x58b58(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000864e	leaq	0x58dcd(%rip), %rcx ## literal pool for: "index"
0000000000008655	movl	$0xfda, %edx
000000000000865a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000865f	jmp	0x8664
0000000000008664	movq	-0x8(%rbp), %rax
0000000000008668	movq	(%rax), %rax
000000000000866b	movl	0x4(%rax), %ecx
000000000000866e	testl	%ecx, %ecx
0000000000008670	movl	%ecx, -0x1c(%rbp)
0000000000008673	je	0x86a6
0000000000008679	jmp	0x867e
000000000000867e	movl	-0x1c(%rbp), %eax
0000000000008681	subl	$0x1, %eax
0000000000008684	movl	%eax, -0x20(%rbp)
0000000000008687	je	0x86d8
000000000000868d	jmp	0x8692
0000000000008692	movl	-0x1c(%rbp), %eax
0000000000008695	subl	$0x2, %eax
0000000000008698	movl	%eax, -0x24(%rbp)
000000000000869b	je	0x870a
00000000000086a1	jmp	0x873f
00000000000086a6	xorl	%eax, %eax
00000000000086a8	movq	-0x10(%rbp), %rcx
00000000000086ac	movabsq	$0x800000000, %rdx
00000000000086b6	andq	0x430(%rcx), %rdx
00000000000086bd	cmpq	$0x0, %rdx
00000000000086c1	movl	$0x1, %esi
00000000000086c6	cmovnel	%esi, %eax
00000000000086c9	movw	%ax, %di
00000000000086cc	movq	-0x18(%rbp), %rcx
00000000000086d0	movw	%di, (%rcx)
00000000000086d3	jmp	0x875e
00000000000086d8	xorl	%eax, %eax
00000000000086da	movq	-0x10(%rbp), %rcx
00000000000086de	movabsq	$0x800000000, %rdx
00000000000086e8	andq	0x430(%rcx), %rdx
00000000000086ef	cmpq	$0x0, %rdx
00000000000086f3	movl	$0x1, %esi
00000000000086f8	cmovnel	%eax, %esi
00000000000086fb	movw	%si, %di
00000000000086fe	movq	-0x18(%rbp), %rcx
0000000000008702	movw	%di, (%rcx)
0000000000008705	jmp	0x875e
000000000000870a	movq	-0x10(%rbp), %rax
000000000000870e	movabsq	$0x800000000, %rcx
0000000000008718	andq	0x430(%rax), %rcx
000000000000871f	cmpq	$0x0, %rcx
0000000000008723	movl	$0x1, %edx
0000000000008728	movl	$0x2, %esi
000000000000872d	cmovnel	%edx, %esi
0000000000008730	movw	%si, %di
0000000000008733	movq	-0x18(%rbp), %rax
0000000000008737	movw	%di, (%rax)
000000000000873a	jmp	0x875e
000000000000873f	leaq	0x591a3(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008746	leaq	0x58a59(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000874d	leaq	0x58cb8(%rip), %rcx ## literal pool for: "0"
0000000000008754	movl	$0xfed, %edx
0000000000008759	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000875e	movl	$0x100000, %eax
0000000000008763	addq	$0x30, %rsp
0000000000008767	popq	%rbp
0000000000008768	retq
0000000000008769	nopl	(%rax)
_ZydisNodeHandlerVectorLength:
0000000000008770	pushq	%rbp
0000000000008771	movq	%rsp, %rbp
0000000000008774	subq	$0x30, %rsp
0000000000008778	movq	%rdi, -0x10(%rbp)
000000000000877c	movq	%rsi, -0x18(%rbp)
0000000000008780	movq	%rdx, -0x20(%rbp)
0000000000008784	cmpq	$0x0, -0x10(%rbp)
0000000000008789	setne	%al
000000000000878c	xorb	$-0x1, %al
000000000000878e	andb	$0x1, %al
0000000000008790	movzbl	%al, %ecx
0000000000008793	movslq	%ecx, %rdx
0000000000008796	cmpq	$0x0, %rdx
000000000000879a	je	0x87bf
00000000000087a0	leaq	0x5915e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000087a7	leaq	0x589f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000087ae	leaq	0x58a26(%rip), %rcx ## literal pool for: "context"
00000000000087b5	movl	$0xff5, %edx
00000000000087ba	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000087bf	jmp	0x87c4
00000000000087c4	cmpq	$0x0, -0x18(%rbp)
00000000000087c9	setne	%al
00000000000087cc	xorb	$-0x1, %al
00000000000087ce	andb	$0x1, %al
00000000000087d0	movzbl	%al, %ecx
00000000000087d3	movslq	%ecx, %rdx
00000000000087d6	cmpq	$0x0, %rdx
00000000000087da	je	0x87ff
00000000000087e0	leaq	0x5911e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000087e7	leaq	0x589b8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000087ee	leaq	0x589ee(%rip), %rcx ## literal pool for: "instruction"
00000000000087f5	movl	$0xff6, %edx
00000000000087fa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000087ff	jmp	0x8804
0000000000008804	cmpq	$0x0, -0x20(%rbp)
0000000000008809	setne	%al
000000000000880c	xorb	$-0x1, %al
000000000000880e	andb	$0x1, %al
0000000000008810	movzbl	%al, %ecx
0000000000008813	movslq	%ecx, %rdx
0000000000008816	cmpq	$0x0, %rdx
000000000000881a	je	0x883f
0000000000008820	leaq	0x590de(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008827	leaq	0x58978(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000882e	leaq	0x58bed(%rip), %rcx ## literal pool for: "index"
0000000000008835	movl	$0xff7, %edx
000000000000883a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000883f	jmp	0x8844
0000000000008844	movq	-0x18(%rbp), %rax
0000000000008848	movl	0xc(%rax), %ecx
000000000000884b	addl	$-0x2, %ecx
000000000000884e	movl	%ecx, %eax
0000000000008850	subl	$0x3, %ecx
0000000000008853	movq	%rax, -0x28(%rbp)
0000000000008857	movl	%ecx, -0x2c(%rbp)
000000000000885a	ja	0x89c8
0000000000008860	leaq	0x1c1(%rip), %rax
0000000000008867	movq	-0x28(%rbp), %rcx
000000000000886b	movslq	(%rax,%rcx,4), %rdx
000000000000886f	addq	%rax, %rdx
0000000000008872	jmpq	*%rdx
0000000000008874	movq	-0x18(%rbp), %rax
0000000000008878	movq	0x430(%rax), %rax
000000000000887f	andq	$0x8, %rax
0000000000008883	cmpq	$0x0, %rax
0000000000008887	setne	%cl
000000000000888a	xorb	$-0x1, %cl
000000000000888d	andb	$0x1, %cl
0000000000008890	movzbl	%cl, %edx
0000000000008893	movslq	%edx, %rax
0000000000008896	cmpq	$0x0, %rax
000000000000889a	je	0x88bf
00000000000088a0	leaq	0x5905e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000088a7	leaq	0x588f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000088ae	leaq	0x58b73(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
00000000000088b5	movl	$0xffc, %edx
00000000000088ba	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000088bf	jmp	0x88c4
00000000000088c4	jmp	0x89e7
00000000000088c9	movq	-0x18(%rbp), %rax
00000000000088cd	movq	0x430(%rax), %rax
00000000000088d4	andq	$0x10, %rax
00000000000088d8	cmpq	$0x0, %rax
00000000000088dc	setne	%cl
00000000000088df	xorb	$-0x1, %cl
00000000000088e2	andb	$0x1, %cl
00000000000088e5	movzbl	%cl, %edx
00000000000088e8	movslq	%edx, %rax
00000000000088eb	cmpq	$0x0, %rax
00000000000088ef	je	0x8914
00000000000088f5	leaq	0x59009(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000088fc	leaq	0x588a3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008903	leaq	0x58b5f(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
000000000000890a	movl	$0xfff, %edx
000000000000890f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008914	jmp	0x8919
0000000000008919	jmp	0x89e7
000000000000891e	movq	-0x18(%rbp), %rax
0000000000008922	movq	0x430(%rax), %rax
0000000000008929	andq	$0x20, %rax
000000000000892d	cmpq	$0x0, %rax
0000000000008931	setne	%cl
0000000000008934	xorb	$-0x1, %cl
0000000000008937	andb	$0x1, %cl
000000000000893a	movzbl	%cl, %edx
000000000000893d	movslq	%edx, %rax
0000000000008940	cmpq	$0x0, %rax
0000000000008944	je	0x8969
000000000000894a	leaq	0x58fb4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008951	leaq	0x5884e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008958	leaq	0x58b4d(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
000000000000895f	movl	$0x1002, %edx
0000000000008964	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008969	jmp	0x896e
000000000000896e	jmp	0x89e7
0000000000008973	movq	-0x18(%rbp), %rax
0000000000008977	movq	0x430(%rax), %rax
000000000000897e	andq	$0x40, %rax
0000000000008982	cmpq	$0x0, %rax
0000000000008986	setne	%cl
0000000000008989	xorb	$-0x1, %cl
000000000000898c	andb	$0x1, %cl
000000000000898f	movzbl	%cl, %edx
0000000000008992	movslq	%edx, %rax
0000000000008995	cmpq	$0x0, %rax
0000000000008999	je	0x89be
000000000000899f	leaq	0x58f5f(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000089a6	leaq	0x587f9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000089ad	leaq	0x58b25(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
00000000000089b4	movl	$0x1005, %edx
00000000000089b9	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000089be	jmp	0x89c3
00000000000089c3	jmp	0x89e7
00000000000089c8	leaq	0x58f36(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
00000000000089cf	leaq	0x587d0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000089d6	leaq	0x58a2f(%rip), %rcx ## literal pool for: "0"
00000000000089dd	movl	$0x1008, %edx
00000000000089e2	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000089e7	movq	-0x10(%rbp), %rax
00000000000089eb	movzbl	0x2b(%rax), %ecx
00000000000089ef	movw	%cx, %dx
00000000000089f2	movq	-0x20(%rbp), %rax
00000000000089f6	movw	%dx, (%rax)
00000000000089f9	movq	-0x20(%rbp), %rax
00000000000089fd	movzwl	(%rax), %ecx
0000000000008a00	cmpl	$0x3, %ecx
0000000000008a03	jne	0x8a15
0000000000008a09	movl	$0x80200001, -0x4(%rbp)
0000000000008a10	jmp	0x8a1c
0000000000008a15	movl	$0x100000, -0x4(%rbp)
0000000000008a1c	movl	-0x4(%rbp), %eax
0000000000008a1f	addq	$0x30, %rsp
0000000000008a23	popq	%rbp
0000000000008a24	retq
0000000000008a25	nopl	(%rax)
0000000000008a28	.byte 0x4c #bad opcode
0000000000008a29	.byte 0xfe #bad opcode
0000000000008a2a	.byte 0xff #bad opcode
0000000000008a2b	jmpq	*-0x9000002(%rcx)
0000000000008a31	.byte 0xfe #bad opcode
0000000000008a32	.byte 0xff #bad opcode
0000000000008a33	decl	-0x1(%rbx)
0000000000008a36	.byte 0xff #bad opcode
0000000000008a37	decl	(%rdi)
0000000000008a39	.byte 0x1f #bad opcode
0000000000008a3a	testb	%al, (%rax)
0000000000008a3c	addb	%al, (%rax)
0000000000008a3e	addb	%al, (%rax)
_ZydisNodeHandlerRexW:
0000000000008a40	pushq	%rbp
0000000000008a41	movq	%rsp, %rbp
0000000000008a44	subq	$0x30, %rsp
0000000000008a48	movq	%rdi, -0x8(%rbp)
0000000000008a4c	movq	%rsi, -0x10(%rbp)
0000000000008a50	movq	%rdx, -0x18(%rbp)
0000000000008a54	cmpq	$0x0, -0x8(%rbp)
0000000000008a59	setne	%al
0000000000008a5c	xorb	$-0x1, %al
0000000000008a5e	andb	$0x1, %al
0000000000008a60	movzbl	%al, %ecx
0000000000008a63	movslq	%ecx, %rdx
0000000000008a66	cmpq	$0x0, %rdx
0000000000008a6a	je	0x8a8f
0000000000008a70	leaq	0x58eab(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008a77	leaq	0x58728(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008a7e	leaq	0x58756(%rip), %rcx ## literal pool for: "context"
0000000000008a85	movl	$0x1015, %edx
0000000000008a8a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008a8f	jmp	0x8a94
0000000000008a94	cmpq	$0x0, -0x10(%rbp)
0000000000008a99	setne	%al
0000000000008a9c	xorb	$-0x1, %al
0000000000008a9e	andb	$0x1, %al
0000000000008aa0	movzbl	%al, %ecx
0000000000008aa3	movslq	%ecx, %rdx
0000000000008aa6	cmpq	$0x0, %rdx
0000000000008aaa	je	0x8acf
0000000000008ab0	leaq	0x58e6b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008ab7	leaq	0x586e8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008abe	leaq	0x5871e(%rip), %rcx ## literal pool for: "instruction"
0000000000008ac5	movl	$0x1016, %edx
0000000000008aca	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008acf	jmp	0x8ad4
0000000000008ad4	cmpq	$0x0, -0x18(%rbp)
0000000000008ad9	setne	%al
0000000000008adc	xorb	$-0x1, %al
0000000000008ade	andb	$0x1, %al
0000000000008ae0	movzbl	%al, %ecx
0000000000008ae3	movslq	%ecx, %rdx
0000000000008ae6	cmpq	$0x0, %rdx
0000000000008aea	je	0x8b0f
0000000000008af0	leaq	0x58e2b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008af7	leaq	0x586a8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008afe	leaq	0x5891d(%rip), %rcx ## literal pool for: "index"
0000000000008b05	movl	$0x1017, %edx
0000000000008b0a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008b0f	jmp	0x8b14
0000000000008b14	movq	-0x10(%rbp), %rax
0000000000008b18	movl	0xc(%rax), %ecx
0000000000008b1b	movl	%ecx, %eax
0000000000008b1d	movq	%rax, %rdx
0000000000008b20	subq	$0x5, %rdx
0000000000008b24	movq	%rax, -0x20(%rbp)
0000000000008b28	movq	%rdx, -0x28(%rbp)
0000000000008b2c	ja	0x8c9f
0000000000008b32	leaq	0x1a3(%rip), %rax
0000000000008b39	movq	-0x20(%rbp), %rcx
0000000000008b3d	movslq	(%rax,%rcx,4), %rdx
0000000000008b41	addq	%rax, %rdx
0000000000008b44	jmpq	*%rdx
0000000000008b46	jmp	0x8cbe
0000000000008b4b	movq	-0x10(%rbp), %rax
0000000000008b4f	movq	0x430(%rax), %rax
0000000000008b56	andq	$0x8, %rax
0000000000008b5a	cmpq	$0x0, %rax
0000000000008b5e	setne	%cl
0000000000008b61	xorb	$-0x1, %cl
0000000000008b64	andb	$0x1, %cl
0000000000008b67	movzbl	%cl, %edx
0000000000008b6a	movslq	%edx, %rax
0000000000008b6d	cmpq	$0x0, %rax
0000000000008b71	je	0x8b96
0000000000008b77	leaq	0x58da4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008b7e	leaq	0x58621(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008b85	leaq	0x5889c(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
0000000000008b8c	movl	$0x101f, %edx
0000000000008b91	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008b96	jmp	0x8b9b
0000000000008b9b	jmp	0x8cbe
0000000000008ba0	movq	-0x10(%rbp), %rax
0000000000008ba4	movq	0x430(%rax), %rax
0000000000008bab	andq	$0x10, %rax
0000000000008baf	cmpq	$0x0, %rax
0000000000008bb3	setne	%cl
0000000000008bb6	xorb	$-0x1, %cl
0000000000008bb9	andb	$0x1, %cl
0000000000008bbc	movzbl	%cl, %edx
0000000000008bbf	movslq	%edx, %rax
0000000000008bc2	cmpq	$0x0, %rax
0000000000008bc6	je	0x8beb
0000000000008bcc	leaq	0x58d4f(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008bd3	leaq	0x585cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008bda	leaq	0x58888(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
0000000000008be1	movl	$0x1022, %edx
0000000000008be6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008beb	jmp	0x8bf0
0000000000008bf0	jmp	0x8cbe
0000000000008bf5	movq	-0x10(%rbp), %rax
0000000000008bf9	movq	0x430(%rax), %rax
0000000000008c00	andq	$0x20, %rax
0000000000008c04	cmpq	$0x0, %rax
0000000000008c08	setne	%cl
0000000000008c0b	xorb	$-0x1, %cl
0000000000008c0e	andb	$0x1, %cl
0000000000008c11	movzbl	%cl, %edx
0000000000008c14	movslq	%edx, %rax
0000000000008c17	cmpq	$0x0, %rax
0000000000008c1b	je	0x8c40
0000000000008c21	leaq	0x58cfa(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008c28	leaq	0x58577(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008c2f	leaq	0x58876(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
0000000000008c36	movl	$0x1025, %edx
0000000000008c3b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008c40	jmp	0x8c45
0000000000008c45	jmp	0x8cbe
0000000000008c4a	movq	-0x10(%rbp), %rax
0000000000008c4e	movq	0x430(%rax), %rax
0000000000008c55	andq	$0x40, %rax
0000000000008c59	cmpq	$0x0, %rax
0000000000008c5d	setne	%cl
0000000000008c60	xorb	$-0x1, %cl
0000000000008c63	andb	$0x1, %cl
0000000000008c66	movzbl	%cl, %edx
0000000000008c69	movslq	%edx, %rax
0000000000008c6c	cmpq	$0x0, %rax
0000000000008c70	je	0x8c95
0000000000008c76	leaq	0x58ca5(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008c7d	leaq	0x58522(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008c84	leaq	0x5884e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000008c8b	movl	$0x1028, %edx
0000000000008c90	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008c95	jmp	0x8c9a
0000000000008c9a	jmp	0x8cbe
0000000000008c9f	leaq	0x58c7c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008ca6	leaq	0x584f9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008cad	leaq	0x58758(%rip), %rcx ## literal pool for: "0"
0000000000008cb4	movl	$0x102b, %edx
0000000000008cb9	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008cbe	movq	-0x8(%rbp), %rax
0000000000008cc2	movzbl	0x26(%rax), %ecx
0000000000008cc6	movw	%cx, %dx
0000000000008cc9	movq	-0x18(%rbp), %rax
0000000000008ccd	movw	%dx, (%rax)
0000000000008cd0	movl	$0x100000, %eax
0000000000008cd5	addq	$0x30, %rsp
0000000000008cd9	popq	%rbp
0000000000008cda	retq
0000000000008cdb	nop
0000000000008cdc	pushq	$-0x2
0000000000008cde	.byte 0xff #bad opcode
0000000000008cdf	incl	%ebx
0000000000008ce1	.byte 0xff #bad opcode
0000000000008ce2	.byte 0xff #bad opcode
0000000000008ce3	ljmpl	*-0x2(%rdi)
0000000000008ce6	.byte 0xff #bad opcode
0000000000008ce7	incl	%esp
0000000000008ce9	.byte 0xfe #bad opcode
0000000000008cea	.byte 0xff #bad opcode
0000000000008ceb	lcalll	*(%rcx)
0000000000008ced	.byte 0xff #bad opcode
0000000000008cee	.byte 0xff #bad opcode
0000000000008cef	ljmpl	*-0x1(%rsi)
0000000000008cf2	.byte 0xff #bad opcode
0000000000008cf3	jmpq	*0x2e(%rsi)
0000000000008cf6	nopl	(%rax,%rax)
0000000000008cfe	nop
_ZydisNodeHandlerRexB:
0000000000008d00	pushq	%rbp
0000000000008d01	movq	%rsp, %rbp
0000000000008d04	subq	$0x30, %rsp
0000000000008d08	movq	%rdi, -0x8(%rbp)
0000000000008d0c	movq	%rsi, -0x10(%rbp)
0000000000008d10	movq	%rdx, -0x18(%rbp)
0000000000008d14	cmpq	$0x0, -0x8(%rbp)
0000000000008d19	setne	%al
0000000000008d1c	xorb	$-0x1, %al
0000000000008d1e	andb	$0x1, %al
0000000000008d20	movzbl	%al, %ecx
0000000000008d23	movslq	%ecx, %rdx
0000000000008d26	cmpq	$0x0, %rdx
0000000000008d2a	je	0x8d4f
0000000000008d30	leaq	0x58c00(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008d37	leaq	0x58468(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008d3e	leaq	0x58496(%rip), %rcx ## literal pool for: "context"
0000000000008d45	movl	$0x1034, %edx
0000000000008d4a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008d4f	jmp	0x8d54
0000000000008d54	cmpq	$0x0, -0x10(%rbp)
0000000000008d59	setne	%al
0000000000008d5c	xorb	$-0x1, %al
0000000000008d5e	andb	$0x1, %al
0000000000008d60	movzbl	%al, %ecx
0000000000008d63	movslq	%ecx, %rdx
0000000000008d66	cmpq	$0x0, %rdx
0000000000008d6a	je	0x8d8f
0000000000008d70	leaq	0x58bc0(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008d77	leaq	0x58428(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008d7e	leaq	0x5845e(%rip), %rcx ## literal pool for: "instruction"
0000000000008d85	movl	$0x1035, %edx
0000000000008d8a	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008d8f	jmp	0x8d94
0000000000008d94	cmpq	$0x0, -0x18(%rbp)
0000000000008d99	setne	%al
0000000000008d9c	xorb	$-0x1, %al
0000000000008d9e	andb	$0x1, %al
0000000000008da0	movzbl	%al, %ecx
0000000000008da3	movslq	%ecx, %rdx
0000000000008da6	cmpq	$0x0, %rdx
0000000000008daa	je	0x8dcf
0000000000008db0	leaq	0x58b80(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008db7	leaq	0x583e8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008dbe	leaq	0x5865d(%rip), %rcx ## literal pool for: "index"
0000000000008dc5	movl	$0x1036, %edx
0000000000008dca	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008dcf	jmp	0x8dd4
0000000000008dd4	movq	-0x10(%rbp), %rax
0000000000008dd8	movl	0xc(%rax), %ecx
0000000000008ddb	movl	%ecx, %eax
0000000000008ddd	movq	%rax, %rdx
0000000000008de0	subq	$0x5, %rdx
0000000000008de4	movq	%rax, -0x20(%rbp)
0000000000008de8	movq	%rdx, -0x28(%rbp)
0000000000008dec	ja	0x8f5f
0000000000008df2	leaq	0x1a3(%rip), %rax
0000000000008df9	movq	-0x20(%rbp), %rcx
0000000000008dfd	movslq	(%rax,%rcx,4), %rdx
0000000000008e01	addq	%rax, %rdx
0000000000008e04	jmpq	*%rdx
0000000000008e06	jmp	0x8f7e
0000000000008e0b	movq	-0x10(%rbp), %rax
0000000000008e0f	movq	0x430(%rax), %rax
0000000000008e16	andq	$0x8, %rax
0000000000008e1a	cmpq	$0x0, %rax
0000000000008e1e	setne	%cl
0000000000008e21	xorb	$-0x1, %cl
0000000000008e24	andb	$0x1, %cl
0000000000008e27	movzbl	%cl, %edx
0000000000008e2a	movslq	%edx, %rax
0000000000008e2d	cmpq	$0x0, %rax
0000000000008e31	je	0x8e56
0000000000008e37	leaq	0x58af9(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008e3e	leaq	0x58361(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008e45	leaq	0x585dc(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
0000000000008e4c	movl	$0x103e, %edx
0000000000008e51	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008e56	jmp	0x8e5b
0000000000008e5b	jmp	0x8f7e
0000000000008e60	movq	-0x10(%rbp), %rax
0000000000008e64	movq	0x430(%rax), %rax
0000000000008e6b	andq	$0x10, %rax
0000000000008e6f	cmpq	$0x0, %rax
0000000000008e73	setne	%cl
0000000000008e76	xorb	$-0x1, %cl
0000000000008e79	andb	$0x1, %cl
0000000000008e7c	movzbl	%cl, %edx
0000000000008e7f	movslq	%edx, %rax
0000000000008e82	cmpq	$0x0, %rax
0000000000008e86	je	0x8eab
0000000000008e8c	leaq	0x58aa4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008e93	leaq	0x5830c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008e9a	leaq	0x585c8(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
0000000000008ea1	movl	$0x1041, %edx
0000000000008ea6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008eab	jmp	0x8eb0
0000000000008eb0	jmp	0x8f7e
0000000000008eb5	movq	-0x10(%rbp), %rax
0000000000008eb9	movq	0x430(%rax), %rax
0000000000008ec0	andq	$0x20, %rax
0000000000008ec4	cmpq	$0x0, %rax
0000000000008ec8	setne	%cl
0000000000008ecb	xorb	$-0x1, %cl
0000000000008ece	andb	$0x1, %cl
0000000000008ed1	movzbl	%cl, %edx
0000000000008ed4	movslq	%edx, %rax
0000000000008ed7	cmpq	$0x0, %rax
0000000000008edb	je	0x8f00
0000000000008ee1	leaq	0x58a4f(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008ee8	leaq	0x582b7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008eef	leaq	0x585b6(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
0000000000008ef6	movl	$0x1044, %edx
0000000000008efb	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008f00	jmp	0x8f05
0000000000008f05	jmp	0x8f7e
0000000000008f0a	movq	-0x10(%rbp), %rax
0000000000008f0e	movq	0x430(%rax), %rax
0000000000008f15	andq	$0x40, %rax
0000000000008f19	cmpq	$0x0, %rax
0000000000008f1d	setne	%cl
0000000000008f20	xorb	$-0x1, %cl
0000000000008f23	andb	$0x1, %cl
0000000000008f26	movzbl	%cl, %edx
0000000000008f29	movslq	%edx, %rax
0000000000008f2c	cmpq	$0x0, %rax
0000000000008f30	je	0x8f55
0000000000008f36	leaq	0x589fa(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008f3d	leaq	0x58262(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008f44	leaq	0x5858e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000008f4b	movl	$0x1047, %edx
0000000000008f50	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008f55	jmp	0x8f5a
0000000000008f5a	jmp	0x8f7e
0000000000008f5f	leaq	0x589d1(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000008f66	leaq	0x58239(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008f6d	leaq	0x58498(%rip), %rcx ## literal pool for: "0"
0000000000008f74	movl	$0x104a, %edx
0000000000008f79	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000008f7e	movq	-0x8(%rbp), %rax
0000000000008f82	movzbl	0x29(%rax), %ecx
0000000000008f86	movw	%cx, %dx
0000000000008f89	movq	-0x18(%rbp), %rax
0000000000008f8d	movw	%dx, (%rax)
0000000000008f90	movl	$0x100000, %eax
0000000000008f95	addq	$0x30, %rsp
0000000000008f99	popq	%rbp
0000000000008f9a	retq
0000000000008f9b	nop
0000000000008f9c	pushq	$-0x2
0000000000008f9e	.byte 0xff #bad opcode
0000000000008f9f	incl	%ebx
0000000000008fa1	.byte 0xff #bad opcode
0000000000008fa2	.byte 0xff #bad opcode
0000000000008fa3	ljmpl	*-0x2(%rdi)
0000000000008fa6	.byte 0xff #bad opcode
0000000000008fa7	incl	%esp
0000000000008fa9	.byte 0xfe #bad opcode
0000000000008faa	.byte 0xff #bad opcode
0000000000008fab	lcalll	*(%rcx)
0000000000008fad	.byte 0xff #bad opcode
0000000000008fae	.byte 0xff #bad opcode
0000000000008faf	ljmpl	*-0x1(%rsi)
0000000000008fb2	.byte 0xff #bad opcode
0000000000008fb3	jmpq	*0x2e(%rsi)
0000000000008fb6	nopl	(%rax,%rax)
0000000000008fbe	nop
_ZydisNodeHandlerEvexB:
0000000000008fc0	pushq	%rbp
0000000000008fc1	movq	%rsp, %rbp
0000000000008fc4	subq	$0x10, %rsp
0000000000008fc8	movq	%rdi, -0x8(%rbp)
0000000000008fcc	movq	%rsi, -0x10(%rbp)
0000000000008fd0	cmpq	$0x0, -0x8(%rbp)
0000000000008fd5	setne	%al
0000000000008fd8	xorb	$-0x1, %al
0000000000008fda	andb	$0x1, %al
0000000000008fdc	movzbl	%al, %ecx
0000000000008fdf	movslq	%ecx, %rsi
0000000000008fe2	cmpq	$0x0, %rsi
0000000000008fe6	je	0x900b
0000000000008fec	leaq	0x58959(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
0000000000008ff3	leaq	0x581ac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008ffa	leaq	0x581e2(%rip), %rcx ## literal pool for: "instruction"
0000000000009001	movl	$0x1053, %edx
0000000000009006	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000900b	jmp	0x9010
0000000000009010	cmpq	$0x0, -0x10(%rbp)
0000000000009015	setne	%al
0000000000009018	xorb	$-0x1, %al
000000000000901a	andb	$0x1, %al
000000000000901c	movzbl	%al, %ecx
000000000000901f	movslq	%ecx, %rdx
0000000000009022	cmpq	$0x0, %rdx
0000000000009026	je	0x904b
000000000000902c	leaq	0x58919(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
0000000000009033	leaq	0x5816c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000903a	leaq	0x583e1(%rip), %rcx ## literal pool for: "index"
0000000000009041	movl	$0x1054, %edx
0000000000009046	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000904b	jmp	0x9050
0000000000009050	movq	-0x8(%rbp), %rax
0000000000009054	cmpl	$0x4, 0xc(%rax)
0000000000009058	sete	%cl
000000000000905b	xorb	$-0x1, %cl
000000000000905e	andb	$0x1, %cl
0000000000009061	movzbl	%cl, %edx
0000000000009064	movslq	%edx, %rax
0000000000009067	cmpq	$0x0, %rax
000000000000906b	je	0x9090
0000000000009071	leaq	0x588d4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
0000000000009078	leaq	0x58127(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000907f	leaq	0x588dc(%rip), %rcx ## literal pool for: "instruction->encoding == ZYDIS_INSTRUCTION_ENCODING_EVEX"
0000000000009086	movl	$0x1056, %edx
000000000000908b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009090	jmp	0x9095
0000000000009095	movq	-0x8(%rbp), %rax
0000000000009099	movq	0x430(%rax), %rax
00000000000090a0	andq	$0x20, %rax
00000000000090a4	cmpq	$0x0, %rax
00000000000090a8	setne	%cl
00000000000090ab	xorb	$-0x1, %cl
00000000000090ae	andb	$0x1, %cl
00000000000090b1	movzbl	%cl, %edx
00000000000090b4	movslq	%edx, %rax
00000000000090b7	cmpq	$0x0, %rax
00000000000090bb	je	0x90e0
00000000000090c1	leaq	0x58884(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
00000000000090c8	leaq	0x580d7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000090cf	leaq	0x583d6(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
00000000000090d6	movl	$0x1057, %edx
00000000000090db	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000090e0	jmp	0x90e5
00000000000090e5	movq	-0x8(%rbp), %rax
00000000000090e9	movzbl	0x567(%rax), %ecx
00000000000090f0	movw	%cx, %dx
00000000000090f3	movq	-0x10(%rbp), %rax
00000000000090f7	movw	%dx, (%rax)
00000000000090fa	movl	$0x100000, %eax
00000000000090ff	addq	$0x10, %rsp
0000000000009103	popq	%rbp
0000000000009104	retq
0000000000009105	nopw	%cs:(%rax,%rax)
000000000000910f	nop
_ZydisNodeHandlerMvexE:
0000000000009110	pushq	%rbp
0000000000009111	movq	%rsp, %rbp
0000000000009114	subq	$0x10, %rsp
0000000000009118	movq	%rdi, -0x8(%rbp)
000000000000911c	movq	%rsi, -0x10(%rbp)
0000000000009120	cmpq	$0x0, -0x8(%rbp)
0000000000009125	setne	%al
0000000000009128	xorb	$-0x1, %al
000000000000912a	andb	$0x1, %al
000000000000912c	movzbl	%al, %ecx
000000000000912f	movslq	%ecx, %rsi
0000000000009132	cmpq	$0x0, %rsi
0000000000009136	je	0x915b
000000000000913c	leaq	0x58858(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009143	leaq	0x5805c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000914a	leaq	0x58092(%rip), %rcx ## literal pool for: "instruction"
0000000000009151	movl	$0x1060, %edx
0000000000009156	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000915b	jmp	0x9160
0000000000009160	cmpq	$0x0, -0x10(%rbp)
0000000000009165	setne	%al
0000000000009168	xorb	$-0x1, %al
000000000000916a	andb	$0x1, %al
000000000000916c	movzbl	%al, %ecx
000000000000916f	movslq	%ecx, %rdx
0000000000009172	cmpq	$0x0, %rdx
0000000000009176	je	0x919b
000000000000917c	leaq	0x58818(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009183	leaq	0x5801c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000918a	leaq	0x58291(%rip), %rcx ## literal pool for: "index"
0000000000009191	movl	$0x1061, %edx
0000000000009196	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000919b	jmp	0x91a0
00000000000091a0	movq	-0x8(%rbp), %rax
00000000000091a4	cmpl	$0x5, 0xc(%rax)
00000000000091a8	sete	%cl
00000000000091ab	xorb	$-0x1, %cl
00000000000091ae	andb	$0x1, %cl
00000000000091b1	movzbl	%cl, %edx
00000000000091b4	movslq	%edx, %rax
00000000000091b7	cmpq	$0x0, %rax
00000000000091bb	je	0x91e0
00000000000091c1	leaq	0x587d3(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
00000000000091c8	leaq	0x57fd7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000091cf	leaq	0x587db(%rip), %rcx ## literal pool for: "instruction->encoding == ZYDIS_INSTRUCTION_ENCODING_MVEX"
00000000000091d6	movl	$0x1063, %edx
00000000000091db	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000091e0	jmp	0x91e5
00000000000091e5	movq	-0x8(%rbp), %rax
00000000000091e9	movq	0x430(%rax), %rax
00000000000091f0	andq	$0x40, %rax
00000000000091f4	cmpq	$0x0, %rax
00000000000091f8	setne	%cl
00000000000091fb	xorb	$-0x1, %cl
00000000000091fe	andb	$0x1, %cl
0000000000009201	movzbl	%cl, %edx
0000000000009204	movslq	%edx, %rax
0000000000009207	cmpq	$0x0, %rax
000000000000920b	je	0x9230
0000000000009211	leaq	0x58783(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009218	leaq	0x57f87(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000921f	leaq	0x582b3(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000009226	movl	$0x1064, %edx
000000000000922b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009230	jmp	0x9235
0000000000009235	movq	-0x8(%rbp), %rax
0000000000009239	movzbl	0x573(%rax), %ecx
0000000000009240	movw	%cx, %dx
0000000000009243	movq	-0x10(%rbp), %rax
0000000000009247	movw	%dx, (%rax)
000000000000924a	movl	$0x100000, %eax
000000000000924f	addq	$0x10, %rsp
0000000000009253	popq	%rbp
0000000000009254	retq
0000000000009255	nopw	%cs:(%rax,%rax)
000000000000925f	nop
_ZydisSetEffectiveOperandWidth:
0000000000009260	pushq	%rbp
0000000000009261	movq	%rsp, %rbp
0000000000009264	subq	$0x40, %rsp
0000000000009268	movq	%rdi, -0x8(%rbp)
000000000000926c	movq	%rsi, -0x10(%rbp)
0000000000009270	movq	%rdx, -0x18(%rbp)
0000000000009274	cmpq	$0x0, -0x8(%rbp)
0000000000009279	setne	%al
000000000000927c	xorb	$-0x1, %al
000000000000927e	andb	$0x1, %al
0000000000009280	movzbl	%al, %ecx
0000000000009283	movslq	%ecx, %rdx
0000000000009286	cmpq	$0x0, %rdx
000000000000928a	je	0x92af
0000000000009290	leaq	0x58753(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009297	leaq	0x57f08(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000929e	leaq	0x57f36(%rip), %rcx ## literal pool for: "context"
00000000000092a5	movl	$0xd3a, %edx
00000000000092aa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000092af	jmp	0x92b4
00000000000092b4	cmpq	$0x0, -0x10(%rbp)
00000000000092b9	setne	%al
00000000000092bc	xorb	$-0x1, %al
00000000000092be	andb	$0x1, %al
00000000000092c0	movzbl	%al, %ecx
00000000000092c3	movslq	%ecx, %rdx
00000000000092c6	cmpq	$0x0, %rdx
00000000000092ca	je	0x92ef
00000000000092d0	leaq	0x58713(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
00000000000092d7	leaq	0x57ec8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000092de	leaq	0x57efe(%rip), %rcx ## literal pool for: "instruction"
00000000000092e5	movl	$0xd3b, %edx
00000000000092ea	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000092ef	jmp	0x92f4
00000000000092f4	cmpq	$0x0, -0x18(%rbp)
00000000000092f9	setne	%al
00000000000092fc	xorb	$-0x1, %al
00000000000092fe	andb	$0x1, %al
0000000000009300	movzbl	%al, %ecx
0000000000009303	movslq	%ecx, %rdx
0000000000009306	cmpq	$0x0, %rdx
000000000000930a	je	0x932f
0000000000009310	leaq	0x586d3(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009317	leaq	0x57e88(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000931e	leaq	0x586e3(%rip), %rcx ## literal pool for: "definition"
0000000000009325	movl	$0xd3c, %edx
000000000000932a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000932f	jmp	0x9334
0000000000009334	movq	-0x10(%rbp), %rax
0000000000009338	movq	0x430(%rax), %rax
000000000000933f	shrq	$0x22, %rax
0000000000009343	movl	%eax, %ecx
0000000000009345	andl	$0x1, %ecx
0000000000009348	movb	%cl, %dl
000000000000934a	movb	%dl, -0x19(%rbp)
000000000000934d	movq	-0x8(%rbp), %rax
0000000000009351	movq	(%rax), %rax
0000000000009354	movl	(%rax), %ecx
0000000000009356	testl	%ecx, %ecx
0000000000009358	movl	%ecx, -0x20(%rbp)
000000000000935b	je	0x93db
0000000000009361	jmp	0x9366
0000000000009366	movl	-0x20(%rbp), %eax
0000000000009369	subl	$0x1, %eax
000000000000936c	movl	%eax, -0x24(%rbp)
000000000000936f	je	0x93ca
0000000000009375	jmp	0x937a
000000000000937a	movl	-0x20(%rbp), %eax
000000000000937d	subl	$0x2, %eax
0000000000009380	movl	%eax, -0x28(%rbp)
0000000000009383	je	0x93b9
0000000000009389	jmp	0x938e
000000000000938e	movl	-0x20(%rbp), %eax
0000000000009391	subl	$0x3, %eax
0000000000009394	movl	%eax, -0x2c(%rbp)
0000000000009397	je	0x93ca
000000000000939d	jmp	0x93a2
00000000000093a2	movl	-0x20(%rbp), %eax
00000000000093a5	addl	$-0x4, %eax
00000000000093a8	subl	$0x1, %eax
00000000000093ab	movl	%eax, -0x30(%rbp)
00000000000093ae	ja	0x9406
00000000000093b4	jmp	0x93b9
00000000000093b9	movzbl	-0x19(%rbp), %eax
00000000000093bd	addl	$0x0, %eax
00000000000093c0	movb	%al, %cl
00000000000093c2	movb	%cl, -0x19(%rbp)
00000000000093c5	jmp	0x9425
00000000000093ca	movzbl	-0x19(%rbp), %eax
00000000000093ce	addl	$0x2, %eax
00000000000093d1	movb	%al, %cl
00000000000093d3	movb	%cl, -0x19(%rbp)
00000000000093d6	jmp	0x9425
00000000000093db	movzbl	-0x19(%rbp), %eax
00000000000093df	addl	$0x4, %eax
00000000000093e2	movb	%al, %cl
00000000000093e4	movb	%cl, -0x19(%rbp)
00000000000093e7	movq	-0x8(%rbp), %rdx
00000000000093eb	movzbl	0x26(%rdx), %eax
00000000000093ef	andl	$0x1, %eax
00000000000093f2	shll	$0x1, %eax
00000000000093f5	movzbl	-0x19(%rbp), %esi
00000000000093f9	addl	%eax, %esi
00000000000093fb	movb	%sil, %cl
00000000000093fe	movb	%cl, -0x19(%rbp)
0000000000009401	jmp	0x9425
0000000000009406	leaq	0x585dd(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
000000000000940d	leaq	0x57d92(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009414	leaq	0x57ff1(%rip), %rcx ## literal pool for: "0"
000000000000941b	movl	$0xdac, %edx
0000000000009420	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009425	movq	-0x18(%rbp), %rax
0000000000009429	movq	(%rax), %rax
000000000000942c	shrq	$0x1e, %rax
0000000000009430	movb	%al, %cl
0000000000009432	andb	$0x7, %cl
0000000000009435	movzbl	%cl, %edx
0000000000009438	movl	%edx, %eax
000000000000943a	cmpq	$0x8, %rax
000000000000943e	setb	%cl
0000000000009441	xorb	$-0x1, %cl
0000000000009444	andb	$0x1, %cl
0000000000009447	movzbl	%cl, %edx
000000000000944a	movslq	%edx, %rax
000000000000944d	cmpq	$0x0, %rax
0000000000009451	je	0x9476
0000000000009457	leaq	0x5858c(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
000000000000945e	leaq	0x57d41(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009465	leaq	0x585a7(%rip), %rcx ## literal pool for: "definition->operand_size_map < (sizeof(operand_size_map) / sizeof((operand_size_map)[0]))"
000000000000946c	movl	$0xdaf, %edx
0000000000009471	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009476	jmp	0x947b
000000000000947b	movzbl	-0x19(%rbp), %eax
000000000000947f	movl	%eax, %ecx
0000000000009481	cmpq	$0x8, %rcx
0000000000009485	setb	%dl
0000000000009488	xorb	$-0x1, %dl
000000000000948b	andb	$0x1, %dl
000000000000948e	movzbl	%dl, %eax
0000000000009491	movslq	%eax, %rcx
0000000000009494	cmpq	$0x0, %rcx
0000000000009498	je	0x94bd
000000000000949e	leaq	0x58545(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
00000000000094a5	leaq	0x57cfa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000094ac	leaq	0x585ba(%rip), %rcx ## literal pool for: "index < (sizeof(operand_size_map[definition->operand_size_map]) / sizeof((operand_size_map[definition->operand_size_map])[0]))"
00000000000094b3	movl	$0xdb0, %edx
00000000000094b8	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000094bd	jmp	0x94c2
00000000000094c2	movq	-0x18(%rbp), %rax
00000000000094c6	movq	(%rax), %rax
00000000000094c9	shrq	$0x1b, %rax
00000000000094cd	movl	%eax, %ecx
00000000000094cf	andl	$0x38, %ecx
00000000000094d2	movl	%ecx, %eax
00000000000094d4	leaq	_ZydisSetEffectiveOperandWidth.operand_size_map(%rip), %rdx
00000000000094db	addq	%rax, %rdx
00000000000094de	movzbl	-0x19(%rbp), %ecx
00000000000094e2	movl	%ecx, %eax
00000000000094e4	movb	(%rax,%rdx), %sil
00000000000094e8	movq	-0x10(%rbp), %rax
00000000000094ec	movb	%sil, 0x16(%rax)
00000000000094f0	movq	-0x10(%rbp), %rax
00000000000094f4	movzbl	0x16(%rax), %ecx
00000000000094f8	movl	%ecx, %edi
00000000000094fa	subl	$0x10, %edi
00000000000094fd	movl	%ecx, -0x34(%rbp)
0000000000009500	movl	%edi, -0x38(%rbp)
0000000000009503	je	0x9536
0000000000009509	jmp	0x950e
000000000000950e	movl	-0x34(%rbp), %eax
0000000000009511	subl	$0x20, %eax
0000000000009514	movl	%eax, -0x3c(%rbp)
0000000000009517	je	0x9543
000000000000951d	jmp	0x9522
0000000000009522	movl	-0x34(%rbp), %eax
0000000000009525	subl	$0x40, %eax
0000000000009528	movl	%eax, -0x40(%rbp)
000000000000952b	je	0x9550
0000000000009531	jmp	0x955d
0000000000009536	movq	-0x8(%rbp), %rax
000000000000953a	movb	$0x0, 0x24(%rax)
000000000000953e	jmp	0x957c
0000000000009543	movq	-0x8(%rbp), %rax
0000000000009547	movb	$0x1, 0x24(%rax)
000000000000954b	jmp	0x957c
0000000000009550	movq	-0x8(%rbp), %rax
0000000000009554	movb	$0x2, 0x24(%rax)
0000000000009558	jmp	0x957c
000000000000955d	leaq	0x58486(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009564	leaq	0x57c3b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000956b	leaq	0x57e9a(%rip), %rcx ## literal pool for: "0"
0000000000009572	movl	$0xdc0, %edx
0000000000009577	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000957c	movq	-0x18(%rbp), %rax
0000000000009580	movq	(%rax), %rax
0000000000009583	shrq	$0x1e, %rax
0000000000009587	movb	%al, %cl
0000000000009589	andb	$0x7, %cl
000000000000958c	movzbl	%cl, %edx
000000000000958f	cmpl	$0x1, %edx
0000000000009592	jne	0x95a0
0000000000009598	movq	-0x10(%rbp), %rax
000000000000959c	movb	$0x8, 0x16(%rax)
00000000000095a0	addq	$0x40, %rsp
00000000000095a4	popq	%rbp
00000000000095a5	retq
00000000000095a6	nopw	%cs:(%rax,%rax)
_ZydisSetEffectiveAddressWidth:
00000000000095b0	pushq	%rbp
00000000000095b1	movq	%rsp, %rbp
00000000000095b4	subq	$0x40, %rsp
00000000000095b8	movq	%rdi, -0x8(%rbp)
00000000000095bc	movq	%rsi, -0x10(%rbp)
00000000000095c0	movq	%rdx, -0x18(%rbp)
00000000000095c4	cmpq	$0x0, -0x8(%rbp)
00000000000095c9	setne	%al
00000000000095cc	xorb	$-0x1, %al
00000000000095ce	andb	$0x1, %al
00000000000095d0	movzbl	%al, %ecx
00000000000095d3	movslq	%ecx, %rdx
00000000000095d6	cmpq	$0x0, %rdx
00000000000095da	je	0x95ff
00000000000095e0	leaq	0x58505(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
00000000000095e7	leaq	0x57bb8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000095ee	leaq	0x57be6(%rip), %rcx ## literal pool for: "context"
00000000000095f5	movl	$0xdd4, %edx
00000000000095fa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000095ff	jmp	0x9604
0000000000009604	cmpq	$0x0, -0x10(%rbp)
0000000000009609	setne	%al
000000000000960c	xorb	$-0x1, %al
000000000000960e	andb	$0x1, %al
0000000000009610	movzbl	%al, %ecx
0000000000009613	movslq	%ecx, %rdx
0000000000009616	cmpq	$0x0, %rdx
000000000000961a	je	0x963f
0000000000009620	leaq	0x584c5(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009627	leaq	0x57b78(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000962e	leaq	0x57bae(%rip), %rcx ## literal pool for: "instruction"
0000000000009635	movl	$0xdd5, %edx
000000000000963a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000963f	jmp	0x9644
0000000000009644	movq	-0x10(%rbp), %rax
0000000000009648	movq	0x430(%rax), %rax
000000000000964f	shrq	$0x23, %rax
0000000000009653	movl	%eax, %ecx
0000000000009655	andl	$0x1, %ecx
0000000000009658	movb	%cl, %dl
000000000000965a	movb	%dl, -0x19(%rbp)
000000000000965d	movq	-0x8(%rbp), %rax
0000000000009661	movq	(%rax), %rax
0000000000009664	movl	0x4(%rax), %ecx
0000000000009667	testl	%ecx, %ecx
0000000000009669	movl	%ecx, -0x20(%rbp)
000000000000966c	je	0x969f
0000000000009672	jmp	0x9677
0000000000009677	movl	-0x20(%rbp), %eax
000000000000967a	subl	$0x1, %eax
000000000000967d	movl	%eax, -0x24(%rbp)
0000000000009680	je	0x96b0
0000000000009686	jmp	0x968b
000000000000968b	movl	-0x20(%rbp), %eax
000000000000968e	subl	$0x2, %eax
0000000000009691	movl	%eax, -0x28(%rbp)
0000000000009694	je	0x96c1
000000000000969a	jmp	0x96d2
000000000000969f	movzbl	-0x19(%rbp), %eax
00000000000096a3	addl	$0x0, %eax
00000000000096a6	movb	%al, %cl
00000000000096a8	movb	%cl, -0x19(%rbp)
00000000000096ab	jmp	0x96f1
00000000000096b0	movzbl	-0x19(%rbp), %eax
00000000000096b4	addl	$0x2, %eax
00000000000096b7	movb	%al, %cl
00000000000096b9	movb	%cl, -0x19(%rbp)
00000000000096bc	jmp	0x96f1
00000000000096c1	movzbl	-0x19(%rbp), %eax
00000000000096c5	addl	$0x4, %eax
00000000000096c8	movb	%al, %cl
00000000000096ca	movb	%cl, -0x19(%rbp)
00000000000096cd	jmp	0x96f1
00000000000096d2	leaq	0x58413(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
00000000000096d9	leaq	0x57ac6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000096e0	leaq	0x57d25(%rip), %rcx ## literal pool for: "0"
00000000000096e7	movl	$0xe04, %edx
00000000000096ec	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000096f1	movq	-0x18(%rbp), %rax
00000000000096f5	movq	(%rax), %rax
00000000000096f8	shrq	$0x21, %rax
00000000000096fc	movb	%al, %cl
00000000000096fe	andb	$0x3, %cl
0000000000009701	movzbl	%cl, %edx
0000000000009704	movl	%edx, %eax
0000000000009706	cmpq	$0x3, %rax
000000000000970a	setb	%cl
000000000000970d	xorb	$-0x1, %cl
0000000000009710	andb	$0x1, %cl
0000000000009713	movzbl	%cl, %edx
0000000000009716	movslq	%edx, %rax
0000000000009719	cmpq	$0x0, %rax
000000000000971d	je	0x9742
0000000000009723	leaq	0x583c2(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
000000000000972a	leaq	0x57a75(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009731	leaq	0x583d2(%rip), %rcx ## literal pool for: "definition->address_size_map < (sizeof(address_size_map) / sizeof((address_size_map)[0]))"
0000000000009738	movl	$0xe06, %edx
000000000000973d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009742	jmp	0x9747
0000000000009747	movzbl	-0x19(%rbp), %eax
000000000000974b	movl	%eax, %ecx
000000000000974d	cmpq	$0x8, %rcx
0000000000009751	setb	%dl
0000000000009754	xorb	$-0x1, %dl
0000000000009757	andb	$0x1, %dl
000000000000975a	movzbl	%dl, %eax
000000000000975d	movslq	%eax, %rcx
0000000000009760	cmpq	$0x0, %rcx
0000000000009764	je	0x9789
000000000000976a	leaq	0x5837b(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009771	leaq	0x57a2e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009778	leaq	0x583e5(%rip), %rcx ## literal pool for: "index < (sizeof(address_size_map[definition->address_size_map]) / sizeof((address_size_map[definition->address_size_map])[0]))"
000000000000977f	movl	$0xe07, %edx
0000000000009784	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009789	jmp	0x978e
000000000000978e	movq	-0x18(%rbp), %rax
0000000000009792	movq	(%rax), %rax
0000000000009795	shrq	$0x1e, %rax
0000000000009799	movl	%eax, %ecx
000000000000979b	andl	$0x18, %ecx
000000000000979e	movl	%ecx, %eax
00000000000097a0	leaq	_ZydisSetEffectiveAddressWidth.address_size_map(%rip), %rdx
00000000000097a7	addq	%rax, %rdx
00000000000097aa	movzbl	-0x19(%rbp), %ecx
00000000000097ae	movl	%ecx, %eax
00000000000097b0	movb	(%rax,%rdx), %sil
00000000000097b4	movq	-0x10(%rbp), %rax
00000000000097b8	movb	%sil, 0x17(%rax)
00000000000097bc	movq	-0x10(%rbp), %rax
00000000000097c0	movzbl	0x17(%rax), %ecx
00000000000097c4	movl	%ecx, %edi
00000000000097c6	subl	$0x10, %edi
00000000000097c9	movl	%ecx, -0x2c(%rbp)
00000000000097cc	movl	%edi, -0x30(%rbp)
00000000000097cf	je	0x9802
00000000000097d5	jmp	0x97da
00000000000097da	movl	-0x2c(%rbp), %eax
00000000000097dd	subl	$0x20, %eax
00000000000097e0	movl	%eax, -0x34(%rbp)
00000000000097e3	je	0x980f
00000000000097e9	jmp	0x97ee
00000000000097ee	movl	-0x2c(%rbp), %eax
00000000000097f1	subl	$0x40, %eax
00000000000097f4	movl	%eax, -0x38(%rbp)
00000000000097f7	je	0x981c
00000000000097fd	jmp	0x9829
0000000000009802	movq	-0x8(%rbp), %rax
0000000000009806	movb	$0x0, 0x25(%rax)
000000000000980a	jmp	0x9848
000000000000980f	movq	-0x8(%rbp), %rax
0000000000009813	movb	$0x1, 0x25(%rax)
0000000000009817	jmp	0x9848
000000000000981c	movq	-0x8(%rbp), %rax
0000000000009820	movb	$0x2, 0x25(%rax)
0000000000009824	jmp	0x9848
0000000000009829	leaq	0x582bc(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009830	leaq	0x5796f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009837	leaq	0x57bce(%rip), %rcx ## literal pool for: "0"
000000000000983e	movl	$0xe17, %edx
0000000000009843	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009848	addq	$0x40, %rsp
000000000000984c	popq	%rbp
000000000000984d	retq
000000000000984e	nop
_ZydisDecodeOptionalInstructionParts:
0000000000009850	pushq	%rbp
0000000000009851	movq	%rsp, %rbp
0000000000009854	subq	$0x80, %rsp
000000000000985b	movq	%rdi, -0x10(%rbp)
000000000000985f	movq	%rsi, -0x18(%rbp)
0000000000009863	movq	%rdx, -0x20(%rbp)
0000000000009867	cmpq	$0x0, -0x10(%rbp)
000000000000986c	setne	%al
000000000000986f	xorb	$-0x1, %al
0000000000009871	andb	$0x1, %al
0000000000009873	movzbl	%al, %ecx
0000000000009876	movslq	%ecx, %rdx
0000000000009879	cmpq	$0x0, %rdx
000000000000987d	je	0x98a2
0000000000009883	leaq	0x58359(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
000000000000988a	leaq	0x57915(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009891	leaq	0x57943(%rip), %rcx ## literal pool for: "context"
0000000000009898	movl	$0xcb9, %edx
000000000000989d	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000098a2	jmp	0x98a7
00000000000098a7	cmpq	$0x0, -0x18(%rbp)
00000000000098ac	setne	%al
00000000000098af	xorb	$-0x1, %al
00000000000098b1	andb	$0x1, %al
00000000000098b3	movzbl	%al, %ecx
00000000000098b6	movslq	%ecx, %rdx
00000000000098b9	cmpq	$0x0, %rdx
00000000000098bd	je	0x98e2
00000000000098c3	leaq	0x58319(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
00000000000098ca	leaq	0x578d5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000098d1	leaq	0x5790b(%rip), %rcx ## literal pool for: "instruction"
00000000000098d8	movl	$0xcba, %edx
00000000000098dd	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000098e2	jmp	0x98e7
00000000000098e7	cmpq	$0x0, -0x20(%rbp)
00000000000098ec	setne	%al
00000000000098ef	xorb	$-0x1, %al
00000000000098f1	andb	$0x1, %al
00000000000098f3	movzbl	%al, %ecx
00000000000098f6	movslq	%ecx, %rdx
00000000000098f9	cmpq	$0x0, %rdx
00000000000098fd	je	0x9922
0000000000009903	leaq	0x582d9(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
000000000000990a	leaq	0x57895(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009911	leaq	0x582ef(%rip), %rcx ## literal pool for: "info"
0000000000009918	movl	$0xcbb, %edx
000000000000991d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009922	jmp	0x9927
0000000000009927	movq	-0x20(%rbp), %rax
000000000000992b	movzbl	(%rax), %ecx
000000000000992e	andl	$0x1, %ecx
0000000000009931	cmpl	$0x0, %ecx
0000000000009934	je	0x9c85
000000000000993a	movq	-0x18(%rbp), %rax
000000000000993e	cmpb	$0x0, 0x57b(%rax)
0000000000009945	jne	0x999e
000000000000994b	movq	-0x18(%rbp), %rax
000000000000994f	movb	0x8(%rax), %cl
0000000000009952	movq	-0x18(%rbp), %rax
0000000000009956	movb	%cl, 0x57b(%rax)
000000000000995c	movq	-0x10(%rbp), %rdi
0000000000009960	movq	-0x18(%rbp), %rsi
0000000000009964	leaq	-0x21(%rbp), %rdx
0000000000009968	callq	_ZydisInputNext
000000000000996d	movl	%eax, -0x28(%rbp)
0000000000009970	movl	-0x28(%rbp), %eax
0000000000009973	andl	$0x80000000, %eax
0000000000009978	cmpl	$0x0, %eax
000000000000997b	je	0x998c
0000000000009981	movl	-0x28(%rbp), %eax
0000000000009984	movl	%eax, -0x4(%rbp)
0000000000009987	jmp	0x9e5e
000000000000998c	jmp	0x9991
0000000000009991	movq	-0x18(%rbp), %rdi
0000000000009995	movzbl	-0x21(%rbp), %esi
0000000000009999	callq	_ZydisDecodeModRM
000000000000999e	movb	$0x0, -0x29(%rbp)
00000000000099a2	movb	$0x0, -0x2a(%rbp)
00000000000099a6	movq	-0x20(%rbp), %rax
00000000000099aa	movzbl	(%rax), %ecx
00000000000099ad	andl	$0x10, %ecx
00000000000099b0	cmpl	$0x0, %ecx
00000000000099b3	jne	0x9c80
00000000000099b9	movq	-0x18(%rbp), %rax
00000000000099bd	movzbl	0x17(%rax), %ecx
00000000000099c1	movl	%ecx, %edx
00000000000099c3	subl	$0x10, %edx
00000000000099c6	movl	%ecx, -0x44(%rbp)
00000000000099c9	movl	%edx, -0x48(%rbp)
00000000000099cc	je	0x99ff
00000000000099d2	jmp	0x99d7
00000000000099d7	movl	-0x44(%rbp), %eax
00000000000099da	subl	$0x20, %eax
00000000000099dd	movl	%eax, -0x4c(%rbp)
00000000000099e0	je	0x9a8d
00000000000099e6	jmp	0x99eb
00000000000099eb	movl	-0x44(%rbp), %eax
00000000000099ee	subl	$0x40, %eax
00000000000099f1	movl	%eax, -0x50(%rbp)
00000000000099f4	je	0x9a8d
00000000000099fa	jmp	0x9b7b
00000000000099ff	movq	-0x18(%rbp), %rax
0000000000009a03	movzbl	0x578(%rax), %ecx
0000000000009a0a	movl	%ecx, %eax
0000000000009a0c	movq	%rax, %rdx
0000000000009a0f	subq	$0x3, %rdx
0000000000009a13	movq	%rax, -0x58(%rbp)
0000000000009a17	movq	%rdx, -0x60(%rbp)
0000000000009a1b	ja	0x9a69
0000000000009a21	leaq	0x454(%rip), %rax
0000000000009a28	movq	-0x58(%rbp), %rcx
0000000000009a2c	movslq	(%rax,%rcx,4), %rdx
0000000000009a30	addq	%rax, %rdx
0000000000009a33	jmpq	*%rdx
0000000000009a35	movq	-0x18(%rbp), %rax
0000000000009a39	movzbl	0x57a(%rax), %ecx
0000000000009a40	cmpl	$0x6, %ecx
0000000000009a43	jne	0x9a4d
0000000000009a49	movb	$0x10, -0x2a(%rbp)
0000000000009a4d	jmp	0x9a88
0000000000009a52	movb	$0x8, -0x2a(%rbp)
0000000000009a56	jmp	0x9a88
0000000000009a5b	movb	$0x10, -0x2a(%rbp)
0000000000009a5f	jmp	0x9a88
0000000000009a64	jmp	0x9a88
0000000000009a69	leaq	0x58173(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009a70	leaq	0x5772f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009a77	leaq	0x5798e(%rip), %rcx ## literal pool for: "0"
0000000000009a7e	movl	$0xcde, %edx
0000000000009a83	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009a88	jmp	0x9b9a
0000000000009a8d	xorl	%eax, %eax
0000000000009a8f	movb	%al, %cl
0000000000009a91	movq	-0x18(%rbp), %rdx
0000000000009a95	movzbl	0x578(%rdx), %eax
0000000000009a9c	cmpl	$0x3, %eax
0000000000009a9f	movb	%cl, -0x61(%rbp)
0000000000009aa2	je	0x9abc
0000000000009aa8	movq	-0x18(%rbp), %rax
0000000000009aac	movzbl	0x57a(%rax), %ecx
0000000000009ab3	cmpl	$0x4, %ecx
0000000000009ab6	sete	%dl
0000000000009ab9	movb	%dl, -0x61(%rbp)
0000000000009abc	movb	-0x61(%rbp), %al
0000000000009abf	andb	$0x1, %al
0000000000009ac1	movb	%al, -0x29(%rbp)
0000000000009ac4	movq	-0x18(%rbp), %rcx
0000000000009ac8	movzbl	0x578(%rcx), %edx
0000000000009acf	movl	%edx, %ecx
0000000000009ad1	movq	%rcx, %rsi
0000000000009ad4	subq	$0x3, %rsi
0000000000009ad8	movq	%rcx, -0x70(%rbp)
0000000000009adc	movq	%rsi, -0x78(%rbp)
0000000000009ae0	ja	0x9b57
0000000000009ae6	leaq	0x37f(%rip), %rax
0000000000009aed	movq	-0x70(%rbp), %rcx
0000000000009af1	movslq	(%rax,%rcx,4), %rdx
0000000000009af5	addq	%rax, %rdx
0000000000009af8	jmpq	*%rdx
0000000000009afa	movq	-0x18(%rbp), %rax
0000000000009afe	movzbl	0x57a(%rax), %ecx
0000000000009b05	cmpl	$0x5, %ecx
0000000000009b08	jne	0x9b3b
0000000000009b0e	movq	-0x10(%rbp), %rax
0000000000009b12	movq	(%rax), %rax
0000000000009b15	cmpl	$0x0, (%rax)
0000000000009b18	jne	0x9b37
0000000000009b1e	movq	-0x18(%rbp), %rax
0000000000009b22	movq	0x430(%rax), %rcx
0000000000009b29	orq	$0x80, %rcx
0000000000009b30	movq	%rcx, 0x430(%rax)
0000000000009b37	movb	$0x20, -0x2a(%rbp)
0000000000009b3b	jmp	0x9b76
0000000000009b40	movb	$0x8, -0x2a(%rbp)
0000000000009b44	jmp	0x9b76
0000000000009b49	movb	$0x20, -0x2a(%rbp)
0000000000009b4d	jmp	0x9b76
0000000000009b52	jmp	0x9b76
0000000000009b57	leaq	0x58085(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009b5e	leaq	0x57641(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009b65	leaq	0x578a0(%rip), %rcx ## literal pool for: "0"
0000000000009b6c	movl	$0xcfa, %edx
0000000000009b71	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009b76	jmp	0x9b9a
0000000000009b7b	leaq	0x58061(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009b82	leaq	0x5761d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009b89	leaq	0x5787c(%rip), %rcx ## literal pool for: "0"
0000000000009b90	movl	$0xcfe, %edx
0000000000009b95	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009b9a	cmpb	$0x0, -0x29(%rbp)
0000000000009b9e	je	0x9c32
0000000000009ba4	movq	-0x18(%rbp), %rax
0000000000009ba8	movb	0x8(%rax), %cl
0000000000009bab	movq	-0x18(%rbp), %rax
0000000000009baf	movb	%cl, 0x57f(%rax)
0000000000009bb5	movq	-0x10(%rbp), %rdi
0000000000009bb9	movq	-0x18(%rbp), %rsi
0000000000009bbd	leaq	-0x2b(%rbp), %rdx
0000000000009bc1	callq	_ZydisInputNext
0000000000009bc6	movl	%eax, -0x30(%rbp)
0000000000009bc9	movl	-0x30(%rbp), %eax
0000000000009bcc	andl	$0x80000000, %eax
0000000000009bd1	cmpl	$0x0, %eax
0000000000009bd4	je	0x9be5
0000000000009bda	movl	-0x30(%rbp), %eax
0000000000009bdd	movl	%eax, -0x4(%rbp)
0000000000009be0	jmp	0x9e5e
0000000000009be5	jmp	0x9bea
0000000000009bea	movq	-0x18(%rbp), %rdi
0000000000009bee	movzbl	-0x2b(%rbp), %esi
0000000000009bf2	callq	_ZydisDecodeSIB
0000000000009bf7	movq	-0x18(%rbp), %rdi
0000000000009bfb	movzbl	0x57e(%rdi), %esi
0000000000009c02	cmpl	$0x5, %esi
0000000000009c05	jne	0x9c2d
0000000000009c0b	movq	-0x18(%rbp), %rax
0000000000009c0f	movzbl	0x578(%rax), %ecx
0000000000009c16	cmpl	$0x1, %ecx
0000000000009c19	movl	$0x8, %ecx
0000000000009c1e	movl	$0x20, %edx
0000000000009c23	cmovel	%ecx, %edx
0000000000009c26	movb	%dl, %sil
0000000000009c29	movb	%sil, -0x2a(%rbp)
0000000000009c2d	jmp	0x9c32
0000000000009c32	cmpb	$0x0, -0x2a(%rbp)
0000000000009c36	je	0x9c7b
0000000000009c3c	jmp	0x9c41
0000000000009c41	movq	-0x10(%rbp), %rdi
0000000000009c45	movq	-0x18(%rbp), %rsi
0000000000009c49	movzbl	-0x2a(%rbp), %edx
0000000000009c4d	callq	_ZydisReadDisplacement
0000000000009c52	movl	%eax, -0x34(%rbp)
0000000000009c55	movl	-0x34(%rbp), %eax
0000000000009c58	andl	$0x80000000, %eax
0000000000009c5d	cmpl	$0x0, %eax
0000000000009c60	je	0x9c71
0000000000009c66	movl	-0x34(%rbp), %eax
0000000000009c69	movl	%eax, -0x4(%rbp)
0000000000009c6c	jmp	0x9e5e
0000000000009c71	jmp	0x9c76
0000000000009c76	jmp	0x9c7b
0000000000009c7b	jmp	0x9c80
0000000000009c80	jmp	0x9c85
0000000000009c85	movq	-0x20(%rbp), %rax
0000000000009c89	movzbl	(%rax), %ecx
0000000000009c8c	andl	$0x2, %ecx
0000000000009c8f	cmpl	$0x0, %ecx
0000000000009c92	je	0x9ce6
0000000000009c98	jmp	0x9c9d
0000000000009c9d	movq	-0x10(%rbp), %rdi
0000000000009ca1	movq	-0x18(%rbp), %rsi
0000000000009ca5	movq	-0x20(%rbp), %rax
0000000000009ca9	movq	-0x10(%rbp), %rcx
0000000000009cad	movzbl	0x25(%rcx), %edx
0000000000009cb1	movl	%edx, %ecx
0000000000009cb3	movzbl	0x1(%rax,%rcx), %edx
0000000000009cb8	callq	_ZydisReadDisplacement
0000000000009cbd	movl	%eax, -0x38(%rbp)
0000000000009cc0	movl	-0x38(%rbp), %eax
0000000000009cc3	andl	$0x80000000, %eax
0000000000009cc8	cmpl	$0x0, %eax
0000000000009ccb	je	0x9cdc
0000000000009cd1	movl	-0x38(%rbp), %eax
0000000000009cd4	movl	%eax, -0x4(%rbp)
0000000000009cd7	jmp	0x9e5e
0000000000009cdc	jmp	0x9ce1
0000000000009ce1	jmp	0x9ce6
0000000000009ce6	movq	-0x20(%rbp), %rax
0000000000009cea	movzbl	(%rax), %ecx
0000000000009ced	andl	$0x4, %ecx
0000000000009cf0	cmpl	$0x0, %ecx
0000000000009cf3	je	0x9d8b
0000000000009cf9	movq	-0x20(%rbp), %rax
0000000000009cfd	cmpb	$0x0, 0x8(%rax)
0000000000009d01	je	0x9d20
0000000000009d07	movq	-0x18(%rbp), %rax
0000000000009d0b	movq	0x430(%rax), %rcx
0000000000009d12	orq	$0x80, %rcx
0000000000009d19	movq	%rcx, 0x430(%rax)
0000000000009d20	jmp	0x9d25
0000000000009d25	xorl	%edx, %edx
0000000000009d27	movq	-0x10(%rbp), %rdi
0000000000009d2b	movq	-0x18(%rbp), %rsi
0000000000009d2f	movq	-0x20(%rbp), %rax
0000000000009d33	movq	-0x10(%rbp), %rcx
0000000000009d37	movzbl	0x24(%rcx), %r8d
0000000000009d3c	movl	%r8d, %ecx
0000000000009d3f	movb	0x4(%rax,%rcx), %r9b
0000000000009d44	movq	-0x20(%rbp), %rax
0000000000009d48	movb	0x7(%rax), %r10b
0000000000009d4c	movq	-0x20(%rbp), %rax
0000000000009d50	movzbl	%r9b, %ecx
0000000000009d54	movzbl	%r10b, %r8d
0000000000009d58	movzbl	0x8(%rax), %r9d
0000000000009d5d	callq	_ZydisReadImmediate
0000000000009d62	movl	%eax, -0x3c(%rbp)
0000000000009d65	movl	-0x3c(%rbp), %eax
0000000000009d68	andl	$0x80000000, %eax
0000000000009d6d	cmpl	$0x0, %eax
0000000000009d70	je	0x9d81
0000000000009d76	movl	-0x3c(%rbp), %eax
0000000000009d79	movl	%eax, -0x4(%rbp)
0000000000009d7c	jmp	0x9e5e
0000000000009d81	jmp	0x9d86
0000000000009d86	jmp	0x9d8b
0000000000009d8b	movq	-0x20(%rbp), %rax
0000000000009d8f	movzbl	(%rax), %ecx
0000000000009d92	andl	$0x8, %ecx
0000000000009d95	cmpl	$0x0, %ecx
0000000000009d98	je	0x9e57
0000000000009d9e	movq	-0x20(%rbp), %rax
0000000000009da2	movzbl	(%rax), %ecx
0000000000009da5	andl	$0x2, %ecx
0000000000009da8	cmpl	$0x0, %ecx
0000000000009dab	setne	%dl
0000000000009dae	xorb	$-0x1, %dl
0000000000009db1	xorb	$-0x1, %dl
0000000000009db4	andb	$0x1, %dl
0000000000009db7	movzbl	%dl, %ecx
0000000000009dba	movslq	%ecx, %rax
0000000000009dbd	cmpq	$0x0, %rax
0000000000009dc1	je	0x9de6
0000000000009dc7	leaq	0x57e15(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009dce	leaq	0x573d1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009dd5	leaq	0x57e30(%rip), %rcx ## literal pool for: "!(info->flags & 0x02)"
0000000000009ddc	movl	$0xd25, %edx
0000000000009de1	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000009de6	jmp	0x9deb
0000000000009deb	jmp	0x9df0
0000000000009df0	movq	-0x10(%rbp), %rdi
0000000000009df4	movq	-0x18(%rbp), %rsi
0000000000009df8	movq	-0x20(%rbp), %rax
0000000000009dfc	movq	-0x10(%rbp), %rcx
0000000000009e00	movzbl	0x24(%rcx), %edx
0000000000009e04	movl	%edx, %ecx
0000000000009e06	movb	0x9(%rax,%rcx), %r8b
0000000000009e0b	movq	-0x20(%rbp), %rax
0000000000009e0f	movb	0xc(%rax), %r9b
0000000000009e13	movq	-0x20(%rbp), %rax
0000000000009e17	movl	$0x1, %edx
0000000000009e1c	movzbl	%r8b, %ecx
0000000000009e20	movzbl	%r9b, %r8d
0000000000009e24	movzbl	0xd(%rax), %r9d
0000000000009e29	callq	_ZydisReadImmediate
0000000000009e2e	movl	%eax, -0x40(%rbp)
0000000000009e31	movl	-0x40(%rbp), %eax
0000000000009e34	andl	$0x80000000, %eax
0000000000009e39	cmpl	$0x0, %eax
0000000000009e3c	je	0x9e4d
0000000000009e42	movl	-0x40(%rbp), %eax
0000000000009e45	movl	%eax, -0x4(%rbp)
0000000000009e48	jmp	0x9e5e
0000000000009e4d	jmp	0x9e52
0000000000009e52	jmp	0x9e57
0000000000009e57	movl	$0x100000, -0x4(%rbp)
0000000000009e5e	movl	-0x4(%rbp), %eax
0000000000009e61	addq	$0x80, %rsp
0000000000009e68	popq	%rbp
0000000000009e69	retq
0000000000009e6a	nop
0000000000009e6c	.byte 0x8e #bad opcode
0000000000009e6d	cld
0000000000009e6e	.byte 0xff #bad opcode
0000000000009e6f	callq	*%rsp
0000000000009e71	cld
0000000000009e72	.byte 0xff #bad opcode
0000000000009e73	.byte 0xff #bad opcode
0000000000009e74	.byte 0xdd #bad opcode
0000000000009e75	cld
0000000000009e76	.byte 0xff #bad opcode
0000000000009e77	jmpq	*%rsi
0000000000009e79	cld
0000000000009e7a	.byte 0xff #bad opcode
0000000000009e7b	.byte 0xff #bad opcode
0000000000009e7c	movl	$0xd6fffffb, %ecx
0000000000009e81	sti
0000000000009e82	.byte 0xff #bad opcode
0000000000009e83	.byte 0xff #bad opcode
0000000000009e84	.byte 0xdf #bad opcode
0000000000009e85	sti
0000000000009e86	.byte 0xff #bad opcode
0000000000009e87	.byte 0xff #bad opcode
0000000000009e88	callq	0x10009e88
0000000000009e8d	.byte 0x1f #bad opcode
0000000000009e8e	addb	%dl, 0x48(%rbp)
_ZydisCheckErrorConditions:
0000000000009e90	pushq	%rbp
0000000000009e91	movq	%rsp, %rbp
0000000000009e94	subq	$0xd0, %rsp
0000000000009e9b	movq	%rdi, -0x10(%rbp)
0000000000009e9f	movq	%rsi, -0x18(%rbp)
0000000000009ea3	movq	%rdx, -0x20(%rbp)
0000000000009ea7	movq	-0x20(%rbp), %rdx
0000000000009eab	movzwl	0x8(%rdx), %eax
0000000000009eaf	shrl	$0x9, %eax
0000000000009eb2	andl	$0xf, %eax
0000000000009eb5	movl	%eax, -0x24(%rbp)
0000000000009eb8	movq	-0x20(%rbp), %rdx
0000000000009ebc	movzwl	0x8(%rdx), %eax
0000000000009ec0	movzbl	0xa(%rdx), %ecx
0000000000009ec4	shll	$0x10, %ecx
0000000000009ec7	orl	%ecx, %eax
0000000000009ec9	shrl	$0xd, %eax
0000000000009ecc	andl	$0xf, %eax
0000000000009ecf	movl	%eax, -0x28(%rbp)
0000000000009ed2	movl	$0x1, -0x2c(%rbp)
0000000000009ed9	movb	$0x0, -0x2d(%rbp)
0000000000009edd	movb	$0x0, -0x2e(%rbp)
0000000000009ee1	movl	$0x0, -0x34(%rbp)
0000000000009ee8	movq	-0x18(%rbp), %rdx
0000000000009eec	movl	0xc(%rdx), %eax
0000000000009eef	movl	%eax, %edx
0000000000009ef1	movq	%rdx, %rsi
0000000000009ef4	subq	$0x5, %rsi
0000000000009ef8	movq	%rdx, -0x70(%rbp)
0000000000009efc	movq	%rsi, -0x78(%rbp)
0000000000009f00	ja	0xa1bd
0000000000009f06	leaq	0xbb7(%rip), %rax
0000000000009f0d	movq	-0x70(%rbp), %rcx
0000000000009f11	movslq	(%rax,%rcx,4), %rdx
0000000000009f15	addq	%rax, %rdx
0000000000009f18	jmpq	*%rdx
0000000000009f1a	movq	-0x20(%rbp), %rax
0000000000009f1e	movq	%rax, -0x40(%rbp)
0000000000009f22	movq	-0x40(%rbp), %rax
0000000000009f26	movq	(%rax), %rax
0000000000009f29	shrq	$0x2a, %rax
0000000000009f2d	movb	%al, %cl
0000000000009f2f	andb	$0x1, %cl
0000000000009f32	movzbl	%cl, %edx
0000000000009f35	cmpl	$0x0, %edx
0000000000009f38	je	0x9f5a
0000000000009f3e	movq	-0x10(%rbp), %rax
0000000000009f42	movq	(%rax), %rax
0000000000009f45	cmpl	$0x5, (%rax)
0000000000009f48	jne	0x9f5a
0000000000009f4e	movl	$0x80200001, -0x4(%rbp)
0000000000009f55	jmp	0xaab8
0000000000009f5a	movq	-0x10(%rbp), %rax
0000000000009f5e	movzbl	0x18(%rax), %ecx
0000000000009f62	cmpl	$0x0, %ecx
0000000000009f65	je	0x9f8a
0000000000009f6b	movq	-0x40(%rbp), %rax
0000000000009f6f	movb	0xb(%rax), %cl
0000000000009f72	andb	$0x1, %cl
0000000000009f75	cmpb	$0x0, %cl
0000000000009f78	jne	0x9f8a
0000000000009f7e	movl	$0x80200004, -0x4(%rbp)
0000000000009f85	jmp	0xaab8
0000000000009f8a	jmp	0xa1dc
0000000000009f8f	jmp	0xa1dc
0000000000009f94	movq	-0x20(%rbp), %rax
0000000000009f98	movq	%rax, -0x48(%rbp)
0000000000009f9c	movq	-0x48(%rbp), %rax
0000000000009fa0	movl	0x8(%rax), %ecx
0000000000009fa3	movl	%ecx, %eax
0000000000009fa5	shrq	$0x17, %rax
0000000000009fa9	movb	%al, %dl
0000000000009fab	andb	$0xf, %dl
0000000000009fae	movzbl	%dl, %ecx
0000000000009fb1	movl	%ecx, -0x2c(%rbp)
0000000000009fb4	jmp	0xa1dc
0000000000009fb9	movq	-0x20(%rbp), %rax
0000000000009fbd	movq	%rax, -0x50(%rbp)
0000000000009fc1	movq	-0x50(%rbp), %rax
0000000000009fc5	movl	0x8(%rax), %ecx
0000000000009fc8	shrl	$0x17, %ecx
0000000000009fcb	andl	$0xf, %ecx
0000000000009fce	movl	%ecx, -0x2c(%rbp)
0000000000009fd1	movq	-0x50(%rbp), %rax
0000000000009fd5	movl	0x8(%rax), %ecx
0000000000009fd8	movl	%ecx, %eax
0000000000009fda	shrq	$0x1b, %rax
0000000000009fde	movb	%al, %dl
0000000000009fe0	andb	$0x1, %dl
0000000000009fe3	movb	%dl, -0x2e(%rbp)
0000000000009fe6	jmp	0xa1dc
0000000000009feb	movq	-0x20(%rbp), %rax
0000000000009fef	movq	%rax, -0x58(%rbp)
0000000000009ff3	movq	-0x58(%rbp), %rax
0000000000009ff7	movl	0x8(%rax), %ecx
0000000000009ffa	shrl	$0x17, %ecx
0000000000009ffd	andl	$0xf, %ecx
000000000000a000	movl	%ecx, -0x2c(%rbp)
000000000000a003	movq	-0x58(%rbp), %rax
000000000000a007	movl	0x8(%rax), %ecx
000000000000a00a	movl	%ecx, %eax
000000000000a00c	shrq	$0x1b, %rax
000000000000a010	movb	%al, %dl
000000000000a012	andb	$0x1, %dl
000000000000a015	movb	%dl, -0x2e(%rbp)
000000000000a018	movq	-0x58(%rbp), %rax
000000000000a01c	movzwl	0xc(%rax), %ecx
000000000000a020	movl	%ecx, %eax
000000000000a022	shrq	$0x7, %rax
000000000000a026	movb	%al, %dl
000000000000a028	andb	$0x3, %dl
000000000000a02b	movzbl	%dl, %ecx
000000000000a02e	movl	%ecx, -0x34(%rbp)
000000000000a031	movq	-0x18(%rbp), %rax
000000000000a035	movzbl	0x564(%rax), %ecx
000000000000a03c	cmpl	$0x0, %ecx
000000000000a03f	je	0xa06d
000000000000a045	movq	-0x58(%rbp), %rax
000000000000a049	movzwl	0xc(%rax), %ecx
000000000000a04d	movl	%ecx, %eax
000000000000a04f	shrq	$0x9, %rax
000000000000a053	movb	%al, %dl
000000000000a055	andb	$0x1, %dl
000000000000a058	cmpb	$0x0, %dl
000000000000a05b	jne	0xa06d
000000000000a061	movl	$0x8020000a, -0x4(%rbp)
000000000000a068	jmp	0xaab8
000000000000a06d	jmp	0xa1dc
000000000000a072	movq	-0x20(%rbp), %rax
000000000000a076	movq	%rax, -0x60(%rbp)
000000000000a07a	movq	-0x60(%rbp), %rax
000000000000a07e	movl	0x8(%rax), %ecx
000000000000a081	shrl	$0x17, %ecx
000000000000a084	andl	$0xf, %ecx
000000000000a087	movl	%ecx, -0x2c(%rbp)
000000000000a08a	movq	-0x60(%rbp), %rax
000000000000a08e	movl	0x8(%rax), %ecx
000000000000a091	movl	%ecx, %eax
000000000000a093	shrq	$0x1b, %rax
000000000000a097	movb	%al, %dl
000000000000a099	andb	$0x1, %dl
000000000000a09c	movb	%dl, -0x2e(%rbp)
000000000000a09f	movq	-0x60(%rbp), %rax
000000000000a0a3	movzbl	0xc(%rax), %ecx
000000000000a0a7	shrl	%ecx
000000000000a0a9	andl	$0x3, %ecx
000000000000a0ac	movl	%ecx, -0x34(%rbp)
000000000000a0af	movq	-0x60(%rbp), %rax
000000000000a0b3	movl	0x8(%rax), %ecx
000000000000a0b6	movl	%ecx, %esi
000000000000a0b8	movzbl	0xc(%rax), %ecx
000000000000a0bc	movl	%ecx, %eax
000000000000a0be	shlq	$0x20, %rax
000000000000a0c2	orq	%rax, %rsi
000000000000a0c5	shrq	$0x1c, %rsi
000000000000a0c9	movb	%sil, %dl
000000000000a0cc	andb	$0x1f, %dl
000000000000a0cf	movzbl	%dl, %ecx
000000000000a0d2	movl	%ecx, %eax
000000000000a0d4	cmpq	$0x1a, %rax
000000000000a0d8	setb	%dl
000000000000a0db	xorb	$-0x1, %dl
000000000000a0de	andb	$0x1, %dl
000000000000a0e1	movzbl	%dl, %ecx
000000000000a0e4	movslq	%ecx, %rax
000000000000a0e7	cmpq	$0x0, %rax
000000000000a0eb	je	0xa110
000000000000a0f1	leaq	0x57c89(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a0f8	leaq	0x570a7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a0ff	leaq	0x57c95(%rip), %rcx ## literal pool for: "def->functionality < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000a106	movl	$0x10fe, %edx
000000000000a10b	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a110	jmp	0xa115
000000000000a115	movq	-0x18(%rbp), %rax
000000000000a119	movzbl	0x574(%rax), %ecx
000000000000a120	cmpl	$0x8, %ecx
000000000000a123	setl	%dl
000000000000a126	xorb	$-0x1, %dl
000000000000a129	andb	$0x1, %dl
000000000000a12c	movzbl	%dl, %ecx
000000000000a12f	movslq	%ecx, %rax
000000000000a132	cmpq	$0x0, %rax
000000000000a136	je	0xa15b
000000000000a13c	leaq	0x57c3e(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a143	leaq	0x5705c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a14a	leaq	0x57c86(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < 8"
000000000000a151	movl	$0x10ff, %edx
000000000000a156	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a15b	jmp	0xa160
000000000000a160	movq	-0x60(%rbp), %rax
000000000000a164	movl	0x8(%rax), %ecx
000000000000a167	movl	%ecx, %edx
000000000000a169	movzbl	0xc(%rax), %ecx
000000000000a16d	movl	%ecx, %eax
000000000000a16f	shlq	$0x20, %rax
000000000000a173	orq	%rax, %rdx
000000000000a176	shrq	$0x1c, %rdx
000000000000a17a	movb	%dl, %sil
000000000000a17d	andb	$0x1f, %sil
000000000000a181	movzbl	%sil, %ecx
000000000000a185	movl	%ecx, %eax
000000000000a187	shlq	$0x3, %rax
000000000000a18b	leaq	_ZydisCheckErrorConditions.lookup(%rip), %rdx
000000000000a192	addq	%rax, %rdx
000000000000a195	movq	-0x18(%rbp), %rax
000000000000a199	movzbl	0x574(%rax), %ecx
000000000000a1a0	movl	%ecx, %eax
000000000000a1a2	cmpb	$0x0, (%rdx,%rax)
000000000000a1a6	jne	0xa1b8
000000000000a1ac	movl	$0x80200001, -0x4(%rbp)
000000000000a1b3	jmp	0xaab8
000000000000a1b8	jmp	0xa1dc
000000000000a1bd	leaq	0x57bbd(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a1c4	leaq	0x56fdb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a1cb	leaq	0x5723a(%rip), %rcx ## literal pool for: "0"
000000000000a1d2	movl	$0x110a, %edx
000000000000a1d7	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a1dc	movl	-0x24(%rbp), %eax
000000000000a1df	movl	%eax, %ecx
000000000000a1e1	movq	%rcx, %rdx
000000000000a1e4	subq	$0x8, %rdx
000000000000a1e8	movq	%rcx, -0x80(%rbp)
000000000000a1ec	movq	%rdx, -0x88(%rbp)
000000000000a1f3	ja	0xa400
000000000000a1f9	leaq	0x8dc(%rip), %rax
000000000000a200	movq	-0x80(%rbp), %rcx
000000000000a204	movslq	(%rax,%rcx,4), %rdx
000000000000a208	addq	%rax, %rdx
000000000000a20b	jmpq	*%rdx
000000000000a20d	jmp	0xa41f
000000000000a212	movq	-0x10(%rbp), %rax
000000000000a216	movq	(%rax), %rax
000000000000a219	cmpl	$0x0, (%rax)
000000000000a21c	jne	0xa23f
000000000000a222	movq	-0x10(%rbp), %rax
000000000000a226	movzbl	0x2c(%rax), %ecx
000000000000a22a	cmpl	$0x0, %ecx
000000000000a22d	je	0xa23f
000000000000a233	movl	$0x80200003, -0x4(%rbp)
000000000000a23a	jmp	0xaab8
000000000000a23f	jmp	0xa41f
000000000000a244	movq	-0x18(%rbp), %rax
000000000000a248	movzbl	0x579(%rax), %ecx
000000000000a24f	cmpl	$0x1, %ecx
000000000000a252	jne	0xa264
000000000000a258	movl	$0x80200003, -0x4(%rbp)
000000000000a25f	jmp	0xaab8
000000000000a264	jmp	0xa269
000000000000a269	movq	-0x18(%rbp), %rax
000000000000a26d	movzbl	0x579(%rax), %ecx
000000000000a274	cmpl	$0x5, %ecx
000000000000a277	jle	0xa289
000000000000a27d	movl	$0x80200003, -0x4(%rbp)
000000000000a284	jmp	0xaab8
000000000000a289	jmp	0xa41f
000000000000a28e	movq	-0x18(%rbp), %rax
000000000000a292	movzbl	0x579(%rax), %ecx
000000000000a299	movq	-0x10(%rbp), %rax
000000000000a29d	movzbl	0x27(%rax), %edx
000000000000a2a1	shll	$0x3, %edx
000000000000a2a4	orl	%edx, %ecx
000000000000a2a6	movb	%cl, %sil
000000000000a2a9	movb	%sil, -0x61(%rbp)
000000000000a2ad	movzbl	-0x61(%rbp), %ecx
000000000000a2b1	movl	%ecx, %eax
000000000000a2b3	cmpq	$0x10, %rax
000000000000a2b7	setb	%sil
000000000000a2bb	xorb	$-0x1, %sil
000000000000a2bf	andb	$0x1, %sil
000000000000a2c3	movzbl	%sil, %ecx
000000000000a2c7	movslq	%ecx, %rax
000000000000a2ca	cmpq	$0x0, %rax
000000000000a2ce	je	0xa2f3
000000000000a2d4	leaq	0x57aa6(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a2db	leaq	0x56ec4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a2e2	leaq	0x57b0c(%rip), %rcx ## literal pool for: "value < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000a2e9	movl	$0x1131, %edx
000000000000a2ee	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a2f3	jmp	0xa2f8
000000000000a2f8	movzbl	-0x61(%rbp), %eax
000000000000a2fc	movl	%eax, %ecx
000000000000a2fe	leaq	_ZydisCheckErrorConditions.lookup.51(%rip), %rdx
000000000000a305	cmpb	$0x0, (%rdx,%rcx)
000000000000a309	jne	0xa31b
000000000000a30f	movl	$0x80200003, -0x4(%rbp)
000000000000a316	jmp	0xaab8
000000000000a31b	jmp	0xa41f
000000000000a320	movq	-0x10(%rbp), %rax
000000000000a324	cmpb	$0x0, 0x27(%rax)
000000000000a328	je	0xa33a
000000000000a32e	movl	$0x80200003, -0x4(%rbp)
000000000000a335	jmp	0xaab8
000000000000a33a	jmp	0xa41f
000000000000a33f	movq	-0x10(%rbp), %rax
000000000000a343	movq	(%rax), %rax
000000000000a346	cmpl	$0x0, (%rax)
000000000000a349	jne	0xa37d
000000000000a34f	movq	-0x10(%rbp), %rax
000000000000a353	movzbl	0x27(%rax), %ecx
000000000000a357	cmpl	$0x0, %ecx
000000000000a35a	jne	0xa371
000000000000a360	movq	-0x10(%rbp), %rax
000000000000a364	movzbl	0x2c(%rax), %ecx
000000000000a368	cmpl	$0x0, %ecx
000000000000a36b	je	0xa37d
000000000000a371	movl	$0x80200003, -0x4(%rbp)
000000000000a378	jmp	0xaab8
000000000000a37d	jmp	0xa41f
000000000000a382	movq	-0x10(%rbp), %rax
000000000000a386	cmpb	$0x0, 0x2c(%rax)
000000000000a38a	setne	%cl
000000000000a38d	xorb	$-0x1, %cl
000000000000a390	xorb	$-0x1, %cl
000000000000a393	andb	$0x1, %cl
000000000000a396	movzbl	%cl, %edx
000000000000a399	movslq	%edx, %rax
000000000000a39c	cmpq	$0x0, %rax
000000000000a3a0	je	0xa3c5
000000000000a3a6	leaq	0x579d4(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a3ad	leaq	0x56df2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a3b4	leaq	0x57a69(%rip), %rcx ## literal pool for: "!context->cache.R2"
000000000000a3bb	movl	$0x1149, %edx
000000000000a3c0	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a3c5	jmp	0xa3ca
000000000000a3ca	movq	-0x10(%rbp), %rax
000000000000a3ce	movzbl	0x27(%rax), %ecx
000000000000a3d2	cmpl	$0x0, %ecx
000000000000a3d5	jne	0xa3ef
000000000000a3db	movq	-0x18(%rbp), %rax
000000000000a3df	movzbl	0x579(%rax), %ecx
000000000000a3e6	cmpl	$0x3, %ecx
000000000000a3e9	jle	0xa3fb
000000000000a3ef	movl	$0x80200003, -0x4(%rbp)
000000000000a3f6	jmp	0xaab8
000000000000a3fb	jmp	0xa41f
000000000000a400	leaq	0x5797a(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a407	leaq	0x56d98(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a40e	leaq	0x56ff7(%rip), %rcx ## literal pool for: "0"
000000000000a415	movl	$__ZNSt6vectorIP12ModContainerSaIS1_EED1Ev, %edx ## std::vector<ModContainer*, std::allocator<ModContainer*> >::~vector()
000000000000a41a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a41f	movl	-0x28(%rbp), %eax
000000000000a422	movl	%eax, %ecx
000000000000a424	movq	%rcx, %rdx
000000000000a427	subq	$0xa, %rdx
000000000000a42b	movq	%rcx, -0x90(%rbp)
000000000000a432	movq	%rdx, -0x98(%rbp)
000000000000a439	ja	0xa532
000000000000a43f	leaq	0x6ba(%rip), %rax
000000000000a446	movq	-0x90(%rbp), %rcx
000000000000a44d	movslq	(%rax,%rcx,4), %rdx
000000000000a451	addq	%rax, %rdx
000000000000a454	jmpq	*%rdx
000000000000a456	jmp	0xa551
000000000000a45b	movq	-0x18(%rbp), %rax
000000000000a45f	movzbl	0x57a(%rax), %ecx
000000000000a466	cmpl	$0x1, %ecx
000000000000a469	jne	0xa47b
000000000000a46f	movl	$0x80200003, -0x4(%rbp)
000000000000a476	jmp	0xaab8
000000000000a47b	jmp	0xa480
000000000000a480	movq	-0x18(%rbp), %rax
000000000000a484	movzbl	0x57a(%rax), %ecx
000000000000a48b	cmpl	$0x6, %ecx
000000000000a48e	jle	0xa4a0
000000000000a494	movl	$0x80200003, -0x4(%rbp)
000000000000a49b	jmp	0xaab8
000000000000a4a0	jmp	0xa551
000000000000a4a5	jmp	0xa551
000000000000a4aa	movq	-0x10(%rbp), %rax
000000000000a4ae	movzbl	0x29(%rax), %ecx
000000000000a4b2	cmpl	$0x0, %ecx
000000000000a4b5	jne	0xa4cf
000000000000a4bb	movq	-0x18(%rbp), %rax
000000000000a4bf	movzbl	0x57a(%rax), %ecx
000000000000a4c6	cmpl	$0x3, %ecx
000000000000a4c9	jle	0xa4db
000000000000a4cf	movl	$0x80200003, -0x4(%rbp)
000000000000a4d6	jmp	0xaab8
000000000000a4db	jmp	0xa551
000000000000a4e0	movb	$0x1, -0x2d(%rbp)
000000000000a4e4	jmp	0xa551
000000000000a4e9	movq	-0x10(%rbp), %rax
000000000000a4ed	movq	(%rax), %rax
000000000000a4f0	cmpl	$0x0, (%rax)
000000000000a4f3	jne	0xa52d
000000000000a4f9	movq	-0x18(%rbp), %rax
000000000000a4fd	movzbl	0x578(%rax), %ecx
000000000000a504	cmpl	$0x0, %ecx
000000000000a507	jne	0xa52d
000000000000a50d	movq	-0x18(%rbp), %rax
000000000000a511	movzbl	0x57a(%rax), %ecx
000000000000a518	cmpl	$0x5, %ecx
000000000000a51b	jne	0xa52d
000000000000a521	movl	$0x80200001, -0x4(%rbp)
000000000000a528	jmp	0xaab8
000000000000a52d	jmp	0xa551
000000000000a532	leaq	0x57848(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a539	leaq	0x56c66(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a540	leaq	0x56ec5(%rip), %rcx ## literal pool for: "0"
000000000000a547	movl	$0x117a, %edx
000000000000a54c	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a551	movl	-0x2c(%rbp), %eax
000000000000a554	movl	%eax, %ecx
000000000000a556	movq	%rcx, %rdx
000000000000a559	subq	$0x7, %rdx
000000000000a55d	movq	%rcx, -0xa0(%rbp)
000000000000a564	movq	%rdx, -0xa8(%rbp)
000000000000a56b	ja	0xa6af
000000000000a571	leaq	0x5b4(%rip), %rax
000000000000a578	movq	-0xa0(%rbp), %rcx
000000000000a57f	movslq	(%rax,%rcx,4), %rdx
000000000000a583	addq	%rax, %rdx
000000000000a586	jmpq	*%rdx
000000000000a588	movq	-0x10(%rbp), %rax
000000000000a58c	movzbl	0x2e(%rax), %ecx
000000000000a590	andl	$0xf, %ecx
000000000000a593	cmpl	$0x0, %ecx
000000000000a596	je	0xa5a8
000000000000a59c	movl	$0x80200003, -0x4(%rbp)
000000000000a5a3	jmp	0xaab8
000000000000a5a8	cmpb	$0x0, -0x2d(%rbp)
000000000000a5ac	jne	0xa5cf
000000000000a5b2	movq	-0x10(%rbp), %rax
000000000000a5b6	movzbl	0x2d(%rax), %ecx
000000000000a5ba	cmpl	$0x0, %ecx
000000000000a5bd	je	0xa5cf
000000000000a5c3	movl	$0x80200003, -0x4(%rbp)
000000000000a5ca	jmp	0xaab8
000000000000a5cf	jmp	0xa6ce
000000000000a5d4	cmpb	$0x0, -0x2d(%rbp)
000000000000a5d8	movb	$0x1, %al
000000000000a5da	movb	%al, -0xa9(%rbp)
000000000000a5e0	je	0xa61b
000000000000a5e6	xorl	%eax, %eax
000000000000a5e8	movb	%al, %cl
000000000000a5ea	movq	-0x18(%rbp), %rdx
000000000000a5ee	cmpl	$0x4, 0xc(%rdx)
000000000000a5f2	movb	%cl, -0xaa(%rbp)
000000000000a5f8	je	0xa60f
000000000000a5fe	movq	-0x18(%rbp), %rax
000000000000a602	cmpl	$0x5, 0xc(%rax)
000000000000a606	setne	%cl
000000000000a609	movb	%cl, -0xaa(%rbp)
000000000000a60f	movb	-0xaa(%rbp), %al
000000000000a615	movb	%al, -0xa9(%rbp)
000000000000a61b	movb	-0xa9(%rbp), %al
000000000000a621	xorb	$-0x1, %al
000000000000a623	andb	$0x1, %al
000000000000a625	movzbl	%al, %ecx
000000000000a628	movslq	%ecx, %rdx
000000000000a62b	cmpq	$0x0, %rdx
000000000000a62f	je	0xa654
000000000000a635	leaq	0x57745(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a63c	leaq	0x56b63(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a643	leaq	0x577ed(%rip), %rcx ## literal pool for: "!has_VSIB || ((instruction->encoding != ZYDIS_INSTRUCTION_ENCODING_EVEX) && (instruction->encoding != ZYDIS_INSTRUCTION_ENCODING_MVEX))"
000000000000a64a	movl	$0x118c, %edx
000000000000a64f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a654	jmp	0xa659
000000000000a659	jmp	0xa6ce
000000000000a65e	movq	-0x10(%rbp), %rax
000000000000a662	cmpb	$0x0, 0x2d(%rax)
000000000000a666	je	0xa678
000000000000a66c	movl	$0x80200003, -0x4(%rbp)
000000000000a673	jmp	0xaab8
000000000000a678	jmp	0xa6ce
000000000000a67d	movq	-0x10(%rbp), %rax
000000000000a681	movq	(%rax), %rax
000000000000a684	cmpl	$0x0, (%rax)
000000000000a687	jne	0xa6aa
000000000000a68d	movq	-0x10(%rbp), %rax
000000000000a691	movzbl	0x2e(%rax), %ecx
000000000000a695	cmpl	$0x7, %ecx
000000000000a698	jle	0xa6aa
000000000000a69e	movl	$0x80200003, -0x4(%rbp)
000000000000a6a5	jmp	0xaab8
000000000000a6aa	jmp	0xa6ce
000000000000a6af	leaq	0x576cb(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a6b6	leaq	0x56ae9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a6bd	leaq	0x56d48(%rip), %rcx ## literal pool for: "0"
000000000000a6c4	movl	$0x119d, %edx
000000000000a6c9	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a6ce	cmpb	$0x0, -0x2e(%rbp)
000000000000a6d2	je	0xa9fc
000000000000a6d8	cmpb	$0x0, -0x2d(%rbp)
000000000000a6dc	setne	%al
000000000000a6df	xorb	$-0x1, %al
000000000000a6e1	andb	$0x1, %al
000000000000a6e3	movzbl	%al, %ecx
000000000000a6e6	movslq	%ecx, %rdx
000000000000a6e9	cmpq	$0x0, %rdx
000000000000a6ed	je	0xa712
000000000000a6f3	leaq	0x57687(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a6fa	leaq	0x56aa5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a701	leaq	0x577b7(%rip), %rcx ## literal pool for: "has_VSIB"
000000000000a708	movl	$0x11a3, %edx
000000000000a70d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a712	jmp	0xa717
000000000000a717	movq	-0x18(%rbp), %rax
000000000000a71b	movzbl	0x578(%rax), %ecx
000000000000a722	cmpl	$0x3, %ecx
000000000000a725	setne	%dl
000000000000a728	xorb	$-0x1, %dl
000000000000a72b	andb	$0x1, %dl
000000000000a72e	movzbl	%dl, %ecx
000000000000a731	movslq	%ecx, %rax
000000000000a734	cmpq	$0x0, %rax
000000000000a738	je	0xa75d
000000000000a73e	leaq	0x5763c(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a745	leaq	0x56a5a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a74c	leaq	0x57775(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
000000000000a753	movl	$0x11a4, %edx
000000000000a758	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a75d	jmp	0xa762
000000000000a762	movq	-0x18(%rbp), %rax
000000000000a766	movzbl	0x57a(%rax), %ecx
000000000000a76d	cmpl	$0x4, %ecx
000000000000a770	sete	%dl
000000000000a773	xorb	$-0x1, %dl
000000000000a776	andb	$0x1, %dl
000000000000a779	movzbl	%dl, %ecx
000000000000a77c	movslq	%ecx, %rax
000000000000a77f	cmpq	$0x0, %rax
000000000000a783	je	0xa7a8
000000000000a789	leaq	0x575f1(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a790	leaq	0x56a0f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a797	leaq	0x574c0(%rip), %rcx ## literal pool for: "instruction->raw.modrm.rm == 4"
000000000000a79e	movl	$0x11a5, %edx
000000000000a7a3	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a7a8	jmp	0xa7ad
000000000000a7ad	movq	-0x18(%rbp), %rax
000000000000a7b1	movb	0x579(%rax), %cl
000000000000a7b7	movb	%cl, -0x62(%rbp)
000000000000a7ba	movq	-0x18(%rbp), %rax
000000000000a7be	movb	0x57d(%rax), %cl
000000000000a7c4	movb	%cl, -0x63(%rbp)
000000000000a7c7	movq	-0x10(%rbp), %rax
000000000000a7cb	movq	(%rax), %rax
000000000000a7ce	cmpl	$0x0, (%rax)
000000000000a7d1	jne	0xa821
000000000000a7d7	movzbl	-0x62(%rbp), %eax
000000000000a7db	movq	-0x10(%rbp), %rcx
000000000000a7df	movzbl	0x27(%rcx), %edx
000000000000a7e3	shll	$0x3, %edx
000000000000a7e6	orl	%edx, %eax
000000000000a7e8	movq	-0x10(%rbp), %rcx
000000000000a7ec	movzbl	0x2c(%rcx), %edx
000000000000a7f0	shll	$0x4, %edx
000000000000a7f3	orl	%edx, %eax
000000000000a7f5	movb	%al, %sil
000000000000a7f8	movb	%sil, -0x62(%rbp)
000000000000a7fc	movzbl	-0x63(%rbp), %eax
000000000000a800	movq	-0x10(%rbp), %rcx
000000000000a804	movzbl	0x28(%rcx), %edx
000000000000a808	shll	$0x3, %edx
000000000000a80b	orl	%edx, %eax
000000000000a80d	movq	-0x10(%rbp), %rcx
000000000000a811	movzbl	0x2d(%rcx), %edx
000000000000a815	shll	$0x4, %edx
000000000000a818	orl	%edx, %eax
000000000000a81a	movb	%al, %sil
000000000000a81d	movb	%sil, -0x63(%rbp)
000000000000a821	movb	$-0x10, -0x64(%rbp)
000000000000a825	movq	-0x18(%rbp), %rax
000000000000a829	movl	0xc(%rax), %ecx
000000000000a82c	movl	%ecx, %edx
000000000000a82e	subl	$0x3, %edx
000000000000a831	movl	%ecx, -0xb0(%rbp)
000000000000a837	movl	%edx, -0xb4(%rbp)
000000000000a83d	je	0xa865
000000000000a843	jmp	0xa848
000000000000a848	movl	-0xb0(%rbp), %eax
000000000000a84e	addl	$-0x4, %eax
000000000000a851	subl	$0x2, %eax
000000000000a854	movl	%eax, -0xb8(%rbp)
000000000000a85a	jb	0xa90c
000000000000a860	jmp	0xa99c
000000000000a865	xorl	%eax, %eax
000000000000a867	movb	%al, %cl
000000000000a869	cmpl	$0x1, -0x24(%rbp)
000000000000a86d	movb	%cl, -0xb9(%rbp)
000000000000a873	jne	0xa89a
000000000000a879	xorl	%eax, %eax
000000000000a87b	movb	%al, %cl
000000000000a87d	cmpl	$0x9, -0x28(%rbp)
000000000000a881	movb	%cl, -0xb9(%rbp)
000000000000a887	jne	0xa89a
000000000000a88d	cmpl	$0x1, -0x2c(%rbp)
000000000000a891	sete	%al
000000000000a894	movb	%al, -0xb9(%rbp)
000000000000a89a	movb	-0xb9(%rbp), %al
000000000000a8a0	xorb	$-0x1, %al
000000000000a8a2	andb	$0x1, %al
000000000000a8a4	movzbl	%al, %ecx
000000000000a8a7	movslq	%ecx, %rdx
000000000000a8aa	cmpq	$0x0, %rdx
000000000000a8ae	je	0xa8d3
000000000000a8b4	leaq	0x574c6(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a8bb	leaq	0x568e4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a8c2	leaq	0x5761f(%rip), %rcx ## literal pool for: "(constr_REG == ZYDIS_REG_CONSTRAINTS_NONE) && (constr_RM == ZYDIS_REG_CONSTRAINTS_VSIB) && (constr_NDSNDD == ZYDIS_REG_CONSTRAINTS_NONE)"
000000000000a8c9	movl	$0x11b5, %edx
000000000000a8ce	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a8d3	jmp	0xa8d8
000000000000a8d8	movq	-0x10(%rbp), %rax
000000000000a8dc	movq	(%rax), %rax
000000000000a8df	cmpl	$0x0, (%rax)
000000000000a8e2	jne	0xa8f7
000000000000a8e8	movq	-0x10(%rbp), %rax
000000000000a8ec	movb	0x2e(%rax), %cl
000000000000a8ef	movb	%cl, -0x64(%rbp)
000000000000a8f2	jmp	0xa907
000000000000a8f7	movq	-0x10(%rbp), %rax
000000000000a8fb	movzbl	0x2e(%rax), %ecx
000000000000a8ff	andl	$0x7, %ecx
000000000000a902	movb	%cl, %dl
000000000000a904	movb	%dl, -0x64(%rbp)
000000000000a907	jmp	0xa9bb
000000000000a90c	cmpl	$0x0, -0x24(%rbp)
000000000000a910	je	0xa92a
000000000000a916	xorl	%eax, %eax
000000000000a918	movb	%al, %cl
000000000000a91a	cmpl	$0x1, -0x24(%rbp)
000000000000a91e	movb	%cl, -0xba(%rbp)
000000000000a924	jne	0xa94b
000000000000a92a	xorl	%eax, %eax
000000000000a92c	movb	%al, %cl
000000000000a92e	cmpl	$0x9, -0x28(%rbp)
000000000000a932	movb	%cl, -0xba(%rbp)
000000000000a938	jne	0xa94b
000000000000a93e	cmpl	$0x0, -0x2c(%rbp)
000000000000a942	sete	%al
000000000000a945	movb	%al, -0xba(%rbp)
000000000000a94b	movb	-0xba(%rbp), %al
000000000000a951	xorb	$-0x1, %al
000000000000a953	andb	$0x1, %al
000000000000a955	movzbl	%al, %ecx
000000000000a958	movslq	%ecx, %rdx
000000000000a95b	cmpq	$0x0, %rdx
000000000000a95f	je	0xa984
000000000000a965	leaq	0x57415(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a96c	leaq	0x56833(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a973	leaq	0x575f7(%rip), %rcx ## literal pool for: "((constr_REG == ZYDIS_REG_CONSTRAINTS_UNUSED) || (constr_REG == ZYDIS_REG_CONSTRAINTS_NONE)) && (constr_RM == ZYDIS_REG_CONSTRAINTS_VSIB) && (constr_NDSNDD == ZYDIS_REG_CONSTRAINTS_UNUSED)"
000000000000a97a	movl	$0x11c4, %edx
000000000000a97f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a984	jmp	0xa989
000000000000a989	cmpl	$0x0, -0x24(%rbp)
000000000000a98d	jne	0xa997
000000000000a993	movb	$-0xf, -0x62(%rbp)
000000000000a997	jmp	0xa9bb
000000000000a99c	leaq	0x573de(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a9a3	leaq	0x567fc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a9aa	leaq	0x56a5b(%rip), %rcx ## literal pool for: "0"
000000000000a9b1	movl	$0x11ce, %edx
000000000000a9b6	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000a9bb	movzbl	-0x62(%rbp), %eax
000000000000a9bf	movzbl	-0x63(%rbp), %ecx
000000000000a9c3	cmpl	%ecx, %eax
000000000000a9c5	je	0xa9eb
000000000000a9cb	movzbl	-0x62(%rbp), %eax
000000000000a9cf	movzbl	-0x64(%rbp), %ecx
000000000000a9d3	cmpl	%ecx, %eax
000000000000a9d5	je	0xa9eb
000000000000a9db	movzbl	-0x63(%rbp), %eax
000000000000a9df	movzbl	-0x64(%rbp), %ecx
000000000000a9e3	cmpl	%ecx, %eax
000000000000a9e5	jne	0xa9f7
000000000000a9eb	movl	$0x80200003, -0x4(%rbp)
000000000000a9f2	jmp	0xaab8
000000000000a9f7	jmp	0xa9fc
000000000000a9fc	movl	-0x34(%rbp), %eax
000000000000a9ff	movl	%eax, %ecx
000000000000aa01	subl	$0x2, %ecx
000000000000aa04	movl	%eax, -0xc0(%rbp)
000000000000aa0a	movl	%ecx, -0xc4(%rbp)
000000000000aa10	jb	0xaa4f
000000000000aa16	jmp	0xaa1b
000000000000aa1b	movl	-0xc0(%rbp), %eax
000000000000aa21	subl	$0x2, %eax
000000000000aa24	movl	%eax, -0xc8(%rbp)
000000000000aa2a	je	0xaa54
000000000000aa30	jmp	0xaa35
000000000000aa35	movl	-0xc0(%rbp), %eax
000000000000aa3b	subl	$0x3, %eax
000000000000aa3e	movl	%eax, -0xcc(%rbp)
000000000000aa44	je	0xaa73
000000000000aa4a	jmp	0xaa92
000000000000aa4f	jmp	0xaab1
000000000000aa54	movq	-0x10(%rbp), %rax
000000000000aa58	cmpb	$0x0, 0x2f(%rax)
000000000000aa5c	jne	0xaa6e
000000000000aa62	movl	$0x8020000a, -0x4(%rbp)
000000000000aa69	jmp	0xaab8
000000000000aa6e	jmp	0xaab1
000000000000aa73	movq	-0x10(%rbp), %rax
000000000000aa77	cmpb	$0x0, 0x2f(%rax)
000000000000aa7b	je	0xaa8d
000000000000aa81	movl	$0x8020000a, -0x4(%rbp)
000000000000aa88	jmp	0xaab8
000000000000aa8d	jmp	0xaab1
000000000000aa92	leaq	0x572e8(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000aa99	leaq	0x56706(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000aaa0	leaq	0x56965(%rip), %rcx ## literal pool for: "0"
000000000000aaa7	movl	$0x11ed, %edx
000000000000aaac	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000aab1	movl	$0x100000, -0x4(%rbp)
000000000000aab8	movl	-0x4(%rbp), %eax
000000000000aabb	addq	$0xd0, %rsp
000000000000aac2	popq	%rbp
000000000000aac3	retq
000000000000aac4	pushq	%rsi
000000000000aac5	hlt
000000000000aac6	.byte 0xff #bad opcode
000000000000aac7	decl	%ebx
000000000000aac9	hlt
000000000000aaca	.byte 0xff #bad opcode
000000000000aacb	callq	*%rax
000000000000aacd	hlt
000000000000aace	.byte 0xff #bad opcode
000000000000aacf	pushq	%rbp
000000000000aad1	hlt
000000000000aad2	.byte 0xff #bad opcode
000000000000aad3	jmpq	*(%rdi)
000000000000aad5	cmc
000000000000aad6	.byte 0xff #bad opcode
000000000000aad7	ljmpl	*0x31fffff5(%rsi)
000000000000aadd	idivl	%edi
000000000000aadf	pushq	(%rcx)
000000000000aae1	idivl	%edi
000000000000aae3	pushq	(%rsi)
000000000000aae5	idivl	%edi
000000000000aae7	ljmpl	*-0x9(%rax)
000000000000aaea	.byte 0xff #bad opcode
000000000000aaeb	decl	-0x4d000009(%rbp)
000000000000aaf1	idivl	%edi
000000000000aaf3	incl	-0x1(%rax,%rdi,8)
000000000000aaf7	jmpq	*-0x8(%rbx)
000000000000aafa	.byte 0xff #bad opcode
000000000000aafb	jmpq	*0x56fffff8(%rsi)
000000000000ab01	stc
000000000000ab02	.byte 0xff #bad opcode
000000000000ab03	callq	*-0x7(%rsi)
000000000000ab06	.byte 0xff #bad opcode
000000000000ab07	pushq	(%rdx)
000000000000ab09	cli
000000000000ab0a	.byte 0xff #bad opcode
000000000000ab0b	lcalll	*-0x7(%rbx)
000000000000ab0e	.byte 0xff #bad opcode
000000000000ab0f	incl	0x32fffff9(%rax)
000000000000ab15	cli
000000000000ab16	.byte 0xff #bad opcode
000000000000ab17	pushq	(%rdx)
000000000000ab19	cli
000000000000ab1a	.byte 0xff #bad opcode
000000000000ab1b	jmpq	*-0x55000007(%rbp)
000000000000ab21	stc
000000000000ab22	.byte 0xff #bad opcode
000000000000ab23	jmpq	*%rax
000000000000ab25	stc
000000000000ab26	.byte 0xff #bad opcode
000000000000ab27	.byte 0xff #bad opcode
000000000000ab28	jmp	0x5d00ab26
000000000000ab2d	cli
000000000000ab2e	.byte 0xff #bad opcode
000000000000ab2f	ljmpl	*0x32fffffa(%rax)
000000000000ab35	sti
000000000000ab36	.byte 0xff #bad opcode
000000000000ab37	incl	-0x7c000005(%rbx)
000000000000ab3d	sti
000000000000ab3e	.byte 0xff #bad opcode
000000000000ab3f	incl	-0x7c000005(%rbx)
000000000000ab45	sti
000000000000ab46	.byte 0xff #bad opcode
000000000000ab47	callq	*-0x5(%rcx)
000000000000ab4a	.byte 0xff #bad opcode
000000000000ab4b	decl	(%rdi)
000000000000ab4d	.byte 0x1f #bad opcode
000000000000ab4e	addb	%dl, 0x48(%rbp)
_ZydisInputNext:
000000000000ab50	pushq	%rbp
000000000000ab51	movq	%rsp, %rbp
000000000000ab54	subq	$0x20, %rsp
000000000000ab58	movq	%rdi, -0x10(%rbp)
000000000000ab5c	movq	%rsi, -0x18(%rbp)
000000000000ab60	movq	%rdx, -0x20(%rbp)
000000000000ab64	cmpq	$0x0, -0x10(%rbp)
000000000000ab69	setne	%al
000000000000ab6c	xorb	$-0x1, %al
000000000000ab6e	andb	$0x1, %al
000000000000ab70	movzbl	%al, %ecx
000000000000ab73	movslq	%ecx, %rdx
000000000000ab76	cmpq	$0x0, %rdx
000000000000ab7a	je	0xab9f
000000000000ab80	leaq	0x574a7(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000ab87	leaq	0x56618(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ab8e	leaq	0x56646(%rip), %rcx ## literal pool for: "context"
000000000000ab95	movl	$0x15d, %edx
000000000000ab9a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ab9f	jmp	0xaba4
000000000000aba4	cmpq	$0x0, -0x18(%rbp)
000000000000aba9	setne	%al
000000000000abac	xorb	$-0x1, %al
000000000000abae	andb	$0x1, %al
000000000000abb0	movzbl	%al, %ecx
000000000000abb3	movslq	%ecx, %rdx
000000000000abb6	cmpq	$0x0, %rdx
000000000000abba	je	0xabdf
000000000000abc0	leaq	0x57467(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000abc7	leaq	0x565d8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000abce	leaq	0x5660e(%rip), %rcx ## literal pool for: "instruction"
000000000000abd5	movl	$0x15e, %edx
000000000000abda	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000abdf	jmp	0xabe4
000000000000abe4	cmpq	$0x0, -0x20(%rbp)
000000000000abe9	setne	%al
000000000000abec	xorb	$-0x1, %al
000000000000abee	andb	$0x1, %al
000000000000abf0	movzbl	%al, %ecx
000000000000abf3	movslq	%ecx, %rdx
000000000000abf6	cmpq	$0x0, %rdx
000000000000abfa	je	0xac1f
000000000000ac00	leaq	0x57427(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000ac07	leaq	0x56598(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ac0e	leaq	0x5660c(%rip), %rcx ## literal pool for: "value"
000000000000ac15	movl	$0x15f, %edx
000000000000ac1a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ac1f	jmp	0xac24
000000000000ac24	movq	-0x18(%rbp), %rax
000000000000ac28	movzbl	0x8(%rax), %ecx
000000000000ac2c	cmpl	$0xf, %ecx
000000000000ac2f	jl	0xac41
000000000000ac35	movl	$0x80200002, -0x4(%rbp)
000000000000ac3c	jmp	0xaca0
000000000000ac41	movq	-0x10(%rbp), %rax
000000000000ac45	cmpq	$0x0, 0x10(%rax)
000000000000ac4a	jbe	0xac99
000000000000ac50	movq	-0x10(%rbp), %rax
000000000000ac54	movq	0x8(%rax), %rcx
000000000000ac58	movq	%rcx, %rdx
000000000000ac5b	addq	$0x1, %rdx
000000000000ac5f	movq	%rdx, 0x8(%rax)
000000000000ac63	movb	(%rcx), %sil
000000000000ac66	movq	-0x20(%rbp), %rax
000000000000ac6a	movb	%sil, (%rax)
000000000000ac6d	movq	-0x18(%rbp), %rax
000000000000ac71	movb	0x8(%rax), %sil
000000000000ac75	addb	$0x1, %sil
000000000000ac79	movb	%sil, 0x8(%rax)
000000000000ac7d	movq	-0x10(%rbp), %rax
000000000000ac81	movq	0x10(%rax), %rcx
000000000000ac85	addq	$-0x1, %rcx
000000000000ac89	movq	%rcx, 0x10(%rax)
000000000000ac8d	movl	$0x100000, -0x4(%rbp)
000000000000ac94	jmp	0xaca0
000000000000ac99	movl	$0x80200000, -0x4(%rbp)
000000000000aca0	movl	-0x4(%rbp), %eax
000000000000aca3	addq	$0x20, %rsp
000000000000aca7	popq	%rbp
000000000000aca8	retq
000000000000aca9	nopl	(%rax)
_ZydisSetAttributes:
000000000000acb0	pushq	%rbp
000000000000acb1	movq	%rsp, %rbp
000000000000acb4	subq	$0x80, %rsp
000000000000acbb	movq	%rdi, -0x8(%rbp)
000000000000acbf	movq	%rsi, -0x10(%rbp)
000000000000acc3	movq	%rdx, -0x18(%rbp)
000000000000acc7	cmpq	$0x0, -0x8(%rbp)
000000000000accc	setne	%al
000000000000accf	xorb	$-0x1, %al
000000000000acd1	andb	$0x1, %al
000000000000acd3	movzbl	%al, %ecx
000000000000acd6	movslq	%ecx, %rdx
000000000000acd9	cmpq	$0x0, %rdx
000000000000acdd	je	0xad02
000000000000ace3	leaq	0x57353(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000acea	leaq	0x564b5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000acf1	leaq	0x564e3(%rip), %rcx ## literal pool for: "context"
000000000000acf8	movl	$0x857, %edx
000000000000acfd	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ad02	jmp	0xad07
000000000000ad07	cmpq	$0x0, -0x10(%rbp)
000000000000ad0c	setne	%al
000000000000ad0f	xorb	$-0x1, %al
000000000000ad11	andb	$0x1, %al
000000000000ad13	movzbl	%al, %ecx
000000000000ad16	movslq	%ecx, %rdx
000000000000ad19	cmpq	$0x0, %rdx
000000000000ad1d	je	0xad42
000000000000ad23	leaq	0x57313(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000ad2a	leaq	0x56475(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ad31	leaq	0x564ab(%rip), %rcx ## literal pool for: "instruction"
000000000000ad38	movl	$0x858, %edx
000000000000ad3d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ad42	jmp	0xad47
000000000000ad47	cmpq	$0x0, -0x18(%rbp)
000000000000ad4c	setne	%al
000000000000ad4f	xorb	$-0x1, %al
000000000000ad51	andb	$0x1, %al
000000000000ad53	movzbl	%al, %ecx
000000000000ad56	movslq	%ecx, %rdx
000000000000ad59	cmpq	$0x0, %rdx
000000000000ad5d	je	0xad82
000000000000ad63	leaq	0x572d3(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000ad6a	leaq	0x56435(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ad71	leaq	0x56c90(%rip), %rcx ## literal pool for: "definition"
000000000000ad78	movl	$0x859, %edx
000000000000ad7d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ad82	jmp	0xad87
000000000000ad87	movq	-0x18(%rbp), %rax
000000000000ad8b	movb	0xa(%rax), %cl
000000000000ad8e	shrb	%cl
000000000000ad90	andb	$0x3, %cl
000000000000ad93	movzbl	%cl, %edx
000000000000ad96	cmpl	$0x0, %edx
000000000000ad99	je	0xae1f
000000000000ad9f	movq	-0x18(%rbp), %rax
000000000000ada3	movb	0xa(%rax), %cl
000000000000ada6	shrb	%cl
000000000000ada8	andb	$0x3, %cl
000000000000adab	movzbl	%cl, %edx
000000000000adae	movl	%edx, %eax
000000000000adb0	cmpq	$0x4, %rax
000000000000adb4	setb	%cl
000000000000adb7	xorb	$-0x1, %cl
000000000000adba	andb	$0x1, %cl
000000000000adbd	movzbl	%cl, %edx
000000000000adc0	movslq	%edx, %rax
000000000000adc3	cmpq	$0x0, %rax
000000000000adc7	je	0xadec
000000000000adcd	leaq	0x57269(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000add4	leaq	0x563cb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000addb	leaq	0x5726e(%rip), %rcx ## literal pool for: "definition->cpu_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000ade2	movl	$0x864, %edx
000000000000ade7	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000adec	jmp	0xadf1
000000000000adf1	movq	-0x18(%rbp), %rax
000000000000adf5	movb	0xa(%rax), %cl
000000000000adf8	shrb	%cl
000000000000adfa	andb	$0x3, %cl
000000000000adfd	movzbl	%cl, %edx
000000000000ae00	movl	%edx, %eax
000000000000ae02	leaq	_ZydisSetAttributes.mapping(%rip), %rsi
000000000000ae09	movq	(%rsi,%rax,8), %rax
000000000000ae0d	movq	-0x10(%rbp), %rsi
000000000000ae11	orq	0x430(%rsi), %rax
000000000000ae18	movq	%rax, 0x430(%rsi)
000000000000ae1f	movq	-0x18(%rbp), %rax
000000000000ae23	movb	0xa(%rax), %cl
000000000000ae26	shrb	$0x3, %cl
000000000000ae29	andb	$0x3, %cl
000000000000ae2c	movzbl	%cl, %edx
000000000000ae2f	cmpl	$0x0, %edx
000000000000ae32	je	0xaeba
000000000000ae38	movq	-0x18(%rbp), %rax
000000000000ae3c	movb	0xa(%rax), %cl
000000000000ae3f	shrb	$0x3, %cl
000000000000ae42	andb	$0x3, %cl
000000000000ae45	movzbl	%cl, %edx
000000000000ae48	movl	%edx, %eax
000000000000ae4a	cmpq	$0x4, %rax
000000000000ae4e	setb	%cl
000000000000ae51	xorb	$-0x1, %cl
000000000000ae54	andb	$0x1, %cl
000000000000ae57	movzbl	%cl, %edx
000000000000ae5a	movslq	%edx, %rax
000000000000ae5d	cmpq	$0x0, %rax
000000000000ae61	je	0xae86
000000000000ae67	leaq	0x571cf(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000ae6e	leaq	0x56331(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ae75	leaq	0x57215(%rip), %rcx ## literal pool for: "definition->fpu_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000ae7c	movl	$0x871, %edx
000000000000ae81	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ae86	jmp	0xae8b
000000000000ae8b	movq	-0x18(%rbp), %rax
000000000000ae8f	movb	0xa(%rax), %cl
000000000000ae92	shrb	$0x3, %cl
000000000000ae95	andb	$0x3, %cl
000000000000ae98	movzbl	%cl, %edx
000000000000ae9b	movl	%edx, %eax
000000000000ae9d	leaq	_ZydisSetAttributes.mapping.60(%rip), %rsi
000000000000aea4	movq	(%rsi,%rax,8), %rax
000000000000aea8	movq	-0x10(%rbp), %rsi
000000000000aeac	orq	0x430(%rsi), %rax
000000000000aeb3	movq	%rax, 0x430(%rsi)
000000000000aeba	movq	-0x18(%rbp), %rax
000000000000aebe	movb	0xa(%rax), %cl
000000000000aec1	shrb	$0x5, %cl
000000000000aec4	andb	$0x3, %cl
000000000000aec7	movzbl	%cl, %edx
000000000000aeca	cmpl	$0x0, %edx
000000000000aecd	je	0xaf55
000000000000aed3	movq	-0x18(%rbp), %rax
000000000000aed7	movb	0xa(%rax), %cl
000000000000aeda	shrb	$0x5, %cl
000000000000aedd	andb	$0x3, %cl
000000000000aee0	movzbl	%cl, %edx
000000000000aee3	movl	%edx, %eax
000000000000aee5	cmpq	$0x4, %rax
000000000000aee9	setb	%cl
000000000000aeec	xorb	$-0x1, %cl
000000000000aeef	andb	$0x1, %cl
000000000000aef2	movzbl	%cl, %edx
000000000000aef5	movslq	%edx, %rax
000000000000aef8	cmpq	$0x0, %rax
000000000000aefc	je	0xaf21
000000000000af02	leaq	0x57134(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000af09	leaq	0x56296(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000af10	leaq	0x571bb(%rip), %rcx ## literal pool for: "definition->xmm_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000af17	movl	$0x87e, %edx
000000000000af1c	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000af21	jmp	0xaf26
000000000000af26	movq	-0x18(%rbp), %rax
000000000000af2a	movb	0xa(%rax), %cl
000000000000af2d	shrb	$0x5, %cl
000000000000af30	andb	$0x3, %cl
000000000000af33	movzbl	%cl, %edx
000000000000af36	movl	%edx, %eax
000000000000af38	leaq	_ZydisSetAttributes.mapping.62(%rip), %rsi
000000000000af3f	movq	(%rsi,%rax,8), %rax
000000000000af43	movq	-0x10(%rbp), %rsi
000000000000af47	orq	0x430(%rsi), %rax
000000000000af4e	movq	%rax, 0x430(%rsi)
000000000000af55	movq	-0x10(%rbp), %rax
000000000000af59	movl	0xc(%rax), %ecx
000000000000af5c	testl	%ecx, %ecx
000000000000af5e	movl	%ecx, -0x24(%rbp)
000000000000af61	je	0xaf82
000000000000af67	jmp	0xaf6c
000000000000af6c	movl	-0x24(%rbp), %eax
000000000000af6f	decl	%eax
000000000000af71	subl	$0x5, %eax
000000000000af74	movl	%eax, -0x28(%rbp)
000000000000af77	jb	0xb6db
000000000000af7d	jmp	0xb884
000000000000af82	movq	-0x18(%rbp), %rax
000000000000af86	movq	%rax, -0x20(%rbp)
000000000000af8a	movq	-0x20(%rbp), %rax
000000000000af8e	movl	0x8(%rax), %ecx
000000000000af91	movl	%ecx, %eax
000000000000af93	shrq	$0x17, %rax
000000000000af97	movb	%al, %dl
000000000000af99	andb	$0x1, %dl
000000000000af9c	cmpb	$0x0, %dl
000000000000af9f	je	0xafbe
000000000000afa5	movq	-0x10(%rbp), %rax
000000000000afa9	movq	0x430(%rax), %rcx
000000000000afb0	orq	$0x100, %rcx
000000000000afb7	movq	%rcx, 0x430(%rax)
000000000000afbe	movq	-0x20(%rbp), %rax
000000000000afc2	movb	0xb(%rax), %cl
000000000000afc5	andb	$0x1, %cl
000000000000afc8	cmpb	$0x0, %cl
000000000000afcb	je	0xb02f
000000000000afd1	movq	-0x10(%rbp), %rax
000000000000afd5	movq	0x430(%rax), %rcx
000000000000afdc	orq	$0x200, %rcx
000000000000afe3	movq	%rcx, 0x430(%rax)
000000000000afea	movq	-0x8(%rbp), %rax
000000000000afee	cmpb	$0x0, 0x18(%rax)
000000000000aff2	je	0xb02a
000000000000aff8	movq	-0x10(%rbp), %rax
000000000000affc	movq	0x430(%rax), %rcx
000000000000b003	orq	$0x80000, %rcx
000000000000b00a	movq	%rcx, 0x430(%rax)
000000000000b011	movq	-0x10(%rbp), %rax
000000000000b015	movq	-0x8(%rbp), %rcx
000000000000b019	movzbl	0x1d(%rcx), %edx
000000000000b01d	movl	%edx, %ecx
000000000000b01f	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b02a	jmp	0xb02f
000000000000b02f	movq	-0x20(%rbp), %rax
000000000000b033	movl	0x8(%rax), %ecx
000000000000b036	movl	%ecx, %eax
000000000000b038	shrq	$0x19, %rax
000000000000b03c	movb	%al, %dl
000000000000b03e	andb	$0x1, %dl
000000000000b041	cmpb	$0x0, %dl
000000000000b044	je	0xb063
000000000000b04a	movq	-0x10(%rbp), %rax
000000000000b04e	movq	0x430(%rax), %rcx
000000000000b055	orq	$0x400, %rcx
000000000000b05c	movq	%rcx, 0x430(%rax)
000000000000b063	movq	-0x20(%rbp), %rax
000000000000b067	movl	0x8(%rax), %ecx
000000000000b06a	movl	%ecx, %eax
000000000000b06c	shrq	$0x1a, %rax
000000000000b070	movb	%al, %dl
000000000000b072	andb	$0x1, %dl
000000000000b075	cmpb	$0x0, %dl
000000000000b078	je	0xb097
000000000000b07e	movq	-0x10(%rbp), %rax
000000000000b082	movq	0x430(%rax), %rcx
000000000000b089	orq	$0x800, %rcx
000000000000b090	movq	%rcx, 0x430(%rax)
000000000000b097	movq	-0x20(%rbp), %rax
000000000000b09b	movl	0x8(%rax), %ecx
000000000000b09e	movl	%ecx, %eax
000000000000b0a0	shrq	$0x1b, %rax
000000000000b0a4	movb	%al, %dl
000000000000b0a6	andb	$0x1, %dl
000000000000b0a9	cmpb	$0x0, %dl
000000000000b0ac	je	0xb0cb
000000000000b0b2	movq	-0x10(%rbp), %rax
000000000000b0b6	movq	0x430(%rax), %rcx
000000000000b0bd	orq	$0x1000, %rcx
000000000000b0c4	movq	%rcx, 0x430(%rax)
000000000000b0cb	movq	-0x20(%rbp), %rax
000000000000b0cf	movl	0x8(%rax), %ecx
000000000000b0d2	movl	%ecx, %eax
000000000000b0d4	shrq	$0x1c, %rax
000000000000b0d8	movb	%al, %dl
000000000000b0da	andb	$0x1, %dl
000000000000b0dd	cmpb	$0x0, %dl
000000000000b0e0	je	0xb0ff
000000000000b0e6	movq	-0x10(%rbp), %rax
000000000000b0ea	movq	0x430(%rax), %rcx
000000000000b0f1	orq	$0x2000, %rcx
000000000000b0f8	movq	%rcx, 0x430(%rax)
000000000000b0ff	movq	-0x20(%rbp), %rax
000000000000b103	movl	0x8(%rax), %ecx
000000000000b106	movl	%ecx, %eax
000000000000b108	shrq	$0x1d, %rax
000000000000b10c	movb	%al, %dl
000000000000b10e	andb	$0x1, %dl
000000000000b111	cmpb	$0x0, %dl
000000000000b114	je	0xb133
000000000000b11a	movq	-0x10(%rbp), %rax
000000000000b11e	movq	0x430(%rax), %rcx
000000000000b125	orq	$0x4000, %rcx
000000000000b12c	movq	%rcx, 0x430(%rax)
000000000000b133	movq	-0x20(%rbp), %rax
000000000000b137	movl	0x8(%rax), %ecx
000000000000b13a	movl	%ecx, %eax
000000000000b13c	shrq	$0x1e, %rax
000000000000b140	movb	%al, %dl
000000000000b142	andb	$0x1, %dl
000000000000b145	cmpb	$0x0, %dl
000000000000b148	je	0xb167
000000000000b14e	movq	-0x10(%rbp), %rax
000000000000b152	movq	0x430(%rax), %rcx
000000000000b159	orq	$0x8000, %rcx
000000000000b160	movq	%rcx, 0x430(%rax)
000000000000b167	movq	-0x20(%rbp), %rax
000000000000b16b	movl	0x8(%rax), %ecx
000000000000b16e	movl	%ecx, %eax
000000000000b170	shrq	$0x1f, %rax
000000000000b174	movb	%al, %dl
000000000000b176	cmpb	$0x0, %dl
000000000000b179	je	0xb198
000000000000b17f	movq	-0x10(%rbp), %rax
000000000000b183	movq	0x430(%rax), %rcx
000000000000b18a	orq	$0x10000, %rcx
000000000000b191	movq	%rcx, 0x430(%rax)
000000000000b198	movq	-0x8(%rbp), %rax
000000000000b19c	movzbl	0x19(%rax), %ecx
000000000000b1a0	movl	%ecx, %edx
000000000000b1a2	subl	$0xf2, %edx
000000000000b1a8	movl	%ecx, -0x2c(%rbp)
000000000000b1ab	movl	%edx, -0x30(%rbp)
000000000000b1ae	je	0xb1cf
000000000000b1b4	jmp	0xb1b9
000000000000b1b9	movl	-0x2c(%rbp), %eax
000000000000b1bc	subl	$0xf3, %eax
000000000000b1c1	movl	%eax, -0x34(%rbp)
000000000000b1c4	je	0xb2ce
000000000000b1ca	jmp	0xb3b9
000000000000b1cf	movq	-0x10(%rbp), %rax
000000000000b1d3	movq	0x430(%rax), %rax
000000000000b1da	andq	$0x1000, %rax
000000000000b1e0	cmpq	$0x0, %rax
000000000000b1e4	je	0xb208
000000000000b1ea	movq	-0x10(%rbp), %rax
000000000000b1ee	movq	0x430(%rax), %rcx
000000000000b1f5	orq	$0x400000, %rcx
000000000000b1fc	movq	%rcx, 0x430(%rax)
000000000000b203	jmp	0xb3be
000000000000b208	movq	-0x10(%rbp), %rax
000000000000b20c	movq	0x430(%rax), %rax
000000000000b213	andq	$0x4000, %rax
000000000000b219	cmpq	$0x0, %rax
000000000000b21d	je	0xb27c
000000000000b223	movq	-0x10(%rbp), %rax
000000000000b227	movq	0x430(%rax), %rax
000000000000b22e	andq	$0x80000, %rax
000000000000b234	cmpq	$0x0, %rax
000000000000b238	jne	0xb259
000000000000b23e	movq	-0x20(%rbp), %rax
000000000000b242	movl	0x8(%rax), %ecx
000000000000b245	movl	%ecx, %eax
000000000000b247	shrq	$0x1f, %rax
000000000000b24b	movb	%al, %dl
000000000000b24d	movzbl	%dl, %ecx
000000000000b250	cmpl	$0x0, %ecx
000000000000b253	je	0xb277
000000000000b259	movq	-0x10(%rbp), %rax
000000000000b25d	movq	0x430(%rax), %rcx
000000000000b264	orq	$0x1000000, %rcx
000000000000b26b	movq	%rcx, 0x430(%rax)
000000000000b272	jmp	0xb3be
000000000000b277	jmp	0xb27c
000000000000b27c	movq	-0x8(%rbp), %rax
000000000000b280	movq	(%rax), %rax
000000000000b283	movzbl	0xb(%rax), %ecx
000000000000b287	cmpl	$0x0, %ecx
000000000000b28a	je	0xb2c9
000000000000b290	movq	-0x10(%rbp), %rax
000000000000b294	movq	0x430(%rax), %rax
000000000000b29b	andq	$0x2000, %rax
000000000000b2a1	cmpq	$0x0, %rax
000000000000b2a5	je	0xb2c9
000000000000b2ab	movq	-0x10(%rbp), %rax
000000000000b2af	movq	0x430(%rax), %rcx
000000000000b2b6	orq	$0x800000, %rcx
000000000000b2bd	movq	%rcx, 0x430(%rax)
000000000000b2c4	jmp	0xb3be
000000000000b2c9	jmp	0xb3be
000000000000b2ce	movq	-0x10(%rbp), %rax
000000000000b2d2	movq	0x430(%rax), %rax
000000000000b2d9	andq	$0x400, %rax
000000000000b2df	cmpq	$0x0, %rax
000000000000b2e3	je	0xb307
000000000000b2e9	movq	-0x10(%rbp), %rax
000000000000b2ed	movq	0x430(%rax), %rcx
000000000000b2f4	orq	$0x100000, %rcx
000000000000b2fb	movq	%rcx, 0x430(%rax)
000000000000b302	jmp	0xb3be
000000000000b307	movq	-0x10(%rbp), %rax
000000000000b30b	movq	0x430(%rax), %rax
000000000000b312	andq	$0x800, %rax
000000000000b318	cmpq	$0x0, %rax
000000000000b31c	je	0xb340
000000000000b322	movq	-0x10(%rbp), %rax
000000000000b326	movq	0x430(%rax), %rcx
000000000000b32d	orq	$0x200000, %rcx
000000000000b334	movq	%rcx, 0x430(%rax)
000000000000b33b	jmp	0xb3be
000000000000b340	movq	-0x10(%rbp), %rax
000000000000b344	movq	0x430(%rax), %rax
000000000000b34b	andq	$0x8000, %rax
000000000000b351	cmpq	$0x0, %rax
000000000000b355	je	0xb3b4
000000000000b35b	movq	-0x10(%rbp), %rax
000000000000b35f	movq	0x430(%rax), %rax
000000000000b366	andq	$0x80000, %rax
000000000000b36c	cmpq	$0x0, %rax
000000000000b370	jne	0xb391
000000000000b376	movq	-0x20(%rbp), %rax
000000000000b37a	movl	0x8(%rax), %ecx
000000000000b37d	movl	%ecx, %eax
000000000000b37f	shrq	$0x1f, %rax
000000000000b383	movb	%al, %dl
000000000000b385	movzbl	%dl, %ecx
000000000000b388	cmpl	$0x0, %ecx
000000000000b38b	je	0xb3af
000000000000b391	movq	-0x10(%rbp), %rax
000000000000b395	movq	0x430(%rax), %rcx
000000000000b39c	orq	$0x2000000, %rcx
000000000000b3a3	movq	%rcx, 0x430(%rax)
000000000000b3aa	jmp	0xb3be
000000000000b3af	jmp	0xb3b4
000000000000b3b4	jmp	0xb3be
000000000000b3b9	jmp	0xb3be
000000000000b3be	movq	-0x10(%rbp), %rax
000000000000b3c2	movq	-0x8(%rbp), %rcx
000000000000b3c6	movzbl	0x1e(%rcx), %edx
000000000000b3ca	movl	%edx, %ecx
000000000000b3cc	cmpl	$0x0, 0x4cc(%rax,%rcx,8)
000000000000b3d4	jne	0xb40e
000000000000b3da	movq	-0x10(%rbp), %rax
000000000000b3de	movq	0x430(%rax), %rax
000000000000b3e5	andq	$0x3f00000, %rax
000000000000b3eb	cmpq	$0x0, %rax
000000000000b3ef	je	0xb40e
000000000000b3f5	movq	-0x10(%rbp), %rax
000000000000b3f9	movq	-0x8(%rbp), %rcx
000000000000b3fd	movzbl	0x1e(%rcx), %edx
000000000000b401	movl	%edx, %ecx
000000000000b403	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b40e	movq	-0x20(%rbp), %rax
000000000000b412	movb	0xc(%rax), %cl
000000000000b415	andb	$0x1, %cl
000000000000b418	cmpb	$0x0, %cl
000000000000b41b	je	0xb4e4
000000000000b421	movq	-0x10(%rbp), %rax
000000000000b425	movq	0x430(%rax), %rcx
000000000000b42c	orq	$0x20000, %rcx
000000000000b433	movq	%rcx, 0x430(%rax)
000000000000b43a	movq	-0x8(%rbp), %rax
000000000000b43e	movzbl	0x1a(%rax), %edx
000000000000b442	movl	%edx, %esi
000000000000b444	subl	$0x2e, %esi
000000000000b447	movl	%edx, -0x38(%rbp)
000000000000b44a	movl	%esi, -0x3c(%rbp)
000000000000b44d	je	0xb46c
000000000000b453	jmp	0xb458
000000000000b458	movl	-0x38(%rbp), %eax
000000000000b45b	subl	$0x3e, %eax
000000000000b45e	movl	%eax, -0x40(%rbp)
000000000000b461	je	0xb4a3
000000000000b467	jmp	0xb4da
000000000000b46c	movq	-0x10(%rbp), %rax
000000000000b470	movq	0x430(%rax), %rcx
000000000000b477	orq	$0x4000000, %rcx
000000000000b47e	movq	%rcx, 0x430(%rax)
000000000000b485	movq	-0x10(%rbp), %rax
000000000000b489	movq	-0x8(%rbp), %rcx
000000000000b48d	movzbl	0x1f(%rcx), %edx
000000000000b491	movl	%edx, %ecx
000000000000b493	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b49e	jmp	0xb4df
000000000000b4a3	movq	-0x10(%rbp), %rax
000000000000b4a7	movq	0x430(%rax), %rcx
000000000000b4ae	orq	$0x8000000, %rcx
000000000000b4b5	movq	%rcx, 0x430(%rax)
000000000000b4bc	movq	-0x10(%rbp), %rax
000000000000b4c0	movq	-0x8(%rbp), %rcx
000000000000b4c4	movzbl	0x1f(%rcx), %edx
000000000000b4c8	movl	%edx, %ecx
000000000000b4ca	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b4d5	jmp	0xb4df
000000000000b4da	jmp	0xb4df
000000000000b4df	jmp	0xb6d6
000000000000b4e4	movq	-0x20(%rbp), %rax
000000000000b4e8	movb	0xc(%rax), %cl
000000000000b4eb	shrb	%cl
000000000000b4ed	andb	$0x1, %cl
000000000000b4f0	cmpb	$0x0, %cl
000000000000b4f3	je	0xb512
000000000000b4f9	movq	-0x10(%rbp), %rax
000000000000b4fd	movq	0x430(%rax), %rcx
000000000000b504	orq	$0x40000, %rcx
000000000000b50b	movq	%rcx, 0x430(%rax)
000000000000b512	movq	-0x8(%rbp), %rax
000000000000b516	movzbl	0x1b(%rax), %ecx
000000000000b51a	cmpl	$0x0, %ecx
000000000000b51d	je	0xb699
000000000000b523	movq	-0x20(%rbp), %rax
000000000000b527	movb	0xc(%rax), %cl
000000000000b52a	shrb	%cl
000000000000b52c	andb	$0x1, %cl
000000000000b52f	movzbl	%cl, %edx
000000000000b532	cmpl	$0x0, %edx
000000000000b535	je	0xb699
000000000000b53b	movq	-0x8(%rbp), %rax
000000000000b53f	movzbl	0x1b(%rax), %ecx
000000000000b543	movl	%ecx, %edx
000000000000b545	subl	$0x26, %edx
000000000000b548	movl	%ecx, -0x44(%rbp)
000000000000b54b	movl	%edx, -0x48(%rbp)
000000000000b54e	je	0xb617
000000000000b554	jmp	0xb559
000000000000b559	movl	-0x44(%rbp), %eax
000000000000b55c	subl	$0x2e, %eax
000000000000b55f	movl	%eax, -0x4c(%rbp)
000000000000b562	je	0xb5bd
000000000000b568	jmp	0xb56d
000000000000b56d	movl	-0x44(%rbp), %eax
000000000000b570	subl	$0x36, %eax
000000000000b573	movl	%eax, -0x50(%rbp)
000000000000b576	je	0xb5db
000000000000b57c	jmp	0xb581
000000000000b581	movl	-0x44(%rbp), %eax
000000000000b584	subl	$0x3e, %eax
000000000000b587	movl	%eax, -0x54(%rbp)
000000000000b58a	je	0xb5f9
000000000000b590	jmp	0xb595
000000000000b595	movl	-0x44(%rbp), %eax
000000000000b598	subl	$0x64, %eax
000000000000b59b	movl	%eax, -0x58(%rbp)
000000000000b59e	je	0xb633
000000000000b5a4	jmp	0xb5a9
000000000000b5a9	movl	-0x44(%rbp), %eax
000000000000b5ac	subl	$0x65, %eax
000000000000b5af	movl	%eax, -0x5c(%rbp)
000000000000b5b2	je	0xb654
000000000000b5b8	jmp	0xb675
000000000000b5bd	movq	-0x10(%rbp), %rax
000000000000b5c1	movq	0x430(%rax), %rcx
000000000000b5c8	orq	$0x10000000, %rcx
000000000000b5cf	movq	%rcx, 0x430(%rax)
000000000000b5d6	jmp	0xb694
000000000000b5db	movq	-0x10(%rbp), %rax
000000000000b5df	movq	0x430(%rax), %rcx
000000000000b5e6	orq	$0x20000000, %rcx
000000000000b5ed	movq	%rcx, 0x430(%rax)
000000000000b5f4	jmp	0xb694
000000000000b5f9	movq	-0x10(%rbp), %rax
000000000000b5fd	movq	0x430(%rax), %rcx
000000000000b604	orq	$0x40000000, %rcx
000000000000b60b	movq	%rcx, 0x430(%rax)
000000000000b612	jmp	0xb694
000000000000b617	movq	-0x10(%rbp), %rax
000000000000b61b	movl	$0x80000000, %ecx
000000000000b620	orq	0x430(%rax), %rcx
000000000000b627	movq	%rcx, 0x430(%rax)
000000000000b62e	jmp	0xb694
000000000000b633	movq	-0x10(%rbp), %rax
000000000000b637	movabsq	$0x100000000, %rcx
000000000000b641	orq	0x430(%rax), %rcx
000000000000b648	movq	%rcx, 0x430(%rax)
000000000000b64f	jmp	0xb694
000000000000b654	movq	-0x10(%rbp), %rax
000000000000b658	movabsq	$0x200000000, %rcx
000000000000b662	orq	0x430(%rax), %rcx
000000000000b669	movq	%rcx, 0x430(%rax)
000000000000b670	jmp	0xb694
000000000000b675	leaq	0x569c1(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b67c	leaq	0x55b23(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b683	leaq	0x55d82(%rip), %rcx ## literal pool for: "0"
000000000000b68a	movl	$0x91d, %edx
000000000000b68f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b694	jmp	0xb699
000000000000b699	movq	-0x10(%rbp), %rax
000000000000b69d	movabsq	$0x3f0000000, %rcx
000000000000b6a7	andq	0x430(%rax), %rcx
000000000000b6ae	cmpq	$0x0, %rcx
000000000000b6b2	je	0xb6d1
000000000000b6b8	movq	-0x10(%rbp), %rax
000000000000b6bc	movq	-0x8(%rbp), %rcx
000000000000b6c0	movzbl	0x22(%rcx), %edx
000000000000b6c4	movl	%edx, %ecx
000000000000b6c6	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b6d1	jmp	0xb6d6
000000000000b6d6	jmp	0xb8a3
000000000000b6db	movq	-0x8(%rbp), %rax
000000000000b6df	cmpb	$0x0, 0x1b(%rax)
000000000000b6e3	je	0xb87f
000000000000b6e9	movq	-0x8(%rbp), %rax
000000000000b6ed	movzbl	0x1b(%rax), %ecx
000000000000b6f1	movl	%ecx, %edx
000000000000b6f3	subl	$0x26, %edx
000000000000b6f6	movl	%ecx, -0x60(%rbp)
000000000000b6f9	movl	%edx, -0x64(%rbp)
000000000000b6fc	je	0xb7c5
000000000000b702	jmp	0xb707
000000000000b707	movl	-0x60(%rbp), %eax
000000000000b70a	subl	$0x2e, %eax
000000000000b70d	movl	%eax, -0x68(%rbp)
000000000000b710	je	0xb76b
000000000000b716	jmp	0xb71b
000000000000b71b	movl	-0x60(%rbp), %eax
000000000000b71e	subl	$0x36, %eax
000000000000b721	movl	%eax, -0x6c(%rbp)
000000000000b724	je	0xb789
000000000000b72a	jmp	0xb72f
000000000000b72f	movl	-0x60(%rbp), %eax
000000000000b732	subl	$0x3e, %eax
000000000000b735	movl	%eax, -0x70(%rbp)
000000000000b738	je	0xb7a7
000000000000b73e	jmp	0xb743
000000000000b743	movl	-0x60(%rbp), %eax
000000000000b746	subl	$0x64, %eax
000000000000b749	movl	%eax, -0x74(%rbp)
000000000000b74c	je	0xb7e1
000000000000b752	jmp	0xb757
000000000000b757	movl	-0x60(%rbp), %eax
000000000000b75a	subl	$0x65, %eax
000000000000b75d	movl	%eax, -0x78(%rbp)
000000000000b760	je	0xb802
000000000000b766	jmp	0xb823
000000000000b76b	movq	-0x10(%rbp), %rax
000000000000b76f	movq	0x430(%rax), %rcx
000000000000b776	orq	$0x10000000, %rcx
000000000000b77d	movq	%rcx, 0x430(%rax)
000000000000b784	jmp	0xb842
000000000000b789	movq	-0x10(%rbp), %rax
000000000000b78d	movq	0x430(%rax), %rcx
000000000000b794	orq	$0x20000000, %rcx
000000000000b79b	movq	%rcx, 0x430(%rax)
000000000000b7a2	jmp	0xb842
000000000000b7a7	movq	-0x10(%rbp), %rax
000000000000b7ab	movq	0x430(%rax), %rcx
000000000000b7b2	orq	$0x40000000, %rcx
000000000000b7b9	movq	%rcx, 0x430(%rax)
000000000000b7c0	jmp	0xb842
000000000000b7c5	movq	-0x10(%rbp), %rax
000000000000b7c9	movl	$0x80000000, %ecx
000000000000b7ce	orq	0x430(%rax), %rcx
000000000000b7d5	movq	%rcx, 0x430(%rax)
000000000000b7dc	jmp	0xb842
000000000000b7e1	movq	-0x10(%rbp), %rax
000000000000b7e5	movabsq	$0x100000000, %rcx
000000000000b7ef	orq	0x430(%rax), %rcx
000000000000b7f6	movq	%rcx, 0x430(%rax)
000000000000b7fd	jmp	0xb842
000000000000b802	movq	-0x10(%rbp), %rax
000000000000b806	movabsq	$0x200000000, %rcx
000000000000b810	orq	0x430(%rax), %rcx
000000000000b817	movq	%rcx, 0x430(%rax)
000000000000b81e	jmp	0xb842
000000000000b823	leaq	0x56813(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b82a	leaq	0x55975(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b831	leaq	0x55bd4(%rip), %rcx ## literal pool for: "0"
000000000000b838	movl	$0x945, %edx
000000000000b83d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b842	movq	-0x10(%rbp), %rax
000000000000b846	movabsq	$0x3f0000000, %rcx
000000000000b850	andq	0x430(%rax), %rcx
000000000000b857	cmpq	$0x0, %rcx
000000000000b85b	je	0xb87a
000000000000b861	movq	-0x10(%rbp), %rax
000000000000b865	movq	-0x8(%rbp), %rcx
000000000000b869	movzbl	0x22(%rcx), %edx
000000000000b86d	movl	%edx, %ecx
000000000000b86f	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b87a	jmp	0xb87f
000000000000b87f	jmp	0xb8a3
000000000000b884	leaq	0x567b2(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b88b	leaq	0x55914(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b892	leaq	0x55b73(%rip), %rcx ## literal pool for: "0"
000000000000b899	movl	$0x94f, %edx
000000000000b89e	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b8a3	addq	$0x80, %rsp
000000000000b8aa	popq	%rbp
000000000000b8ab	retq
000000000000b8ac	nopl	(%rax)
_ZydisSetAVXInformation:
000000000000b8b0	pushq	%rbp
000000000000b8b1	movq	%rsp, %rbp
000000000000b8b4	subq	$0x130, %rsp
000000000000b8bb	movq	%rdi, -0x8(%rbp)
000000000000b8bf	movq	%rsi, -0x10(%rbp)
000000000000b8c3	movq	%rdx, -0x18(%rbp)
000000000000b8c7	cmpq	$0x0, -0x8(%rbp)
000000000000b8cc	setne	%al
000000000000b8cf	xorb	$-0x1, %al
000000000000b8d1	andb	$0x1, %al
000000000000b8d3	movzbl	%al, %ecx
000000000000b8d6	movslq	%ecx, %rdx
000000000000b8d9	cmpq	$0x0, %rdx
000000000000b8dd	je	0xb902
000000000000b8e3	leaq	0x56829(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000b8ea	leaq	0x558b5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b8f1	leaq	0x558e3(%rip), %rcx ## literal pool for: "context"
000000000000b8f8	movl	$0x976, %edx
000000000000b8fd	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b902	jmp	0xb907
000000000000b907	cmpq	$0x0, -0x10(%rbp)
000000000000b90c	setne	%al
000000000000b90f	xorb	$-0x1, %al
000000000000b911	andb	$0x1, %al
000000000000b913	movzbl	%al, %ecx
000000000000b916	movslq	%ecx, %rdx
000000000000b919	cmpq	$0x0, %rdx
000000000000b91d	je	0xb942
000000000000b923	leaq	0x567e9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000b92a	leaq	0x55875(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b931	leaq	0x558ab(%rip), %rcx ## literal pool for: "instruction"
000000000000b938	movl	$0x977, %edx
000000000000b93d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b942	jmp	0xb947
000000000000b947	cmpq	$0x0, -0x18(%rbp)
000000000000b94c	setne	%al
000000000000b94f	xorb	$-0x1, %al
000000000000b951	andb	$0x1, %al
000000000000b953	movzbl	%al, %ecx
000000000000b956	movslq	%ecx, %rdx
000000000000b959	cmpq	$0x0, %rdx
000000000000b95d	je	0xb982
000000000000b963	leaq	0x567a9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000b96a	leaq	0x55835(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b971	leaq	0x56090(%rip), %rcx ## literal pool for: "definition"
000000000000b978	movl	$0x978, %edx
000000000000b97d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b982	jmp	0xb987
000000000000b987	movq	-0x10(%rbp), %rax
000000000000b98b	movl	0xc(%rax), %ecx
000000000000b98e	addl	$-0x2, %ecx
000000000000b991	movl	%ecx, %eax
000000000000b993	subl	$0x3, %ecx
000000000000b996	movq	%rax, -0x48(%rbp)
000000000000b99a	movl	%ecx, -0x4c(%rbp)
000000000000b99d	ja	0xd58a
000000000000b9a3	leaq	0x1bee(%rip), %rax
000000000000b9aa	movq	-0x48(%rbp), %rcx
000000000000b9ae	movslq	(%rax,%rcx,4), %rdx
000000000000b9b2	addq	%rax, %rdx
000000000000b9b5	jmpq	*%rdx
000000000000b9b7	movq	-0x8(%rbp), %rax
000000000000b9bb	movzbl	0x2b(%rax), %ecx
000000000000b9bf	movl	%ecx, %eax
000000000000b9c1	cmpq	$0x2, %rax
000000000000b9c5	setb	%dl
000000000000b9c8	xorb	$-0x1, %dl
000000000000b9cb	andb	$0x1, %dl
000000000000b9ce	movzbl	%dl, %ecx
000000000000b9d1	movslq	%ecx, %rax
000000000000b9d4	cmpq	$0x0, %rax
000000000000b9d8	je	0xb9fd
000000000000b9de	leaq	0x5672e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000b9e5	leaq	0x557ba(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b9ec	leaq	0x56737(%rip), %rcx ## literal pool for: "context->cache.LL < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000b9f3	movl	$0x984, %edx
000000000000b9f8	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000b9fd	jmp	0xba02
000000000000ba02	movq	-0x8(%rbp), %rax
000000000000ba06	movzbl	0x2b(%rax), %ecx
000000000000ba0a	movl	%ecx, %eax
000000000000ba0c	leaq	_ZydisSetAVXInformation.lookup(%rip), %rdx
000000000000ba13	movw	(%rdx,%rax,2), %si
000000000000ba17	movq	-0x10(%rbp), %rax
000000000000ba1b	movw	%si, 0x48c(%rax)
000000000000ba22	jmp	0xd58f
000000000000ba27	movq	-0x8(%rbp), %rax
000000000000ba2b	movzbl	0x2b(%rax), %ecx
000000000000ba2f	movl	%ecx, %eax
000000000000ba31	cmpq	$0x2, %rax
000000000000ba35	setb	%dl
000000000000ba38	xorb	$-0x1, %dl
000000000000ba3b	andb	$0x1, %dl
000000000000ba3e	movzbl	%dl, %ecx
000000000000ba41	movslq	%ecx, %rax
000000000000ba44	cmpq	$0x0, %rax
000000000000ba48	je	0xba6d
000000000000ba4e	leaq	0x566be(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000ba55	leaq	0x5574a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ba5c	leaq	0x566c7(%rip), %rcx ## literal pool for: "context->cache.LL < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000ba63	movl	$0x990, %edx
000000000000ba68	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ba6d	jmp	0xba72
000000000000ba72	movq	-0x8(%rbp), %rax
000000000000ba76	movzbl	0x2b(%rax), %ecx
000000000000ba7a	movl	%ecx, %eax
000000000000ba7c	leaq	_ZydisSetAVXInformation.lookup.65(%rip), %rdx
000000000000ba83	movw	(%rdx,%rax,2), %si
000000000000ba87	movq	-0x10(%rbp), %rax
000000000000ba8b	movw	%si, 0x48c(%rax)
000000000000ba92	movq	-0x18(%rbp), %rax
000000000000ba96	movq	%rax, -0x20(%rbp)
000000000000ba9a	movq	-0x20(%rbp), %rax
000000000000ba9e	movl	0x8(%rax), %ecx
000000000000baa1	movl	%ecx, %eax
000000000000baa3	shrq	$0x1c, %rax
000000000000baa7	movb	%al, %dil
000000000000baaa	andb	$0x7, %dil
000000000000baae	cmpb	$0x0, %dil
000000000000bab2	je	0xbaee
000000000000bab8	movq	-0x10(%rbp), %rax
000000000000babc	movb	$0x1, 0x498(%rax)
000000000000bac3	movq	-0x20(%rbp), %rax
000000000000bac7	movl	0x8(%rax), %ecx
000000000000baca	movl	%ecx, %eax
000000000000bacc	shrq	$0x1c, %rax
000000000000bad0	movb	%al, %dl
000000000000bad2	andb	$0x7, %dl
000000000000bad5	movzbl	%dl, %ecx
000000000000bad8	movl	%ecx, %eax
000000000000bada	leaq	_ZydisSetAVXInformation.broadcasts(%rip), %rsi
000000000000bae1	movl	(%rsi,%rax,4), %ecx
000000000000bae4	movq	-0x10(%rbp), %rax
000000000000bae8	movl	%ecx, 0x49c(%rax)
000000000000baee	jmp	0xd58f
000000000000baf3	movq	-0x18(%rbp), %rax
000000000000baf7	movq	%rax, -0x28(%rbp)
000000000000bafb	movq	-0x8(%rbp), %rax
000000000000baff	movb	0x2b(%rax), %cl
000000000000bb02	movb	%cl, -0x29(%rbp)
000000000000bb05	movq	-0x28(%rbp), %rax
000000000000bb09	movl	0x8(%rax), %edx
000000000000bb0c	movl	%edx, %eax
000000000000bb0e	shrq	$0x1c, %rax
000000000000bb12	movb	%al, %cl
000000000000bb14	andb	$0x3, %cl
000000000000bb17	cmpb	$0x0, %cl
000000000000bb1a	je	0xbb3d
000000000000bb20	movq	-0x28(%rbp), %rax
000000000000bb24	movl	0x8(%rax), %ecx
000000000000bb27	movl	%ecx, %eax
000000000000bb29	shrq	$0x1c, %rax
000000000000bb2d	movb	%al, %dl
000000000000bb2f	andb	$0x3, %dl
000000000000bb32	movzbl	%dl, %ecx
000000000000bb35	subl	$0x1, %ecx
000000000000bb38	movb	%cl, %dl
000000000000bb3a	movb	%dl, -0x29(%rbp)
000000000000bb3d	movzbl	-0x29(%rbp), %eax
000000000000bb41	movl	%eax, %ecx
000000000000bb43	cmpq	$0x3, %rcx
000000000000bb47	setb	%dl
000000000000bb4a	xorb	$-0x1, %dl
000000000000bb4d	andb	$0x1, %dl
000000000000bb50	movzbl	%dl, %eax
000000000000bb53	movslq	%eax, %rcx
000000000000bb56	cmpq	$0x0, %rcx
000000000000bb5a	je	0xbb7f
000000000000bb60	leaq	0x565ac(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bb67	leaq	0x55638(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bb6e	leaq	0x565f0(%rip), %rcx ## literal pool for: "vector_length < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000bb75	movl	$0x9b9, %edx
000000000000bb7a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bb7f	jmp	0xbb84
000000000000bb84	movzbl	-0x29(%rbp), %eax
000000000000bb88	movl	%eax, %ecx
000000000000bb8a	leaq	_ZydisSetAVXInformation.lookup.66(%rip), %rdx
000000000000bb91	movw	(%rdx,%rcx,2), %si
000000000000bb95	movq	-0x10(%rbp), %rcx
000000000000bb99	movw	%si, 0x48c(%rcx)
000000000000bba0	movq	-0x28(%rbp), %rcx
000000000000bba4	movl	0x8(%rcx), %eax
000000000000bba7	movl	%eax, %edx
000000000000bba9	movzwl	0xc(%rcx), %eax
000000000000bbad	movl	%eax, %ecx
000000000000bbaf	shlq	$0x20, %rcx
000000000000bbb3	orq	%rcx, %rdx
000000000000bbb6	shrq	$0x1e, %rdx
000000000000bbba	movl	%edx, %eax
000000000000bbbc	andl	$0xf, %eax
000000000000bbbf	movq	-0x8(%rbp), %rcx
000000000000bbc3	movl	%eax, 0x30(%rcx)
000000000000bbc6	movq	-0x28(%rbp), %rcx
000000000000bbca	movl	0x8(%rcx), %eax
000000000000bbcd	movl	%eax, %edx
000000000000bbcf	movzwl	0xc(%rcx), %eax
000000000000bbd3	movl	%eax, %ecx
000000000000bbd5	shlq	$0x20, %rcx
000000000000bbd9	orq	%rcx, %rdx
000000000000bbdc	shrq	$0x1e, %rdx
000000000000bbe0	movb	%dl, %dil
000000000000bbe3	andb	$0xf, %dil
000000000000bbe7	cmpb	$0x0, %dil
000000000000bbeb	je	0xc842
000000000000bbf1	movq	-0x10(%rbp), %rax
000000000000bbf5	movzbl	0x578(%rax), %ecx
000000000000bbfc	cmpl	$0x3, %ecx
000000000000bbff	setne	%dl
000000000000bc02	xorb	$-0x1, %dl
000000000000bc05	andb	$0x1, %dl
000000000000bc08	movzbl	%dl, %ecx
000000000000bc0b	movslq	%ecx, %rax
000000000000bc0e	cmpq	$0x0, %rax
000000000000bc12	je	0xbc37
000000000000bc18	leaq	0x564f4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bc1f	leaq	0x55580(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bc26	leaq	0x5629b(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
000000000000bc2d	movl	$0x9bf, %edx
000000000000bc32	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bc37	jmp	0xbc3c
000000000000bc3c	movq	-0x28(%rbp), %rax
000000000000bc40	movb	0xc(%rax), %cl
000000000000bc43	shrb	$0x2, %cl
000000000000bc46	andb	$0x7, %cl
000000000000bc49	cmpb	$0x0, %cl
000000000000bc4c	setne	%cl
000000000000bc4f	xorb	$-0x1, %cl
000000000000bc52	andb	$0x1, %cl
000000000000bc55	movzbl	%cl, %edx
000000000000bc58	movslq	%edx, %rax
000000000000bc5b	cmpq	$0x0, %rax
000000000000bc5f	je	0xbc84
000000000000bc65	leaq	0x564a7(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bc6c	leaq	0x55533(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bc73	leaq	0x56522(%rip), %rcx ## literal pool for: "def->element_size"
000000000000bc7a	movl	$0x9c0, %edx
000000000000bc7f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bc84	jmp	0xbc89
000000000000bc89	movq	-0x28(%rbp), %rax
000000000000bc8d	movb	0xc(%rax), %cl
000000000000bc90	shrb	$0x2, %cl
000000000000bc93	andb	$0x7, %cl
000000000000bc96	movzbl	%cl, %edx
000000000000bc99	movl	%edx, %eax
000000000000bc9b	cmpq	$0x6, %rax
000000000000bc9f	setb	%cl
000000000000bca2	xorb	$-0x1, %cl
000000000000bca5	andb	$0x1, %cl
000000000000bca8	movzbl	%cl, %edx
000000000000bcab	movslq	%edx, %rax
000000000000bcae	cmpq	$0x0, %rax
000000000000bcb2	je	0xbcd7
000000000000bcb8	leaq	0x56454(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bcbf	leaq	0x554e0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bcc6	leaq	0x564e1(%rip), %rcx ## literal pool for: "def->element_size < (sizeof(element_sizes) / sizeof((element_sizes)[0]))"
000000000000bccd	movl	$0x9c7, %edx
000000000000bcd2	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bcd7	jmp	0xbcdc
000000000000bcdc	movq	-0x28(%rbp), %rax
000000000000bce0	movzwl	0xc(%rax), %ecx
000000000000bce4	shrl	$0x2, %ecx
000000000000bce7	andl	$0x7, %ecx
000000000000bcea	movl	%ecx, %eax
000000000000bcec	leaq	_ZydisSetAVXInformation.element_sizes(%rip), %rdx
000000000000bcf3	movb	(%rax,%rdx), %sil
000000000000bcf7	movq	-0x8(%rbp), %rax
000000000000bcfb	movb	%sil, 0x34(%rax)
000000000000bcff	movq	-0x28(%rbp), %rax
000000000000bd03	movl	0x8(%rax), %ecx
000000000000bd06	movl	%ecx, %edx
000000000000bd08	movzwl	0xc(%rax), %ecx
000000000000bd0c	movl	%ecx, %eax
000000000000bd0e	shlq	$0x20, %rax
000000000000bd12	orq	%rax, %rdx
000000000000bd15	shrq	$0x1e, %rdx
000000000000bd19	movl	%edx, %ecx
000000000000bd1b	andl	$0xf, %ecx
000000000000bd1e	decl	%ecx
000000000000bd20	movl	%ecx, %eax
000000000000bd22	subl	$0xe, %ecx
000000000000bd25	movq	%rax, -0x58(%rbp)
000000000000bd29	movl	%ecx, -0x5c(%rbp)
000000000000bd2c	ja	0xc81e
000000000000bd32	leaq	0x19cf(%rip), %rax
000000000000bd39	movq	-0x58(%rbp), %rcx
000000000000bd3d	movslq	(%rax,%rcx,4), %rdx
000000000000bd41	addq	%rax, %rdx
000000000000bd44	jmpq	*%rdx
000000000000bd46	movq	-0x10(%rbp), %rax
000000000000bd4a	movb	0x567(%rax), %cl
000000000000bd50	movb	%cl, -0x2a(%rbp)
000000000000bd53	movq	-0x8(%rbp), %rax
000000000000bd57	movb	0x26(%rax), %cl
000000000000bd5a	movb	%cl, -0x2b(%rbp)
000000000000bd5d	movzbl	-0x2a(%rbp), %edx
000000000000bd61	cmpl	$0x2, %edx
000000000000bd64	setl	%cl
000000000000bd67	xorb	$-0x1, %cl
000000000000bd6a	andb	$0x1, %cl
000000000000bd6d	movzbl	%cl, %edx
000000000000bd70	movslq	%edx, %rax
000000000000bd73	cmpq	$0x0, %rax
000000000000bd77	je	0xbd9c
000000000000bd7d	leaq	0x5638f(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bd84	leaq	0x5541b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bd8b	leaq	0x56465(%rip), %rcx ## literal pool for: "evex_b < 2"
000000000000bd92	movl	$0x9d1, %edx
000000000000bd97	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bd9c	jmp	0xbda1
000000000000bda1	movzbl	-0x2b(%rbp), %eax
000000000000bda5	cmpl	$0x2, %eax
000000000000bda8	setl	%cl
000000000000bdab	xorb	$-0x1, %cl
000000000000bdae	andb	$0x1, %cl
000000000000bdb1	movzbl	%cl, %eax
000000000000bdb4	movslq	%eax, %rdx
000000000000bdb7	cmpq	$0x0, %rdx
000000000000bdbb	je	0xbde0
000000000000bdc1	leaq	0x5634b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bdc8	leaq	0x553d7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bdcf	leaq	0x5642c(%rip), %rcx ## literal pool for: "evex_w < 2"
000000000000bdd6	movl	$0x9d2, %edx
000000000000bddb	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bde0	jmp	0xbde5
000000000000bde5	cmpb	$0x0, -0x2a(%rbp)
000000000000bde9	movb	$0x1, %al
000000000000bdeb	movb	%al, -0x5d(%rbp)
000000000000bdee	je	0xbe45
000000000000bdf4	cmpb	$0x0, -0x2b(%rbp)
000000000000bdf8	jne	0xbe14
000000000000bdfe	movq	-0x8(%rbp), %rax
000000000000be02	movzbl	0x34(%rax), %ecx
000000000000be06	cmpl	$0x20, %ecx
000000000000be09	movb	$0x1, %dl
000000000000be0b	movb	%dl, -0x5e(%rbp)
000000000000be0e	je	0xbe3f
000000000000be14	xorl	%eax, %eax
000000000000be16	movb	%al, %cl
000000000000be18	movzbl	-0x2b(%rbp), %eax
000000000000be1c	cmpl	$0x0, %eax
000000000000be1f	movb	%cl, -0x5f(%rbp)
000000000000be22	je	0xbe39
000000000000be28	movq	-0x8(%rbp), %rax
000000000000be2c	movzbl	0x34(%rax), %ecx
000000000000be30	cmpl	$0x40, %ecx
000000000000be33	sete	%dl
000000000000be36	movb	%dl, -0x5f(%rbp)
000000000000be39	movb	-0x5f(%rbp), %al
000000000000be3c	movb	%al, -0x5e(%rbp)
000000000000be3f	movb	-0x5e(%rbp), %al
000000000000be42	movb	%al, -0x5d(%rbp)
000000000000be45	movb	-0x5d(%rbp), %al
000000000000be48	xorb	$-0x1, %al
000000000000be4a	andb	$0x1, %al
000000000000be4c	movzbl	%al, %ecx
000000000000be4f	movslq	%ecx, %rdx
000000000000be52	cmpq	$0x0, %rdx
000000000000be56	je	0xbe7b
000000000000be5c	leaq	0x562b0(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000be63	leaq	0x5533c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000be6a	leaq	0x5639c(%rip), %rcx ## literal pool for: "!evex_b || ((!evex_w && context->evex.element_size == 32) || ( evex_w && context->evex.element_size == 64))"
000000000000be71	movl	$0x9d4, %edx
000000000000be76	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000be7b	jmp	0xbe80
000000000000be80	cmpb	$0x0, -0x2a(%rbp)
000000000000be84	movb	$0x1, %al
000000000000be86	movb	%al, -0x60(%rbp)
000000000000be89	je	0xbea8
000000000000be8f	movq	-0x28(%rbp), %rax
000000000000be93	movb	0xc(%rax), %cl
000000000000be96	shrb	$0x5, %cl
000000000000be99	andb	$0x3, %cl
000000000000be9c	movzbl	%cl, %edx
000000000000be9f	cmpl	$0x1, %edx
000000000000bea2	sete	%cl
000000000000bea5	movb	%cl, -0x60(%rbp)
000000000000bea8	movb	-0x60(%rbp), %al
000000000000beab	xorb	$-0x1, %al
000000000000bead	andb	$0x1, %al
000000000000beaf	movzbl	%al, %ecx
000000000000beb2	movslq	%ecx, %rdx
000000000000beb5	cmpq	$0x0, %rdx
000000000000beb9	je	0xbede
000000000000bebf	leaq	0x5624d(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bec6	leaq	0x552d9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000becd	leaq	0x563a5(%rip), %rcx ## literal pool for: "!evex_b || def->functionality == ZYDIS_EVEX_FUNC_BC"
000000000000bed4	movl	$0x9d5, %edx
000000000000bed9	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bede	jmp	0xbee3
000000000000bee3	movzbl	-0x2a(%rbp), %eax
000000000000bee7	movl	%eax, %ecx
000000000000bee9	imulq	$0x6, %rcx, %rcx
000000000000beed	leaq	_ZydisSetAVXInformation.scales(%rip), %rdx
000000000000bef4	addq	%rcx, %rdx
000000000000bef7	movzbl	-0x2b(%rbp), %eax
000000000000befb	movl	%eax, %ecx
000000000000befd	imulq	$0x3, %rcx, %rcx
000000000000bf01	addq	%rcx, %rdx
000000000000bf04	movzbl	-0x29(%rbp), %eax
000000000000bf08	movl	%eax, %ecx
000000000000bf0a	movb	(%rdx,%rcx), %sil
000000000000bf0e	movq	-0x8(%rbp), %rcx
000000000000bf12	movb	%sil, 0x3c(%rcx)
000000000000bf16	movzbl	-0x2a(%rbp), %eax
000000000000bf1a	movl	%eax, %ecx
000000000000bf1c	imulq	$0x18, %rcx, %rcx
000000000000bf20	leaq	_ZydisSetAVXInformation.broadcasts.74(%rip), %rdx
000000000000bf27	addq	%rcx, %rdx
000000000000bf2a	movzbl	-0x2b(%rbp), %eax
000000000000bf2e	movl	%eax, %ecx
000000000000bf30	imulq	$0xc, %rcx, %rcx
000000000000bf34	addq	%rcx, %rdx
000000000000bf37	movzbl	-0x29(%rbp), %eax
000000000000bf3b	movl	%eax, %ecx
000000000000bf3d	movl	(%rdx,%rcx,4), %eax
000000000000bf40	movq	-0x10(%rbp), %rcx
000000000000bf44	movl	%eax, 0x49c(%rcx)
000000000000bf4a	jmp	0xc83d
000000000000bf4f	movq	-0x10(%rbp), %rax
000000000000bf53	movb	0x567(%rax), %cl
000000000000bf59	movb	%cl, -0x2c(%rbp)
000000000000bf5c	movzbl	-0x2c(%rbp), %edx
000000000000bf60	cmpl	$0x2, %edx
000000000000bf63	setl	%cl
000000000000bf66	xorb	$-0x1, %cl
000000000000bf69	andb	$0x1, %cl
000000000000bf6c	movzbl	%cl, %edx
000000000000bf6f	movslq	%edx, %rax
000000000000bf72	cmpq	$0x0, %rax
000000000000bf76	je	0xbf9b
000000000000bf7c	leaq	0x56190(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bf83	leaq	0x5521c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bf8a	leaq	0x56266(%rip), %rcx ## literal pool for: "evex_b < 2"
000000000000bf91	movl	$0xa04, %edx
000000000000bf96	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bf9b	jmp	0xbfa0
000000000000bfa0	movq	-0x8(%rbp), %rax
000000000000bfa4	cmpb	$0x0, 0x26(%rax)
000000000000bfa8	setne	%cl
000000000000bfab	xorb	$-0x1, %cl
000000000000bfae	xorb	$-0x1, %cl
000000000000bfb1	andb	$0x1, %cl
000000000000bfb4	movzbl	%cl, %edx
000000000000bfb7	movslq	%edx, %rax
000000000000bfba	cmpq	$0x0, %rax
000000000000bfbe	je	0xbfe3
000000000000bfc4	leaq	0x56148(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bfcb	leaq	0x551d4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bfd2	leaq	0x562d4(%rip), %rcx ## literal pool for: "!context->cache.W"
000000000000bfd9	movl	$0xa05, %edx
000000000000bfde	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000bfe3	jmp	0xbfe8
000000000000bfe8	movq	-0x8(%rbp), %rax
000000000000bfec	movzbl	0x34(%rax), %ecx
000000000000bff0	cmpl	$0x20, %ecx
000000000000bff3	sete	%dl
000000000000bff6	xorb	$-0x1, %dl
000000000000bff9	andb	$0x1, %dl
000000000000bffc	movzbl	%dl, %ecx
000000000000bfff	movslq	%ecx, %rax
000000000000c002	cmpq	$0x0, %rax
000000000000c006	je	0xc02b
000000000000c00c	leaq	0x56100(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c013	leaq	0x5518c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c01a	leaq	0x5629e(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c021	movl	$0xa06, %edx
000000000000c026	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c02b	jmp	0xc030
000000000000c030	cmpb	$0x0, -0x2c(%rbp)
000000000000c034	movb	$0x1, %al
000000000000c036	movb	%al, -0x61(%rbp)
000000000000c039	je	0xc058
000000000000c03f	movq	-0x28(%rbp), %rax
000000000000c043	movb	0xc(%rax), %cl
000000000000c046	shrb	$0x5, %cl
000000000000c049	andb	$0x3, %cl
000000000000c04c	movzbl	%cl, %edx
000000000000c04f	cmpl	$0x1, %edx
000000000000c052	sete	%cl
000000000000c055	movb	%cl, -0x61(%rbp)
000000000000c058	movb	-0x61(%rbp), %al
000000000000c05b	xorb	$-0x1, %al
000000000000c05d	andb	$0x1, %al
000000000000c05f	movzbl	%al, %ecx
000000000000c062	movslq	%ecx, %rdx
000000000000c065	cmpq	$0x0, %rdx
000000000000c069	je	0xc08e
000000000000c06f	leaq	0x5609d(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c076	leaq	0x55129(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c07d	leaq	0x561f5(%rip), %rcx ## literal pool for: "!evex_b || def->functionality == ZYDIS_EVEX_FUNC_BC"
000000000000c084	movl	$0xa07, %edx
000000000000c089	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c08e	jmp	0xc093
000000000000c093	movzbl	-0x2c(%rbp), %eax
000000000000c097	movl	%eax, %ecx
000000000000c099	imulq	$0x3, %rcx, %rcx
000000000000c09d	leaq	_ZydisSetAVXInformation.scales.77(%rip), %rdx
000000000000c0a4	addq	%rcx, %rdx
000000000000c0a7	movzbl	-0x29(%rbp), %eax
000000000000c0ab	movl	%eax, %ecx
000000000000c0ad	movb	(%rdx,%rcx), %sil
000000000000c0b1	movq	-0x8(%rbp), %rcx
000000000000c0b5	movb	%sil, 0x3c(%rcx)
000000000000c0b9	movzbl	-0x2c(%rbp), %eax
000000000000c0bd	movl	%eax, %ecx
000000000000c0bf	imulq	$0xc, %rcx, %rcx
000000000000c0c3	leaq	_ZydisSetAVXInformation.broadcasts.78(%rip), %rdx
000000000000c0ca	addq	%rcx, %rdx
000000000000c0cd	movzbl	-0x29(%rbp), %eax
000000000000c0d1	movl	%eax, %ecx
000000000000c0d3	movl	(%rdx,%rcx,4), %eax
000000000000c0d6	movq	-0x10(%rbp), %rcx
000000000000c0da	movl	%eax, 0x49c(%rcx)
000000000000c0e0	jmp	0xc83d
000000000000c0e5	movzbl	-0x29(%rbp), %eax
000000000000c0e9	movl	%eax, %ecx
000000000000c0eb	leaq	_ZydisSetAVXInformation.scales.79(%rip), %rdx
000000000000c0f2	movb	(%rdx,%rcx), %sil
000000000000c0f6	movq	-0x8(%rbp), %rcx
000000000000c0fa	movb	%sil, 0x3c(%rcx)
000000000000c0fe	jmp	0xc83d
000000000000c103	movq	-0x8(%rbp), %rax
000000000000c107	movzbl	0x26(%rax), %ecx
000000000000c10b	testl	%ecx, %ecx
000000000000c10d	movl	%ecx, -0x68(%rbp)
000000000000c110	je	0xc12f
000000000000c116	jmp	0xc11b
000000000000c11b	movl	-0x68(%rbp), %eax
000000000000c11e	subl	$0x1, %eax
000000000000c121	movl	%eax, -0x6c(%rbp)
000000000000c124	je	0xc17c
000000000000c12a	jmp	0xc1c9
000000000000c12f	movq	-0x8(%rbp), %rax
000000000000c133	movzbl	0x34(%rax), %ecx
000000000000c137	cmpl	$0x20, %ecx
000000000000c13a	sete	%dl
000000000000c13d	xorb	$-0x1, %dl
000000000000c140	andb	$0x1, %dl
000000000000c143	movzbl	%dl, %ecx
000000000000c146	movslq	%ecx, %rax
000000000000c149	cmpq	$0x0, %rax
000000000000c14d	je	0xc172
000000000000c153	leaq	0x55fb9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c15a	leaq	0x55045(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c161	leaq	0x56157(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c168	movl	$0xa2e, %edx
000000000000c16d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c172	jmp	0xc177
000000000000c177	jmp	0xc1e8
000000000000c17c	movq	-0x8(%rbp), %rax
000000000000c180	movzbl	0x34(%rax), %ecx
000000000000c184	cmpl	$0x40, %ecx
000000000000c187	sete	%dl
000000000000c18a	xorb	$-0x1, %dl
000000000000c18d	andb	$0x1, %dl
000000000000c190	movzbl	%dl, %ecx
000000000000c193	movslq	%ecx, %rax
000000000000c196	cmpq	$0x0, %rax
000000000000c19a	je	0xc1bf
000000000000c1a0	leaq	0x55f6c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c1a7	leaq	0x54ff8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c1ae	leaq	0x5612b(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000c1b5	movl	$0xa31, %edx
000000000000c1ba	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c1bf	jmp	0xc1c4
000000000000c1c4	jmp	0xc1e8
000000000000c1c9	leaq	0x55f43(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c1d0	leaq	0x54fcf(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c1d7	leaq	0x5522e(%rip), %rcx ## literal pool for: "0"
000000000000c1de	movl	$0xa34, %edx
000000000000c1e3	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c1e8	jmp	0xc1ed
000000000000c1ed	movq	-0x28(%rbp), %rax
000000000000c1f1	movb	0xc(%rax), %cl
000000000000c1f4	shrb	$0x2, %cl
000000000000c1f7	andb	$0x7, %cl
000000000000c1fa	movzbl	%cl, %edx
000000000000c1fd	movl	%edx, %eax
000000000000c1ff	cmpq	$0x6, %rax
000000000000c203	setb	%cl
000000000000c206	xorb	$-0x1, %cl
000000000000c209	andb	$0x1, %cl
000000000000c20c	movzbl	%cl, %edx
000000000000c20f	movslq	%edx, %rax
000000000000c212	cmpq	$0x0, %rax
000000000000c216	je	0xc23b
000000000000c21c	leaq	0x55ef0(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c223	leaq	0x54f7c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c22a	leaq	0x560d0(%rip), %rcx ## literal pool for: "def->element_size < (sizeof(scales) / sizeof((scales)[0]))"
000000000000c231	movl	$0xa42, %edx
000000000000c236	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c23b	jmp	0xc240
000000000000c240	movq	-0x28(%rbp), %rax
000000000000c244	movb	0xc(%rax), %cl
000000000000c247	shrb	$0x2, %cl
000000000000c24a	andb	$0x7, %cl
000000000000c24d	movzbl	%cl, %edx
000000000000c250	movl	%edx, %eax
000000000000c252	leaq	_ZydisSetAVXInformation.scales.81(%rip), %rsi
000000000000c259	movb	(%rsi,%rax), %cl
000000000000c25c	movq	-0x8(%rbp), %rax
000000000000c260	movb	%cl, 0x3c(%rax)
000000000000c263	jmp	0xc83d
000000000000c268	movq	-0x8(%rbp), %rax
000000000000c26c	movzbl	0x34(%rax), %ecx
000000000000c270	movl	%ecx, %edx
000000000000c272	subl	$0x20, %edx
000000000000c275	movl	%ecx, -0x70(%rbp)
000000000000c278	movl	%edx, -0x74(%rbp)
000000000000c27b	je	0xc29a
000000000000c281	jmp	0xc286
000000000000c286	movl	-0x70(%rbp), %eax
000000000000c289	subl	$0x40, %eax
000000000000c28c	movl	%eax, -0x78(%rbp)
000000000000c28f	je	0xc2a7
000000000000c295	jmp	0xc2b4
000000000000c29a	movq	-0x8(%rbp), %rax
000000000000c29e	movb	$0x4, 0x3c(%rax)
000000000000c2a2	jmp	0xc2d3
000000000000c2a7	movq	-0x8(%rbp), %rax
000000000000c2ab	movb	$0x8, 0x3c(%rax)
000000000000c2af	jmp	0xc2d3
000000000000c2b4	leaq	0x55e58(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c2bb	leaq	0x54ee4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c2c2	leaq	0x55143(%rip), %rcx ## literal pool for: "0"
000000000000c2c9	movl	$0xa50, %edx
000000000000c2ce	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c2d3	jmp	0xc83d
000000000000c2d8	movq	-0x8(%rbp), %rax
000000000000c2dc	movzbl	0x34(%rax), %ecx
000000000000c2e0	cmpl	$0x20, %ecx
000000000000c2e3	sete	%dl
000000000000c2e6	xorb	$-0x1, %dl
000000000000c2e9	andb	$0x1, %dl
000000000000c2ec	movzbl	%dl, %ecx
000000000000c2ef	movslq	%ecx, %rax
000000000000c2f2	cmpq	$0x0, %rax
000000000000c2f6	je	0xc31b
000000000000c2fc	leaq	0x55e10(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c303	leaq	0x54e9c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c30a	leaq	0x55fae(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c311	movl	$0xa54, %edx
000000000000c316	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c31b	jmp	0xc320
000000000000c320	movq	-0x8(%rbp), %rax
000000000000c324	movzbl	0x26(%rax), %ecx
000000000000c328	cmpl	$0x0, %ecx
000000000000c32b	sete	%dl
000000000000c32e	xorb	$-0x1, %dl
000000000000c331	andb	$0x1, %dl
000000000000c334	movzbl	%dl, %ecx
000000000000c337	movslq	%ecx, %rax
000000000000c33a	cmpq	$0x0, %rax
000000000000c33e	je	0xc363
000000000000c344	leaq	0x55dc8(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c34b	leaq	0x54e54(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c352	leaq	0x55fe3(%rip), %rcx ## literal pool for: "context->cache.W == 0"
000000000000c359	movl	$0xa55, %edx
000000000000c35e	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c363	jmp	0xc368
000000000000c368	movq	-0x8(%rbp), %rax
000000000000c36c	movb	$0x10, 0x3c(%rax)
000000000000c370	jmp	0xc83d
000000000000c375	movq	-0x8(%rbp), %rax
000000000000c379	movzbl	0x26(%rax), %ecx
000000000000c37d	testl	%ecx, %ecx
000000000000c37f	movl	%ecx, -0x7c(%rbp)
000000000000c382	je	0xc3a1
000000000000c388	jmp	0xc38d
000000000000c38d	movl	-0x7c(%rbp), %eax
000000000000c390	subl	$0x1, %eax
000000000000c393	movl	%eax, -0x80(%rbp)
000000000000c396	je	0xc3f6
000000000000c39c	jmp	0xc4c2
000000000000c3a1	movq	-0x8(%rbp), %rax
000000000000c3a5	movzbl	0x34(%rax), %ecx
000000000000c3a9	cmpl	$0x20, %ecx
000000000000c3ac	sete	%dl
000000000000c3af	xorb	$-0x1, %dl
000000000000c3b2	andb	$0x1, %dl
000000000000c3b5	movzbl	%dl, %ecx
000000000000c3b8	movslq	%ecx, %rax
000000000000c3bb	cmpq	$0x0, %rax
000000000000c3bf	je	0xc3e4
000000000000c3c5	leaq	0x55d47(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c3cc	leaq	0x54dd3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c3d3	leaq	0x55ee5(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c3da	movl	$0xa5c, %edx
000000000000c3df	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c3e4	jmp	0xc3e9
000000000000c3e9	movq	-0x8(%rbp), %rax
000000000000c3ed	movb	$0x8, 0x3c(%rax)
000000000000c3f1	jmp	0xc4e1
000000000000c3f6	movq	-0x8(%rbp), %rax
000000000000c3fa	movzbl	0x34(%rax), %ecx
000000000000c3fe	cmpl	$0x40, %ecx
000000000000c401	sete	%dl
000000000000c404	xorb	$-0x1, %dl
000000000000c407	andb	$0x1, %dl
000000000000c40a	movzbl	%dl, %ecx
000000000000c40d	movslq	%ecx, %rax
000000000000c410	cmpq	$0x0, %rax
000000000000c414	je	0xc439
000000000000c41a	leaq	0x55cf2(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c421	leaq	0x54d7e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c428	leaq	0x55eb1(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000c42f	movl	$0xa60, %edx
000000000000c434	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c439	jmp	0xc43e
000000000000c43e	movq	-0x10(%rbp), %rax
000000000000c442	movzwl	0x48c(%rax), %ecx
000000000000c449	cmpl	$0x100, %ecx
000000000000c44f	movb	$0x1, %dl
000000000000c451	movb	%dl, -0x81(%rbp)
000000000000c457	je	0xc477
000000000000c45d	movq	-0x10(%rbp), %rax
000000000000c461	movzwl	0x48c(%rax), %ecx
000000000000c468	cmpl	$0x200, %ecx
000000000000c46e	sete	%dl
000000000000c471	movb	%dl, -0x81(%rbp)
000000000000c477	movb	-0x81(%rbp), %al
000000000000c47d	xorb	$-0x1, %al
000000000000c47f	andb	$0x1, %al
000000000000c481	movzbl	%al, %ecx
000000000000c484	movslq	%ecx, %rdx
000000000000c487	cmpq	$0x0, %rdx
000000000000c48b	je	0xc4b0
000000000000c491	leaq	0x55c7b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c498	leaq	0x54d07(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c49f	leaq	0x55eac(%rip), %rcx ## literal pool for: "(instruction->avx.vector_length == 256) || (instruction->avx.vector_length == 512)"
000000000000c4a6	movl	$0xa62, %edx
000000000000c4ab	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c4b0	jmp	0xc4b5
000000000000c4b5	movq	-0x8(%rbp), %rax
000000000000c4b9	movb	$0x10, 0x3c(%rax)
000000000000c4bd	jmp	0xc4e1
000000000000c4c2	leaq	0x55c4a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c4c9	leaq	0x54cd6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c4d0	leaq	0x54f35(%rip), %rcx ## literal pool for: "0"
000000000000c4d7	movl	$0xa66, %edx
000000000000c4dc	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c4e1	jmp	0xc83d
000000000000c4e6	movq	-0x8(%rbp), %rax
000000000000c4ea	movzbl	0x26(%rax), %ecx
000000000000c4ee	testl	%ecx, %ecx
000000000000c4f0	movl	%ecx, -0x88(%rbp)
000000000000c4f6	je	0xc51b
000000000000c4fc	jmp	0xc501
000000000000c501	movl	-0x88(%rbp), %eax
000000000000c507	subl	$0x1, %eax
000000000000c50a	movl	%eax, -0x8c(%rbp)
000000000000c510	je	0xc5e7
000000000000c516	jmp	0xc68a
000000000000c51b	movq	-0x8(%rbp), %rax
000000000000c51f	movzbl	0x34(%rax), %ecx
000000000000c523	cmpl	$0x20, %ecx
000000000000c526	sete	%dl
000000000000c529	xorb	$-0x1, %dl
000000000000c52c	andb	$0x1, %dl
000000000000c52f	movzbl	%dl, %ecx
000000000000c532	movslq	%ecx, %rax
000000000000c535	cmpq	$0x0, %rax
000000000000c539	je	0xc55e
000000000000c53f	leaq	0x55bcd(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c546	leaq	0x54c59(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c54d	leaq	0x55d6b(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c554	movl	$0xa6d, %edx
000000000000c559	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c55e	jmp	0xc563
000000000000c563	movq	-0x10(%rbp), %rax
000000000000c567	movzwl	0x48c(%rax), %ecx
000000000000c56e	cmpl	$0x100, %ecx
000000000000c574	movb	$0x1, %dl
000000000000c576	movb	%dl, -0x8d(%rbp)
000000000000c57c	je	0xc59c
000000000000c582	movq	-0x10(%rbp), %rax
000000000000c586	movzwl	0x48c(%rax), %ecx
000000000000c58d	cmpl	$0x200, %ecx
000000000000c593	sete	%dl
000000000000c596	movb	%dl, -0x8d(%rbp)
000000000000c59c	movb	-0x8d(%rbp), %al
000000000000c5a2	xorb	$-0x1, %al
000000000000c5a4	andb	$0x1, %al
000000000000c5a6	movzbl	%al, %ecx
000000000000c5a9	movslq	%ecx, %rdx
000000000000c5ac	cmpq	$0x0, %rdx
000000000000c5b0	je	0xc5d5
000000000000c5b6	leaq	0x55b56(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c5bd	leaq	0x54be2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c5c4	leaq	0x55d87(%rip), %rcx ## literal pool for: "(instruction->avx.vector_length == 256) || (instruction->avx.vector_length == 512)"
000000000000c5cb	movl	$0xa6f, %edx
000000000000c5d0	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c5d5	jmp	0xc5da
000000000000c5da	movq	-0x8(%rbp), %rax
000000000000c5de	movb	$0x10, 0x3c(%rax)
000000000000c5e2	jmp	0xc6a9
000000000000c5e7	movq	-0x8(%rbp), %rax
000000000000c5eb	movzbl	0x34(%rax), %ecx
000000000000c5ef	cmpl	$0x40, %ecx
000000000000c5f2	sete	%dl
000000000000c5f5	xorb	$-0x1, %dl
000000000000c5f8	andb	$0x1, %dl
000000000000c5fb	movzbl	%dl, %ecx
000000000000c5fe	movslq	%ecx, %rax
000000000000c601	cmpq	$0x0, %rax
000000000000c605	je	0xc62a
000000000000c60b	leaq	0x55b01(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c612	leaq	0x54b8d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c619	leaq	0x55cc0(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000c620	movl	$0xa73, %edx
000000000000c625	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c62a	jmp	0xc62f
000000000000c62f	movq	-0x10(%rbp), %rax
000000000000c633	movzwl	0x48c(%rax), %ecx
000000000000c63a	cmpl	$0x200, %ecx
000000000000c640	sete	%dl
000000000000c643	xorb	$-0x1, %dl
000000000000c646	andb	$0x1, %dl
000000000000c649	movzbl	%dl, %ecx
000000000000c64c	movslq	%ecx, %rax
000000000000c64f	cmpq	$0x0, %rax
000000000000c653	je	0xc678
000000000000c659	leaq	0x55ab3(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c660	leaq	0x54b3f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c667	leaq	0x55d37(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
000000000000c66e	movl	$0xa74, %edx
000000000000c673	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c678	jmp	0xc67d
000000000000c67d	movq	-0x8(%rbp), %rax
000000000000c681	movb	$0x20, 0x3c(%rax)
000000000000c685	jmp	0xc6a9
000000000000c68a	leaq	0x55a82(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c691	leaq	0x54b0e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c698	leaq	0x54d6d(%rip), %rcx ## literal pool for: "0"
000000000000c69f	movl	$0xa78, %edx
000000000000c6a4	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c6a9	jmp	0xc83d
000000000000c6ae	movq	-0x8(%rbp), %rax
000000000000c6b2	cmpb	$0x0, 0x26(%rax)
000000000000c6b6	setne	%cl
000000000000c6b9	xorb	$-0x1, %cl
000000000000c6bc	xorb	$-0x1, %cl
000000000000c6bf	andb	$0x1, %cl
000000000000c6c2	movzbl	%cl, %edx
000000000000c6c5	movslq	%edx, %rax
000000000000c6c8	cmpq	$0x0, %rax
000000000000c6cc	je	0xc6f1
000000000000c6d2	leaq	0x55a3a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c6d9	leaq	0x54ac6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c6e0	leaq	0x55bc6(%rip), %rcx ## literal pool for: "!context->cache.W"
000000000000c6e7	movl	$0xa7c, %edx
000000000000c6ec	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c6f1	jmp	0xc6f6
000000000000c6f6	movq	-0x10(%rbp), %rax
000000000000c6fa	movzwl	0x48c(%rax), %ecx
000000000000c701	cmpl	$0x200, %ecx
000000000000c707	sete	%dl
000000000000c70a	xorb	$-0x1, %dl
000000000000c70d	andb	$0x1, %dl
000000000000c710	movzbl	%dl, %ecx
000000000000c713	movslq	%ecx, %rax
000000000000c716	cmpq	$0x0, %rax
000000000000c71a	je	0xc73f
000000000000c720	leaq	0x559ec(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c727	leaq	0x54a78(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c72e	leaq	0x55c70(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
000000000000c735	movl	$0xa7d, %edx
000000000000c73a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c73f	jmp	0xc744
000000000000c744	movq	-0x8(%rbp), %rax
000000000000c748	movzbl	0x34(%rax), %ecx
000000000000c74c	cmpl	$0x20, %ecx
000000000000c74f	sete	%dl
000000000000c752	xorb	$-0x1, %dl
000000000000c755	andb	$0x1, %dl
000000000000c758	movzbl	%dl, %ecx
000000000000c75b	movslq	%ecx, %rax
000000000000c75e	cmpq	$0x0, %rax
000000000000c762	je	0xc787
000000000000c768	leaq	0x559a4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c76f	leaq	0x54a30(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c776	leaq	0x55b42(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c77d	movl	$0xa7e, %edx
000000000000c782	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c787	jmp	0xc78c
000000000000c78c	movq	-0x8(%rbp), %rax
000000000000c790	movb	$0x20, 0x3c(%rax)
000000000000c794	jmp	0xc83d
000000000000c799	movzbl	-0x29(%rbp), %eax
000000000000c79d	movl	%eax, %ecx
000000000000c79f	leaq	_ZydisSetAVXInformation.scales.86(%rip), %rdx
000000000000c7a6	movb	(%rdx,%rcx), %sil
000000000000c7aa	movq	-0x8(%rbp), %rcx
000000000000c7ae	movb	%sil, 0x3c(%rcx)
000000000000c7b2	jmp	0xc83d
000000000000c7b7	movzbl	-0x29(%rbp), %eax
000000000000c7bb	movl	%eax, %ecx
000000000000c7bd	leaq	_ZydisSetAVXInformation.scales.87(%rip), %rdx
000000000000c7c4	movb	(%rdx,%rcx), %sil
000000000000c7c8	movq	-0x8(%rbp), %rcx
000000000000c7cc	movb	%sil, 0x3c(%rcx)
000000000000c7d0	jmp	0xc83d
000000000000c7d5	movzbl	-0x29(%rbp), %eax
000000000000c7d9	movl	%eax, %ecx
000000000000c7db	leaq	_ZydisSetAVXInformation.scales.88(%rip), %rdx
000000000000c7e2	movb	(%rdx,%rcx), %sil
000000000000c7e6	movq	-0x8(%rbp), %rcx
000000000000c7ea	movb	%sil, 0x3c(%rcx)
000000000000c7ee	jmp	0xc83d
000000000000c7f3	movq	-0x8(%rbp), %rax
000000000000c7f7	movb	$0x10, 0x3c(%rax)
000000000000c7fb	jmp	0xc83d
000000000000c800	movzbl	-0x29(%rbp), %eax
000000000000c804	movl	%eax, %ecx
000000000000c806	leaq	_ZydisSetAVXInformation.scales.89(%rip), %rdx
000000000000c80d	movb	(%rdx,%rcx), %sil
000000000000c811	movq	-0x8(%rbp), %rcx
000000000000c815	movb	%sil, 0x3c(%rcx)
000000000000c819	jmp	0xc83d
000000000000c81e	leaq	0x558ee(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c825	leaq	0x5497a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c82c	leaq	0x54bd9(%rip), %rcx ## literal pool for: "0"
000000000000c833	movl	$0xaa9, %edx
000000000000c838	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c83d	jmp	0xc892
000000000000c842	movq	-0x10(%rbp), %rax
000000000000c846	movzbl	0x578(%rax), %ecx
000000000000c84d	cmpl	$0x3, %ecx
000000000000c850	sete	%dl
000000000000c853	xorb	$-0x1, %dl
000000000000c856	andb	$0x1, %dl
000000000000c859	movzbl	%dl, %ecx
000000000000c85c	movslq	%ecx, %rax
000000000000c85f	cmpq	$0x0, %rax
000000000000c863	je	0xc888
000000000000c869	leaq	0x558a3(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c870	leaq	0x5492f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c877	leaq	0x55b4d(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod == 3"
000000000000c87e	movl	$0xaad, %edx
000000000000c883	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c888	jmp	0xc88d
000000000000c88d	jmp	0xc892
000000000000c892	movq	-0x28(%rbp), %rax
000000000000c896	movzwl	0xc(%rax), %ecx
000000000000c89a	movl	%ecx, %eax
000000000000c89c	shrq	$0xc, %rax
000000000000c8a0	movb	%al, %dl
000000000000c8a2	cmpb	$0x0, %dl
000000000000c8a5	je	0xc980
000000000000c8ab	movq	-0x10(%rbp), %rax
000000000000c8af	cmpl	$0x0, 0x49c(%rax)
000000000000c8b6	setne	%cl
000000000000c8b9	xorb	$-0x1, %cl
000000000000c8bc	xorb	$-0x1, %cl
000000000000c8bf	andb	$0x1, %cl
000000000000c8c2	movzbl	%cl, %edx
000000000000c8c5	movslq	%edx, %rax
000000000000c8c8	cmpq	$0x0, %rax
000000000000c8cc	je	0xc8f1
000000000000c8d2	leaq	0x5583a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c8d9	leaq	0x548c6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c8e0	leaq	0x55b04(%rip), %rcx ## literal pool for: "!instruction->avx.broadcast.mode"
000000000000c8e7	movl	$0xab3, %edx
000000000000c8ec	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c8f1	jmp	0xc8f6
000000000000c8f6	movq	-0x10(%rbp), %rax
000000000000c8fa	movb	$0x1, 0x498(%rax)
000000000000c901	movq	-0x28(%rbp), %rax
000000000000c905	movzwl	0xc(%rax), %ecx
000000000000c909	movl	%ecx, %eax
000000000000c90b	shrq	$0xc, %rax
000000000000c90f	movb	%al, %dl
000000000000c911	movzbl	%dl, %ecx
000000000000c914	movl	%ecx, %eax
000000000000c916	cmpq	$0xd, %rax
000000000000c91a	setb	%dl
000000000000c91d	xorb	$-0x1, %dl
000000000000c920	andb	$0x1, %dl
000000000000c923	movzbl	%dl, %ecx
000000000000c926	movslq	%ecx, %rax
000000000000c929	cmpq	$0x0, %rax
000000000000c92d	je	0xc952
000000000000c933	leaq	0x557d9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c93a	leaq	0x54865(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c941	leaq	0x55ac4(%rip), %rcx ## literal pool for: "def->broadcast < (sizeof(broadcasts) / sizeof((broadcasts)[0]))"
000000000000c948	movl	$0xac5, %edx
000000000000c94d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000c952	jmp	0xc957
000000000000c957	movq	-0x28(%rbp), %rax
000000000000c95b	movzwl	0xc(%rax), %ecx
000000000000c95f	movl	%ecx, %eax
000000000000c961	shrq	$0xc, %rax
000000000000c965	movb	%al, %dl
000000000000c967	movzbl	%dl, %ecx
000000000000c96a	movl	%ecx, %eax
000000000000c96c	leaq	_ZydisSetAVXInformation.broadcasts.92(%rip), %rsi
000000000000c973	movl	(%rsi,%rax,4), %ecx
000000000000c976	movq	-0x10(%rbp), %rax
000000000000c97a	movl	%ecx, 0x49c(%rax)
000000000000c980	movq	-0x10(%rbp), %rax
000000000000c984	cmpb	$0x0, 0x567(%rax)
000000000000c98b	je	0xca3d
000000000000c991	movq	-0x28(%rbp), %rax
000000000000c995	movzwl	0xc(%rax), %ecx
000000000000c999	shrl	$0x5, %ecx
000000000000c99c	andl	$0x3, %ecx
000000000000c99f	movb	%cl, %dl
000000000000c9a1	subb	$0x2, %dl
000000000000c9a4	movl	%ecx, -0x94(%rbp)
000000000000c9aa	movb	%dl, -0x95(%rbp)
000000000000c9b0	jb	0xc9ef
000000000000c9b6	jmp	0xc9bb
000000000000c9bb	movl	-0x94(%rbp), %eax
000000000000c9c1	subl	$0x2, %eax
000000000000c9c4	movl	%eax, -0x9c(%rbp)
000000000000c9ca	je	0xc9f4
000000000000c9d0	jmp	0xc9d5
000000000000c9d5	movl	-0x94(%rbp), %eax
000000000000c9db	subl	$0x3, %eax
000000000000c9de	movl	%eax, -0xa0(%rbp)
000000000000c9e4	je	0xca09
000000000000c9ea	jmp	0xca19
000000000000c9ef	jmp	0xca38
000000000000c9f4	movq	-0x8(%rbp), %rax
000000000000c9f8	movzbl	0x2b(%rax), %ecx
000000000000c9fc	addl	$0x1, %ecx
000000000000c9ff	movq	-0x10(%rbp), %rax
000000000000ca03	movl	%ecx, 0x4a0(%rax)
000000000000ca09	movq	-0x10(%rbp), %rax
000000000000ca0d	movb	$0x1, 0x4ac(%rax)
000000000000ca14	jmp	0xca38
000000000000ca19	leaq	0x556f3(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000ca20	leaq	0x5477f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ca27	leaq	0x549de(%rip), %rcx ## literal pool for: "0"
000000000000ca2e	movl	$0xad9, %edx
000000000000ca33	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ca38	jmp	0xca3d
000000000000ca3d	movq	-0x10(%rbp), %rax
000000000000ca41	movzbl	0x569(%rax), %ecx
000000000000ca48	addl	$0xf8, %ecx
000000000000ca4e	movl	%ecx, 0x494(%rax)
000000000000ca54	movq	-0x28(%rbp), %rax
000000000000ca58	movzwl	0xc(%rax), %ecx
000000000000ca5c	shrl	$0xa, %ecx
000000000000ca5f	andl	$0x3, %ecx
000000000000ca62	movb	%cl, %dl
000000000000ca64	testb	%dl, %dl
000000000000ca66	movl	%ecx, -0xa4(%rbp)
000000000000ca6c	je	0xcaab
000000000000ca72	jmp	0xca77
000000000000ca77	movl	-0xa4(%rbp), %eax
000000000000ca7d	subl	$0x1, %eax
000000000000ca80	movl	%eax, -0xa8(%rbp)
000000000000ca86	je	0xcac8
000000000000ca8c	jmp	0xca91
000000000000ca91	movl	-0xa4(%rbp), %eax
000000000000ca97	subl	$0x2, %eax
000000000000ca9a	movl	%eax, -0xac(%rbp)
000000000000caa0	je	0xcadb
000000000000caa6	jmp	0xcaf8
000000000000caab	movq	-0x10(%rbp), %rax
000000000000caaf	movzbl	0x564(%rax), %ecx
000000000000cab6	addl	$0x2, %ecx
000000000000cab9	movq	-0x10(%rbp), %rax
000000000000cabd	movl	%ecx, 0x490(%rax)
000000000000cac3	jmp	0xcb17
000000000000cac8	movq	-0x10(%rbp), %rax
000000000000cacc	movl	$0x3, 0x490(%rax)
000000000000cad6	jmp	0xcb17
000000000000cadb	movq	-0x10(%rbp), %rax
000000000000cadf	movzbl	0x564(%rax), %ecx
000000000000cae6	addl	$0x4, %ecx
000000000000cae9	movq	-0x10(%rbp), %rax
000000000000caed	movl	%ecx, 0x490(%rax)
000000000000caf3	jmp	0xcb17
000000000000caf8	leaq	0x55614(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000caff	leaq	0x546a0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cb06	leaq	0x548ff(%rip), %rcx ## literal pool for: "0"
000000000000cb0d	movl	$0xaeb, %edx
000000000000cb12	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cb17	movq	-0x10(%rbp), %rax
000000000000cb1b	cmpb	$0x0, 0x569(%rax)
000000000000cb22	jne	0xcb36
000000000000cb28	movq	-0x10(%rbp), %rax
000000000000cb2c	movl	$0x1, 0x490(%rax)
000000000000cb36	jmp	0xd58f
000000000000cb3b	movq	-0x10(%rbp), %rax
000000000000cb3f	movw	$0x200, 0x48c(%rax)
000000000000cb48	movq	-0x18(%rbp), %rax
000000000000cb4c	movq	%rax, -0x38(%rbp)
000000000000cb50	movq	-0x38(%rbp), %rax
000000000000cb54	movb	0xc(%rax), %cl
000000000000cb57	shrb	$0x3, %cl
000000000000cb5a	andb	$0x1, %cl
000000000000cb5d	movb	%cl, -0x39(%rbp)
000000000000cb60	cmpb	$0x0, -0x39(%rbp)
000000000000cb64	movb	$0x1, %cl
000000000000cb66	movb	%cl, -0xad(%rbp)
000000000000cb6c	je	0xcb8e
000000000000cb72	movq	-0x38(%rbp), %rax
000000000000cb76	movb	0xc(%rax), %cl
000000000000cb79	shrb	$0x4, %cl
000000000000cb7c	andb	$0x7, %cl
000000000000cb7f	cmpb	$0x0, %cl
000000000000cb82	setne	%cl
000000000000cb85	xorb	$-0x1, %cl
000000000000cb88	movb	%cl, -0xad(%rbp)
000000000000cb8e	movb	-0xad(%rbp), %al
000000000000cb94	xorb	$-0x1, %al
000000000000cb96	andb	$0x1, %al
000000000000cb98	movzbl	%al, %ecx
000000000000cb9b	movslq	%ecx, %rdx
000000000000cb9e	cmpq	$0x0, %rdx
000000000000cba2	je	0xcbc7
000000000000cba8	leaq	0x55564(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cbaf	leaq	0x545f0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cbb6	leaq	0x5588f(%rip), %rcx ## literal pool for: "!index || !def->broadcast"
000000000000cbbd	movl	$0xb01, %edx
000000000000cbc2	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cbc7	jmp	0xcbcc
000000000000cbcc	cmpb	$0x0, -0x39(%rbp)
000000000000cbd0	jne	0xccb9
000000000000cbd6	movq	-0x38(%rbp), %rax
000000000000cbda	movb	0xc(%rax), %cl
000000000000cbdd	shrb	$0x4, %cl
000000000000cbe0	andb	$0x7, %cl
000000000000cbe3	movzbl	%cl, %edx
000000000000cbe6	cmpl	$0x0, %edx
000000000000cbe9	je	0xccb9
000000000000cbef	movq	-0x10(%rbp), %rax
000000000000cbf3	movb	$0x1, 0x498(%rax)
000000000000cbfa	movq	-0x38(%rbp), %rax
000000000000cbfe	movzbl	0xc(%rax), %ecx
000000000000cc02	shrl	$0x4, %ecx
000000000000cc05	andl	$0x7, %ecx
000000000000cc08	decl	%ecx
000000000000cc0a	movl	%ecx, %eax
000000000000cc0c	subl	$0x3, %ecx
000000000000cc0f	movq	%rax, -0xb8(%rbp)
000000000000cc16	movl	%ecx, -0xbc(%rbp)
000000000000cc1c	ja	0xcc95
000000000000cc22	leaq	0x97f(%rip), %rax
000000000000cc29	movq	-0xb8(%rbp), %rcx
000000000000cc30	movslq	(%rax,%rcx,4), %rdx
000000000000cc34	addq	%rax, %rdx
000000000000cc37	jmpq	*%rdx
000000000000cc39	movq	-0x10(%rbp), %rax
000000000000cc3d	movl	$0x3, 0x49c(%rax)
000000000000cc47	movb	$0x1, -0x39(%rbp)
000000000000cc4b	jmp	0xccb4
000000000000cc50	movq	-0x10(%rbp), %rax
000000000000cc54	movl	$0x4, 0x49c(%rax)
000000000000cc5e	movb	$0x1, -0x39(%rbp)
000000000000cc62	jmp	0xccb4
000000000000cc67	movq	-0x10(%rbp), %rax
000000000000cc6b	movl	$0xa, 0x49c(%rax)
000000000000cc75	movb	$0x2, -0x39(%rbp)
000000000000cc79	jmp	0xccb4
000000000000cc7e	movq	-0x10(%rbp), %rax
000000000000cc82	movl	$0xb, 0x49c(%rax)
000000000000cc8c	movb	$0x2, -0x39(%rbp)
000000000000cc90	jmp	0xccb4
000000000000cc95	leaq	0x55477(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cc9c	leaq	0x54503(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cca3	leaq	0x54762(%rip), %rcx ## literal pool for: "0"
000000000000ccaa	movl	$0xb18, %edx
000000000000ccaf	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ccb4	jmp	0xccb9
000000000000ccb9	movq	-0x38(%rbp), %rax
000000000000ccbd	movl	0x8(%rax), %ecx
000000000000ccc0	movl	%ecx, %edx
000000000000ccc2	movzbl	0xc(%rax), %ecx
000000000000ccc6	movl	%ecx, %eax
000000000000ccc8	shlq	$0x20, %rax
000000000000cccc	orq	%rax, %rdx
000000000000cccf	shrq	$0x1c, %rdx
000000000000ccd3	movl	%edx, %ecx
000000000000ccd5	andl	$0x1f, %ecx
000000000000ccd8	movl	%ecx, %eax
000000000000ccda	movb	%al, %sil
000000000000ccdd	subb	$0x19, %sil
000000000000cce1	movq	%rax, -0xc8(%rbp)
000000000000cce8	movb	%sil, -0xc9(%rbp)
000000000000ccef	ja	0xd022
000000000000ccf5	leaq	0x8bc(%rip), %rax
000000000000ccfc	movq	-0xc8(%rbp), %rcx
000000000000cd03	movslq	(%rax,%rcx,4), %rdx
000000000000cd07	addq	%rax, %rdx
000000000000cd0a	jmpq	*%rdx
000000000000cd0c	jmp	0xd041
000000000000cd11	movq	-0x8(%rbp), %rax
000000000000cd15	movb	$0x40, 0x3c(%rax)
000000000000cd19	jmp	0xd041
000000000000cd1e	movq	-0x10(%rbp), %rax
000000000000cd22	movzbl	0x574(%rax), %ecx
000000000000cd29	movl	%ecx, %eax
000000000000cd2b	cmpq	$0x8, %rax
000000000000cd2f	setb	%dl
000000000000cd32	xorb	$-0x1, %dl
000000000000cd35	andb	$0x1, %dl
000000000000cd38	movzbl	%dl, %ecx
000000000000cd3b	movslq	%ecx, %rax
000000000000cd3e	cmpq	$0x0, %rax
000000000000cd42	je	0xcd67
000000000000cd48	leaq	0x553c4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cd4f	leaq	0x54450(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cd56	leaq	0x55709(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000cd5d	movl	$0xb38, %edx
000000000000cd62	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cd67	jmp	0xcd6c
000000000000cd6c	movzbl	-0x39(%rbp), %eax
000000000000cd70	movl	%eax, %ecx
000000000000cd72	shlq	$0x3, %rcx
000000000000cd76	leaq	_ZydisSetAVXInformation.lookup.95(%rip), %rdx
000000000000cd7d	addq	%rcx, %rdx
000000000000cd80	movq	-0x10(%rbp), %rcx
000000000000cd84	movzbl	0x574(%rcx), %eax
000000000000cd8b	movl	%eax, %ecx
000000000000cd8d	movb	(%rdx,%rcx), %sil
000000000000cd91	movq	-0x8(%rbp), %rcx
000000000000cd95	movb	%sil, 0x3c(%rcx)
000000000000cd99	jmp	0xd041
000000000000cd9e	movq	-0x10(%rbp), %rax
000000000000cda2	movzbl	0x574(%rax), %ecx
000000000000cda9	movl	%ecx, %eax
000000000000cdab	cmpq	$0x8, %rax
000000000000cdaf	setb	%dl
000000000000cdb2	xorb	$-0x1, %dl
000000000000cdb5	andb	$0x1, %dl
000000000000cdb8	movzbl	%dl, %ecx
000000000000cdbb	movslq	%ecx, %rax
000000000000cdbe	cmpq	$0x0, %rax
000000000000cdc2	je	0xcde7
000000000000cdc8	leaq	0x55344(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cdcf	leaq	0x543d0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cdd6	leaq	0x55689(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000cddd	movl	$0xb47, %edx
000000000000cde2	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cde7	jmp	0xcdec
000000000000cdec	movzbl	-0x39(%rbp), %eax
000000000000cdf0	movl	%eax, %ecx
000000000000cdf2	shlq	$0x3, %rcx
000000000000cdf6	leaq	_ZydisSetAVXInformation.lookup.97(%rip), %rdx
000000000000cdfd	addq	%rcx, %rdx
000000000000ce00	movq	-0x10(%rbp), %rcx
000000000000ce04	movzbl	0x574(%rcx), %eax
000000000000ce0b	movl	%eax, %ecx
000000000000ce0d	movb	(%rdx,%rcx), %sil
000000000000ce11	movq	-0x8(%rbp), %rcx
000000000000ce15	movb	%sil, 0x3c(%rcx)
000000000000ce19	jmp	0xd041
000000000000ce1e	movq	-0x10(%rbp), %rax
000000000000ce22	movzbl	0x574(%rax), %ecx
000000000000ce29	movl	%ecx, %eax
000000000000ce2b	cmpq	$0x3, %rax
000000000000ce2f	setb	%dl
000000000000ce32	xorb	$-0x1, %dl
000000000000ce35	andb	$0x1, %dl
000000000000ce38	movzbl	%dl, %ecx
000000000000ce3b	movslq	%ecx, %rax
000000000000ce3e	cmpq	$0x0, %rax
000000000000ce42	je	0xce67
000000000000ce48	leaq	0x552c4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000ce4f	leaq	0x54350(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ce56	leaq	0x55609(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000ce5d	movl	$0xb56, %edx
000000000000ce62	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ce67	jmp	0xce6c
000000000000ce6c	movzbl	-0x39(%rbp), %eax
000000000000ce70	movl	%eax, %ecx
000000000000ce72	imulq	$0x3, %rcx, %rcx
000000000000ce76	leaq	_ZydisSetAVXInformation.lookup.98(%rip), %rdx
000000000000ce7d	addq	%rcx, %rdx
000000000000ce80	movq	-0x10(%rbp), %rcx
000000000000ce84	movzbl	0x574(%rcx), %eax
000000000000ce8b	movl	%eax, %ecx
000000000000ce8d	movb	(%rdx,%rcx), %sil
000000000000ce91	movq	-0x8(%rbp), %rcx
000000000000ce95	movb	%sil, 0x3c(%rcx)
000000000000ce99	jmp	0xd041
000000000000ce9e	movzbl	-0x39(%rbp), %eax
000000000000cea2	cmpl	$0x2, %eax
000000000000cea5	setl	%cl
000000000000cea8	xorb	$-0x1, %cl
000000000000ceab	andb	$0x1, %cl
000000000000ceae	movzbl	%cl, %eax
000000000000ceb1	movslq	%eax, %rdx
000000000000ceb4	cmpq	$0x0, %rdx
000000000000ceb8	je	0xcedd
000000000000cebe	leaq	0x5524e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cec5	leaq	0x542da(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cecc	leaq	0x555e4(%rip), %rcx ## literal pool for: "index < 2"
000000000000ced3	movl	$0xb62, %edx
000000000000ced8	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cedd	jmp	0xcee2
000000000000cee2	movq	-0x10(%rbp), %rax
000000000000cee6	movzbl	0x574(%rax), %ecx
000000000000ceed	movl	%ecx, %eax
000000000000ceef	cmpq	$0x8, %rax
000000000000cef3	setb	%dl
000000000000cef6	xorb	$-0x1, %dl
000000000000cef9	andb	$0x1, %dl
000000000000cefc	movzbl	%dl, %ecx
000000000000ceff	movslq	%ecx, %rax
000000000000cf02	cmpq	$0x0, %rax
000000000000cf06	je	0xcf2b
000000000000cf0c	leaq	0x55200(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cf13	leaq	0x5428c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cf1a	leaq	0x55545(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000cf21	movl	$0xb63, %edx
000000000000cf26	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cf2b	jmp	0xcf30
000000000000cf30	movzbl	-0x39(%rbp), %eax
000000000000cf34	movl	%eax, %ecx
000000000000cf36	shlq	$0x3, %rcx
000000000000cf3a	leaq	_ZydisSetAVXInformation.lookup.99(%rip), %rdx
000000000000cf41	addq	%rcx, %rdx
000000000000cf44	movq	-0x10(%rbp), %rcx
000000000000cf48	movzbl	0x574(%rcx), %eax
000000000000cf4f	movl	%eax, %ecx
000000000000cf51	movb	(%rdx,%rcx), %sil
000000000000cf55	movq	-0x8(%rbp), %rcx
000000000000cf59	movb	%sil, 0x3c(%rcx)
000000000000cf5d	jmp	0xd041
000000000000cf62	movzbl	-0x39(%rbp), %eax
000000000000cf66	cmpl	$0x2, %eax
000000000000cf69	setl	%cl
000000000000cf6c	xorb	$-0x1, %cl
000000000000cf6f	andb	$0x1, %cl
000000000000cf72	movzbl	%cl, %eax
000000000000cf75	movslq	%eax, %rdx
000000000000cf78	cmpq	$0x0, %rdx
000000000000cf7c	je	0xcfa1
000000000000cf82	leaq	0x5518a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cf89	leaq	0x54216(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cf90	leaq	0x55520(%rip), %rcx ## literal pool for: "index < 2"
000000000000cf97	movl	$0xb6f, %edx
000000000000cf9c	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cfa1	jmp	0xcfa6
000000000000cfa6	movq	-0x10(%rbp), %rax
000000000000cfaa	movzbl	0x574(%rax), %ecx
000000000000cfb1	movl	%ecx, %eax
000000000000cfb3	cmpq	$0x1, %rax
000000000000cfb7	setb	%dl
000000000000cfba	xorb	$-0x1, %dl
000000000000cfbd	andb	$0x1, %dl
000000000000cfc0	movzbl	%dl, %ecx
000000000000cfc3	movslq	%ecx, %rax
000000000000cfc6	cmpq	$0x0, %rax
000000000000cfca	je	0xcfef
000000000000cfd0	leaq	0x5513c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cfd7	leaq	0x541c8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cfde	leaq	0x55481(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000cfe5	movl	$0xb70, %edx
000000000000cfea	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000cfef	jmp	0xcff4
000000000000cff4	movzbl	-0x39(%rbp), %eax
000000000000cff8	movl	%eax, %ecx
000000000000cffa	leaq	_ZydisSetAVXInformation.lookup.101(%rip), %rdx
000000000000d001	addq	%rcx, %rdx
000000000000d004	movq	-0x10(%rbp), %rcx
000000000000d008	movzbl	0x574(%rcx), %eax
000000000000d00f	movl	%eax, %ecx
000000000000d011	movb	(%rdx,%rcx), %sil
000000000000d015	movq	-0x8(%rbp), %rcx
000000000000d019	movb	%sil, 0x3c(%rcx)
000000000000d01d	jmp	0xd041
000000000000d022	leaq	0x550ea(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d029	leaq	0x54176(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d030	leaq	0x543d5(%rip), %rcx ## literal pool for: "0"
000000000000d037	movl	$0xb75, %edx
000000000000d03c	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d041	movq	-0x38(%rbp), %rax
000000000000d045	movl	0x8(%rax), %ecx
000000000000d048	movl	%ecx, %edx
000000000000d04a	movzbl	0xc(%rax), %ecx
000000000000d04e	movl	%ecx, %eax
000000000000d050	shlq	$0x20, %rax
000000000000d054	orq	%rax, %rdx
000000000000d057	shrq	$0x1c, %rdx
000000000000d05b	movl	%edx, %ecx
000000000000d05d	andl	$0x1f, %ecx
000000000000d060	movq	-0x8(%rbp), %rax
000000000000d064	movl	%ecx, 0x38(%rax)
000000000000d067	movq	-0x38(%rbp), %rax
000000000000d06b	movl	0x8(%rax), %ecx
000000000000d06e	movl	%ecx, %edx
000000000000d070	movzbl	0xc(%rax), %ecx
000000000000d074	movl	%ecx, %eax
000000000000d076	shlq	$0x20, %rax
000000000000d07a	orq	%rax, %rdx
000000000000d07d	shrq	$0x1c, %rdx
000000000000d081	movl	%edx, %ecx
000000000000d083	andl	$0x1f, %ecx
000000000000d086	movl	%ecx, %eax
000000000000d088	movb	%al, %sil
000000000000d08b	subb	$0x19, %sil
000000000000d08f	movq	%rax, -0xd8(%rbp)
000000000000d096	movb	%sil, -0xd9(%rbp)
000000000000d09d	ja	0xd50a
000000000000d0a3	leaq	0x576(%rip), %rax
000000000000d0aa	movq	-0xd8(%rbp), %rcx
000000000000d0b1	movslq	(%rax,%rcx,4), %rdx
000000000000d0b5	addq	%rax, %rdx
000000000000d0b8	jmpq	*%rdx
000000000000d0ba	jmp	0xd529
000000000000d0bf	movq	-0x10(%rbp), %rax
000000000000d0c3	movzbl	0x574(%rax), %ecx
000000000000d0ca	addl	$0x1, %ecx
000000000000d0cd	movq	-0x10(%rbp), %rax
000000000000d0d1	movl	%ecx, 0x4a0(%rax)
000000000000d0d7	jmp	0xd529
000000000000d0dc	movq	-0x10(%rbp), %rax
000000000000d0e0	movzbl	0x574(%rax), %ecx
000000000000d0e7	cmpl	$0x4, %ecx
000000000000d0ea	jl	0xd0fb
000000000000d0f0	movq	-0x10(%rbp), %rax
000000000000d0f4	movb	$0x1, 0x4ac(%rax)
000000000000d0fb	jmp	0xd529
000000000000d100	movq	-0x10(%rbp), %rax
000000000000d104	movzbl	0x574(%rax), %ecx
000000000000d10b	addl	$0x1, %ecx
000000000000d10e	movq	-0x10(%rbp), %rax
000000000000d112	movl	%ecx, 0x4a4(%rax)
000000000000d118	jmp	0xd529
000000000000d11d	movq	-0x10(%rbp), %rax
000000000000d121	movzbl	0x574(%rax), %ecx
000000000000d128	movl	%ecx, %eax
000000000000d12a	movq	%rax, %rdx
000000000000d12d	subq	$0x7, %rdx
000000000000d131	movq	%rax, -0xe8(%rbp)
000000000000d138	movq	%rdx, -0xf0(%rbp)
000000000000d13f	ja	0xd1e6
000000000000d145	leaq	0x59c(%rip), %rax
000000000000d14c	movq	-0xe8(%rbp), %rcx
000000000000d153	movslq	(%rax,%rcx,4), %rdx
000000000000d157	addq	%rax, %rdx
000000000000d15a	jmpq	*%rdx
000000000000d15c	jmp	0xd205
000000000000d161	movq	-0x10(%rbp), %rax
000000000000d165	movl	$0x4, 0x49c(%rax)
000000000000d16f	jmp	0xd205
000000000000d174	movq	-0x10(%rbp), %rax
000000000000d178	movl	$0xb, 0x49c(%rax)
000000000000d182	jmp	0xd205
000000000000d187	movq	-0x10(%rbp), %rax
000000000000d18b	movl	$0x1, 0x4a8(%rax)
000000000000d195	jmp	0xd205
000000000000d19a	movq	-0x10(%rbp), %rax
000000000000d19e	movl	$0x3, 0x4a8(%rax)
000000000000d1a8	jmp	0xd205
000000000000d1ad	movq	-0x10(%rbp), %rax
000000000000d1b1	movl	$0x2, 0x4a8(%rax)
000000000000d1bb	jmp	0xd205
000000000000d1c0	movq	-0x10(%rbp), %rax
000000000000d1c4	movl	$0x5, 0x4a8(%rax)
000000000000d1ce	jmp	0xd205
000000000000d1d3	movq	-0x10(%rbp), %rax
000000000000d1d7	movl	$0x4, 0x4a8(%rax)
000000000000d1e1	jmp	0xd205
000000000000d1e6	leaq	0x54f26(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d1ed	leaq	0x53fb2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d1f4	leaq	0x54211(%rip), %rcx ## literal pool for: "0"
000000000000d1fb	movl	$0xbae, %edx
000000000000d200	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d205	jmp	0xd529
000000000000d20a	movq	-0x10(%rbp), %rax
000000000000d20e	movzbl	0x574(%rax), %ecx
000000000000d215	movl	%ecx, %eax
000000000000d217	movq	%rax, %rdx
000000000000d21a	subq	$0x7, %rdx
000000000000d21e	movq	%rax, -0xf8(%rbp)
000000000000d225	movq	%rdx, -0x100(%rbp)
000000000000d22c	ja	0xd2c0
000000000000d232	leaq	0x48f(%rip), %rax
000000000000d239	movq	-0xf8(%rbp), %rcx
000000000000d240	movslq	(%rax,%rcx,4), %rdx
000000000000d244	addq	%rax, %rdx
000000000000d247	jmpq	*%rdx
000000000000d249	jmp	0xd2df
000000000000d24e	movq	-0x10(%rbp), %rax
000000000000d252	movl	$0x4, 0x49c(%rax)
000000000000d25c	jmp	0xd2df
000000000000d261	movq	-0x10(%rbp), %rax
000000000000d265	movl	$0xb, 0x49c(%rax)
000000000000d26f	jmp	0xd2df
000000000000d274	movq	-0x10(%rbp), %rax
000000000000d278	movl	$0x3, 0x4a8(%rax)
000000000000d282	jmp	0xd2df
000000000000d287	movq	-0x10(%rbp), %rax
000000000000d28b	movl	$0x2, 0x4a8(%rax)
000000000000d295	jmp	0xd2df
000000000000d29a	movq	-0x10(%rbp), %rax
000000000000d29e	movl	$0x5, 0x4a8(%rax)
000000000000d2a8	jmp	0xd2df
000000000000d2ad	movq	-0x10(%rbp), %rax
000000000000d2b1	movl	$0x4, 0x4a8(%rax)
000000000000d2bb	jmp	0xd2df
000000000000d2c0	leaq	0x54e4c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d2c7	leaq	0x53ed8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d2ce	leaq	0x54137(%rip), %rcx ## literal pool for: "0"
000000000000d2d5	movl	$0xbcb, %edx
000000000000d2da	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d2df	jmp	0xd529
000000000000d2e4	movq	-0x10(%rbp), %rax
000000000000d2e8	movzbl	0x574(%rax), %ecx
000000000000d2ef	testl	%ecx, %ecx
000000000000d2f1	movl	%ecx, -0x104(%rbp)
000000000000d2f7	je	0xd336
000000000000d2fd	jmp	0xd302
000000000000d302	movl	-0x104(%rbp), %eax
000000000000d308	subl	$0x1, %eax
000000000000d30b	movl	%eax, -0x108(%rbp)
000000000000d311	je	0xd33b
000000000000d317	jmp	0xd31c
000000000000d31c	movl	-0x104(%rbp), %eax
000000000000d322	subl	$0x2, %eax
000000000000d325	movl	%eax, -0x10c(%rbp)
000000000000d32b	je	0xd34e
000000000000d331	jmp	0xd361
000000000000d336	jmp	0xd380
000000000000d33b	movq	-0x10(%rbp), %rax
000000000000d33f	movl	$0x3, 0x49c(%rax)
000000000000d349	jmp	0xd380
000000000000d34e	movq	-0x10(%rbp), %rax
000000000000d352	movl	$0xa, 0x49c(%rax)
000000000000d35c	jmp	0xd380
000000000000d361	leaq	0x54dab(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d368	leaq	0x53e37(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d36f	leaq	0x54096(%rip), %rcx ## literal pool for: "0"
000000000000d376	movl	$0xbdb, %edx
000000000000d37b	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d380	jmp	0xd529
000000000000d385	movq	-0x10(%rbp), %rax
000000000000d389	movzbl	0x574(%rax), %ecx
000000000000d390	movl	%ecx, %eax
000000000000d392	movq	%rax, %rdx
000000000000d395	subq	$0x7, %rdx
000000000000d399	movq	%rax, -0x118(%rbp)
000000000000d3a0	movq	%rdx, -0x120(%rbp)
000000000000d3a7	ja	0xd428
000000000000d3ad	leaq	0x2f4(%rip), %rax
000000000000d3b4	movq	-0x118(%rbp), %rcx
000000000000d3bb	movslq	(%rax,%rcx,4), %rdx
000000000000d3bf	addq	%rax, %rdx
000000000000d3c2	jmpq	*%rdx
000000000000d3c4	jmp	0xd447
000000000000d3c9	movq	-0x10(%rbp), %rax
000000000000d3cd	movl	$0x1, 0x4a8(%rax)
000000000000d3d7	jmp	0xd447
000000000000d3dc	movq	-0x10(%rbp), %rax
000000000000d3e0	movl	$0x3, 0x4a8(%rax)
000000000000d3ea	jmp	0xd447
000000000000d3ef	movq	-0x10(%rbp), %rax
000000000000d3f3	movl	$0x2, 0x4a8(%rax)
000000000000d3fd	jmp	0xd447
000000000000d402	movq	-0x10(%rbp), %rax
000000000000d406	movl	$0x5, 0x4a8(%rax)
000000000000d410	jmp	0xd447
000000000000d415	movq	-0x10(%rbp), %rax
000000000000d419	movl	$0x4, 0x4a8(%rax)
000000000000d423	jmp	0xd447
000000000000d428	leaq	0x54ce4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d42f	leaq	0x53d70(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d436	leaq	0x53fcf(%rip), %rcx ## literal pool for: "0"
000000000000d43d	movl	$0xbf4, %edx
000000000000d442	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d447	jmp	0xd529
000000000000d44c	jmp	0xd529
000000000000d451	movq	-0x10(%rbp), %rax
000000000000d455	movzbl	0x574(%rax), %ecx
000000000000d45c	movl	%ecx, %eax
000000000000d45e	movq	%rax, %rdx
000000000000d461	subq	$0x7, %rdx
000000000000d465	movq	%rax, -0x128(%rbp)
000000000000d46c	movq	%rdx, -0x130(%rbp)
000000000000d473	ja	0xd4e1
000000000000d479	leaq	0x208(%rip), %rax
000000000000d480	movq	-0x128(%rbp), %rcx
000000000000d487	movslq	(%rax,%rcx,4), %rdx
000000000000d48b	addq	%rax, %rdx
000000000000d48e	jmpq	*%rdx
000000000000d490	jmp	0xd500
000000000000d495	movq	-0x10(%rbp), %rax
000000000000d499	movl	$0x3, 0x4a8(%rax)
000000000000d4a3	jmp	0xd500
000000000000d4a8	movq	-0x10(%rbp), %rax
000000000000d4ac	movl	$0x2, 0x4a8(%rax)
000000000000d4b6	jmp	0xd500
000000000000d4bb	movq	-0x10(%rbp), %rax
000000000000d4bf	movl	$0x5, 0x4a8(%rax)
000000000000d4c9	jmp	0xd500
000000000000d4ce	movq	-0x10(%rbp), %rax
000000000000d4d2	movl	$0x4, 0x4a8(%rax)
000000000000d4dc	jmp	0xd500
000000000000d4e1	leaq	0x54c2b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d4e8	leaq	0x53cb7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d4ef	leaq	0x53f16(%rip), %rcx ## literal pool for: "0"
000000000000d4f6	movl	$0xc0d, %edx
000000000000d4fb	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d500	jmp	0xd529
000000000000d505	jmp	0xd529
000000000000d50a	leaq	0x54c02(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d511	leaq	0x53c8e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d518	leaq	0x53eed(%rip), %rcx ## literal pool for: "0"
000000000000d51f	movl	$0xc14, %edx
000000000000d524	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d529	movq	-0x10(%rbp), %rax
000000000000d52d	movzbl	0x578(%rax), %ecx
000000000000d534	cmpl	$0x3, %ecx
000000000000d537	je	0xd55c
000000000000d53d	movq	-0x10(%rbp), %rax
000000000000d541	movzbl	0x573(%rax), %ecx
000000000000d548	cmpl	$0x0, %ecx
000000000000d54b	je	0xd55c
000000000000d551	movq	-0x10(%rbp), %rax
000000000000d555	movb	$0x1, 0x4ad(%rax)
000000000000d55c	movq	-0x10(%rbp), %rax
000000000000d560	movl	$0x2, 0x490(%rax)
000000000000d56a	movq	-0x10(%rbp), %rax
000000000000d56e	movzbl	0x576(%rax), %ecx
000000000000d575	addl	$0xf8, %ecx
000000000000d57b	movq	-0x10(%rbp), %rax
000000000000d57f	movl	%ecx, 0x494(%rax)
000000000000d585	jmp	0xd58f
000000000000d58a	jmp	0xd58f
000000000000d58f	addq	$0x130, %rsp
000000000000d596	popq	%rbp
000000000000d597	retq
000000000000d598	.byte 0x1f #bad opcode
000000000000d599	inb	$0xff, %al
000000000000d59b	decl	0x5bffffe4(%rdi)
000000000000d5a1	inl	$0xff, %eax
000000000000d5a3	jmpq	*-0x6e00000b(%rbx)
000000000000d5a9	idivb	%bh
000000000000d5ab	ljmpl	*-0x4000000a(%rax)
000000000000d5b1	idivb	%bh
000000000000d5b3	callq	*%rsi
000000000000d5b5	idivb	%bh
000000000000d5b7	callq	*-0x1(%rdi,%rsi,8)
000000000000d5bb	callq	*-0x1(%rdi,%rsi,8)
000000000000d5bf	callq	*-0x1(%rdi,%rsi,8)
000000000000d5c3	callq	*-0x1(%rdi,%rsi,8)
000000000000d5c7	lcalll	*-0x9(%rcx)
000000000000d5ca	.byte 0xff #bad opcode
000000000000d5cb	lcalll	*-0x9(%rcx)
000000000000d5ce	.byte 0xff #bad opcode
000000000000d5cf	lcalll	*-0x9(%rcx)
000000000000d5d2	.byte 0xff #bad opcode
000000000000d5d3	lcalll	*-0x9(%rcx)
000000000000d5d6	.byte 0xff #bad opcode
000000000000d5d7	callq	*-0x1(%rdi,%rsi,8)
000000000000d5db	callq	*-0x1(%rdi,%rsi,8)
000000000000d5df	jmpq	*-0x9(%rsi)
000000000000d5e2	.byte 0xff #bad opcode
000000000000d5e3	jmpq	*-0x9(%rsi)
000000000000d5e6	.byte 0xff #bad opcode
000000000000d5e7	jmpq	*-0x9(%rsi)
000000000000d5ea	.byte 0xff #bad opcode
000000000000d5eb	jmpq	*-0x8(%rsi)
000000000000d5ee	.byte 0xff #bad opcode
000000000000d5ef	jmpq	*%rsi
000000000000d5f1	idivl	%edi
000000000000d5f3	jmpq	*%rsi
000000000000d5f5	idivl	%edi
000000000000d5f7	jmpq	*%rsi
000000000000d5f9	idivl	%edi
000000000000d5fb	jmpq	*-0x8(%rsi)
000000000000d5fe	.byte 0xff #bad opcode
000000000000d5ff	jmpq	*-0x9(%rsi)
000000000000d602	.byte 0xff #bad opcode
000000000000d603	jmpq	*-0x8(%rsi)
000000000000d606	.byte 0xff #bad opcode
000000000000d607	jmpq	*%rsi
000000000000d609	idivl	%edi
000000000000d60b	jmpq	*-0x8(%rsi)
000000000000d60e	.byte 0xff #bad opcode
000000000000d60f	jmpq	*%rsi
000000000000d611	clc
000000000000d612	.byte 0xff #bad opcode
000000000000d613	ljmpl	*-0x19000007(%rdx)
000000000000d619	clc
000000000000d61a	.byte 0xff #bad opcode
000000000000d61b	ljmpl	*-0x65000007(%rdx)
000000000000d621	cli
000000000000d622	.byte 0xff #bad opcode
000000000000d623	lcalll	*-0x60000006(%rdx)
000000000000d629	cli
000000000000d62a	.byte 0xff #bad opcode
000000000000d62b	.byte 0xff #bad opcode
000000000000d62c	movl	$0x9afffffa, %esp
000000000000d631	cli
000000000000d632	.byte 0xff #bad opcode
000000000000d633	lcalll	*-0x65000006(%rdx)
000000000000d639	cli
000000000000d63a	.byte 0xff #bad opcode
000000000000d63b	lcalll	*-0x1f000006(%rdx)
000000000000d641	cli
000000000000d642	.byte 0xff #bad opcode
000000000000d643	jmpq	*%rax
000000000000d645	cli
000000000000d646	.byte 0xff #bad opcode
000000000000d647	.byte 0xff #bad opcode
000000000000d648	std
000000000000d649	cli
000000000000d64a	.byte 0xff #bad opcode
000000000000d64b	.byte 0xff #bad opcode
000000000000d64c	std
000000000000d64d	cli
000000000000d64e	.byte 0xff #bad opcode
000000000000d64f	.byte 0xff #bad opcode
000000000000d650	std
000000000000d651	cli
000000000000d652	.byte 0xff #bad opcode
000000000000d653	incl	%esp
000000000000d655	cld
000000000000d656	.byte 0xff #bad opcode
000000000000d657	.byte 0xff #bad opcode
000000000000d658	.byte 0xea #bad opcode
000000000000d659	sti
000000000000d65a	.byte 0xff #bad opcode
000000000000d65b	.byte 0xff #bad opcode
000000000000d65c	.byte 0xea #bad opcode
000000000000d65d	sti
000000000000d65e	.byte 0xff #bad opcode
000000000000d65f	.byte 0xff #bad opcode
000000000000d660	.byte 0xea #bad opcode
000000000000d661	sti
000000000000d662	.byte 0xff #bad opcode
000000000000d663	incl	%esp
000000000000d665	cld
000000000000d666	.byte 0xff #bad opcode
000000000000d667	jmpq	*-0x3(%rbp)
000000000000d66a	.byte 0xff #bad opcode
000000000000d66b	ljmpl	*(%rsi,%rdi,8)
000000000000d66e	.byte 0xff #bad opcode
000000000000d66f	pushq	(%rcx)
000000000000d671	.byte 0xfe #bad opcode
000000000000d672	.byte 0xff #bad opcode
000000000000d673	jmpq	*%rbp
000000000000d675	.byte 0xfe #bad opcode
000000000000d676	.byte 0xff #bad opcode
000000000000d677	jmpq	*-0x3(%rbp)
000000000000d67a	.byte 0xff #bad opcode
000000000000d67b	ljmpl	*(%rsi,%rdi,8)
000000000000d67e	.byte 0xff #bad opcode
000000000000d67f	pushq	(%rcx)
000000000000d681	.byte 0xfe #bad opcode
000000000000d682	.byte 0xff #bad opcode
000000000000d683	jmpq	*%rbp
000000000000d685	.byte 0xfe #bad opcode
000000000000d686	.byte 0xff #bad opcode
000000000000d687	decl	(%rax)
000000000000d689	.byte 0xfe #bad opcode
000000000000d68a	.byte 0xff #bad opcode
000000000000d68b	lcalll	*-0x2(%rcx)
000000000000d68e	.byte 0xff #bad opcode
000000000000d68f	lcalll	*-0x2(%rcx)
000000000000d692	.byte 0xff #bad opcode
000000000000d693	lcalll	*-0x2(%rcx)
000000000000d696	.byte 0xff #bad opcode
000000000000d697	decl	0x20fffffe(%rip)
000000000000d69d	.byte 0xfe #bad opcode
000000000000d69e	.byte 0xff #bad opcode
000000000000d69f	pushq	(%rbx)
000000000000d6a1	.byte 0xfe #bad opcode
000000000000d6a2	.byte 0xff #bad opcode
000000000000d6a3	incl	-0x2(%rsi)
000000000000d6a6	.byte 0xff #bad opcode
000000000000d6a7	lcalll	*-0x27f0001(,%rdi,8)
000000000000d6ae	.byte 0xff #bad opcode
000000000000d6af	incl	0x21fffffd(%rax)
000000000000d6b5	std
000000000000d6b6	.byte 0xff #bad opcode
000000000000d6b7	pushq	-0x2b80001(,%rdi,8)
000000000000d6be	.byte 0xff #bad opcode
000000000000d6bf	lcalll	*-0x3(%rdx)
000000000000d6c2	.byte 0xff #bad opcode
000000000000d6c3	ljmpl	*-0x3(%rbp)
000000000000d6c6	.byte 0xff #bad opcode
000000000000d6c7	incl	-0x79000005(%rcx)
000000000000d6cd	sti
000000000000d6ce	.byte 0xff #bad opcode
000000000000d6cf	lcalll	*-0x7000005(%rcx)
000000000000d6d5	sti
000000000000d6d6	.byte 0xff #bad opcode
000000000000d6d7	ljmpl	*-0x4400001(%rbx,%rdi,8)
000000000000d6de	.byte 0xff #bad opcode
000000000000d6df	callq	*%rdx
000000000000d6e1	sti
000000000000d6e2	.byte 0xff #bad opcode
000000000000d6e3	jmpq	*%rbp
000000000000d6e5	sti
000000000000d6e6	.byte 0xff #bad opcode
000000000000d6e7	pushq	-0x1(%rdx,%rdi,8)
000000000000d6eb	.byte 0xff #bad opcode
000000000000d6ec	jns	0xd6e8
000000000000d6ee	.byte 0xff #bad opcode
000000000000d6ef	decl	-0x5600001(%rdx,%rdi,8)
000000000000d6f6	.byte 0xff #bad opcode
000000000000d6f7	pushq	-0x3a000006(%rdx)
000000000000d6fd	cli
000000000000d6fe	.byte 0xff #bad opcode
000000000000d6ff	.byte 0xff #bad opcode
000000000000d700	fdivr	%st(2)
000000000000d702	.byte 0xff #bad opcode
000000000000d703	.byte 0xff #bad opcode
000000000000d704	jmp	0xd700
000000000000d706	.byte 0xff #bad opcode
000000000000d707	.byte 0xff #bad opcode
000000000000d708	outb	%al, $0xff
000000000000d70b	incl	-0x18(%rdi)
000000000000d70e	.byte 0xff #bad opcode
000000000000d70f	.byte 0xff #bad opcode
000000000000d710	fucomp	%st(1)
000000000000d712	.byte 0xff #bad opcode
000000000000d713	jmpq	*%rbp
000000000000d715	.byte 0xea #bad opcode
000000000000d716	.byte 0xff #bad opcode
000000000000d717	jmpq	*-0x15(%rax)
000000000000d71a	.byte 0xff #bad opcode
000000000000d71b	callq	*%rax
000000000000d71d	jmp	0xd71e
000000000000d71f	.byte 0xff #bad opcode
000000000000d720	sti
000000000000d721	jmp	0xffffffffec6ed725
000000000000d726	.byte 0xff #bad opcode
000000000000d727	.byte 0xff #bad opcode
000000000000d728	fsubrp	%st(5)
000000000000d72a	.byte 0xff #bad opcode
000000000000d72b	jmpq	*-0x6e000011(%rsi)
000000000000d731	lock
000000000000d732	.byte 0xff #bad opcode
000000000000d733	ljmpl	*-0x32000010(%rdi)
000000000000d739	lock
000000000000d73a	.byte 0xff #bad opcode
000000000000d73b	.byte 0xff #bad opcode
000000000000d73c	jmp	0xd72e
000000000000d73e	.byte 0xff #bad opcode
000000000000d73f	.byte 0xff #bad opcode
000000000000d740	clc
000000000000d741	lock
000000000000d742	.byte 0xff #bad opcode
000000000000d743	jmpq	*0x2e(%rsi)
000000000000d746	nopl	(%rax,%rax)
000000000000d74e	nop
_ZydisDecodeOperands:
000000000000d750	pushq	%rbp
000000000000d751	movq	%rsp, %rbp
000000000000d754	subq	$0x180, %rsp
000000000000d75b	movq	%rdi, -0x10(%rbp)
000000000000d75f	movq	%rsi, -0x18(%rbp)
000000000000d763	movq	%rdx, -0x20(%rbp)
000000000000d767	cmpq	$0x0, -0x10(%rbp)
000000000000d76c	setne	%al
000000000000d76f	xorb	$-0x1, %al
000000000000d771	andb	$0x1, %al
000000000000d773	movzbl	%al, %ecx
000000000000d776	movslq	%ecx, %rdx
000000000000d779	cmpq	$0x0, %rdx
000000000000d77d	je	0xd7a2
000000000000d783	leaq	0x54d37(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000d78a	leaq	0x53a15(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d791	leaq	0x53a43(%rip), %rcx ## literal pool for: "context"
000000000000d798	movl	$0x6e1, %edx
000000000000d79d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d7a2	jmp	0xd7a7
000000000000d7a7	cmpq	$0x0, -0x18(%rbp)
000000000000d7ac	setne	%al
000000000000d7af	xorb	$-0x1, %al
000000000000d7b1	andb	$0x1, %al
000000000000d7b3	movzbl	%al, %ecx
000000000000d7b6	movslq	%ecx, %rdx
000000000000d7b9	cmpq	$0x0, %rdx
000000000000d7bd	je	0xd7e2
000000000000d7c3	leaq	0x54cf7(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000d7ca	leaq	0x539d5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d7d1	leaq	0x53a0b(%rip), %rcx ## literal pool for: "instruction"
000000000000d7d8	movl	$0x6e2, %edx
000000000000d7dd	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d7e2	jmp	0xd7e7
000000000000d7e7	cmpq	$0x0, -0x20(%rbp)
000000000000d7ec	setne	%al
000000000000d7ef	xorb	$-0x1, %al
000000000000d7f1	andb	$0x1, %al
000000000000d7f3	movzbl	%al, %ecx
000000000000d7f6	movslq	%ecx, %rdx
000000000000d7f9	cmpq	$0x0, %rdx
000000000000d7fd	je	0xd822
000000000000d803	leaq	0x54cb7(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000d80a	leaq	0x53995(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d811	leaq	0x541f0(%rip), %rcx ## literal pool for: "definition"
000000000000d818	movl	$0x6e3, %edx
000000000000d81d	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d822	jmp	0xd827
000000000000d827	movb	$0x0, -0x21(%rbp)
000000000000d82b	movq	-0x20(%rbp), %rdi
000000000000d82f	leaq	-0x30(%rbp), %rsi
000000000000d833	callq	_ZydisGetOperandDefinitions
000000000000d838	movq	-0x18(%rbp), %rsi
000000000000d83c	movb	%al, 0x18(%rsi)
000000000000d83f	movq	-0x18(%rbp), %rsi
000000000000d843	movzbl	0x18(%rsi), %ecx
000000000000d847	movl	%ecx, %esi
000000000000d849	cmpq	$0xa, %rsi
000000000000d84d	setbe	%al
000000000000d850	xorb	$-0x1, %al
000000000000d852	andb	$0x1, %al
000000000000d854	movzbl	%al, %ecx
000000000000d857	movslq	%ecx, %rsi
000000000000d85a	cmpq	$0x0, %rsi
000000000000d85e	je	0xd883
000000000000d864	leaq	0x54c56(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000d86b	leaq	0x53934(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d872	leaq	0x54c5c(%rip), %rcx ## literal pool for: "instruction->operand_count <= (sizeof(instruction->operands) / sizeof((instruction->operands)[0]))"
000000000000d879	movl	$0x6e9, %edx
000000000000d87e	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d883	jmp	0xd888
000000000000d888	movb	$0x0, -0x31(%rbp)
000000000000d88c	movzbl	-0x31(%rbp), %eax
000000000000d890	movq	-0x18(%rbp), %rcx
000000000000d894	movzbl	0x18(%rcx), %edx
000000000000d898	cmpl	%edx, %eax
000000000000d89a	jge	0xef38
000000000000d8a0	movl	$0x0, -0x38(%rbp)
000000000000d8a7	movb	-0x31(%rbp), %al
000000000000d8aa	movq	-0x18(%rbp), %rcx
000000000000d8ae	addq	$0x20, %rcx
000000000000d8b2	movzbl	-0x31(%rbp), %edx
000000000000d8b6	movl	%edx, %esi
000000000000d8b8	imulq	$0x68, %rsi, %rsi
000000000000d8bc	addq	%rsi, %rcx
000000000000d8bf	movb	%al, (%rcx)
000000000000d8c1	movq	-0x30(%rbp), %rcx
000000000000d8c5	movw	(%rcx), %di
000000000000d8c8	shrw	$0x6, %di
000000000000d8cc	andw	$0x3, %di
000000000000d8d0	movb	%dil, %al
000000000000d8d3	movzbl	%al, %edx
000000000000d8d6	movq	-0x18(%rbp), %rcx
000000000000d8da	addq	$0x20, %rcx
000000000000d8de	movzbl	-0x31(%rbp), %r8d
000000000000d8e3	movl	%r8d, %esi
000000000000d8e6	imulq	$0x68, %rsi, %rsi
000000000000d8ea	addq	%rsi, %rcx
000000000000d8ed	movl	%edx, 0x8(%rcx)
000000000000d8f0	movq	-0x30(%rbp), %rcx
000000000000d8f4	movw	(%rcx), %di
000000000000d8f7	shrw	$0x8, %di
000000000000d8fb	andw	$0xf, %di
000000000000d8ff	movb	%dil, %al
000000000000d902	movq	-0x18(%rbp), %rcx
000000000000d906	addq	$0x20, %rcx
000000000000d90a	movzbl	-0x31(%rbp), %edx
000000000000d90e	movl	%edx, %esi
000000000000d910	imulq	$0x68, %rsi, %rsi
000000000000d914	addq	%rsi, %rcx
000000000000d917	movb	%al, 0xc(%rcx)
000000000000d91a	movq	-0x30(%rbp), %rcx
000000000000d91e	movw	(%rcx), %di
000000000000d921	shrw	$0x8, %di
000000000000d925	andw	$0xf, %di
000000000000d929	movb	%dil, %al
000000000000d92c	movzbl	%al, %edx
000000000000d92f	andl	$0x1, %edx
000000000000d932	andl	$0x4, %edx
000000000000d935	cmpl	$0x0, %edx
000000000000d938	movb	$0x1, %al
000000000000d93a	movb	%al, -0x69(%rbp)
000000000000d93d	je	0xd97c
000000000000d943	movq	-0x30(%rbp), %rax
000000000000d947	movw	(%rax), %cx
000000000000d94a	shrw	$0x8, %cx
000000000000d94e	andw	$0xf, %cx
000000000000d952	movb	%cl, %dl
000000000000d954	movzbl	%dl, %esi
000000000000d957	andl	$0x1, %esi
000000000000d95a	movq	-0x30(%rbp), %rax
000000000000d95e	movw	(%rax), %cx
000000000000d961	shrw	$0x8, %cx
000000000000d965	andw	$0xf, %cx
000000000000d969	movb	%cl, %dl
000000000000d96b	movzbl	%dl, %edi
000000000000d96e	andl	$0x4, %edi
000000000000d971	xorl	%edi, %esi
000000000000d973	cmpl	$0x0, %esi
000000000000d976	setne	%dl
000000000000d979	movb	%dl, -0x69(%rbp)
000000000000d97c	movb	-0x69(%rbp), %al
000000000000d97f	xorb	$-0x1, %al
000000000000d981	andb	$0x1, %al
000000000000d983	movzbl	%al, %ecx
000000000000d986	movslq	%ecx, %rdx
000000000000d989	cmpq	$0x0, %rdx
000000000000d98d	je	0xd9b2
000000000000d993	leaq	0x54b27(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000d99a	leaq	0x53805(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d9a1	leaq	0x54b90(%rip), %rcx ## literal pool for: "!(operand->actions & ZYDIS_OPERAND_ACTION_READ & ZYDIS_OPERAND_ACTION_CONDREAD) || (operand->actions & ZYDIS_OPERAND_ACTION_READ) ^ (operand->actions & ZYDIS_OPERAND_ACTION_CONDREAD)"
000000000000d9a8	movl	$0x6f5, %edx
000000000000d9ad	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000d9b2	jmp	0xd9b7
000000000000d9b7	movq	-0x30(%rbp), %rax
000000000000d9bb	movw	(%rax), %cx
000000000000d9be	shrw	$0x8, %cx
000000000000d9c2	andw	$0xf, %cx
000000000000d9c6	movb	%cl, %dl
000000000000d9c8	movzbl	%dl, %esi
000000000000d9cb	andl	$0x2, %esi
000000000000d9ce	andl	$0x8, %esi
000000000000d9d1	cmpl	$0x0, %esi
000000000000d9d4	movb	$0x1, %dl
000000000000d9d6	movb	%dl, -0x6a(%rbp)
000000000000d9d9	je	0xda18
000000000000d9df	movq	-0x30(%rbp), %rax
000000000000d9e3	movw	(%rax), %cx
000000000000d9e6	shrw	$0x8, %cx
000000000000d9ea	andw	$0xf, %cx
000000000000d9ee	movb	%cl, %dl
000000000000d9f0	movzbl	%dl, %esi
000000000000d9f3	andl	$0x2, %esi
000000000000d9f6	movq	-0x30(%rbp), %rax
000000000000d9fa	movw	(%rax), %cx
000000000000d9fd	shrw	$0x8, %cx
000000000000da01	andw	$0xf, %cx
000000000000da05	movb	%cl, %dl
000000000000da07	movzbl	%dl, %edi
000000000000da0a	andl	$0x8, %edi
000000000000da0d	xorl	%edi, %esi
000000000000da0f	cmpl	$0x0, %esi
000000000000da12	setne	%dl
000000000000da15	movb	%dl, -0x6a(%rbp)
000000000000da18	movb	-0x6a(%rbp), %al
000000000000da1b	xorb	$-0x1, %al
000000000000da1d	andb	$0x1, %al
000000000000da1f	movzbl	%al, %ecx
000000000000da22	movslq	%ecx, %rdx
000000000000da25	cmpq	$0x0, %rdx
000000000000da29	je	0xda4e
000000000000da2f	leaq	0x54a8b(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000da36	leaq	0x53769(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000da3d	leaq	0x54bab(%rip), %rcx ## literal pool for: "!(operand->actions & ZYDIS_OPERAND_ACTION_WRITE & ZYDIS_OPERAND_ACTION_CONDWRITE) || (operand->actions & ZYDIS_OPERAND_ACTION_WRITE) ^ (operand->actions & ZYDIS_OPERAND_ACTION_CONDWRITE)"
000000000000da44	movl	$0x6f9, %edx
000000000000da49	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000da4e	jmp	0xda53
000000000000da53	movq	-0x30(%rbp), %rax
000000000000da57	movzwl	(%rax), %ecx
000000000000da5a	andl	$0x3f, %ecx
000000000000da5d	movb	%cl, %dl
000000000000da5f	subb	$0x1, %dl
000000000000da62	movl	%ecx, -0x70(%rbp)
000000000000da65	movb	%dl, -0x71(%rbp)
000000000000da68	je	0xda9b
000000000000da6e	jmp	0xda73
000000000000da73	movl	-0x70(%rbp), %eax
000000000000da76	subl	$0x2, %eax
000000000000da79	movl	%eax, -0x78(%rbp)
000000000000da7c	je	0xdac9
000000000000da82	jmp	0xda87
000000000000da87	movl	-0x70(%rbp), %eax
000000000000da8a	subl	$0x3, %eax
000000000000da8d	movl	%eax, -0x7c(%rbp)
000000000000da90	je	0xdaf7
000000000000da96	jmp	0xdb82
000000000000da9b	movq	-0x10(%rbp), %rdi
000000000000da9f	movq	-0x18(%rbp), %rsi
000000000000daa3	movq	-0x18(%rbp), %rax
000000000000daa7	addq	$0x20, %rax
000000000000daab	movzbl	-0x31(%rbp), %ecx
000000000000daaf	movl	%ecx, %edx
000000000000dab1	imulq	$0x68, %rdx, %rdx
000000000000dab5	addq	%rdx, %rax
000000000000dab8	movq	-0x30(%rbp), %rcx
000000000000dabc	movq	%rax, %rdx
000000000000dabf	callq	_ZydisDecodeOperandImplicitRegister
000000000000dac4	jmp	0xdb87
000000000000dac9	movq	-0x10(%rbp), %rdi
000000000000dacd	movq	-0x18(%rbp), %rsi
000000000000dad1	movq	-0x18(%rbp), %rax
000000000000dad5	addq	$0x20, %rax
000000000000dad9	movzbl	-0x31(%rbp), %ecx
000000000000dadd	movl	%ecx, %edx
000000000000dadf	imulq	$0x68, %rdx, %rdx
000000000000dae3	addq	%rdx, %rax
000000000000dae6	movq	-0x30(%rbp), %rcx
000000000000daea	movq	%rax, %rdx
000000000000daed	callq	_ZydisDecodeOperandImplicitMemory
000000000000daf2	jmp	0xdb87
000000000000daf7	movq	-0x18(%rbp), %rax
000000000000dafb	addq	$0x20, %rax
000000000000daff	movzbl	-0x31(%rbp), %ecx
000000000000db03	movl	%ecx, %edx
000000000000db05	imulq	$0x68, %rdx, %rdx
000000000000db09	addq	%rdx, %rax
000000000000db0c	movl	$0x4, 0x4(%rax)
000000000000db13	movq	-0x18(%rbp), %rax
000000000000db17	addq	$0x20, %rax
000000000000db1b	movzbl	-0x31(%rbp), %ecx
000000000000db1f	movl	%ecx, %edx
000000000000db21	imulq	$0x68, %rdx, %rdx
000000000000db25	addq	%rdx, %rax
000000000000db28	movw	$0x8, 0x14(%rax)
000000000000db2e	movq	-0x18(%rbp), %rax
000000000000db32	addq	$0x20, %rax
000000000000db36	movzbl	-0x31(%rbp), %ecx
000000000000db3a	movl	%ecx, %edx
000000000000db3c	imulq	$0x68, %rdx, %rdx
000000000000db40	addq	%rdx, %rax
000000000000db43	movq	$0x1, 0x60(%rax)
000000000000db4b	movq	-0x18(%rbp), %rax
000000000000db4f	addq	$0x20, %rax
000000000000db53	movzbl	-0x31(%rbp), %ecx
000000000000db57	movl	%ecx, %edx
000000000000db59	imulq	$0x68, %rdx, %rdx
000000000000db5d	addq	%rdx, %rax
000000000000db60	movb	$0x0, 0x58(%rax)
000000000000db64	movq	-0x18(%rbp), %rax
000000000000db68	addq	$0x20, %rax
000000000000db6c	movzbl	-0x31(%rbp), %ecx
000000000000db70	movl	%ecx, %edx
000000000000db72	imulq	$0x68, %rdx, %rdx
000000000000db76	addq	%rdx, %rax
000000000000db79	movb	$0x0, 0x59(%rax)
000000000000db7d	jmp	0xdb87
000000000000db82	jmp	0xdb87
000000000000db87	movq	-0x18(%rbp), %rax
000000000000db8b	addq	$0x20, %rax
000000000000db8f	movzbl	-0x31(%rbp), %ecx
000000000000db93	movl	%ecx, %edx
000000000000db95	imulq	$0x68, %rdx, %rdx
000000000000db99	addq	%rdx, %rax
000000000000db9c	cmpl	$0x0, 0x4(%rax)
000000000000dba0	je	0xdbab
000000000000dba6	jmp	0xec2a
000000000000dbab	movq	-0x30(%rbp), %rax
000000000000dbaf	movzbl	0x9(%rax), %ecx
000000000000dbb3	andl	$0x3f, %ecx
000000000000dbb6	movq	-0x18(%rbp), %rax
000000000000dbba	movzbl	-0x31(%rbp), %edx
000000000000dbbe	movl	%edx, %esi
000000000000dbc0	imulq	$0x68, %rsi, %rsi
000000000000dbc4	movl	%ecx, 0x30(%rax,%rsi)
000000000000dbc8	movq	-0x30(%rbp), %rax
000000000000dbcc	movzwl	(%rax), %ecx
000000000000dbcf	andl	$0x3f, %ecx
000000000000dbd2	addl	$-0x4, %ecx
000000000000dbd5	movl	%ecx, %eax
000000000000dbd7	subl	$0x12, %ecx
000000000000dbda	movq	%rax, -0x88(%rbp)
000000000000dbe1	movl	%ecx, -0x8c(%rbp)
000000000000dbe7	ja	0xdfcf
000000000000dbed	leaq	0x1430(%rip), %rax
000000000000dbf4	movq	-0x88(%rbp), %rcx
000000000000dbfb	movslq	(%rax,%rcx,4), %rdx
000000000000dbff	addq	%rax, %rdx
000000000000dc02	jmpq	*%rdx
000000000000dc04	movl	$0x1, -0x38(%rbp)
000000000000dc0b	jmp	0xdfd4
000000000000dc10	movl	$0x2, -0x38(%rbp)
000000000000dc17	jmp	0xdfd4
000000000000dc1c	movl	$0x3, -0x38(%rbp)
000000000000dc23	jmp	0xdfd4
000000000000dc28	movl	$0x4, -0x38(%rbp)
000000000000dc2f	jmp	0xdfd4
000000000000dc34	movq	-0x18(%rbp), %rax
000000000000dc38	movzbl	0x16(%rax), %ecx
000000000000dc3c	cmpl	$0x10, %ecx
000000000000dc3f	movb	$0x1, %dl
000000000000dc41	movb	%dl, -0x8d(%rbp)
000000000000dc47	je	0xdc7a
000000000000dc4d	movq	-0x18(%rbp), %rax
000000000000dc51	movzbl	0x16(%rax), %ecx
000000000000dc55	cmpl	$0x20, %ecx
000000000000dc58	movb	$0x1, %dl
000000000000dc5a	movb	%dl, -0x8d(%rbp)
000000000000dc60	je	0xdc7a
000000000000dc66	movq	-0x18(%rbp), %rax
000000000000dc6a	movzbl	0x16(%rax), %ecx
000000000000dc6e	cmpl	$0x40, %ecx
000000000000dc71	sete	%dl
000000000000dc74	movb	%dl, -0x8d(%rbp)
000000000000dc7a	movb	-0x8d(%rbp), %al
000000000000dc80	xorb	$-0x1, %al
000000000000dc82	andb	$0x1, %al
000000000000dc84	movzbl	%al, %ecx
000000000000dc87	movslq	%ecx, %rdx
000000000000dc8a	cmpq	$0x0, %rdx
000000000000dc8e	je	0xdcb3
000000000000dc94	leaq	0x54826(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dc9b	leaq	0x53504(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dca2	leaq	0x54a01(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000dca9	movl	$0x728, %edx
000000000000dcae	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000dcb3	jmp	0xdcb8
000000000000dcb8	movq	-0x18(%rbp), %rax
000000000000dcbc	movzbl	0x16(%rax), %ecx
000000000000dcc0	cmpl	$0x10, %ecx
000000000000dcc3	jne	0xdcd9
000000000000dcc9	movl	$0x2, %eax
000000000000dcce	movl	%eax, -0x94(%rbp)
000000000000dcd4	jmp	0xdcf7
000000000000dcd9	movq	-0x18(%rbp), %rax
000000000000dcdd	movzbl	0x16(%rax), %ecx
000000000000dce1	cmpl	$0x20, %ecx
000000000000dce4	movl	$0x3, %ecx
000000000000dce9	movl	$0x4, %edx
000000000000dcee	cmovel	%ecx, %edx
000000000000dcf1	movl	%edx, -0x94(%rbp)
000000000000dcf7	movl	-0x94(%rbp), %eax
000000000000dcfd	movl	%eax, -0x38(%rbp)
000000000000dd00	jmp	0xdfd4
000000000000dd05	movq	-0x18(%rbp), %rax
000000000000dd09	movzbl	0x16(%rax), %ecx
000000000000dd0d	cmpl	$0x10, %ecx
000000000000dd10	movb	$0x1, %dl
000000000000dd12	movb	%dl, -0x95(%rbp)
000000000000dd18	je	0xdd4b
000000000000dd1e	movq	-0x18(%rbp), %rax
000000000000dd22	movzbl	0x16(%rax), %ecx
000000000000dd26	cmpl	$0x20, %ecx
000000000000dd29	movb	$0x1, %dl
000000000000dd2b	movb	%dl, -0x95(%rbp)
000000000000dd31	je	0xdd4b
000000000000dd37	movq	-0x18(%rbp), %rax
000000000000dd3b	movzbl	0x16(%rax), %ecx
000000000000dd3f	cmpl	$0x40, %ecx
000000000000dd42	sete	%dl
000000000000dd45	movb	%dl, -0x95(%rbp)
000000000000dd4b	movb	-0x95(%rbp), %al
000000000000dd51	xorb	$-0x1, %al
000000000000dd53	andb	$0x1, %al
000000000000dd55	movzbl	%al, %ecx
000000000000dd58	movslq	%ecx, %rdx
000000000000dd5b	cmpq	$0x0, %rdx
000000000000dd5f	je	0xdd84
000000000000dd65	leaq	0x54755(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dd6c	leaq	0x53433(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dd73	leaq	0x54930(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000dd7a	movl	$0x72f, %edx
000000000000dd7f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000dd84	jmp	0xdd89
000000000000dd89	movq	-0x18(%rbp), %rax
000000000000dd8d	movzbl	0x16(%rax), %ecx
000000000000dd91	cmpl	$0x10, %ecx
000000000000dd94	jne	0xddaa
000000000000dd9a	movl	$0x3, %eax
000000000000dd9f	movl	%eax, -0x9c(%rbp)
000000000000dda5	jmp	0xddc8
000000000000ddaa	movq	-0x18(%rbp), %rax
000000000000ddae	movzbl	0x16(%rax), %ecx
000000000000ddb2	cmpl	$0x20, %ecx
000000000000ddb5	movl	$0x3, %ecx
000000000000ddba	movl	$0x4, %edx
000000000000ddbf	cmovel	%ecx, %edx
000000000000ddc2	movl	%edx, -0x9c(%rbp)
000000000000ddc8	movl	-0x9c(%rbp), %eax
000000000000ddce	movl	%eax, -0x38(%rbp)
000000000000ddd1	jmp	0xdfd4
000000000000ddd6	movq	-0x18(%rbp), %rax
000000000000ddda	movzbl	0x16(%rax), %ecx
000000000000ddde	cmpl	$0x10, %ecx
000000000000dde1	movb	$0x1, %dl
000000000000dde3	movb	%dl, -0x9d(%rbp)
000000000000dde9	je	0xde1c
000000000000ddef	movq	-0x18(%rbp), %rax
000000000000ddf3	movzbl	0x16(%rax), %ecx
000000000000ddf7	cmpl	$0x20, %ecx
000000000000ddfa	movb	$0x1, %dl
000000000000ddfc	movb	%dl, -0x9d(%rbp)
000000000000de02	je	0xde1c
000000000000de08	movq	-0x18(%rbp), %rax
000000000000de0c	movzbl	0x16(%rax), %ecx
000000000000de10	cmpl	$0x40, %ecx
000000000000de13	sete	%dl
000000000000de16	movb	%dl, -0x9d(%rbp)
000000000000de1c	movb	-0x9d(%rbp), %al
000000000000de22	xorb	$-0x1, %al
000000000000de24	andb	$0x1, %al
000000000000de26	movzbl	%al, %ecx
000000000000de29	movslq	%ecx, %rdx
000000000000de2c	cmpq	$0x0, %rdx
000000000000de30	je	0xde55
000000000000de36	leaq	0x54684(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000de3d	leaq	0x53362(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000de44	leaq	0x5485f(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000de4b	movl	$0x736, %edx
000000000000de50	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000de55	jmp	0xde5a
000000000000de5a	movq	-0x18(%rbp), %rax
000000000000de5e	movzbl	0x16(%rax), %ecx
000000000000de62	cmpl	$0x10, %ecx
000000000000de65	movl	$0x2, %ecx
000000000000de6a	movl	$0x3, %edx
000000000000de6f	cmovel	%ecx, %edx
000000000000de72	movl	%edx, -0x38(%rbp)
000000000000de75	jmp	0xdfd4
000000000000de7a	movq	-0x18(%rbp), %rax
000000000000de7e	movzbl	0x17(%rax), %ecx
000000000000de82	cmpl	$0x10, %ecx
000000000000de85	movb	$0x1, %dl
000000000000de87	movb	%dl, -0x9e(%rbp)
000000000000de8d	je	0xdec0
000000000000de93	movq	-0x18(%rbp), %rax
000000000000de97	movzbl	0x17(%rax), %ecx
000000000000de9b	cmpl	$0x20, %ecx
000000000000de9e	movb	$0x1, %dl
000000000000dea0	movb	%dl, -0x9e(%rbp)
000000000000dea6	je	0xdec0
000000000000deac	movq	-0x18(%rbp), %rax
000000000000deb0	movzbl	0x17(%rax), %ecx
000000000000deb4	cmpl	$0x40, %ecx
000000000000deb7	sete	%dl
000000000000deba	movb	%dl, -0x9e(%rbp)
000000000000dec0	movb	-0x9e(%rbp), %al
000000000000dec6	xorb	$-0x1, %al
000000000000dec8	andb	$0x1, %al
000000000000deca	movzbl	%al, %ecx
000000000000decd	movslq	%ecx, %rdx
000000000000ded0	cmpq	$0x0, %rdx
000000000000ded4	je	0xdef9
000000000000deda	leaq	0x545e0(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dee1	leaq	0x532be(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dee8	leaq	0x5482a(%rip), %rcx ## literal pool for: "(instruction->address_width == 16) || (instruction->address_width == 32) || (instruction->address_width == 64)"
000000000000deef	movl	$0x73c, %edx
000000000000def4	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000def9	jmp	0xdefe
000000000000defe	movq	-0x18(%rbp), %rax
000000000000df02	movzbl	0x17(%rax), %ecx
000000000000df06	cmpl	$0x10, %ecx
000000000000df09	jne	0xdf1f
000000000000df0f	movl	$0x2, %eax
000000000000df14	movl	%eax, -0xa4(%rbp)
000000000000df1a	jmp	0xdf3d
000000000000df1f	movq	-0x18(%rbp), %rax
000000000000df23	movzbl	0x17(%rax), %ecx
000000000000df27	cmpl	$0x20, %ecx
000000000000df2a	movl	$0x3, %ecx
000000000000df2f	movl	$0x4, %edx
000000000000df34	cmovel	%ecx, %edx
000000000000df37	movl	%edx, -0xa4(%rbp)
000000000000df3d	movl	-0xa4(%rbp), %eax
000000000000df43	movl	%eax, -0x38(%rbp)
000000000000df46	jmp	0xdfd4
000000000000df4b	movl	$0x5, -0x38(%rbp)
000000000000df52	jmp	0xdfd4
000000000000df57	movl	$0x6, -0x38(%rbp)
000000000000df5e	jmp	0xdfd4
000000000000df63	movl	$0x7, -0x38(%rbp)
000000000000df6a	jmp	0xdfd4
000000000000df6f	movl	$0x8, -0x38(%rbp)
000000000000df76	jmp	0xdfd4
000000000000df7b	movl	$0x9, -0x38(%rbp)
000000000000df82	jmp	0xdfd4
000000000000df87	movl	$0xa, -0x38(%rbp)
000000000000df8e	jmp	0xdfd4
000000000000df93	movl	$0x12, -0x38(%rbp)
000000000000df9a	jmp	0xdfd4
000000000000df9f	movl	$0xd, -0x38(%rbp)
000000000000dfa6	jmp	0xdfd4
000000000000dfab	movl	$0xf, -0x38(%rbp)
000000000000dfb2	jmp	0xdfd4
000000000000dfb7	movl	$0x10, -0x38(%rbp)
000000000000dfbe	jmp	0xdfd4
000000000000dfc3	movl	$0x11, -0x38(%rbp)
000000000000dfca	jmp	0xdfd4
000000000000dfcf	jmp	0xdfd4
000000000000dfd4	cmpl	$0x0, -0x38(%rbp)
000000000000dfd8	je	0xe3d4
000000000000dfde	movq	-0x30(%rbp), %rax
000000000000dfe2	movzbl	0x9(%rax), %ecx
000000000000dfe6	andl	$0x3f, %ecx
000000000000dfe9	decl	%ecx
000000000000dfeb	movl	%ecx, %eax
000000000000dfed	subl	$0x5, %ecx
000000000000dff0	movq	%rax, -0xb0(%rbp)
000000000000dff7	movl	%ecx, -0xb4(%rbp)
000000000000dffd	ja	0xe3b0
000000000000e003	leaq	0x108e(%rip), %rax
000000000000e00a	movq	-0xb0(%rbp), %rcx
000000000000e011	movslq	(%rax,%rcx,4), %rdx
000000000000e015	addq	%rax, %rdx
000000000000e018	jmpq	*%rdx
000000000000e01a	jmp	0xe01f
000000000000e01f	movq	-0x18(%rbp), %rdi
000000000000e023	movq	-0x18(%rbp), %rax
000000000000e027	addq	$0x20, %rax
000000000000e02b	movzbl	-0x31(%rbp), %ecx
000000000000e02f	movl	%ecx, %edx
000000000000e031	imulq	$0x68, %rdx, %rdx
000000000000e035	addq	%rdx, %rax
000000000000e038	movl	-0x38(%rbp), %edx
000000000000e03b	movq	-0x10(%rbp), %rsi
000000000000e03f	movq	-0x18(%rbp), %r8
000000000000e043	movl	-0x38(%rbp), %ecx
000000000000e046	movq	%rdi, -0xc0(%rbp)
000000000000e04d	movq	%rsi, %rdi
000000000000e050	movq	%r8, %rsi
000000000000e053	movl	$0x2, %r9d
000000000000e059	movl	%edx, -0xc4(%rbp)
000000000000e05f	movl	%r9d, %edx
000000000000e062	movq	%rax, -0xd0(%rbp)
000000000000e069	callq	_ZydisCalcRegisterId
000000000000e06e	movq	-0xc0(%rbp), %rdi
000000000000e075	movq	-0xd0(%rbp), %rsi
000000000000e07c	movl	-0xc4(%rbp), %edx
000000000000e082	movzbl	%al, %ecx
000000000000e085	callq	_ZydisDecodeOperandRegister
000000000000e08a	movl	%eax, -0x3c(%rbp)
000000000000e08d	movl	-0x3c(%rbp), %eax
000000000000e090	andl	$0x80000000, %eax
000000000000e095	cmpl	$0x0, %eax
000000000000e098	je	0xe0a9
000000000000e09e	movl	-0x3c(%rbp), %eax
000000000000e0a1	movl	%eax, -0x4(%rbp)
000000000000e0a4	jmp	0xf015
000000000000e0a9	jmp	0xe0ae
000000000000e0ae	jmp	0xe3cf
000000000000e0b3	jmp	0xe0b8
000000000000e0b8	movq	-0x18(%rbp), %rdi
000000000000e0bc	movq	-0x18(%rbp), %rax
000000000000e0c0	addq	$0x20, %rax
000000000000e0c4	movzbl	-0x31(%rbp), %ecx
000000000000e0c8	movl	%ecx, %edx
000000000000e0ca	imulq	$0x68, %rdx, %rdx
000000000000e0ce	addq	%rdx, %rax
000000000000e0d1	movl	-0x38(%rbp), %edx
000000000000e0d4	movq	-0x10(%rbp), %rsi
000000000000e0d8	movq	-0x18(%rbp), %r8
000000000000e0dc	movl	-0x38(%rbp), %ecx
000000000000e0df	movq	%rdi, -0xd8(%rbp)
000000000000e0e6	movq	%rsi, %rdi
000000000000e0e9	movq	%r8, %rsi
000000000000e0ec	movl	$0x4, %r9d
000000000000e0f2	movl	%edx, -0xdc(%rbp)
000000000000e0f8	movl	%r9d, %edx
000000000000e0fb	movq	%rax, -0xe8(%rbp)
000000000000e102	callq	_ZydisCalcRegisterId
000000000000e107	movq	-0xd8(%rbp), %rdi
000000000000e10e	movq	-0xe8(%rbp), %rsi
000000000000e115	movl	-0xdc(%rbp), %edx
000000000000e11b	movzbl	%al, %ecx
000000000000e11e	callq	_ZydisDecodeOperandRegister
000000000000e123	movl	%eax, -0x40(%rbp)
000000000000e126	movl	-0x40(%rbp), %eax
000000000000e129	andl	$0x80000000, %eax
000000000000e12e	cmpl	$0x0, %eax
000000000000e131	je	0xe142
000000000000e137	movl	-0x40(%rbp), %eax
000000000000e13a	movl	%eax, -0x4(%rbp)
000000000000e13d	jmp	0xf015
000000000000e142	jmp	0xe147
000000000000e147	jmp	0xe3cf
000000000000e14c	jmp	0xe151
000000000000e151	movq	-0x18(%rbp), %rdi
000000000000e155	movq	-0x18(%rbp), %rax
000000000000e159	addq	$0x20, %rax
000000000000e15d	movzbl	-0x31(%rbp), %ecx
000000000000e161	movl	%ecx, %edx
000000000000e163	imulq	$0x68, %rdx, %rdx
000000000000e167	addq	%rdx, %rax
000000000000e16a	movl	-0x38(%rbp), %edx
000000000000e16d	movq	-0x10(%rbp), %rsi
000000000000e171	movq	-0x18(%rbp), %r8
000000000000e175	movl	-0x38(%rbp), %ecx
000000000000e178	movq	%rdi, -0xf0(%rbp)
000000000000e17f	movq	%rsi, %rdi
000000000000e182	movq	%r8, %rsi
000000000000e185	movl	$0x1, %r9d
000000000000e18b	movl	%edx, -0xf4(%rbp)
000000000000e191	movl	%r9d, %edx
000000000000e194	movq	%rax, -0x100(%rbp)
000000000000e19b	callq	_ZydisCalcRegisterId
000000000000e1a0	movq	-0xf0(%rbp), %rdi
000000000000e1a7	movq	-0x100(%rbp), %rsi
000000000000e1ae	movl	-0xf4(%rbp), %edx
000000000000e1b4	movzbl	%al, %ecx
000000000000e1b7	callq	_ZydisDecodeOperandRegister
000000000000e1bc	movl	%eax, -0x44(%rbp)
000000000000e1bf	movl	-0x44(%rbp), %eax
000000000000e1c2	andl	$0x80000000, %eax
000000000000e1c7	cmpl	$0x0, %eax
000000000000e1ca	je	0xe1db
000000000000e1d0	movl	-0x44(%rbp), %eax
000000000000e1d3	movl	%eax, -0x4(%rbp)
000000000000e1d6	jmp	0xf015
000000000000e1db	jmp	0xe1e0
000000000000e1e0	jmp	0xe3cf
000000000000e1e5	jmp	0xe1ea
000000000000e1ea	movq	-0x18(%rbp), %rdi
000000000000e1ee	movq	-0x18(%rbp), %rax
000000000000e1f2	addq	$0x20, %rax
000000000000e1f6	movzbl	-0x31(%rbp), %ecx
000000000000e1fa	movl	%ecx, %edx
000000000000e1fc	imulq	$0x68, %rdx, %rdx
000000000000e200	addq	%rdx, %rax
000000000000e203	movl	-0x38(%rbp), %edx
000000000000e206	movq	-0x10(%rbp), %rsi
000000000000e20a	movq	-0x18(%rbp), %r8
000000000000e20e	movl	-0x38(%rbp), %ecx
000000000000e211	movq	%rdi, -0x108(%rbp)
000000000000e218	movq	%rsi, %rdi
000000000000e21b	movq	%r8, %rsi
000000000000e21e	movl	$0x3, %r9d
000000000000e224	movl	%edx, -0x10c(%rbp)
000000000000e22a	movl	%r9d, %edx
000000000000e22d	movq	%rax, -0x118(%rbp)
000000000000e234	callq	_ZydisCalcRegisterId
000000000000e239	movq	-0x108(%rbp), %rdi
000000000000e240	movq	-0x118(%rbp), %rsi
000000000000e247	movl	-0x10c(%rbp), %edx
000000000000e24d	movzbl	%al, %ecx
000000000000e250	callq	_ZydisDecodeOperandRegister
000000000000e255	movl	%eax, -0x48(%rbp)
000000000000e258	movl	-0x48(%rbp), %eax
000000000000e25b	andl	$0x80000000, %eax
000000000000e260	cmpl	$0x0, %eax
000000000000e263	je	0xe274
000000000000e269	movl	-0x48(%rbp), %eax
000000000000e26c	movl	%eax, -0x4(%rbp)
000000000000e26f	jmp	0xf015
000000000000e274	jmp	0xe279
000000000000e279	jmp	0xe3cf
000000000000e27e	jmp	0xe283
000000000000e283	movq	-0x18(%rbp), %rdi
000000000000e287	movq	-0x18(%rbp), %rax
000000000000e28b	addq	$0x20, %rax
000000000000e28f	movzbl	-0x31(%rbp), %ecx
000000000000e293	movl	%ecx, %edx
000000000000e295	imulq	$0x68, %rdx, %rdx
000000000000e299	addq	%rdx, %rax
000000000000e29c	movl	-0x38(%rbp), %edx
000000000000e29f	movq	-0x10(%rbp), %rsi
000000000000e2a3	movq	-0x18(%rbp), %r8
000000000000e2a7	movl	-0x38(%rbp), %ecx
000000000000e2aa	movq	%rdi, -0x120(%rbp)
000000000000e2b1	movq	%rsi, %rdi
000000000000e2b4	movq	%r8, %rsi
000000000000e2b7	movl	$0x9, %r9d
000000000000e2bd	movl	%edx, -0x124(%rbp)
000000000000e2c3	movl	%r9d, %edx
000000000000e2c6	movq	%rax, -0x130(%rbp)
000000000000e2cd	callq	_ZydisCalcRegisterId
000000000000e2d2	movq	-0x120(%rbp), %rdi
000000000000e2d9	movq	-0x130(%rbp), %rsi
000000000000e2e0	movl	-0x124(%rbp), %edx
000000000000e2e6	movzbl	%al, %ecx
000000000000e2e9	callq	_ZydisDecodeOperandRegister
000000000000e2ee	movl	%eax, -0x4c(%rbp)
000000000000e2f1	movl	-0x4c(%rbp), %eax
000000000000e2f4	andl	$0x80000000, %eax
000000000000e2f9	cmpl	$0x0, %eax
000000000000e2fc	je	0xe30d
000000000000e302	movl	-0x4c(%rbp), %eax
000000000000e305	movl	%eax, -0x4(%rbp)
000000000000e308	jmp	0xf015
000000000000e30d	jmp	0xe312
000000000000e312	jmp	0xe3cf
000000000000e317	jmp	0xe31c
000000000000e31c	movq	-0x18(%rbp), %rdi
000000000000e320	movq	-0x18(%rbp), %rax
000000000000e324	addq	$0x20, %rax
000000000000e328	movzbl	-0x31(%rbp), %ecx
000000000000e32c	movl	%ecx, %edx
000000000000e32e	imulq	$0x68, %rdx, %rdx
000000000000e332	addq	%rdx, %rax
000000000000e335	movl	-0x38(%rbp), %edx
000000000000e338	movq	-0x10(%rbp), %rsi
000000000000e33c	movq	-0x18(%rbp), %r8
000000000000e340	movl	-0x38(%rbp), %ecx
000000000000e343	movq	%rdi, -0x138(%rbp)
000000000000e34a	movq	%rsi, %rdi
000000000000e34d	movq	%r8, %rsi
000000000000e350	movl	$0x8, %r9d
000000000000e356	movl	%edx, -0x13c(%rbp)
000000000000e35c	movl	%r9d, %edx
000000000000e35f	movq	%rax, -0x148(%rbp)
000000000000e366	callq	_ZydisCalcRegisterId
000000000000e36b	movq	-0x138(%rbp), %rdi
000000000000e372	movq	-0x148(%rbp), %rsi
000000000000e379	movl	-0x13c(%rbp), %edx
000000000000e37f	movzbl	%al, %ecx
000000000000e382	callq	_ZydisDecodeOperandRegister
000000000000e387	movl	%eax, -0x50(%rbp)
000000000000e38a	movl	-0x50(%rbp), %eax
000000000000e38d	andl	$0x80000000, %eax
000000000000e392	cmpl	$0x0, %eax
000000000000e395	je	0xe3a6
000000000000e39b	movl	-0x50(%rbp), %eax
000000000000e39e	movl	%eax, -0x4(%rbp)
000000000000e3a1	jmp	0xf015
000000000000e3a6	jmp	0xe3ab
000000000000e3ab	jmp	0xe3cf
000000000000e3b0	leaq	0x5410a(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e3b7	leaq	0x52de8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e3be	leaq	0x53047(%rip), %rcx ## literal pool for: "0"
000000000000e3c5	movl	$0x794, %edx
000000000000e3ca	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e3cf	jmp	0xec2a
000000000000e3d4	movq	-0x30(%rbp), %rax
000000000000e3d8	movzwl	(%rax), %ecx
000000000000e3db	andl	$0x3f, %ecx
000000000000e3de	addl	$-0x17, %ecx
000000000000e3e1	movl	%ecx, %eax
000000000000e3e3	subl	$0x9, %ecx
000000000000e3e6	movq	%rax, -0x150(%rbp)
000000000000e3ed	movl	%ecx, -0x154(%rbp)
000000000000e3f3	ja	0xe865
000000000000e3f9	leaq	0xc70(%rip), %rax
000000000000e400	movq	-0x150(%rbp), %rcx
000000000000e407	movslq	(%rax,%rcx,4), %rdx
000000000000e40b	addq	%rax, %rdx
000000000000e40e	jmpq	*%rdx
000000000000e410	jmp	0xe415
000000000000e415	xorl	%ecx, %ecx
000000000000e417	movq	-0x10(%rbp), %rdi
000000000000e41b	movq	-0x18(%rbp), %rsi
000000000000e41f	movq	-0x18(%rbp), %rax
000000000000e423	addq	$0x20, %rax
000000000000e427	movzbl	-0x31(%rbp), %edx
000000000000e42b	movl	%edx, %r8d
000000000000e42e	imulq	$0x68, %r8, %r8
000000000000e432	addq	%r8, %rax
000000000000e435	movq	%rax, %rdx
000000000000e438	callq	_ZydisDecodeOperandMemory
000000000000e43d	movl	%eax, -0x54(%rbp)
000000000000e440	movl	-0x54(%rbp), %eax
000000000000e443	andl	$0x80000000, %eax
000000000000e448	cmpl	$0x0, %eax
000000000000e44b	je	0xe45c
000000000000e451	movl	-0x54(%rbp), %eax
000000000000e454	movl	%eax, -0x4(%rbp)
000000000000e457	jmp	0xf015
000000000000e45c	jmp	0xe461
000000000000e461	jmp	0xe86a
000000000000e466	jmp	0xe46b
000000000000e46b	movq	-0x10(%rbp), %rdi
000000000000e46f	movq	-0x18(%rbp), %rsi
000000000000e473	movq	-0x18(%rbp), %rax
000000000000e477	addq	$0x20, %rax
000000000000e47b	movzbl	-0x31(%rbp), %ecx
000000000000e47f	movl	%ecx, %edx
000000000000e481	imulq	$0x68, %rdx, %rdx
000000000000e485	addq	%rdx, %rax
000000000000e488	movq	%rax, %rdx
000000000000e48b	movl	$0x7, %ecx
000000000000e490	callq	_ZydisDecodeOperandMemory
000000000000e495	movl	%eax, -0x58(%rbp)
000000000000e498	movl	-0x58(%rbp), %eax
000000000000e49b	andl	$0x80000000, %eax
000000000000e4a0	cmpl	$0x0, %eax
000000000000e4a3	je	0xe4b4
000000000000e4a9	movl	-0x58(%rbp), %eax
000000000000e4ac	movl	%eax, -0x4(%rbp)
000000000000e4af	jmp	0xf015
000000000000e4b4	jmp	0xe4b9
000000000000e4b9	jmp	0xe86a
000000000000e4be	jmp	0xe4c3
000000000000e4c3	movq	-0x10(%rbp), %rdi
000000000000e4c7	movq	-0x18(%rbp), %rsi
000000000000e4cb	movq	-0x18(%rbp), %rax
000000000000e4cf	addq	$0x20, %rax
000000000000e4d3	movzbl	-0x31(%rbp), %ecx
000000000000e4d7	movl	%ecx, %edx
000000000000e4d9	imulq	$0x68, %rdx, %rdx
000000000000e4dd	addq	%rdx, %rax
000000000000e4e0	movq	%rax, %rdx
000000000000e4e3	movl	$0x8, %ecx
000000000000e4e8	callq	_ZydisDecodeOperandMemory
000000000000e4ed	movl	%eax, -0x5c(%rbp)
000000000000e4f0	movl	-0x5c(%rbp), %eax
000000000000e4f3	andl	$0x80000000, %eax
000000000000e4f8	cmpl	$0x0, %eax
000000000000e4fb	je	0xe50c
000000000000e501	movl	-0x5c(%rbp), %eax
000000000000e504	movl	%eax, -0x4(%rbp)
000000000000e507	jmp	0xf015
000000000000e50c	jmp	0xe511
000000000000e511	jmp	0xe86a
000000000000e516	jmp	0xe51b
000000000000e51b	movq	-0x10(%rbp), %rdi
000000000000e51f	movq	-0x18(%rbp), %rsi
000000000000e523	movq	-0x18(%rbp), %rax
000000000000e527	addq	$0x20, %rax
000000000000e52b	movzbl	-0x31(%rbp), %ecx
000000000000e52f	movl	%ecx, %edx
000000000000e531	imulq	$0x68, %rdx, %rdx
000000000000e535	addq	%rdx, %rax
000000000000e538	movq	%rax, %rdx
000000000000e53b	movl	$0x9, %ecx
000000000000e540	callq	_ZydisDecodeOperandMemory
000000000000e545	movl	%eax, -0x60(%rbp)
000000000000e548	movl	-0x60(%rbp), %eax
000000000000e54b	andl	$0x80000000, %eax
000000000000e550	cmpl	$0x0, %eax
000000000000e553	je	0xe564
000000000000e559	movl	-0x60(%rbp), %eax
000000000000e55c	movl	%eax, -0x4(%rbp)
000000000000e55f	jmp	0xf015
000000000000e564	jmp	0xe569
000000000000e569	jmp	0xe86a
000000000000e56e	movq	-0x18(%rbp), %rax
000000000000e572	movzbl	0x5a0(%rax), %ecx
000000000000e579	cmpl	$0x10, %ecx
000000000000e57c	movb	$0x1, %dl
000000000000e57e	movb	%dl, -0x155(%rbp)
000000000000e584	je	0xe5a1
000000000000e58a	movq	-0x18(%rbp), %rax
000000000000e58e	movzbl	0x5a0(%rax), %ecx
000000000000e595	cmpl	$0x20, %ecx
000000000000e598	sete	%dl
000000000000e59b	movb	%dl, -0x155(%rbp)
000000000000e5a1	movb	-0x155(%rbp), %al
000000000000e5a7	xorb	$-0x1, %al
000000000000e5a9	andb	$0x1, %al
000000000000e5ab	movzbl	%al, %ecx
000000000000e5ae	movslq	%ecx, %rdx
000000000000e5b1	cmpq	$0x0, %rdx
000000000000e5b5	je	0xe5da
000000000000e5bb	leaq	0x53eff(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e5c2	leaq	0x52bdd(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e5c9	leaq	0x541b8(%rip), %rcx ## literal pool for: "(instruction->raw.imm[0].size == 16) || (instruction->raw.imm[0].size == 32)"
000000000000e5d0	movl	$0x7b3, %edx
000000000000e5d5	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e5da	jmp	0xe5df
000000000000e5df	movq	-0x18(%rbp), %rax
000000000000e5e3	movzbl	0x5b8(%rax), %ecx
000000000000e5ea	cmpl	$0x10, %ecx
000000000000e5ed	sete	%dl
000000000000e5f0	xorb	$-0x1, %dl
000000000000e5f3	andb	$0x1, %dl
000000000000e5f6	movzbl	%dl, %ecx
000000000000e5f9	movslq	%ecx, %rax
000000000000e5fc	cmpq	$0x0, %rax
000000000000e600	je	0xe625
000000000000e606	leaq	0x53eb4(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e60d	leaq	0x52b92(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e614	leaq	0x541ba(%rip), %rcx ## literal pool for: "instruction->raw.imm[1].size == 16"
000000000000e61b	movl	$0x7b4, %edx
000000000000e620	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e625	jmp	0xe62a
000000000000e62a	movq	-0x18(%rbp), %rax
000000000000e62e	addq	$0x20, %rax
000000000000e632	movzbl	-0x31(%rbp), %ecx
000000000000e636	movl	%ecx, %edx
000000000000e638	imulq	$0x68, %rdx, %rdx
000000000000e63c	addq	%rdx, %rax
000000000000e63f	movl	$0x3, 0x4(%rax)
000000000000e646	movq	-0x18(%rbp), %rax
000000000000e64a	movq	0x598(%rax), %rax
000000000000e651	movl	%eax, %ecx
000000000000e653	movq	-0x18(%rbp), %rax
000000000000e657	addq	$0x20, %rax
000000000000e65b	movzbl	-0x31(%rbp), %esi
000000000000e65f	movl	%esi, %edx
000000000000e661	imulq	$0x68, %rdx, %rdx
000000000000e665	addq	%rdx, %rax
000000000000e668	movl	%ecx, 0x54(%rax)
000000000000e66b	movq	-0x18(%rbp), %rax
000000000000e66f	movq	0x5b0(%rax), %rax
000000000000e676	movw	%ax, %di
000000000000e679	movq	-0x18(%rbp), %rax
000000000000e67d	addq	$0x20, %rax
000000000000e681	movzbl	-0x31(%rbp), %ecx
000000000000e685	movl	%ecx, %edx
000000000000e687	imulq	$0x68, %rdx, %rdx
000000000000e68b	addq	%rdx, %rax
000000000000e68e	movw	%di, 0x50(%rax)
000000000000e692	jmp	0xe86a
000000000000e697	movq	-0x18(%rbp), %rax
000000000000e69b	addq	$0x20, %rax
000000000000e69f	movzbl	-0x31(%rbp), %ecx
000000000000e6a3	movl	%ecx, %edx
000000000000e6a5	imulq	$0x68, %rdx, %rdx
000000000000e6a9	addq	%rdx, %rax
000000000000e6ac	movb	$0x0, 0xc(%rax)
000000000000e6b0	xorl	%ecx, %ecx
000000000000e6b2	movq	-0x10(%rbp), %rdi
000000000000e6b6	movq	-0x18(%rbp), %rsi
000000000000e6ba	movq	-0x18(%rbp), %rax
000000000000e6be	addq	$0x20, %rax
000000000000e6c2	movzbl	-0x31(%rbp), %edx
000000000000e6c6	movl	%edx, %r8d
000000000000e6c9	imulq	$0x68, %r8, %r8
000000000000e6cd	addq	%r8, %rax
000000000000e6d0	movq	%rax, %rdx
000000000000e6d3	callq	_ZydisDecodeOperandMemory
000000000000e6d8	movl	%eax, -0x64(%rbp)
000000000000e6db	movl	-0x64(%rbp), %eax
000000000000e6de	andl	$0x80000000, %eax
000000000000e6e3	cmpl	$0x0, %eax
000000000000e6e6	je	0xe6f7
000000000000e6ec	movl	-0x64(%rbp), %eax
000000000000e6ef	movl	%eax, -0x4(%rbp)
000000000000e6f2	jmp	0xf015
000000000000e6f7	jmp	0xe6fc
000000000000e6fc	movq	-0x18(%rbp), %rax
000000000000e700	addq	$0x20, %rax
000000000000e704	movzbl	-0x31(%rbp), %ecx
000000000000e708	movl	%ecx, %edx
000000000000e70a	imulq	$0x68, %rdx, %rdx
000000000000e70e	addq	%rdx, %rax
000000000000e711	movl	$0x2, 0x28(%rax)
000000000000e718	jmp	0xe86a
000000000000e71d	movq	-0x18(%rbp), %rax
000000000000e721	cmpb	$0x0, 0x588(%rax)
000000000000e728	setne	%cl
000000000000e72b	xorb	$-0x1, %cl
000000000000e72e	andb	$0x1, %cl
000000000000e731	movzbl	%cl, %edx
000000000000e734	movslq	%edx, %rax
000000000000e737	cmpq	$0x0, %rax
000000000000e73b	je	0xe760
000000000000e741	leaq	0x53d79(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e748	leaq	0x52a57(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e74f	leaq	0x540a2(%rip), %rcx ## literal pool for: "instruction->raw.disp.size"
000000000000e756	movl	$0x7c1, %edx
000000000000e75b	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e760	jmp	0xe765
000000000000e765	movq	-0x18(%rbp), %rax
000000000000e769	addq	$0x20, %rax
000000000000e76d	movzbl	-0x31(%rbp), %ecx
000000000000e771	movl	%ecx, %edx
000000000000e773	imulq	$0x68, %rdx, %rdx
000000000000e777	addq	%rdx, %rax
000000000000e77a	movl	$0x2, 0x4(%rax)
000000000000e781	movq	-0x18(%rbp), %rax
000000000000e785	addq	$0x20, %rax
000000000000e789	movzbl	-0x31(%rbp), %ecx
000000000000e78d	movl	%ecx, %edx
000000000000e78f	imulq	$0x68, %rdx, %rdx
000000000000e793	addq	%rdx, %rax
000000000000e796	movl	$0x1, 0x28(%rax)
000000000000e79d	movq	-0x18(%rbp), %rax
000000000000e7a1	addq	$0x20, %rax
000000000000e7a5	movzbl	-0x31(%rbp), %ecx
000000000000e7a9	movl	%ecx, %edx
000000000000e7ab	imulq	$0x68, %rdx, %rdx
000000000000e7af	addq	%rdx, %rax
000000000000e7b2	movb	$0x1, 0x40(%rax)
000000000000e7b6	movq	-0x18(%rbp), %rax
000000000000e7ba	movq	0x580(%rax), %rax
000000000000e7c1	movq	-0x18(%rbp), %rdx
000000000000e7c5	addq	$0x20, %rdx
000000000000e7c9	movzbl	-0x31(%rbp), %ecx
000000000000e7cd	movl	%ecx, %esi
000000000000e7cf	imulq	$0x68, %rsi, %rsi
000000000000e7d3	addq	%rsi, %rdx
000000000000e7d6	movq	%rax, 0x48(%rdx)
000000000000e7da	jmp	0xe86a
000000000000e7df	movq	-0x18(%rbp), %rax
000000000000e7e3	addq	$0x20, %rax
000000000000e7e7	movzbl	-0x31(%rbp), %ecx
000000000000e7eb	movl	%ecx, %edx
000000000000e7ed	imulq	$0x68, %rdx, %rdx
000000000000e7f1	addq	%rdx, %rax
000000000000e7f4	movb	$0x0, 0xc(%rax)
000000000000e7f8	xorl	%ecx, %ecx
000000000000e7fa	movq	-0x10(%rbp), %rdi
000000000000e7fe	movq	-0x18(%rbp), %rsi
000000000000e802	movq	-0x18(%rbp), %rax
000000000000e806	addq	$0x20, %rax
000000000000e80a	movzbl	-0x31(%rbp), %edx
000000000000e80e	movl	%edx, %r8d
000000000000e811	imulq	$0x68, %r8, %r8
000000000000e815	addq	%r8, %rax
000000000000e818	movq	%rax, %rdx
000000000000e81b	callq	_ZydisDecodeOperandMemory
000000000000e820	movl	%eax, -0x68(%rbp)
000000000000e823	movl	-0x68(%rbp), %eax
000000000000e826	andl	$0x80000000, %eax
000000000000e82b	cmpl	$0x0, %eax
000000000000e82e	je	0xe83f
000000000000e834	movl	-0x68(%rbp), %eax
000000000000e837	movl	%eax, -0x4(%rbp)
000000000000e83a	jmp	0xf015
000000000000e83f	jmp	0xe844
000000000000e844	movq	-0x18(%rbp), %rax
000000000000e848	addq	$0x20, %rax
000000000000e84c	movzbl	-0x31(%rbp), %ecx
000000000000e850	movl	%ecx, %edx
000000000000e852	imulq	$0x68, %rdx, %rdx
000000000000e856	addq	%rdx, %rax
000000000000e859	movl	$0x3, 0x28(%rax)
000000000000e860	jmp	0xe86a
000000000000e865	jmp	0xe86a
000000000000e86a	movq	-0x18(%rbp), %rax
000000000000e86e	addq	$0x20, %rax
000000000000e872	movzbl	-0x31(%rbp), %ecx
000000000000e876	movl	%ecx, %edx
000000000000e878	imulq	$0x68, %rdx, %rdx
000000000000e87c	addq	%rdx, %rax
000000000000e87f	cmpl	$0x0, 0x4(%rax)
000000000000e883	je	0xe8e6
000000000000e889	movq	-0x18(%rbp), %rax
000000000000e88d	cmpl	$0x4, 0xc(%rax)
000000000000e891	je	0xe8a5
000000000000e897	movq	-0x18(%rbp), %rax
000000000000e89b	cmpl	$0x5, 0xc(%rax)
000000000000e89f	jne	0xe8e1
000000000000e8a5	movq	-0x18(%rbp), %rax
000000000000e8a9	movzbl	0x588(%rax), %ecx
000000000000e8b0	cmpl	$0x8, %ecx
000000000000e8b3	jne	0xe8e1
000000000000e8b9	movq	-0x10(%rbp), %rax
000000000000e8bd	movzbl	0x3c(%rax), %ecx
000000000000e8c1	movl	%ecx, %eax
000000000000e8c3	movq	-0x18(%rbp), %rdx
000000000000e8c7	addq	$0x20, %rdx
000000000000e8cb	movzbl	-0x31(%rbp), %ecx
000000000000e8cf	movl	%ecx, %esi
000000000000e8d1	imulq	$0x68, %rsi, %rsi
000000000000e8d5	addq	%rsi, %rdx
000000000000e8d8	imulq	0x48(%rdx), %rax
000000000000e8dd	movq	%rax, 0x48(%rdx)
000000000000e8e1	jmp	0xec2a
000000000000e8e6	movq	-0x30(%rbp), %rax
000000000000e8ea	movzwl	(%rax), %ecx
000000000000e8ed	andl	$0x3f, %ecx
000000000000e8f0	movb	%cl, %dl
000000000000e8f2	subb	$0x1b, %dl
000000000000e8f5	movl	%ecx, -0x15c(%rbp)
000000000000e8fb	movb	%dl, -0x15d(%rbp)
000000000000e901	je	0xe98d
000000000000e907	jmp	0xe90c
000000000000e90c	movl	-0x15c(%rbp), %eax
000000000000e912	subl	$0x1c, %eax
000000000000e915	movl	%eax, -0x164(%rbp)
000000000000e91b	jne	0xebc6
000000000000e921	jmp	0xe926
000000000000e926	movq	-0x18(%rbp), %rax
000000000000e92a	addq	$0x4c8, %rax
000000000000e930	addq	$0xc8, %rax
000000000000e936	movzbl	-0x21(%rbp), %ecx
000000000000e93a	movl	%ecx, %edx
000000000000e93c	imulq	$0x18, %rdx, %rdx
000000000000e940	addq	%rdx, %rax
000000000000e943	cmpb	$0x0, 0x1(%rax)
000000000000e947	setne	%sil
000000000000e94b	xorb	$-0x1, %sil
000000000000e94f	andb	$0x1, %sil
000000000000e953	movzbl	%sil, %ecx
000000000000e957	movslq	%ecx, %rax
000000000000e95a	cmpq	$0x0, %rax
000000000000e95e	je	0xe983
000000000000e964	leaq	0x53b56(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e96b	leaq	0x52834(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e972	leaq	0x53e9a(%rip), %rcx ## literal pool for: "instruction->raw.imm[imm_id].is_relative"
000000000000e979	movl	$0x7e4, %edx
000000000000e97e	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e983	jmp	0xe988
000000000000e988	jmp	0xe98d
000000000000e98d	movzbl	-0x21(%rbp), %eax
000000000000e991	cmpl	$0x0, %eax
000000000000e994	movb	$0x1, %cl
000000000000e996	movb	%cl, -0x165(%rbp)
000000000000e99c	je	0xe9b2
000000000000e9a2	movzbl	-0x21(%rbp), %eax
000000000000e9a6	cmpl	$0x1, %eax
000000000000e9a9	sete	%cl
000000000000e9ac	movb	%cl, -0x165(%rbp)
000000000000e9b2	movb	-0x165(%rbp), %al
000000000000e9b8	xorb	$-0x1, %al
000000000000e9ba	andb	$0x1, %al
000000000000e9bc	movzbl	%al, %ecx
000000000000e9bf	movslq	%ecx, %rdx
000000000000e9c2	cmpq	$0x0, %rdx
000000000000e9c6	je	0xe9eb
000000000000e9cc	leaq	0x53aee(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e9d3	leaq	0x527cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e9da	leaq	0x53e5b(%rip), %rcx ## literal pool for: "(imm_id == 0) || (imm_id == 1)"
000000000000e9e1	movl	$0x7e6, %edx
000000000000e9e6	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000e9eb	jmp	0xe9f0
000000000000e9f0	movq	-0x18(%rbp), %rax
000000000000e9f4	addq	$0x20, %rax
000000000000e9f8	movzbl	-0x31(%rbp), %ecx
000000000000e9fc	movl	%ecx, %edx
000000000000e9fe	imulq	$0x68, %rdx, %rdx
000000000000ea02	addq	%rdx, %rax
000000000000ea05	movl	$0x4, 0x4(%rax)
000000000000ea0c	movq	-0x30(%rbp), %rax
000000000000ea10	movq	-0x10(%rbp), %rdx
000000000000ea14	movzbl	0x24(%rdx), %ecx
000000000000ea18	movl	%ecx, %edx
000000000000ea1a	movzwl	0x2(%rax,%rdx,2), %ecx
000000000000ea1f	shll	$0x3, %ecx
000000000000ea22	movw	%cx, %si
000000000000ea25	movq	-0x18(%rbp), %rax
000000000000ea29	addq	$0x20, %rax
000000000000ea2d	movzbl	-0x31(%rbp), %ecx
000000000000ea31	movl	%ecx, %edx
000000000000ea33	imulq	$0x68, %rdx, %rdx
000000000000ea37	addq	%rdx, %rax
000000000000ea3a	movw	%si, 0x14(%rax)
000000000000ea3e	movq	-0x30(%rbp), %rax
000000000000ea42	movb	0x9(%rax), %dil
000000000000ea46	andb	$0x3f, %dil
000000000000ea4a	movzbl	%dil, %ecx
000000000000ea4e	cmpl	$0x5, %ecx
000000000000ea51	jne	0xeb08
000000000000ea57	movq	-0x18(%rbp), %rax
000000000000ea5b	addq	$0x4c8, %rax
000000000000ea61	addq	$0xc8, %rax
000000000000ea67	movzbl	-0x21(%rbp), %ecx
000000000000ea6b	movl	%ecx, %edx
000000000000ea6d	imulq	$0x18, %rdx, %rdx
000000000000ea71	addq	%rdx, %rax
000000000000ea74	movzbl	0x10(%rax), %ecx
000000000000ea78	cmpl	$0x8, %ecx
000000000000ea7b	sete	%sil
000000000000ea7f	xorb	$-0x1, %sil
000000000000ea83	andb	$0x1, %sil
000000000000ea87	movzbl	%sil, %ecx
000000000000ea8b	movslq	%ecx, %rax
000000000000ea8e	cmpq	$0x0, %rax
000000000000ea92	je	0xeab7
000000000000ea98	leaq	0x53a22(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ea9f	leaq	0x52700(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000eaa6	leaq	0x53dae(%rip), %rcx ## literal pool for: "instruction->raw.imm[imm_id].size == 8"
000000000000eaad	movl	$0x7ec, %edx
000000000000eab2	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000eab7	jmp	0xeabc
000000000000eabc	movq	-0x18(%rbp), %rax
000000000000eac0	addq	$0x4c8, %rax
000000000000eac6	addq	$0xc8, %rax
000000000000eacc	movzbl	-0x21(%rbp), %ecx
000000000000ead0	movl	%ecx, %edx
000000000000ead2	imulq	$0x18, %rdx, %rdx
000000000000ead6	addq	%rdx, %rax
000000000000ead9	movq	0x8(%rax), %rax
000000000000eadd	movb	%al, %sil
000000000000eae0	movzbl	%sil, %ecx
000000000000eae4	andl	$0xf, %ecx
000000000000eae7	movslq	%ecx, %rax
000000000000eaea	movq	-0x18(%rbp), %rdx
000000000000eaee	addq	$0x20, %rdx
000000000000eaf2	movzbl	-0x31(%rbp), %ecx
000000000000eaf6	movl	%ecx, %edi
000000000000eaf8	imulq	$0x68, %rdi, %rdi
000000000000eafc	addq	%rdi, %rdx
000000000000eaff	movq	%rax, 0x60(%rdx)
000000000000eb03	jmp	0xeb42
000000000000eb08	movq	-0x18(%rbp), %rax
000000000000eb0c	addq	$0x4c8, %rax
000000000000eb12	addq	$0xc8, %rax
000000000000eb18	movzbl	-0x21(%rbp), %ecx
000000000000eb1c	movl	%ecx, %edx
000000000000eb1e	imulq	$0x18, %rdx, %rdx
000000000000eb22	addq	%rdx, %rax
000000000000eb25	movq	0x8(%rax), %rax
000000000000eb29	movq	-0x18(%rbp), %rdx
000000000000eb2d	addq	$0x20, %rdx
000000000000eb31	movzbl	-0x31(%rbp), %ecx
000000000000eb35	movl	%ecx, %esi
000000000000eb37	imulq	$0x68, %rsi, %rsi
000000000000eb3b	addq	%rsi, %rdx
000000000000eb3e	movq	%rax, 0x60(%rdx)
000000000000eb42	movq	-0x18(%rbp), %rax
000000000000eb46	addq	$0x4c8, %rax
000000000000eb4c	addq	$0xc8, %rax
000000000000eb52	movzbl	-0x21(%rbp), %ecx
000000000000eb56	movl	%ecx, %edx
000000000000eb58	imulq	$0x18, %rdx, %rdx
000000000000eb5c	addq	%rdx, %rax
000000000000eb5f	movb	(%rax), %sil
000000000000eb62	movq	-0x18(%rbp), %rax
000000000000eb66	addq	$0x20, %rax
000000000000eb6a	movzbl	-0x31(%rbp), %ecx
000000000000eb6e	movl	%ecx, %edx
000000000000eb70	imulq	$0x68, %rdx, %rdx
000000000000eb74	addq	%rdx, %rax
000000000000eb77	movb	%sil, 0x58(%rax)
000000000000eb7b	movq	-0x18(%rbp), %rax
000000000000eb7f	addq	$0x4c8, %rax
000000000000eb85	addq	$0xc8, %rax
000000000000eb8b	movzbl	-0x21(%rbp), %ecx
000000000000eb8f	movl	%ecx, %edx
000000000000eb91	imulq	$0x18, %rdx, %rdx
000000000000eb95	addq	%rdx, %rax
000000000000eb98	movb	0x1(%rax), %sil
000000000000eb9c	movq	-0x18(%rbp), %rax
000000000000eba0	addq	$0x20, %rax
000000000000eba4	movzbl	-0x31(%rbp), %ecx
000000000000eba8	movl	%ecx, %edx
000000000000ebaa	imulq	$0x68, %rdx, %rdx
000000000000ebae	addq	%rdx, %rax
000000000000ebb1	movb	%sil, 0x59(%rax)
000000000000ebb5	movb	-0x21(%rbp), %sil
000000000000ebb9	addb	$0x1, %sil
000000000000ebbd	movb	%sil, -0x21(%rbp)
000000000000ebc1	jmp	0xebcb
000000000000ebc6	jmp	0xebcb
000000000000ebcb	movq	-0x18(%rbp), %rax
000000000000ebcf	addq	$0x20, %rax
000000000000ebd3	movzbl	-0x31(%rbp), %ecx
000000000000ebd7	movl	%ecx, %edx
000000000000ebd9	imulq	$0x68, %rdx, %rdx
000000000000ebdd	addq	%rdx, %rax
000000000000ebe0	cmpl	$0x4, 0x4(%rax)
000000000000ebe4	sete	%sil
000000000000ebe8	xorb	$-0x1, %sil
000000000000ebec	andb	$0x1, %sil
000000000000ebf0	movzbl	%sil, %ecx
000000000000ebf4	movslq	%ecx, %rax
000000000000ebf7	cmpq	$0x0, %rax
000000000000ebfb	je	0xec20
000000000000ec01	leaq	0x538b9(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ec08	leaq	0x52597(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ec0f	leaq	0x53c6c(%rip), %rcx ## literal pool for: "instruction->operands[i].type == ZYDIS_OPERAND_TYPE_IMMEDIATE"
000000000000ec16	movl	$0x7fa, %edx
000000000000ec1b	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ec20	jmp	0xec25
000000000000ec25	jmp	0xec2a
000000000000ec2a	movq	-0x18(%rbp), %rax
000000000000ec2e	addq	$0x20, %rax
000000000000ec32	movzbl	-0x31(%rbp), %ecx
000000000000ec36	movl	%ecx, %edx
000000000000ec38	imulq	$0x68, %rdx, %rdx
000000000000ec3c	addq	%rdx, %rax
000000000000ec3f	cmpl	$0x2, 0x4(%rax)
000000000000ec43	jne	0xeef6
000000000000ec49	movq	-0x18(%rbp), %rax
000000000000ec4d	movq	0x430(%rax), %rax
000000000000ec54	andq	$0x10000000, %rax
000000000000ec5a	cmpq	$0x0, %rax
000000000000ec5e	je	0xec85
000000000000ec64	movq	-0x18(%rbp), %rax
000000000000ec68	addq	$0x20, %rax
000000000000ec6c	movzbl	-0x31(%rbp), %ecx
000000000000ec70	movl	%ecx, %edx
000000000000ec72	imulq	$0x68, %rdx, %rdx
000000000000ec76	addq	%rdx, %rax
000000000000ec79	movl	$0xc7, 0x2c(%rax)
000000000000ec80	jmp	0xeef1
000000000000ec85	movq	-0x18(%rbp), %rax
000000000000ec89	movq	0x430(%rax), %rax
000000000000ec90	andq	$0x20000000, %rax
000000000000ec96	cmpq	$0x0, %rax
000000000000ec9a	je	0xecc1
000000000000eca0	movq	-0x18(%rbp), %rax
000000000000eca4	addq	$0x20, %rax
000000000000eca8	movzbl	-0x31(%rbp), %ecx
000000000000ecac	movl	%ecx, %edx
000000000000ecae	imulq	$0x68, %rdx, %rdx
000000000000ecb2	addq	%rdx, %rax
000000000000ecb5	movl	$0xc8, 0x2c(%rax)
000000000000ecbc	jmp	0xeeec
000000000000ecc1	movq	-0x18(%rbp), %rax
000000000000ecc5	movq	0x430(%rax), %rax
000000000000eccc	andq	$0x40000000, %rax
000000000000ecd2	cmpq	$0x0, %rax
000000000000ecd6	je	0xecfd
000000000000ecdc	movq	-0x18(%rbp), %rax
000000000000ece0	addq	$0x20, %rax
000000000000ece4	movzbl	-0x31(%rbp), %ecx
000000000000ece8	movl	%ecx, %edx
000000000000ecea	imulq	$0x68, %rdx, %rdx
000000000000ecee	addq	%rdx, %rax
000000000000ecf1	movl	$0xc9, 0x2c(%rax)
000000000000ecf8	jmp	0xeee7
000000000000ecfd	movq	-0x18(%rbp), %rax
000000000000ed01	movl	$0x80000000, %ecx
000000000000ed06	andq	0x430(%rax), %rcx
000000000000ed0d	cmpq	$0x0, %rcx
000000000000ed11	je	0xed38
000000000000ed17	movq	-0x18(%rbp), %rax
000000000000ed1b	addq	$0x20, %rax
000000000000ed1f	movzbl	-0x31(%rbp), %ecx
000000000000ed23	movl	%ecx, %edx
000000000000ed25	imulq	$0x68, %rdx, %rdx
000000000000ed29	addq	%rdx, %rax
000000000000ed2c	movl	$0xc6, 0x2c(%rax)
000000000000ed33	jmp	0xeee2
000000000000ed38	movq	-0x18(%rbp), %rax
000000000000ed3c	movabsq	$0x100000000, %rcx
000000000000ed46	andq	0x430(%rax), %rcx
000000000000ed4d	cmpq	$0x0, %rcx
000000000000ed51	je	0xed78
000000000000ed57	movq	-0x18(%rbp), %rax
000000000000ed5b	addq	$0x20, %rax
000000000000ed5f	movzbl	-0x31(%rbp), %ecx
000000000000ed63	movl	%ecx, %edx
000000000000ed65	imulq	$0x68, %rdx, %rdx
000000000000ed69	addq	%rdx, %rax
000000000000ed6c	movl	$0xca, 0x2c(%rax)
000000000000ed73	jmp	0xeedd
000000000000ed78	movq	-0x18(%rbp), %rax
000000000000ed7c	movabsq	$0x200000000, %rcx
000000000000ed86	andq	0x430(%rax), %rcx
000000000000ed8d	cmpq	$0x0, %rcx
000000000000ed91	je	0xedb8
000000000000ed97	movq	-0x18(%rbp), %rax
000000000000ed9b	addq	$0x20, %rax
000000000000ed9f	movzbl	-0x31(%rbp), %ecx
000000000000eda3	movl	%ecx, %edx
000000000000eda5	imulq	$0x68, %rdx, %rdx
000000000000eda9	addq	%rdx, %rax
000000000000edac	movl	$0xcb, 0x2c(%rax)
000000000000edb3	jmp	0xeed8
000000000000edb8	movq	-0x18(%rbp), %rax
000000000000edbc	addq	$0x20, %rax
000000000000edc0	movzbl	-0x31(%rbp), %ecx
000000000000edc4	movl	%ecx, %edx
000000000000edc6	imulq	$0x68, %rdx, %rdx
000000000000edca	addq	%rdx, %rax
000000000000edcd	cmpl	$0x0, 0x2c(%rax)
000000000000edd1	jne	0xeed3
000000000000edd7	movq	-0x18(%rbp), %rax
000000000000eddb	addq	$0x20, %rax
000000000000eddf	movzbl	-0x31(%rbp), %ecx
000000000000ede3	movl	%ecx, %edx
000000000000ede5	imulq	$0x68, %rdx, %rdx
000000000000ede9	addq	%rdx, %rax
000000000000edec	cmpl	$0x39, 0x30(%rax)
000000000000edf0	je	0xee91
000000000000edf6	movq	-0x18(%rbp), %rax
000000000000edfa	addq	$0x20, %rax
000000000000edfe	movzbl	-0x31(%rbp), %ecx
000000000000ee02	movl	%ecx, %edx
000000000000ee04	imulq	$0x68, %rdx, %rdx
000000000000ee08	addq	%rdx, %rax
000000000000ee0b	cmpl	$0x3a, 0x30(%rax)
000000000000ee0f	je	0xee91
000000000000ee15	movq	-0x18(%rbp), %rax
000000000000ee19	addq	$0x20, %rax
000000000000ee1d	movzbl	-0x31(%rbp), %ecx
000000000000ee21	movl	%ecx, %edx
000000000000ee23	imulq	$0x68, %rdx, %rdx
000000000000ee27	addq	%rdx, %rax
000000000000ee2a	cmpl	$0x29, 0x30(%rax)
000000000000ee2e	je	0xee91
000000000000ee34	movq	-0x18(%rbp), %rax
000000000000ee38	addq	$0x20, %rax
000000000000ee3c	movzbl	-0x31(%rbp), %ecx
000000000000ee40	movl	%ecx, %edx
000000000000ee42	imulq	$0x68, %rdx, %rdx
000000000000ee46	addq	%rdx, %rax
000000000000ee49	cmpl	$0x2a, 0x30(%rax)
000000000000ee4d	je	0xee91
000000000000ee53	movq	-0x18(%rbp), %rax
000000000000ee57	addq	$0x20, %rax
000000000000ee5b	movzbl	-0x31(%rbp), %ecx
000000000000ee5f	movl	%ecx, %edx
000000000000ee61	imulq	$0x68, %rdx, %rdx
000000000000ee65	addq	%rdx, %rax
000000000000ee68	cmpl	$0x19, 0x30(%rax)
000000000000ee6c	je	0xee91
000000000000ee72	movq	-0x18(%rbp), %rax
000000000000ee76	addq	$0x20, %rax
000000000000ee7a	movzbl	-0x31(%rbp), %ecx
000000000000ee7e	movl	%ecx, %edx
000000000000ee80	imulq	$0x68, %rdx, %rdx
000000000000ee84	addq	%rdx, %rax
000000000000ee87	cmpl	$0x1a, 0x30(%rax)
000000000000ee8b	jne	0xeeb2
000000000000ee91	movq	-0x18(%rbp), %rax
000000000000ee95	addq	$0x20, %rax
000000000000ee99	movzbl	-0x31(%rbp), %ecx
000000000000ee9d	movl	%ecx, %edx
000000000000ee9f	imulq	$0x68, %rdx, %rdx
000000000000eea3	addq	%rdx, %rax
000000000000eea6	movl	$0xc8, 0x2c(%rax)
000000000000eead	jmp	0xeece
000000000000eeb2	movq	-0x18(%rbp), %rax
000000000000eeb6	addq	$0x20, %rax
000000000000eeba	movzbl	-0x31(%rbp), %ecx
000000000000eebe	movl	%ecx, %edx
000000000000eec0	imulq	$0x68, %rdx, %rdx
000000000000eec4	addq	%rdx, %rax
000000000000eec7	movl	$0xc9, 0x2c(%rax)
000000000000eece	jmp	0xeed3
000000000000eed3	jmp	0xeed8
000000000000eed8	jmp	0xeedd
000000000000eedd	jmp	0xeee2
000000000000eee2	jmp	0xeee7
000000000000eee7	jmp	0xeeec
000000000000eeec	jmp	0xeef1
000000000000eef1	jmp	0xeef6
000000000000eef6	movq	-0x10(%rbp), %rdi
000000000000eefa	movq	-0x18(%rbp), %rsi
000000000000eefe	movq	-0x18(%rbp), %rax
000000000000ef02	addq	$0x20, %rax
000000000000ef06	movzbl	-0x31(%rbp), %ecx
000000000000ef0a	movl	%ecx, %edx
000000000000ef0c	imulq	$0x68, %rdx, %rdx
000000000000ef10	addq	%rdx, %rax
000000000000ef13	movq	-0x30(%rbp), %rcx
000000000000ef17	movq	%rax, %rdx
000000000000ef1a	callq	_ZydisSetOperandSizeAndElementInfo
000000000000ef1f	movq	-0x30(%rbp), %rax
000000000000ef23	addq	$0xc, %rax
000000000000ef27	movq	%rax, -0x30(%rbp)
000000000000ef2b	movb	-0x31(%rbp), %al
000000000000ef2e	addb	$0x1, %al
000000000000ef30	movb	%al, -0x31(%rbp)
000000000000ef33	jmp	0xd88c
000000000000ef38	movq	-0x18(%rbp), %rax
000000000000ef3c	cmpl	$0x2, 0x490(%rax)
000000000000ef43	jne	0xf00e
000000000000ef49	movq	-0x18(%rbp), %rax
000000000000ef4d	movzbl	0x18(%rax), %ecx
000000000000ef51	cmpl	$0x1, %ecx
000000000000ef54	setge	%dl
000000000000ef57	xorb	$-0x1, %dl
000000000000ef5a	andb	$0x1, %dl
000000000000ef5d	movzbl	%dl, %ecx
000000000000ef60	movslq	%ecx, %rax
000000000000ef63	cmpq	$0x0, %rax
000000000000ef67	je	0xef8c
000000000000ef6d	leaq	0x5354d(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ef74	leaq	0x5222b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ef7b	leaq	0x5393e(%rip), %rcx ## literal pool for: "instruction->operand_count >= 1"
000000000000ef82	movl	$0x833, %edx
000000000000ef87	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ef8c	jmp	0xef91
000000000000ef91	movq	-0x18(%rbp), %rax
000000000000ef95	movzbl	0x2c(%rax), %ecx
000000000000ef99	movl	%ecx, %edx
000000000000ef9b	subl	$0x2, %edx
000000000000ef9e	movl	%ecx, -0x16c(%rbp)
000000000000efa4	movl	%edx, -0x170(%rbp)
000000000000efaa	je	0xefcf
000000000000efb0	jmp	0xefb5
000000000000efb5	movl	-0x16c(%rbp), %eax
000000000000efbb	subl	$0x3, %eax
000000000000efbe	movl	%eax, -0x174(%rbp)
000000000000efc4	je	0xeff7
000000000000efca	jmp	0xf004
000000000000efcf	movq	-0x18(%rbp), %rax
000000000000efd3	cmpl	$0x2, 0x24(%rax)
000000000000efd7	jne	0xefea
000000000000efdd	movq	-0x18(%rbp), %rax
000000000000efe1	movb	$0x8, 0x2c(%rax)
000000000000efe5	jmp	0xeff2
000000000000efea	movq	-0x18(%rbp), %rax
000000000000efee	movb	$0x9, 0x2c(%rax)
000000000000eff2	jmp	0xf009
000000000000eff7	movq	-0x18(%rbp), %rax
000000000000effb	movb	$0x9, 0x2c(%rax)
000000000000efff	jmp	0xf009
000000000000f004	jmp	0xf009
000000000000f009	jmp	0xf00e
000000000000f00e	movl	$0x100000, -0x4(%rbp)
000000000000f015	movl	-0x4(%rbp), %eax
000000000000f018	addq	$0x180, %rsp
000000000000f01f	popq	%rbp
000000000000f020	retq
000000000000f021	nopl	(%rax)
000000000000f024	loopne	0xf011
000000000000f026	.byte 0xff #bad opcode
000000000000f027	.byte 0xff #bad opcode
000000000000f028	inb	%dx, %al
000000000000f029	jmp	0xf02a
000000000000f02b	.byte 0xff #bad opcode
000000000000f02c	clc
000000000000f02d	jmp	0xf02e
000000000000f02f	incl	(%rsp,%rbp,8)
000000000000f032	.byte 0xff #bad opcode
000000000000f033	callq	*(%rax)
000000000000f035	inb	%dx, %al
000000000000f036	.byte 0xff #bad opcode
000000000000f037	jmpq	*%rcx
000000000000f039	inb	%dx, %al
000000000000f03a	.byte 0xff #bad opcode
000000000000f03b	pushq	0x56ffffed(%rdx)
000000000000f041	outb	%al, %dx
000000000000f042	.byte 0xff #bad opcode
000000000000f043	jmpq	*(%rdi)
000000000000f045	outl	%eax, %dx
000000000000f046	.byte 0xff #bad opcode
000000000000f047	pushq	(%rbx)
000000000000f049	outl	%eax, %dx
000000000000f04a	.byte 0xff #bad opcode
000000000000f04b	.byte 0xff #bad opcode
000000000000f04c	.byte 0x3f #bad opcode
000000000000f04d	outl	%eax, %dx
000000000000f04e	.byte 0xff #bad opcode
000000000000f04f	decl	-0x11(%rbx)
000000000000f052	.byte 0xff #bad opcode
000000000000f053	callq	*-0x11(%rdi)
000000000000f056	.byte 0xff #bad opcode
000000000000f057	jmpq	*-0x11(%rbx)
000000000000f05a	.byte 0xff #bad opcode
000000000000f05b	ljmpl	*-0x11(%rdi)
000000000000f05e	.byte 0xff #bad opcode
000000000000f05f	.byte 0xff #bad opcode
000000000000f060	jnp	0xf051
000000000000f062	.byte 0xff #bad opcode
000000000000f063	incl	-0x6c000011(%rdi)
000000000000f069	outl	%eax, %dx
000000000000f06a	.byte 0xff #bad opcode
000000000000f06b	lcalll	*-0x5f000011(%rdi)
000000000000f071	.byte 0xf3 #bad opcode
000000000000f072	.byte 0xff #bad opcode
000000000000f073	pushq	%rsi
000000000000f075	.byte 0xf3 #bad opcode
000000000000f076	.byte 0xff #bad opcode
000000000000f077	decl	-0xc(%rsi)
000000000000f07a	.byte 0xff #bad opcode
000000000000f07b	jmpq	*-0xa00000c(%rsi)
000000000000f081	idivl	%edi
000000000000f083	pushq	%rbp
000000000000f085	idivl	%edi
000000000000f087	.byte 0xff #bad opcode
000000000000f088	.byte 0xfe #bad opcode
000000000000f089	hlt
000000000000f08a	.byte 0xff #bad opcode
000000000000f08b	jmpq	*(%rdi)
000000000000f08d	idivb	%bh
000000000000f08f	ljmpl	*0x6ffffff6(%rbp)
000000000000f095	idivl	%edi
000000000000f097	incl	0x1bffffef(%rdx)
000000000000f09d	lock
000000000000f09e	.byte 0xff #bad opcode
000000000000f09f	pushq	-0xeb20001(%rax,%rsi,8)
000000000000f0a6	.byte 0xff #bad opcode
000000000000f0a7	.byte 0xff #bad opcode
000000000000f0a8	jg	0xf09c
000000000000f0aa	.byte 0xff #bad opcode
000000000000f0ab	jmpq	*%rsi
000000000000f0ad	.byte 0xf1 #bad opcode
000000000000f0ae	.byte 0xff #bad opcode
000000000000f0af	callq	*0x48(%rbp)
_ZydisInputNextBytes:
000000000000f0b0	pushq	%rbp
000000000000f0b1	movq	%rsp, %rbp
000000000000f0b4	subq	$0x30, %rsp
000000000000f0b8	movb	%cl, %al
000000000000f0ba	movq	%rdi, -0x10(%rbp)
000000000000f0be	movq	%rsi, -0x18(%rbp)
000000000000f0c2	movq	%rdx, -0x20(%rbp)
000000000000f0c6	movb	%al, -0x21(%rbp)
000000000000f0c9	cmpq	$0x0, -0x10(%rbp)
000000000000f0ce	setne	%al
000000000000f0d1	xorb	$-0x1, %al
000000000000f0d3	andb	$0x1, %al
000000000000f0d5	movzbl	%al, %ecx
000000000000f0d8	movslq	%ecx, %rdx
000000000000f0db	cmpq	$0x0, %rdx
000000000000f0df	je	0xf104
000000000000f0e5	leaq	0x524c1(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f0ec	leaq	0x520b3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f0f3	leaq	0x520e1(%rip), %rcx ## literal pool for: "context"
000000000000f0fa	movl	$0x182, %edx
000000000000f0ff	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f104	jmp	0xf109
000000000000f109	cmpq	$0x0, -0x18(%rbp)
000000000000f10e	setne	%al
000000000000f111	xorb	$-0x1, %al
000000000000f113	andb	$0x1, %al
000000000000f115	movzbl	%al, %ecx
000000000000f118	movslq	%ecx, %rdx
000000000000f11b	cmpq	$0x0, %rdx
000000000000f11f	je	0xf144
000000000000f125	leaq	0x52481(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f12c	leaq	0x52073(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f133	leaq	0x520a9(%rip), %rcx ## literal pool for: "instruction"
000000000000f13a	movl	$0x183, %edx
000000000000f13f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f144	jmp	0xf149
000000000000f149	cmpq	$0x0, -0x20(%rbp)
000000000000f14e	setne	%al
000000000000f151	xorb	$-0x1, %al
000000000000f153	andb	$0x1, %al
000000000000f155	movzbl	%al, %ecx
000000000000f158	movslq	%ecx, %rdx
000000000000f15b	cmpq	$0x0, %rdx
000000000000f15f	je	0xf184
000000000000f165	leaq	0x52441(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f16c	leaq	0x52033(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f173	leaq	0x520a7(%rip), %rcx ## literal pool for: "value"
000000000000f17a	movl	$0x184, %edx
000000000000f17f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f184	jmp	0xf189
000000000000f189	movq	-0x18(%rbp), %rax
000000000000f18d	movzbl	0x8(%rax), %ecx
000000000000f191	movzbl	-0x21(%rbp), %edx
000000000000f195	addl	%edx, %ecx
000000000000f197	cmpl	$0xf, %ecx
000000000000f19a	jle	0xf1ac
000000000000f1a0	movl	$0x80200002, -0x4(%rbp)
000000000000f1a7	jmp	0xf23b
000000000000f1ac	movq	-0x10(%rbp), %rax
000000000000f1b0	movq	0x10(%rax), %rax
000000000000f1b4	movzbl	-0x21(%rbp), %ecx
000000000000f1b8	movl	%ecx, %edx
000000000000f1ba	cmpq	%rdx, %rax
000000000000f1bd	jb	0xf234
000000000000f1c3	movq	$-0x1, %rcx
000000000000f1ca	movzbl	-0x21(%rbp), %eax
000000000000f1ce	movq	-0x18(%rbp), %rdx
000000000000f1d2	movzbl	0x8(%rdx), %esi
000000000000f1d6	addl	%eax, %esi
000000000000f1d8	movb	%sil, %dil
000000000000f1db	movb	%dil, 0x8(%rdx)
000000000000f1df	movq	-0x20(%rbp), %rdi
000000000000f1e3	movq	-0x10(%rbp), %rdx
000000000000f1e7	movq	0x8(%rdx), %rsi
000000000000f1eb	movzbl	-0x21(%rbp), %eax
000000000000f1ef	movl	%eax, %edx
000000000000f1f1	callq	0x1f64a ## symbol stub for: ___memcpy_chk
000000000000f1f6	movzbl	-0x21(%rbp), %r8d
000000000000f1fb	movq	-0x10(%rbp), %rcx
000000000000f1ff	movq	0x8(%rcx), %rdx
000000000000f203	movslq	%r8d, %rsi
000000000000f206	addq	%rsi, %rdx
000000000000f209	movq	%rdx, 0x8(%rcx)
000000000000f20d	movzbl	-0x21(%rbp), %r8d
000000000000f212	movl	%r8d, %ecx
000000000000f215	movq	-0x10(%rbp), %rdx
000000000000f219	movq	0x10(%rdx), %rsi
000000000000f21d	subq	%rcx, %rsi
000000000000f220	movq	%rsi, 0x10(%rdx)
000000000000f224	movl	$0x100000, -0x4(%rbp)
000000000000f22b	movq	%rax, -0x30(%rbp)
000000000000f22f	jmp	0xf23b
000000000000f234	movl	$0x80200000, -0x4(%rbp)
000000000000f23b	movl	-0x4(%rbp), %eax
000000000000f23e	addq	$0x30, %rsp
000000000000f242	popq	%rbp
000000000000f243	retq
000000000000f244	nopw	%cs:(%rax,%rax)
000000000000f24e	nop
_ZydisDecodeVEX:
000000000000f250	pushq	%rbp
000000000000f251	movq	%rsp, %rbp
000000000000f254	subq	$0x30, %rsp
000000000000f258	movq	%rdi, -0x10(%rbp)
000000000000f25c	movq	%rsi, -0x18(%rbp)
000000000000f260	movq	%rdx, -0x20(%rbp)
000000000000f264	cmpq	$0x0, -0x18(%rbp)
000000000000f269	setne	%al
000000000000f26c	xorb	$-0x1, %al
000000000000f26e	andb	$0x1, %al
000000000000f270	movzbl	%al, %ecx
000000000000f273	movslq	%ecx, %rdx
000000000000f276	cmpq	$0x0, %rdx
000000000000f27a	je	0xf29f
000000000000f280	leaq	0x5233a(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f287	leaq	0x51f18(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f28e	leaq	0x51f4e(%rip), %rcx ## literal pool for: "instruction"
000000000000f295	movl	$0x1f1, %edx
000000000000f29a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f29f	jmp	0xf2a4
000000000000f2a4	movq	-0x20(%rbp), %rax
000000000000f2a8	movzbl	(%rax), %ecx
000000000000f2ab	cmpl	$0xc4, %ecx
000000000000f2b1	movb	$0x1, %dl
000000000000f2b3	movb	%dl, -0x21(%rbp)
000000000000f2b6	je	0xf2cf
000000000000f2bc	movq	-0x20(%rbp), %rax
000000000000f2c0	movzbl	(%rax), %ecx
000000000000f2c3	cmpl	$0xc5, %ecx
000000000000f2c9	sete	%dl
000000000000f2cc	movb	%dl, -0x21(%rbp)
000000000000f2cf	movb	-0x21(%rbp), %al
000000000000f2d2	xorb	$-0x1, %al
000000000000f2d4	andb	$0x1, %al
000000000000f2d6	movzbl	%al, %ecx
000000000000f2d9	movslq	%ecx, %rdx
000000000000f2dc	cmpq	$0x0, %rdx
000000000000f2e0	je	0xf305
000000000000f2e6	leaq	0x522d4(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f2ed	leaq	0x51eb2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f2f4	leaq	0x522d5(%rip), %rcx ## literal pool for: "(data[0] == 0xC4) || (data[0] == 0xC5)"
000000000000f2fb	movl	$0x1f2, %edx
000000000000f300	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f305	jmp	0xf30a
000000000000f30a	movq	-0x18(%rbp), %rax
000000000000f30e	movq	0x430(%rax), %rcx
000000000000f315	orq	$0x10, %rcx
000000000000f319	movq	%rcx, 0x430(%rax)
000000000000f320	movq	-0x20(%rbp), %rax
000000000000f324	movzbl	(%rax), %edx
000000000000f327	movl	%edx, %esi
000000000000f329	subl	$0xc4, %esi
000000000000f32f	movl	%edx, -0x28(%rbp)
000000000000f332	movl	%esi, -0x2c(%rbp)
000000000000f335	je	0xf356
000000000000f33b	jmp	0xf340
000000000000f340	movl	-0x28(%rbp), %eax
000000000000f343	subl	$0xc5, %eax
000000000000f348	movl	%eax, -0x30(%rbp)
000000000000f34b	je	0xf48f
000000000000f351	jmp	0xf58c
000000000000f356	movq	-0x18(%rbp), %rax
000000000000f35a	movzbl	0x55a(%rax), %ecx
000000000000f361	movq	-0x18(%rbp), %rax
000000000000f365	movzbl	0x8(%rax), %edx
000000000000f369	subl	$0x3, %edx
000000000000f36c	cmpl	%edx, %ecx
000000000000f36e	sete	%sil
000000000000f372	xorb	$-0x1, %sil
000000000000f376	andb	$0x1, %sil
000000000000f37a	movzbl	%sil, %ecx
000000000000f37e	movslq	%ecx, %rax
000000000000f381	cmpq	$0x0, %rax
000000000000f385	je	0xf3aa
000000000000f38b	leaq	0x5222f(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f392	leaq	0x51e0d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f399	leaq	0x52257(%rip), %rcx ## literal pool for: "instruction->raw.vex.offset == instruction->length - 3"
000000000000f3a0	movl	$0x1f8, %edx
000000000000f3a5	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f3aa	jmp	0xf3af
000000000000f3af	movq	-0x18(%rbp), %rax
000000000000f3b3	movb	$0x3, 0x55b(%rax)
000000000000f3ba	movq	-0x20(%rbp), %rax
000000000000f3be	movzbl	0x1(%rax), %ecx
000000000000f3c2	sarl	$0x7, %ecx
000000000000f3c5	andl	$0x1, %ecx
000000000000f3c8	movb	%cl, %dl
000000000000f3ca	movq	-0x18(%rbp), %rax
000000000000f3ce	movb	%dl, 0x552(%rax)
000000000000f3d4	movq	-0x20(%rbp), %rax
000000000000f3d8	movzbl	0x1(%rax), %ecx
000000000000f3dc	sarl	$0x6, %ecx
000000000000f3df	andl	$0x1, %ecx
000000000000f3e2	movb	%cl, %dl
000000000000f3e4	movq	-0x18(%rbp), %rax
000000000000f3e8	movb	%dl, 0x553(%rax)
000000000000f3ee	movq	-0x20(%rbp), %rax
000000000000f3f2	movzbl	0x1(%rax), %ecx
000000000000f3f6	sarl	$0x5, %ecx
000000000000f3f9	andl	$0x1, %ecx
000000000000f3fc	movb	%cl, %dl
000000000000f3fe	movq	-0x18(%rbp), %rax
000000000000f402	movb	%dl, 0x554(%rax)
000000000000f408	movq	-0x20(%rbp), %rax
000000000000f40c	movzbl	0x1(%rax), %ecx
000000000000f410	sarl	$0x0, %ecx
000000000000f413	andl	$0x1f, %ecx
000000000000f416	movb	%cl, %dl
000000000000f418	movq	-0x18(%rbp), %rax
000000000000f41c	movb	%dl, 0x555(%rax)
000000000000f422	movq	-0x20(%rbp), %rax
000000000000f426	movzbl	0x2(%rax), %ecx
000000000000f42a	sarl	$0x7, %ecx
000000000000f42d	andl	$0x1, %ecx
000000000000f430	movb	%cl, %dl
000000000000f432	movq	-0x18(%rbp), %rax
000000000000f436	movb	%dl, 0x556(%rax)
000000000000f43c	movq	-0x20(%rbp), %rax
000000000000f440	movzbl	0x2(%rax), %ecx
000000000000f444	sarl	$0x3, %ecx
000000000000f447	andl	$0xf, %ecx
000000000000f44a	movb	%cl, %dl
000000000000f44c	movq	-0x18(%rbp), %rax
000000000000f450	movb	%dl, 0x557(%rax)
000000000000f456	movq	-0x20(%rbp), %rax
000000000000f45a	movzbl	0x2(%rax), %ecx
000000000000f45e	sarl	$0x2, %ecx
000000000000f461	andl	$0x1, %ecx
000000000000f464	movb	%cl, %dl
000000000000f466	movq	-0x18(%rbp), %rax
000000000000f46a	movb	%dl, 0x558(%rax)
000000000000f470	movq	-0x20(%rbp), %rax
000000000000f474	movzbl	0x2(%rax), %ecx
000000000000f478	sarl	$0x0, %ecx
000000000000f47b	andl	$0x3, %ecx
000000000000f47e	movb	%cl, %dl
000000000000f480	movq	-0x18(%rbp), %rax
000000000000f484	movb	%dl, 0x559(%rax)
000000000000f48a	jmp	0xf5ab
000000000000f48f	movq	-0x18(%rbp), %rax
000000000000f493	movzbl	0x55a(%rax), %ecx
000000000000f49a	movq	-0x18(%rbp), %rax
000000000000f49e	movzbl	0x8(%rax), %edx
000000000000f4a2	subl	$0x2, %edx
000000000000f4a5	cmpl	%edx, %ecx
000000000000f4a7	sete	%sil
000000000000f4ab	xorb	$-0x1, %sil
000000000000f4af	andb	$0x1, %sil
000000000000f4b3	movzbl	%sil, %ecx
000000000000f4b7	movslq	%ecx, %rax
000000000000f4ba	cmpq	$0x0, %rax
000000000000f4be	je	0xf4e3
000000000000f4c4	leaq	0x520f6(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f4cb	leaq	0x51cd4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f4d2	leaq	0x52155(%rip), %rcx ## literal pool for: "instruction->raw.vex.offset == instruction->length - 2"
000000000000f4d9	movl	$0x204, %edx
000000000000f4de	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f4e3	jmp	0xf4e8
000000000000f4e8	movq	-0x18(%rbp), %rax
000000000000f4ec	movb	$0x2, 0x55b(%rax)
000000000000f4f3	movq	-0x20(%rbp), %rax
000000000000f4f7	movzbl	0x1(%rax), %ecx
000000000000f4fb	sarl	$0x7, %ecx
000000000000f4fe	andl	$0x1, %ecx
000000000000f501	movb	%cl, %dl
000000000000f503	movq	-0x18(%rbp), %rax
000000000000f507	movb	%dl, 0x552(%rax)
000000000000f50d	movq	-0x18(%rbp), %rax
000000000000f511	movb	$0x1, 0x553(%rax)
000000000000f518	movq	-0x18(%rbp), %rax
000000000000f51c	movb	$0x1, 0x554(%rax)
000000000000f523	movq	-0x18(%rbp), %rax
000000000000f527	movb	$0x1, 0x555(%rax)
000000000000f52e	movq	-0x18(%rbp), %rax
000000000000f532	movb	$0x0, 0x556(%rax)
000000000000f539	movq	-0x20(%rbp), %rax
000000000000f53d	movzbl	0x1(%rax), %ecx
000000000000f541	sarl	$0x3, %ecx
000000000000f544	andl	$0xf, %ecx
000000000000f547	movb	%cl, %dl
000000000000f549	movq	-0x18(%rbp), %rax
000000000000f54d	movb	%dl, 0x557(%rax)
000000000000f553	movq	-0x20(%rbp), %rax
000000000000f557	movzbl	0x1(%rax), %ecx
000000000000f55b	sarl	$0x2, %ecx
000000000000f55e	andl	$0x1, %ecx
000000000000f561	movb	%cl, %dl
000000000000f563	movq	-0x18(%rbp), %rax
000000000000f567	movb	%dl, 0x558(%rax)
000000000000f56d	movq	-0x20(%rbp), %rax
000000000000f571	movzbl	0x1(%rax), %ecx
000000000000f575	sarl	$0x0, %ecx
000000000000f578	andl	$0x3, %ecx
000000000000f57b	movb	%cl, %dl
000000000000f57d	movq	-0x18(%rbp), %rax
000000000000f581	movb	%dl, 0x559(%rax)
000000000000f587	jmp	0xf5ab
000000000000f58c	leaq	0x5202e(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f593	leaq	0x51c0c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f59a	leaq	0x51e6b(%rip), %rcx ## literal pool for: "0"
000000000000f5a1	movl	$0x210, %edx
000000000000f5a6	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f5ab	movq	-0x18(%rbp), %rax
000000000000f5af	movzbl	0x555(%rax), %ecx
000000000000f5b6	cmpl	$0x3, %ecx
000000000000f5b9	jle	0xf5cb
000000000000f5bf	movl	$0x80200007, -0x4(%rbp)
000000000000f5c6	jmp	0xf66d
000000000000f5cb	movq	-0x18(%rbp), %rax
000000000000f5cf	movb	0x556(%rax), %cl
000000000000f5d5	movq	-0x10(%rbp), %rax
000000000000f5d9	movb	%cl, 0x26(%rax)
000000000000f5dc	movq	-0x18(%rbp), %rax
000000000000f5e0	movzbl	0x552(%rax), %edx
000000000000f5e7	xorl	$-0x1, %edx
000000000000f5ea	andl	$0x1, %edx
000000000000f5ed	movb	%dl, %cl
000000000000f5ef	movq	-0x10(%rbp), %rax
000000000000f5f3	movb	%cl, 0x27(%rax)
000000000000f5f6	movq	-0x18(%rbp), %rax
000000000000f5fa	movzbl	0x553(%rax), %edx
000000000000f601	xorl	$-0x1, %edx
000000000000f604	andl	$0x1, %edx
000000000000f607	movb	%dl, %cl
000000000000f609	movq	-0x10(%rbp), %rax
000000000000f60d	movb	%cl, 0x28(%rax)
000000000000f610	movq	-0x18(%rbp), %rax
000000000000f614	movzbl	0x554(%rax), %edx
000000000000f61b	xorl	$-0x1, %edx
000000000000f61e	andl	$0x1, %edx
000000000000f621	movb	%dl, %cl
000000000000f623	movq	-0x10(%rbp), %rax
000000000000f627	movb	%cl, 0x29(%rax)
000000000000f62a	movq	-0x18(%rbp), %rax
000000000000f62e	movb	0x558(%rax), %cl
000000000000f634	movq	-0x10(%rbp), %rax
000000000000f638	movb	%cl, 0x2a(%rax)
000000000000f63b	movq	-0x18(%rbp), %rax
000000000000f63f	movb	0x558(%rax), %cl
000000000000f645	movq	-0x10(%rbp), %rax
000000000000f649	movb	%cl, 0x2b(%rax)
000000000000f64c	movq	-0x18(%rbp), %rax
000000000000f650	movzbl	0x557(%rax), %edx
000000000000f657	xorl	$-0x1, %edx
000000000000f65a	andl	$0xf, %edx
000000000000f65d	movb	%dl, %cl
000000000000f65f	movq	-0x10(%rbp), %rax
000000000000f663	movb	%cl, 0x2e(%rax)
000000000000f666	movl	$0x100000, -0x4(%rbp)
000000000000f66d	movl	-0x4(%rbp), %eax
000000000000f670	addq	$0x30, %rsp
000000000000f674	popq	%rbp
000000000000f675	retq
000000000000f676	nopw	%cs:(%rax,%rax)
_ZydisDecodeMVEX:
000000000000f680	pushq	%rbp
000000000000f681	movq	%rsp, %rbp
000000000000f684	subq	$0x20, %rsp
000000000000f688	movq	%rdi, -0x10(%rbp)
000000000000f68c	movq	%rsi, -0x18(%rbp)
000000000000f690	movq	%rdx, -0x20(%rbp)
000000000000f694	cmpq	$0x0, -0x18(%rbp)
000000000000f699	setne	%al
000000000000f69c	xorb	$-0x1, %al
000000000000f69e	andb	$0x1, %al
000000000000f6a0	movzbl	%al, %ecx
000000000000f6a3	movslq	%ecx, %rdx
000000000000f6a6	cmpq	$0x0, %rdx
000000000000f6aa	je	0xf6cf
000000000000f6b0	leaq	0x51fae(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000f6b7	leaq	0x51ae8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f6be	leaq	0x51b1e(%rip), %rcx ## literal pool for: "instruction"
000000000000f6c5	movl	$0x28f, %edx
000000000000f6ca	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f6cf	jmp	0xf6d4
000000000000f6d4	movq	-0x20(%rbp), %rax
000000000000f6d8	movzbl	(%rax), %ecx
000000000000f6db	cmpl	$0x62, %ecx
000000000000f6de	sete	%dl
000000000000f6e1	xorb	$-0x1, %dl
000000000000f6e4	andb	$0x1, %dl
000000000000f6e7	movzbl	%dl, %ecx
000000000000f6ea	movslq	%ecx, %rax
000000000000f6ed	cmpq	$0x0, %rax
000000000000f6f1	je	0xf716
000000000000f6f7	leaq	0x51f67(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000f6fe	leaq	0x51aa1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f705	leaq	0x51f69(%rip), %rcx ## literal pool for: "data[0] == 0x62"
000000000000f70c	movl	$0x290, %edx
000000000000f711	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f716	jmp	0xf71b
000000000000f71b	movq	-0x18(%rbp), %rax
000000000000f71f	movzbl	0x577(%rax), %ecx
000000000000f726	movq	-0x18(%rbp), %rax
000000000000f72a	movzbl	0x8(%rax), %edx
000000000000f72e	subl	$0x4, %edx
000000000000f731	cmpl	%edx, %ecx
000000000000f733	sete	%sil
000000000000f737	xorb	$-0x1, %sil
000000000000f73b	andb	$0x1, %sil
000000000000f73f	movzbl	%sil, %ecx
000000000000f743	movslq	%ecx, %rax
000000000000f746	cmpq	$0x0, %rax
000000000000f74a	je	0xf76f
000000000000f750	leaq	0x51f0e(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000f757	leaq	0x51a48(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f75e	leaq	0x51f20(%rip), %rcx ## literal pool for: "instruction->raw.mvex.offset == instruction->length - 4"
000000000000f765	movl	$0x291, %edx
000000000000f76a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f76f	jmp	0xf774
000000000000f774	movq	-0x18(%rbp), %rax
000000000000f778	movq	0x430(%rax), %rcx
000000000000f77f	orq	$0x40, %rcx
000000000000f783	movq	%rcx, 0x430(%rax)
000000000000f78a	movq	-0x20(%rbp), %rax
000000000000f78e	movzbl	0x1(%rax), %edx
000000000000f792	sarl	$0x7, %edx
000000000000f795	andl	$0x1, %edx
000000000000f798	movb	%dl, %sil
000000000000f79b	movq	-0x18(%rbp), %rax
000000000000f79f	movb	%sil, 0x56b(%rax)
000000000000f7a6	movq	-0x20(%rbp), %rax
000000000000f7aa	movzbl	0x1(%rax), %edx
000000000000f7ae	sarl	$0x6, %edx
000000000000f7b1	andl	$0x1, %edx
000000000000f7b4	movb	%dl, %sil
000000000000f7b7	movq	-0x18(%rbp), %rax
000000000000f7bb	movb	%sil, 0x56c(%rax)
000000000000f7c2	movq	-0x20(%rbp), %rax
000000000000f7c6	movzbl	0x1(%rax), %edx
000000000000f7ca	sarl	$0x5, %edx
000000000000f7cd	andl	$0x1, %edx
000000000000f7d0	movb	%dl, %sil
000000000000f7d3	movq	-0x18(%rbp), %rax
000000000000f7d7	movb	%sil, 0x56d(%rax)
000000000000f7de	movq	-0x20(%rbp), %rax
000000000000f7e2	movzbl	0x1(%rax), %edx
000000000000f7e6	sarl	$0x4, %edx
000000000000f7e9	andl	$0x1, %edx
000000000000f7ec	movb	%dl, %sil
000000000000f7ef	movq	-0x18(%rbp), %rax
000000000000f7f3	movb	%sil, 0x56e(%rax)
000000000000f7fa	movq	-0x20(%rbp), %rax
000000000000f7fe	movzbl	0x1(%rax), %edx
000000000000f802	sarl	$0x0, %edx
000000000000f805	andl	$0xf, %edx
000000000000f808	movb	%dl, %sil
000000000000f80b	movq	-0x18(%rbp), %rax
000000000000f80f	movb	%sil, 0x56f(%rax)
000000000000f816	movq	-0x18(%rbp), %rax
000000000000f81a	movzbl	0x56f(%rax), %edx
000000000000f821	cmpl	$0x3, %edx
000000000000f824	jle	0xf836
000000000000f82a	movl	$0x80200007, -0x4(%rbp)
000000000000f831	jmp	0xfa1d
000000000000f836	movq	-0x20(%rbp), %rax
000000000000f83a	movzbl	0x2(%rax), %ecx
000000000000f83e	sarl	$0x7, %ecx
000000000000f841	andl	$0x1, %ecx
000000000000f844	movb	%cl, %dl
000000000000f846	movq	-0x18(%rbp), %rax
000000000000f84a	movb	%dl, 0x570(%rax)
000000000000f850	movq	-0x20(%rbp), %rax
000000000000f854	movzbl	0x2(%rax), %ecx
000000000000f858	sarl	$0x3, %ecx
000000000000f85b	andl	$0xf, %ecx
000000000000f85e	movb	%cl, %dl
000000000000f860	movq	-0x18(%rbp), %rax
000000000000f864	movb	%dl, 0x571(%rax)
000000000000f86a	movq	-0x20(%rbp), %rax
000000000000f86e	movzbl	0x2(%rax), %ecx
000000000000f872	sarl	$0x2, %ecx
000000000000f875	andl	$0x1, %ecx
000000000000f878	cmpl	$0x0, %ecx
000000000000f87b	sete	%dl
000000000000f87e	xorb	$-0x1, %dl
000000000000f881	andb	$0x1, %dl
000000000000f884	movzbl	%dl, %ecx
000000000000f887	movslq	%ecx, %rax
000000000000f88a	cmpq	$0x0, %rax
000000000000f88e	je	0xf8b3
000000000000f894	leaq	0x51dca(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000f89b	leaq	0x51904(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f8a2	leaq	0x51e14(%rip), %rcx ## literal pool for: "((data[2] >> 2) & 0x01) == 0x00"
000000000000f8a9	movl	$0x2a3, %edx
000000000000f8ae	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000f8b3	jmp	0xf8b8
000000000000f8b8	movq	-0x20(%rbp), %rax
000000000000f8bc	movzbl	0x2(%rax), %ecx
000000000000f8c0	sarl	$0x0, %ecx
000000000000f8c3	andl	$0x3, %ecx
000000000000f8c6	movb	%cl, %dl
000000000000f8c8	movq	-0x18(%rbp), %rax
000000000000f8cc	movb	%dl, 0x572(%rax)
000000000000f8d2	movq	-0x20(%rbp), %rax
000000000000f8d6	movzbl	0x3(%rax), %ecx
000000000000f8da	sarl	$0x7, %ecx
000000000000f8dd	andl	$0x1, %ecx
000000000000f8e0	movb	%cl, %dl
000000000000f8e2	movq	-0x18(%rbp), %rax
000000000000f8e6	movb	%dl, 0x573(%rax)
000000000000f8ec	movq	-0x20(%rbp), %rax
000000000000f8f0	movzbl	0x3(%rax), %ecx
000000000000f8f4	sarl	$0x4, %ecx
000000000000f8f7	andl	$0x7, %ecx
000000000000f8fa	movb	%cl, %dl
000000000000f8fc	movq	-0x18(%rbp), %rax
000000000000f900	movb	%dl, 0x574(%rax)
000000000000f906	movq	-0x20(%rbp), %rax
000000000000f90a	movzbl	0x3(%rax), %ecx
000000000000f90e	sarl	$0x3, %ecx
000000000000f911	andl	$0x1, %ecx
000000000000f914	movb	%cl, %dl
000000000000f916	movq	-0x18(%rbp), %rax
000000000000f91a	movb	%dl, 0x575(%rax)
000000000000f920	movq	-0x20(%rbp), %rax
000000000000f924	movzbl	0x3(%rax), %ecx
000000000000f928	sarl	$0x0, %ecx
000000000000f92b	andl	$0x7, %ecx
000000000000f92e	movb	%cl, %dl
000000000000f930	movq	-0x18(%rbp), %rax
000000000000f934	movb	%dl, 0x576(%rax)
000000000000f93a	movq	-0x18(%rbp), %rax
000000000000f93e	movb	0x570(%rax), %dl
000000000000f944	movq	-0x10(%rbp), %rax
000000000000f948	movb	%dl, 0x26(%rax)
000000000000f94b	movq	-0x18(%rbp), %rax
000000000000f94f	movzbl	0x56b(%rax), %ecx
000000000000f956	xorl	$-0x1, %ecx
000000000000f959	andl	$0x1, %ecx
000000000000f95c	movb	%cl, %dl
000000000000f95e	movq	-0x10(%rbp), %rax
000000000000f962	movb	%dl, 0x27(%rax)
000000000000f965	movq	-0x18(%rbp), %rax
000000000000f969	movzbl	0x56c(%rax), %ecx
000000000000f970	xorl	$-0x1, %ecx
000000000000f973	andl	$0x1, %ecx
000000000000f976	movb	%cl, %dl
000000000000f978	movq	-0x10(%rbp), %rax
000000000000f97c	movb	%dl, 0x28(%rax)
000000000000f97f	movq	-0x18(%rbp), %rax
000000000000f983	movzbl	0x56d(%rax), %ecx
000000000000f98a	xorl	$-0x1, %ecx
000000000000f98d	andl	$0x1, %ecx
000000000000f990	movb	%cl, %dl
000000000000f992	movq	-0x10(%rbp), %rax
000000000000f996	movb	%dl, 0x29(%rax)
000000000000f999	movq	-0x18(%rbp), %rax
000000000000f99d	movzbl	0x56e(%rax), %ecx
000000000000f9a4	xorl	$-0x1, %ecx
000000000000f9a7	andl	$0x1, %ecx
000000000000f9aa	movb	%cl, %dl
000000000000f9ac	movq	-0x10(%rbp), %rax
000000000000f9b0	movb	%dl, 0x2c(%rax)
000000000000f9b3	movq	-0x18(%rbp), %rax
000000000000f9b7	movzbl	0x575(%rax), %ecx
000000000000f9be	xorl	$-0x1, %ecx
000000000000f9c1	andl	$0x1, %ecx
000000000000f9c4	movb	%cl, %dl
000000000000f9c6	movq	-0x10(%rbp), %rax
000000000000f9ca	movb	%dl, 0x2d(%rax)
000000000000f9cd	movq	-0x10(%rbp), %rax
000000000000f9d1	movb	$0x2, 0x2b(%rax)
000000000000f9d5	movq	-0x18(%rbp), %rax
000000000000f9d9	movzbl	0x575(%rax), %ecx
000000000000f9e0	xorl	$-0x1, %ecx
000000000000f9e3	andl	$0x1, %ecx
000000000000f9e6	shll	$0x4, %ecx
000000000000f9e9	movq	-0x18(%rbp), %rax
000000000000f9ed	movzbl	0x571(%rax), %esi
000000000000f9f4	xorl	$-0x1, %esi
000000000000f9f7	andl	$0xf, %esi
000000000000f9fa	orl	%esi, %ecx
000000000000f9fc	movb	%cl, %dl
000000000000f9fe	movq	-0x10(%rbp), %rax
000000000000fa02	movb	%dl, 0x2e(%rax)
000000000000fa05	movq	-0x18(%rbp), %rax
000000000000fa09	movb	0x576(%rax), %dl
000000000000fa0f	movq	-0x10(%rbp), %rax
000000000000fa13	movb	%dl, 0x2f(%rax)
000000000000fa16	movl	$0x100000, -0x4(%rbp)
000000000000fa1d	movl	-0x4(%rbp), %eax
000000000000fa20	addq	$0x20, %rsp
000000000000fa24	popq	%rbp
000000000000fa25	retq
000000000000fa26	nopw	%cs:(%rax,%rax)
_ZydisDecodeEVEX:
000000000000fa30	pushq	%rbp
000000000000fa31	movq	%rsp, %rbp
000000000000fa34	subq	$0x20, %rsp
000000000000fa38	movq	%rdi, -0x10(%rbp)
000000000000fa3c	movq	%rsi, -0x18(%rbp)
000000000000fa40	movq	%rdx, -0x20(%rbp)
000000000000fa44	cmpq	$0x0, -0x18(%rbp)
000000000000fa49	setne	%al
000000000000fa4c	xorb	$-0x1, %al
000000000000fa4e	andb	$0x1, %al
000000000000fa50	movzbl	%al, %ecx
000000000000fa53	movslq	%ecx, %rdx
000000000000fa56	cmpq	$0x0, %rdx
000000000000fa5a	je	0xfa7f
000000000000fa60	leaq	0x51c76(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000fa67	leaq	0x51738(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fa6e	leaq	0x5176e(%rip), %rcx ## literal pool for: "instruction"
000000000000fa75	movl	$0x237, %edx
000000000000fa7a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000fa7f	jmp	0xfa84
000000000000fa84	movq	-0x20(%rbp), %rax
000000000000fa88	movzbl	(%rax), %ecx
000000000000fa8b	cmpl	$0x62, %ecx
000000000000fa8e	sete	%dl
000000000000fa91	xorb	$-0x1, %dl
000000000000fa94	andb	$0x1, %dl
000000000000fa97	movzbl	%dl, %ecx
000000000000fa9a	movslq	%ecx, %rax
000000000000fa9d	cmpq	$0x0, %rax
000000000000faa1	je	0xfac6
000000000000faa7	leaq	0x51c2f(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000faae	leaq	0x516f1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fab5	leaq	0x51bb9(%rip), %rcx ## literal pool for: "data[0] == 0x62"
000000000000fabc	movl	$0x238, %edx
000000000000fac1	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000fac6	jmp	0xfacb
000000000000facb	movq	-0x18(%rbp), %rax
000000000000facf	movzbl	0x56a(%rax), %ecx
000000000000fad6	movq	-0x18(%rbp), %rax
000000000000fada	movzbl	0x8(%rax), %edx
000000000000fade	subl	$0x4, %edx
000000000000fae1	cmpl	%edx, %ecx
000000000000fae3	sete	%sil
000000000000fae7	xorb	$-0x1, %sil
000000000000faeb	andb	$0x1, %sil
000000000000faef	movzbl	%sil, %ecx
000000000000faf3	movslq	%ecx, %rax
000000000000faf6	cmpq	$0x0, %rax
000000000000fafa	je	0xfb1f
000000000000fb00	leaq	0x51bd6(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000fb07	leaq	0x51698(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fb0e	leaq	0x51bd8(%rip), %rcx ## literal pool for: "instruction->raw.evex.offset == instruction->length - 4"
000000000000fb15	movl	$0x239, %edx
000000000000fb1a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000fb1f	jmp	0xfb24
000000000000fb24	movq	-0x18(%rbp), %rax
000000000000fb28	movq	0x430(%rax), %rcx
000000000000fb2f	orq	$0x20, %rcx
000000000000fb33	movq	%rcx, 0x430(%rax)
000000000000fb3a	movq	-0x20(%rbp), %rax
000000000000fb3e	movzbl	0x1(%rax), %edx
000000000000fb42	sarl	$0x7, %edx
000000000000fb45	andl	$0x1, %edx
000000000000fb48	movb	%dl, %sil
000000000000fb4b	movq	-0x18(%rbp), %rax
000000000000fb4f	movb	%sil, 0x55c(%rax)
000000000000fb56	movq	-0x20(%rbp), %rax
000000000000fb5a	movzbl	0x1(%rax), %edx
000000000000fb5e	sarl	$0x6, %edx
000000000000fb61	andl	$0x1, %edx
000000000000fb64	movb	%dl, %sil
000000000000fb67	movq	-0x18(%rbp), %rax
000000000000fb6b	movb	%sil, 0x55d(%rax)
000000000000fb72	movq	-0x20(%rbp), %rax
000000000000fb76	movzbl	0x1(%rax), %edx
000000000000fb7a	sarl	$0x5, %edx
000000000000fb7d	andl	$0x1, %edx
000000000000fb80	movb	%dl, %sil
000000000000fb83	movq	-0x18(%rbp), %rax
000000000000fb87	movb	%sil, 0x55e(%rax)
000000000000fb8e	movq	-0x20(%rbp), %rax
000000000000fb92	movzbl	0x1(%rax), %edx
000000000000fb96	sarl	$0x4, %edx
000000000000fb99	andl	$0x1, %edx
000000000000fb9c	movb	%dl, %sil
000000000000fb9f	movq	-0x18(%rbp), %rax
000000000000fba3	movb	%sil, 0x55f(%rax)
000000000000fbaa	movq	-0x20(%rbp), %rax
000000000000fbae	movzbl	0x1(%rax), %edx
000000000000fbb2	sarl	$0x2, %edx
000000000000fbb5	andl	$0x3, %edx
000000000000fbb8	cmpl	$0x0, %edx
000000000000fbbb	je	0xfbcd
000000000000fbc1	movl	$0x80200008, -0x4(%rbp)
000000000000fbc8	jmp	0xfeea
000000000000fbcd	movq	-0x20(%rbp), %rax
000000000000fbd1	movzbl	0x1(%rax), %ecx
000000000000fbd5	sarl	$0x0, %ecx
000000000000fbd8	andl	$0x3, %ecx
000000000000fbdb	movb	%cl, %dl
000000000000fbdd	movq	-0x18(%rbp), %rax
000000000000fbe1	movb	%dl, 0x560(%rax)
000000000000fbe7	movq	-0x18(%rbp), %rax
000000000000fbeb	movzbl	0x560(%rax), %ecx
000000000000fbf2	cmpl	$0x0, %ecx
000000000000fbf5	jne	0xfc07
000000000000fbfb	movl	$0x80200007, -0x4(%rbp)
000000000000fc02	jmp	0xfeea
000000000000fc07	movq	-0x20(%rbp), %rax
000000000000fc0b	movzbl	0x2(%rax), %ecx
000000000000fc0f	sarl	$0x7, %ecx
000000000000fc12	andl	$0x1, %ecx
000000000000fc15	movb	%cl, %dl
000000000000fc17	movq	-0x18(%rbp), %rax
000000000000fc1b	movb	%dl, 0x561(%rax)
000000000000fc21	movq	-0x20(%rbp), %rax
000000000000fc25	movzbl	0x2(%rax), %ecx
000000000000fc29	sarl	$0x3, %ecx
000000000000fc2c	andl	$0xf, %ecx
000000000000fc2f	movb	%cl, %dl
000000000000fc31	movq	-0x18(%rbp), %rax
000000000000fc35	movb	%dl, 0x562(%rax)
000000000000fc3b	movq	-0x20(%rbp), %rax
000000000000fc3f	movzbl	0x2(%rax), %ecx
000000000000fc43	sarl	$0x2, %ecx
000000000000fc46	andl	$0x1, %ecx
000000000000fc49	cmpl	$0x1, %ecx
000000000000fc4c	sete	%dl
000000000000fc4f	xorb	$-0x1, %dl
000000000000fc52	andb	$0x1, %dl
000000000000fc55	movzbl	%dl, %ecx
000000000000fc58	movslq	%ecx, %rax
000000000000fc5b	cmpq	$0x0, %rax
000000000000fc5f	je	0xfc84
000000000000fc65	leaq	0x51a71(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000fc6c	leaq	0x51533(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fc73	leaq	0x51aab(%rip), %rcx ## literal pool for: "((data[2] >> 2) & 0x01) == 0x01"
000000000000fc7a	movl	$0x252, %edx
000000000000fc7f	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000fc84	jmp	0xfc89
000000000000fc89	movq	-0x20(%rbp), %rax
000000000000fc8d	movzbl	0x2(%rax), %ecx
000000000000fc91	sarl	$0x0, %ecx
000000000000fc94	andl	$0x3, %ecx
000000000000fc97	movb	%cl, %dl
000000000000fc99	movq	-0x18(%rbp), %rax
000000000000fc9d	movb	%dl, 0x563(%rax)
000000000000fca3	movq	-0x20(%rbp), %rax
000000000000fca7	movzbl	0x3(%rax), %ecx
000000000000fcab	sarl	$0x7, %ecx
000000000000fcae	andl	$0x1, %ecx
000000000000fcb1	movb	%cl, %dl
000000000000fcb3	movq	-0x18(%rbp), %rax
000000000000fcb7	movb	%dl, 0x564(%rax)
000000000000fcbd	movq	-0x20(%rbp), %rax
000000000000fcc1	movzbl	0x3(%rax), %ecx
000000000000fcc5	sarl	$0x6, %ecx
000000000000fcc8	andl	$0x1, %ecx
000000000000fccb	movb	%cl, %dl
000000000000fccd	movq	-0x18(%rbp), %rax
000000000000fcd1	movb	%dl, 0x565(%rax)
000000000000fcd7	movq	-0x20(%rbp), %rax
000000000000fcdb	movzbl	0x3(%rax), %ecx
000000000000fcdf	sarl	$0x5, %ecx
000000000000fce2	andl	$0x1, %ecx
000000000000fce5	movb	%cl, %dl
000000000000fce7	movq	-0x18(%rbp), %rax
000000000000fceb	movb	%dl, 0x566(%rax)
000000000000fcf1	movq	-0x20(%rbp), %rax
000000000000fcf5	movzbl	0x3(%rax), %ecx
000000000000fcf9	sarl	$0x4, %ecx
000000000000fcfc	andl	$0x1, %ecx
000000000000fcff	movb	%cl, %dl
000000000000fd01	movq	-0x18(%rbp), %rax
000000000000fd05	movb	%dl, 0x567(%rax)
000000000000fd0b	movq	-0x20(%rbp), %rax
000000000000fd0f	movzbl	0x3(%rax), %ecx
000000000000fd13	sarl	$0x3, %ecx
000000000000fd16	andl	$0x1, %ecx
000000000000fd19	movb	%cl, %dl
000000000000fd1b	movq	-0x18(%rbp), %rax
000000000000fd1f	movb	%dl, 0x568(%rax)
000000000000fd25	movq	-0x18(%rbp), %rax
000000000000fd29	cmpb	$0x0, 0x568(%rax)
000000000000fd30	jne	0xfd52
000000000000fd36	movq	-0x10(%rbp), %rax
000000000000fd3a	movq	(%rax), %rax
000000000000fd3d	cmpl	$0x0, (%rax)
000000000000fd40	je	0xfd52
000000000000fd46	movl	$0x80200008, -0x4(%rbp)
000000000000fd4d	jmp	0xfeea
000000000000fd52	movq	-0x20(%rbp), %rax
000000000000fd56	movzbl	0x3(%rax), %ecx
000000000000fd5a	sarl	$0x0, %ecx
000000000000fd5d	andl	$0x7, %ecx
000000000000fd60	movb	%cl, %dl
000000000000fd62	movq	-0x18(%rbp), %rax
000000000000fd66	movb	%dl, 0x569(%rax)
000000000000fd6c	movq	-0x18(%rbp), %rax
000000000000fd70	movzbl	0x564(%rax), %ecx
000000000000fd77	cmpl	$0x0, %ecx
000000000000fd7a	je	0xfd9d
000000000000fd80	movq	-0x18(%rbp), %rax
000000000000fd84	cmpb	$0x0, 0x569(%rax)
000000000000fd8b	jne	0xfd9d
000000000000fd91	movl	$0x8020000a, -0x4(%rbp)
000000000000fd98	jmp	0xfeea
000000000000fd9d	movq	-0x18(%rbp), %rax
000000000000fda1	movb	0x561(%rax), %cl
000000000000fda7	movq	-0x10(%rbp), %rax
000000000000fdab	movb	%cl, 0x26(%rax)
000000000000fdae	movq	-0x18(%rbp), %rax
000000000000fdb2	movzbl	0x55c(%rax), %edx
000000000000fdb9	xorl	$-0x1, %edx
000000000000fdbc	andl	$0x1, %edx
000000000000fdbf	movb	%dl, %cl
000000000000fdc1	movq	-0x10(%rbp), %rax
000000000000fdc5	movb	%cl, 0x27(%rax)
000000000000fdc8	movq	-0x18(%rbp), %rax
000000000000fdcc	movzbl	0x55d(%rax), %edx
000000000000fdd3	xorl	$-0x1, %edx
000000000000fdd6	andl	$0x1, %edx
000000000000fdd9	movb	%dl, %cl
000000000000fddb	movq	-0x10(%rbp), %rax
000000000000fddf	movb	%cl, 0x28(%rax)
000000000000fde2	movq	-0x18(%rbp), %rax
000000000000fde6	movzbl	0x55e(%rax), %edx
000000000000fded	xorl	$-0x1, %edx
000000000000fdf0	andl	$0x1, %edx
000000000000fdf3	movb	%dl, %cl
000000000000fdf5	movq	-0x10(%rbp), %rax
000000000000fdf9	movb	%cl, 0x29(%rax)
000000000000fdfc	movq	-0x20(%rbp), %rax
000000000000fe00	movzbl	0x3(%rax), %edx
000000000000fe04	sarl	$0x5, %edx
000000000000fe07	andl	$0x3, %edx
000000000000fe0a	movb	%dl, %cl
000000000000fe0c	movq	-0x10(%rbp), %rax
000000000000fe10	movb	%cl, 0x2b(%rax)
000000000000fe13	movq	-0x18(%rbp), %rax
000000000000fe17	movzbl	0x55f(%rax), %edx
000000000000fe1e	xorl	$-0x1, %edx
000000000000fe21	andl	$0x1, %edx
000000000000fe24	movb	%dl, %cl
000000000000fe26	movq	-0x10(%rbp), %rax
000000000000fe2a	movb	%cl, 0x2c(%rax)
000000000000fe2d	movq	-0x18(%rbp), %rax
000000000000fe31	movzbl	0x568(%rax), %edx
000000000000fe38	xorl	$-0x1, %edx
000000000000fe3b	andl	$0x1, %edx
000000000000fe3e	movb	%dl, %cl
000000000000fe40	movq	-0x10(%rbp), %rax
000000000000fe44	movb	%cl, 0x2d(%rax)
000000000000fe47	movq	-0x18(%rbp), %rax
000000000000fe4b	movzbl	0x568(%rax), %edx
000000000000fe52	xorl	$-0x1, %edx
000000000000fe55	andl	$0x1, %edx
000000000000fe58	shll	$0x4, %edx
000000000000fe5b	movq	-0x18(%rbp), %rax
000000000000fe5f	movzbl	0x562(%rax), %esi
000000000000fe66	xorl	$-0x1, %esi
000000000000fe69	andl	$0xf, %esi
000000000000fe6c	orl	%esi, %edx
000000000000fe6e	movb	%dl, %cl
000000000000fe70	movq	-0x10(%rbp), %rax
000000000000fe74	movb	%cl, 0x2e(%rax)
000000000000fe77	movq	-0x18(%rbp), %rax
000000000000fe7b	movb	0x569(%rax), %cl
000000000000fe81	movq	-0x10(%rbp), %rax
000000000000fe85	movb	%cl, 0x2f(%rax)
000000000000fe88	movq	-0x18(%rbp), %rax
000000000000fe8c	cmpb	$0x0, 0x568(%rax)
000000000000fe93	jne	0xfeb5
000000000000fe99	movq	-0x10(%rbp), %rax
000000000000fe9d	movq	(%rax), %rax
000000000000fea0	cmpl	$0x0, (%rax)
000000000000fea3	je	0xfeb5
000000000000fea9	movl	$0x80200008, -0x4(%rbp)
000000000000feb0	jmp	0xfeea
000000000000feb5	movq	-0x18(%rbp), %rax
000000000000feb9	cmpb	$0x0, 0x567(%rax)
000000000000fec0	jne	0xfee3
000000000000fec6	movq	-0x10(%rbp), %rax
000000000000feca	movzbl	0x2b(%rax), %ecx
000000000000fece	cmpl	$0x3, %ecx
000000000000fed1	jne	0xfee3
000000000000fed7	movl	$0x80200008, -0x4(%rbp)
000000000000fede	jmp	0xfeea
000000000000fee3	movl	$0x100000, -0x4(%rbp)
000000000000feea	movl	-0x4(%rbp), %eax
000000000000feed	addq	$0x20, %rsp
000000000000fef1	popq	%rbp
000000000000fef2	retq
000000000000fef3	nopw	%cs:(%rax,%rax)
000000000000fefd	nopl	(%rax)
_ZydisDecodeXOP:
000000000000ff00	pushq	%rbp
000000000000ff01	movq	%rsp, %rbp
000000000000ff04	subq	$0x20, %rsp
000000000000ff08	movq	%rdi, -0x10(%rbp)
000000000000ff0c	movq	%rsi, -0x18(%rbp)
000000000000ff10	movq	%rdx, -0x20(%rbp)
000000000000ff14	cmpq	$0x0, -0x18(%rbp)
000000000000ff19	setne	%al
000000000000ff1c	xorb	$-0x1, %al
000000000000ff1e	andb	$0x1, %al
000000000000ff20	movzbl	%al, %ecx
000000000000ff23	movslq	%ecx, %rdx
000000000000ff26	cmpq	$0x0, %rdx
000000000000ff2a	je	0xff4f
000000000000ff30	leaq	0x5180e(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
000000000000ff37	leaq	0x51268(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ff3e	leaq	0x5129e(%rip), %rcx ## literal pool for: "instruction"
000000000000ff45	movl	$0x1c3, %edx
000000000000ff4a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ff4f	jmp	0xff54
000000000000ff54	movq	-0x20(%rbp), %rax
000000000000ff58	movzbl	(%rax), %ecx
000000000000ff5b	cmpl	$0x8f, %ecx
000000000000ff61	sete	%dl
000000000000ff64	xorb	$-0x1, %dl
000000000000ff67	andb	$0x1, %dl
000000000000ff6a	movzbl	%dl, %ecx
000000000000ff6d	movslq	%ecx, %rax
000000000000ff70	cmpq	$0x0, %rax
000000000000ff74	je	0xff99
000000000000ff7a	leaq	0x517c4(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
000000000000ff81	leaq	0x5121e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ff88	leaq	0x517c5(%rip), %rcx ## literal pool for: "data[0] == 0x8F"
000000000000ff8f	movl	$0x1c4, %edx
000000000000ff94	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ff99	jmp	0xff9e
000000000000ff9e	movq	-0x20(%rbp), %rax
000000000000ffa2	movzbl	0x1(%rax), %ecx
000000000000ffa6	sarl	$0x0, %ecx
000000000000ffa9	andl	$0x1f, %ecx
000000000000ffac	cmpl	$0x8, %ecx
000000000000ffaf	setge	%dl
000000000000ffb2	xorb	$-0x1, %dl
000000000000ffb5	andb	$0x1, %dl
000000000000ffb8	movzbl	%dl, %ecx
000000000000ffbb	movslq	%ecx, %rax
000000000000ffbe	cmpq	$0x0, %rax
000000000000ffc2	je	0xffe7
000000000000ffc8	leaq	0x51776(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
000000000000ffcf	leaq	0x511d0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ffd6	leaq	0x51787(%rip), %rcx ## literal pool for: "((data[1] >> 0) & 0x1F) >= 8"
000000000000ffdd	movl	$0x1c5, %edx
000000000000ffe2	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000000ffe7	jmp	0xffec
000000000000ffec	movq	-0x18(%rbp), %rax
000000000000fff0	movzbl	0x551(%rax), %ecx
000000000000fff7	movq	-0x18(%rbp), %rax
000000000000fffb	movzbl	0x8(%rax), %edx
000000000000ffff	subl	$0x3, %edx
0000000000010002	cmpl	%edx, %ecx
0000000000010004	sete	%sil
0000000000010008	xorb	$-0x1, %sil
000000000001000c	andb	$0x1, %sil
0000000000010010	movzbl	%sil, %ecx
0000000000010014	movslq	%ecx, %rax
0000000000010017	cmpq	$0x0, %rax
000000000001001b	je	0x10040
0000000000010021	leaq	0x5171d(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
0000000000010028	leaq	0x51177(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001002f	leaq	0x5174b(%rip), %rcx ## literal pool for: "instruction->raw.xop.offset == instruction->length - 3"
0000000000010036	movl	$0x1c6, %edx
000000000001003b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010040	jmp	0x10045
0000000000010045	movq	-0x18(%rbp), %rax
0000000000010049	movq	0x430(%rax), %rcx
0000000000010050	orq	$0x8, %rcx
0000000000010054	movq	%rcx, 0x430(%rax)
000000000001005b	movq	-0x20(%rbp), %rax
000000000001005f	movzbl	0x1(%rax), %edx
0000000000010063	sarl	$0x7, %edx
0000000000010066	andl	$0x1, %edx
0000000000010069	movb	%dl, %sil
000000000001006c	movq	-0x18(%rbp), %rax
0000000000010070	movb	%sil, 0x549(%rax)
0000000000010077	movq	-0x20(%rbp), %rax
000000000001007b	movzbl	0x1(%rax), %edx
000000000001007f	sarl	$0x6, %edx
0000000000010082	andl	$0x1, %edx
0000000000010085	movb	%dl, %sil
0000000000010088	movq	-0x18(%rbp), %rax
000000000001008c	movb	%sil, 0x54a(%rax)
0000000000010093	movq	-0x20(%rbp), %rax
0000000000010097	movzbl	0x1(%rax), %edx
000000000001009b	sarl	$0x5, %edx
000000000001009e	andl	$0x1, %edx
00000000000100a1	movb	%dl, %sil
00000000000100a4	movq	-0x18(%rbp), %rax
00000000000100a8	movb	%sil, 0x54b(%rax)
00000000000100af	movq	-0x20(%rbp), %rax
00000000000100b3	movzbl	0x1(%rax), %edx
00000000000100b7	sarl	$0x0, %edx
00000000000100ba	andl	$0x1f, %edx
00000000000100bd	movb	%dl, %sil
00000000000100c0	movq	-0x18(%rbp), %rax
00000000000100c4	movb	%sil, 0x54c(%rax)
00000000000100cb	movq	-0x18(%rbp), %rax
00000000000100cf	movzbl	0x54c(%rax), %edx
00000000000100d6	cmpl	$0x8, %edx
00000000000100d9	jl	0x100f3
00000000000100df	movq	-0x18(%rbp), %rax
00000000000100e3	movzbl	0x54c(%rax), %ecx
00000000000100ea	cmpl	$0xa, %ecx
00000000000100ed	jle	0x100ff
00000000000100f3	movl	$0x80200007, -0x4(%rbp)
00000000000100fa	jmp	0x10209
00000000000100ff	movq	-0x20(%rbp), %rax
0000000000010103	movzbl	0x2(%rax), %ecx
0000000000010107	sarl	$0x7, %ecx
000000000001010a	andl	$0x1, %ecx
000000000001010d	movb	%cl, %dl
000000000001010f	movq	-0x18(%rbp), %rax
0000000000010113	movb	%dl, 0x54d(%rax)
0000000000010119	movq	-0x20(%rbp), %rax
000000000001011d	movzbl	0x2(%rax), %ecx
0000000000010121	sarl	$0x3, %ecx
0000000000010124	andl	$0xf, %ecx
0000000000010127	movb	%cl, %dl
0000000000010129	movq	-0x18(%rbp), %rax
000000000001012d	movb	%dl, 0x54e(%rax)
0000000000010133	movq	-0x20(%rbp), %rax
0000000000010137	movzbl	0x2(%rax), %ecx
000000000001013b	sarl	$0x2, %ecx
000000000001013e	andl	$0x1, %ecx
0000000000010141	movb	%cl, %dl
0000000000010143	movq	-0x18(%rbp), %rax
0000000000010147	movb	%dl, 0x54f(%rax)
000000000001014d	movq	-0x20(%rbp), %rax
0000000000010151	movzbl	0x2(%rax), %ecx
0000000000010155	sarl	$0x0, %ecx
0000000000010158	andl	$0x3, %ecx
000000000001015b	movb	%cl, %dl
000000000001015d	movq	-0x18(%rbp), %rax
0000000000010161	movb	%dl, 0x550(%rax)
0000000000010167	movq	-0x18(%rbp), %rax
000000000001016b	movb	0x54d(%rax), %dl
0000000000010171	movq	-0x10(%rbp), %rax
0000000000010175	movb	%dl, 0x26(%rax)
0000000000010178	movq	-0x18(%rbp), %rax
000000000001017c	movzbl	0x549(%rax), %ecx
0000000000010183	xorl	$-0x1, %ecx
0000000000010186	andl	$0x1, %ecx
0000000000010189	movb	%cl, %dl
000000000001018b	movq	-0x10(%rbp), %rax
000000000001018f	movb	%dl, 0x27(%rax)
0000000000010192	movq	-0x18(%rbp), %rax
0000000000010196	movzbl	0x54a(%rax), %ecx
000000000001019d	xorl	$-0x1, %ecx
00000000000101a0	andl	$0x1, %ecx
00000000000101a3	movb	%cl, %dl
00000000000101a5	movq	-0x10(%rbp), %rax
00000000000101a9	movb	%dl, 0x28(%rax)
00000000000101ac	movq	-0x18(%rbp), %rax
00000000000101b0	movzbl	0x54b(%rax), %ecx
00000000000101b7	xorl	$-0x1, %ecx
00000000000101ba	andl	$0x1, %ecx
00000000000101bd	movb	%cl, %dl
00000000000101bf	movq	-0x10(%rbp), %rax
00000000000101c3	movb	%dl, 0x29(%rax)
00000000000101c6	movq	-0x18(%rbp), %rax
00000000000101ca	movb	0x54f(%rax), %dl
00000000000101d0	movq	-0x10(%rbp), %rax
00000000000101d4	movb	%dl, 0x2a(%rax)
00000000000101d7	movq	-0x18(%rbp), %rax
00000000000101db	movb	0x54f(%rax), %dl
00000000000101e1	movq	-0x10(%rbp), %rax
00000000000101e5	movb	%dl, 0x2b(%rax)
00000000000101e8	movq	-0x18(%rbp), %rax
00000000000101ec	movzbl	0x54e(%rax), %ecx
00000000000101f3	xorl	$-0x1, %ecx
00000000000101f6	andl	$0xf, %ecx
00000000000101f9	movb	%cl, %dl
00000000000101fb	movq	-0x10(%rbp), %rax
00000000000101ff	movb	%dl, 0x2e(%rax)
0000000000010202	movl	$0x100000, -0x4(%rbp)
0000000000010209	movl	-0x4(%rbp), %eax
000000000001020c	addq	$0x20, %rsp
0000000000010210	popq	%rbp
0000000000010211	retq
0000000000010212	nopw	%cs:(%rax,%rax)
000000000001021c	nopl	(%rax)
_ZydisDecodeModRM:
0000000000010220	pushq	%rbp
0000000000010221	movq	%rsp, %rbp
0000000000010224	subq	$0x10, %rsp
0000000000010228	movb	%sil, %al
000000000001022b	movq	%rdi, -0x8(%rbp)
000000000001022f	movb	%al, -0x9(%rbp)
0000000000010232	cmpq	$0x0, -0x8(%rbp)
0000000000010237	setne	%al
000000000001023a	xorb	$-0x1, %al
000000000001023c	andb	$0x1, %al
000000000001023e	movzbl	%al, %esi
0000000000010241	movslq	%esi, %rdi
0000000000010244	cmpq	$0x0, %rdi
0000000000010248	je	0x1026d
000000000001024e	leaq	0x515ad(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
0000000000010255	leaq	0x50f4a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001025c	leaq	0x50f80(%rip), %rcx ## literal pool for: "instruction"
0000000000010263	movl	$0x2c3, %edx
0000000000010268	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001026d	jmp	0x10272
0000000000010272	movq	-0x8(%rbp), %rax
0000000000010276	movq	0x430(%rax), %rax
000000000001027d	andq	$0x1, %rax
0000000000010281	cmpq	$0x0, %rax
0000000000010285	setne	%cl
0000000000010288	xorb	$-0x1, %cl
000000000001028b	xorb	$-0x1, %cl
000000000001028e	andb	$0x1, %cl
0000000000010291	movzbl	%cl, %edx
0000000000010294	movslq	%edx, %rax
0000000000010297	cmpq	$0x0, %rax
000000000001029b	je	0x102c0
00000000000102a1	leaq	0x5155a(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
00000000000102a8	leaq	0x50ef7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000102af	leaq	0x5155d(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000001)"
00000000000102b6	movl	$0x2c4, %edx
00000000000102bb	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000102c0	jmp	0x102c5
00000000000102c5	movq	-0x8(%rbp), %rax
00000000000102c9	movzbl	0x57b(%rax), %ecx
00000000000102d0	movq	-0x8(%rbp), %rax
00000000000102d4	movzbl	0x8(%rax), %edx
00000000000102d8	subl	$0x1, %edx
00000000000102db	cmpl	%edx, %ecx
00000000000102dd	sete	%sil
00000000000102e1	xorb	$-0x1, %sil
00000000000102e5	andb	$0x1, %sil
00000000000102e9	movzbl	%sil, %ecx
00000000000102ed	movslq	%ecx, %rax
00000000000102f0	cmpq	$0x0, %rax
00000000000102f4	je	0x10319
00000000000102fa	leaq	0x51501(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
0000000000010301	leaq	0x50e9e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010308	leaq	0x51534(%rip), %rcx ## literal pool for: "instruction->raw.modrm.offset == instruction->length - 1"
000000000001030f	movl	$0x2c5, %edx
0000000000010314	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010319	jmp	0x1031e
000000000001031e	movq	-0x8(%rbp), %rax
0000000000010322	movq	0x430(%rax), %rcx
0000000000010329	orq	$0x1, %rcx
000000000001032d	movq	%rcx, 0x430(%rax)
0000000000010334	movzbl	-0x9(%rbp), %edx
0000000000010338	sarl	$0x6, %edx
000000000001033b	andl	$0x3, %edx
000000000001033e	movb	%dl, %sil
0000000000010341	movq	-0x8(%rbp), %rax
0000000000010345	movb	%sil, 0x578(%rax)
000000000001034c	movzbl	-0x9(%rbp), %edx
0000000000010350	sarl	$0x3, %edx
0000000000010353	andl	$0x7, %edx
0000000000010356	movb	%dl, %sil
0000000000010359	movq	-0x8(%rbp), %rax
000000000001035d	movb	%sil, 0x579(%rax)
0000000000010364	movzbl	-0x9(%rbp), %edx
0000000000010368	sarl	$0x0, %edx
000000000001036b	andl	$0x7, %edx
000000000001036e	movb	%dl, %sil
0000000000010371	movq	-0x8(%rbp), %rax
0000000000010375	movb	%sil, 0x57a(%rax)
000000000001037c	addq	$0x10, %rsp
0000000000010380	popq	%rbp
0000000000010381	retq
0000000000010382	nopw	%cs:(%rax,%rax)
000000000001038c	nopl	(%rax)
_ZydisDecodeSIB:
0000000000010390	pushq	%rbp
0000000000010391	movq	%rsp, %rbp
0000000000010394	subq	$0x10, %rsp
0000000000010398	movb	%sil, %al
000000000001039b	movq	%rdi, -0x8(%rbp)
000000000001039f	movb	%al, -0x9(%rbp)
00000000000103a2	cmpq	$0x0, -0x8(%rbp)
00000000000103a7	setne	%al
00000000000103aa	xorb	$-0x1, %al
00000000000103ac	andb	$0x1, %al
00000000000103ae	movzbl	%al, %esi
00000000000103b1	movslq	%esi, %rdi
00000000000103b4	cmpq	$0x0, %rdi
00000000000103b8	je	0x103dd
00000000000103be	leaq	0x5185d(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
00000000000103c5	leaq	0x50dda(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000103cc	leaq	0x50e10(%rip), %rcx ## literal pool for: "instruction"
00000000000103d3	movl	$0x2d5, %edx
00000000000103d8	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000103dd	jmp	0x103e2
00000000000103e2	movq	-0x8(%rbp), %rax
00000000000103e6	movq	0x430(%rax), %rax
00000000000103ed	andq	$0x1, %rax
00000000000103f1	cmpq	$0x0, %rax
00000000000103f5	setne	%cl
00000000000103f8	xorb	$-0x1, %cl
00000000000103fb	andb	$0x1, %cl
00000000000103fe	movzbl	%cl, %edx
0000000000010401	movslq	%edx, %rax
0000000000010404	cmpq	$0x0, %rax
0000000000010408	je	0x1042d
000000000001040e	leaq	0x5180d(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
0000000000010415	leaq	0x50d8a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001041c	leaq	0x5180e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000010423	movl	$0x2d6, %edx
0000000000010428	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001042d	jmp	0x10432
0000000000010432	movq	-0x8(%rbp), %rax
0000000000010436	movzbl	0x57a(%rax), %ecx
000000000001043d	cmpl	$0x4, %ecx
0000000000010440	sete	%dl
0000000000010443	xorb	$-0x1, %dl
0000000000010446	andb	$0x1, %dl
0000000000010449	movzbl	%dl, %ecx
000000000001044c	movslq	%ecx, %rax
000000000001044f	cmpq	$0x0, %rax
0000000000010453	je	0x10478
0000000000010459	leaq	0x517c2(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
0000000000010460	leaq	0x50d3f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010467	leaq	0x517f0(%rip), %rcx ## literal pool for: "instruction->raw.modrm.rm == 4"
000000000001046e	movl	$0x2d7, %edx
0000000000010473	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010478	jmp	0x1047d
000000000001047d	movq	-0x8(%rbp), %rax
0000000000010481	movq	0x430(%rax), %rax
0000000000010488	andq	$0x2, %rax
000000000001048c	cmpq	$0x0, %rax
0000000000010490	setne	%cl
0000000000010493	xorb	$-0x1, %cl
0000000000010496	xorb	$-0x1, %cl
0000000000010499	andb	$0x1, %cl
000000000001049c	movzbl	%cl, %edx
000000000001049f	movslq	%edx, %rax
00000000000104a2	cmpq	$0x0, %rax
00000000000104a6	je	0x104cb
00000000000104ac	leaq	0x5176f(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
00000000000104b3	leaq	0x50cec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000104ba	leaq	0x517bc(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000002)"
00000000000104c1	movl	$0x2d8, %edx
00000000000104c6	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000104cb	jmp	0x104d0
00000000000104d0	movq	-0x8(%rbp), %rax
00000000000104d4	movzbl	0x57f(%rax), %ecx
00000000000104db	movq	-0x8(%rbp), %rax
00000000000104df	movzbl	0x8(%rax), %edx
00000000000104e3	subl	$0x1, %edx
00000000000104e6	cmpl	%edx, %ecx
00000000000104e8	sete	%sil
00000000000104ec	xorb	$-0x1, %sil
00000000000104f0	andb	$0x1, %sil
00000000000104f4	movzbl	%sil, %ecx
00000000000104f8	movslq	%ecx, %rax
00000000000104fb	cmpq	$0x0, %rax
00000000000104ff	je	0x10524
0000000000010505	leaq	0x51716(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
000000000001050c	leaq	0x50c93(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010513	leaq	0x51793(%rip), %rcx ## literal pool for: "instruction->raw.sib.offset == instruction->length - 1"
000000000001051a	movl	$0x2d9, %edx
000000000001051f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010524	jmp	0x10529
0000000000010529	movq	-0x8(%rbp), %rax
000000000001052d	movq	0x430(%rax), %rcx
0000000000010534	orq	$0x2, %rcx
0000000000010538	movq	%rcx, 0x430(%rax)
000000000001053f	movzbl	-0x9(%rbp), %edx
0000000000010543	sarl	$0x6, %edx
0000000000010546	andl	$0x3, %edx
0000000000010549	movb	%dl, %sil
000000000001054c	movq	-0x8(%rbp), %rax
0000000000010550	movb	%sil, 0x57c(%rax)
0000000000010557	movzbl	-0x9(%rbp), %edx
000000000001055b	sarl	$0x3, %edx
000000000001055e	andl	$0x7, %edx
0000000000010561	movb	%dl, %sil
0000000000010564	movq	-0x8(%rbp), %rax
0000000000010568	movb	%sil, 0x57d(%rax)
000000000001056f	movzbl	-0x9(%rbp), %edx
0000000000010573	sarl	$0x0, %edx
0000000000010576	andl	$0x7, %edx
0000000000010579	movb	%dl, %sil
000000000001057c	movq	-0x8(%rbp), %rax
0000000000010580	movb	%sil, 0x57e(%rax)
0000000000010587	addq	$0x10, %rsp
000000000001058b	popq	%rbp
000000000001058c	retq
000000000001058d	nopl	(%rax)
_ZydisReadDisplacement:
0000000000010590	pushq	%rbp
0000000000010591	movq	%rsp, %rbp
0000000000010594	subq	$0x50, %rsp
0000000000010598	movb	%dl, %al
000000000001059a	movq	%rdi, -0x10(%rbp)
000000000001059e	movq	%rsi, -0x18(%rbp)
00000000000105a2	movb	%al, -0x19(%rbp)
00000000000105a5	cmpq	$0x0, -0x10(%rbp)
00000000000105aa	setne	%al
00000000000105ad	xorb	$-0x1, %al
00000000000105af	andb	$0x1, %al
00000000000105b1	movzbl	%al, %edx
00000000000105b4	movslq	%edx, %rsi
00000000000105b7	cmpq	$0x0, %rsi
00000000000105bb	je	0x105e0
00000000000105c1	leaq	0x5171c(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
00000000000105c8	leaq	0x50bd7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000105cf	leaq	0x50c05(%rip), %rcx ## literal pool for: "context"
00000000000105d6	movl	$0x2ef, %edx
00000000000105db	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000105e0	jmp	0x105e5
00000000000105e5	cmpq	$0x0, -0x18(%rbp)
00000000000105ea	setne	%al
00000000000105ed	xorb	$-0x1, %al
00000000000105ef	andb	$0x1, %al
00000000000105f1	movzbl	%al, %ecx
00000000000105f4	movslq	%ecx, %rdx
00000000000105f7	cmpq	$0x0, %rdx
00000000000105fb	je	0x10620
0000000000010601	leaq	0x516dc(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010608	leaq	0x50b97(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001060f	leaq	0x50bcd(%rip), %rcx ## literal pool for: "instruction"
0000000000010616	movl	$0x2f0, %edx
000000000001061b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010620	jmp	0x10625
0000000000010625	movq	-0x18(%rbp), %rax
0000000000010629	movzbl	0x588(%rax), %ecx
0000000000010630	cmpl	$0x0, %ecx
0000000000010633	sete	%dl
0000000000010636	xorb	$-0x1, %dl
0000000000010639	andb	$0x1, %dl
000000000001063c	movzbl	%dl, %ecx
000000000001063f	movslq	%ecx, %rax
0000000000010642	cmpq	$0x0, %rax
0000000000010646	je	0x1066b
000000000001064c	leaq	0x51691(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010653	leaq	0x50b4c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001065a	leaq	0x51699(%rip), %rcx ## literal pool for: "instruction->raw.disp.size == 0"
0000000000010661	movl	$0x2f1, %edx
0000000000010666	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001066b	jmp	0x10670
0000000000010670	movb	-0x19(%rbp), %al
0000000000010673	movq	-0x18(%rbp), %rcx
0000000000010677	movb	%al, 0x588(%rcx)
000000000001067d	movq	-0x18(%rbp), %rcx
0000000000010681	movb	0x8(%rcx), %al
0000000000010684	movb	%al, 0x589(%rcx)
000000000001068a	movzbl	-0x19(%rbp), %edx
000000000001068e	movl	%edx, %esi
0000000000010690	subl	$0x8, %esi
0000000000010693	movl	%edx, -0x40(%rbp)
0000000000010696	movl	%esi, -0x44(%rbp)
0000000000010699	je	0x106e0
000000000001069f	jmp	0x106a4
00000000000106a4	movl	-0x40(%rbp), %eax
00000000000106a7	subl	$0x10, %eax
00000000000106aa	movl	%eax, -0x48(%rbp)
00000000000106ad	je	0x1072f
00000000000106b3	jmp	0x106b8
00000000000106b8	movl	-0x40(%rbp), %eax
00000000000106bb	subl	$0x20, %eax
00000000000106be	movl	%eax, -0x4c(%rbp)
00000000000106c1	je	0x10786
00000000000106c7	jmp	0x106cc
00000000000106cc	movl	-0x40(%rbp), %eax
00000000000106cf	subl	$0x40, %eax
00000000000106d2	movl	%eax, -0x50(%rbp)
00000000000106d5	je	0x107dc
00000000000106db	jmp	0x10832
00000000000106e0	jmp	0x106e5
00000000000106e5	movq	-0x10(%rbp), %rdi
00000000000106e9	movq	-0x18(%rbp), %rsi
00000000000106ed	leaq	-0x1a(%rbp), %rdx
00000000000106f1	callq	_ZydisInputNext
00000000000106f6	movl	%eax, -0x20(%rbp)
00000000000106f9	movl	-0x20(%rbp), %eax
00000000000106fc	andl	$0x80000000, %eax
0000000000010701	cmpl	$0x0, %eax
0000000000010704	je	0x10715
000000000001070a	movl	-0x20(%rbp), %eax
000000000001070d	movl	%eax, -0x4(%rbp)
0000000000010710	jmp	0x10858
0000000000010715	jmp	0x1071a
000000000001071a	movsbq	-0x1a(%rbp), %rax
000000000001071f	movq	-0x18(%rbp), %rcx
0000000000010723	movq	%rax, 0x580(%rcx)
000000000001072a	jmp	0x10851
000000000001072f	jmp	0x10734
0000000000010734	movq	-0x10(%rbp), %rdi
0000000000010738	movq	-0x18(%rbp), %rsi
000000000001073c	leaq	-0x22(%rbp), %rax
0000000000010740	movq	%rax, %rdx
0000000000010743	movl	$0x2, %ecx
0000000000010748	callq	_ZydisInputNextBytes
000000000001074d	movl	%eax, -0x28(%rbp)
0000000000010750	movl	-0x28(%rbp), %eax
0000000000010753	andl	$0x80000000, %eax
0000000000010758	cmpl	$0x0, %eax
000000000001075b	je	0x1076c
0000000000010761	movl	-0x28(%rbp), %eax
0000000000010764	movl	%eax, -0x4(%rbp)
0000000000010767	jmp	0x10858
000000000001076c	jmp	0x10771
0000000000010771	movswq	-0x22(%rbp), %rax
0000000000010776	movq	-0x18(%rbp), %rcx
000000000001077a	movq	%rax, 0x580(%rcx)
0000000000010781	jmp	0x10851
0000000000010786	jmp	0x1078b
000000000001078b	movq	-0x10(%rbp), %rdi
000000000001078f	movq	-0x18(%rbp), %rsi
0000000000010793	leaq	-0x2c(%rbp), %rax
0000000000010797	movq	%rax, %rdx
000000000001079a	movl	$0x4, %ecx
000000000001079f	callq	_ZydisInputNextBytes
00000000000107a4	movl	%eax, -0x30(%rbp)
00000000000107a7	movl	-0x30(%rbp), %eax
00000000000107aa	andl	$0x80000000, %eax
00000000000107af	cmpl	$0x0, %eax
00000000000107b2	je	0x107c3
00000000000107b8	movl	-0x30(%rbp), %eax
00000000000107bb	movl	%eax, -0x4(%rbp)
00000000000107be	jmp	0x10858
00000000000107c3	jmp	0x107c8
00000000000107c8	movslq	-0x2c(%rbp), %rax
00000000000107cc	movq	-0x18(%rbp), %rcx
00000000000107d0	movq	%rax, 0x580(%rcx)
00000000000107d7	jmp	0x10851
00000000000107dc	jmp	0x107e1
00000000000107e1	movq	-0x10(%rbp), %rdi
00000000000107e5	movq	-0x18(%rbp), %rsi
00000000000107e9	leaq	-0x38(%rbp), %rax
00000000000107ed	movq	%rax, %rdx
00000000000107f0	movl	$0x8, %ecx
00000000000107f5	callq	_ZydisInputNextBytes
00000000000107fa	movl	%eax, -0x3c(%rbp)
00000000000107fd	movl	-0x3c(%rbp), %eax
0000000000010800	andl	$0x80000000, %eax
0000000000010805	cmpl	$0x0, %eax
0000000000010808	je	0x10819
000000000001080e	movl	-0x3c(%rbp), %eax
0000000000010811	movl	%eax, -0x4(%rbp)
0000000000010814	jmp	0x10858
0000000000010819	jmp	0x1081e
000000000001081e	movq	-0x38(%rbp), %rax
0000000000010822	movq	-0x18(%rbp), %rcx
0000000000010826	movq	%rax, 0x580(%rcx)
000000000001082d	jmp	0x10851
0000000000010832	leaq	0x514ab(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010839	leaq	0x50966(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010840	leaq	0x50bc5(%rip), %rcx ## literal pool for: "0"
0000000000010847	movl	$0x315, %edx
000000000001084c	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010851	movl	$0x100000, -0x4(%rbp)
0000000000010858	movl	-0x4(%rbp), %eax
000000000001085b	addq	$0x50, %rsp
000000000001085f	popq	%rbp
0000000000010860	retq
0000000000010861	nopw	%cs:(%rax,%rax)
000000000001086b	nopl	(%rax,%rax)
_ZydisReadImmediate:
0000000000010870	pushq	%rbp
0000000000010871	movq	%rsp, %rbp
0000000000010874	pushq	%rbx
0000000000010875	subq	$0x68, %rsp
0000000000010879	movb	%r9b, %al
000000000001087c	movb	%r8b, %r10b
000000000001087f	movb	%cl, %r11b
0000000000010882	movb	%dl, %bl
0000000000010884	movq	%rdi, -0x18(%rbp)
0000000000010888	movq	%rsi, -0x20(%rbp)
000000000001088c	movb	%bl, -0x21(%rbp)
000000000001088f	movb	%r11b, -0x22(%rbp)
0000000000010893	movb	%r10b, -0x23(%rbp)
0000000000010897	movb	%al, -0x24(%rbp)
000000000001089a	cmpq	$0x0, -0x18(%rbp)
000000000001089f	setne	%al
00000000000108a2	xorb	$-0x1, %al
00000000000108a4	andb	$0x1, %al
00000000000108a6	movzbl	%al, %ecx
00000000000108a9	movslq	%ecx, %rsi
00000000000108ac	cmpq	$0x0, %rsi
00000000000108b0	je	0x108d5
00000000000108b6	leaq	0x5145d(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
00000000000108bd	leaq	0x508e2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000108c4	leaq	0x50910(%rip), %rcx ## literal pool for: "context"
00000000000108cb	movl	$0x32d, %edx
00000000000108d0	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000108d5	jmp	0x108da
00000000000108da	cmpq	$0x0, -0x20(%rbp)
00000000000108df	setne	%al
00000000000108e2	xorb	$-0x1, %al
00000000000108e4	andb	$0x1, %al
00000000000108e6	movzbl	%al, %ecx
00000000000108e9	movslq	%ecx, %rdx
00000000000108ec	cmpq	$0x0, %rdx
00000000000108f0	je	0x10915
00000000000108f6	leaq	0x5141d(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
00000000000108fd	leaq	0x508a2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010904	leaq	0x508d8(%rip), %rcx ## literal pool for: "instruction"
000000000001090b	movl	$0x32e, %edx
0000000000010910	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010915	jmp	0x1091a
000000000001091a	movzbl	-0x21(%rbp), %eax
000000000001091e	cmpl	$0x0, %eax
0000000000010921	movb	$0x1, %cl
0000000000010923	movb	%cl, -0x4d(%rbp)
0000000000010926	je	0x10939
000000000001092c	movzbl	-0x21(%rbp), %eax
0000000000010930	cmpl	$0x1, %eax
0000000000010933	sete	%cl
0000000000010936	movb	%cl, -0x4d(%rbp)
0000000000010939	movb	-0x4d(%rbp), %al
000000000001093c	xorb	$-0x1, %al
000000000001093e	andb	$0x1, %al
0000000000010940	movzbl	%al, %ecx
0000000000010943	movslq	%ecx, %rdx
0000000000010946	cmpq	$0x0, %rdx
000000000001094a	je	0x1096f
0000000000010950	leaq	0x513c3(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010957	leaq	0x50848(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001095e	leaq	0x513c8(%rip), %rcx ## literal pool for: "(id == 0) || (id == 1)"
0000000000010965	movl	$0x32f, %edx
000000000001096a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001096f	jmp	0x10974
0000000000010974	movzbl	-0x23(%rbp), %eax
0000000000010978	cmpl	$0x0, %eax
000000000001097b	movb	$0x1, %cl
000000000001097d	movb	%cl, -0x4e(%rbp)
0000000000010980	jne	0x10992
0000000000010986	cmpb	$0x0, -0x24(%rbp)
000000000001098a	setne	%al
000000000001098d	xorb	$-0x1, %al
000000000001098f	movb	%al, -0x4e(%rbp)
0000000000010992	movb	-0x4e(%rbp), %al
0000000000010995	xorb	$-0x1, %al
0000000000010997	andb	$0x1, %al
0000000000010999	movzbl	%al, %ecx
000000000001099c	movslq	%ecx, %rdx
000000000001099f	cmpq	$0x0, %rdx
00000000000109a3	je	0x109c8
00000000000109a9	leaq	0x5136a(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
00000000000109b0	leaq	0x507ef(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000109b7	leaq	0x51386(%rip), %rcx ## literal pool for: "is_signed || !is_relative"
00000000000109be	movl	$0x330, %edx
00000000000109c3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000109c8	jmp	0x109cd
00000000000109cd	movq	-0x20(%rbp), %rax
00000000000109d1	addq	$0x4c8, %rax
00000000000109d7	addq	$0xc8, %rax
00000000000109dd	movzbl	-0x21(%rbp), %ecx
00000000000109e1	movl	%ecx, %edx
00000000000109e3	imulq	$0x18, %rdx, %rdx
00000000000109e7	addq	%rdx, %rax
00000000000109ea	movzbl	0x10(%rax), %ecx
00000000000109ee	cmpl	$0x0, %ecx
00000000000109f1	sete	%sil
00000000000109f5	xorb	$-0x1, %sil
00000000000109f9	andb	$0x1, %sil
00000000000109fd	movzbl	%sil, %ecx
0000000000010a01	movslq	%ecx, %rax
0000000000010a04	cmpq	$0x0, %rax
0000000000010a08	je	0x10a2d
0000000000010a0e	leaq	0x51305(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010a15	leaq	0x5078a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010a1c	leaq	0x5133b(%rip), %rcx ## literal pool for: "instruction->raw.imm[id].size == 0"
0000000000010a23	movl	$0x331, %edx
0000000000010a28	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010a2d	jmp	0x10a32
0000000000010a32	movb	-0x22(%rbp), %al
0000000000010a35	movq	-0x20(%rbp), %rcx
0000000000010a39	movzbl	-0x21(%rbp), %edx
0000000000010a3d	movl	%edx, %esi
0000000000010a3f	leaq	(%rsi,%rsi,2), %rsi
0000000000010a43	movb	%al, 0x5a0(%rcx,%rsi,8)
0000000000010a4a	movq	-0x20(%rbp), %rcx
0000000000010a4e	movb	0x8(%rcx), %al
0000000000010a51	movzbl	-0x21(%rbp), %edx
0000000000010a55	movl	%edx, %esi
0000000000010a57	leaq	(%rsi,%rsi,2), %rsi
0000000000010a5b	movb	%al, 0x5a1(%rcx,%rsi,8)
0000000000010a62	movb	-0x23(%rbp), %al
0000000000010a65	movq	-0x20(%rbp), %rcx
0000000000010a69	movzbl	-0x21(%rbp), %edx
0000000000010a6d	movl	%edx, %esi
0000000000010a6f	leaq	(%rsi,%rsi,2), %rsi
0000000000010a73	movb	%al, 0x590(%rcx,%rsi,8)
0000000000010a7a	movb	-0x24(%rbp), %al
0000000000010a7d	movq	-0x20(%rbp), %rcx
0000000000010a81	movzbl	-0x21(%rbp), %edx
0000000000010a85	movl	%edx, %esi
0000000000010a87	leaq	(%rsi,%rsi,2), %rsi
0000000000010a8b	movb	%al, 0x591(%rcx,%rsi,8)
0000000000010a92	movzbl	-0x22(%rbp), %edx
0000000000010a96	movl	%edx, %edi
0000000000010a98	subl	$0x8, %edi
0000000000010a9b	movl	%edx, -0x54(%rbp)
0000000000010a9e	movl	%edi, -0x58(%rbp)
0000000000010aa1	je	0x10ae8
0000000000010aa7	jmp	0x10aac
0000000000010aac	movl	-0x54(%rbp), %eax
0000000000010aaf	subl	$0x10, %eax
0000000000010ab2	movl	%eax, -0x5c(%rbp)
0000000000010ab5	je	0x10b87
0000000000010abb	jmp	0x10ac0
0000000000010ac0	movl	-0x54(%rbp), %eax
0000000000010ac3	subl	$0x20, %eax
0000000000010ac6	movl	%eax, -0x60(%rbp)
0000000000010ac9	je	0x10c2e
0000000000010acf	jmp	0x10ad4
0000000000010ad4	movl	-0x54(%rbp), %eax
0000000000010ad7	subl	$0x40, %eax
0000000000010ada	movl	%eax, -0x64(%rbp)
0000000000010add	je	0x10cd3
0000000000010ae3	jmp	0x10d77
0000000000010ae8	jmp	0x10aed
0000000000010aed	movq	-0x18(%rbp), %rdi
0000000000010af1	movq	-0x20(%rbp), %rsi
0000000000010af5	leaq	-0x25(%rbp), %rdx
0000000000010af9	callq	_ZydisInputNext
0000000000010afe	movl	%eax, -0x2c(%rbp)
0000000000010b01	movl	-0x2c(%rbp), %eax
0000000000010b04	andl	$0x80000000, %eax
0000000000010b09	cmpl	$0x0, %eax
0000000000010b0c	je	0x10b1d
0000000000010b12	movl	-0x2c(%rbp), %eax
0000000000010b15	movl	%eax, -0xc(%rbp)
0000000000010b18	jmp	0x10d9d
0000000000010b1d	jmp	0x10b22
0000000000010b22	cmpb	$0x0, -0x23(%rbp)
0000000000010b26	je	0x10b59
0000000000010b2c	movsbq	-0x25(%rbp), %rax
0000000000010b31	movq	-0x20(%rbp), %rcx
0000000000010b35	addq	$0x4c8, %rcx
0000000000010b3c	addq	$0xc8, %rcx
0000000000010b43	movzbl	-0x21(%rbp), %edx
0000000000010b47	movl	%edx, %esi
0000000000010b49	imulq	$0x18, %rsi, %rsi
0000000000010b4d	addq	%rsi, %rcx
0000000000010b50	movq	%rax, 0x8(%rcx)
0000000000010b54	jmp	0x10b82
0000000000010b59	movzbl	-0x25(%rbp), %eax
0000000000010b5d	movl	%eax, %ecx
0000000000010b5f	movq	-0x20(%rbp), %rdx
0000000000010b63	addq	$0x4c8, %rdx
0000000000010b6a	addq	$0xc8, %rdx
0000000000010b71	movzbl	-0x21(%rbp), %eax
0000000000010b75	movl	%eax, %esi
0000000000010b77	imulq	$0x18, %rsi, %rsi
0000000000010b7b	addq	%rsi, %rdx
0000000000010b7e	movq	%rcx, 0x8(%rdx)
0000000000010b82	jmp	0x10d96
0000000000010b87	jmp	0x10b8c
0000000000010b8c	movq	-0x18(%rbp), %rdi
0000000000010b90	movq	-0x20(%rbp), %rsi
0000000000010b94	leaq	-0x2e(%rbp), %rax
0000000000010b98	movq	%rax, %rdx
0000000000010b9b	movl	$0x2, %ecx
0000000000010ba0	callq	_ZydisInputNextBytes
0000000000010ba5	movl	%eax, -0x34(%rbp)
0000000000010ba8	movl	-0x34(%rbp), %eax
0000000000010bab	andl	$0x80000000, %eax
0000000000010bb0	cmpl	$0x0, %eax
0000000000010bb3	je	0x10bc4
0000000000010bb9	movl	-0x34(%rbp), %eax
0000000000010bbc	movl	%eax, -0xc(%rbp)
0000000000010bbf	jmp	0x10d9d
0000000000010bc4	jmp	0x10bc9
0000000000010bc9	cmpb	$0x0, -0x23(%rbp)
0000000000010bcd	je	0x10c00
0000000000010bd3	movswq	-0x2e(%rbp), %rax
0000000000010bd8	movq	-0x20(%rbp), %rcx
0000000000010bdc	addq	$0x4c8, %rcx
0000000000010be3	addq	$0xc8, %rcx
0000000000010bea	movzbl	-0x21(%rbp), %edx
0000000000010bee	movl	%edx, %esi
0000000000010bf0	imulq	$0x18, %rsi, %rsi
0000000000010bf4	addq	%rsi, %rcx
0000000000010bf7	movq	%rax, 0x8(%rcx)
0000000000010bfb	jmp	0x10c29
0000000000010c00	movzwl	-0x2e(%rbp), %eax
0000000000010c04	movl	%eax, %ecx
0000000000010c06	movq	-0x20(%rbp), %rdx
0000000000010c0a	addq	$0x4c8, %rdx
0000000000010c11	addq	$0xc8, %rdx
0000000000010c18	movzbl	-0x21(%rbp), %eax
0000000000010c1c	movl	%eax, %esi
0000000000010c1e	imulq	$0x18, %rsi, %rsi
0000000000010c22	addq	%rsi, %rdx
0000000000010c25	movq	%rcx, 0x8(%rdx)
0000000000010c29	jmp	0x10d96
0000000000010c2e	jmp	0x10c33
0000000000010c33	movq	-0x18(%rbp), %rdi
0000000000010c37	movq	-0x20(%rbp), %rsi
0000000000010c3b	leaq	-0x38(%rbp), %rax
0000000000010c3f	movq	%rax, %rdx
0000000000010c42	movl	$0x4, %ecx
0000000000010c47	callq	_ZydisInputNextBytes
0000000000010c4c	movl	%eax, -0x3c(%rbp)
0000000000010c4f	movl	-0x3c(%rbp), %eax
0000000000010c52	andl	$0x80000000, %eax
0000000000010c57	cmpl	$0x0, %eax
0000000000010c5a	je	0x10c6b
0000000000010c60	movl	-0x3c(%rbp), %eax
0000000000010c63	movl	%eax, -0xc(%rbp)
0000000000010c66	jmp	0x10d9d
0000000000010c6b	jmp	0x10c70
0000000000010c70	cmpb	$0x0, -0x23(%rbp)
0000000000010c74	je	0x10ca6
0000000000010c7a	movslq	-0x38(%rbp), %rax
0000000000010c7e	movq	-0x20(%rbp), %rcx
0000000000010c82	addq	$0x4c8, %rcx
0000000000010c89	addq	$0xc8, %rcx
0000000000010c90	movzbl	-0x21(%rbp), %edx
0000000000010c94	movl	%edx, %esi
0000000000010c96	imulq	$0x18, %rsi, %rsi
0000000000010c9a	addq	%rsi, %rcx
0000000000010c9d	movq	%rax, 0x8(%rcx)
0000000000010ca1	jmp	0x10cce
0000000000010ca6	movl	-0x38(%rbp), %eax
0000000000010ca9	movl	%eax, %ecx
0000000000010cab	movq	-0x20(%rbp), %rdx
0000000000010caf	addq	$0x4c8, %rdx
0000000000010cb6	addq	$0xc8, %rdx
0000000000010cbd	movzbl	-0x21(%rbp), %eax
0000000000010cc1	movl	%eax, %esi
0000000000010cc3	imulq	$0x18, %rsi, %rsi
0000000000010cc7	addq	%rsi, %rdx
0000000000010cca	movq	%rcx, 0x8(%rdx)
0000000000010cce	jmp	0x10d96
0000000000010cd3	jmp	0x10cd8
0000000000010cd8	movq	-0x18(%rbp), %rdi
0000000000010cdc	movq	-0x20(%rbp), %rsi
0000000000010ce0	leaq	-0x48(%rbp), %rax
0000000000010ce4	movq	%rax, %rdx
0000000000010ce7	movl	$0x8, %ecx
0000000000010cec	callq	_ZydisInputNextBytes
0000000000010cf1	movl	%eax, -0x4c(%rbp)
0000000000010cf4	movl	-0x4c(%rbp), %eax
0000000000010cf7	andl	$0x80000000, %eax
0000000000010cfc	cmpl	$0x0, %eax
0000000000010cff	je	0x10d10
0000000000010d05	movl	-0x4c(%rbp), %eax
0000000000010d08	movl	%eax, -0xc(%rbp)
0000000000010d0b	jmp	0x10d9d
0000000000010d10	jmp	0x10d15
0000000000010d15	cmpb	$0x0, -0x23(%rbp)
0000000000010d19	je	0x10d4b
0000000000010d1f	movq	-0x48(%rbp), %rax
0000000000010d23	movq	-0x20(%rbp), %rcx
0000000000010d27	addq	$0x4c8, %rcx
0000000000010d2e	addq	$0xc8, %rcx
0000000000010d35	movzbl	-0x21(%rbp), %edx
0000000000010d39	movl	%edx, %esi
0000000000010d3b	imulq	$0x18, %rsi, %rsi
0000000000010d3f	addq	%rsi, %rcx
0000000000010d42	movq	%rax, 0x8(%rcx)
0000000000010d46	jmp	0x10d72
0000000000010d4b	movq	-0x48(%rbp), %rax
0000000000010d4f	movq	-0x20(%rbp), %rcx
0000000000010d53	addq	$0x4c8, %rcx
0000000000010d5a	addq	$0xc8, %rcx
0000000000010d61	movzbl	-0x21(%rbp), %edx
0000000000010d65	movl	%edx, %esi
0000000000010d67	imulq	$0x18, %rsi, %rsi
0000000000010d6b	addq	%rsi, %rcx
0000000000010d6e	movq	%rax, 0x8(%rcx)
0000000000010d72	jmp	0x10d96
0000000000010d77	leaq	0x50f9c(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010d7e	leaq	0x50421(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010d85	leaq	0x50680(%rip), %rcx ## literal pool for: "0"
0000000000010d8c	movl	$0x36e, %edx
0000000000010d91	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010d96	movl	$0x100000, -0xc(%rbp)
0000000000010d9d	movl	-0xc(%rbp), %eax
0000000000010da0	addq	$0x68, %rsp
0000000000010da4	popq	%rbx
0000000000010da5	popq	%rbp
0000000000010da6	retq
0000000000010da7	nopw	(%rax,%rax)
_ZydisDecodeOperandImplicitRegister:
0000000000010db0	pushq	%rbp
0000000000010db1	movq	%rsp, %rbp
0000000000010db4	subq	$0x40, %rsp
0000000000010db8	movq	%rdi, -0x8(%rbp)
0000000000010dbc	movq	%rsi, -0x10(%rbp)
0000000000010dc0	movq	%rdx, -0x18(%rbp)
0000000000010dc4	movq	%rcx, -0x20(%rbp)
0000000000010dc8	cmpq	$0x0, -0x8(%rbp)
0000000000010dcd	setne	%al
0000000000010dd0	xorb	$-0x1, %al
0000000000010dd2	andb	$0x1, %al
0000000000010dd4	movzbl	%al, %r8d
0000000000010dd8	movslq	%r8d, %rcx
0000000000010ddb	cmpq	$0x0, %rcx
0000000000010ddf	je	0x10e04
0000000000010de5	leaq	0x51af4(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
0000000000010dec	leaq	0x503b3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010df3	leaq	0x503e1(%rip), %rcx ## literal pool for: "context"
0000000000010dfa	movl	$0x64d, %edx
0000000000010dff	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010e04	jmp	0x10e09
0000000000010e09	cmpq	$0x0, -0x10(%rbp)
0000000000010e0e	setne	%al
0000000000010e11	xorb	$-0x1, %al
0000000000010e13	andb	$0x1, %al
0000000000010e15	movzbl	%al, %ecx
0000000000010e18	movslq	%ecx, %rdx
0000000000010e1b	cmpq	$0x0, %rdx
0000000000010e1f	je	0x10e44
0000000000010e25	leaq	0x51ab4(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
0000000000010e2c	leaq	0x50373(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010e33	leaq	0x503a9(%rip), %rcx ## literal pool for: "instruction"
0000000000010e3a	movl	$0x64e, %edx
0000000000010e3f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010e44	jmp	0x10e49
0000000000010e49	cmpq	$0x0, -0x18(%rbp)
0000000000010e4e	setne	%al
0000000000010e51	xorb	$-0x1, %al
0000000000010e53	andb	$0x1, %al
0000000000010e55	movzbl	%al, %ecx
0000000000010e58	movslq	%ecx, %rdx
0000000000010e5b	cmpq	$0x0, %rdx
0000000000010e5f	je	0x10e84
0000000000010e65	leaq	0x51a74(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
0000000000010e6c	leaq	0x50333(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010e73	leaq	0x51a89(%rip), %rcx ## literal pool for: "operand"
0000000000010e7a	movl	$0x64f, %edx
0000000000010e7f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010e84	jmp	0x10e89
0000000000010e89	cmpq	$0x0, -0x20(%rbp)
0000000000010e8e	setne	%al
0000000000010e91	xorb	$-0x1, %al
0000000000010e93	andb	$0x1, %al
0000000000010e95	movzbl	%al, %ecx
0000000000010e98	movslq	%ecx, %rdx
0000000000010e9b	cmpq	$0x0, %rdx
0000000000010e9f	je	0x10ec4
0000000000010ea5	leaq	0x51a34(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
0000000000010eac	leaq	0x502f3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010eb3	leaq	0x50b4e(%rip), %rcx ## literal pool for: "definition"
0000000000010eba	movl	$0x650, %edx
0000000000010ebf	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000010ec4	jmp	0x10ec9
0000000000010ec9	movq	-0x18(%rbp), %rax
0000000000010ecd	movl	$0x1, 0x4(%rax)
0000000000010ed4	movq	-0x20(%rbp), %rax
0000000000010ed8	movzbl	0x9(%rax), %ecx
0000000000010edc	movl	%ecx, %eax
0000000000010ede	movl	%eax, %ecx
0000000000010ee0	andl	$0x7, %ecx
0000000000010ee3	movl	%ecx, %eax
0000000000010ee5	movb	%al, %dl
0000000000010ee7	subb	$0x6, %dl
0000000000010eea	movq	%rax, -0x28(%rbp)
0000000000010eee	movb	%dl, -0x29(%rbp)
0000000000010ef1	ja	0x110f2
0000000000010ef7	leaq	0x21a(%rip), %rax
0000000000010efe	movq	-0x28(%rbp), %rcx
0000000000010f02	movslq	(%rax,%rcx,4), %rdx
0000000000010f06	addq	%rax, %rdx
0000000000010f09	jmpq	*%rdx
0000000000010f0b	movq	-0x20(%rbp), %rax
0000000000010f0f	movw	0xa(%rax), %cx
0000000000010f13	andw	$0x1ff, %cx
0000000000010f18	movzwl	%cx, %edx
0000000000010f1b	movq	-0x18(%rbp), %rax
0000000000010f1f	movl	%edx, 0x20(%rax)
0000000000010f22	jmp	0x11111
0000000000010f27	movq	-0x8(%rbp), %rax
0000000000010f2b	movzbl	0x24(%rax), %ecx
0000000000010f2f	movl	%ecx, %eax
0000000000010f31	leaq	_ZydisDecodeOperandImplicitRegister.lookup(%rip), %rdx
0000000000010f38	movl	(%rdx,%rax,4), %edi
0000000000010f3b	movq	-0x20(%rbp), %rax
0000000000010f3f	movb	0xa(%rax), %sil
0000000000010f43	andb	$0x3f, %sil
0000000000010f47	movzbl	%sil, %esi
0000000000010f4b	callq	_ZydisRegisterEncode
0000000000010f50	movq	-0x18(%rbp), %rdx
0000000000010f54	movl	%eax, 0x20(%rdx)
0000000000010f57	jmp	0x11111
0000000000010f5c	movq	-0x10(%rbp), %rax
0000000000010f60	movzbl	0x17(%rax), %ecx
0000000000010f64	cmpl	$0x10, %ecx
0000000000010f67	jne	0x10f7a
0000000000010f6d	movl	$0x2, %eax
0000000000010f72	movl	%eax, -0x30(%rbp)
0000000000010f75	jmp	0x10f95
0000000000010f7a	movq	-0x10(%rbp), %rax
0000000000010f7e	movzbl	0x17(%rax), %ecx
0000000000010f82	cmpl	$0x20, %ecx
0000000000010f85	movl	$0x3, %ecx
0000000000010f8a	movl	$0x4, %edx
0000000000010f8f	cmovel	%ecx, %edx
0000000000010f92	movl	%edx, -0x30(%rbp)
0000000000010f95	movl	-0x30(%rbp), %eax
0000000000010f98	movq	-0x20(%rbp), %rcx
0000000000010f9c	movb	0xa(%rcx), %dl
0000000000010f9f	andb	$0x3f, %dl
0000000000010fa2	movl	%eax, %edi
0000000000010fa4	movzbl	%dl, %esi
0000000000010fa7	callq	_ZydisRegisterEncode
0000000000010fac	movq	-0x18(%rbp), %rcx
0000000000010fb0	movl	%eax, 0x20(%rcx)
0000000000010fb3	jmp	0x11111
0000000000010fb8	movq	-0x8(%rbp), %rax
0000000000010fbc	movq	(%rax), %rax
0000000000010fbf	cmpl	$0x0, 0x4(%rax)
0000000000010fc3	jne	0x10fd6
0000000000010fc9	movl	$0x2, %eax
0000000000010fce	movl	%eax, -0x34(%rbp)
0000000000010fd1	jmp	0x10ff3
0000000000010fd6	movq	-0x8(%rbp), %rax
0000000000010fda	movq	(%rax), %rax
0000000000010fdd	movl	0x4(%rax), %ecx
0000000000010fe0	cmpl	$0x1, %ecx
0000000000010fe3	movl	$0x3, %ecx
0000000000010fe8	movl	$0x4, %edx
0000000000010fed	cmovel	%ecx, %edx
0000000000010ff0	movl	%edx, -0x34(%rbp)
0000000000010ff3	movl	-0x34(%rbp), %eax
0000000000010ff6	movq	-0x20(%rbp), %rcx
0000000000010ffa	movb	0xa(%rcx), %dl
0000000000010ffd	andb	$0x3f, %dl
0000000000011000	movl	%eax, %edi
0000000000011002	movzbl	%dl, %esi
0000000000011005	callq	_ZydisRegisterEncode
000000000001100a	movq	-0x18(%rbp), %rcx
000000000001100e	movl	%eax, 0x20(%rcx)
0000000000011011	jmp	0x11111
0000000000011016	movq	-0x10(%rbp), %rax
000000000001101a	movzbl	0x17(%rax), %ecx
000000000001101e	cmpl	$0x10, %ecx
0000000000011021	jne	0x11034
0000000000011027	movl	$0xc3, %eax
000000000001102c	movl	%eax, -0x38(%rbp)
000000000001102f	jmp	0x1104f
0000000000011034	movq	-0x10(%rbp), %rax
0000000000011038	movzbl	0x17(%rax), %ecx
000000000001103c	cmpl	$0x20, %ecx
000000000001103f	movl	$0xc4, %ecx
0000000000011044	movl	$0xc5, %edx
0000000000011049	cmovel	%ecx, %edx
000000000001104c	movl	%edx, -0x38(%rbp)
000000000001104f	movl	-0x38(%rbp), %eax
0000000000011052	movq	-0x18(%rbp), %rcx
0000000000011056	movl	%eax, 0x20(%rcx)
0000000000011059	jmp	0x11111
000000000001105e	movq	-0x8(%rbp), %rax
0000000000011062	movq	(%rax), %rax
0000000000011065	cmpl	$0x0, 0x4(%rax)
0000000000011069	jne	0x1107c
000000000001106f	movl	$0xc4, %eax
0000000000011074	movl	%eax, -0x3c(%rbp)
0000000000011077	jmp	0x11099
000000000001107c	movq	-0x8(%rbp), %rax
0000000000011080	movq	(%rax), %rax
0000000000011083	movl	0x4(%rax), %ecx
0000000000011086	cmpl	$0x1, %ecx
0000000000011089	movl	$0xc4, %ecx
000000000001108e	movl	$0xc5, %edx
0000000000011093	cmovel	%ecx, %edx
0000000000011096	movl	%edx, -0x3c(%rbp)
0000000000011099	movl	-0x3c(%rbp), %eax
000000000001109c	movq	-0x18(%rbp), %rcx
00000000000110a0	movl	%eax, 0x20(%rcx)
00000000000110a3	jmp	0x11111
00000000000110a8	movq	-0x8(%rbp), %rax
00000000000110ac	movq	(%rax), %rax
00000000000110af	cmpl	$0x0, 0x4(%rax)
00000000000110b3	jne	0x110c6
00000000000110b9	movl	$0xc0, %eax
00000000000110be	movl	%eax, -0x40(%rbp)
00000000000110c1	jmp	0x110e3
00000000000110c6	movq	-0x8(%rbp), %rax
00000000000110ca	movq	(%rax), %rax
00000000000110cd	movl	0x4(%rax), %ecx
00000000000110d0	cmpl	$0x1, %ecx
00000000000110d3	movl	$0xc1, %ecx
00000000000110d8	movl	$0xc2, %edx
00000000000110dd	cmovel	%ecx, %edx
00000000000110e0	movl	%edx, -0x40(%rbp)
00000000000110e3	movl	-0x40(%rbp), %eax
00000000000110e6	movq	-0x18(%rbp), %rcx
00000000000110ea	movl	%eax, 0x20(%rcx)
00000000000110ed	jmp	0x11111
00000000000110f2	leaq	0x517e7(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
00000000000110f9	leaq	0x500a6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011100	leaq	0x50305(%rip), %rcx ## literal pool for: "0"
0000000000011107	movl	$0x684, %edx
000000000001110c	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011111	addq	$0x40, %rsp
0000000000011115	popq	%rbp
0000000000011116	retq
0000000000011117	nop
0000000000011118	rep		std
000000000001111a	.byte 0xff #bad opcode
000000000001111b	decl	(%rdi)
000000000001111d	.byte 0xfe #bad opcode
000000000001111e	.byte 0xff #bad opcode
000000000001111f	incl	-0x1(%rsi,%rdi,8)
0000000000011123	jmpq	*-0x1000002(%rax)
0000000000011129	.byte 0xfe #bad opcode
000000000001112a	.byte 0xff #bad opcode
000000000001112b	incl	-0x1(%rsi)
000000000001112e	.byte 0xff #bad opcode
000000000001112f	callq	*0x66ffffff(%rax)
0000000000011135	nopl	%cs:(%rax,%rax)
000000000001113e	nop
_ZydisDecodeOperandImplicitMemory:
0000000000011140	pushq	%rbp
0000000000011141	movq	%rsp, %rbp
0000000000011144	subq	$0x40, %rsp
0000000000011148	movq	%rdi, -0x8(%rbp)
000000000001114c	movq	%rsi, -0x10(%rbp)
0000000000011150	movq	%rdx, -0x18(%rbp)
0000000000011154	movq	%rcx, -0x20(%rbp)
0000000000011158	cmpq	$0x0, -0x8(%rbp)
000000000001115d	setne	%al
0000000000011160	xorb	$-0x1, %al
0000000000011162	andb	$0x1, %al
0000000000011164	movzbl	%al, %r8d
0000000000011168	movslq	%r8d, %rcx
000000000001116b	cmpq	$0x0, %rcx
000000000001116f	je	0x11194
0000000000011175	leaq	0x5178f(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
000000000001117c	leaq	0x50023(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011183	leaq	0x50051(%rip), %rcx ## literal pool for: "context"
000000000001118a	movl	$0x696, %edx
000000000001118f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011194	jmp	0x11199
0000000000011199	cmpq	$0x0, -0x18(%rbp)
000000000001119e	setne	%al
00000000000111a1	xorb	$-0x1, %al
00000000000111a3	andb	$0x1, %al
00000000000111a5	movzbl	%al, %ecx
00000000000111a8	movslq	%ecx, %rdx
00000000000111ab	cmpq	$0x0, %rdx
00000000000111af	je	0x111d4
00000000000111b5	leaq	0x5174f(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000111bc	leaq	0x4ffe3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000111c3	leaq	0x51739(%rip), %rcx ## literal pool for: "operand"
00000000000111ca	movl	$0x697, %edx
00000000000111cf	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000111d4	jmp	0x111d9
00000000000111d9	cmpq	$0x0, -0x20(%rbp)
00000000000111de	setne	%al
00000000000111e1	xorb	$-0x1, %al
00000000000111e3	andb	$0x1, %al
00000000000111e5	movzbl	%al, %ecx
00000000000111e8	movslq	%ecx, %rdx
00000000000111eb	cmpq	$0x0, %rdx
00000000000111ef	je	0x11214
00000000000111f5	leaq	0x5170f(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000111fc	leaq	0x4ffa3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011203	leaq	0x507fe(%rip), %rcx ## literal pool for: "definition"
000000000001120a	movl	$0x698, %edx
000000000001120f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011214	jmp	0x11219
0000000000011219	movq	-0x18(%rbp), %rax
000000000001121d	movl	$0x2, 0x4(%rax)
0000000000011224	movq	-0x18(%rbp), %rax
0000000000011228	movl	$0x1, 0x28(%rax)
000000000001122f	movq	-0x20(%rbp), %rax
0000000000011233	movb	0x9(%rax), %cl
0000000000011236	shrb	$0x3, %cl
0000000000011239	andb	$0xf, %cl
000000000001123c	movzbl	%cl, %edx
000000000001123f	movl	%edx, %eax
0000000000011241	subb	$0x8, %cl
0000000000011244	movq	%rax, -0x28(%rbp)
0000000000011248	movb	%cl, -0x29(%rbp)
000000000001124b	ja	0x11430
0000000000011251	leaq	0x284(%rip), %rax
0000000000011258	movq	-0x28(%rbp), %rcx
000000000001125c	movslq	(%rax,%rcx,4), %rdx
0000000000011260	addq	%rax, %rdx
0000000000011263	jmpq	*%rdx
0000000000011265	movq	-0x8(%rbp), %rax
0000000000011269	movzbl	0x25(%rax), %ecx
000000000001126d	movl	%ecx, %eax
000000000001126f	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011276	movl	(%rdx,%rax,4), %edi
0000000000011279	movq	-0x8(%rbp), %rax
000000000001127d	movq	-0x10(%rbp), %rsi
0000000000011281	movq	-0x8(%rbp), %r8
0000000000011285	movzbl	0x25(%r8), %ecx
000000000001128a	movl	%ecx, %r8d
000000000001128d	movl	(%rdx,%r8,4), %ecx
0000000000011291	movl	%edi, -0x30(%rbp)
0000000000011294	movq	%rax, %rdi
0000000000011297	movl	$0x2, %edx
000000000001129c	callq	_ZydisCalcRegisterId
00000000000112a1	movl	-0x30(%rbp), %edi
00000000000112a4	movzbl	%al, %esi
00000000000112a7	callq	_ZydisRegisterEncode
00000000000112ac	movq	-0x18(%rbp), %r8
00000000000112b0	movl	%eax, 0x30(%r8)
00000000000112b4	jmp	0x1144f
00000000000112b9	movq	-0x8(%rbp), %rax
00000000000112bd	movzbl	0x25(%rax), %ecx
00000000000112c1	movl	%ecx, %eax
00000000000112c3	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000112ca	movl	(%rdx,%rax,4), %edi
00000000000112cd	movq	-0x8(%rbp), %rax
00000000000112d1	movq	-0x10(%rbp), %rsi
00000000000112d5	movq	-0x8(%rbp), %r8
00000000000112d9	movzbl	0x25(%r8), %ecx
00000000000112de	movl	%ecx, %r8d
00000000000112e1	movl	(%rdx,%r8,4), %ecx
00000000000112e5	movl	%edi, -0x34(%rbp)
00000000000112e8	movq	%rax, %rdi
00000000000112eb	movl	$0x4, %edx
00000000000112f0	callq	_ZydisCalcRegisterId
00000000000112f5	movl	-0x34(%rbp), %edi
00000000000112f8	movzbl	%al, %esi
00000000000112fb	callq	_ZydisRegisterEncode
0000000000011300	movq	-0x18(%rbp), %r8
0000000000011304	movl	%eax, 0x30(%r8)
0000000000011308	jmp	0x1144f
000000000001130d	xorl	%esi, %esi
000000000001130f	movq	-0x8(%rbp), %rax
0000000000011313	movzbl	0x25(%rax), %ecx
0000000000011317	movl	%ecx, %eax
0000000000011319	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011320	movl	(%rdx,%rax,4), %edi
0000000000011323	callq	_ZydisRegisterEncode
0000000000011328	movq	-0x18(%rbp), %rdx
000000000001132c	movl	%eax, 0x30(%rdx)
000000000001132f	jmp	0x1144f
0000000000011334	movq	-0x8(%rbp), %rax
0000000000011338	movzbl	0x25(%rax), %ecx
000000000001133c	movl	%ecx, %eax
000000000001133e	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011345	movl	(%rdx,%rax,4), %edi
0000000000011348	movl	$0x2, %esi
000000000001134d	callq	_ZydisRegisterEncode
0000000000011352	movq	-0x18(%rbp), %rdx
0000000000011356	movl	%eax, 0x30(%rdx)
0000000000011359	jmp	0x1144f
000000000001135e	movq	-0x8(%rbp), %rax
0000000000011362	movzbl	0x25(%rax), %ecx
0000000000011366	movl	%ecx, %eax
0000000000011368	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
000000000001136f	movl	(%rdx,%rax,4), %edi
0000000000011372	movl	$0x3, %esi
0000000000011377	callq	_ZydisRegisterEncode
000000000001137c	movq	-0x18(%rbp), %rdx
0000000000011380	movl	%eax, 0x30(%rdx)
0000000000011383	jmp	0x1144f
0000000000011388	movq	-0x8(%rbp), %rax
000000000001138c	movzbl	0x25(%rax), %ecx
0000000000011390	movl	%ecx, %eax
0000000000011392	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011399	movl	(%rdx,%rax,4), %edi
000000000001139c	movl	$0x4, %esi
00000000000113a1	callq	_ZydisRegisterEncode
00000000000113a6	movq	-0x18(%rbp), %rdx
00000000000113aa	movl	%eax, 0x30(%rdx)
00000000000113ad	jmp	0x1144f
00000000000113b2	movq	-0x8(%rbp), %rax
00000000000113b6	movzbl	0x25(%rax), %ecx
00000000000113ba	movl	%ecx, %eax
00000000000113bc	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000113c3	movl	(%rdx,%rax,4), %edi
00000000000113c6	movl	$0x5, %esi
00000000000113cb	callq	_ZydisRegisterEncode
00000000000113d0	movq	-0x18(%rbp), %rdx
00000000000113d4	movl	%eax, 0x30(%rdx)
00000000000113d7	jmp	0x1144f
00000000000113dc	movq	-0x8(%rbp), %rax
00000000000113e0	movzbl	0x25(%rax), %ecx
00000000000113e4	movl	%ecx, %eax
00000000000113e6	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000113ed	movl	(%rdx,%rax,4), %edi
00000000000113f0	movl	$0x6, %esi
00000000000113f5	callq	_ZydisRegisterEncode
00000000000113fa	movq	-0x18(%rbp), %rdx
00000000000113fe	movl	%eax, 0x30(%rdx)
0000000000011401	jmp	0x1144f
0000000000011406	movq	-0x8(%rbp), %rax
000000000001140a	movzbl	0x25(%rax), %ecx
000000000001140e	movl	%ecx, %eax
0000000000011410	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011417	movl	(%rdx,%rax,4), %edi
000000000001141a	movl	$0x7, %esi
000000000001141f	callq	_ZydisRegisterEncode
0000000000011424	movq	-0x18(%rbp), %rdx
0000000000011428	movl	%eax, 0x30(%rdx)
000000000001142b	jmp	0x1144f
0000000000011430	leaq	0x514d4(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
0000000000011437	leaq	0x4fd68(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001143e	leaq	0x4ffc7(%rip), %rcx ## literal pool for: "0"
0000000000011445	movl	$0x6c6, %edx
000000000001144a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001144f	movq	-0x20(%rbp), %rax
0000000000011453	movb	0x9(%rax), %cl
0000000000011456	andb	$0x7, %cl
0000000000011459	cmpb	$0x0, %cl
000000000001145c	je	0x114d4
0000000000011462	movq	-0x20(%rbp), %rax
0000000000011466	movb	0x9(%rax), %cl
0000000000011469	andb	$0x7, %cl
000000000001146c	movzbl	%cl, %edx
000000000001146f	subl	$0x1, %edx
0000000000011472	movb	%dl, %cl
0000000000011474	movl	$0xd, %edi
0000000000011479	movzbl	%cl, %esi
000000000001147c	callq	_ZydisRegisterEncode
0000000000011481	movq	-0x18(%rbp), %r8
0000000000011485	movl	%eax, 0x2c(%r8)
0000000000011489	movq	-0x18(%rbp), %r8
000000000001148d	cmpl	$0x0, 0x2c(%r8)
0000000000011492	setne	%cl
0000000000011495	xorb	$-0x1, %cl
0000000000011498	andb	$0x1, %cl
000000000001149b	movzbl	%cl, %eax
000000000001149e	movslq	%eax, %r8
00000000000114a1	cmpq	$0x0, %r8
00000000000114a5	je	0x114ca
00000000000114ab	leaq	0x51459(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000114b2	leaq	0x4fced(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000114b9	leaq	0x5146c(%rip), %rcx ## literal pool for: "operand->mem.segment"
00000000000114c0	movl	$0x6cd, %edx
00000000000114c5	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000114ca	jmp	0x114cf
00000000000114cf	jmp	0x114d4
00000000000114d4	addq	$0x40, %rsp
00000000000114d8	popq	%rbp
00000000000114d9	retq
00000000000114da	nop
00000000000114dc	movl	%edi, %ebp
00000000000114de	.byte 0xff #bad opcode
00000000000114df	.byte 0xff #bad opcode
00000000000114e0	.byte 0xdd #bad opcode
00000000000114e1	std
00000000000114e2	.byte 0xff #bad opcode
00000000000114e3	pushq	(%rcx)
00000000000114e5	.byte 0xfe #bad opcode
00000000000114e6	.byte 0xff #bad opcode
00000000000114e7	lcalll	*-0x2(%rax)
00000000000114ea	.byte 0xff #bad opcode
00000000000114eb	incl	-0x53000002(%rdx)
00000000000114f1	.byte 0xfe #bad opcode
00000000000114f2	.byte 0xff #bad opcode
00000000000114f3	callq	*%rsi
00000000000114f5	.byte 0xfe #bad opcode
00000000000114f6	.byte 0xff #bad opcode
00000000000114f7	incl	(%rax)
00000000000114f9	.byte 0xff #bad opcode
00000000000114fa	.byte 0xff #bad opcode
00000000000114fb	ljmpl	*(%rdx)
00000000000114fd	.byte 0xff #bad opcode
00000000000114fe	.byte 0xff #bad opcode
00000000000114ff	callq	*0x48(%rbp)
_ZydisDecodeOperandRegister:
0000000000011500	pushq	%rbp
0000000000011501	movq	%rsp, %rbp
0000000000011504	subq	$0x20, %rsp
0000000000011508	movb	%cl, %al
000000000001150a	movq	%rdi, -0x8(%rbp)
000000000001150e	movq	%rsi, -0x10(%rbp)
0000000000011512	movl	%edx, -0x14(%rbp)
0000000000011515	movb	%al, -0x15(%rbp)
0000000000011518	cmpq	$0x0, -0x8(%rbp)
000000000001151d	setne	%al
0000000000011520	xorb	$-0x1, %al
0000000000011522	andb	$0x1, %al
0000000000011524	movzbl	%al, %ecx
0000000000011527	movslq	%ecx, %rsi
000000000001152a	cmpq	$0x0, %rsi
000000000001152e	je	0x11553
0000000000011534	leaq	0x51406(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
000000000001153b	leaq	0x4fc64(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011542	leaq	0x4fc9a(%rip), %rcx ## literal pool for: "instruction"
0000000000011549	movl	$0x562, %edx
000000000001154e	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011553	jmp	0x11558
0000000000011558	cmpq	$0x0, -0x10(%rbp)
000000000001155d	setne	%al
0000000000011560	xorb	$-0x1, %al
0000000000011562	andb	$0x1, %al
0000000000011564	movzbl	%al, %ecx
0000000000011567	movslq	%ecx, %rdx
000000000001156a	cmpq	$0x0, %rdx
000000000001156e	je	0x11593
0000000000011574	leaq	0x513c6(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
000000000001157b	leaq	0x4fc24(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011582	leaq	0x5137a(%rip), %rcx ## literal pool for: "operand"
0000000000011589	movl	$0x563, %edx
000000000001158e	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011593	jmp	0x11598
0000000000011598	movq	-0x10(%rbp), %rax
000000000001159c	movl	$0x1, 0x4(%rax)
00000000000115a3	cmpl	$0x1, -0x14(%rbp)
00000000000115a7	jne	0x115fc
00000000000115ad	movq	-0x8(%rbp), %rax
00000000000115b1	movq	0x430(%rax), %rax
00000000000115b8	andq	$0x4, %rax
00000000000115bc	cmpq	$0x0, %rax
00000000000115c0	je	0x115e9
00000000000115c6	movzbl	-0x15(%rbp), %eax
00000000000115ca	cmpl	$0x4, %eax
00000000000115cd	jl	0x115e9
00000000000115d3	movzbl	-0x15(%rbp), %eax
00000000000115d7	subl	$0x4, %eax
00000000000115da	addl	$0x9, %eax
00000000000115dd	movq	-0x10(%rbp), %rcx
00000000000115e1	movl	%eax, 0x20(%rcx)
00000000000115e4	jmp	0x115f7
00000000000115e9	movzbl	-0x15(%rbp), %eax
00000000000115ed	addl	$0x1, %eax
00000000000115f0	movq	-0x10(%rbp), %rcx
00000000000115f4	movl	%eax, 0x20(%rcx)
00000000000115f7	jmp	0x11659
00000000000115fc	movl	-0x14(%rbp), %edi
00000000000115ff	movzbl	-0x15(%rbp), %esi
0000000000011603	callq	_ZydisRegisterEncode
0000000000011608	movq	-0x10(%rbp), %rcx
000000000001160c	movl	%eax, 0x20(%rcx)
000000000001160f	movq	-0x10(%rbp), %rcx
0000000000011613	cmpl	$0x0, 0x20(%rcx)
0000000000011617	setne	%dl
000000000001161a	xorb	$-0x1, %dl
000000000001161d	andb	$0x1, %dl
0000000000011620	movzbl	%dl, %eax
0000000000011623	movslq	%eax, %rcx
0000000000011626	cmpq	$0x0, %rcx
000000000001162a	je	0x1164f
0000000000011630	leaq	0x5130a(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
0000000000011637	leaq	0x4fb68(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001163e	leaq	0x51317(%rip), %rcx ## literal pool for: "operand->reg.value"
0000000000011645	movl	$0x573, %edx
000000000001164a	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001164f	jmp	0x11654
0000000000011654	jmp	0x11659
0000000000011659	movl	$0x100000, %eax
000000000001165e	addq	$0x20, %rsp
0000000000011662	popq	%rbp
0000000000011663	retq
0000000000011664	nopw	%cs:(%rax,%rax)
000000000001166e	nop
_ZydisCalcRegisterId:
0000000000011670	pushq	%rbp
0000000000011671	movq	%rsp, %rbp
0000000000011674	subq	$0x90, %rsp
000000000001167b	movq	%rdi, -0x10(%rbp)
000000000001167f	movq	%rsi, -0x18(%rbp)
0000000000011683	movl	%edx, -0x1c(%rbp)
0000000000011686	movl	%ecx, -0x20(%rbp)
0000000000011689	movq	-0x10(%rbp), %rsi
000000000001168d	movq	(%rsi), %rsi
0000000000011690	movl	(%rsi), %ecx
0000000000011692	testl	%ecx, %ecx
0000000000011694	movl	%ecx, -0x2c(%rbp)
0000000000011697	je	0x11c2d
000000000001169d	jmp	0x116a2
00000000000116a2	movl	-0x2c(%rbp), %eax
00000000000116a5	decl	%eax
00000000000116a7	subl	$0x4, %eax
00000000000116aa	movl	%eax, -0x30(%rbp)
00000000000116ad	ja	0x1244a
00000000000116b3	jmp	0x116b8
00000000000116b8	movl	-0x1c(%rbp), %eax
00000000000116bb	decl	%eax
00000000000116bd	movl	%eax, %ecx
00000000000116bf	subl	$0x8, %eax
00000000000116c2	movq	%rcx, -0x38(%rbp)
00000000000116c6	movl	%eax, -0x3c(%rbp)
00000000000116c9	ja	0x11c0e
00000000000116cf	leaq	0xdc6(%rip), %rax
00000000000116d6	movq	-0x38(%rbp), %rcx
00000000000116da	movslq	(%rax,%rcx,4), %rdx
00000000000116de	addq	%rax, %rdx
00000000000116e1	jmpq	*%rdx
00000000000116e3	cmpl	$0x1, -0x20(%rbp)
00000000000116e7	movb	$0x1, %al
00000000000116e9	movb	%al, -0x3d(%rbp)
00000000000116ec	je	0x1171a
00000000000116f2	cmpl	$0x2, -0x20(%rbp)
00000000000116f6	movb	$0x1, %al
00000000000116f8	movb	%al, -0x3d(%rbp)
00000000000116fb	je	0x1171a
0000000000011701	cmpl	$0x3, -0x20(%rbp)
0000000000011705	movb	$0x1, %al
0000000000011707	movb	%al, -0x3d(%rbp)
000000000001170a	je	0x1171a
0000000000011710	cmpl	$0x4, -0x20(%rbp)
0000000000011714	sete	%al
0000000000011717	movb	%al, -0x3d(%rbp)
000000000001171a	movb	-0x3d(%rbp), %al
000000000001171d	xorb	$-0x1, %al
000000000001171f	andb	$0x1, %al
0000000000011721	movzbl	%al, %ecx
0000000000011724	movslq	%ecx, %rdx
0000000000011727	cmpq	$0x0, %rdx
000000000001172b	je	0x11750
0000000000011731	leaq	0x51237(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011738	leaq	0x4fa67(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001173f	leaq	0x5123d(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_GPR8) || (register_class == ZYDIS_REGCLASS_GPR16) || (register_class == ZYDIS_REGCLASS_GPR32) || (register_class == ZYDIS_REGCLASS_GPR64)"
0000000000011746	movl	$0x39a, %edx
000000000001174b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011750	jmp	0x11755
0000000000011755	movq	-0x18(%rbp), %rax
0000000000011759	movzbl	0x14(%rax), %ecx
000000000001175d	andl	$0xf, %ecx
0000000000011760	movb	%cl, %dl
0000000000011762	movb	%dl, -0x21(%rbp)
0000000000011765	movzbl	-0x21(%rbp), %ecx
0000000000011769	cmpl	$0x7, %ecx
000000000001176c	jle	0x1177e
0000000000011772	movzbl	-0x21(%rbp), %eax
0000000000011776	subl	$0x8, %eax
0000000000011779	movb	%al, %cl
000000000001177b	movb	%cl, -0x21(%rbp)
000000000001177e	movb	-0x21(%rbp), %al
0000000000011781	movb	%al, -0x1(%rbp)
0000000000011784	jmp	0x12469
0000000000011789	movq	-0x18(%rbp), %rax
000000000001178d	movq	0x430(%rax), %rax
0000000000011794	andq	$0x1, %rax
0000000000011798	cmpq	$0x0, %rax
000000000001179c	setne	%cl
000000000001179f	xorb	$-0x1, %cl
00000000000117a2	andb	$0x1, %cl
00000000000117a5	movzbl	%cl, %edx
00000000000117a8	movslq	%edx, %rax
00000000000117ab	cmpq	$0x0, %rax
00000000000117af	je	0x117d4
00000000000117b5	leaq	0x511b3(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000117bc	leaq	0x4f9e3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000117c3	leaq	0x50467(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000117ca	movl	$0x3a3, %edx
00000000000117cf	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000117d4	jmp	0x117d9
00000000000117d9	movq	-0x18(%rbp), %rax
00000000000117dd	movb	0x579(%rax), %cl
00000000000117e3	movb	%cl, -0x1(%rbp)
00000000000117e6	jmp	0x12469
00000000000117eb	movq	-0x10(%rbp), %rax
00000000000117ef	movzbl	0x2e(%rax), %ecx
00000000000117f3	andl	$0x7, %ecx
00000000000117f6	movb	%cl, %dl
00000000000117f8	movb	%dl, -0x1(%rbp)
00000000000117fb	jmp	0x12469
0000000000011800	movq	-0x18(%rbp), %rax
0000000000011804	movq	0x430(%rax), %rax
000000000001180b	andq	$0x1, %rax
000000000001180f	cmpq	$0x0, %rax
0000000000011813	setne	%cl
0000000000011816	xorb	$-0x1, %cl
0000000000011819	andb	$0x1, %cl
000000000001181c	movzbl	%cl, %edx
000000000001181f	movslq	%edx, %rax
0000000000011822	cmpq	$0x0, %rax
0000000000011826	je	0x1184b
000000000001182c	leaq	0x5113c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011833	leaq	0x4f96c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001183a	leaq	0x503f0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011841	movl	$0x3a8, %edx
0000000000011846	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001184b	jmp	0x11850
0000000000011850	movq	-0x18(%rbp), %rax
0000000000011854	movb	0x57a(%rax), %cl
000000000001185a	movb	%cl, -0x1(%rbp)
000000000001185d	jmp	0x12469
0000000000011862	movq	-0x18(%rbp), %rax
0000000000011866	movq	0x430(%rax), %rax
000000000001186d	andq	$0x1, %rax
0000000000011871	cmpq	$0x0, %rax
0000000000011875	setne	%cl
0000000000011878	xorb	$-0x1, %cl
000000000001187b	andb	$0x1, %cl
000000000001187e	movzbl	%cl, %edx
0000000000011881	movslq	%edx, %rax
0000000000011884	cmpq	$0x0, %rax
0000000000011888	je	0x118ad
000000000001188e	leaq	0x510da(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011895	leaq	0x4f90a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001189c	leaq	0x5038e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000118a3	movl	$0x3ab, %edx
00000000000118a8	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000118ad	jmp	0x118b2
00000000000118b2	movq	-0x18(%rbp), %rax
00000000000118b6	movzbl	0x578(%rax), %ecx
00000000000118bd	cmpl	$0x3, %ecx
00000000000118c0	setne	%dl
00000000000118c3	xorb	$-0x1, %dl
00000000000118c6	andb	$0x1, %dl
00000000000118c9	movzbl	%dl, %ecx
00000000000118cc	movslq	%ecx, %rax
00000000000118cf	cmpq	$0x0, %rax
00000000000118d3	je	0x118f8
00000000000118d9	leaq	0x5108f(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000118e0	leaq	0x4f8bf(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000118e7	leaq	0x505da(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
00000000000118ee	movl	$0x3ac, %edx
00000000000118f3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000118f8	jmp	0x118fd
00000000000118fd	movq	-0x18(%rbp), %rax
0000000000011901	movzbl	0x57a(%rax), %ecx
0000000000011908	cmpl	$0x4, %ecx
000000000001190b	jne	0x11973
0000000000011911	movq	-0x18(%rbp), %rax
0000000000011915	movq	0x430(%rax), %rax
000000000001191c	andq	$0x2, %rax
0000000000011920	cmpq	$0x0, %rax
0000000000011924	setne	%cl
0000000000011927	xorb	$-0x1, %cl
000000000001192a	andb	$0x1, %cl
000000000001192d	movzbl	%cl, %edx
0000000000011930	movslq	%edx, %rax
0000000000011933	cmpq	$0x0, %rax
0000000000011937	je	0x1195c
000000000001193d	leaq	0x5102b(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011944	leaq	0x4f85b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001194b	leaq	0x510dd(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000011952	movl	$0x3af, %edx
0000000000011957	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001195c	jmp	0x11961
0000000000011961	movq	-0x18(%rbp), %rax
0000000000011965	movb	0x57e(%rax), %cl
000000000001196b	movb	%cl, -0x1(%rbp)
000000000001196e	jmp	0x12469
0000000000011973	movq	-0x18(%rbp), %rax
0000000000011977	movb	0x57a(%rax), %cl
000000000001197d	movb	%cl, -0x1(%rbp)
0000000000011980	jmp	0x12469
0000000000011985	movq	-0x18(%rbp), %rax
0000000000011989	movq	0x430(%rax), %rax
0000000000011990	andq	$0x1, %rax
0000000000011994	cmpq	$0x0, %rax
0000000000011998	setne	%cl
000000000001199b	xorb	$-0x1, %cl
000000000001199e	andb	$0x1, %cl
00000000000119a1	movzbl	%cl, %edx
00000000000119a4	movslq	%edx, %rax
00000000000119a7	cmpq	$0x0, %rax
00000000000119ab	je	0x119d0
00000000000119b1	leaq	0x50fb7(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000119b8	leaq	0x4f7e7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000119bf	leaq	0x5026b(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000119c6	movl	$0x3b4, %edx
00000000000119cb	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000119d0	jmp	0x119d5
00000000000119d5	movq	-0x18(%rbp), %rax
00000000000119d9	movzbl	0x578(%rax), %ecx
00000000000119e0	cmpl	$0x3, %ecx
00000000000119e3	setne	%dl
00000000000119e6	xorb	$-0x1, %dl
00000000000119e9	andb	$0x1, %dl
00000000000119ec	movzbl	%dl, %ecx
00000000000119ef	movslq	%ecx, %rax
00000000000119f2	cmpq	$0x0, %rax
00000000000119f6	je	0x11a1b
00000000000119fc	leaq	0x50f6c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011a03	leaq	0x4f79c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011a0a	leaq	0x504b7(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000011a11	movl	$0x3b5, %edx
0000000000011a16	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011a1b	jmp	0x11a20
0000000000011a20	movq	-0x18(%rbp), %rax
0000000000011a24	movq	0x430(%rax), %rax
0000000000011a2b	andq	$0x2, %rax
0000000000011a2f	cmpq	$0x0, %rax
0000000000011a33	setne	%cl
0000000000011a36	xorb	$-0x1, %cl
0000000000011a39	andb	$0x1, %cl
0000000000011a3c	movzbl	%cl, %edx
0000000000011a3f	movslq	%edx, %rax
0000000000011a42	cmpq	$0x0, %rax
0000000000011a46	je	0x11a6b
0000000000011a4c	leaq	0x50f1c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011a53	leaq	0x4f74c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011a5a	leaq	0x50fce(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000011a61	movl	$0x3b6, %edx
0000000000011a66	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011a6b	jmp	0x11a70
0000000000011a70	movq	-0x18(%rbp), %rax
0000000000011a74	movb	0x57d(%rax), %cl
0000000000011a7a	movb	%cl, -0x1(%rbp)
0000000000011a7d	jmp	0x12469
0000000000011a82	movq	-0x18(%rbp), %rax
0000000000011a86	movq	0x430(%rax), %rax
0000000000011a8d	andq	$0x1, %rax
0000000000011a91	cmpq	$0x0, %rax
0000000000011a95	setne	%cl
0000000000011a98	xorb	$-0x1, %cl
0000000000011a9b	andb	$0x1, %cl
0000000000011a9e	movzbl	%cl, %edx
0000000000011aa1	movslq	%edx, %rax
0000000000011aa4	cmpq	$0x0, %rax
0000000000011aa8	je	0x11acd
0000000000011aae	leaq	0x50eba(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011ab5	leaq	0x4f6ea(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011abc	leaq	0x5016e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011ac3	movl	$0x3b9, %edx
0000000000011ac8	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011acd	jmp	0x11ad2
0000000000011ad2	movq	-0x18(%rbp), %rax
0000000000011ad6	movzbl	0x578(%rax), %ecx
0000000000011add	cmpl	$0x3, %ecx
0000000000011ae0	setne	%dl
0000000000011ae3	xorb	$-0x1, %dl
0000000000011ae6	andb	$0x1, %dl
0000000000011ae9	movzbl	%dl, %ecx
0000000000011aec	movslq	%ecx, %rax
0000000000011aef	cmpq	$0x0, %rax
0000000000011af3	je	0x11b18
0000000000011af9	leaq	0x50e6f(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011b00	leaq	0x4f69f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011b07	leaq	0x503ba(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000011b0e	movl	$0x3ba, %edx
0000000000011b13	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011b18	jmp	0x11b1d
0000000000011b1d	movq	-0x18(%rbp), %rax
0000000000011b21	movq	0x430(%rax), %rax
0000000000011b28	andq	$0x2, %rax
0000000000011b2c	cmpq	$0x0, %rax
0000000000011b30	setne	%cl
0000000000011b33	xorb	$-0x1, %cl
0000000000011b36	andb	$0x1, %cl
0000000000011b39	movzbl	%cl, %edx
0000000000011b3c	movslq	%edx, %rax
0000000000011b3f	cmpq	$0x0, %rax
0000000000011b43	je	0x11b68
0000000000011b49	leaq	0x50e1f(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011b50	leaq	0x4f64f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011b57	leaq	0x50ed1(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000011b5e	movl	$0x3bb, %edx
0000000000011b63	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011b68	jmp	0x11b6d
0000000000011b6d	cmpl	$0x7, -0x20(%rbp)
0000000000011b71	movb	$0x1, %al
0000000000011b73	movb	%al, -0x3e(%rbp)
0000000000011b76	je	0x11b95
0000000000011b7c	cmpl	$0x8, -0x20(%rbp)
0000000000011b80	movb	$0x1, %al
0000000000011b82	movb	%al, -0x3e(%rbp)
0000000000011b85	je	0x11b95
0000000000011b8b	cmpl	$0x9, -0x20(%rbp)
0000000000011b8f	sete	%al
0000000000011b92	movb	%al, -0x3e(%rbp)
0000000000011b95	movb	-0x3e(%rbp), %al
0000000000011b98	xorb	$-0x1, %al
0000000000011b9a	andb	$0x1, %al
0000000000011b9c	movzbl	%al, %ecx
0000000000011b9f	movslq	%ecx, %rdx
0000000000011ba2	cmpq	$0x0, %rdx
0000000000011ba6	je	0x11bcb
0000000000011bac	leaq	0x50dbc(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011bb3	leaq	0x4f5ec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011bba	leaq	0x50e9b(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_XMM) || (register_class == ZYDIS_REGCLASS_YMM) || (register_class == ZYDIS_REGCLASS_ZMM)"
0000000000011bc1	movl	$0x3be, %edx
0000000000011bc6	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011bcb	jmp	0x11bd0
0000000000011bd0	movq	-0x18(%rbp), %rax
0000000000011bd4	movb	0x57d(%rax), %cl
0000000000011bda	movb	%cl, -0x1(%rbp)
0000000000011bdd	jmp	0x12469
0000000000011be2	movq	-0x18(%rbp), %rax
0000000000011be6	movq	0x598(%rax), %rax
0000000000011bed	shrq	$0x4, %rax
0000000000011bf1	andq	$0x7, %rax
0000000000011bf5	movb	%al, %cl
0000000000011bf7	movb	%cl, -0x1(%rbp)
0000000000011bfa	jmp	0x12469
0000000000011bff	movq	-0x10(%rbp), %rax
0000000000011c03	movb	0x2f(%rax), %cl
0000000000011c06	movb	%cl, -0x1(%rbp)
0000000000011c09	jmp	0x12469
0000000000011c0e	leaq	0x50d5a(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011c15	leaq	0x4f58a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011c1c	leaq	0x4f7e9(%rip), %rcx ## literal pool for: "0"
0000000000011c23	movl	$0x3c5, %edx
0000000000011c28	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011c2d	movl	-0x1c(%rbp), %eax
0000000000011c30	decl	%eax
0000000000011c32	movl	%eax, %ecx
0000000000011c34	subl	$0x8, %eax
0000000000011c37	movq	%rcx, -0x48(%rbp)
0000000000011c3b	movl	%eax, -0x4c(%rbp)
0000000000011c3e	ja	0x1242b
0000000000011c44	leaq	0x82d(%rip), %rax
0000000000011c4b	movq	-0x48(%rbp), %rcx
0000000000011c4f	movslq	(%rax,%rcx,4), %rdx
0000000000011c53	addq	%rax, %rdx
0000000000011c56	jmpq	*%rdx
0000000000011c58	cmpl	$0x1, -0x20(%rbp)
0000000000011c5c	movb	$0x1, %al
0000000000011c5e	movb	%al, -0x4d(%rbp)
0000000000011c61	je	0x11c8f
0000000000011c67	cmpl	$0x2, -0x20(%rbp)
0000000000011c6b	movb	$0x1, %al
0000000000011c6d	movb	%al, -0x4d(%rbp)
0000000000011c70	je	0x11c8f
0000000000011c76	cmpl	$0x3, -0x20(%rbp)
0000000000011c7a	movb	$0x1, %al
0000000000011c7c	movb	%al, -0x4d(%rbp)
0000000000011c7f	je	0x11c8f
0000000000011c85	cmpl	$0x4, -0x20(%rbp)
0000000000011c89	sete	%al
0000000000011c8c	movb	%al, -0x4d(%rbp)
0000000000011c8f	movb	-0x4d(%rbp), %al
0000000000011c92	xorb	$-0x1, %al
0000000000011c94	andb	$0x1, %al
0000000000011c96	movzbl	%al, %ecx
0000000000011c99	movslq	%ecx, %rdx
0000000000011c9c	cmpq	$0x0, %rdx
0000000000011ca0	je	0x11cc5
0000000000011ca6	leaq	0x50cc2(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011cad	leaq	0x4f4f2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011cb4	leaq	0x50cc8(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_GPR8) || (register_class == ZYDIS_REGCLASS_GPR16) || (register_class == ZYDIS_REGCLASS_GPR32) || (register_class == ZYDIS_REGCLASS_GPR64)"
0000000000011cbb	movl	$0x3cf, %edx
0000000000011cc0	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011cc5	jmp	0x11cca
0000000000011cca	movq	-0x18(%rbp), %rax
0000000000011cce	movzbl	0x14(%rax), %ecx
0000000000011cd2	andl	$0xf, %ecx
0000000000011cd5	movb	%cl, %dl
0000000000011cd7	movb	%dl, -0x22(%rbp)
0000000000011cda	movzbl	-0x22(%rbp), %ecx
0000000000011cde	cmpl	$0x7, %ecx
0000000000011ce1	jle	0x11cf3
0000000000011ce7	movzbl	-0x22(%rbp), %eax
0000000000011ceb	subl	$0x8, %eax
0000000000011cee	movb	%al, %cl
0000000000011cf0	movb	%cl, -0x22(%rbp)
0000000000011cf3	movzbl	-0x22(%rbp), %eax
0000000000011cf7	movq	-0x10(%rbp), %rcx
0000000000011cfb	movzbl	0x29(%rcx), %edx
0000000000011cff	shll	$0x3, %edx
0000000000011d02	orl	%edx, %eax
0000000000011d04	movb	%al, %sil
0000000000011d07	movb	%sil, -0x1(%rbp)
0000000000011d0b	jmp	0x12469
0000000000011d10	movq	-0x18(%rbp), %rax
0000000000011d14	movq	0x430(%rax), %rax
0000000000011d1b	andq	$0x1, %rax
0000000000011d1f	cmpq	$0x0, %rax
0000000000011d23	setne	%cl
0000000000011d26	xorb	$-0x1, %cl
0000000000011d29	andb	$0x1, %cl
0000000000011d2c	movzbl	%cl, %edx
0000000000011d2f	movslq	%edx, %rax
0000000000011d32	cmpq	$0x0, %rax
0000000000011d36	je	0x11d5b
0000000000011d3c	leaq	0x50c2c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011d43	leaq	0x4f45c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011d4a	leaq	0x4fee0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011d51	movl	$0x3d9, %edx
0000000000011d56	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011d5b	jmp	0x11d60
0000000000011d60	movq	-0x18(%rbp), %rax
0000000000011d64	movb	0x579(%rax), %cl
0000000000011d6a	movb	%cl, -0x23(%rbp)
0000000000011d6d	movl	-0x20(%rbp), %edx
0000000000011d70	movl	%edx, %esi
0000000000011d72	decl	%esi
0000000000011d74	subl	$0x4, %esi
0000000000011d77	movl	%edx, -0x54(%rbp)
0000000000011d7a	movl	%esi, -0x58(%rbp)
0000000000011d7d	jb	0x11db6
0000000000011d83	jmp	0x11d88
0000000000011d88	movl	-0x54(%rbp), %eax
0000000000011d8b	addl	$-0x7, %eax
0000000000011d8e	subl	$0x3, %eax
0000000000011d91	movl	%eax, -0x5c(%rbp)
0000000000011d94	jb	0x11db6
0000000000011d9a	jmp	0x11d9f
0000000000011d9f	movl	-0x54(%rbp), %eax
0000000000011da2	addl	$-0xf, %eax
0000000000011da5	subl	$0x1, %eax
0000000000011da8	movl	%eax, -0x60(%rbp)
0000000000011dab	ja	0x11dd3
0000000000011db1	jmp	0x11db6
0000000000011db6	movq	-0x10(%rbp), %rax
0000000000011dba	movzbl	0x27(%rax), %ecx
0000000000011dbe	shll	$0x3, %ecx
0000000000011dc1	movzbl	-0x23(%rbp), %edx
0000000000011dc5	orl	%ecx, %edx
0000000000011dc7	movb	%dl, %sil
0000000000011dca	movb	%sil, -0x23(%rbp)
0000000000011dce	jmp	0x11dd8
0000000000011dd3	jmp	0x11dd8
0000000000011dd8	movl	-0x20(%rbp), %eax
0000000000011ddb	addl	$-0x7, %eax
0000000000011dde	subl	$0x2, %eax
0000000000011de1	movl	%eax, -0x64(%rbp)
0000000000011de4	ja	0x11e0c
0000000000011dea	jmp	0x11def
0000000000011def	movq	-0x10(%rbp), %rax
0000000000011df3	movzbl	0x2c(%rax), %ecx
0000000000011df7	shll	$0x4, %ecx
0000000000011dfa	movzbl	-0x23(%rbp), %edx
0000000000011dfe	orl	%ecx, %edx
0000000000011e00	movb	%dl, %sil
0000000000011e03	movb	%sil, -0x23(%rbp)
0000000000011e07	jmp	0x11e11
0000000000011e0c	jmp	0x11e11
0000000000011e11	movb	-0x23(%rbp), %al
0000000000011e14	movb	%al, -0x1(%rbp)
0000000000011e17	jmp	0x12469
0000000000011e1c	movl	-0x20(%rbp), %eax
0000000000011e1f	movl	%eax, %ecx
0000000000011e21	addl	$-0x7, %ecx
0000000000011e24	subl	$0x3, %ecx
0000000000011e27	movl	%eax, -0x68(%rbp)
0000000000011e2a	movl	%ecx, -0x6c(%rbp)
0000000000011e2d	jb	0x11e4c
0000000000011e33	jmp	0x11e38
0000000000011e38	movl	-0x68(%rbp), %eax
0000000000011e3b	subl	$0x11, %eax
0000000000011e3e	movl	%eax, -0x70(%rbp)
0000000000011e41	je	0x11e5b
0000000000011e47	jmp	0x11e70
0000000000011e4c	movq	-0x10(%rbp), %rax
0000000000011e50	movb	0x2e(%rax), %cl
0000000000011e53	movb	%cl, -0x1(%rbp)
0000000000011e56	jmp	0x12469
0000000000011e5b	movq	-0x10(%rbp), %rax
0000000000011e5f	movzbl	0x2e(%rax), %ecx
0000000000011e63	andl	$0x7, %ecx
0000000000011e66	movb	%cl, %dl
0000000000011e68	movb	%dl, -0x1(%rbp)
0000000000011e6b	jmp	0x12469
0000000000011e70	movq	-0x10(%rbp), %rax
0000000000011e74	movzbl	0x2e(%rax), %ecx
0000000000011e78	andl	$0xf, %ecx
0000000000011e7b	movb	%cl, %dl
0000000000011e7d	movb	%dl, -0x1(%rbp)
0000000000011e80	jmp	0x12469
0000000000011e85	movq	-0x18(%rbp), %rax
0000000000011e89	movq	0x430(%rax), %rax
0000000000011e90	andq	$0x1, %rax
0000000000011e94	cmpq	$0x0, %rax
0000000000011e98	setne	%cl
0000000000011e9b	xorb	$-0x1, %cl
0000000000011e9e	andb	$0x1, %cl
0000000000011ea1	movzbl	%cl, %edx
0000000000011ea4	movslq	%edx, %rax
0000000000011ea7	cmpq	$0x0, %rax
0000000000011eab	je	0x11ed0
0000000000011eb1	leaq	0x50ab7(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011eb8	leaq	0x4f2e7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011ebf	leaq	0x4fd6b(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011ec6	movl	$0x407, %edx
0000000000011ecb	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000011ed0	jmp	0x11ed5
0000000000011ed5	movq	-0x18(%rbp), %rax
0000000000011ed9	movb	0x57a(%rax), %cl
0000000000011edf	movb	%cl, -0x24(%rbp)
0000000000011ee2	movl	-0x20(%rbp), %edx
0000000000011ee5	movl	%edx, %esi
0000000000011ee7	decl	%esi
0000000000011ee9	subl	$0x4, %esi
0000000000011eec	movl	%edx, -0x74(%rbp)
0000000000011eef	movl	%esi, -0x78(%rbp)
0000000000011ef2	jb	0x11f2b
0000000000011ef8	jmp	0x11efd
0000000000011efd	movl	-0x74(%rbp), %eax
0000000000011f00	addl	$-0x7, %eax
0000000000011f03	subl	$0x3, %eax
0000000000011f06	movl	%eax, -0x7c(%rbp)
0000000000011f09	jb	0x11f2b
0000000000011f0f	jmp	0x11f14
0000000000011f14	movl	-0x74(%rbp), %eax
0000000000011f17	addl	$-0xf, %eax
0000000000011f1a	subl	$0x1, %eax
0000000000011f1d	movl	%eax, -0x80(%rbp)
0000000000011f20	ja	0x11f48
0000000000011f26	jmp	0x11f2b
0000000000011f2b	movq	-0x10(%rbp), %rax
0000000000011f2f	movzbl	0x29(%rax), %ecx
0000000000011f33	shll	$0x3, %ecx
0000000000011f36	movzbl	-0x24(%rbp), %edx
0000000000011f3a	orl	%ecx, %edx
0000000000011f3c	movb	%dl, %sil
0000000000011f3f	movb	%sil, -0x24(%rbp)
0000000000011f43	jmp	0x11f4d
0000000000011f48	jmp	0x11f4d
0000000000011f4d	movq	-0x18(%rbp), %rax
0000000000011f51	cmpl	$0x4, 0xc(%rax)
0000000000011f55	je	0x11f69
0000000000011f5b	movq	-0x18(%rbp), %rax
0000000000011f5f	cmpl	$0x5, 0xc(%rax)
0000000000011f63	jne	0x11faa
0000000000011f69	movl	-0x20(%rbp), %eax
0000000000011f6c	addl	$-0x7, %eax
0000000000011f6f	subl	$0x2, %eax
0000000000011f72	movl	%eax, -0x84(%rbp)
0000000000011f78	ja	0x11fa0
0000000000011f7e	jmp	0x11f83
0000000000011f83	movq	-0x10(%rbp), %rax
0000000000011f87	movzbl	0x28(%rax), %ecx
0000000000011f8b	shll	$0x4, %ecx
0000000000011f8e	movzbl	-0x24(%rbp), %edx
0000000000011f92	orl	%ecx, %edx
0000000000011f94	movb	%dl, %sil
0000000000011f97	movb	%sil, -0x24(%rbp)
0000000000011f9b	jmp	0x11fa5
0000000000011fa0	jmp	0x11fa5
0000000000011fa5	jmp	0x11faa
0000000000011faa	movb	-0x24(%rbp), %al
0000000000011fad	movb	%al, -0x1(%rbp)
0000000000011fb0	jmp	0x12469
0000000000011fb5	movq	-0x18(%rbp), %rax
0000000000011fb9	movq	0x430(%rax), %rax
0000000000011fc0	andq	$0x1, %rax
0000000000011fc4	cmpq	$0x0, %rax
0000000000011fc8	setne	%cl
0000000000011fcb	xorb	$-0x1, %cl
0000000000011fce	andb	$0x1, %cl
0000000000011fd1	movzbl	%cl, %edx
0000000000011fd4	movslq	%edx, %rax
0000000000011fd7	cmpq	$0x0, %rax
0000000000011fdb	je	0x12000
0000000000011fe1	leaq	0x50987(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011fe8	leaq	0x4f1b7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011fef	leaq	0x4fc3b(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011ff6	movl	$0x42c, %edx
0000000000011ffb	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012000	jmp	0x12005
0000000000012005	movq	-0x18(%rbp), %rax
0000000000012009	movzbl	0x578(%rax), %ecx
0000000000012010	cmpl	$0x3, %ecx
0000000000012013	setne	%dl
0000000000012016	xorb	$-0x1, %dl
0000000000012019	andb	$0x1, %dl
000000000001201c	movzbl	%dl, %ecx
000000000001201f	movslq	%ecx, %rax
0000000000012022	cmpq	$0x0, %rax
0000000000012026	je	0x1204b
000000000001202c	leaq	0x5093c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012033	leaq	0x4f16c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001203a	leaq	0x4fe87(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012041	movl	$0x42d, %edx
0000000000012046	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001204b	jmp	0x12050
0000000000012050	movq	-0x18(%rbp), %rax
0000000000012054	movzbl	0x57a(%rax), %ecx
000000000001205b	cmpl	$0x4, %ecx
000000000001205e	jne	0x120d8
0000000000012064	movq	-0x18(%rbp), %rax
0000000000012068	movq	0x430(%rax), %rax
000000000001206f	andq	$0x2, %rax
0000000000012073	cmpq	$0x0, %rax
0000000000012077	setne	%cl
000000000001207a	xorb	$-0x1, %cl
000000000001207d	andb	$0x1, %cl
0000000000012080	movzbl	%cl, %edx
0000000000012083	movslq	%edx, %rax
0000000000012086	cmpq	$0x0, %rax
000000000001208a	je	0x120af
0000000000012090	leaq	0x508d8(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012097	leaq	0x4f108(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001209e	leaq	0x5098a(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000120a5	movl	$0x430, %edx
00000000000120aa	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000120af	jmp	0x120b4
00000000000120b4	movq	-0x18(%rbp), %rax
00000000000120b8	movzbl	0x57e(%rax), %ecx
00000000000120bf	movq	-0x10(%rbp), %rax
00000000000120c3	movzbl	0x29(%rax), %edx
00000000000120c7	shll	$0x3, %edx
00000000000120ca	orl	%edx, %ecx
00000000000120cc	movb	%cl, %sil
00000000000120cf	movb	%sil, -0x1(%rbp)
00000000000120d3	jmp	0x12469
00000000000120d8	movq	-0x18(%rbp), %rax
00000000000120dc	movzbl	0x57a(%rax), %ecx
00000000000120e3	movq	-0x10(%rbp), %rax
00000000000120e7	movzbl	0x29(%rax), %edx
00000000000120eb	shll	$0x3, %edx
00000000000120ee	orl	%edx, %ecx
00000000000120f0	movb	%cl, %sil
00000000000120f3	movb	%sil, -0x1(%rbp)
00000000000120f7	jmp	0x12469
00000000000120fc	movq	-0x18(%rbp), %rax
0000000000012100	movq	0x430(%rax), %rax
0000000000012107	andq	$0x1, %rax
000000000001210b	cmpq	$0x0, %rax
000000000001210f	setne	%cl
0000000000012112	xorb	$-0x1, %cl
0000000000012115	andb	$0x1, %cl
0000000000012118	movzbl	%cl, %edx
000000000001211b	movslq	%edx, %rax
000000000001211e	cmpq	$0x0, %rax
0000000000012122	je	0x12147
0000000000012128	leaq	0x50840(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001212f	leaq	0x4f070(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012136	leaq	0x4faf4(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
000000000001213d	movl	$0x435, %edx
0000000000012142	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012147	jmp	0x1214c
000000000001214c	movq	-0x18(%rbp), %rax
0000000000012150	movzbl	0x578(%rax), %ecx
0000000000012157	cmpl	$0x3, %ecx
000000000001215a	setne	%dl
000000000001215d	xorb	$-0x1, %dl
0000000000012160	andb	$0x1, %dl
0000000000012163	movzbl	%dl, %ecx
0000000000012166	movslq	%ecx, %rax
0000000000012169	cmpq	$0x0, %rax
000000000001216d	je	0x12192
0000000000012173	leaq	0x507f5(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001217a	leaq	0x4f025(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012181	leaq	0x4fd40(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012188	movl	$0x436, %edx
000000000001218d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012192	jmp	0x12197
0000000000012197	movq	-0x18(%rbp), %rax
000000000001219b	movq	0x430(%rax), %rax
00000000000121a2	andq	$0x2, %rax
00000000000121a6	cmpq	$0x0, %rax
00000000000121aa	setne	%cl
00000000000121ad	xorb	$-0x1, %cl
00000000000121b0	andb	$0x1, %cl
00000000000121b3	movzbl	%cl, %edx
00000000000121b6	movslq	%edx, %rax
00000000000121b9	cmpq	$0x0, %rax
00000000000121bd	je	0x121e2
00000000000121c3	leaq	0x507a5(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000121ca	leaq	0x4efd5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000121d1	leaq	0x50857(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000121d8	movl	$0x437, %edx
00000000000121dd	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000121e2	jmp	0x121e7
00000000000121e7	movq	-0x18(%rbp), %rax
00000000000121eb	movzbl	0x57d(%rax), %ecx
00000000000121f2	movq	-0x10(%rbp), %rax
00000000000121f6	movzbl	0x28(%rax), %edx
00000000000121fa	shll	$0x3, %edx
00000000000121fd	orl	%edx, %ecx
00000000000121ff	movb	%cl, %sil
0000000000012202	movb	%sil, -0x1(%rbp)
0000000000012206	jmp	0x12469
000000000001220b	movq	-0x18(%rbp), %rax
000000000001220f	movq	0x430(%rax), %rax
0000000000012216	andq	$0x1, %rax
000000000001221a	cmpq	$0x0, %rax
000000000001221e	setne	%cl
0000000000012221	xorb	$-0x1, %cl
0000000000012224	andb	$0x1, %cl
0000000000012227	movzbl	%cl, %edx
000000000001222a	movslq	%edx, %rax
000000000001222d	cmpq	$0x0, %rax
0000000000012231	je	0x12256
0000000000012237	leaq	0x50731(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001223e	leaq	0x4ef61(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012245	leaq	0x4f9e5(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
000000000001224c	movl	$0x43a, %edx
0000000000012251	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012256	jmp	0x1225b
000000000001225b	movq	-0x18(%rbp), %rax
000000000001225f	movzbl	0x578(%rax), %ecx
0000000000012266	cmpl	$0x3, %ecx
0000000000012269	setne	%dl
000000000001226c	xorb	$-0x1, %dl
000000000001226f	andb	$0x1, %dl
0000000000012272	movzbl	%dl, %ecx
0000000000012275	movslq	%ecx, %rax
0000000000012278	cmpq	$0x0, %rax
000000000001227c	je	0x122a1
0000000000012282	leaq	0x506e6(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012289	leaq	0x4ef16(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012290	leaq	0x4fc31(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012297	movl	$0x43b, %edx
000000000001229c	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000122a1	jmp	0x122a6
00000000000122a6	movq	-0x18(%rbp), %rax
00000000000122aa	movq	0x430(%rax), %rax
00000000000122b1	andq	$0x2, %rax
00000000000122b5	cmpq	$0x0, %rax
00000000000122b9	setne	%cl
00000000000122bc	xorb	$-0x1, %cl
00000000000122bf	andb	$0x1, %cl
00000000000122c2	movzbl	%cl, %edx
00000000000122c5	movslq	%edx, %rax
00000000000122c8	cmpq	$0x0, %rax
00000000000122cc	je	0x122f1
00000000000122d2	leaq	0x50696(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000122d9	leaq	0x4eec6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000122e0	leaq	0x50748(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000122e7	movl	$0x43c, %edx
00000000000122ec	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000122f1	jmp	0x122f6
00000000000122f6	cmpl	$0x7, -0x20(%rbp)
00000000000122fa	movb	$0x1, %al
00000000000122fc	movb	%al, -0x85(%rbp)
0000000000012302	je	0x12327
0000000000012308	cmpl	$0x8, -0x20(%rbp)
000000000001230c	movb	$0x1, %al
000000000001230e	movb	%al, -0x85(%rbp)
0000000000012314	je	0x12327
000000000001231a	cmpl	$0x9, -0x20(%rbp)
000000000001231e	sete	%al
0000000000012321	movb	%al, -0x85(%rbp)
0000000000012327	movb	-0x85(%rbp), %al
000000000001232d	xorb	$-0x1, %al
000000000001232f	andb	$0x1, %al
0000000000012331	movzbl	%al, %ecx
0000000000012334	movslq	%ecx, %rdx
0000000000012337	cmpq	$0x0, %rdx
000000000001233b	je	0x12360
0000000000012341	leaq	0x50627(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012348	leaq	0x4ee57(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001234f	leaq	0x50706(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_XMM) || (register_class == ZYDIS_REGCLASS_YMM) || (register_class == ZYDIS_REGCLASS_ZMM)"
0000000000012356	movl	$0x43f, %edx
000000000001235b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012360	jmp	0x12365
0000000000012365	movq	-0x18(%rbp), %rax
0000000000012369	movzbl	0x57d(%rax), %ecx
0000000000012370	movq	-0x10(%rbp), %rax
0000000000012374	movzbl	0x28(%rax), %edx
0000000000012378	shll	$0x3, %edx
000000000001237b	orl	%edx, %ecx
000000000001237d	movq	-0x10(%rbp), %rax
0000000000012381	movzbl	0x2d(%rax), %edx
0000000000012385	shll	$0x4, %edx
0000000000012388	orl	%edx, %ecx
000000000001238a	movb	%cl, %sil
000000000001238d	movb	%sil, -0x1(%rbp)
0000000000012391	jmp	0x12469
0000000000012396	movq	-0x18(%rbp), %rax
000000000001239a	movq	0x598(%rax), %rax
00000000000123a1	shrq	$0x4, %rax
00000000000123a5	andq	$0xf, %rax
00000000000123a9	movb	%al, %cl
00000000000123ab	movb	%cl, -0x25(%rbp)
00000000000123ae	movq	-0x18(%rbp), %rax
00000000000123b2	cmpl	$0x4, 0xc(%rax)
00000000000123b6	je	0x123ca
00000000000123bc	movq	-0x18(%rbp), %rax
00000000000123c0	cmpl	$0x5, 0xc(%rax)
00000000000123c4	jne	0x12411
00000000000123ca	movl	-0x20(%rbp), %eax
00000000000123cd	addl	$-0x7, %eax
00000000000123d0	subl	$0x2, %eax
00000000000123d3	movl	%eax, -0x8c(%rbp)
00000000000123d9	ja	0x12407
00000000000123df	jmp	0x123e4
00000000000123e4	movq	-0x18(%rbp), %rax
00000000000123e8	movq	0x598(%rax), %rax
00000000000123ef	andq	$0x8, %rax
00000000000123f3	shlq	$0x1, %rax
00000000000123f7	movzbl	-0x25(%rbp), %ecx
00000000000123fb	movl	%ecx, %edx
00000000000123fd	orq	%rax, %rdx
0000000000012400	movb	%dl, %sil
0000000000012403	movb	%sil, -0x25(%rbp)
0000000000012407	jmp	0x1240c
000000000001240c	jmp	0x12411
0000000000012411	movb	-0x25(%rbp), %al
0000000000012414	movb	%al, -0x1(%rbp)
0000000000012417	jmp	0x12469
000000000001241c	movq	-0x10(%rbp), %rax
0000000000012420	movb	0x2f(%rax), %cl
0000000000012423	movb	%cl, -0x1(%rbp)
0000000000012426	jmp	0x12469
000000000001242b	leaq	0x5053d(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012432	leaq	0x4ed6d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012439	leaq	0x4efcc(%rip), %rcx ## literal pool for: "0"
0000000000012440	movl	$0x45a, %edx
0000000000012445	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001244a	leaq	0x5051e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012451	leaq	0x4ed4e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012458	leaq	0x4efad(%rip), %rcx ## literal pool for: "0"
000000000001245f	movl	$0x45d, %edx
0000000000012464	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012469	movzbl	-0x1(%rbp), %eax
000000000001246d	addq	$0x90, %rsp
0000000000012474	popq	%rbp
0000000000012475	retq
0000000000012476	nop
0000000000012478	loopne	0x12471
000000000001247a	.byte 0xff #bad opcode
000000000001247b	lcalll	*-0x5b000008(%rax)
0000000000012481	stc
0000000000012482	.byte 0xff #bad opcode
0000000000012483	decl	0x3dfffffa(%rip)
0000000000012489	sti
000000000001248a	.byte 0xff #bad opcode
000000000001248b	incl	-0x26c0001(%rsp,%rdi,8)
0000000000012492	.byte 0xff #bad opcode
0000000000012493	lcalll	*(%rsi)
0000000000012495	.byte 0xff #bad opcode
0000000000012496	.byte 0xff #bad opcode
0000000000012497	jmpq	*-0xdb80001(%rdi,%rdi,8)
000000000001249e	.byte 0xff #bad opcode
000000000001249f	.byte 0xff #bad opcode
00000000000124a0	inl	%dx, %eax
00000000000124a1	.byte 0xf2 #bad opcode
00000000000124a2	.byte 0xff #bad opcode
00000000000124a3	decl	-0xd(%rdi)
00000000000124a6	.byte 0xff #bad opcode
00000000000124a7	jmpq	*-0x1(%rbx,%rsi,8)
00000000000124ab	incl	%esi
00000000000124ad	.byte 0xf3 #bad opcode
00000000000124ae	.byte 0xff #bad opcode
00000000000124af	.byte 0xff #bad opcode
00000000000124b0	jmp	0xffffffffe70124a9
00000000000124b5	cmc
00000000000124b6	.byte 0xff #bad opcode
00000000000124b7	incl	-0x9(%rsi)
00000000000124ba	.byte 0xff #bad opcode
00000000000124bb	jmpq	*-0x9(%rbx)
00000000000124be	.byte 0xff #bad opcode
00000000000124bf	callq	*0x48(%rbp)
_ZydisDecodeOperandMemory:
00000000000124c0	pushq	%rbp
00000000000124c1	movq	%rsp, %rbp
00000000000124c4	subq	$0xa0, %rsp
00000000000124cb	movq	%rdi, -0x8(%rbp)
00000000000124cf	movq	%rsi, -0x10(%rbp)
00000000000124d3	movq	%rdx, -0x18(%rbp)
00000000000124d7	movl	%ecx, -0x1c(%rbp)
00000000000124da	cmpq	$0x0, -0x8(%rbp)
00000000000124df	setne	%al
00000000000124e2	xorb	$-0x1, %al
00000000000124e4	andb	$0x1, %al
00000000000124e6	movzbl	%al, %ecx
00000000000124e9	movslq	%ecx, %rdx
00000000000124ec	cmpq	$0x0, %rdx
00000000000124f0	je	0x12515
00000000000124f6	leaq	0x505da(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000124fd	leaq	0x4eca2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012504	leaq	0x4ecd0(%rip), %rcx ## literal pool for: "context"
000000000001250b	movl	$0x58e, %edx
0000000000012510	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012515	jmp	0x1251a
000000000001251a	cmpq	$0x0, -0x10(%rbp)
000000000001251f	setne	%al
0000000000012522	xorb	$-0x1, %al
0000000000012524	andb	$0x1, %al
0000000000012526	movzbl	%al, %ecx
0000000000012529	movslq	%ecx, %rdx
000000000001252c	cmpq	$0x0, %rdx
0000000000012530	je	0x12555
0000000000012536	leaq	0x5059a(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
000000000001253d	leaq	0x4ec62(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012544	leaq	0x4ec98(%rip), %rcx ## literal pool for: "instruction"
000000000001254b	movl	$0x58f, %edx
0000000000012550	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012555	jmp	0x1255a
000000000001255a	cmpq	$0x0, -0x18(%rbp)
000000000001255f	setne	%al
0000000000012562	xorb	$-0x1, %al
0000000000012564	andb	$0x1, %al
0000000000012566	movzbl	%al, %ecx
0000000000012569	movslq	%ecx, %rdx
000000000001256c	cmpq	$0x0, %rdx
0000000000012570	je	0x12595
0000000000012576	leaq	0x5055a(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
000000000001257d	leaq	0x4ec22(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012584	leaq	0x50378(%rip), %rcx ## literal pool for: "operand"
000000000001258b	movl	$0x590, %edx
0000000000012590	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012595	jmp	0x1259a
000000000001259a	movq	-0x10(%rbp), %rax
000000000001259e	movq	0x430(%rax), %rax
00000000000125a5	andq	$0x1, %rax
00000000000125a9	cmpq	$0x0, %rax
00000000000125ad	setne	%cl
00000000000125b0	xorb	$-0x1, %cl
00000000000125b3	andb	$0x1, %cl
00000000000125b6	movzbl	%cl, %edx
00000000000125b9	movslq	%edx, %rax
00000000000125bc	cmpq	$0x0, %rax
00000000000125c0	je	0x125e5
00000000000125c6	leaq	0x5050a(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000125cd	leaq	0x4ebd2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000125d4	leaq	0x4f656(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000125db	movl	$0x591, %edx
00000000000125e0	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000125e5	jmp	0x125ea
00000000000125ea	movq	-0x10(%rbp), %rax
00000000000125ee	movzbl	0x578(%rax), %ecx
00000000000125f5	cmpl	$0x3, %ecx
00000000000125f8	setne	%dl
00000000000125fb	xorb	$-0x1, %dl
00000000000125fe	andb	$0x1, %dl
0000000000012601	movzbl	%dl, %ecx
0000000000012604	movslq	%ecx, %rax
0000000000012607	cmpq	$0x0, %rax
000000000001260b	je	0x12630
0000000000012611	leaq	0x504bf(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012618	leaq	0x4eb87(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001261f	leaq	0x4f8a2(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012626	movl	$0x592, %edx
000000000001262b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012630	jmp	0x12635
0000000000012635	cmpl	$0x0, -0x1c(%rbp)
0000000000012639	movb	$0x1, %al
000000000001263b	movb	%al, -0x1f(%rbp)
000000000001263e	je	0x12692
0000000000012644	xorl	%eax, %eax
0000000000012646	movb	%al, %cl
0000000000012648	movq	-0x10(%rbp), %rdx
000000000001264c	movzbl	0x57a(%rdx), %eax
0000000000012653	cmpl	$0x4, %eax
0000000000012656	movb	%cl, -0x20(%rbp)
0000000000012659	jne	0x1268c
000000000001265f	movq	-0x10(%rbp), %rax
0000000000012663	movzbl	0x17(%rax), %ecx
0000000000012667	cmpl	$0x20, %ecx
000000000001266a	movb	$0x1, %dl
000000000001266c	movb	%dl, -0x21(%rbp)
000000000001266f	je	0x12686
0000000000012675	movq	-0x10(%rbp), %rax
0000000000012679	movzbl	0x17(%rax), %ecx
000000000001267d	cmpl	$0x40, %ecx
0000000000012680	sete	%dl
0000000000012683	movb	%dl, -0x21(%rbp)
0000000000012686	movb	-0x21(%rbp), %al
0000000000012689	movb	%al, -0x20(%rbp)
000000000001268c	movb	-0x20(%rbp), %al
000000000001268f	movb	%al, -0x1f(%rbp)
0000000000012692	movb	-0x1f(%rbp), %al
0000000000012695	xorb	$-0x1, %al
0000000000012697	andb	$0x1, %al
0000000000012699	movzbl	%al, %ecx
000000000001269c	movslq	%ecx, %rdx
000000000001269f	cmpq	$0x0, %rdx
00000000000126a3	je	0x126c8
00000000000126a9	leaq	0x50427(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000126b0	leaq	0x4eaef(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000126b7	leaq	0x50432(%rip), %rcx ## literal pool for: "!vidx_register_class || ((instruction->raw.modrm.rm == 4) && ((instruction->address_width == 32) || (instruction->address_width == 64)))"
00000000000126be	movl	$0x594, %edx
00000000000126c3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000126c8	jmp	0x126cd
00000000000126cd	movq	-0x18(%rbp), %rax
00000000000126d1	movl	$0x2, 0x4(%rax)
00000000000126d8	movq	-0x18(%rbp), %rax
00000000000126dc	movl	$0x1, 0x28(%rax)
00000000000126e3	movq	-0x10(%rbp), %rax
00000000000126e7	movb	0x57a(%rax), %cl
00000000000126ed	movb	%cl, -0x1d(%rbp)
00000000000126f0	movb	$0x0, -0x1e(%rbp)
00000000000126f4	movq	-0x10(%rbp), %rax
00000000000126f8	movzbl	0x17(%rax), %edx
00000000000126fc	movl	%edx, %esi
00000000000126fe	subl	$0x10, %esi
0000000000012701	movl	%edx, -0x28(%rbp)
0000000000012704	movl	%esi, -0x2c(%rbp)
0000000000012707	je	0x1273a
000000000001270d	jmp	0x12712
0000000000012712	movl	-0x28(%rbp), %eax
0000000000012715	subl	$0x20, %eax
0000000000012718	movl	%eax, -0x30(%rbp)
000000000001271b	je	0x1280f
0000000000012721	jmp	0x12726
0000000000012726	movl	-0x28(%rbp), %eax
0000000000012729	subl	$0x40, %eax
000000000001272c	movl	%eax, -0x34(%rbp)
000000000001272f	je	0x12a88
0000000000012735	jmp	0x12d33
000000000001273a	movzbl	-0x1d(%rbp), %eax
000000000001273e	movl	%eax, %ecx
0000000000012740	leaq	_ZydisDecodeOperandMemory.bases(%rip), %rdx
0000000000012747	movl	(%rdx,%rcx,4), %eax
000000000001274a	movq	-0x18(%rbp), %rcx
000000000001274e	movl	%eax, 0x30(%rcx)
0000000000012751	movzbl	-0x1d(%rbp), %eax
0000000000012755	movl	%eax, %ecx
0000000000012757	leaq	_ZydisDecodeOperandMemory.indices(%rip), %rdx
000000000001275e	movl	(%rdx,%rcx,4), %eax
0000000000012761	movq	-0x18(%rbp), %rcx
0000000000012765	movl	%eax, 0x34(%rcx)
0000000000012768	movq	-0x18(%rbp), %rcx
000000000001276c	movl	0x34(%rcx), %eax
000000000001276f	testl	%eax, %eax
0000000000012771	setne	0x38(%rcx)
0000000000012775	movq	-0x10(%rbp), %rcx
0000000000012779	movzbl	0x578(%rcx), %eax
0000000000012780	testl	%eax, %eax
0000000000012782	movl	%eax, -0x38(%rbp)
0000000000012785	je	0x127b8
000000000001278b	jmp	0x12790
0000000000012790	movl	-0x38(%rbp), %eax
0000000000012793	subl	$0x1, %eax
0000000000012796	movl	%eax, -0x3c(%rbp)
0000000000012799	je	0x127d9
000000000001279f	jmp	0x127a4
00000000000127a4	movl	-0x38(%rbp), %eax
00000000000127a7	subl	$0x2, %eax
00000000000127aa	movl	%eax, -0x40(%rbp)
00000000000127ad	je	0x127e2
00000000000127b3	jmp	0x127eb
00000000000127b8	movzbl	-0x1d(%rbp), %eax
00000000000127bc	cmpl	$0x6, %eax
00000000000127bf	jne	0x127d4
00000000000127c5	movb	$0x10, -0x1e(%rbp)
00000000000127c9	movq	-0x18(%rbp), %rax
00000000000127cd	movl	$0x0, 0x30(%rax)
00000000000127d4	jmp	0x1280a
00000000000127d9	movb	$0x8, -0x1e(%rbp)
00000000000127dd	jmp	0x1280a
00000000000127e2	movb	$0x10, -0x1e(%rbp)
00000000000127e6	jmp	0x1280a
00000000000127eb	leaq	0x502e5(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000127f2	leaq	0x4e9ad(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000127f9	leaq	0x4ec0c(%rip), %rcx ## literal pool for: "0"
0000000000012800	movl	$0x5bc, %edx
0000000000012805	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001280a	jmp	0x12d52
000000000001280f	movq	-0x8(%rbp), %rdi
0000000000012813	movq	-0x10(%rbp), %rsi
0000000000012817	movl	$0x5, %edx
000000000001281c	movl	$0x3, %ecx
0000000000012821	callq	_ZydisCalcRegisterId
0000000000012826	movzbl	%al, %ecx
0000000000012829	addl	$0x25, %ecx
000000000001282c	movq	-0x18(%rbp), %rsi
0000000000012830	movl	%ecx, 0x30(%rsi)
0000000000012833	movq	-0x10(%rbp), %rsi
0000000000012837	movzbl	0x578(%rsi), %ecx
000000000001283e	testl	%ecx, %ecx
0000000000012840	movl	%ecx, -0x44(%rbp)
0000000000012843	je	0x12876
0000000000012849	jmp	0x1284e
000000000001284e	movl	-0x44(%rbp), %eax
0000000000012851	subl	$0x1, %eax
0000000000012854	movl	%eax, -0x48(%rbp)
0000000000012857	je	0x128b7
000000000001285d	jmp	0x12862
0000000000012862	movl	-0x44(%rbp), %eax
0000000000012865	subl	$0x2, %eax
0000000000012868	movl	%eax, -0x4c(%rbp)
000000000001286b	je	0x128c0
0000000000012871	jmp	0x128c9
0000000000012876	movzbl	-0x1d(%rbp), %eax
000000000001287a	cmpl	$0x5, %eax
000000000001287d	jne	0x128b2
0000000000012883	movq	-0x8(%rbp), %rax
0000000000012887	movq	(%rax), %rax
000000000001288a	cmpl	$0x0, (%rax)
000000000001288d	jne	0x128a3
0000000000012893	movq	-0x18(%rbp), %rax
0000000000012897	movl	$0xc4, 0x30(%rax)
000000000001289e	jmp	0x128ae
00000000000128a3	movq	-0x18(%rbp), %rax
00000000000128a7	movl	$0x0, 0x30(%rax)
00000000000128ae	movb	$0x20, -0x1e(%rbp)
00000000000128b2	jmp	0x128e8
00000000000128b7	movb	$0x8, -0x1e(%rbp)
00000000000128bb	jmp	0x128e8
00000000000128c0	movb	$0x20, -0x1e(%rbp)
00000000000128c4	jmp	0x128e8
00000000000128c9	leaq	0x50207(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000128d0	leaq	0x4e8cf(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000128d7	leaq	0x4eb2e(%rip), %rcx ## literal pool for: "0"
00000000000128de	movl	$0x5da, %edx
00000000000128e3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000128e8	movzbl	-0x1d(%rbp), %eax
00000000000128ec	cmpl	$0x4, %eax
00000000000128ef	jne	0x12a70
00000000000128f5	movq	-0x10(%rbp), %rax
00000000000128f9	movq	0x430(%rax), %rax
0000000000012900	andq	$0x2, %rax
0000000000012904	cmpq	$0x0, %rax
0000000000012908	setne	%cl
000000000001290b	xorb	$-0x1, %cl
000000000001290e	andb	$0x1, %cl
0000000000012911	movzbl	%cl, %edx
0000000000012914	movslq	%edx, %rax
0000000000012917	cmpq	$0x0, %rax
000000000001291b	je	0x12940
0000000000012921	leaq	0x501af(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012928	leaq	0x4e877(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001292f	leaq	0x500f9(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000012936	movl	$0x5de, %edx
000000000001293b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012940	jmp	0x12945
0000000000012945	cmpl	$0x0, -0x1c(%rbp)
0000000000012949	je	0x1295a
000000000001294f	movl	-0x1c(%rbp), %eax
0000000000012952	movl	%eax, -0x50(%rbp)
0000000000012955	jmp	0x12967
000000000001295a	movl	$0x3, %eax
000000000001295f	movl	%eax, -0x50(%rbp)
0000000000012962	jmp	0x12967
0000000000012967	movl	-0x50(%rbp), %eax
000000000001296a	movq	-0x8(%rbp), %rdi
000000000001296e	movq	-0x10(%rbp), %rsi
0000000000012972	movl	-0x1c(%rbp), %ecx
0000000000012975	cmpl	$0x0, %ecx
0000000000012978	movl	$0x7, %ecx
000000000001297d	movl	$0x6, %edx
0000000000012982	cmovnel	%ecx, %edx
0000000000012985	cmpl	$0x0, -0x1c(%rbp)
0000000000012989	movl	%eax, -0x54(%rbp)
000000000001298c	movq	%rdi, -0x60(%rbp)
0000000000012990	movq	%rsi, -0x68(%rbp)
0000000000012994	movl	%edx, -0x6c(%rbp)
0000000000012997	je	0x129a8
000000000001299d	movl	-0x1c(%rbp), %eax
00000000000129a0	movl	%eax, -0x70(%rbp)
00000000000129a3	jmp	0x129b5
00000000000129a8	movl	$0x3, %eax
00000000000129ad	movl	%eax, -0x70(%rbp)
00000000000129b0	jmp	0x129b5
00000000000129b5	movl	-0x70(%rbp), %eax
00000000000129b8	movq	-0x60(%rbp), %rdi
00000000000129bc	movq	-0x68(%rbp), %rsi
00000000000129c0	movl	-0x6c(%rbp), %edx
00000000000129c3	movl	%eax, %ecx
00000000000129c5	callq	_ZydisCalcRegisterId
00000000000129ca	movl	-0x54(%rbp), %edi
00000000000129cd	movzbl	%al, %esi
00000000000129d0	callq	_ZydisRegisterEncode
00000000000129d5	movq	-0x18(%rbp), %r8
00000000000129d9	movl	%eax, 0x34(%r8)
00000000000129dd	movq	-0x10(%rbp), %r8
00000000000129e1	movzbl	0x57c(%r8), %ecx
00000000000129e9	movl	$0x1, %eax
00000000000129ee	shll	%cl, %eax
00000000000129f0	movb	%al, %cl
00000000000129f2	movq	-0x18(%rbp), %r8
00000000000129f6	movb	%cl, 0x38(%r8)
00000000000129fa	movq	-0x18(%rbp), %r8
00000000000129fe	cmpl	$0x29, 0x34(%r8)
0000000000012a03	jne	0x12a1c
0000000000012a09	movq	-0x18(%rbp), %rax
0000000000012a0d	movl	$0x0, 0x34(%rax)
0000000000012a14	movq	-0x18(%rbp), %rax
0000000000012a18	movb	$0x0, 0x38(%rax)
0000000000012a1c	movq	-0x18(%rbp), %rax
0000000000012a20	cmpl	$0x2a, 0x30(%rax)
0000000000012a24	jne	0x12a6b
0000000000012a2a	movq	-0x10(%rbp), %rax
0000000000012a2e	movzbl	0x578(%rax), %ecx
0000000000012a35	cmpl	$0x0, %ecx
0000000000012a38	jne	0x12a49
0000000000012a3e	movq	-0x18(%rbp), %rax
0000000000012a42	movl	$0x0, 0x30(%rax)
0000000000012a49	movq	-0x10(%rbp), %rax
0000000000012a4d	movzbl	0x578(%rax), %ecx
0000000000012a54	cmpl	$0x1, %ecx
0000000000012a57	movl	$0x8, %ecx
0000000000012a5c	movl	$0x20, %edx
0000000000012a61	cmovel	%ecx, %edx
0000000000012a64	movb	%dl, %sil
0000000000012a67	movb	%sil, -0x1e(%rbp)
0000000000012a6b	jmp	0x12a83
0000000000012a70	movq	-0x18(%rbp), %rax
0000000000012a74	movl	$0x0, 0x34(%rax)
0000000000012a7b	movq	-0x18(%rbp), %rax
0000000000012a7f	movb	$0x0, 0x38(%rax)
0000000000012a83	jmp	0x12d52
0000000000012a88	movq	-0x8(%rbp), %rdi
0000000000012a8c	movq	-0x10(%rbp), %rsi
0000000000012a90	movl	$0x5, %edx
0000000000012a95	movl	$0x4, %ecx
0000000000012a9a	callq	_ZydisCalcRegisterId
0000000000012a9f	movzbl	%al, %ecx
0000000000012aa2	addl	$0x35, %ecx
0000000000012aa5	movq	-0x18(%rbp), %rsi
0000000000012aa9	movl	%ecx, 0x30(%rsi)
0000000000012aac	movq	-0x10(%rbp), %rsi
0000000000012ab0	movzbl	0x578(%rsi), %ecx
0000000000012ab7	testl	%ecx, %ecx
0000000000012ab9	movl	%ecx, -0x74(%rbp)
0000000000012abc	je	0x12aef
0000000000012ac2	jmp	0x12ac7
0000000000012ac7	movl	-0x74(%rbp), %eax
0000000000012aca	subl	$0x1, %eax
0000000000012acd	movl	%eax, -0x78(%rbp)
0000000000012ad0	je	0x12b30
0000000000012ad6	jmp	0x12adb
0000000000012adb	movl	-0x74(%rbp), %eax
0000000000012ade	subl	$0x2, %eax
0000000000012ae1	movl	%eax, -0x7c(%rbp)
0000000000012ae4	je	0x12b39
0000000000012aea	jmp	0x12b42
0000000000012aef	movzbl	-0x1d(%rbp), %eax
0000000000012af3	cmpl	$0x5, %eax
0000000000012af6	jne	0x12b2b
0000000000012afc	movq	-0x8(%rbp), %rax
0000000000012b00	movq	(%rax), %rax
0000000000012b03	cmpl	$0x0, (%rax)
0000000000012b06	jne	0x12b1c
0000000000012b0c	movq	-0x18(%rbp), %rax
0000000000012b10	movl	$0xc5, 0x30(%rax)
0000000000012b17	jmp	0x12b27
0000000000012b1c	movq	-0x18(%rbp), %rax
0000000000012b20	movl	$0x0, 0x30(%rax)
0000000000012b27	movb	$0x20, -0x1e(%rbp)
0000000000012b2b	jmp	0x12b61
0000000000012b30	movb	$0x8, -0x1e(%rbp)
0000000000012b34	jmp	0x12b61
0000000000012b39	movb	$0x20, -0x1e(%rbp)
0000000000012b3d	jmp	0x12b61
0000000000012b42	leaq	0x4ff8e(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012b49	leaq	0x4e656(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012b50	leaq	0x4e8b5(%rip), %rcx ## literal pool for: "0"
0000000000012b57	movl	$0x613, %edx
0000000000012b5c	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012b61	movzbl	-0x1d(%rbp), %eax
0000000000012b65	andl	$0x7, %eax
0000000000012b68	cmpl	$0x4, %eax
0000000000012b6b	jne	0x12d1b
0000000000012b71	movq	-0x10(%rbp), %rax
0000000000012b75	movq	0x430(%rax), %rax
0000000000012b7c	andq	$0x2, %rax
0000000000012b80	cmpq	$0x0, %rax
0000000000012b84	setne	%cl
0000000000012b87	xorb	$-0x1, %cl
0000000000012b8a	andb	$0x1, %cl
0000000000012b8d	movzbl	%cl, %edx
0000000000012b90	movslq	%edx, %rax
0000000000012b93	cmpq	$0x0, %rax
0000000000012b97	je	0x12bbc
0000000000012b9d	leaq	0x4ff33(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012ba4	leaq	0x4e5fb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012bab	leaq	0x4fe7d(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000012bb2	movl	$0x617, %edx
0000000000012bb7	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012bbc	jmp	0x12bc1
0000000000012bc1	cmpl	$0x0, -0x1c(%rbp)
0000000000012bc5	je	0x12bd6
0000000000012bcb	movl	-0x1c(%rbp), %eax
0000000000012bce	movl	%eax, -0x80(%rbp)
0000000000012bd1	jmp	0x12be3
0000000000012bd6	movl	$0x4, %eax
0000000000012bdb	movl	%eax, -0x80(%rbp)
0000000000012bde	jmp	0x12be3
0000000000012be3	movl	-0x80(%rbp), %eax
0000000000012be6	movq	-0x8(%rbp), %rdi
0000000000012bea	movq	-0x10(%rbp), %rsi
0000000000012bee	movl	-0x1c(%rbp), %ecx
0000000000012bf1	cmpl	$0x0, %ecx
0000000000012bf4	movl	$0x7, %ecx
0000000000012bf9	movl	$0x6, %edx
0000000000012bfe	cmovnel	%ecx, %edx
0000000000012c01	cmpl	$0x0, -0x1c(%rbp)
0000000000012c05	movl	%eax, -0x84(%rbp)
0000000000012c0b	movq	%rdi, -0x90(%rbp)
0000000000012c12	movq	%rsi, -0x98(%rbp)
0000000000012c19	movl	%edx, -0x9c(%rbp)
0000000000012c1f	je	0x12c33
0000000000012c25	movl	-0x1c(%rbp), %eax
0000000000012c28	movl	%eax, -0xa0(%rbp)
0000000000012c2e	jmp	0x12c43
0000000000012c33	movl	$0x4, %eax
0000000000012c38	movl	%eax, -0xa0(%rbp)
0000000000012c3e	jmp	0x12c43
0000000000012c43	movl	-0xa0(%rbp), %eax
0000000000012c49	movq	-0x90(%rbp), %rdi
0000000000012c50	movq	-0x98(%rbp), %rsi
0000000000012c57	movl	-0x9c(%rbp), %edx
0000000000012c5d	movl	%eax, %ecx
0000000000012c5f	callq	_ZydisCalcRegisterId
0000000000012c64	movl	-0x84(%rbp), %edi
0000000000012c6a	movzbl	%al, %esi
0000000000012c6d	callq	_ZydisRegisterEncode
0000000000012c72	movq	-0x18(%rbp), %r8
0000000000012c76	movl	%eax, 0x34(%r8)
0000000000012c7a	movq	-0x10(%rbp), %r8
0000000000012c7e	movzbl	0x57c(%r8), %ecx
0000000000012c86	movl	$0x1, %eax
0000000000012c8b	shll	%cl, %eax
0000000000012c8d	movb	%al, %cl
0000000000012c8f	movq	-0x18(%rbp), %r8
0000000000012c93	movb	%cl, 0x38(%r8)
0000000000012c97	movq	-0x18(%rbp), %r8
0000000000012c9b	cmpl	$0x39, 0x34(%r8)
0000000000012ca0	jne	0x12cb9
0000000000012ca6	movq	-0x18(%rbp), %rax
0000000000012caa	movl	$0x0, 0x34(%rax)
0000000000012cb1	movq	-0x18(%rbp), %rax
0000000000012cb5	movb	$0x0, 0x38(%rax)
0000000000012cb9	movq	-0x18(%rbp), %rax
0000000000012cbd	cmpl	$0x3a, 0x30(%rax)
0000000000012cc1	je	0x12cd5
0000000000012cc7	movq	-0x18(%rbp), %rax
0000000000012ccb	cmpl	$0x42, 0x30(%rax)
0000000000012ccf	jne	0x12d16
0000000000012cd5	movq	-0x10(%rbp), %rax
0000000000012cd9	movzbl	0x578(%rax), %ecx
0000000000012ce0	cmpl	$0x0, %ecx
0000000000012ce3	jne	0x12cf4
0000000000012ce9	movq	-0x18(%rbp), %rax
0000000000012ced	movl	$0x0, 0x30(%rax)
0000000000012cf4	movq	-0x10(%rbp), %rax
0000000000012cf8	movzbl	0x578(%rax), %ecx
0000000000012cff	cmpl	$0x1, %ecx
0000000000012d02	movl	$0x8, %ecx
0000000000012d07	movl	$0x20, %edx
0000000000012d0c	cmovel	%ecx, %edx
0000000000012d0f	movb	%dl, %sil
0000000000012d12	movb	%sil, -0x1e(%rbp)
0000000000012d16	jmp	0x12d2e
0000000000012d1b	movq	-0x18(%rbp), %rax
0000000000012d1f	movl	$0x0, 0x34(%rax)
0000000000012d26	movq	-0x18(%rbp), %rax
0000000000012d2a	movb	$0x0, 0x38(%rax)
0000000000012d2e	jmp	0x12d52
0000000000012d33	leaq	0x4fd9d(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012d3a	leaq	0x4e465(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012d41	leaq	0x4e6c4(%rip), %rcx ## literal pool for: "0"
0000000000012d48	movl	$0x634, %edx
0000000000012d4d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012d52	cmpb	$0x0, -0x1e(%rbp)
0000000000012d56	je	0x12dc9
0000000000012d5c	movq	-0x10(%rbp), %rax
0000000000012d60	movzbl	0x588(%rax), %ecx
0000000000012d67	movzbl	-0x1e(%rbp), %edx
0000000000012d6b	cmpl	%edx, %ecx
0000000000012d6d	sete	%sil
0000000000012d71	xorb	$-0x1, %sil
0000000000012d75	andb	$0x1, %sil
0000000000012d79	movzbl	%sil, %ecx
0000000000012d7d	movslq	%ecx, %rax
0000000000012d80	cmpq	$0x0, %rax
0000000000012d84	je	0x12da9
0000000000012d8a	leaq	0x4fd46(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012d91	leaq	0x4e40e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012d98	leaq	0x4fdda(%rip), %rcx ## literal pool for: "instruction->raw.disp.size == displacement_size"
0000000000012d9f	movl	$0x638, %edx
0000000000012da4	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012da9	jmp	0x12dae
0000000000012dae	movq	-0x18(%rbp), %rax
0000000000012db2	movb	$0x1, 0x40(%rax)
0000000000012db6	movq	-0x10(%rbp), %rax
0000000000012dba	movq	0x580(%rax), %rax
0000000000012dc1	movq	-0x18(%rbp), %rcx
0000000000012dc5	movq	%rax, 0x48(%rcx)
0000000000012dc9	movl	$0x100000, %eax
0000000000012dce	addq	$0xa0, %rsp
0000000000012dd5	popq	%rbp
0000000000012dd6	retq
0000000000012dd7	nopw	(%rax,%rax)
_ZydisSetOperandSizeAndElementInfo:
0000000000012de0	pushq	%rbp
0000000000012de1	movq	%rsp, %rbp
0000000000012de4	subq	$0x80, %rsp
0000000000012deb	movq	%rdi, -0x8(%rbp)
0000000000012def	movq	%rsi, -0x10(%rbp)
0000000000012df3	movq	%rdx, -0x18(%rbp)
0000000000012df7	movq	%rcx, -0x20(%rbp)
0000000000012dfb	cmpq	$0x0, -0x8(%rbp)
0000000000012e00	setne	%al
0000000000012e03	xorb	$-0x1, %al
0000000000012e05	andb	$0x1, %al
0000000000012e07	movzbl	%al, %r8d
0000000000012e0b	movslq	%r8d, %rcx
0000000000012e0e	cmpq	$0x0, %rcx
0000000000012e12	je	0x12e37
0000000000012e18	leaq	0x4fd8a(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000012e1f	leaq	0x4e380(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012e26	leaq	0x4e3ae(%rip), %rcx ## literal pool for: "context"
0000000000012e2d	movl	$0x46f, %edx
0000000000012e32	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012e37	jmp	0x12e3c
0000000000012e3c	cmpq	$0x0, -0x10(%rbp)
0000000000012e41	setne	%al
0000000000012e44	xorb	$-0x1, %al
0000000000012e46	andb	$0x1, %al
0000000000012e48	movzbl	%al, %ecx
0000000000012e4b	movslq	%ecx, %rdx
0000000000012e4e	cmpq	$0x0, %rdx
0000000000012e52	je	0x12e77
0000000000012e58	leaq	0x4fd4a(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000012e5f	leaq	0x4e340(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012e66	leaq	0x4e376(%rip), %rcx ## literal pool for: "instruction"
0000000000012e6d	movl	$0x470, %edx
0000000000012e72	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012e77	jmp	0x12e7c
0000000000012e7c	cmpq	$0x0, -0x18(%rbp)
0000000000012e81	setne	%al
0000000000012e84	xorb	$-0x1, %al
0000000000012e86	andb	$0x1, %al
0000000000012e88	movzbl	%al, %ecx
0000000000012e8b	movslq	%ecx, %rdx
0000000000012e8e	cmpq	$0x0, %rdx
0000000000012e92	je	0x12eb7
0000000000012e98	leaq	0x4fd0a(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000012e9f	leaq	0x4e300(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012ea6	leaq	0x4fa56(%rip), %rcx ## literal pool for: "operand"
0000000000012ead	movl	$0x471, %edx
0000000000012eb2	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012eb7	jmp	0x12ebc
0000000000012ebc	cmpq	$0x0, -0x20(%rbp)
0000000000012ec1	setne	%al
0000000000012ec4	xorb	$-0x1, %al
0000000000012ec6	andb	$0x1, %al
0000000000012ec8	movzbl	%al, %ecx
0000000000012ecb	movslq	%ecx, %rdx
0000000000012ece	cmpq	$0x0, %rdx
0000000000012ed2	je	0x12ef7
0000000000012ed8	leaq	0x4fcca(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000012edf	leaq	0x4e2c0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012ee6	leaq	0x4eb1b(%rip), %rcx ## literal pool for: "definition"
0000000000012eed	movl	$0x472, %edx
0000000000012ef2	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000012ef7	jmp	0x12efc
0000000000012efc	movq	-0x18(%rbp), %rax
0000000000012f00	movl	0x4(%rax), %ecx
0000000000012f03	decl	%ecx
0000000000012f05	movl	%ecx, %eax
0000000000012f07	subl	$0x3, %ecx
0000000000012f0a	movq	%rax, -0x28(%rbp)
0000000000012f0e	movl	%ecx, -0x2c(%rbp)
0000000000012f11	ja	0x137a7
0000000000012f17	leaq	0x98a(%rip), %rax
0000000000012f1e	movq	-0x28(%rbp), %rcx
0000000000012f22	movslq	(%rax,%rcx,4), %rdx
0000000000012f26	addq	%rax, %rdx
0000000000012f29	jmpq	*%rdx
0000000000012f2b	movq	-0x20(%rbp), %rax
0000000000012f2f	movq	-0x8(%rbp), %rcx
0000000000012f33	movzbl	0x24(%rcx), %edx
0000000000012f37	movl	%edx, %ecx
0000000000012f39	cmpw	$0x0, 0x2(%rax,%rcx,2)
0000000000012f3f	je	0x12f6b
0000000000012f45	movq	-0x20(%rbp), %rax
0000000000012f49	movq	-0x8(%rbp), %rcx
0000000000012f4d	movzbl	0x24(%rcx), %edx
0000000000012f51	movl	%edx, %ecx
0000000000012f53	movzwl	0x2(%rax,%rcx,2), %edx
0000000000012f58	shll	$0x3, %edx
0000000000012f5b	movw	%dx, %si
0000000000012f5e	movq	-0x18(%rbp), %rax
0000000000012f62	movw	%si, 0x14(%rax)
0000000000012f66	jmp	0x12f88
0000000000012f6b	movq	-0x8(%rbp), %rax
0000000000012f6f	movq	(%rax), %rax
0000000000012f72	movl	(%rax), %edi
0000000000012f74	movq	-0x18(%rbp), %rax
0000000000012f78	movl	0x20(%rax), %esi
0000000000012f7b	callq	_ZydisRegisterGetWidth
0000000000012f80	movq	-0x18(%rbp), %rcx
0000000000012f84	movw	%ax, 0x14(%rcx)
0000000000012f88	movq	-0x18(%rbp), %rax
0000000000012f8c	movl	$0x3, 0x18(%rax)
0000000000012f93	movq	-0x18(%rbp), %rax
0000000000012f97	movw	0x14(%rax), %cx
0000000000012f9b	movq	-0x18(%rbp), %rax
0000000000012f9f	movw	%cx, 0x1c(%rax)
0000000000012fa3	jmp	0x137c6
0000000000012fa8	movq	-0x10(%rbp), %rax
0000000000012fac	movl	0xc(%rax), %ecx
0000000000012faf	movl	%ecx, %edx
0000000000012fb1	subl	$0x4, %edx
0000000000012fb4	movl	%ecx, -0x30(%rbp)
0000000000012fb7	movl	%edx, -0x34(%rbp)
0000000000012fba	jb	0x12fed
0000000000012fc0	jmp	0x12fc5
0000000000012fc5	movl	-0x30(%rbp), %eax
0000000000012fc8	subl	$0x4, %eax
0000000000012fcb	movl	%eax, -0x38(%rbp)
0000000000012fce	je	0x130f0
0000000000012fd4	jmp	0x12fd9
0000000000012fd9	movl	-0x30(%rbp), %eax
0000000000012fdc	subl	$0x5, %eax
0000000000012fdf	movl	%eax, -0x3c(%rbp)
0000000000012fe2	je	0x132eb
0000000000012fe8	jmp	0x13682
0000000000012fed	movq	-0x18(%rbp), %rax
0000000000012ff1	cmpl	$0x2, 0x28(%rax)
0000000000012ff5	jne	0x13075
0000000000012ffb	movq	-0x20(%rbp), %rax
0000000000012fff	movq	-0x8(%rbp), %rcx
0000000000013003	movzbl	0x24(%rcx), %edx
0000000000013007	movl	%edx, %ecx
0000000000013009	movzwl	0x2(%rax,%rcx,2), %edx
000000000001300e	cmpl	$0x0, %edx
0000000000013011	sete	%sil
0000000000013015	xorb	$-0x1, %sil
0000000000013019	andb	$0x1, %sil
000000000001301d	movzbl	%sil, %edx
0000000000013021	movslq	%edx, %rax
0000000000013024	cmpq	$0x0, %rax
0000000000013028	je	0x1304d
000000000001302e	leaq	0x4fb74(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013035	leaq	0x4e16a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001303c	leaq	0x4fb88(%rip), %rcx ## literal pool for: "definition->size[context->eosz_index] == 0"
0000000000013043	movl	$0x48e, %edx
0000000000013048	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001304d	jmp	0x13052
0000000000013052	movq	-0x10(%rbp), %rax
0000000000013056	movzbl	0x17(%rax), %ecx
000000000001305a	movw	%cx, %dx
000000000001305d	movq	-0x18(%rbp), %rax
0000000000013061	movw	%dx, 0x14(%rax)
0000000000013065	movq	-0x18(%rbp), %rax
0000000000013069	movl	$0x3, 0x18(%rax)
0000000000013070	jmp	0x130eb
0000000000013075	movq	-0x20(%rbp), %rax
0000000000013079	movq	-0x8(%rbp), %rcx
000000000001307d	movzbl	0x24(%rcx), %edx
0000000000013081	movl	%edx, %ecx
0000000000013083	cmpw	$0x0, 0x2(%rax,%rcx,2)
0000000000013089	setne	%sil
000000000001308d	xorb	$-0x1, %sil
0000000000013091	andb	$0x1, %sil
0000000000013095	movzbl	%sil, %edx
0000000000013099	movslq	%edx, %rax
000000000001309c	cmpq	$0x0, %rax
00000000000130a0	je	0x130c5
00000000000130a6	leaq	0x4fafc(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000130ad	leaq	0x4e0f2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000130b4	leaq	0x4fb3b(%rip), %rcx ## literal pool for: "definition->size[context->eosz_index]"
00000000000130bb	movl	$0x493, %edx
00000000000130c0	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000130c5	jmp	0x130ca
00000000000130ca	movq	-0x20(%rbp), %rax
00000000000130ce	movq	-0x8(%rbp), %rcx
00000000000130d2	movzbl	0x24(%rcx), %edx
00000000000130d6	movl	%edx, %ecx
00000000000130d8	movzwl	0x2(%rax,%rcx,2), %edx
00000000000130dd	shll	$0x3, %edx
00000000000130e0	movw	%dx, %si
00000000000130e3	movq	-0x18(%rbp), %rax
00000000000130e7	movw	%si, 0x14(%rax)
00000000000130eb	jmp	0x136a1
00000000000130f0	movq	-0x20(%rbp), %rax
00000000000130f4	movq	-0x8(%rbp), %rcx
00000000000130f8	movzbl	0x24(%rcx), %edx
00000000000130fc	movl	%edx, %ecx
00000000000130fe	cmpw	$0x0, 0x2(%rax,%rcx,2)
0000000000013104	je	0x13130
000000000001310a	movq	-0x20(%rbp), %rax
000000000001310e	movq	-0x8(%rbp), %rcx
0000000000013112	movzbl	0x24(%rcx), %edx
0000000000013116	movl	%edx, %ecx
0000000000013118	movzwl	0x2(%rax,%rcx,2), %edx
000000000001311d	shll	$0x3, %edx
0000000000013120	movw	%dx, %si
0000000000013123	movq	-0x18(%rbp), %rax
0000000000013127	movw	%si, 0x14(%rax)
000000000001312b	jmp	0x132a0
0000000000013130	movq	-0x10(%rbp), %rax
0000000000013134	cmpw	$0x0, 0x48c(%rax)
000000000001313c	setne	%cl
000000000001313f	xorb	$-0x1, %cl
0000000000013142	andb	$0x1, %cl
0000000000013145	movzbl	%cl, %edx
0000000000013148	movslq	%edx, %rax
000000000001314b	cmpq	$0x0, %rax
000000000001314f	je	0x13174
0000000000013155	leaq	0x4fa4d(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001315c	leaq	0x4e043(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013163	leaq	0x4fab2(%rip), %rcx ## literal pool for: "instruction->avx.vector_length"
000000000001316a	movl	$0x4a1, %edx
000000000001316f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013174	jmp	0x13179
0000000000013179	movq	-0x8(%rbp), %rax
000000000001317d	cmpb	$0x0, 0x34(%rax)
0000000000013181	setne	%cl
0000000000013184	xorb	$-0x1, %cl
0000000000013187	andb	$0x1, %cl
000000000001318a	movzbl	%cl, %edx
000000000001318d	movslq	%edx, %rax
0000000000013190	cmpq	$0x0, %rax
0000000000013194	je	0x131b9
000000000001319a	leaq	0x4fa08(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000131a1	leaq	0x4dffe(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000131a8	leaq	0x4fa8c(%rip), %rcx ## literal pool for: "context->evex.element_size"
00000000000131af	movl	$0x4a2, %edx
00000000000131b4	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000131b9	jmp	0x131be
00000000000131be	movq	-0x8(%rbp), %rax
00000000000131c2	movl	0x30(%rax), %ecx
00000000000131c5	movl	%ecx, %edx
00000000000131c7	subl	$0x1, %edx
00000000000131ca	movl	%ecx, -0x40(%rbp)
00000000000131cd	movl	%edx, -0x44(%rbp)
00000000000131d0	je	0x131ef
00000000000131d6	jmp	0x131db
00000000000131db	movl	-0x40(%rbp), %eax
00000000000131de	subl	$0x2, %eax
00000000000131e1	movl	%eax, -0x48(%rbp)
00000000000131e4	je	0x13230
00000000000131ea	jmp	0x1327c
00000000000131ef	movq	-0x10(%rbp), %rax
00000000000131f3	cmpl	$0x0, 0x49c(%rax)
00000000000131fa	je	0x13218
0000000000013200	movq	-0x8(%rbp), %rax
0000000000013204	movzbl	0x34(%rax), %ecx
0000000000013208	movw	%cx, %dx
000000000001320b	movq	-0x18(%rbp), %rax
000000000001320f	movw	%dx, 0x14(%rax)
0000000000013213	jmp	0x1322b
0000000000013218	movq	-0x10(%rbp), %rax
000000000001321c	movw	0x48c(%rax), %cx
0000000000013223	movq	-0x18(%rbp), %rax
0000000000013227	movw	%cx, 0x14(%rax)
000000000001322b	jmp	0x1329b
0000000000013230	movq	-0x10(%rbp), %rax
0000000000013234	cmpl	$0x0, 0x49c(%rax)
000000000001323b	je	0x13259
0000000000013241	movq	-0x8(%rbp), %rax
0000000000013245	movzbl	0x34(%rax), %ecx
0000000000013249	movw	%cx, %dx
000000000001324c	movq	-0x18(%rbp), %rax
0000000000013250	movw	%dx, 0x14(%rax)
0000000000013254	jmp	0x13277
0000000000013259	movq	-0x10(%rbp), %rax
000000000001325d	movzwl	0x48c(%rax), %eax
0000000000013264	cltd
0000000000013265	movl	$0x2, %ecx
000000000001326a	idivl	%ecx
000000000001326c	movw	%ax, %si
000000000001326f	movq	-0x18(%rbp), %rdi
0000000000013273	movw	%si, 0x14(%rdi)
0000000000013277	jmp	0x1329b
000000000001327c	leaq	0x4f926(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013283	leaq	0x4df1c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001328a	leaq	0x4e17b(%rip), %rcx ## literal pool for: "0"
0000000000013291	movl	$0x4b8, %edx
0000000000013296	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001329b	jmp	0x132a0
00000000000132a0	movq	-0x18(%rbp), %rax
00000000000132a4	cmpw	$0x0, 0x14(%rax)
00000000000132a9	setne	%cl
00000000000132ac	xorb	$-0x1, %cl
00000000000132af	andb	$0x1, %cl
00000000000132b2	movzbl	%cl, %edx
00000000000132b5	movslq	%edx, %rax
00000000000132b8	cmpq	$0x0, %rax
00000000000132bc	je	0x132e1
00000000000132c2	leaq	0x4f8e0(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000132c9	leaq	0x4ded6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000132d0	leaq	0x4f97f(%rip), %rcx ## literal pool for: "operand->size"
00000000000132d7	movl	$0x4bb, %edx
00000000000132dc	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000132e1	jmp	0x132e6
00000000000132e6	jmp	0x136a1
00000000000132eb	movq	-0x20(%rbp), %rax
00000000000132ef	movq	-0x8(%rbp), %rcx
00000000000132f3	movzbl	0x24(%rcx), %edx
00000000000132f7	movl	%edx, %ecx
00000000000132f9	cmpw	$0x0, 0x2(%rax,%rcx,2)
00000000000132ff	je	0x1332b
0000000000013305	movq	-0x20(%rbp), %rax
0000000000013309	movq	-0x8(%rbp), %rcx
000000000001330d	movzbl	0x24(%rcx), %edx
0000000000013311	movl	%edx, %ecx
0000000000013313	movzwl	0x2(%rax,%rcx,2), %edx
0000000000013318	shll	$0x3, %edx
000000000001331b	movw	%dx, %si
000000000001331e	movq	-0x18(%rbp), %rax
0000000000013322	movw	%si, 0x14(%rax)
0000000000013326	jmp	0x1367d
000000000001332b	movq	-0x20(%rbp), %rax
000000000001332f	movb	0x8(%rax), %cl
0000000000013332	andb	$0x1f, %cl
0000000000013335	movzbl	%cl, %edx
0000000000013338	cmpl	$0x1, %edx
000000000001333b	sete	%cl
000000000001333e	xorb	$-0x1, %cl
0000000000013341	andb	$0x1, %cl
0000000000013344	movzbl	%cl, %edx
0000000000013347	movslq	%edx, %rax
000000000001334a	cmpq	$0x0, %rax
000000000001334e	je	0x13373
0000000000013354	leaq	0x4f84e(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001335b	leaq	0x4de44(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013362	leaq	0x4f8fb(%rip), %rcx ## literal pool for: "definition->element_type == ZYDIS_IELEMENT_TYPE_VARIABLE"
0000000000013369	movl	$0x4c8, %edx
000000000001336e	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013373	jmp	0x13378
0000000000013378	movq	-0x10(%rbp), %rax
000000000001337c	movzwl	0x48c(%rax), %ecx
0000000000013383	cmpl	$0x200, %ecx
0000000000013389	sete	%dl
000000000001338c	xorb	$-0x1, %dl
000000000001338f	andb	$0x1, %dl
0000000000013392	movzbl	%dl, %ecx
0000000000013395	movslq	%ecx, %rax
0000000000013398	cmpq	$0x0, %rax
000000000001339c	je	0x133c1
00000000000133a2	leaq	0x4f800(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000133a9	leaq	0x4ddf6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000133b0	leaq	0x4efee(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
00000000000133b7	movl	$0x4c9, %edx
00000000000133bc	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000133c1	jmp	0x133c6
00000000000133c6	movq	-0x10(%rbp), %rax
00000000000133ca	movl	0x4a8(%rax), %ecx
00000000000133d0	movl	%ecx, %eax
00000000000133d2	movq	%rax, %rdx
00000000000133d5	subq	$0x5, %rdx
00000000000133d9	movq	%rax, -0x50(%rbp)
00000000000133dd	movq	%rdx, -0x58(%rbp)
00000000000133e1	ja	0x135bd
00000000000133e7	leaq	0x4ca(%rip), %rax
00000000000133ee	movq	-0x50(%rbp), %rcx
00000000000133f2	movslq	(%rax,%rcx,4), %rdx
00000000000133f6	addq	%rax, %rdx
00000000000133f9	jmpq	*%rdx
00000000000133fb	movq	-0x18(%rbp), %rax
00000000000133ff	movw	$0x200, 0x14(%rax)
0000000000013405	movq	-0x8(%rbp), %rax
0000000000013409	movl	0x38(%rax), %ecx
000000000001340c	addl	$-0xa, %ecx
000000000001340f	movl	%ecx, %eax
0000000000013411	subl	$0xf, %ecx
0000000000013414	movq	%rax, -0x60(%rbp)
0000000000013418	movl	%ecx, -0x64(%rbp)
000000000001341b	ja	0x134e5
0000000000013421	leaq	0x4a8(%rip), %rax
0000000000013428	movq	-0x60(%rbp), %rcx
000000000001342c	movslq	(%rax,%rcx,4), %rdx
0000000000013430	addq	%rax, %rdx
0000000000013433	jmpq	*%rdx
0000000000013435	movq	-0x18(%rbp), %rax
0000000000013439	movl	$0x5, 0x18(%rax)
0000000000013440	movq	-0x18(%rbp), %rax
0000000000013444	movw	$0x20, 0x1c(%rax)
000000000001344a	jmp	0x13504
000000000001344f	movq	-0x18(%rbp), %rax
0000000000013453	movw	$0x100, 0x14(%rax)
0000000000013459	movq	-0x18(%rbp), %rax
000000000001345d	movl	$0x5, 0x18(%rax)
0000000000013464	movq	-0x18(%rbp), %rax
0000000000013468	movw	$0x20, 0x1c(%rax)
000000000001346e	jmp	0x13504
0000000000013473	movq	-0x18(%rbp), %rax
0000000000013477	movl	$0x3, 0x18(%rax)
000000000001347e	movq	-0x18(%rbp), %rax
0000000000013482	movw	$0x20, 0x1c(%rax)
0000000000013488	jmp	0x13504
000000000001348d	movq	-0x18(%rbp), %rax
0000000000013491	movw	$0x100, 0x14(%rax)
0000000000013497	movq	-0x18(%rbp), %rax
000000000001349b	movl	$0x3, 0x18(%rax)
00000000000134a2	movq	-0x18(%rbp), %rax
00000000000134a6	movw	$0x20, 0x1c(%rax)
00000000000134ac	jmp	0x13504
00000000000134b1	movq	-0x18(%rbp), %rax
00000000000134b5	movl	$0x6, 0x18(%rax)
00000000000134bc	movq	-0x18(%rbp), %rax
00000000000134c0	movw	$0x40, 0x1c(%rax)
00000000000134c6	jmp	0x13504
00000000000134cb	movq	-0x18(%rbp), %rax
00000000000134cf	movl	$0x3, 0x18(%rax)
00000000000134d6	movq	-0x18(%rbp), %rax
00000000000134da	movw	$0x40, 0x1c(%rax)
00000000000134e0	jmp	0x13504
00000000000134e5	leaq	0x4f6bd(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000134ec	leaq	0x4dcb3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000134f3	leaq	0x4df12(%rip), %rcx ## literal pool for: "0"
00000000000134fa	movl	$0x4f6, %edx
00000000000134ff	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013504	jmp	0x135dc
0000000000013509	movq	-0x18(%rbp), %rax
000000000001350d	movw	$0x100, 0x14(%rax)
0000000000013513	movq	-0x18(%rbp), %rax
0000000000013517	movl	$0x4, 0x18(%rax)
000000000001351e	movq	-0x18(%rbp), %rax
0000000000013522	movw	$0x10, 0x1c(%rax)
0000000000013528	jmp	0x135dc
000000000001352d	movq	-0x18(%rbp), %rax
0000000000013531	movw	$0x100, 0x14(%rax)
0000000000013537	movq	-0x18(%rbp), %rax
000000000001353b	movl	$0x3, 0x18(%rax)
0000000000013542	movq	-0x18(%rbp), %rax
0000000000013546	movw	$0x10, 0x1c(%rax)
000000000001354c	jmp	0x135dc
0000000000013551	movq	-0x18(%rbp), %rax
0000000000013555	movw	$0x100, 0x14(%rax)
000000000001355b	movq	-0x18(%rbp), %rax
000000000001355f	movl	$0x2, 0x18(%rax)
0000000000013566	movq	-0x18(%rbp), %rax
000000000001356a	movw	$0x10, 0x1c(%rax)
0000000000013570	jmp	0x135dc
0000000000013575	movq	-0x18(%rbp), %rax
0000000000013579	movw	$0x80, 0x14(%rax)
000000000001357f	movq	-0x18(%rbp), %rax
0000000000013583	movl	$0x3, 0x18(%rax)
000000000001358a	movq	-0x18(%rbp), %rax
000000000001358e	movw	$0x8, 0x1c(%rax)
0000000000013594	jmp	0x135dc
0000000000013599	movq	-0x18(%rbp), %rax
000000000001359d	movw	$0x80, 0x14(%rax)
00000000000135a3	movq	-0x18(%rbp), %rax
00000000000135a7	movl	$0x2, 0x18(%rax)
00000000000135ae	movq	-0x18(%rbp), %rax
00000000000135b2	movw	$0x8, 0x1c(%rax)
00000000000135b8	jmp	0x135dc
00000000000135bd	leaq	0x4f5e5(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000135c4	leaq	0x4dbdb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000135cb	leaq	0x4de3a(%rip), %rcx ## literal pool for: "0"
00000000000135d2	movl	$0x513, %edx
00000000000135d7	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000135dc	movq	-0x10(%rbp), %rax
00000000000135e0	movl	0x49c(%rax), %ecx
00000000000135e6	testl	%ecx, %ecx
00000000000135e8	movl	%ecx, -0x68(%rbp)
00000000000135eb	je	0x13624
00000000000135f1	jmp	0x135f6
00000000000135f6	movl	-0x68(%rbp), %eax
00000000000135f9	addl	$-0x3, %eax
00000000000135fc	subl	$0x2, %eax
00000000000135ff	movl	%eax, -0x6c(%rbp)
0000000000013602	jb	0x13629
0000000000013608	jmp	0x1360d
000000000001360d	movl	-0x68(%rbp), %eax
0000000000013610	addl	$-0xa, %eax
0000000000013613	subl	$0x2, %eax
0000000000013616	movl	%eax, -0x70(%rbp)
0000000000013619	jb	0x1363e
000000000001361f	jmp	0x13659
0000000000013624	jmp	0x13678
0000000000013629	movq	-0x18(%rbp), %rax
000000000001362d	movw	0x1c(%rax), %cx
0000000000013631	movq	-0x18(%rbp), %rax
0000000000013635	movw	%cx, 0x14(%rax)
0000000000013639	jmp	0x13678
000000000001363e	movq	-0x18(%rbp), %rax
0000000000013642	movzwl	0x1c(%rax), %ecx
0000000000013646	shll	$0x2, %ecx
0000000000013649	movw	%cx, %dx
000000000001364c	movq	-0x18(%rbp), %rax
0000000000013650	movw	%dx, 0x14(%rax)
0000000000013654	jmp	0x13678
0000000000013659	leaq	0x4f549(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013660	leaq	0x4db3f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013667	leaq	0x4dd9e(%rip), %rcx ## literal pool for: "0"
000000000001366e	movl	$0x524, %edx
0000000000013673	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013678	jmp	0x1367d
000000000001367d	jmp	0x136a1
0000000000013682	leaq	0x4f520(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013689	leaq	0x4db16(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013690	leaq	0x4dd75(%rip), %rcx ## literal pool for: "0"
0000000000013697	movl	$0x52c, %edx
000000000001369c	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000136a1	jmp	0x137c6
00000000000136a6	movq	-0x10(%rbp), %rax
00000000000136aa	movzbl	0x5a0(%rax), %ecx
00000000000136b1	cmpl	$0x10, %ecx
00000000000136b4	movb	$0x1, %dl
00000000000136b6	movb	%dl, -0x71(%rbp)
00000000000136b9	je	0x136d3
00000000000136bf	movq	-0x10(%rbp), %rax
00000000000136c3	movzbl	0x5a0(%rax), %ecx
00000000000136ca	cmpl	$0x20, %ecx
00000000000136cd	sete	%dl
00000000000136d0	movb	%dl, -0x71(%rbp)
00000000000136d3	movb	-0x71(%rbp), %al
00000000000136d6	xorb	$-0x1, %al
00000000000136d8	andb	$0x1, %al
00000000000136da	movzbl	%al, %ecx
00000000000136dd	movslq	%ecx, %rdx
00000000000136e0	cmpq	$0x0, %rdx
00000000000136e4	je	0x13709
00000000000136ea	leaq	0x4f4b8(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000136f1	leaq	0x4daae(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000136f8	leaq	0x4f089(%rip), %rcx ## literal pool for: "(instruction->raw.imm[0].size == 16) || (instruction->raw.imm[0].size == 32)"
00000000000136ff	movl	$0x531, %edx
0000000000013704	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013709	jmp	0x1370e
000000000001370e	movq	-0x10(%rbp), %rax
0000000000013712	movzbl	0x5b8(%rax), %ecx
0000000000013719	cmpl	$0x10, %ecx
000000000001371c	sete	%dl
000000000001371f	xorb	$-0x1, %dl
0000000000013722	andb	$0x1, %dl
0000000000013725	movzbl	%dl, %ecx
0000000000013728	movslq	%ecx, %rax
000000000001372b	cmpq	$0x0, %rax
000000000001372f	je	0x13754
0000000000013735	leaq	0x4f46d(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001373c	leaq	0x4da63(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013743	leaq	0x4f08b(%rip), %rcx ## literal pool for: "instruction->raw.imm[1].size == 16"
000000000001374a	movl	$0x532, %edx
000000000001374f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013754	jmp	0x13759
0000000000013759	movq	-0x10(%rbp), %rax
000000000001375d	movzbl	0x5a0(%rax), %ecx
0000000000013764	movq	-0x10(%rbp), %rax
0000000000013768	movzbl	0x5b8(%rax), %edx
000000000001376f	addl	%edx, %ecx
0000000000013771	movw	%cx, %si
0000000000013774	movq	-0x18(%rbp), %rax
0000000000013778	movw	%si, 0x14(%rax)
000000000001377c	jmp	0x137c6
0000000000013781	movq	-0x20(%rbp), %rax
0000000000013785	movq	-0x8(%rbp), %rcx
0000000000013789	movzbl	0x24(%rcx), %edx
000000000001378d	movl	%edx, %ecx
000000000001378f	movzwl	0x2(%rax,%rcx,2), %edx
0000000000013794	shll	$0x3, %edx
0000000000013797	movw	%dx, %si
000000000001379a	movq	-0x18(%rbp), %rax
000000000001379e	movw	%si, 0x14(%rax)
00000000000137a2	jmp	0x137c6
00000000000137a7	leaq	0x4f3fb(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000137ae	leaq	0x4d9f1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000137b5	leaq	0x4dc50(%rip), %rcx ## literal pool for: "0"
00000000000137bc	movl	$0x539, %edx
00000000000137c1	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000137c6	movq	-0x20(%rbp), %rax
00000000000137ca	movb	0x8(%rax), %cl
00000000000137cd	andb	$0x1f, %cl
00000000000137d0	movzbl	%cl, %edx
00000000000137d3	cmpl	$0x0, %edx
00000000000137d6	je	0x1383b
00000000000137dc	movq	-0x20(%rbp), %rax
00000000000137e0	movb	0x8(%rax), %cl
00000000000137e3	andb	$0x1f, %cl
00000000000137e6	movzbl	%cl, %edx
00000000000137e9	cmpl	$0x1, %edx
00000000000137ec	je	0x1383b
00000000000137f2	movq	-0x20(%rbp), %rax
00000000000137f6	movb	0x8(%rax), %cl
00000000000137f9	andb	$0x1f, %cl
00000000000137fc	movzbl	%cl, %edi
00000000000137ff	movq	-0x18(%rbp), %rax
0000000000013803	addq	$0x18, %rax
0000000000013807	movq	-0x18(%rbp), %rdx
000000000001380b	addq	$0x1c, %rdx
000000000001380f	movq	%rax, %rsi
0000000000013812	callq	_ZydisGetElementInfo
0000000000013817	movq	-0x18(%rbp), %rax
000000000001381b	cmpw	$0x0, 0x1c(%rax)
0000000000013820	jne	0x13836
0000000000013826	movq	-0x18(%rbp), %rax
000000000001382a	movw	0x14(%rax), %cx
000000000001382e	movq	-0x18(%rbp), %rax
0000000000013832	movw	%cx, 0x1c(%rax)
0000000000013836	jmp	0x1383b
000000000001383b	movq	-0x18(%rbp), %rax
000000000001383f	movzwl	0x1c(%rax), %ecx
0000000000013843	cmpl	$0x0, %ecx
0000000000013846	je	0x13894
000000000001384c	movq	-0x18(%rbp), %rax
0000000000013850	movzwl	0x14(%rax), %ecx
0000000000013854	cmpl	$0x0, %ecx
0000000000013857	je	0x13894
000000000001385d	movq	-0x18(%rbp), %rax
0000000000013861	cmpl	$0x9, 0x18(%rax)
0000000000013865	je	0x13894
000000000001386b	movq	-0x18(%rbp), %rax
000000000001386f	movzwl	0x14(%rax), %eax
0000000000013873	movq	-0x18(%rbp), %rcx
0000000000013877	movzwl	0x1c(%rcx), %edx
000000000001387b	movl	%edx, -0x78(%rbp)
000000000001387e	cltd
000000000001387f	movl	-0x78(%rbp), %esi
0000000000013882	idivl	%esi
0000000000013884	movw	%ax, %di
0000000000013887	movq	-0x18(%rbp), %rcx
000000000001388b	movw	%di, 0x1e(%rcx)
000000000001388f	jmp	0x1389e
0000000000013894	movq	-0x18(%rbp), %rax
0000000000013898	movw	$0x1, 0x1e(%rax)
000000000001389e	addq	$0x80, %rsp
00000000000138a5	popq	%rbp
00000000000138a6	retq
00000000000138a7	nop
00000000000138a8	xorl	$-0x1, %esi
00000000000138ab	incl	(%rax)
00000000000138ad	idivl	%edi
00000000000138af	.byte 0xff #bad opcode
00000000000138b0	.byte 0xfe #bad opcode
00000000000138b1	std
00000000000138b2	.byte 0xff #bad opcode
00000000000138b3	.byte 0xff #bad opcode
00000000000138b4	fsin
00000000000138b6	.byte 0xff #bad opcode
00000000000138b7	incl	-0x5(%rbx)
00000000000138ba	.byte 0xff #bad opcode
00000000000138bb	callq	*-0x4(%rcx)
00000000000138be	.byte 0xff #bad opcode
00000000000138bf	.byte 0xff #bad opcode
00000000000138c0	movl	$0xe1fffffc, %ebp
00000000000138c5	cld
00000000000138c6	.byte 0xff #bad opcode
00000000000138c7	pushq	-0x4(%rbp)
00000000000138ca	.byte 0xff #bad opcode
00000000000138cb	lcalll	*0x65fffffc(%rcx)
00000000000138d1	sti
00000000000138d2	.byte 0xff #bad opcode
00000000000138d3	.byte 0xff #bad opcode
00000000000138d4	jg	0x138d1
00000000000138d6	.byte 0xff #bad opcode
00000000000138d7	jmpq	*-0x5(%rbp)
00000000000138da	.byte 0xff #bad opcode
00000000000138db	jmpq	*%rcx
00000000000138dd	sti
00000000000138de	.byte 0xff #bad opcode
00000000000138df	jmpq	*-0x42000005(%rbx)
00000000000138e5	sti
00000000000138e6	.byte 0xff #bad opcode
00000000000138e7	jmpq	*-0x4000005(%rbx)
00000000000138ed	sti
00000000000138ee	.byte 0xff #bad opcode
00000000000138ef	jmpq	*-0x5(%rbp)
00000000000138f2	.byte 0xff #bad opcode
00000000000138f3	jmpq	*%rcx
00000000000138f5	sti
00000000000138f6	.byte 0xff #bad opcode
00000000000138f7	jmpq	*-0x4000005(%rbx)
00000000000138fd	sti
00000000000138fe	.byte 0xff #bad opcode
00000000000138ff	jmpq	*-0x5(%rbp)
0000000000013902	.byte 0xff #bad opcode
0000000000013903	jmpq	*%rcx
0000000000013905	sti
0000000000013906	.byte 0xff #bad opcode
0000000000013907	jmpq	*-0x4000005(%rbx)
000000000001390d	sti
000000000001390e	.byte 0xff #bad opcode
000000000001390f	callq	*0x48(%rbp)
_ZydisDecoderTreeGetChildNode:
0000000000013910	pushq	%rbp
0000000000013911	movq	%rsp, %rbp
0000000000013914	subq	$0x30, %rsp
0000000000013918	movw	%si, %ax
000000000001391b	movq	%rdi, -0x10(%rbp)
000000000001391f	movw	%ax, -0x12(%rbp)
0000000000013923	movq	-0x10(%rbp), %rdi
0000000000013927	movzbl	(%rdi), %esi
000000000001392a	decl	%esi
000000000001392c	movl	%esi, %edi
000000000001392e	subl	$0x1a, %esi
0000000000013931	movq	%rdi, -0x20(%rbp)
0000000000013935	movl	%esi, -0x24(%rbp)
0000000000013938	ja	0x1455d
000000000001393e	leaq	0xc43(%rip), %rax
0000000000013945	movq	-0x20(%rbp), %rcx
0000000000013949	movslq	(%rax,%rcx,4), %rdx
000000000001394d	addq	%rax, %rdx
0000000000013950	jmpq	*%rdx
0000000000013952	movzwl	-0x12(%rbp), %eax
0000000000013956	cmpl	$0xd, %eax
0000000000013959	setl	%cl
000000000001395c	xorb	$-0x1, %cl
000000000001395f	andb	$0x1, %cl
0000000000013962	movzbl	%cl, %eax
0000000000013965	movslq	%eax, %rdx
0000000000013968	cmpq	$0x0, %rdx
000000000001396c	je	0x13991
0000000000013972	leaq	0x4f324(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013979	leaq	0x4f33a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013980	leaq	0x4f36c(%rip), %rcx ## literal pool for: "index < 13"
0000000000013987	movl	$0x4a, %edx
000000000001398c	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013991	jmp	0x13996
0000000000013996	leaq	_FILTERS_XOP(%rip), %rax
000000000001399d	movq	-0x10(%rbp), %rcx
00000000000139a1	movzwl	0x1(%rcx), %edx
00000000000139a5	movl	%edx, %ecx
00000000000139a7	imulq	$0x27, %rcx, %rcx
00000000000139ab	addq	%rcx, %rax
00000000000139ae	movzwl	-0x12(%rbp), %edx
00000000000139b2	movl	%edx, %ecx
00000000000139b4	imulq	$0x3, %rcx, %rcx
00000000000139b8	addq	%rcx, %rax
00000000000139bb	movq	%rax, -0x8(%rbp)
00000000000139bf	jmp	0x1457c
00000000000139c4	movzwl	-0x12(%rbp), %eax
00000000000139c8	cmpl	$0x11, %eax
00000000000139cb	setl	%cl
00000000000139ce	xorb	$-0x1, %cl
00000000000139d1	andb	$0x1, %cl
00000000000139d4	movzbl	%cl, %eax
00000000000139d7	movslq	%eax, %rdx
00000000000139da	cmpq	$0x0, %rdx
00000000000139de	je	0x13a03
00000000000139e4	leaq	0x4f2b2(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000139eb	leaq	0x4f2c8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000139f2	leaq	0x4f305(%rip), %rcx ## literal pool for: "index < 17"
00000000000139f9	movl	$0x4d, %edx
00000000000139fe	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013a03	jmp	0x13a08
0000000000013a08	movq	-0x10(%rbp), %rax
0000000000013a0c	movzwl	0x1(%rax), %ecx
0000000000013a10	movl	%ecx, %eax
0000000000013a12	imulq	$0x33, %rax, %rax
0000000000013a16	leaq	_FILTERS_VEX(%rip), %rdx
0000000000013a1d	addq	%rax, %rdx
0000000000013a20	movzwl	-0x12(%rbp), %ecx
0000000000013a24	movl	%ecx, %eax
0000000000013a26	imulq	$0x3, %rax, %rax
0000000000013a2a	addq	%rax, %rdx
0000000000013a2d	movq	%rdx, -0x8(%rbp)
0000000000013a31	jmp	0x1457c
0000000000013a36	movzwl	-0x12(%rbp), %eax
0000000000013a3a	cmpl	$0x21, %eax
0000000000013a3d	setl	%cl
0000000000013a40	xorb	$-0x1, %cl
0000000000013a43	andb	$0x1, %cl
0000000000013a46	movzbl	%cl, %eax
0000000000013a49	movslq	%eax, %rdx
0000000000013a4c	cmpq	$0x0, %rdx
0000000000013a50	je	0x13a75
0000000000013a56	leaq	0x4f240(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013a5d	leaq	0x4f256(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013a64	leaq	0x4f29e(%rip), %rcx ## literal pool for: "index < 33"
0000000000013a6b	movl	$0x50, %edx
0000000000013a70	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013a75	jmp	0x13a7a
0000000000013a7a	movq	-0x10(%rbp), %rax
0000000000013a7e	movzwl	0x1(%rax), %ecx
0000000000013a82	movl	%ecx, %eax
0000000000013a84	imulq	$0x63, %rax, %rax
0000000000013a88	leaq	_FILTERS_EMVEX(%rip), %rdx
0000000000013a8f	addq	%rax, %rdx
0000000000013a92	movzwl	-0x12(%rbp), %ecx
0000000000013a96	movl	%ecx, %eax
0000000000013a98	imulq	$0x3, %rax, %rax
0000000000013a9c	addq	%rax, %rdx
0000000000013a9f	movq	%rdx, -0x8(%rbp)
0000000000013aa3	jmp	0x1457c
0000000000013aa8	movzwl	-0x12(%rbp), %eax
0000000000013aac	cmpl	$0x100, %eax
0000000000013ab1	setl	%cl
0000000000013ab4	xorb	$-0x1, %cl
0000000000013ab7	andb	$0x1, %cl
0000000000013aba	movzbl	%cl, %eax
0000000000013abd	movslq	%eax, %rdx
0000000000013ac0	cmpq	$0x0, %rdx
0000000000013ac4	je	0x13ae9
0000000000013aca	leaq	0x4f1cc(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013ad1	leaq	0x4f1e2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013ad8	leaq	0x4f235(%rip), %rcx ## literal pool for: "index < 256"
0000000000013adf	movl	$0x53, %edx
0000000000013ae4	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013ae9	jmp	0x13aee
0000000000013aee	leaq	_FILTERS_OPCODE(%rip), %rax
0000000000013af5	movq	-0x10(%rbp), %rcx
0000000000013af9	movzwl	0x1(%rcx), %edx
0000000000013afd	movl	%edx, %ecx
0000000000013aff	imulq	$0x300, %rcx, %rcx
0000000000013b06	addq	%rcx, %rax
0000000000013b09	movzwl	-0x12(%rbp), %edx
0000000000013b0d	movl	%edx, %ecx
0000000000013b0f	imulq	$0x3, %rcx, %rcx
0000000000013b13	addq	%rcx, %rax
0000000000013b16	movq	%rax, -0x8(%rbp)
0000000000013b1a	jmp	0x1457c
0000000000013b1f	movzwl	-0x12(%rbp), %eax
0000000000013b23	cmpl	$0x4, %eax
0000000000013b26	setl	%cl
0000000000013b29	xorb	$-0x1, %cl
0000000000013b2c	andb	$0x1, %cl
0000000000013b2f	movzbl	%cl, %eax
0000000000013b32	movslq	%eax, %rdx
0000000000013b35	cmpq	$0x0, %rdx
0000000000013b39	je	0x13b5e
0000000000013b3f	leaq	0x4f157(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013b46	leaq	0x4f16d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013b4d	leaq	0x4f1cc(%rip), %rcx ## literal pool for: "index < 4"
0000000000013b54	movl	$0x56, %edx
0000000000013b59	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013b5e	jmp	0x13b63
0000000000013b63	movq	-0x10(%rbp), %rax
0000000000013b67	movzwl	0x1(%rax), %ecx
0000000000013b6b	movl	%ecx, %eax
0000000000013b6d	imulq	$0x9, %rax, %rax
0000000000013b71	leaq	_FILTERS_MODE(%rip), %rdx
0000000000013b78	addq	%rax, %rdx
0000000000013b7b	movzwl	-0x12(%rbp), %ecx
0000000000013b7f	movl	%ecx, %eax
0000000000013b81	imulq	$0x3, %rax, %rax
0000000000013b85	addq	%rax, %rdx
0000000000013b88	movq	%rdx, -0x8(%rbp)
0000000000013b8c	jmp	0x1457c
0000000000013b91	movzwl	-0x12(%rbp), %eax
0000000000013b95	cmpl	$0x3, %eax
0000000000013b98	setl	%cl
0000000000013b9b	xorb	$-0x1, %cl
0000000000013b9e	andb	$0x1, %cl
0000000000013ba1	movzbl	%cl, %eax
0000000000013ba4	movslq	%eax, %rdx
0000000000013ba7	cmpq	$0x0, %rdx
0000000000013bab	je	0x13bd0
0000000000013bb1	leaq	0x4f0e5(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013bb8	leaq	0x4f0fb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013bbf	leaq	0x4f164(%rip), %rcx ## literal pool for: "index < 3"
0000000000013bc6	movl	$0x59, %edx
0000000000013bcb	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013bd0	jmp	0x13bd5
0000000000013bd5	movq	-0x10(%rbp), %rax
0000000000013bd9	movzwl	0x1(%rax), %ecx
0000000000013bdd	movl	%ecx, %eax
0000000000013bdf	imulq	$0x6, %rax, %rax
0000000000013be3	leaq	_FILTERS_MODE_COMPACT(%rip), %rdx
0000000000013bea	addq	%rax, %rdx
0000000000013bed	movzwl	-0x12(%rbp), %ecx
0000000000013bf1	movl	%ecx, %eax
0000000000013bf3	imulq	$0x3, %rax, %rax
0000000000013bf7	addq	%rax, %rdx
0000000000013bfa	movq	%rdx, -0x8(%rbp)
0000000000013bfe	jmp	0x1457c
0000000000013c03	movzwl	-0x12(%rbp), %eax
0000000000013c07	cmpl	$0x4, %eax
0000000000013c0a	setl	%cl
0000000000013c0d	xorb	$-0x1, %cl
0000000000013c10	andb	$0x1, %cl
0000000000013c13	movzbl	%cl, %eax
0000000000013c16	movslq	%eax, %rdx
0000000000013c19	cmpq	$0x0, %rdx
0000000000013c1d	je	0x13c42
0000000000013c23	leaq	0x4f073(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013c2a	leaq	0x4f089(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013c31	leaq	0x4f0e8(%rip), %rcx ## literal pool for: "index < 4"
0000000000013c38	movl	$0x5c, %edx
0000000000013c3d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013c42	jmp	0x13c47
0000000000013c47	movq	-0x10(%rbp), %rax
0000000000013c4b	movzwl	0x1(%rax), %ecx
0000000000013c4f	movl	%ecx, %eax
0000000000013c51	imulq	$0xc, %rax, %rax
0000000000013c55	leaq	_FILTERS_MODRM_MOD(%rip), %rdx
0000000000013c5c	addq	%rax, %rdx
0000000000013c5f	movzwl	-0x12(%rbp), %ecx
0000000000013c63	movl	%ecx, %eax
0000000000013c65	imulq	$0x3, %rax, %rax
0000000000013c69	addq	%rax, %rdx
0000000000013c6c	movq	%rdx, -0x8(%rbp)
0000000000013c70	jmp	0x1457c
0000000000013c75	movzwl	-0x12(%rbp), %eax
0000000000013c79	cmpl	$0x2, %eax
0000000000013c7c	setl	%cl
0000000000013c7f	xorb	$-0x1, %cl
0000000000013c82	andb	$0x1, %cl
0000000000013c85	movzbl	%cl, %eax
0000000000013c88	movslq	%eax, %rdx
0000000000013c8b	cmpq	$0x0, %rdx
0000000000013c8f	je	0x13cb4
0000000000013c95	leaq	0x4f001(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013c9c	leaq	0x4f017(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013ca3	leaq	0x4e80d(%rip), %rcx ## literal pool for: "index < 2"
0000000000013caa	movl	$0x5f, %edx
0000000000013caf	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013cb4	jmp	0x13cb9
0000000000013cb9	movq	-0x10(%rbp), %rax
0000000000013cbd	movzwl	0x1(%rax), %ecx
0000000000013cc1	movl	%ecx, %eax
0000000000013cc3	imulq	$0x6, %rax, %rax
0000000000013cc7	leaq	_FILTERS_MODRM_MOD_COMPACT(%rip), %rdx
0000000000013cce	addq	%rax, %rdx
0000000000013cd1	movzwl	-0x12(%rbp), %ecx
0000000000013cd5	movl	%ecx, %eax
0000000000013cd7	imulq	$0x3, %rax, %rax
0000000000013cdb	addq	%rax, %rdx
0000000000013cde	movq	%rdx, -0x8(%rbp)
0000000000013ce2	jmp	0x1457c
0000000000013ce7	movzwl	-0x12(%rbp), %eax
0000000000013ceb	cmpl	$0x8, %eax
0000000000013cee	setl	%cl
0000000000013cf1	xorb	$-0x1, %cl
0000000000013cf4	andb	$0x1, %cl
0000000000013cf7	movzbl	%cl, %eax
0000000000013cfa	movslq	%eax, %rdx
0000000000013cfd	cmpq	$0x0, %rdx
0000000000013d01	je	0x13d26
0000000000013d07	leaq	0x4ef8f(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013d0e	leaq	0x4efa5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013d15	leaq	0x4f018(%rip), %rcx ## literal pool for: "index < 8"
0000000000013d1c	movl	$0x62, %edx
0000000000013d21	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013d26	jmp	0x13d2b
0000000000013d2b	movq	-0x10(%rbp), %rax
0000000000013d2f	movzwl	0x1(%rax), %ecx
0000000000013d33	movl	%ecx, %eax
0000000000013d35	imulq	$0x18, %rax, %rax
0000000000013d39	leaq	_FILTERS_MODRM_REG(%rip), %rdx
0000000000013d40	addq	%rax, %rdx
0000000000013d43	movzwl	-0x12(%rbp), %ecx
0000000000013d47	movl	%ecx, %eax
0000000000013d49	imulq	$0x3, %rax, %rax
0000000000013d4d	addq	%rax, %rdx
0000000000013d50	movq	%rdx, -0x8(%rbp)
0000000000013d54	jmp	0x1457c
0000000000013d59	movzwl	-0x12(%rbp), %eax
0000000000013d5d	cmpl	$0x8, %eax
0000000000013d60	setl	%cl
0000000000013d63	xorb	$-0x1, %cl
0000000000013d66	andb	$0x1, %cl
0000000000013d69	movzbl	%cl, %eax
0000000000013d6c	movslq	%eax, %rdx
0000000000013d6f	cmpq	$0x0, %rdx
0000000000013d73	je	0x13d98
0000000000013d79	leaq	0x4ef1d(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013d80	leaq	0x4ef33(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013d87	leaq	0x4efa6(%rip), %rcx ## literal pool for: "index < 8"
0000000000013d8e	movl	$0x65, %edx
0000000000013d93	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013d98	jmp	0x13d9d
0000000000013d9d	movq	-0x10(%rbp), %rax
0000000000013da1	movzwl	0x1(%rax), %ecx
0000000000013da5	movl	%ecx, %eax
0000000000013da7	imulq	$0x18, %rax, %rax
0000000000013dab	leaq	_FILTERS_MODRM_RM(%rip), %rdx
0000000000013db2	addq	%rax, %rdx
0000000000013db5	movzwl	-0x12(%rbp), %ecx
0000000000013db9	movl	%ecx, %eax
0000000000013dbb	imulq	$0x3, %rax, %rax
0000000000013dbf	addq	%rax, %rdx
0000000000013dc2	movq	%rdx, -0x8(%rbp)
0000000000013dc6	jmp	0x1457c
0000000000013dcb	movzwl	-0x12(%rbp), %eax
0000000000013dcf	cmpl	$0x2, %eax
0000000000013dd2	setl	%cl
0000000000013dd5	xorb	$-0x1, %cl
0000000000013dd8	andb	$0x1, %cl
0000000000013ddb	movzbl	%cl, %eax
0000000000013dde	movslq	%eax, %rdx
0000000000013de1	cmpq	$0x0, %rdx
0000000000013de5	je	0x13e0a
0000000000013deb	leaq	0x4eeab(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013df2	leaq	0x4eec1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013df9	leaq	0x4e6b7(%rip), %rcx ## literal pool for: "index < 2"
0000000000013e00	movl	$0x68, %edx
0000000000013e05	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013e0a	jmp	0x13e0f
0000000000013e0f	movq	-0x10(%rbp), %rax
0000000000013e13	movzwl	0x1(%rax), %ecx
0000000000013e17	movl	%ecx, %eax
0000000000013e19	imulq	$0x6, %rax, %rax
0000000000013e1d	leaq	_FILTERS_PREFIX_GROUP1(%rip), %rdx
0000000000013e24	addq	%rax, %rdx
0000000000013e27	movzwl	-0x12(%rbp), %ecx
0000000000013e2b	movl	%ecx, %eax
0000000000013e2d	imulq	$0x3, %rax, %rax
0000000000013e31	addq	%rax, %rdx
0000000000013e34	movq	%rdx, -0x8(%rbp)
0000000000013e38	jmp	0x1457c
0000000000013e3d	movzwl	-0x12(%rbp), %eax
0000000000013e41	cmpl	$0x5, %eax
0000000000013e44	setl	%cl
0000000000013e47	xorb	$-0x1, %cl
0000000000013e4a	andb	$0x1, %cl
0000000000013e4d	movzbl	%cl, %eax
0000000000013e50	movslq	%eax, %rdx
0000000000013e53	cmpq	$0x0, %rdx
0000000000013e57	je	0x13e7c
0000000000013e5d	leaq	0x4ee39(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013e64	leaq	0x4ee4f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013e6b	leaq	0x4eecc(%rip), %rcx ## literal pool for: "index < 5"
0000000000013e72	movl	$0x6b, %edx
0000000000013e77	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013e7c	jmp	0x13e81
0000000000013e81	movq	-0x10(%rbp), %rax
0000000000013e85	movzwl	0x1(%rax), %ecx
0000000000013e89	movl	%ecx, %eax
0000000000013e8b	imulq	$0xf, %rax, %rax
0000000000013e8f	leaq	_FILTERS_MANDATORY_PREFIX(%rip), %rdx
0000000000013e96	addq	%rax, %rdx
0000000000013e99	movzwl	-0x12(%rbp), %ecx
0000000000013e9d	movl	%ecx, %eax
0000000000013e9f	imulq	$0x3, %rax, %rax
0000000000013ea3	addq	%rax, %rdx
0000000000013ea6	movq	%rdx, -0x8(%rbp)
0000000000013eaa	jmp	0x1457c
0000000000013eaf	movzwl	-0x12(%rbp), %eax
0000000000013eb3	cmpl	$0x3, %eax
0000000000013eb6	setl	%cl
0000000000013eb9	xorb	$-0x1, %cl
0000000000013ebc	andb	$0x1, %cl
0000000000013ebf	movzbl	%cl, %eax
0000000000013ec2	movslq	%eax, %rdx
0000000000013ec5	cmpq	$0x0, %rdx
0000000000013ec9	je	0x13eee
0000000000013ecf	leaq	0x4edc7(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013ed6	leaq	0x4eddd(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013edd	leaq	0x4ee46(%rip), %rcx ## literal pool for: "index < 3"
0000000000013ee4	movl	$0x6e, %edx
0000000000013ee9	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013eee	jmp	0x13ef3
0000000000013ef3	movq	-0x10(%rbp), %rax
0000000000013ef7	movzwl	0x1(%rax), %ecx
0000000000013efb	movl	%ecx, %eax
0000000000013efd	imulq	$0x9, %rax, %rax
0000000000013f01	leaq	_FILTERS_OPERAND_SIZE(%rip), %rdx
0000000000013f08	addq	%rax, %rdx
0000000000013f0b	movzwl	-0x12(%rbp), %ecx
0000000000013f0f	movl	%ecx, %eax
0000000000013f11	imulq	$0x3, %rax, %rax
0000000000013f15	addq	%rax, %rdx
0000000000013f18	movq	%rdx, -0x8(%rbp)
0000000000013f1c	jmp	0x1457c
0000000000013f21	movzwl	-0x12(%rbp), %eax
0000000000013f25	cmpl	$0x3, %eax
0000000000013f28	setl	%cl
0000000000013f2b	xorb	$-0x1, %cl
0000000000013f2e	andb	$0x1, %cl
0000000000013f31	movzbl	%cl, %eax
0000000000013f34	movslq	%eax, %rdx
0000000000013f37	cmpq	$0x0, %rdx
0000000000013f3b	je	0x13f60
0000000000013f41	leaq	0x4ed55(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013f48	leaq	0x4ed6b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013f4f	leaq	0x4edd4(%rip), %rcx ## literal pool for: "index < 3"
0000000000013f56	movl	$0x71, %edx
0000000000013f5b	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013f60	jmp	0x13f65
0000000000013f65	movq	-0x10(%rbp), %rax
0000000000013f69	movzwl	0x1(%rax), %ecx
0000000000013f6d	movl	%ecx, %eax
0000000000013f6f	imulq	$0x9, %rax, %rax
0000000000013f73	leaq	_FILTERS_ADDRESS_SIZE(%rip), %rdx
0000000000013f7a	addq	%rax, %rdx
0000000000013f7d	movzwl	-0x12(%rbp), %ecx
0000000000013f81	movl	%ecx, %eax
0000000000013f83	imulq	$0x3, %rax, %rax
0000000000013f87	addq	%rax, %rdx
0000000000013f8a	movq	%rdx, -0x8(%rbp)
0000000000013f8e	jmp	0x1457c
0000000000013f93	movzwl	-0x12(%rbp), %eax
0000000000013f97	cmpl	$0x3, %eax
0000000000013f9a	setl	%cl
0000000000013f9d	xorb	$-0x1, %cl
0000000000013fa0	andb	$0x1, %cl
0000000000013fa3	movzbl	%cl, %eax
0000000000013fa6	movslq	%eax, %rdx
0000000000013fa9	cmpq	$0x0, %rdx
0000000000013fad	je	0x13fd2
0000000000013fb3	leaq	0x4ece3(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013fba	leaq	0x4ecf9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013fc1	leaq	0x4ed62(%rip), %rcx ## literal pool for: "index < 3"
0000000000013fc8	movl	$0x74, %edx
0000000000013fcd	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000013fd2	jmp	0x13fd7
0000000000013fd7	movq	-0x10(%rbp), %rax
0000000000013fdb	movzwl	0x1(%rax), %ecx
0000000000013fdf	movl	%ecx, %eax
0000000000013fe1	imulq	$0x9, %rax, %rax
0000000000013fe5	leaq	_FILTERS_VECTOR_LENGTH(%rip), %rdx
0000000000013fec	addq	%rax, %rdx
0000000000013fef	movzwl	-0x12(%rbp), %ecx
0000000000013ff3	movl	%ecx, %eax
0000000000013ff5	imulq	$0x3, %rax, %rax
0000000000013ff9	addq	%rax, %rdx
0000000000013ffc	movq	%rdx, -0x8(%rbp)
0000000000014000	jmp	0x1457c
0000000000014005	movzwl	-0x12(%rbp), %eax
0000000000014009	cmpl	$0x2, %eax
000000000001400c	setl	%cl
000000000001400f	xorb	$-0x1, %cl
0000000000014012	andb	$0x1, %cl
0000000000014015	movzbl	%cl, %eax
0000000000014018	movslq	%eax, %rdx
000000000001401b	cmpq	$0x0, %rdx
000000000001401f	je	0x14044
0000000000014025	leaq	0x4ec71(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001402c	leaq	0x4ec87(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014033	leaq	0x4e47d(%rip), %rcx ## literal pool for: "index < 2"
000000000001403a	movl	$0x77, %edx
000000000001403f	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000014044	jmp	0x14049
0000000000014049	movq	-0x10(%rbp), %rax
000000000001404d	movzwl	0x1(%rax), %ecx
0000000000014051	movl	%ecx, %eax
0000000000014053	imulq	$0x6, %rax, %rax
0000000000014057	leaq	_FILTERS_REX_W(%rip), %rdx
000000000001405e	addq	%rax, %rdx
0000000000014061	movzwl	-0x12(%rbp), %ecx
0000000000014065	movl	%ecx, %eax
0000000000014067	imulq	$0x3, %rax, %rax
000000000001406b	addq	%rax, %rdx
000000000001406e	movq	%rdx, -0x8(%rbp)
0000000000014072	jmp	0x1457c
0000000000014077	movzwl	-0x12(%rbp), %eax
000000000001407b	cmpl	$0x2, %eax
000000000001407e	setl	%cl
0000000000014081	xorb	$-0x1, %cl
0000000000014084	andb	$0x1, %cl
0000000000014087	movzbl	%cl, %eax
000000000001408a	movslq	%eax, %rdx
000000000001408d	cmpq	$0x0, %rdx
0000000000014091	je	0x140b6
0000000000014097	leaq	0x4ebff(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001409e	leaq	0x4ec15(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000140a5	leaq	0x4e40b(%rip), %rcx ## literal pool for: "index < 2"
00000000000140ac	movl	$0x7a, %edx
00000000000140b1	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000140b6	jmp	0x140bb
00000000000140bb	movq	-0x10(%rbp), %rax
00000000000140bf	movzwl	0x1(%rax), %ecx
00000000000140c3	movl	%ecx, %eax
00000000000140c5	imulq	$0x6, %rax, %rax
00000000000140c9	leaq	_FILTERS_REX_B(%rip), %rdx
00000000000140d0	addq	%rax, %rdx
00000000000140d3	movzwl	-0x12(%rbp), %ecx
00000000000140d7	movl	%ecx, %eax
00000000000140d9	imulq	$0x3, %rax, %rax
00000000000140dd	addq	%rax, %rdx
00000000000140e0	movq	%rdx, -0x8(%rbp)
00000000000140e4	jmp	0x1457c
00000000000140e9	movzwl	-0x12(%rbp), %eax
00000000000140ed	cmpl	$0x2, %eax
00000000000140f0	setl	%cl
00000000000140f3	xorb	$-0x1, %cl
00000000000140f6	andb	$0x1, %cl
00000000000140f9	movzbl	%cl, %eax
00000000000140fc	movslq	%eax, %rdx
00000000000140ff	cmpq	$0x0, %rdx
0000000000014103	je	0x14128
0000000000014109	leaq	0x4eb8d(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014110	leaq	0x4eba3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014117	leaq	0x4e399(%rip), %rcx ## literal pool for: "index < 2"
000000000001411e	movl	$0x7e, %edx
0000000000014123	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000014128	jmp	0x1412d
000000000001412d	movq	-0x10(%rbp), %rax
0000000000014131	movzwl	0x1(%rax), %ecx
0000000000014135	movl	%ecx, %eax
0000000000014137	imulq	$0x6, %rax, %rax
000000000001413b	leaq	_FILTERS_EVEX_B(%rip), %rdx
0000000000014142	addq	%rax, %rdx
0000000000014145	movzwl	-0x12(%rbp), %ecx
0000000000014149	movl	%ecx, %eax
000000000001414b	imulq	$0x3, %rax, %rax
000000000001414f	addq	%rax, %rdx
0000000000014152	movq	%rdx, -0x8(%rbp)
0000000000014156	jmp	0x1457c
000000000001415b	movzwl	-0x12(%rbp), %eax
000000000001415f	cmpl	$0x2, %eax
0000000000014162	setl	%cl
0000000000014165	xorb	$-0x1, %cl
0000000000014168	andb	$0x1, %cl
000000000001416b	movzbl	%cl, %eax
000000000001416e	movslq	%eax, %rdx
0000000000014171	cmpq	$0x0, %rdx
0000000000014175	je	0x1419a
000000000001417b	leaq	0x4eb1b(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014182	leaq	0x4eb31(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014189	leaq	0x4e327(%rip), %rcx ## literal pool for: "index < 2"
0000000000014190	movl	$0x83, %edx
0000000000014195	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001419a	jmp	0x1419f
000000000001419f	movq	-0x10(%rbp), %rax
00000000000141a3	movzwl	0x1(%rax), %ecx
00000000000141a7	movl	%ecx, %eax
00000000000141a9	imulq	$0x6, %rax, %rax
00000000000141ad	leaq	_FILTERS_MVEX_E(%rip), %rdx
00000000000141b4	addq	%rax, %rdx
00000000000141b7	movzwl	-0x12(%rbp), %ecx
00000000000141bb	movl	%ecx, %eax
00000000000141bd	imulq	$0x3, %rax, %rax
00000000000141c1	addq	%rax, %rdx
00000000000141c4	movq	%rdx, -0x8(%rbp)
00000000000141c8	jmp	0x1457c
00000000000141cd	movzwl	-0x12(%rbp), %eax
00000000000141d1	cmpl	$0x2, %eax
00000000000141d4	setl	%cl
00000000000141d7	xorb	$-0x1, %cl
00000000000141da	andb	$0x1, %cl
00000000000141dd	movzbl	%cl, %eax
00000000000141e0	movslq	%eax, %rdx
00000000000141e3	cmpq	$0x0, %rdx
00000000000141e7	je	0x1420c
00000000000141ed	leaq	0x4eaa9(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000141f4	leaq	0x4eabf(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000141fb	leaq	0x4e2b5(%rip), %rcx ## literal pool for: "index < 2"
0000000000014202	movl	$0x87, %edx
0000000000014207	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001420c	jmp	0x14211
0000000000014211	movq	-0x10(%rbp), %rax
0000000000014215	movzwl	0x1(%rax), %ecx
0000000000014219	movl	%ecx, %eax
000000000001421b	imulq	$0x6, %rax, %rax
000000000001421f	leaq	_FILTERS_MODE_AMD(%rip), %rdx
0000000000014226	addq	%rax, %rdx
0000000000014229	movzwl	-0x12(%rbp), %ecx
000000000001422d	movl	%ecx, %eax
000000000001422f	imulq	$0x3, %rax, %rax
0000000000014233	addq	%rax, %rdx
0000000000014236	movq	%rdx, -0x8(%rbp)
000000000001423a	jmp	0x1457c
000000000001423f	movzwl	-0x12(%rbp), %eax
0000000000014243	cmpl	$0x2, %eax
0000000000014246	setl	%cl
0000000000014249	xorb	$-0x1, %cl
000000000001424c	andb	$0x1, %cl
000000000001424f	movzbl	%cl, %eax
0000000000014252	movslq	%eax, %rdx
0000000000014255	cmpq	$0x0, %rdx
0000000000014259	je	0x1427e
000000000001425f	leaq	0x4ea37(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014266	leaq	0x4ea4d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001426d	leaq	0x4e243(%rip), %rcx ## literal pool for: "index < 2"
0000000000014274	movl	$0x8a, %edx
0000000000014279	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001427e	jmp	0x14283
0000000000014283	movq	-0x10(%rbp), %rax
0000000000014287	movzwl	0x1(%rax), %ecx
000000000001428b	movl	%ecx, %eax
000000000001428d	imulq	$0x6, %rax, %rax
0000000000014291	leaq	_FILTERS_MODE_KNC(%rip), %rdx
0000000000014298	addq	%rax, %rdx
000000000001429b	movzwl	-0x12(%rbp), %ecx
000000000001429f	movl	%ecx, %eax
00000000000142a1	imulq	$0x3, %rax, %rax
00000000000142a5	addq	%rax, %rdx
00000000000142a8	movq	%rdx, -0x8(%rbp)
00000000000142ac	jmp	0x1457c
00000000000142b1	movzwl	-0x12(%rbp), %eax
00000000000142b5	cmpl	$0x2, %eax
00000000000142b8	setl	%cl
00000000000142bb	xorb	$-0x1, %cl
00000000000142be	andb	$0x1, %cl
00000000000142c1	movzbl	%cl, %eax
00000000000142c4	movslq	%eax, %rdx
00000000000142c7	cmpq	$0x0, %rdx
00000000000142cb	je	0x142f0
00000000000142d1	leaq	0x4e9c5(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000142d8	leaq	0x4e9db(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000142df	leaq	0x4e1d1(%rip), %rcx ## literal pool for: "index < 2"
00000000000142e6	movl	$0x8d, %edx
00000000000142eb	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000142f0	jmp	0x142f5
00000000000142f5	movq	-0x10(%rbp), %rax
00000000000142f9	movzwl	0x1(%rax), %ecx
00000000000142fd	movl	%ecx, %eax
00000000000142ff	imulq	$0x6, %rax, %rax
0000000000014303	leaq	_FILTERS_MODE_MPX(%rip), %rdx
000000000001430a	addq	%rax, %rdx
000000000001430d	movzwl	-0x12(%rbp), %ecx
0000000000014311	movl	%ecx, %eax
0000000000014313	imulq	$0x3, %rax, %rax
0000000000014317	addq	%rax, %rdx
000000000001431a	movq	%rdx, -0x8(%rbp)
000000000001431e	jmp	0x1457c
0000000000014323	movzwl	-0x12(%rbp), %eax
0000000000014327	cmpl	$0x2, %eax
000000000001432a	setl	%cl
000000000001432d	xorb	$-0x1, %cl
0000000000014330	andb	$0x1, %cl
0000000000014333	movzbl	%cl, %eax
0000000000014336	movslq	%eax, %rdx
0000000000014339	cmpq	$0x0, %rdx
000000000001433d	je	0x14362
0000000000014343	leaq	0x4e953(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001434a	leaq	0x4e969(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014351	leaq	0x4e15f(%rip), %rcx ## literal pool for: "index < 2"
0000000000014358	movl	$0x90, %edx
000000000001435d	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000014362	jmp	0x14367
0000000000014367	movq	-0x10(%rbp), %rax
000000000001436b	movzwl	0x1(%rax), %ecx
000000000001436f	movl	%ecx, %eax
0000000000014371	imulq	$0x6, %rax, %rax
0000000000014375	leaq	_FILTERS_MODE_CET(%rip), %rdx
000000000001437c	addq	%rax, %rdx
000000000001437f	movzwl	-0x12(%rbp), %ecx
0000000000014383	movl	%ecx, %eax
0000000000014385	imulq	$0x3, %rax, %rax
0000000000014389	addq	%rax, %rdx
000000000001438c	movq	%rdx, -0x8(%rbp)
0000000000014390	jmp	0x1457c
0000000000014395	movzwl	-0x12(%rbp), %eax
0000000000014399	cmpl	$0x2, %eax
000000000001439c	setl	%cl
000000000001439f	xorb	$-0x1, %cl
00000000000143a2	andb	$0x1, %cl
00000000000143a5	movzbl	%cl, %eax
00000000000143a8	movslq	%eax, %rdx
00000000000143ab	cmpq	$0x0, %rdx
00000000000143af	je	0x143d4
00000000000143b5	leaq	0x4e8e1(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000143bc	leaq	0x4e8f7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000143c3	leaq	0x4e0ed(%rip), %rcx ## literal pool for: "index < 2"
00000000000143ca	movl	$0x93, %edx
00000000000143cf	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000143d4	jmp	0x143d9
00000000000143d9	movq	-0x10(%rbp), %rax
00000000000143dd	movzwl	0x1(%rax), %ecx
00000000000143e1	movl	%ecx, %eax
00000000000143e3	imulq	$0x6, %rax, %rax
00000000000143e7	leaq	_FILTERS_MODE_LZCNT(%rip), %rdx
00000000000143ee	addq	%rax, %rdx
00000000000143f1	movzwl	-0x12(%rbp), %ecx
00000000000143f5	movl	%ecx, %eax
00000000000143f7	imulq	$0x3, %rax, %rax
00000000000143fb	addq	%rax, %rdx
00000000000143fe	movq	%rdx, -0x8(%rbp)
0000000000014402	jmp	0x1457c
0000000000014407	movzwl	-0x12(%rbp), %eax
000000000001440b	cmpl	$0x2, %eax
000000000001440e	setl	%cl
0000000000014411	xorb	$-0x1, %cl
0000000000014414	andb	$0x1, %cl
0000000000014417	movzbl	%cl, %eax
000000000001441a	movslq	%eax, %rdx
000000000001441d	cmpq	$0x0, %rdx
0000000000014421	je	0x14446
0000000000014427	leaq	0x4e86f(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001442e	leaq	0x4e885(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014435	leaq	0x4e07b(%rip), %rcx ## literal pool for: "index < 2"
000000000001443c	movl	$0x96, %edx
0000000000014441	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000014446	jmp	0x1444b
000000000001444b	movq	-0x10(%rbp), %rax
000000000001444f	movzwl	0x1(%rax), %ecx
0000000000014453	movl	%ecx, %eax
0000000000014455	imulq	$0x6, %rax, %rax
0000000000014459	leaq	_FILTERS_MODE_TZCNT(%rip), %rdx
0000000000014460	addq	%rax, %rdx
0000000000014463	movzwl	-0x12(%rbp), %ecx
0000000000014467	movl	%ecx, %eax
0000000000014469	imulq	$0x3, %rax, %rax
000000000001446d	addq	%rax, %rdx
0000000000014470	movq	%rdx, -0x8(%rbp)
0000000000014474	jmp	0x1457c
0000000000014479	movzwl	-0x12(%rbp), %eax
000000000001447d	cmpl	$0x2, %eax
0000000000014480	setl	%cl
0000000000014483	xorb	$-0x1, %cl
0000000000014486	andb	$0x1, %cl
0000000000014489	movzbl	%cl, %eax
000000000001448c	movslq	%eax, %rdx
000000000001448f	cmpq	$0x0, %rdx
0000000000014493	je	0x144b8
0000000000014499	leaq	0x4e7fd(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000144a0	leaq	0x4e813(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000144a7	leaq	0x4e009(%rip), %rcx ## literal pool for: "index < 2"
00000000000144ae	movl	$0x99, %edx
00000000000144b3	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000144b8	jmp	0x144bd
00000000000144bd	movq	-0x10(%rbp), %rax
00000000000144c1	movzwl	0x1(%rax), %ecx
00000000000144c5	movl	%ecx, %eax
00000000000144c7	imulq	$0x6, %rax, %rax
00000000000144cb	leaq	_FILTERS_MODE_WBNOINVD(%rip), %rdx
00000000000144d2	addq	%rax, %rdx
00000000000144d5	movzwl	-0x12(%rbp), %ecx
00000000000144d9	movl	%ecx, %eax
00000000000144db	imulq	$0x3, %rax, %rax
00000000000144df	addq	%rax, %rdx
00000000000144e2	movq	%rdx, -0x8(%rbp)
00000000000144e6	jmp	0x1457c
00000000000144eb	movzwl	-0x12(%rbp), %eax
00000000000144ef	cmpl	$0x2, %eax
00000000000144f2	setl	%cl
00000000000144f5	xorb	$-0x1, %cl
00000000000144f8	andb	$0x1, %cl
00000000000144fb	movzbl	%cl, %eax
00000000000144fe	movslq	%eax, %rdx
0000000000014501	cmpq	$0x0, %rdx
0000000000014505	je	0x1452a
000000000001450b	leaq	0x4e78b(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014512	leaq	0x4e7a1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014519	leaq	0x4df97(%rip), %rcx ## literal pool for: "index < 2"
0000000000014520	movl	$0x9c, %edx
0000000000014525	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001452a	jmp	0x1452f
000000000001452f	movq	-0x10(%rbp), %rax
0000000000014533	movzwl	0x1(%rax), %ecx
0000000000014537	movl	%ecx, %eax
0000000000014539	imulq	$0x6, %rax, %rax
000000000001453d	leaq	_FILTERS_MODE_CLDEMOTE(%rip), %rdx
0000000000014544	addq	%rax, %rdx
0000000000014547	movzwl	-0x12(%rbp), %ecx
000000000001454b	movl	%ecx, %eax
000000000001454d	imulq	$0x3, %rax, %rax
0000000000014551	addq	%rax, %rdx
0000000000014554	movq	%rdx, -0x8(%rbp)
0000000000014558	jmp	0x1457c
000000000001455d	leaq	0x4e739(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014564	leaq	0x4e74f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001456b	leaq	0x4ce9a(%rip), %rcx ## literal pool for: "0"
0000000000014572	movl	$0x9f, %edx
0000000000014577	callq	0x1f60e ## symbol stub for: ___assert_rtn
000000000001457c	movq	-0x8(%rbp), %rax
0000000000014580	addq	$0x30, %rsp
0000000000014584	popq	%rbp
0000000000014585	retq
0000000000014586	nop
0000000000014588	lretl	$-0xd
000000000001458b	.byte 0xff #bad opcode
000000000001458c	cmpb	$-0xc, %al
000000000001458e	.byte 0xff #bad opcode
000000000001458f	ljmpl	*0x20fffff4(%rsi)
0000000000014595	cmc
0000000000014596	.byte 0xff #bad opcode
0000000000014597	callq	*0x9fffff5(%rdi)
000000000001459d	idivb	%bh
000000000001459f	.byte 0xff #bad opcode
00000000000145a0	jnp	0x14598
00000000000145a2	.byte 0xff #bad opcode
00000000000145a3	.byte 0xff #bad opcode
00000000000145a4	inl	%dx, %eax
00000000000145a5	idivb	%bh
00000000000145a7	lcalll	*-0x9(%rdi)
00000000000145aa	.byte 0xff #bad opcode
00000000000145ab	callq	*%rcx
00000000000145ad	idivl	%edi
00000000000145af	incl	-0x8(%rbx)
00000000000145b2	.byte 0xff #bad opcode
00000000000145b3	pushq	0x27fffff8(%rbp)
00000000000145b9	stc
00000000000145ba	.byte 0xff #bad opcode
00000000000145bb	lcalll	*0xbfffff9(%rcx)
00000000000145c1	cli
00000000000145c2	.byte 0xff #bad opcode
00000000000145c3	.byte 0xff #bad opcode
00000000000145c4	jge	0x145c0
00000000000145c6	.byte 0xff #bad opcode
00000000000145c7	.byte 0xff #bad opcode
00000000000145c8	outl	%eax, %dx
00000000000145c9	cli
00000000000145ca	.byte 0xff #bad opcode
00000000000145cb	jmpq	*-0x5(%rcx)
00000000000145ce	.byte 0xff #bad opcode
00000000000145cf	callq	*%rbx
00000000000145d1	sti
00000000000145d2	.byte 0xff #bad opcode
00000000000145d3	incl	-0x4(%rbp)
00000000000145d6	.byte 0xff #bad opcode
00000000000145d7	pushq	0x29fffffc(%rdi)
00000000000145dd	std
00000000000145de	.byte 0xff #bad opcode
00000000000145df	lcalll	*0xdfffffd(%rbx)
00000000000145e5	.byte 0xfe #bad opcode
00000000000145e6	.byte 0xff #bad opcode
00000000000145e7	.byte 0xff #bad opcode
00000000000145e8	jg	0x145e8
00000000000145ea	.byte 0xff #bad opcode
00000000000145eb	pushq	%rcx
00000000000145ed	.byte 0xfe #bad opcode
00000000000145ee	.byte 0xff #bad opcode
00000000000145ef	jmpq	*-0x1(%rbx)
00000000000145f2	.byte 0xff #bad opcode
00000000000145f3	jmpq	*0x2e(%rsi)
00000000000145f6	nopl	(%rax,%rax)
00000000000145fe	nop
_ZydisGetInstructionEncodingInfo:
0000000000014600	pushq	%rbp
0000000000014601	movq	%rsp, %rbp
0000000000014604	subq	$0x20, %rsp
0000000000014608	movq	%rdi, -0x8(%rbp)
000000000001460c	movq	%rsi, -0x10(%rbp)
0000000000014610	movq	-0x8(%rbp), %rsi
0000000000014614	movzbl	(%rsi), %eax
0000000000014617	andl	$0x80, %eax
000000000001461c	cmpl	$0x0, %eax
000000000001461f	setne	%cl
0000000000014622	xorb	$-0x1, %cl
0000000000014625	andb	$0x1, %cl
0000000000014628	movzbl	%cl, %eax
000000000001462b	movslq	%eax, %rsi
000000000001462e	cmpq	$0x0, %rsi
0000000000014632	je	0x14657
0000000000014638	leaq	0x4e709(%rip), %rdi ## literal pool for: "ZydisGetInstructionEncodingInfo"
000000000001463f	leaq	0x4e674(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014646	leaq	0x4cc74(%rip), %rcx ## literal pool for: "node->type & ZYDIS_NODETYPE_DEFINITION_MASK"
000000000001464d	movl	$0xa6, %edx
0000000000014652	callq	0x1f60e ## symbol stub for: ___assert_rtn
0000000000014657	jmp	0x1465c
000000000001465c	movq	-0x8(%rbp), %rax
0000000000014660	movzbl	(%rax), %ecx
0000000000014663	andl	$0x7f, %ecx
0000000000014666	movb	%cl, %dl
0000000000014668	movb	%dl, -0x11(%rbp)
000000000001466b	movzbl	-0x11(%rbp), %ecx
000000000001466f	movl	%ecx, %eax
0000000000014671	cmpq	$0x14, %rax
0000000000014675	setb	%dl
0000000000014678	xorb	$-0x1, %dl
000000000001467b	andb	$0x1, %dl
000000000001467e	movzbl	%dl, %ecx
0000000000014681	movslq	%ecx, %rax
0000000000014684	cmpq	$0x0, %rax
0000000000014688	je	0x146ad
000000000001468e	leaq	0x4e6b3(%rip), %rdi ## literal pool for: "ZydisGetInstructionEncodingInfo"
0000000000014695	leaq	0x4e61e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001469c	leaq	0x4e6c5(%rip), %rcx ## literal pool for: "class < (sizeof(INSTR_ENCODINGS) / sizeof((INSTR_ENCODINGS)[0]))"
00000000000146a3	movl	$0xa8, %edx
00000000000146a8	callq	0x1f60e ## symbol stub for: ___assert_rtn
00000000000146ad	jmp	0x146b2
00000000000146b2	movzbl	-0x11(%rbp), %eax
00000000000146b6	movl	%eax, %ecx
00000000000146b8	imulq	$0xe, %rcx, %rcx
00000000000146bc	leaq	_INSTR_ENCODINGS(%rip), %rdx
00000000000146c3	addq	%rcx, %rdx
00000000000146c6	movq	-0x10(%rbp), %rcx
00000000000146ca	movq	%rdx, (%rcx)
00000000000146cd	addq	$0x20, %rsp
00000000000146d1	popq	%rbp
00000000000146d2	retq
__ZN5GDObj9valOffsetEl:
00000000000146d3	movq	(%rdi,%rsi), %rax
00000000000146d7	retq
__ZN5GDObj12setValOffsetElPv:
00000000000146d8	movq	%rdx, (%rdi,%rsi)
00000000000146dc	retq
__ZN11GameManager7manFileEv:
00000000000146dd	leaq	0x120(%rdi), %rax
00000000000146e4	retq
__ZN7cocos2d2ui6MarginC1Ev:
00000000000146e5	pushq	%rbp
00000000000146e6	movq	%rsp, %rbp
00000000000146e9	popq	%rbp
00000000000146ea	retq
__ZN11GameManager17setSecondColorIdxEi:
00000000000146eb	movl	%esi, 0x260(%rdi)
00000000000146f1	movl	$0x0, 0x264(%rdi)
00000000000146fb	retq
__ZN11GameManager16setFirstColorIdxEi:
00000000000146fc	movl	%esi, 0x254(%rdi)
0000000000014702	movl	$0x0, 0x258(%rdi)
000000000001470c	retq
__ZN10GameObject10getGroupIDEi:
000000000001470d	pushq	%rbp
000000000001470e	movq	%rsp, %rbp
0000000000014711	pushq	%rbx
0000000000014712	pushq	%rdi
0000000000014713	pushq	%rsi
0000000000014714	pushq	%rdx
0000000000014715	pushq	%rcx
0000000000014716	pushq	%r8
0000000000014718	pushq	%r9
000000000001471a	pushq	%r10
000000000001471c	pushq	%r11
000000000001471e	pushq	%r12
0000000000014720	pushq	%r13
0000000000014722	pushq	%r14
0000000000014724	pushq	%r15
0000000000014726	subq	$0x10, %rsp
000000000001472a	movss	%xmm0, (%rsp)
000000000001472f	subq	$0x10, %rsp
0000000000014733	movss	%xmm1, (%rsp)
0000000000014738	pushq	%rsi
0000000000014739	pushq	%rdi
000000000001473a	callq	__Z7getBasev ## getBase()
000000000001473f	addq	$0x33ae10, %rax
0000000000014745	popq	%rdi
0000000000014746	popq	%rsi
0000000000014747	movss	(%rsp), %xmm1
000000000001474c	addq	$0x10, %rsp
0000000000014750	movss	(%rsp), %xmm0
0000000000014755	addq	$0x10, %rsp
0000000000014759	popq	%r15
000000000001475b	popq	%r14
000000000001475d	popq	%r13
000000000001475f	popq	%r12
0000000000014761	popq	%r11
0000000000014763	popq	%r10
0000000000014765	popq	%r9
0000000000014767	popq	%r8
0000000000014769	popq	%rcx
000000000001476a	popq	%rdx
000000000001476b	popq	%rsi
000000000001476c	popq	%rdi
000000000001476d	popq	%rbx
000000000001476e	popq	%rbp
000000000001476f	jmpq	*%rax
__ZN10GameObject11setPositionERKN7cocos2d7CCPointE:
0000000000014771	pushq	%rbp
0000000000014772	movq	%rsp, %rbp
0000000000014775	pushq	%rbx
0000000000014776	pushq	%rdi
0000000000014777	pushq	%rsi
0000000000014778	pushq	%rdx
0000000000014779	pushq	%rcx
000000000001477a	pushq	%r8
000000000001477c	pushq	%r9
000000000001477e	pushq	%r10
0000000000014780	pushq	%r11
0000000000014782	pushq	%r12
0000000000014784	pushq	%r13
0000000000014786	pushq	%r14
0000000000014788	pushq	%r15
000000000001478a	subq	$0x10, %rsp
000000000001478e	movss	%xmm0, (%rsp)
0000000000014793	subq	$0x10, %rsp
0000000000014797	movss	%xmm1, (%rsp)
000000000001479c	pushq	%rsi
000000000001479d	pushq	%rdi
000000000001479e	callq	__Z7getBasev ## getBase()
00000000000147a3	addq	$0x335850, %rax
00000000000147a9	popq	%rdi
00000000000147aa	popq	%rsi
00000000000147ab	movss	(%rsp), %xmm1
00000000000147b0	addq	$0x10, %rsp
00000000000147b4	movss	(%rsp), %xmm0
00000000000147b9	addq	$0x10, %rsp
00000000000147bd	popq	%r15
00000000000147bf	popq	%r14
00000000000147c1	popq	%r13
00000000000147c3	popq	%r12
00000000000147c5	popq	%r11
00000000000147c7	popq	%r10
00000000000147c9	popq	%r9
00000000000147cb	popq	%r8
00000000000147cd	popq	%rcx
00000000000147ce	popq	%rdx
00000000000147cf	popq	%rsi
00000000000147d0	popq	%rdi
00000000000147d1	popq	%rbx
00000000000147d2	popq	%rbp
00000000000147d3	jmpq	*%rax
__ZN10GameObject13destroyObjectEv:
00000000000147d5	pushq	%rbp
00000000000147d6	movq	%rsp, %rbp
00000000000147d9	pushq	%rbx
00000000000147da	pushq	%rdi
00000000000147db	pushq	%rsi
00000000000147dc	pushq	%rdx
00000000000147dd	pushq	%rcx
00000000000147de	pushq	%r8
00000000000147e0	pushq	%r9
00000000000147e2	pushq	%r10
00000000000147e4	pushq	%r11
00000000000147e6	pushq	%r12
00000000000147e8	pushq	%r13
00000000000147ea	pushq	%r14
00000000000147ec	pushq	%r15
00000000000147ee	subq	$0x10, %rsp
00000000000147f2	movss	%xmm0, (%rsp)
00000000000147f7	subq	$0x10, %rsp
00000000000147fb	movss	%xmm1, (%rsp)
0000000000014800	pushq	%rsi
0000000000014801	pushq	%rdi
0000000000014802	callq	__Z7getBasev ## getBase()
0000000000014807	addq	$0x336a00, %rax
000000000001480d	popq	%rdi
000000000001480e	popq	%rsi
000000000001480f	movss	(%rsp), %xmm1
0000000000014814	addq	$0x10, %rsp
0000000000014818	movss	(%rsp), %xmm0
000000000001481d	addq	$0x10, %rsp
0000000000014821	popq	%r15
0000000000014823	popq	%r14
0000000000014825	popq	%r13
0000000000014827	popq	%r12
0000000000014829	popq	%r11
000000000001482b	popq	%r10
000000000001482d	popq	%r9
000000000001482f	popq	%r8
0000000000014831	popq	%rcx
0000000000014832	popq	%rdx
0000000000014833	popq	%rsi
0000000000014834	popq	%rdi
0000000000014835	popq	%rbx
0000000000014836	popq	%rbp
0000000000014837	jmpq	*%rax
__ZN10GameObject4initEPKc:
0000000000014839	pushq	%rbp
000000000001483a	movq	%rsp, %rbp
000000000001483d	pushq	%rbx
000000000001483e	pushq	%rdi
000000000001483f	pushq	%rsi
0000000000014840	pushq	%rdx
0000000000014841	pushq	%rcx
0000000000014842	pushq	%r8
0000000000014844	pushq	%r9
0000000000014846	pushq	%r10
0000000000014848	pushq	%r11
000000000001484a	pushq	%r12
000000000001484c	pushq	%r13
000000000001484e	pushq	%r14
0000000000014850	pushq	%r15
0000000000014852	subq	$0x10, %rsp
0000000000014856	movss	%xmm0, (%rsp)
000000000001485b	subq	$0x10, %rsp
000000000001485f	movss	%xmm1, (%rsp)
0000000000014864	pushq	%rsi
0000000000014865	pushq	%rdi
0000000000014866	callq	__Z7getBasev ## getBase()
000000000001486b	addq	$0x2f5520, %rax
0000000000014871	popq	%rdi
0000000000014872	popq	%rsi
0000000000014873	movss	(%rsp), %xmm1
0000000000014878	addq	$0x10, %rsp
000000000001487c	movss	(%rsp), %xmm0
0000000000014881	addq	$0x10, %rsp
0000000000014885	popq	%r15
0000000000014887	popq	%r14
0000000000014889	popq	%r13
000000000001488b	popq	%r12
000000000001488d	popq	%r11
000000000001488f	popq	%r10
0000000000014891	popq	%r9
0000000000014893	popq	%r8
0000000000014895	popq	%rcx
0000000000014896	popq	%rdx
0000000000014897	popq	%rsi
0000000000014898	popq	%rdi
0000000000014899	popq	%rbx
000000000001489a	popq	%rbp
000000000001489b	jmpq	*%rax
__ZN10GameObjectC1Ev:
000000000001489d	pushq	%rbp
000000000001489e	movq	%rsp, %rbp
00000000000148a1	pushq	%rbx
00000000000148a2	pushq	%rdi
00000000000148a3	pushq	%rsi
00000000000148a4	pushq	%rdx
00000000000148a5	pushq	%rcx
00000000000148a6	pushq	%r8
00000000000148a8	pushq	%r9
00000000000148aa	pushq	%r10
00000000000148ac	pushq	%r11
00000000000148ae	pushq	%r12
00000000000148b0	pushq	%r13
00000000000148b2	pushq	%r14
00000000000148b4	pushq	%r15
00000000000148b6	subq	$0x10, %rsp
00000000000148ba	movss	%xmm0, (%rsp)
00000000000148bf	subq	$0x10, %rsp
00000000000148c3	movss	%xmm1, (%rsp)
00000000000148c8	pushq	%rsi
00000000000148c9	pushq	%rdi
00000000000148ca	callq	__Z7getBasev ## getBase()
00000000000148cf	addq	$0xdc4c0, %rax
00000000000148d5	popq	%rdi
00000000000148d6	popq	%rsi
00000000000148d7	movss	(%rsp), %xmm1
00000000000148dc	addq	$0x10, %rsp
00000000000148e0	movss	(%rsp), %xmm0
00000000000148e5	addq	$0x10, %rsp
00000000000148e9	popq	%r15
00000000000148eb	popq	%r14
00000000000148ed	popq	%r13
00000000000148ef	popq	%r12
00000000000148f1	popq	%r11
00000000000148f3	popq	%r10
00000000000148f5	popq	%r9
00000000000148f7	popq	%r8
00000000000148f9	popq	%rcx
00000000000148fa	popq	%rdx
00000000000148fb	popq	%rsi
00000000000148fc	popq	%rdi
00000000000148fd	popq	%rbx
00000000000148fe	popq	%rbp
00000000000148ff	jmpq	*%rax
__ZN10GameObject12selectObjectEN7cocos2d10_ccColor3BE:
0000000000014901	pushq	%rbp
0000000000014902	movq	%rsp, %rbp
0000000000014905	pushq	%rbx
0000000000014906	pushq	%rdi
0000000000014907	pushq	%rsi
0000000000014908	pushq	%rdx
0000000000014909	pushq	%rcx
000000000001490a	pushq	%r8
000000000001490c	pushq	%r9
000000000001490e	pushq	%r10
0000000000014910	pushq	%r11
0000000000014912	pushq	%r12
0000000000014914	pushq	%r13
0000000000014916	pushq	%r14
0000000000014918	pushq	%r15
000000000001491a	subq	$0x10, %rsp
000000000001491e	movss	%xmm0, (%rsp)
0000000000014923	subq	$0x10, %rsp
0000000000014927	movss	%xmm1, (%rsp)
000000000001492c	pushq	%rsi
000000000001492d	pushq	%rdi
000000000001492e	callq	__Z7getBasev ## getBase()
0000000000014933	addq	$0x341f90, %rax
0000000000014939	popq	%rdi
000000000001493a	popq	%rsi
000000000001493b	movss	(%rsp), %xmm1
0000000000014940	addq	$0x10, %rsp
0000000000014944	movss	(%rsp), %xmm0
0000000000014949	addq	$0x10, %rsp
000000000001494d	popq	%r15
000000000001494f	popq	%r14
0000000000014951	popq	%r13
0000000000014953	popq	%r12
0000000000014955	popq	%r11
0000000000014957	popq	%r10
0000000000014959	popq	%r9
000000000001495b	popq	%r8
000000000001495d	popq	%rcx
000000000001495e	popq	%rdx
000000000001495f	popq	%rsi
0000000000014960	popq	%rdi
0000000000014961	popq	%rbx
0000000000014962	popq	%rbp
0000000000014963	jmpq	*%rax
__ZN15LabelGameObject6createEPKc:
0000000000014965	pushq	%rbp
0000000000014966	movq	%rsp, %rbp
0000000000014969	pushq	%rbx
000000000001496a	pushq	%rdi
000000000001496b	pushq	%rsi
000000000001496c	pushq	%rdx
000000000001496d	pushq	%rcx
000000000001496e	pushq	%r8
0000000000014970	pushq	%r9
0000000000014972	pushq	%r10
0000000000014974	pushq	%r11
0000000000014976	pushq	%r12
0000000000014978	pushq	%r13
000000000001497a	pushq	%r14
000000000001497c	pushq	%r15
000000000001497e	subq	$0x10, %rsp
0000000000014982	movss	%xmm0, (%rsp)
0000000000014987	subq	$0x10, %rsp
000000000001498b	movss	%xmm1, (%rsp)
0000000000014990	pushq	%rsi
0000000000014991	pushq	%rdi
0000000000014992	callq	__Z7getBasev ## getBase()
0000000000014997	addq	$0xc9790, %rax
000000000001499d	popq	%rdi
000000000001499e	popq	%rsi
000000000001499f	movss	(%rsp), %xmm1
00000000000149a4	addq	$0x10, %rsp
00000000000149a8	movss	(%rsp), %xmm0
00000000000149ad	addq	$0x10, %rsp
00000000000149b1	popq	%r15
00000000000149b3	popq	%r14
00000000000149b5	popq	%r13
00000000000149b7	popq	%r12
00000000000149b9	popq	%r11
00000000000149bb	popq	%r10
00000000000149bd	popq	%r9
00000000000149bf	popq	%r8
00000000000149c1	popq	%rcx
00000000000149c2	popq	%rdx
00000000000149c3	popq	%rsi
00000000000149c4	popq	%rdi
00000000000149c5	popq	%rbx
00000000000149c6	popq	%rbp
00000000000149c7	jmpq	*%rax
__ZN11AppDelegate3getEv:
00000000000149c9	pushq	%rbp
00000000000149ca	movq	%rsp, %rbp
00000000000149cd	pushq	%rbx
00000000000149ce	pushq	%rdi
00000000000149cf	pushq	%rsi
00000000000149d0	pushq	%rdx
00000000000149d1	pushq	%rcx
00000000000149d2	pushq	%r8
00000000000149d4	pushq	%r9
00000000000149d6	pushq	%r10
00000000000149d8	pushq	%r11
00000000000149da	pushq	%r12
00000000000149dc	pushq	%r13
00000000000149de	pushq	%r14
00000000000149e0	pushq	%r15
00000000000149e2	subq	$0x10, %rsp
00000000000149e6	movss	%xmm0, (%rsp)
00000000000149eb	subq	$0x10, %rsp
00000000000149ef	movss	%xmm1, (%rsp)
00000000000149f4	pushq	%rsi
00000000000149f5	pushq	%rdi
00000000000149f6	callq	__Z7getBasev ## getBase()
00000000000149fb	addq	$0x3aab10, %rax
0000000000014a01	popq	%rdi
0000000000014a02	popq	%rsi
0000000000014a03	movss	(%rsp), %xmm1
0000000000014a08	addq	$0x10, %rsp
0000000000014a0c	movss	(%rsp), %xmm0
0000000000014a11	addq	$0x10, %rsp
0000000000014a15	popq	%r15
0000000000014a17	popq	%r14
0000000000014a19	popq	%r13
0000000000014a1b	popq	%r12
0000000000014a1d	popq	%r11
0000000000014a1f	popq	%r10
0000000000014a21	popq	%r9
0000000000014a23	popq	%r8
0000000000014a25	popq	%rcx
0000000000014a26	popq	%rdx
0000000000014a27	popq	%rsi
0000000000014a28	popq	%rdi
0000000000014a29	popq	%rbx
0000000000014a2a	popq	%rbp
0000000000014a2b	jmpq	*%rax
__ZN11GameManager11colorForIdxEi:
0000000000014a2d	pushq	%rbp
0000000000014a2e	movq	%rsp, %rbp
0000000000014a31	pushq	%rbx
0000000000014a32	pushq	%rdi
0000000000014a33	pushq	%rsi
0000000000014a34	pushq	%rdx
0000000000014a35	pushq	%rcx
0000000000014a36	pushq	%r8
0000000000014a38	pushq	%r9
0000000000014a3a	pushq	%r10
0000000000014a3c	pushq	%r11
0000000000014a3e	pushq	%r12
0000000000014a40	pushq	%r13
0000000000014a42	pushq	%r14
0000000000014a44	pushq	%r15
0000000000014a46	subq	$0x10, %rsp
0000000000014a4a	movss	%xmm0, (%rsp)
0000000000014a4f	subq	$0x10, %rsp
0000000000014a53	movss	%xmm1, (%rsp)
0000000000014a58	pushq	%rsi
0000000000014a59	pushq	%rdi
0000000000014a5a	callq	__Z7getBasev ## getBase()
0000000000014a5f	addq	$0x1cbc80, %rax
0000000000014a65	popq	%rdi
0000000000014a66	popq	%rsi
0000000000014a67	movss	(%rsp), %xmm1
0000000000014a6c	addq	$0x10, %rsp
0000000000014a70	movss	(%rsp), %xmm0
0000000000014a75	addq	$0x10, %rsp
0000000000014a79	popq	%r15
0000000000014a7b	popq	%r14
0000000000014a7d	popq	%r13
0000000000014a7f	popq	%r12
0000000000014a81	popq	%r11
0000000000014a83	popq	%r10
0000000000014a85	popq	%r9
0000000000014a87	popq	%r8
0000000000014a89	popq	%rcx
0000000000014a8a	popq	%rdx
0000000000014a8b	popq	%rsi
0000000000014a8c	popq	%rdi
0000000000014a8d	popq	%rbx
0000000000014a8e	popq	%rbp
0000000000014a8f	jmpq	*%rax
__ZN11GameManager11doQuickSaveEv:
0000000000014a91	pushq	%rbp
0000000000014a92	movq	%rsp, %rbp
0000000000014a95	pushq	%rbx
0000000000014a96	pushq	%rdi
0000000000014a97	pushq	%rsi
0000000000014a98	pushq	%rdx
0000000000014a99	pushq	%rcx
0000000000014a9a	pushq	%r8
0000000000014a9c	pushq	%r9
0000000000014a9e	pushq	%r10
0000000000014aa0	pushq	%r11
0000000000014aa2	pushq	%r12
0000000000014aa4	pushq	%r13
0000000000014aa6	pushq	%r14
0000000000014aa8	pushq	%r15
0000000000014aaa	subq	$0x10, %rsp
0000000000014aae	movss	%xmm0, (%rsp)
0000000000014ab3	subq	$0x10, %rsp
0000000000014ab7	movss	%xmm1, (%rsp)
0000000000014abc	pushq	%rsi
0000000000014abd	pushq	%rdi
0000000000014abe	callq	__Z7getBasev ## getBase()
0000000000014ac3	addq	$0x1d0200, %rax
0000000000014ac9	popq	%rdi
0000000000014aca	popq	%rsi
0000000000014acb	movss	(%rsp), %xmm1
0000000000014ad0	addq	$0x10, %rsp
0000000000014ad4	movss	(%rsp), %xmm0
0000000000014ad9	addq	$0x10, %rsp
0000000000014add	popq	%r15
0000000000014adf	popq	%r14
0000000000014ae1	popq	%r13
0000000000014ae3	popq	%r12
0000000000014ae5	popq	%r11
0000000000014ae7	popq	%r10
0000000000014ae9	popq	%r9
0000000000014aeb	popq	%r8
0000000000014aed	popq	%rcx
0000000000014aee	popq	%rdx
0000000000014aef	popq	%rsi
0000000000014af0	popq	%rdi
0000000000014af1	popq	%rbx
0000000000014af2	popq	%rbp
0000000000014af3	jmpq	*%rax
__ZN11GameManager11fadeInMusicEPKc:
0000000000014af5	pushq	%rbp
0000000000014af6	movq	%rsp, %rbp
0000000000014af9	pushq	%rbx
0000000000014afa	pushq	%rdi
0000000000014afb	pushq	%rsi
0000000000014afc	pushq	%rdx
0000000000014afd	pushq	%rcx
0000000000014afe	pushq	%r8
0000000000014b00	pushq	%r9
0000000000014b02	pushq	%r10
0000000000014b04	pushq	%r11
0000000000014b06	pushq	%r12
0000000000014b08	pushq	%r13
0000000000014b0a	pushq	%r14
0000000000014b0c	pushq	%r15
0000000000014b0e	subq	$0x10, %rsp
0000000000014b12	movss	%xmm0, (%rsp)
0000000000014b17	subq	$0x10, %rsp
0000000000014b1b	movss	%xmm1, (%rsp)
0000000000014b20	pushq	%rsi
0000000000014b21	pushq	%rdi
0000000000014b22	callq	__Z7getBasev ## getBase()
0000000000014b27	addq	$0x1c2ff0, %rax
0000000000014b2d	popq	%rdi
0000000000014b2e	popq	%rsi
0000000000014b2f	movss	(%rsp), %xmm1
0000000000014b34	addq	$0x10, %rsp
0000000000014b38	movss	(%rsp), %xmm0
0000000000014b3d	addq	$0x10, %rsp
0000000000014b41	popq	%r15
0000000000014b43	popq	%r14
0000000000014b45	popq	%r13
0000000000014b47	popq	%r12
0000000000014b49	popq	%r11
0000000000014b4b	popq	%r10
0000000000014b4d	popq	%r9
0000000000014b4f	popq	%r8
0000000000014b51	popq	%rcx
0000000000014b52	popq	%rdx
0000000000014b53	popq	%rsi
0000000000014b54	popq	%rdi
0000000000014b55	popq	%rbx
0000000000014b56	popq	%rbp
0000000000014b57	jmpq	*%rax
__ZN11GameManager11sharedStateEv:
0000000000014b59	pushq	%rbp
0000000000014b5a	movq	%rsp, %rbp
0000000000014b5d	pushq	%rbx
0000000000014b5e	pushq	%rdi
0000000000014b5f	pushq	%rsi
0000000000014b60	pushq	%rdx
0000000000014b61	pushq	%rcx
0000000000014b62	pushq	%r8
0000000000014b64	pushq	%r9
0000000000014b66	pushq	%r10
0000000000014b68	pushq	%r11
0000000000014b6a	pushq	%r12
0000000000014b6c	pushq	%r13
0000000000014b6e	pushq	%r14
0000000000014b70	pushq	%r15
0000000000014b72	subq	$0x10, %rsp
0000000000014b76	movss	%xmm0, (%rsp)
0000000000014b7b	subq	$0x10, %rsp
0000000000014b7f	movss	%xmm1, (%rsp)
0000000000014b84	pushq	%rsi
0000000000014b85	pushq	%rdi
0000000000014b86	callq	__Z7getBasev ## getBase()
0000000000014b8b	addq	$0x1c2b30, %rax
0000000000014b91	popq	%rdi
0000000000014b92	popq	%rsi
0000000000014b93	movss	(%rsp), %xmm1
0000000000014b98	addq	$0x10, %rsp
0000000000014b9c	movss	(%rsp), %xmm0
0000000000014ba1	addq	$0x10, %rsp
0000000000014ba5	popq	%r15
0000000000014ba7	popq	%r14
0000000000014ba9	popq	%r13
0000000000014bab	popq	%r12
0000000000014bad	popq	%r11
0000000000014baf	popq	%r10
0000000000014bb1	popq	%r9
0000000000014bb3	popq	%r8
0000000000014bb5	popq	%rcx
0000000000014bb6	popq	%rdx
0000000000014bb7	popq	%rsi
0000000000014bb8	popq	%rdi
0000000000014bb9	popq	%rbx
0000000000014bba	popq	%rbp
0000000000014bbb	jmpq	*%rax
__ZN11GameManager14reloadAllStep5Ev:
0000000000014bbd	pushq	%rbp
0000000000014bbe	movq	%rsp, %rbp
0000000000014bc1	pushq	%rbx
0000000000014bc2	pushq	%rdi
0000000000014bc3	pushq	%rsi
0000000000014bc4	pushq	%rdx
0000000000014bc5	pushq	%rcx
0000000000014bc6	pushq	%r8
0000000000014bc8	pushq	%r9
0000000000014bca	pushq	%r10
0000000000014bcc	pushq	%r11
0000000000014bce	pushq	%r12
0000000000014bd0	pushq	%r13
0000000000014bd2	pushq	%r14
0000000000014bd4	pushq	%r15
0000000000014bd6	subq	$0x10, %rsp
0000000000014bda	movss	%xmm0, (%rsp)
0000000000014bdf	subq	$0x10, %rsp
0000000000014be3	movss	%xmm1, (%rsp)
0000000000014be8	pushq	%rsi
0000000000014be9	pushq	%rdi
0000000000014bea	callq	__Z7getBasev ## getBase()
0000000000014bef	addq	$0x1d0b00, %rax
0000000000014bf5	popq	%rdi
0000000000014bf6	popq	%rsi
0000000000014bf7	movss	(%rsp), %xmm1
0000000000014bfc	addq	$0x10, %rsp
0000000000014c00	movss	(%rsp), %xmm0
0000000000014c05	addq	$0x10, %rsp
0000000000014c09	popq	%r15
0000000000014c0b	popq	%r14
0000000000014c0d	popq	%r13
0000000000014c0f	popq	%r12
0000000000014c11	popq	%r11
0000000000014c13	popq	%r10
0000000000014c15	popq	%r9
0000000000014c17	popq	%r8
0000000000014c19	popq	%rcx
0000000000014c1a	popq	%rdx
0000000000014c1b	popq	%rsi
0000000000014c1c	popq	%rdi
0000000000014c1d	popq	%rbx
0000000000014c1e	popq	%rbp
0000000000014c1f	jmpq	*%rax
__ZN11GameManager15getGameVariableEPKc:
0000000000014c21	pushq	%rbp
0000000000014c22	movq	%rsp, %rbp
0000000000014c25	pushq	%rbx
0000000000014c26	pushq	%rdi
0000000000014c27	pushq	%rsi
0000000000014c28	pushq	%rdx
0000000000014c29	pushq	%rcx
0000000000014c2a	pushq	%r8
0000000000014c2c	pushq	%r9
0000000000014c2e	pushq	%r10
0000000000014c30	pushq	%r11
0000000000014c32	pushq	%r12
0000000000014c34	pushq	%r13
0000000000014c36	pushq	%r14
0000000000014c38	pushq	%r15
0000000000014c3a	subq	$0x10, %rsp
0000000000014c3e	movss	%xmm0, (%rsp)
0000000000014c43	subq	$0x10, %rsp
0000000000014c47	movss	%xmm1, (%rsp)
0000000000014c4c	pushq	%rsi
0000000000014c4d	pushq	%rdi
0000000000014c4e	callq	__Z7getBasev ## getBase()
0000000000014c53	addq	$0x1cccd0, %rax
0000000000014c59	popq	%rdi
0000000000014c5a	popq	%rsi
0000000000014c5b	movss	(%rsp), %xmm1
0000000000014c60	addq	$0x10, %rsp
0000000000014c64	movss	(%rsp), %xmm0
0000000000014c69	addq	$0x10, %rsp
0000000000014c6d	popq	%r15
0000000000014c6f	popq	%r14
0000000000014c71	popq	%r13
0000000000014c73	popq	%r12
0000000000014c75	popq	%r11
0000000000014c77	popq	%r10
0000000000014c79	popq	%r9
0000000000014c7b	popq	%r8
0000000000014c7d	popq	%rcx
0000000000014c7e	popq	%rdx
0000000000014c7f	popq	%rsi
0000000000014c80	popq	%rdi
0000000000014c81	popq	%rbx
0000000000014c82	popq	%rbp
0000000000014c83	jmpq	*%rax
__ZN11GameManager15setGameVariableEPKcb:
0000000000014c85	pushq	%rbp
0000000000014c86	movq	%rsp, %rbp
0000000000014c89	pushq	%rbx
0000000000014c8a	pushq	%rdi
0000000000014c8b	pushq	%rsi
0000000000014c8c	pushq	%rdx
0000000000014c8d	pushq	%rcx
0000000000014c8e	pushq	%r8
0000000000014c90	pushq	%r9
0000000000014c92	pushq	%r10
0000000000014c94	pushq	%r11
0000000000014c96	pushq	%r12
0000000000014c98	pushq	%r13
0000000000014c9a	pushq	%r14
0000000000014c9c	pushq	%r15
0000000000014c9e	subq	$0x10, %rsp
0000000000014ca2	movss	%xmm0, (%rsp)
0000000000014ca7	subq	$0x10, %rsp
0000000000014cab	movss	%xmm1, (%rsp)
0000000000014cb0	pushq	%rsi
0000000000014cb1	pushq	%rdi
0000000000014cb2	callq	__Z7getBasev ## getBase()
0000000000014cb7	addq	$0x1cca80, %rax
0000000000014cbd	popq	%rdi
0000000000014cbe	popq	%rsi
0000000000014cbf	movss	(%rsp), %xmm1
0000000000014cc4	addq	$0x10, %rsp
0000000000014cc8	movss	(%rsp), %xmm0
0000000000014ccd	addq	$0x10, %rsp
0000000000014cd1	popq	%r15
0000000000014cd3	popq	%r14
0000000000014cd5	popq	%r13
0000000000014cd7	popq	%r12
0000000000014cd9	popq	%r11
0000000000014cdb	popq	%r10
0000000000014cdd	popq	%r9
0000000000014cdf	popq	%r8
0000000000014ce1	popq	%rcx
0000000000014ce2	popq	%rdx
0000000000014ce3	popq	%rsi
0000000000014ce4	popq	%rdi
0000000000014ce5	popq	%rbx
0000000000014ce6	popq	%rbp
0000000000014ce7	jmpq	*%rax
__ZN11GameManager20accountStatusChangedEv:
0000000000014ce9	pushq	%rbp
0000000000014cea	movq	%rsp, %rbp
0000000000014ced	pushq	%rbx
0000000000014cee	pushq	%rdi
0000000000014cef	pushq	%rsi
0000000000014cf0	pushq	%rdx
0000000000014cf1	pushq	%rcx
0000000000014cf2	pushq	%r8
0000000000014cf4	pushq	%r9
0000000000014cf6	pushq	%r10
0000000000014cf8	pushq	%r11
0000000000014cfa	pushq	%r12
0000000000014cfc	pushq	%r13
0000000000014cfe	pushq	%r14
0000000000014d00	pushq	%r15
0000000000014d02	subq	$0x10, %rsp
0000000000014d06	movss	%xmm0, (%rsp)
0000000000014d0b	subq	$0x10, %rsp
0000000000014d0f	movss	%xmm1, (%rsp)
0000000000014d14	pushq	%rsi
0000000000014d15	pushq	%rdi
0000000000014d16	callq	__Z7getBasev ## getBase()
0000000000014d1b	addq	$0x1cdad0, %rax
0000000000014d21	popq	%rdi
0000000000014d22	popq	%rsi
0000000000014d23	movss	(%rsp), %xmm1
0000000000014d28	addq	$0x10, %rsp
0000000000014d2c	movss	(%rsp), %xmm0
0000000000014d31	addq	$0x10, %rsp
0000000000014d35	popq	%r15
0000000000014d37	popq	%r14
0000000000014d39	popq	%r13
0000000000014d3b	popq	%r12
0000000000014d3d	popq	%r11
0000000000014d3f	popq	%r10
0000000000014d41	popq	%r9
0000000000014d43	popq	%r8
0000000000014d45	popq	%rcx
0000000000014d46	popq	%rdx
0000000000014d47	popq	%rsi
0000000000014d48	popq	%rdi
0000000000014d49	popq	%rbx
0000000000014d4a	popq	%rbp
0000000000014d4b	jmpq	*%rax
__ZN11GameManager4loadEv:
0000000000014d4d	pushq	%rbp
0000000000014d4e	movq	%rsp, %rbp
0000000000014d51	pushq	%rbx
0000000000014d52	pushq	%rdi
0000000000014d53	pushq	%rsi
0000000000014d54	pushq	%rdx
0000000000014d55	pushq	%rcx
0000000000014d56	pushq	%r8
0000000000014d58	pushq	%r9
0000000000014d5a	pushq	%r10
0000000000014d5c	pushq	%r11
0000000000014d5e	pushq	%r12
0000000000014d60	pushq	%r13
0000000000014d62	pushq	%r14
0000000000014d64	pushq	%r15
0000000000014d66	subq	$0x10, %rsp
0000000000014d6a	movss	%xmm0, (%rsp)
0000000000014d6f	subq	$0x10, %rsp
0000000000014d73	movss	%xmm1, (%rsp)
0000000000014d78	pushq	%rsi
0000000000014d79	pushq	%rdi
0000000000014d7a	callq	__Z7getBasev ## getBase()
0000000000014d7f	addq	$0x26ee20, %rax
0000000000014d85	popq	%rdi
0000000000014d86	popq	%rsi
0000000000014d87	movss	(%rsp), %xmm1
0000000000014d8c	addq	$0x10, %rsp
0000000000014d90	movss	(%rsp), %xmm0
0000000000014d95	addq	$0x10, %rsp
0000000000014d99	popq	%r15
0000000000014d9b	popq	%r14
0000000000014d9d	popq	%r13
0000000000014d9f	popq	%r12
0000000000014da1	popq	%r11
0000000000014da3	popq	%r10
0000000000014da5	popq	%r9
0000000000014da7	popq	%r8
0000000000014da9	popq	%rcx
0000000000014daa	popq	%rdx
0000000000014dab	popq	%rsi
0000000000014dac	popq	%rdi
0000000000014dad	popq	%rbx
0000000000014dae	popq	%rbp
0000000000014daf	jmpq	*%rax
__ZN11GameManager9reloadAllEbbb:
0000000000014db1	pushq	%rbp
0000000000014db2	movq	%rsp, %rbp
0000000000014db5	pushq	%rbx
0000000000014db6	pushq	%rdi
0000000000014db7	pushq	%rsi
0000000000014db8	pushq	%rdx
0000000000014db9	pushq	%rcx
0000000000014dba	pushq	%r8
0000000000014dbc	pushq	%r9
0000000000014dbe	pushq	%r10
0000000000014dc0	pushq	%r11
0000000000014dc2	pushq	%r12
0000000000014dc4	pushq	%r13
0000000000014dc6	pushq	%r14
0000000000014dc8	pushq	%r15
0000000000014dca	subq	$0x10, %rsp
0000000000014dce	movss	%xmm0, (%rsp)
0000000000014dd3	subq	$0x10, %rsp
0000000000014dd7	movss	%xmm1, (%rsp)
0000000000014ddc	pushq	%rsi
0000000000014ddd	pushq	%rdi
0000000000014dde	callq	__Z7getBasev ## getBase()
0000000000014de3	addq	$0x1d08a0, %rax
0000000000014de9	popq	%rdi
0000000000014dea	popq	%rsi
0000000000014deb	movss	(%rsp), %xmm1
0000000000014df0	addq	$0x10, %rsp
0000000000014df4	movss	(%rsp), %xmm0
0000000000014df9	addq	$0x10, %rsp
0000000000014dfd	popq	%r15
0000000000014dff	popq	%r14
0000000000014e01	popq	%r13
0000000000014e03	popq	%r12
0000000000014e05	popq	%r11
0000000000014e07	popq	%r10
0000000000014e09	popq	%r9
0000000000014e0b	popq	%r8
0000000000014e0d	popq	%rcx
0000000000014e0e	popq	%rdx
0000000000014e0f	popq	%rsi
0000000000014e10	popq	%rdi
0000000000014e11	popq	%rbx
0000000000014e12	popq	%rbp
0000000000014e13	jmpq	*%rax
__ZN11GameManagerD0Ev:
0000000000014e15	pushq	%rbp
0000000000014e16	movq	%rsp, %rbp
0000000000014e19	pushq	%rbx
0000000000014e1a	pushq	%rdi
0000000000014e1b	pushq	%rsi
0000000000014e1c	pushq	%rdx
0000000000014e1d	pushq	%rcx
0000000000014e1e	pushq	%r8
0000000000014e20	pushq	%r9
0000000000014e22	pushq	%r10
0000000000014e24	pushq	%r11
0000000000014e26	pushq	%r12
0000000000014e28	pushq	%r13
0000000000014e2a	pushq	%r14
0000000000014e2c	pushq	%r15
0000000000014e2e	subq	$0x10, %rsp
0000000000014e32	movss	%xmm0, (%rsp)
0000000000014e37	subq	$0x10, %rsp
0000000000014e3b	movss	%xmm1, (%rsp)
0000000000014e40	pushq	%rsi
0000000000014e41	pushq	%rdi
0000000000014e42	callq	__Z7getBasev ## getBase()
0000000000014e47	addq	$0x1d0ff0, %rax
0000000000014e4d	popq	%rdi
0000000000014e4e	popq	%rsi
0000000000014e4f	movss	(%rsp), %xmm1
0000000000014e54	addq	$0x10, %rsp
0000000000014e58	movss	(%rsp), %xmm0
0000000000014e5d	addq	$0x10, %rsp
0000000000014e61	popq	%r15
0000000000014e63	popq	%r14
0000000000014e65	popq	%r13
0000000000014e67	popq	%r12
0000000000014e69	popq	%r11
0000000000014e6b	popq	%r10
0000000000014e6d	popq	%r9
0000000000014e6f	popq	%r8
0000000000014e71	popq	%rcx
0000000000014e72	popq	%rdx
0000000000014e73	popq	%rsi
0000000000014e74	popq	%rdi
0000000000014e75	popq	%rbx
0000000000014e76	popq	%rbp
0000000000014e77	jmpq	*%rax
__ZN11GameManagerD1Ev:
0000000000014e79	pushq	%rbp
0000000000014e7a	movq	%rsp, %rbp
0000000000014e7d	pushq	%rbx
0000000000014e7e	pushq	%rdi
0000000000014e7f	pushq	%rsi
0000000000014e80	pushq	%rdx
0000000000014e81	pushq	%rcx
0000000000014e82	pushq	%r8
0000000000014e84	pushq	%r9
0000000000014e86	pushq	%r10
0000000000014e88	pushq	%r11
0000000000014e8a	pushq	%r12
0000000000014e8c	pushq	%r13
0000000000014e8e	pushq	%r14
0000000000014e90	pushq	%r15
0000000000014e92	subq	$0x10, %rsp
0000000000014e96	movss	%xmm0, (%rsp)
0000000000014e9b	subq	$0x10, %rsp
0000000000014e9f	movss	%xmm1, (%rsp)
0000000000014ea4	pushq	%rsi
0000000000014ea5	pushq	%rdi
0000000000014ea6	callq	__Z7getBasev ## getBase()
0000000000014eab	addq	$0x1d0fe0, %rax
0000000000014eb1	popq	%rdi
0000000000014eb2	popq	%rsi
0000000000014eb3	movss	(%rsp), %xmm1
0000000000014eb8	addq	$0x10, %rsp
0000000000014ebc	movss	(%rsp), %xmm0
0000000000014ec1	addq	$0x10, %rsp
0000000000014ec5	popq	%r15
0000000000014ec7	popq	%r14
0000000000014ec9	popq	%r13
0000000000014ecb	popq	%r12
0000000000014ecd	popq	%r11
0000000000014ecf	popq	%r10
0000000000014ed1	popq	%r9
0000000000014ed3	popq	%r8
0000000000014ed5	popq	%rcx
0000000000014ed6	popq	%rdx
0000000000014ed7	popq	%rsi
0000000000014ed8	popq	%rdi
0000000000014ed9	popq	%rbx
0000000000014eda	popq	%rbp
0000000000014edb	jmpq	*%rax
__ZN11GameToolbox18createToggleButtonESsMN7cocos2d8CCObjectEFvPS1_EbPNS0_6CCMenuENS0_7CCPointEPNS0_6CCNodeES9_fffS7_PKcbiPNS0_7CCArrayE:
0000000000014edd	pushq	%rbp
0000000000014ede	movq	%rsp, %rbp
0000000000014ee1	pushq	%rbx
0000000000014ee2	pushq	%rdi
0000000000014ee3	pushq	%rsi
0000000000014ee4	pushq	%rdx
0000000000014ee5	pushq	%rcx
0000000000014ee6	pushq	%r8
0000000000014ee8	pushq	%r9
0000000000014eea	pushq	%r10
0000000000014eec	pushq	%r11
0000000000014eee	pushq	%r12
0000000000014ef0	pushq	%r13
0000000000014ef2	pushq	%r14
0000000000014ef4	pushq	%r15
0000000000014ef6	subq	$0x10, %rsp
0000000000014efa	movss	%xmm0, (%rsp)
0000000000014eff	subq	$0x10, %rsp
0000000000014f03	movss	%xmm1, (%rsp)
0000000000014f08	pushq	%rsi
0000000000014f09	pushq	%rdi
0000000000014f0a	callq	__Z7getBasev ## getBase()
0000000000014f0f	addq	$0x28bdd0, %rax
0000000000014f15	popq	%rdi
0000000000014f16	popq	%rsi
0000000000014f17	movss	(%rsp), %xmm1
0000000000014f1c	addq	$0x10, %rsp
0000000000014f20	movss	(%rsp), %xmm0
0000000000014f25	addq	$0x10, %rsp
0000000000014f29	popq	%r15
0000000000014f2b	popq	%r14
0000000000014f2d	popq	%r13
0000000000014f2f	popq	%r12
0000000000014f31	popq	%r11
0000000000014f33	popq	%r10
0000000000014f35	popq	%r9
0000000000014f37	popq	%r8
0000000000014f39	popq	%rcx
0000000000014f3a	popq	%rdx
0000000000014f3b	popq	%rsi
0000000000014f3c	popq	%rdi
0000000000014f3d	popq	%rbx
0000000000014f3e	popq	%rbp
0000000000014f3f	jmpq	*%rax
__ZN12ButtonSprite6createEPKciifb:
0000000000014f41	pushq	%rbp
0000000000014f42	movq	%rsp, %rbp
0000000000014f45	pushq	%rbx
0000000000014f46	pushq	%rdi
0000000000014f47	pushq	%rsi
0000000000014f48	pushq	%rdx
0000000000014f49	pushq	%rcx
0000000000014f4a	pushq	%r8
0000000000014f4c	pushq	%r9
0000000000014f4e	pushq	%r10
0000000000014f50	pushq	%r11
0000000000014f52	pushq	%r12
0000000000014f54	pushq	%r13
0000000000014f56	pushq	%r14
0000000000014f58	pushq	%r15
0000000000014f5a	subq	$0x10, %rsp
0000000000014f5e	movss	%xmm0, (%rsp)
0000000000014f63	subq	$0x10, %rsp
0000000000014f67	movss	%xmm1, (%rsp)
0000000000014f6c	pushq	%rsi
0000000000014f6d	pushq	%rdi
0000000000014f6e	callq	__Z7getBasev ## getBase()
0000000000014f73	addq	$0x4fa40, %rax
0000000000014f79	popq	%rdi
0000000000014f7a	popq	%rsi
0000000000014f7b	movss	(%rsp), %xmm1
0000000000014f80	addq	$0x10, %rsp
0000000000014f84	movss	(%rsp), %xmm0
0000000000014f89	addq	$0x10, %rsp
0000000000014f8d	popq	%r15
0000000000014f8f	popq	%r14
0000000000014f91	popq	%r13
0000000000014f93	popq	%r12
0000000000014f95	popq	%r11
0000000000014f97	popq	%r10
0000000000014f99	popq	%r9
0000000000014f9b	popq	%r8
0000000000014f9d	popq	%rcx
0000000000014f9e	popq	%rdx
0000000000014f9f	popq	%rsi
0000000000014fa0	popq	%rdi
0000000000014fa1	popq	%rbx
0000000000014fa2	popq	%rbp
0000000000014fa3	jmpq	*%rax
__ZN12CCSpritePart25createWithSpriteFrameNameEPKc:
0000000000014fa5	pushq	%rbp
0000000000014fa6	movq	%rsp, %rbp
0000000000014fa9	pushq	%rbx
0000000000014faa	pushq	%rdi
0000000000014fab	pushq	%rsi
0000000000014fac	pushq	%rdx
0000000000014fad	pushq	%rcx
0000000000014fae	pushq	%r8
0000000000014fb0	pushq	%r9
0000000000014fb2	pushq	%r10
0000000000014fb4	pushq	%r11
0000000000014fb6	pushq	%r12
0000000000014fb8	pushq	%r13
0000000000014fba	pushq	%r14
0000000000014fbc	pushq	%r15
0000000000014fbe	subq	$0x10, %rsp
0000000000014fc2	movss	%xmm0, (%rsp)
0000000000014fc7	subq	$0x10, %rsp
0000000000014fcb	movss	%xmm1, (%rsp)
0000000000014fd0	pushq	%rsi
0000000000014fd1	pushq	%rdi
0000000000014fd2	callq	__Z7getBasev ## getBase()
0000000000014fd7	addq	$0x132dc0, %rax
0000000000014fdd	popq	%rdi
0000000000014fde	popq	%rsi
0000000000014fdf	movss	(%rsp), %xmm1
0000000000014fe4	addq	$0x10, %rsp
0000000000014fe8	movss	(%rsp), %xmm0
0000000000014fed	addq	$0x10, %rsp
0000000000014ff1	popq	%r15
0000000000014ff3	popq	%r14
0000000000014ff5	popq	%r13
0000000000014ff7	popq	%r12
0000000000014ff9	popq	%r11
0000000000014ffb	popq	%r10
0000000000014ffd	popq	%r9
0000000000014fff	popq	%r8
0000000000015001	popq	%rcx
0000000000015002	popq	%rdx
0000000000015003	popq	%rsi
0000000000015004	popq	%rdi
0000000000015005	popq	%rbx
0000000000015006	popq	%rbp
0000000000015007	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchBeganEPN7cocos2d7CCTouchEPNS0_7CCEventE:
0000000000015009	pushq	%rbp
000000000001500a	movq	%rsp, %rbp
000000000001500d	pushq	%rbx
000000000001500e	pushq	%rdi
000000000001500f	pushq	%rsi
0000000000015010	pushq	%rdx
0000000000015011	pushq	%rcx
0000000000015012	pushq	%r8
0000000000015014	pushq	%r9
0000000000015016	pushq	%r10
0000000000015018	pushq	%r11
000000000001501a	pushq	%r12
000000000001501c	pushq	%r13
000000000001501e	pushq	%r14
0000000000015020	pushq	%r15
0000000000015022	subq	$0x10, %rsp
0000000000015026	movss	%xmm0, (%rsp)
000000000001502b	subq	$0x10, %rsp
000000000001502f	movss	%xmm1, (%rsp)
0000000000015034	pushq	%rsi
0000000000015035	pushq	%rdi
0000000000015036	callq	__Z7getBasev ## getBase()
000000000001503b	addq	$0x2734d0, %rax
0000000000015041	popq	%rdi
0000000000015042	popq	%rsi
0000000000015043	movss	(%rsp), %xmm1
0000000000015048	addq	$0x10, %rsp
000000000001504c	movss	(%rsp), %xmm0
0000000000015051	addq	$0x10, %rsp
0000000000015055	popq	%r15
0000000000015057	popq	%r14
0000000000015059	popq	%r13
000000000001505b	popq	%r12
000000000001505d	popq	%r11
000000000001505f	popq	%r10
0000000000015061	popq	%r9
0000000000015063	popq	%r8
0000000000015065	popq	%rcx
0000000000015066	popq	%rdx
0000000000015067	popq	%rsi
0000000000015068	popq	%rdi
0000000000015069	popq	%rbx
000000000001506a	popq	%rbp
000000000001506b	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchEndedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001506d	pushq	%rbp
000000000001506e	movq	%rsp, %rbp
0000000000015071	pushq	%rbx
0000000000015072	pushq	%rdi
0000000000015073	pushq	%rsi
0000000000015074	pushq	%rdx
0000000000015075	pushq	%rcx
0000000000015076	pushq	%r8
0000000000015078	pushq	%r9
000000000001507a	pushq	%r10
000000000001507c	pushq	%r11
000000000001507e	pushq	%r12
0000000000015080	pushq	%r13
0000000000015082	pushq	%r14
0000000000015084	pushq	%r15
0000000000015086	subq	$0x10, %rsp
000000000001508a	movss	%xmm0, (%rsp)
000000000001508f	subq	$0x10, %rsp
0000000000015093	movss	%xmm1, (%rsp)
0000000000015098	pushq	%rsi
0000000000015099	pushq	%rdi
000000000001509a	callq	__Z7getBasev ## getBase()
000000000001509f	addq	$0x2735d0, %rax
00000000000150a5	popq	%rdi
00000000000150a6	popq	%rsi
00000000000150a7	movss	(%rsp), %xmm1
00000000000150ac	addq	$0x10, %rsp
00000000000150b0	movss	(%rsp), %xmm0
00000000000150b5	addq	$0x10, %rsp
00000000000150b9	popq	%r15
00000000000150bb	popq	%r14
00000000000150bd	popq	%r13
00000000000150bf	popq	%r12
00000000000150c1	popq	%r11
00000000000150c3	popq	%r10
00000000000150c5	popq	%r9
00000000000150c7	popq	%r8
00000000000150c9	popq	%rcx
00000000000150ca	popq	%rdx
00000000000150cb	popq	%rsi
00000000000150cc	popq	%rdi
00000000000150cd	popq	%rbx
00000000000150ce	popq	%rbp
00000000000150cf	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchMovedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
00000000000150d1	pushq	%rbp
00000000000150d2	movq	%rsp, %rbp
00000000000150d5	pushq	%rbx
00000000000150d6	pushq	%rdi
00000000000150d7	pushq	%rsi
00000000000150d8	pushq	%rdx
00000000000150d9	pushq	%rcx
00000000000150da	pushq	%r8
00000000000150dc	pushq	%r9
00000000000150de	pushq	%r10
00000000000150e0	pushq	%r11
00000000000150e2	pushq	%r12
00000000000150e4	pushq	%r13
00000000000150e6	pushq	%r14
00000000000150e8	pushq	%r15
00000000000150ea	subq	$0x10, %rsp
00000000000150ee	movss	%xmm0, (%rsp)
00000000000150f3	subq	$0x10, %rsp
00000000000150f7	movss	%xmm1, (%rsp)
00000000000150fc	pushq	%rsi
00000000000150fd	pushq	%rdi
00000000000150fe	callq	__Z7getBasev ## getBase()
0000000000015103	addq	$0x273550, %rax
0000000000015109	popq	%rdi
000000000001510a	popq	%rsi
000000000001510b	movss	(%rsp), %xmm1
0000000000015110	addq	$0x10, %rsp
0000000000015114	movss	(%rsp), %xmm0
0000000000015119	addq	$0x10, %rsp
000000000001511d	popq	%r15
000000000001511f	popq	%r14
0000000000015121	popq	%r13
0000000000015123	popq	%r12
0000000000015125	popq	%r11
0000000000015127	popq	%r10
0000000000015129	popq	%r9
000000000001512b	popq	%r8
000000000001512d	popq	%rcx
000000000001512e	popq	%rdx
000000000001512f	popq	%rsi
0000000000015130	popq	%rdi
0000000000015131	popq	%rbx
0000000000015132	popq	%rbp
0000000000015133	jmpq	*%rax
__ZN12FLAlertLayer14keyBackClickedEv:
0000000000015135	pushq	%rbp
0000000000015136	movq	%rsp, %rbp
0000000000015139	pushq	%rbx
000000000001513a	pushq	%rdi
000000000001513b	pushq	%rsi
000000000001513c	pushq	%rdx
000000000001513d	pushq	%rcx
000000000001513e	pushq	%r8
0000000000015140	pushq	%r9
0000000000015142	pushq	%r10
0000000000015144	pushq	%r11
0000000000015146	pushq	%r12
0000000000015148	pushq	%r13
000000000001514a	pushq	%r14
000000000001514c	pushq	%r15
000000000001514e	subq	$0x10, %rsp
0000000000015152	movss	%xmm0, (%rsp)
0000000000015157	subq	$0x10, %rsp
000000000001515b	movss	%xmm1, (%rsp)
0000000000015160	pushq	%rsi
0000000000015161	pushq	%rdi
0000000000015162	callq	__Z7getBasev ## getBase()
0000000000015167	addq	$0x273160, %rax
000000000001516d	popq	%rdi
000000000001516e	popq	%rsi
000000000001516f	movss	(%rsp), %xmm1
0000000000015174	addq	$0x10, %rsp
0000000000015178	movss	(%rsp), %xmm0
000000000001517d	addq	$0x10, %rsp
0000000000015181	popq	%r15
0000000000015183	popq	%r14
0000000000015185	popq	%r13
0000000000015187	popq	%r12
0000000000015189	popq	%r11
000000000001518b	popq	%r10
000000000001518d	popq	%r9
000000000001518f	popq	%r8
0000000000015191	popq	%rcx
0000000000015192	popq	%rdx
0000000000015193	popq	%rsi
0000000000015194	popq	%rdi
0000000000015195	popq	%rbx
0000000000015196	popq	%rbp
0000000000015197	jmpq	*%rax
__ZN12FLAlertLayer16ccTouchCancelledEPN7cocos2d7CCTouchEPNS0_7CCEventE:
0000000000015199	pushq	%rbp
000000000001519a	movq	%rsp, %rbp
000000000001519d	pushq	%rbx
000000000001519e	pushq	%rdi
000000000001519f	pushq	%rsi
00000000000151a0	pushq	%rdx
00000000000151a1	pushq	%rcx
00000000000151a2	pushq	%r8
00000000000151a4	pushq	%r9
00000000000151a6	pushq	%r10
00000000000151a8	pushq	%r11
00000000000151aa	pushq	%r12
00000000000151ac	pushq	%r13
00000000000151ae	pushq	%r14
00000000000151b0	pushq	%r15
00000000000151b2	subq	$0x10, %rsp
00000000000151b6	movss	%xmm0, (%rsp)
00000000000151bb	subq	$0x10, %rsp
00000000000151bf	movss	%xmm1, (%rsp)
00000000000151c4	pushq	%rsi
00000000000151c5	pushq	%rdi
00000000000151c6	callq	__Z7getBasev ## getBase()
00000000000151cb	addq	$0x273650, %rax
00000000000151d1	popq	%rdi
00000000000151d2	popq	%rsi
00000000000151d3	movss	(%rsp), %xmm1
00000000000151d8	addq	$0x10, %rsp
00000000000151dc	movss	(%rsp), %xmm0
00000000000151e1	addq	$0x10, %rsp
00000000000151e5	popq	%r15
00000000000151e7	popq	%r14
00000000000151e9	popq	%r13
00000000000151eb	popq	%r12
00000000000151ed	popq	%r11
00000000000151ef	popq	%r10
00000000000151f1	popq	%r9
00000000000151f3	popq	%r8
00000000000151f5	popq	%rcx
00000000000151f6	popq	%rdx
00000000000151f7	popq	%rsi
00000000000151f8	popq	%rdi
00000000000151f9	popq	%rbx
00000000000151fa	popq	%rbp
00000000000151fb	jmpq	*%rax
__ZN12FLAlertLayer27registerWithTouchDispatcherEi:
00000000000151fd	pushq	%rbp
00000000000151fe	movq	%rsp, %rbp
0000000000015201	pushq	%rbx
0000000000015202	pushq	%rdi
0000000000015203	pushq	%rsi
0000000000015204	pushq	%rdx
0000000000015205	pushq	%rcx
0000000000015206	pushq	%r8
0000000000015208	pushq	%r9
000000000001520a	pushq	%r10
000000000001520c	pushq	%r11
000000000001520e	pushq	%r12
0000000000015210	pushq	%r13
0000000000015212	pushq	%r14
0000000000015214	pushq	%r15
0000000000015216	subq	$0x10, %rsp
000000000001521a	movss	%xmm0, (%rsp)
000000000001521f	subq	$0x10, %rsp
0000000000015223	movss	%xmm1, (%rsp)
0000000000015228	pushq	%rsi
0000000000015229	pushq	%rdi
000000000001522a	callq	__Z7getBasev ## getBase()
000000000001522f	addq	$0x272b40, %rax
0000000000015235	popq	%rdi
0000000000015236	popq	%rsi
0000000000015237	movss	(%rsp), %xmm1
000000000001523c	addq	$0x10, %rsp
0000000000015240	movss	(%rsp), %xmm0
0000000000015245	addq	$0x10, %rsp
0000000000015249	popq	%r15
000000000001524b	popq	%r14
000000000001524d	popq	%r13
000000000001524f	popq	%r12
0000000000015251	popq	%r11
0000000000015253	popq	%r10
0000000000015255	popq	%r9
0000000000015257	popq	%r8
0000000000015259	popq	%rcx
000000000001525a	popq	%rdx
000000000001525b	popq	%rsi
000000000001525c	popq	%rdi
000000000001525d	popq	%rbx
000000000001525e	popq	%rbp
000000000001525f	jmpq	*%rax
__ZN12FLAlertLayer4showEv:
0000000000015261	pushq	%rbp
0000000000015262	movq	%rsp, %rbp
0000000000015265	pushq	%rbx
0000000000015266	pushq	%rdi
0000000000015267	pushq	%rsi
0000000000015268	pushq	%rdx
0000000000015269	pushq	%rcx
000000000001526a	pushq	%r8
000000000001526c	pushq	%r9
000000000001526e	pushq	%r10
0000000000015270	pushq	%r11
0000000000015272	pushq	%r12
0000000000015274	pushq	%r13
0000000000015276	pushq	%r14
0000000000015278	pushq	%r15
000000000001527a	subq	$0x10, %rsp
000000000001527e	movss	%xmm0, (%rsp)
0000000000015283	subq	$0x10, %rsp
0000000000015287	movss	%xmm1, (%rsp)
000000000001528c	pushq	%rsi
000000000001528d	pushq	%rdi
000000000001528e	callq	__Z7getBasev ## getBase()
0000000000015293	addq	$0x25f120, %rax
0000000000015299	popq	%rdi
000000000001529a	popq	%rsi
000000000001529b	movss	(%rsp), %xmm1
00000000000152a0	addq	$0x10, %rsp
00000000000152a4	movss	(%rsp), %xmm0
00000000000152a9	addq	$0x10, %rsp
00000000000152ad	popq	%r15
00000000000152af	popq	%r14
00000000000152b1	popq	%r13
00000000000152b3	popq	%r12
00000000000152b5	popq	%r11
00000000000152b7	popq	%r10
00000000000152b9	popq	%r9
00000000000152bb	popq	%r8
00000000000152bd	popq	%rcx
00000000000152be	popq	%rdx
00000000000152bf	popq	%rsi
00000000000152c0	popq	%rdi
00000000000152c1	popq	%rbx
00000000000152c2	popq	%rbp
00000000000152c3	jmpq	*%rax
__ZN12FLAlertLayer6createEPvPKcRKSsS2_S2_f:
00000000000152c5	pushq	%rbp
00000000000152c6	movq	%rsp, %rbp
00000000000152c9	pushq	%rbx
00000000000152ca	pushq	%rdi
00000000000152cb	pushq	%rsi
00000000000152cc	pushq	%rdx
00000000000152cd	pushq	%rcx
00000000000152ce	pushq	%r8
00000000000152d0	pushq	%r9
00000000000152d2	pushq	%r10
00000000000152d4	pushq	%r11
00000000000152d6	pushq	%r12
00000000000152d8	pushq	%r13
00000000000152da	pushq	%r14
00000000000152dc	pushq	%r15
00000000000152de	subq	$0x10, %rsp
00000000000152e2	movss	%xmm0, (%rsp)
00000000000152e7	subq	$0x10, %rsp
00000000000152eb	movss	%xmm1, (%rsp)
00000000000152f0	pushq	%rsi
00000000000152f1	pushq	%rdi
00000000000152f2	callq	__Z7getBasev ## getBase()
00000000000152f7	addq	$0x25e0e0, %rax
00000000000152fd	popq	%rdi
00000000000152fe	popq	%rsi
00000000000152ff	movss	(%rsp), %xmm1
0000000000015304	addq	$0x10, %rsp
0000000000015308	movss	(%rsp), %xmm0
000000000001530d	addq	$0x10, %rsp
0000000000015311	popq	%r15
0000000000015313	popq	%r14
0000000000015315	popq	%r13
0000000000015317	popq	%r12
0000000000015319	popq	%r11
000000000001531b	popq	%r10
000000000001531d	popq	%r9
000000000001531f	popq	%r8
0000000000015321	popq	%rcx
0000000000015322	popq	%rdx
0000000000015323	popq	%rsi
0000000000015324	popq	%rdi
0000000000015325	popq	%rbx
0000000000015326	popq	%rbp
0000000000015327	jmpq	*%rax
__ZN12FLAlertLayer7keyDownEN7cocos2d12enumKeyCodesE:
0000000000015329	pushq	%rbp
000000000001532a	movq	%rsp, %rbp
000000000001532d	pushq	%rbx
000000000001532e	pushq	%rdi
000000000001532f	pushq	%rsi
0000000000015330	pushq	%rdx
0000000000015331	pushq	%rcx
0000000000015332	pushq	%r8
0000000000015334	pushq	%r9
0000000000015336	pushq	%r10
0000000000015338	pushq	%r11
000000000001533a	pushq	%r12
000000000001533c	pushq	%r13
000000000001533e	pushq	%r14
0000000000015340	pushq	%r15
0000000000015342	subq	$0x10, %rsp
0000000000015346	movss	%xmm0, (%rsp)
000000000001534b	subq	$0x10, %rsp
000000000001534f	movss	%xmm1, (%rsp)
0000000000015354	pushq	%rsi
0000000000015355	pushq	%rdi
0000000000015356	callq	__Z7getBasev ## getBase()
000000000001535b	addq	$0x273280, %rax
0000000000015361	popq	%rdi
0000000000015362	popq	%rsi
0000000000015363	movss	(%rsp), %xmm1
0000000000015368	addq	$0x10, %rsp
000000000001536c	movss	(%rsp), %xmm0
0000000000015371	addq	$0x10, %rsp
0000000000015375	popq	%r15
0000000000015377	popq	%r14
0000000000015379	popq	%r13
000000000001537b	popq	%r12
000000000001537d	popq	%r11
000000000001537f	popq	%r10
0000000000015381	popq	%r9
0000000000015383	popq	%r8
0000000000015385	popq	%rcx
0000000000015386	popq	%rdx
0000000000015387	popq	%rsi
0000000000015388	popq	%rdi
0000000000015389	popq	%rbx
000000000001538a	popq	%rbp
000000000001538b	jmpq	*%rax
__ZN12FLAlertLayer7onEnterEv:
000000000001538d	pushq	%rbp
000000000001538e	movq	%rsp, %rbp
0000000000015391	pushq	%rbx
0000000000015392	pushq	%rdi
0000000000015393	pushq	%rsi
0000000000015394	pushq	%rdx
0000000000015395	pushq	%rcx
0000000000015396	pushq	%r8
0000000000015398	pushq	%r9
000000000001539a	pushq	%r10
000000000001539c	pushq	%r11
000000000001539e	pushq	%r12
00000000000153a0	pushq	%r13
00000000000153a2	pushq	%r14
00000000000153a4	pushq	%r15
00000000000153a6	subq	$0x10, %rsp
00000000000153aa	movss	%xmm0, (%rsp)
00000000000153af	subq	$0x10, %rsp
00000000000153b3	movss	%xmm1, (%rsp)
00000000000153b8	pushq	%rsi
00000000000153b9	pushq	%rdi
00000000000153ba	callq	__Z7getBasev ## getBase()
00000000000153bf	addq	$0x273300, %rax
00000000000153c5	popq	%rdi
00000000000153c6	popq	%rsi
00000000000153c7	movss	(%rsp), %xmm1
00000000000153cc	addq	$0x10, %rsp
00000000000153d0	movss	(%rsp), %xmm0
00000000000153d5	addq	$0x10, %rsp
00000000000153d9	popq	%r15
00000000000153db	popq	%r14
00000000000153dd	popq	%r13
00000000000153df	popq	%r12
00000000000153e1	popq	%r11
00000000000153e3	popq	%r10
00000000000153e5	popq	%r9
00000000000153e7	popq	%r8
00000000000153e9	popq	%rcx
00000000000153ea	popq	%rdx
00000000000153eb	popq	%rsi
00000000000153ec	popq	%rdi
00000000000153ed	popq	%rbx
00000000000153ee	popq	%rbp
00000000000153ef	jmpq	*%rax
__ZN12FLAlertLayerC1Ev:
00000000000153f1	pushq	%rbp
00000000000153f2	movq	%rsp, %rbp
00000000000153f5	pushq	%rbx
00000000000153f6	pushq	%rdi
00000000000153f7	pushq	%rsi
00000000000153f8	pushq	%rdx
00000000000153f9	pushq	%rcx
00000000000153fa	pushq	%r8
00000000000153fc	pushq	%r9
00000000000153fe	pushq	%r10
0000000000015400	pushq	%r11
0000000000015402	pushq	%r12
0000000000015404	pushq	%r13
0000000000015406	pushq	%r14
0000000000015408	pushq	%r15
000000000001540a	subq	$0x10, %rsp
000000000001540e	movss	%xmm0, (%rsp)
0000000000015413	subq	$0x10, %rsp
0000000000015417	movss	%xmm1, (%rsp)
000000000001541c	pushq	%rsi
000000000001541d	pushq	%rdi
000000000001541e	callq	__Z7getBasev ## getBase()
0000000000015423	addq	$0x274270, %rax
0000000000015429	popq	%rdi
000000000001542a	popq	%rsi
000000000001542b	movss	(%rsp), %xmm1
0000000000015430	addq	$0x10, %rsp
0000000000015434	movss	(%rsp), %xmm0
0000000000015439	addq	$0x10, %rsp
000000000001543d	popq	%r15
000000000001543f	popq	%r14
0000000000015441	popq	%r13
0000000000015443	popq	%r12
0000000000015445	popq	%r11
0000000000015447	popq	%r10
0000000000015449	popq	%r9
000000000001544b	popq	%r8
000000000001544d	popq	%rcx
000000000001544e	popq	%rdx
000000000001544f	popq	%rsi
0000000000015450	popq	%rdi
0000000000015451	popq	%rbx
0000000000015452	popq	%rbp
0000000000015453	jmpq	*%rax
__ZN12FLAlertLayerC2Ev:
0000000000015455	pushq	%rbp
0000000000015456	movq	%rsp, %rbp
0000000000015459	pushq	%rbx
000000000001545a	pushq	%rdi
000000000001545b	pushq	%rsi
000000000001545c	pushq	%rdx
000000000001545d	pushq	%rcx
000000000001545e	pushq	%r8
0000000000015460	pushq	%r9
0000000000015462	pushq	%r10
0000000000015464	pushq	%r11
0000000000015466	pushq	%r12
0000000000015468	pushq	%r13
000000000001546a	pushq	%r14
000000000001546c	pushq	%r15
000000000001546e	subq	$0x10, %rsp
0000000000015472	movss	%xmm0, (%rsp)
0000000000015477	subq	$0x10, %rsp
000000000001547b	movss	%xmm1, (%rsp)
0000000000015480	pushq	%rsi
0000000000015481	pushq	%rdi
0000000000015482	callq	__Z7getBasev ## getBase()
0000000000015487	addq	$0x274270, %rax
000000000001548d	popq	%rdi
000000000001548e	popq	%rsi
000000000001548f	movss	(%rsp), %xmm1
0000000000015494	addq	$0x10, %rsp
0000000000015498	movss	(%rsp), %xmm0
000000000001549d	addq	$0x10, %rsp
00000000000154a1	popq	%r15
00000000000154a3	popq	%r14
00000000000154a5	popq	%r13
00000000000154a7	popq	%r12
00000000000154a9	popq	%r11
00000000000154ab	popq	%r10
00000000000154ad	popq	%r9
00000000000154af	popq	%r8
00000000000154b1	popq	%rcx
00000000000154b2	popq	%rdx
00000000000154b3	popq	%rsi
00000000000154b4	popq	%rdi
00000000000154b5	popq	%rbx
00000000000154b6	popq	%rbp
00000000000154b7	jmpq	*%rax
__ZN12FLAlertLayerD1Ev:
00000000000154b9	pushq	%rbp
00000000000154ba	movq	%rsp, %rbp
00000000000154bd	pushq	%rbx
00000000000154be	pushq	%rdi
00000000000154bf	pushq	%rsi
00000000000154c0	pushq	%rdx
00000000000154c1	pushq	%rcx
00000000000154c2	pushq	%r8
00000000000154c4	pushq	%r9
00000000000154c6	pushq	%r10
00000000000154c8	pushq	%r11
00000000000154ca	pushq	%r12
00000000000154cc	pushq	%r13
00000000000154ce	pushq	%r14
00000000000154d0	pushq	%r15
00000000000154d2	subq	$0x10, %rsp
00000000000154d6	movss	%xmm0, (%rsp)
00000000000154db	subq	$0x10, %rsp
00000000000154df	movss	%xmm1, (%rsp)
00000000000154e4	pushq	%rsi
00000000000154e5	pushq	%rdi
00000000000154e6	callq	__Z7getBasev ## getBase()
00000000000154eb	addq	$0x2727b0, %rax
00000000000154f1	popq	%rdi
00000000000154f2	popq	%rsi
00000000000154f3	movss	(%rsp), %xmm1
00000000000154f8	addq	$0x10, %rsp
00000000000154fc	movss	(%rsp), %xmm0
0000000000015501	addq	$0x10, %rsp
0000000000015505	popq	%r15
0000000000015507	popq	%r14
0000000000015509	popq	%r13
000000000001550b	popq	%r12
000000000001550d	popq	%r11
000000000001550f	popq	%r10
0000000000015511	popq	%r9
0000000000015513	popq	%r8
0000000000015515	popq	%rcx
0000000000015516	popq	%rdx
0000000000015517	popq	%rsi
0000000000015518	popq	%rdi
0000000000015519	popq	%rbx
000000000001551a	popq	%rbp
000000000001551b	jmpq	*%rax
__ZN12FLAlertLayerD2Ev:
000000000001551d	pushq	%rbp
000000000001551e	movq	%rsp, %rbp
0000000000015521	pushq	%rbx
0000000000015522	pushq	%rdi
0000000000015523	pushq	%rsi
0000000000015524	pushq	%rdx
0000000000015525	pushq	%rcx
0000000000015526	pushq	%r8
0000000000015528	pushq	%r9
000000000001552a	pushq	%r10
000000000001552c	pushq	%r11
000000000001552e	pushq	%r12
0000000000015530	pushq	%r13
0000000000015532	pushq	%r14
0000000000015534	pushq	%r15
0000000000015536	subq	$0x10, %rsp
000000000001553a	movss	%xmm0, (%rsp)
000000000001553f	subq	$0x10, %rsp
0000000000015543	movss	%xmm1, (%rsp)
0000000000015548	pushq	%rsi
0000000000015549	pushq	%rdi
000000000001554a	callq	__Z7getBasev ## getBase()
000000000001554f	addq	$0x2727b0, %rax
0000000000015555	popq	%rdi
0000000000015556	popq	%rsi
0000000000015557	movss	(%rsp), %xmm1
000000000001555c	addq	$0x10, %rsp
0000000000015560	movss	(%rsp), %xmm0
0000000000015565	addq	$0x10, %rsp
0000000000015569	popq	%r15
000000000001556b	popq	%r14
000000000001556d	popq	%r13
000000000001556f	popq	%r12
0000000000015571	popq	%r11
0000000000015573	popq	%r10
0000000000015575	popq	%r9
0000000000015577	popq	%r8
0000000000015579	popq	%rcx
000000000001557a	popq	%rdx
000000000001557b	popq	%rsi
000000000001557c	popq	%rdi
000000000001557d	popq	%rbx
000000000001557e	popq	%rbp
000000000001557f	jmpq	*%rax
__ZN12FLAlertLayerD0Ev:
0000000000015581	pushq	%rbp
0000000000015582	movq	%rsp, %rbp
0000000000015585	pushq	%rbx
0000000000015586	pushq	%rdi
0000000000015587	pushq	%rsi
0000000000015588	pushq	%rdx
0000000000015589	pushq	%rcx
000000000001558a	pushq	%r8
000000000001558c	pushq	%r9
000000000001558e	pushq	%r10
0000000000015590	pushq	%r11
0000000000015592	pushq	%r12
0000000000015594	pushq	%r13
0000000000015596	pushq	%r14
0000000000015598	pushq	%r15
000000000001559a	subq	$0x10, %rsp
000000000001559e	movss	%xmm0, (%rsp)
00000000000155a3	subq	$0x10, %rsp
00000000000155a7	movss	%xmm1, (%rsp)
00000000000155ac	pushq	%rsi
00000000000155ad	pushq	%rdi
00000000000155ae	callq	__Z7getBasev ## getBase()
00000000000155b3	addq	$0x274410, %rax
00000000000155b9	popq	%rdi
00000000000155ba	popq	%rsi
00000000000155bb	movss	(%rsp), %xmm1
00000000000155c0	addq	$0x10, %rsp
00000000000155c4	movss	(%rsp), %xmm0
00000000000155c9	addq	$0x10, %rsp
00000000000155cd	popq	%r15
00000000000155cf	popq	%r14
00000000000155d1	popq	%r13
00000000000155d3	popq	%r12
00000000000155d5	popq	%r11
00000000000155d7	popq	%r10
00000000000155d9	popq	%r9
00000000000155db	popq	%r8
00000000000155dd	popq	%rcx
00000000000155de	popq	%rdx
00000000000155df	popq	%rsi
00000000000155e0	popq	%rdi
00000000000155e1	popq	%rbx
00000000000155e2	popq	%rbp
00000000000155e3	jmpq	*%rax
__ZN12PlayerObject14setSecondColorERKN7cocos2d10_ccColor3BE:
00000000000155e5	pushq	%rbp
00000000000155e6	movq	%rsp, %rbp
00000000000155e9	pushq	%rbx
00000000000155ea	pushq	%rdi
00000000000155eb	pushq	%rsi
00000000000155ec	pushq	%rdx
00000000000155ed	pushq	%rcx
00000000000155ee	pushq	%r8
00000000000155f0	pushq	%r9
00000000000155f2	pushq	%r10
00000000000155f4	pushq	%r11
00000000000155f6	pushq	%r12
00000000000155f8	pushq	%r13
00000000000155fa	pushq	%r14
00000000000155fc	pushq	%r15
00000000000155fe	subq	$0x10, %rsp
0000000000015602	movss	%xmm0, (%rsp)
0000000000015607	subq	$0x10, %rsp
000000000001560b	movss	%xmm1, (%rsp)
0000000000015610	pushq	%rsi
0000000000015611	pushq	%rdi
0000000000015612	callq	__Z7getBasev ## getBase()
0000000000015617	addq	$0x219610, %rax
000000000001561d	popq	%rdi
000000000001561e	popq	%rsi
000000000001561f	movss	(%rsp), %xmm1
0000000000015624	addq	$0x10, %rsp
0000000000015628	movss	(%rsp), %xmm0
000000000001562d	addq	$0x10, %rsp
0000000000015631	popq	%r15
0000000000015633	popq	%r14
0000000000015635	popq	%r13
0000000000015637	popq	%r12
0000000000015639	popq	%r11
000000000001563b	popq	%r10
000000000001563d	popq	%r9
000000000001563f	popq	%r8
0000000000015641	popq	%rcx
0000000000015642	popq	%rdx
0000000000015643	popq	%rsi
0000000000015644	popq	%rdi
0000000000015645	popq	%rbx
0000000000015646	popq	%rbp
0000000000015647	jmpq	*%rax
__ZN12PlayerObject15addAllParticlesEv:
0000000000015649	pushq	%rbp
000000000001564a	movq	%rsp, %rbp
000000000001564d	pushq	%rbx
000000000001564e	pushq	%rdi
000000000001564f	pushq	%rsi
0000000000015650	pushq	%rdx
0000000000015651	pushq	%rcx
0000000000015652	pushq	%r8
0000000000015654	pushq	%r9
0000000000015656	pushq	%r10
0000000000015658	pushq	%r11
000000000001565a	pushq	%r12
000000000001565c	pushq	%r13
000000000001565e	pushq	%r14
0000000000015660	pushq	%r15
0000000000015662	subq	$0x10, %rsp
0000000000015666	movss	%xmm0, (%rsp)
000000000001566b	subq	$0x10, %rsp
000000000001566f	movss	%xmm1, (%rsp)
0000000000015674	pushq	%rsi
0000000000015675	pushq	%rdi
0000000000015676	callq	__Z7getBasev ## getBase()
000000000001567b	addq	$0x2189b0, %rax
0000000000015681	popq	%rdi
0000000000015682	popq	%rsi
0000000000015683	movss	(%rsp), %xmm1
0000000000015688	addq	$0x10, %rsp
000000000001568c	movss	(%rsp), %xmm0
0000000000015691	addq	$0x10, %rsp
0000000000015695	popq	%r15
0000000000015697	popq	%r14
0000000000015699	popq	%r13
000000000001569b	popq	%r12
000000000001569d	popq	%r11
000000000001569f	popq	%r10
00000000000156a1	popq	%r9
00000000000156a3	popq	%r8
00000000000156a5	popq	%rcx
00000000000156a6	popq	%rdx
00000000000156a7	popq	%rsi
00000000000156a8	popq	%rdi
00000000000156a9	popq	%rbx
00000000000156aa	popq	%rbp
00000000000156ab	jmpq	*%rax
__ZN12PlayerObject6createEiiPN7cocos2d7CCLayerE:
00000000000156ad	pushq	%rbp
00000000000156ae	movq	%rsp, %rbp
00000000000156b1	pushq	%rbx
00000000000156b2	pushq	%rdi
00000000000156b3	pushq	%rsi
00000000000156b4	pushq	%rdx
00000000000156b5	pushq	%rcx
00000000000156b6	pushq	%r8
00000000000156b8	pushq	%r9
00000000000156ba	pushq	%r10
00000000000156bc	pushq	%r11
00000000000156be	pushq	%r12
00000000000156c0	pushq	%r13
00000000000156c2	pushq	%r14
00000000000156c4	pushq	%r15
00000000000156c6	subq	$0x10, %rsp
00000000000156ca	movss	%xmm0, (%rsp)
00000000000156cf	subq	$0x10, %rsp
00000000000156d3	movss	%xmm1, (%rsp)
00000000000156d8	pushq	%rsi
00000000000156d9	pushq	%rdi
00000000000156da	callq	__Z7getBasev ## getBase()
00000000000156df	addq	$0x217260, %rax
00000000000156e5	popq	%rdi
00000000000156e6	popq	%rsi
00000000000156e7	movss	(%rsp), %xmm1
00000000000156ec	addq	$0x10, %rsp
00000000000156f0	movss	(%rsp), %xmm0
00000000000156f5	addq	$0x10, %rsp
00000000000156f9	popq	%r15
00000000000156fb	popq	%r14
00000000000156fd	popq	%r13
00000000000156ff	popq	%r12
0000000000015701	popq	%r11
0000000000015703	popq	%r10
0000000000015705	popq	%r9
0000000000015707	popq	%r8
0000000000015709	popq	%rcx
000000000001570a	popq	%rdx
000000000001570b	popq	%rsi
000000000001570c	popq	%rdi
000000000001570d	popq	%rbx
000000000001570e	popq	%rbp
000000000001570f	jmpq	*%rax
__ZN12PlayerObject8setColorERKN7cocos2d10_ccColor3BE:
0000000000015711	pushq	%rbp
0000000000015712	movq	%rsp, %rbp
0000000000015715	pushq	%rbx
0000000000015716	pushq	%rdi
0000000000015717	pushq	%rsi
0000000000015718	pushq	%rdx
0000000000015719	pushq	%rcx
000000000001571a	pushq	%r8
000000000001571c	pushq	%r9
000000000001571e	pushq	%r10
0000000000015720	pushq	%r11
0000000000015722	pushq	%r12
0000000000015724	pushq	%r13
0000000000015726	pushq	%r14
0000000000015728	pushq	%r15
000000000001572a	subq	$0x10, %rsp
000000000001572e	movss	%xmm0, (%rsp)
0000000000015733	subq	$0x10, %rsp
0000000000015737	movss	%xmm1, (%rsp)
000000000001573c	pushq	%rsi
000000000001573d	pushq	%rdi
000000000001573e	callq	__Z7getBasev ## getBase()
0000000000015743	addq	$0x22cdf0, %rax
0000000000015749	popq	%rdi
000000000001574a	popq	%rsi
000000000001574b	movss	(%rsp), %xmm1
0000000000015750	addq	$0x10, %rsp
0000000000015754	movss	(%rsp), %xmm0
0000000000015759	addq	$0x10, %rsp
000000000001575d	popq	%r15
000000000001575f	popq	%r14
0000000000015761	popq	%r13
0000000000015763	popq	%r12
0000000000015765	popq	%r11
0000000000015767	popq	%r10
0000000000015769	popq	%r9
000000000001576b	popq	%r8
000000000001576d	popq	%rcx
000000000001576e	popq	%rdx
000000000001576f	popq	%rsi
0000000000015770	popq	%rdi
0000000000015771	popq	%rbx
0000000000015772	popq	%rbp
0000000000015773	jmpq	*%rax
__ZN12PlayerObject11flipGravityEbb:
0000000000015775	pushq	%rbp
0000000000015776	movq	%rsp, %rbp
0000000000015779	pushq	%rbx
000000000001577a	pushq	%rdi
000000000001577b	pushq	%rsi
000000000001577c	pushq	%rdx
000000000001577d	pushq	%rcx
000000000001577e	pushq	%r8
0000000000015780	pushq	%r9
0000000000015782	pushq	%r10
0000000000015784	pushq	%r11
0000000000015786	pushq	%r12
0000000000015788	pushq	%r13
000000000001578a	pushq	%r14
000000000001578c	pushq	%r15
000000000001578e	subq	$0x10, %rsp
0000000000015792	movss	%xmm0, (%rsp)
0000000000015797	subq	$0x10, %rsp
000000000001579b	movss	%xmm1, (%rsp)
00000000000157a0	pushq	%rsi
00000000000157a1	pushq	%rdi
00000000000157a2	callq	__Z7getBasev ## getBase()
00000000000157a7	addq	$0x21c090, %rax
00000000000157ad	popq	%rdi
00000000000157ae	popq	%rsi
00000000000157af	movss	(%rsp), %xmm1
00000000000157b4	addq	$0x10, %rsp
00000000000157b8	movss	(%rsp), %xmm0
00000000000157bd	addq	$0x10, %rsp
00000000000157c1	popq	%r15
00000000000157c3	popq	%r14
00000000000157c5	popq	%r13
00000000000157c7	popq	%r12
00000000000157c9	popq	%r11
00000000000157cb	popq	%r10
00000000000157cd	popq	%r9
00000000000157cf	popq	%r8
00000000000157d1	popq	%rcx
00000000000157d2	popq	%rdx
00000000000157d3	popq	%rsi
00000000000157d4	popq	%rdi
00000000000157d5	popq	%rbx
00000000000157d6	popq	%rbp
00000000000157d7	jmpq	*%rax
__ZN13ObjectToolbox11sharedStateEv:
00000000000157d9	pushq	%rbp
00000000000157da	movq	%rsp, %rbp
00000000000157dd	pushq	%rbx
00000000000157de	pushq	%rdi
00000000000157df	pushq	%rsi
00000000000157e0	pushq	%rdx
00000000000157e1	pushq	%rcx
00000000000157e2	pushq	%r8
00000000000157e4	pushq	%r9
00000000000157e6	pushq	%r10
00000000000157e8	pushq	%r11
00000000000157ea	pushq	%r12
00000000000157ec	pushq	%r13
00000000000157ee	pushq	%r14
00000000000157f0	pushq	%r15
00000000000157f2	subq	$0x10, %rsp
00000000000157f6	movss	%xmm0, (%rsp)
00000000000157fb	subq	$0x10, %rsp
00000000000157ff	movss	%xmm1, (%rsp)
0000000000015804	pushq	%rsi
0000000000015805	pushq	%rdi
0000000000015806	callq	__Z7getBasev ## getBase()
000000000001580b	addq	$0x3b2bc0, %rax
0000000000015811	popq	%rdi
0000000000015812	popq	%rsi
0000000000015813	movss	(%rsp), %xmm1
0000000000015818	addq	$0x10, %rsp
000000000001581c	movss	(%rsp), %xmm0
0000000000015821	addq	$0x10, %rsp
0000000000015825	popq	%r15
0000000000015827	popq	%r14
0000000000015829	popq	%r13
000000000001582b	popq	%r12
000000000001582d	popq	%r11
000000000001582f	popq	%r10
0000000000015831	popq	%r9
0000000000015833	popq	%r8
0000000000015835	popq	%rcx
0000000000015836	popq	%rdx
0000000000015837	popq	%rsi
0000000000015838	popq	%rdi
0000000000015839	popq	%rbx
000000000001583a	popq	%rbp
000000000001583b	jmpq	*%rax
__ZN14GJSearchObject6createEiSsSsSsibbbibbbbbbbbii:
000000000001583d	pushq	%rbp
000000000001583e	movq	%rsp, %rbp
0000000000015841	pushq	%rbx
0000000000015842	pushq	%rdi
0000000000015843	pushq	%rsi
0000000000015844	pushq	%rdx
0000000000015845	pushq	%rcx
0000000000015846	pushq	%r8
0000000000015848	pushq	%r9
000000000001584a	pushq	%r10
000000000001584c	pushq	%r11
000000000001584e	pushq	%r12
0000000000015850	pushq	%r13
0000000000015852	pushq	%r14
0000000000015854	pushq	%r15
0000000000015856	subq	$0x10, %rsp
000000000001585a	movss	%xmm0, (%rsp)
000000000001585f	subq	$0x10, %rsp
0000000000015863	movss	%xmm1, (%rsp)
0000000000015868	pushq	%rsi
0000000000015869	pushq	%rdi
000000000001586a	callq	__Z7getBasev ## getBase()
000000000001586f	addq	$0x2dee30, %rax
0000000000015875	popq	%rdi
0000000000015876	popq	%rsi
0000000000015877	movss	(%rsp), %xmm1
000000000001587c	addq	$0x10, %rsp
0000000000015880	movss	(%rsp), %xmm0
0000000000015885	addq	$0x10, %rsp
0000000000015889	popq	%r15
000000000001588b	popq	%r14
000000000001588d	popq	%r13
000000000001588f	popq	%r12
0000000000015891	popq	%r11
0000000000015893	popq	%r10
0000000000015895	popq	%r9
0000000000015897	popq	%r8
0000000000015899	popq	%rcx
000000000001589a	popq	%rdx
000000000001589b	popq	%rsi
000000000001589c	popq	%rdi
000000000001589d	popq	%rbx
000000000001589e	popq	%rbp
000000000001589f	jmpq	*%rax
__ZN16EditorPauseLayer6createEP16LevelEditorLayer:
00000000000158a1	pushq	%rbp
00000000000158a2	movq	%rsp, %rbp
00000000000158a5	pushq	%rbx
00000000000158a6	pushq	%rdi
00000000000158a7	pushq	%rsi
00000000000158a8	pushq	%rdx
00000000000158a9	pushq	%rcx
00000000000158aa	pushq	%r8
00000000000158ac	pushq	%r9
00000000000158ae	pushq	%r10
00000000000158b0	pushq	%r11
00000000000158b2	pushq	%r12
00000000000158b4	pushq	%r13
00000000000158b6	pushq	%r14
00000000000158b8	pushq	%r15
00000000000158ba	subq	$0x10, %rsp
00000000000158be	movss	%xmm0, (%rsp)
00000000000158c3	subq	$0x10, %rsp
00000000000158c7	movss	%xmm1, (%rsp)
00000000000158cc	pushq	%rsi
00000000000158cd	pushq	%rdi
00000000000158ce	callq	__Z7getBasev ## getBase()
00000000000158d3	addq	$0x13c680, %rax
00000000000158d9	popq	%rdi
00000000000158da	popq	%rsi
00000000000158db	movss	(%rsp), %xmm1
00000000000158e0	addq	$0x10, %rsp
00000000000158e4	movss	(%rsp), %xmm0
00000000000158e9	addq	$0x10, %rsp
00000000000158ed	popq	%r15
00000000000158ef	popq	%r14
00000000000158f1	popq	%r13
00000000000158f3	popq	%r12
00000000000158f5	popq	%r11
00000000000158f7	popq	%r10
00000000000158f9	popq	%r9
00000000000158fb	popq	%r8
00000000000158fd	popq	%rcx
00000000000158fe	popq	%rdx
00000000000158ff	popq	%rsi
0000000000015900	popq	%rdi
0000000000015901	popq	%rbx
0000000000015902	popq	%rbp
0000000000015903	jmpq	*%rax
__ZN16EditorPauseLayer9saveLevelEv:
0000000000015905	pushq	%rbp
0000000000015906	movq	%rsp, %rbp
0000000000015909	pushq	%rbx
000000000001590a	pushq	%rdi
000000000001590b	pushq	%rsi
000000000001590c	pushq	%rdx
000000000001590d	pushq	%rcx
000000000001590e	pushq	%r8
0000000000015910	pushq	%r9
0000000000015912	pushq	%r10
0000000000015914	pushq	%r11
0000000000015916	pushq	%r12
0000000000015918	pushq	%r13
000000000001591a	pushq	%r14
000000000001591c	pushq	%r15
000000000001591e	subq	$0x10, %rsp
0000000000015922	movss	%xmm0, (%rsp)
0000000000015927	subq	$0x10, %rsp
000000000001592b	movss	%xmm1, (%rsp)
0000000000015930	pushq	%rsi
0000000000015931	pushq	%rdi
0000000000015932	callq	__Z7getBasev ## getBase()
0000000000015937	addq	$0x13ebd0, %rax
000000000001593d	popq	%rdi
000000000001593e	popq	%rsi
000000000001593f	movss	(%rsp), %xmm1
0000000000015944	addq	$0x10, %rsp
0000000000015948	movss	(%rsp), %xmm0
000000000001594d	addq	$0x10, %rsp
0000000000015951	popq	%r15
0000000000015953	popq	%r14
0000000000015955	popq	%r13
0000000000015957	popq	%r12
0000000000015959	popq	%r11
000000000001595b	popq	%r10
000000000001595d	popq	%r9
000000000001595f	popq	%r8
0000000000015961	popq	%rcx
0000000000015962	popq	%rdx
0000000000015963	popq	%rsi
0000000000015964	popq	%rdi
0000000000015965	popq	%rbx
0000000000015966	popq	%rbp
0000000000015967	jmpq	*%rax
__ZN16EditorPauseLayerD1Ev:
0000000000015969	pushq	%rbp
000000000001596a	movq	%rsp, %rbp
000000000001596d	pushq	%rbx
000000000001596e	pushq	%rdi
000000000001596f	pushq	%rsi
0000000000015970	pushq	%rdx
0000000000015971	pushq	%rcx
0000000000015972	pushq	%r8
0000000000015974	pushq	%r9
0000000000015976	pushq	%r10
0000000000015978	pushq	%r11
000000000001597a	pushq	%r12
000000000001597c	pushq	%r13
000000000001597e	pushq	%r14
0000000000015980	pushq	%r15
0000000000015982	subq	$0x10, %rsp
0000000000015986	movss	%xmm0, (%rsp)
000000000001598b	subq	$0x10, %rsp
000000000001598f	movss	%xmm1, (%rsp)
0000000000015994	pushq	%rsi
0000000000015995	pushq	%rdi
0000000000015996	callq	__Z7getBasev ## getBase()
000000000001599b	addq	$0x13c570, %rax
00000000000159a1	popq	%rdi
00000000000159a2	popq	%rsi
00000000000159a3	movss	(%rsp), %xmm1
00000000000159a8	addq	$0x10, %rsp
00000000000159ac	movss	(%rsp), %xmm0
00000000000159b1	addq	$0x10, %rsp
00000000000159b5	popq	%r15
00000000000159b7	popq	%r14
00000000000159b9	popq	%r13
00000000000159bb	popq	%r12
00000000000159bd	popq	%r11
00000000000159bf	popq	%r10
00000000000159c1	popq	%r9
00000000000159c3	popq	%r8
00000000000159c5	popq	%rcx
00000000000159c6	popq	%rdx
00000000000159c7	popq	%rsi
00000000000159c8	popq	%rdi
00000000000159c9	popq	%rbx
00000000000159ca	popq	%rbp
00000000000159cb	jmpq	*%rax
__ZN16GameLevelManager11sharedStateEv:
00000000000159cd	pushq	%rbp
00000000000159ce	movq	%rsp, %rbp
00000000000159d1	pushq	%rbx
00000000000159d2	pushq	%rdi
00000000000159d3	pushq	%rsi
00000000000159d4	pushq	%rdx
00000000000159d5	pushq	%rcx
00000000000159d6	pushq	%r8
00000000000159d8	pushq	%r9
00000000000159da	pushq	%r10
00000000000159dc	pushq	%r11
00000000000159de	pushq	%r12
00000000000159e0	pushq	%r13
00000000000159e2	pushq	%r14
00000000000159e4	pushq	%r15
00000000000159e6	subq	$0x10, %rsp
00000000000159ea	movss	%xmm0, (%rsp)
00000000000159ef	subq	$0x10, %rsp
00000000000159f3	movss	%xmm1, (%rsp)
00000000000159f8	pushq	%rsi
00000000000159f9	pushq	%rdi
00000000000159fa	callq	__Z7getBasev ## getBase()
00000000000159ff	addq	$0x2a8340, %rax
0000000000015a05	popq	%rdi
0000000000015a06	popq	%rsi
0000000000015a07	movss	(%rsp), %xmm1
0000000000015a0c	addq	$0x10, %rsp
0000000000015a10	movss	(%rsp), %xmm0
0000000000015a15	addq	$0x10, %rsp
0000000000015a19	popq	%r15
0000000000015a1b	popq	%r14
0000000000015a1d	popq	%r13
0000000000015a1f	popq	%r12
0000000000015a21	popq	%r11
0000000000015a23	popq	%r10
0000000000015a25	popq	%r9
0000000000015a27	popq	%r8
0000000000015a29	popq	%rcx
0000000000015a2a	popq	%rdx
0000000000015a2b	popq	%rsi
0000000000015a2c	popq	%rdi
0000000000015a2d	popq	%rbx
0000000000015a2e	popq	%rbp
0000000000015a2f	jmpq	*%rax
__ZN16GameSoundManager13sharedManagerEv:
0000000000015a31	pushq	%rbp
0000000000015a32	movq	%rsp, %rbp
0000000000015a35	pushq	%rbx
0000000000015a36	pushq	%rdi
0000000000015a37	pushq	%rsi
0000000000015a38	pushq	%rdx
0000000000015a39	pushq	%rcx
0000000000015a3a	pushq	%r8
0000000000015a3c	pushq	%r9
0000000000015a3e	pushq	%r10
0000000000015a40	pushq	%r11
0000000000015a42	pushq	%r12
0000000000015a44	pushq	%r13
0000000000015a46	pushq	%r14
0000000000015a48	pushq	%r15
0000000000015a4a	subq	$0x10, %rsp
0000000000015a4e	movss	%xmm0, (%rsp)
0000000000015a53	subq	$0x10, %rsp
0000000000015a57	movss	%xmm1, (%rsp)
0000000000015a5c	pushq	%rsi
0000000000015a5d	pushq	%rdi
0000000000015a5e	callq	__Z7getBasev ## getBase()
0000000000015a63	addq	$0x3610f0, %rax
0000000000015a69	popq	%rdi
0000000000015a6a	popq	%rsi
0000000000015a6b	movss	(%rsp), %xmm1
0000000000015a70	addq	$0x10, %rsp
0000000000015a74	movss	(%rsp), %xmm0
0000000000015a79	addq	$0x10, %rsp
0000000000015a7d	popq	%r15
0000000000015a7f	popq	%r14
0000000000015a81	popq	%r13
0000000000015a83	popq	%r12
0000000000015a85	popq	%r11
0000000000015a87	popq	%r10
0000000000015a89	popq	%r9
0000000000015a8b	popq	%r8
0000000000015a8d	popq	%rcx
0000000000015a8e	popq	%rdx
0000000000015a8f	popq	%rsi
0000000000015a90	popq	%rdi
0000000000015a91	popq	%rbx
0000000000015a92	popq	%rbp
0000000000015a93	jmpq	*%rax
__ZN16GameSoundManager19stopBackgroundMusicEv:
0000000000015a95	pushq	%rbp
0000000000015a96	movq	%rsp, %rbp
0000000000015a99	pushq	%rbx
0000000000015a9a	pushq	%rdi
0000000000015a9b	pushq	%rsi
0000000000015a9c	pushq	%rdx
0000000000015a9d	pushq	%rcx
0000000000015a9e	pushq	%r8
0000000000015aa0	pushq	%r9
0000000000015aa2	pushq	%r10
0000000000015aa4	pushq	%r11
0000000000015aa6	pushq	%r12
0000000000015aa8	pushq	%r13
0000000000015aaa	pushq	%r14
0000000000015aac	pushq	%r15
0000000000015aae	subq	$0x10, %rsp
0000000000015ab2	movss	%xmm0, (%rsp)
0000000000015ab7	subq	$0x10, %rsp
0000000000015abb	movss	%xmm1, (%rsp)
0000000000015ac0	pushq	%rsi
0000000000015ac1	pushq	%rdi
0000000000015ac2	callq	__Z7getBasev ## getBase()
0000000000015ac7	addq	$0x362130, %rax
0000000000015acd	popq	%rdi
0000000000015ace	popq	%rsi
0000000000015acf	movss	(%rsp), %xmm1
0000000000015ad4	addq	$0x10, %rsp
0000000000015ad8	movss	(%rsp), %xmm0
0000000000015add	addq	$0x10, %rsp
0000000000015ae1	popq	%r15
0000000000015ae3	popq	%r14
0000000000015ae5	popq	%r13
0000000000015ae7	popq	%r12
0000000000015ae9	popq	%r11
0000000000015aeb	popq	%r10
0000000000015aed	popq	%r9
0000000000015aef	popq	%r8
0000000000015af1	popq	%rcx
0000000000015af2	popq	%rdx
0000000000015af3	popq	%rsi
0000000000015af4	popq	%rdi
0000000000015af5	popq	%rbx
0000000000015af6	popq	%rbp
0000000000015af7	jmpq	*%rax
__ZN16GameSoundManagerD0Ev:
0000000000015af9	pushq	%rbp
0000000000015afa	movq	%rsp, %rbp
0000000000015afd	pushq	%rbx
0000000000015afe	pushq	%rdi
0000000000015aff	pushq	%rsi
0000000000015b00	pushq	%rdx
0000000000015b01	pushq	%rcx
0000000000015b02	pushq	%r8
0000000000015b04	pushq	%r9
0000000000015b06	pushq	%r10
0000000000015b08	pushq	%r11
0000000000015b0a	pushq	%r12
0000000000015b0c	pushq	%r13
0000000000015b0e	pushq	%r14
0000000000015b10	pushq	%r15
0000000000015b12	subq	$0x10, %rsp
0000000000015b16	movss	%xmm0, (%rsp)
0000000000015b1b	subq	$0x10, %rsp
0000000000015b1f	movss	%xmm1, (%rsp)
0000000000015b24	pushq	%rsi
0000000000015b25	pushq	%rdi
0000000000015b26	callq	__Z7getBasev ## getBase()
0000000000015b2b	addq	$0x362cd0, %rax
0000000000015b31	popq	%rdi
0000000000015b32	popq	%rsi
0000000000015b33	movss	(%rsp), %xmm1
0000000000015b38	addq	$0x10, %rsp
0000000000015b3c	movss	(%rsp), %xmm0
0000000000015b41	addq	$0x10, %rsp
0000000000015b45	popq	%r15
0000000000015b47	popq	%r14
0000000000015b49	popq	%r13
0000000000015b4b	popq	%r12
0000000000015b4d	popq	%r11
0000000000015b4f	popq	%r10
0000000000015b51	popq	%r9
0000000000015b53	popq	%r8
0000000000015b55	popq	%rcx
0000000000015b56	popq	%rdx
0000000000015b57	popq	%rsi
0000000000015b58	popq	%rdi
0000000000015b59	popq	%rbx
0000000000015b5a	popq	%rbp
0000000000015b5b	jmpq	*%rax
__ZN16GameSoundManagerD1Ev:
0000000000015b5d	pushq	%rbp
0000000000015b5e	movq	%rsp, %rbp
0000000000015b61	pushq	%rbx
0000000000015b62	pushq	%rdi
0000000000015b63	pushq	%rsi
0000000000015b64	pushq	%rdx
0000000000015b65	pushq	%rcx
0000000000015b66	pushq	%r8
0000000000015b68	pushq	%r9
0000000000015b6a	pushq	%r10
0000000000015b6c	pushq	%r11
0000000000015b6e	pushq	%r12
0000000000015b70	pushq	%r13
0000000000015b72	pushq	%r14
0000000000015b74	pushq	%r15
0000000000015b76	subq	$0x10, %rsp
0000000000015b7a	movss	%xmm0, (%rsp)
0000000000015b7f	subq	$0x10, %rsp
0000000000015b83	movss	%xmm1, (%rsp)
0000000000015b88	pushq	%rsi
0000000000015b89	pushq	%rdi
0000000000015b8a	callq	__Z7getBasev ## getBase()
0000000000015b8f	addq	$0x362cc0, %rax
0000000000015b95	popq	%rdi
0000000000015b96	popq	%rsi
0000000000015b97	movss	(%rsp), %xmm1
0000000000015b9c	addq	$0x10, %rsp
0000000000015ba0	movss	(%rsp), %xmm0
0000000000015ba5	addq	$0x10, %rsp
0000000000015ba9	popq	%r15
0000000000015bab	popq	%r14
0000000000015bad	popq	%r13
0000000000015baf	popq	%r12
0000000000015bb1	popq	%r11
0000000000015bb3	popq	%r10
0000000000015bb5	popq	%r9
0000000000015bb7	popq	%r8
0000000000015bb9	popq	%rcx
0000000000015bba	popq	%rdx
0000000000015bbb	popq	%rsi
0000000000015bbc	popq	%rdi
0000000000015bbd	popq	%rbx
0000000000015bbe	popq	%rbp
0000000000015bbf	jmpq	*%rax
__ZN16GJAccountManager11sharedStateEv:
0000000000015bc1	pushq	%rbp
0000000000015bc2	movq	%rsp, %rbp
0000000000015bc5	pushq	%rbx
0000000000015bc6	pushq	%rdi
0000000000015bc7	pushq	%rsi
0000000000015bc8	pushq	%rdx
0000000000015bc9	pushq	%rcx
0000000000015bca	pushq	%r8
0000000000015bcc	pushq	%r9
0000000000015bce	pushq	%r10
0000000000015bd0	pushq	%r11
0000000000015bd2	pushq	%r12
0000000000015bd4	pushq	%r13
0000000000015bd6	pushq	%r14
0000000000015bd8	pushq	%r15
0000000000015bda	subq	$0x10, %rsp
0000000000015bde	movss	%xmm0, (%rsp)
0000000000015be3	subq	$0x10, %rsp
0000000000015be7	movss	%xmm1, (%rsp)
0000000000015bec	pushq	%rsi
0000000000015bed	pushq	%rdi
0000000000015bee	callq	__Z7getBasev ## getBase()
0000000000015bf3	addq	$0x85070, %rax
0000000000015bf9	popq	%rdi
0000000000015bfa	popq	%rsi
0000000000015bfb	movss	(%rsp), %xmm1
0000000000015c00	addq	$0x10, %rsp
0000000000015c04	movss	(%rsp), %xmm0
0000000000015c09	addq	$0x10, %rsp
0000000000015c0d	popq	%r15
0000000000015c0f	popq	%r14
0000000000015c11	popq	%r13
0000000000015c13	popq	%r12
0000000000015c15	popq	%r11
0000000000015c17	popq	%r10
0000000000015c19	popq	%r9
0000000000015c1b	popq	%r8
0000000000015c1d	popq	%rcx
0000000000015c1e	popq	%rdx
0000000000015c1f	popq	%rsi
0000000000015c20	popq	%rdi
0000000000015c21	popq	%rbx
0000000000015c22	popq	%rbp
0000000000015c23	jmpq	*%rax
__ZN16LevelEditorLayer14redoLastActionEv:
0000000000015c25	pushq	%rbp
0000000000015c26	movq	%rsp, %rbp
0000000000015c29	pushq	%rbx
0000000000015c2a	pushq	%rdi
0000000000015c2b	pushq	%rsi
0000000000015c2c	pushq	%rdx
0000000000015c2d	pushq	%rcx
0000000000015c2e	pushq	%r8
0000000000015c30	pushq	%r9
0000000000015c32	pushq	%r10
0000000000015c34	pushq	%r11
0000000000015c36	pushq	%r12
0000000000015c38	pushq	%r13
0000000000015c3a	pushq	%r14
0000000000015c3c	pushq	%r15
0000000000015c3e	subq	$0x10, %rsp
0000000000015c42	movss	%xmm0, (%rsp)
0000000000015c47	subq	$0x10, %rsp
0000000000015c4b	movss	%xmm1, (%rsp)
0000000000015c50	pushq	%rsi
0000000000015c51	pushq	%rdi
0000000000015c52	callq	__Z7getBasev ## getBase()
0000000000015c57	addq	$0x97750, %rax
0000000000015c5d	popq	%rdi
0000000000015c5e	popq	%rsi
0000000000015c5f	movss	(%rsp), %xmm1
0000000000015c64	addq	$0x10, %rsp
0000000000015c68	movss	(%rsp), %xmm0
0000000000015c6d	addq	$0x10, %rsp
0000000000015c71	popq	%r15
0000000000015c73	popq	%r14
0000000000015c75	popq	%r13
0000000000015c77	popq	%r12
0000000000015c79	popq	%r11
0000000000015c7b	popq	%r10
0000000000015c7d	popq	%r9
0000000000015c7f	popq	%r8
0000000000015c81	popq	%rcx
0000000000015c82	popq	%rdx
0000000000015c83	popq	%rsi
0000000000015c84	popq	%rdi
0000000000015c85	popq	%rbx
0000000000015c86	popq	%rbp
0000000000015c87	jmpq	*%rax
__ZN16LevelEditorLayer14undoLastActionEv:
0000000000015c89	pushq	%rbp
0000000000015c8a	movq	%rsp, %rbp
0000000000015c8d	pushq	%rbx
0000000000015c8e	pushq	%rdi
0000000000015c8f	pushq	%rsi
0000000000015c90	pushq	%rdx
0000000000015c91	pushq	%rcx
0000000000015c92	pushq	%r8
0000000000015c94	pushq	%r9
0000000000015c96	pushq	%r10
0000000000015c98	pushq	%r11
0000000000015c9a	pushq	%r12
0000000000015c9c	pushq	%r13
0000000000015c9e	pushq	%r14
0000000000015ca0	pushq	%r15
0000000000015ca2	subq	$0x10, %rsp
0000000000015ca6	movss	%xmm0, (%rsp)
0000000000015cab	subq	$0x10, %rsp
0000000000015caf	movss	%xmm1, (%rsp)
0000000000015cb4	pushq	%rsi
0000000000015cb5	pushq	%rdi
0000000000015cb6	callq	__Z7getBasev ## getBase()
0000000000015cbb	addq	$0x97770, %rax
0000000000015cc1	popq	%rdi
0000000000015cc2	popq	%rsi
0000000000015cc3	movss	(%rsp), %xmm1
0000000000015cc8	addq	$0x10, %rsp
0000000000015ccc	movss	(%rsp), %xmm0
0000000000015cd1	addq	$0x10, %rsp
0000000000015cd5	popq	%r15
0000000000015cd7	popq	%r14
0000000000015cd9	popq	%r13
0000000000015cdb	popq	%r12
0000000000015cdd	popq	%r11
0000000000015cdf	popq	%r10
0000000000015ce1	popq	%r9
0000000000015ce3	popq	%r8
0000000000015ce5	popq	%rcx
0000000000015ce6	popq	%rdx
0000000000015ce7	popq	%rsi
0000000000015ce8	popq	%rdi
0000000000015ce9	popq	%rbx
0000000000015cea	popq	%rbp
0000000000015ceb	jmpq	*%rax
__ZN16LevelEditorLayer16removeAllObjectsEv:
0000000000015ced	pushq	%rbp
0000000000015cee	movq	%rsp, %rbp
0000000000015cf1	pushq	%rbx
0000000000015cf2	pushq	%rdi
0000000000015cf3	pushq	%rsi
0000000000015cf4	pushq	%rdx
0000000000015cf5	pushq	%rcx
0000000000015cf6	pushq	%r8
0000000000015cf8	pushq	%r9
0000000000015cfa	pushq	%r10
0000000000015cfc	pushq	%r11
0000000000015cfe	pushq	%r12
0000000000015d00	pushq	%r13
0000000000015d02	pushq	%r14
0000000000015d04	pushq	%r15
0000000000015d06	subq	$0x10, %rsp
0000000000015d0a	movss	%xmm0, (%rsp)
0000000000015d0f	subq	$0x10, %rsp
0000000000015d13	movss	%xmm1, (%rsp)
0000000000015d18	pushq	%rsi
0000000000015d19	pushq	%rdi
0000000000015d1a	callq	__Z7getBasev ## getBase()
0000000000015d1f	addq	$0x93d80, %rax
0000000000015d25	popq	%rdi
0000000000015d26	popq	%rsi
0000000000015d27	movss	(%rsp), %xmm1
0000000000015d2c	addq	$0x10, %rsp
0000000000015d30	movss	(%rsp), %xmm0
0000000000015d35	addq	$0x10, %rsp
0000000000015d39	popq	%r15
0000000000015d3b	popq	%r14
0000000000015d3d	popq	%r13
0000000000015d3f	popq	%r12
0000000000015d41	popq	%r11
0000000000015d43	popq	%r10
0000000000015d45	popq	%r9
0000000000015d47	popq	%r8
0000000000015d49	popq	%rcx
0000000000015d4a	popq	%rdx
0000000000015d4b	popq	%rsi
0000000000015d4c	popq	%rdi
0000000000015d4d	popq	%rbx
0000000000015d4e	popq	%rbp
0000000000015d4f	jmpq	*%rax
__ZN16LevelEditorLayer23createObjectsFromStringESsb:
0000000000015d51	pushq	%rbp
0000000000015d52	movq	%rsp, %rbp
0000000000015d55	pushq	%rbx
0000000000015d56	pushq	%rdi
0000000000015d57	pushq	%rsi
0000000000015d58	pushq	%rdx
0000000000015d59	pushq	%rcx
0000000000015d5a	pushq	%r8
0000000000015d5c	pushq	%r9
0000000000015d5e	pushq	%r10
0000000000015d60	pushq	%r11
0000000000015d62	pushq	%r12
0000000000015d64	pushq	%r13
0000000000015d66	pushq	%r14
0000000000015d68	pushq	%r15
0000000000015d6a	subq	$0x10, %rsp
0000000000015d6e	movss	%xmm0, (%rsp)
0000000000015d73	subq	$0x10, %rsp
0000000000015d77	movss	%xmm1, (%rsp)
0000000000015d7c	pushq	%rsi
0000000000015d7d	pushq	%rdi
0000000000015d7e	callq	__Z7getBasev ## getBase()
0000000000015d83	addq	$0x94730, %rax
0000000000015d89	popq	%rdi
0000000000015d8a	popq	%rsi
0000000000015d8b	movss	(%rsp), %xmm1
0000000000015d90	addq	$0x10, %rsp
0000000000015d94	movss	(%rsp), %xmm0
0000000000015d99	addq	$0x10, %rsp
0000000000015d9d	popq	%r15
0000000000015d9f	popq	%r14
0000000000015da1	popq	%r13
0000000000015da3	popq	%r12
0000000000015da5	popq	%r11
0000000000015da7	popq	%r10
0000000000015da9	popq	%r9
0000000000015dab	popq	%r8
0000000000015dad	popq	%rcx
0000000000015dae	popq	%rdx
0000000000015daf	popq	%rsi
0000000000015db0	popq	%rdi
0000000000015db1	popq	%rbx
0000000000015db2	popq	%rbp
0000000000015db3	jmpq	*%rax
__ZN17CCMenuItemToggler11setSizeMultEf:
0000000000015db5	pushq	%rbp
0000000000015db6	movq	%rsp, %rbp
0000000000015db9	pushq	%rbx
0000000000015dba	pushq	%rdi
0000000000015dbb	pushq	%rsi
0000000000015dbc	pushq	%rdx
0000000000015dbd	pushq	%rcx
0000000000015dbe	pushq	%r8
0000000000015dc0	pushq	%r9
0000000000015dc2	pushq	%r10
0000000000015dc4	pushq	%r11
0000000000015dc6	pushq	%r12
0000000000015dc8	pushq	%r13
0000000000015dca	pushq	%r14
0000000000015dcc	pushq	%r15
0000000000015dce	subq	$0x10, %rsp
0000000000015dd2	movss	%xmm0, (%rsp)
0000000000015dd7	subq	$0x10, %rsp
0000000000015ddb	movss	%xmm1, (%rsp)
0000000000015de0	pushq	%rsi
0000000000015de1	pushq	%rdi
0000000000015de2	callq	__Z7getBasev ## getBase()
0000000000015de7	addq	$0x38a40, %rax
0000000000015ded	popq	%rdi
0000000000015dee	popq	%rsi
0000000000015def	movss	(%rsp), %xmm1
0000000000015df4	addq	$0x10, %rsp
0000000000015df8	movss	(%rsp), %xmm0
0000000000015dfd	addq	$0x10, %rsp
0000000000015e01	popq	%r15
0000000000015e03	popq	%r14
0000000000015e05	popq	%r13
0000000000015e07	popq	%r12
0000000000015e09	popq	%r11
0000000000015e0b	popq	%r10
0000000000015e0d	popq	%r9
0000000000015e0f	popq	%r8
0000000000015e11	popq	%rcx
0000000000015e12	popq	%rdx
0000000000015e13	popq	%rsi
0000000000015e14	popq	%rdi
0000000000015e15	popq	%rbx
0000000000015e16	popq	%rbp
0000000000015e17	jmpq	*%rax
__ZN17CCMenuItemToggler6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E:
0000000000015e19	pushq	%rbp
0000000000015e1a	movq	%rsp, %rbp
0000000000015e1d	pushq	%rbx
0000000000015e1e	pushq	%rdi
0000000000015e1f	pushq	%rsi
0000000000015e20	pushq	%rdx
0000000000015e21	pushq	%rcx
0000000000015e22	pushq	%r8
0000000000015e24	pushq	%r9
0000000000015e26	pushq	%r10
0000000000015e28	pushq	%r11
0000000000015e2a	pushq	%r12
0000000000015e2c	pushq	%r13
0000000000015e2e	pushq	%r14
0000000000015e30	pushq	%r15
0000000000015e32	subq	$0x10, %rsp
0000000000015e36	movss	%xmm0, (%rsp)
0000000000015e3b	subq	$0x10, %rsp
0000000000015e3f	movss	%xmm1, (%rsp)
0000000000015e44	pushq	%rsi
0000000000015e45	pushq	%rdi
0000000000015e46	callq	__Z7getBasev ## getBase()
0000000000015e4b	addq	$0x38400, %rax
0000000000015e51	popq	%rdi
0000000000015e52	popq	%rsi
0000000000015e53	movss	(%rsp), %xmm1
0000000000015e58	addq	$0x10, %rsp
0000000000015e5c	movss	(%rsp), %xmm0
0000000000015e61	addq	$0x10, %rsp
0000000000015e65	popq	%r15
0000000000015e67	popq	%r14
0000000000015e69	popq	%r13
0000000000015e6b	popq	%r12
0000000000015e6d	popq	%r11
0000000000015e6f	popq	%r10
0000000000015e71	popq	%r9
0000000000015e73	popq	%r8
0000000000015e75	popq	%rcx
0000000000015e76	popq	%rdx
0000000000015e77	popq	%rsi
0000000000015e78	popq	%rdi
0000000000015e79	popq	%rbx
0000000000015e7a	popq	%rbp
0000000000015e7b	jmpq	*%rax
__ZN17LevelBrowserLayer5sceneEP14GJSearchObject:
0000000000015e7d	pushq	%rbp
0000000000015e7e	movq	%rsp, %rbp
0000000000015e81	pushq	%rbx
0000000000015e82	pushq	%rdi
0000000000015e83	pushq	%rsi
0000000000015e84	pushq	%rdx
0000000000015e85	pushq	%rcx
0000000000015e86	pushq	%r8
0000000000015e88	pushq	%r9
0000000000015e8a	pushq	%r10
0000000000015e8c	pushq	%r11
0000000000015e8e	pushq	%r12
0000000000015e90	pushq	%r13
0000000000015e92	pushq	%r14
0000000000015e94	pushq	%r15
0000000000015e96	subq	$0x10, %rsp
0000000000015e9a	movss	%xmm0, (%rsp)
0000000000015e9f	subq	$0x10, %rsp
0000000000015ea3	movss	%xmm1, (%rsp)
0000000000015ea8	pushq	%rsi
0000000000015ea9	pushq	%rdi
0000000000015eaa	callq	__Z7getBasev ## getBase()
0000000000015eaf	addq	$0x2511d0, %rax
0000000000015eb5	popq	%rdi
0000000000015eb6	popq	%rsi
0000000000015eb7	movss	(%rsp), %xmm1
0000000000015ebc	addq	$0x10, %rsp
0000000000015ec0	movss	(%rsp), %xmm0
0000000000015ec5	addq	$0x10, %rsp
0000000000015ec9	popq	%r15
0000000000015ecb	popq	%r14
0000000000015ecd	popq	%r13
0000000000015ecf	popq	%r12
0000000000015ed1	popq	%r11
0000000000015ed3	popq	%r10
0000000000015ed5	popq	%r9
0000000000015ed7	popq	%r8
0000000000015ed9	popq	%rcx
0000000000015eda	popq	%rdx
0000000000015edb	popq	%rsi
0000000000015edc	popq	%rdi
0000000000015edd	popq	%rbx
0000000000015ede	popq	%rbp
0000000000015edf	jmpq	*%rax
__ZN21CCMenuItemSpriteExtra11setSizeMultEf:
0000000000015ee1	pushq	%rbp
0000000000015ee2	movq	%rsp, %rbp
0000000000015ee5	pushq	%rbx
0000000000015ee6	pushq	%rdi
0000000000015ee7	pushq	%rsi
0000000000015ee8	pushq	%rdx
0000000000015ee9	pushq	%rcx
0000000000015eea	pushq	%r8
0000000000015eec	pushq	%r9
0000000000015eee	pushq	%r10
0000000000015ef0	pushq	%r11
0000000000015ef2	pushq	%r12
0000000000015ef4	pushq	%r13
0000000000015ef6	pushq	%r14
0000000000015ef8	pushq	%r15
0000000000015efa	subq	$0x10, %rsp
0000000000015efe	movss	%xmm0, (%rsp)
0000000000015f03	subq	$0x10, %rsp
0000000000015f07	movss	%xmm1, (%rsp)
0000000000015f0c	pushq	%rsi
0000000000015f0d	pushq	%rdi
0000000000015f0e	callq	__Z7getBasev ## getBase()
0000000000015f13	addq	$0x1255e0, %rax
0000000000015f19	popq	%rdi
0000000000015f1a	popq	%rsi
0000000000015f1b	movss	(%rsp), %xmm1
0000000000015f20	addq	$0x10, %rsp
0000000000015f24	movss	(%rsp), %xmm0
0000000000015f29	addq	$0x10, %rsp
0000000000015f2d	popq	%r15
0000000000015f2f	popq	%r14
0000000000015f31	popq	%r13
0000000000015f33	popq	%r12
0000000000015f35	popq	%r11
0000000000015f37	popq	%r10
0000000000015f39	popq	%r9
0000000000015f3b	popq	%r8
0000000000015f3d	popq	%rcx
0000000000015f3e	popq	%rdx
0000000000015f3f	popq	%rsi
0000000000015f40	popq	%rdi
0000000000015f41	popq	%rbx
0000000000015f42	popq	%rbp
0000000000015f43	jmpq	*%rax
__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E:
0000000000015f45	pushq	%rbp
0000000000015f46	movq	%rsp, %rbp
0000000000015f49	pushq	%rbx
0000000000015f4a	pushq	%rdi
0000000000015f4b	pushq	%rsi
0000000000015f4c	pushq	%rdx
0000000000015f4d	pushq	%rcx
0000000000015f4e	pushq	%r8
0000000000015f50	pushq	%r9
0000000000015f52	pushq	%r10
0000000000015f54	pushq	%r11
0000000000015f56	pushq	%r12
0000000000015f58	pushq	%r13
0000000000015f5a	pushq	%r14
0000000000015f5c	pushq	%r15
0000000000015f5e	subq	$0x10, %rsp
0000000000015f62	movss	%xmm0, (%rsp)
0000000000015f67	subq	$0x10, %rsp
0000000000015f6b	movss	%xmm1, (%rsp)
0000000000015f70	pushq	%rsi
0000000000015f71	pushq	%rdi
0000000000015f72	callq	__Z7getBasev ## getBase()
0000000000015f77	addq	$0x1253c0, %rax
0000000000015f7d	popq	%rdi
0000000000015f7e	popq	%rsi
0000000000015f7f	movss	(%rsp), %xmm1
0000000000015f84	addq	$0x10, %rsp
0000000000015f88	movss	(%rsp), %xmm0
0000000000015f8d	addq	$0x10, %rsp
0000000000015f91	popq	%r15
0000000000015f93	popq	%r14
0000000000015f95	popq	%r13
0000000000015f97	popq	%r12
0000000000015f99	popq	%r11
0000000000015f9b	popq	%r10
0000000000015f9d	popq	%r9
0000000000015f9f	popq	%r8
0000000000015fa1	popq	%rcx
0000000000015fa2	popq	%rdx
0000000000015fa3	popq	%rsi
0000000000015fa4	popq	%rdi
0000000000015fa5	popq	%rbx
0000000000015fa6	popq	%rbp
0000000000015fa7	jmpq	*%rax
__ZN21MoreVideoOptionsLayer4initEv:
0000000000015fa9	pushq	%rbp
0000000000015faa	movq	%rsp, %rbp
0000000000015fad	pushq	%rbx
0000000000015fae	pushq	%rdi
0000000000015faf	pushq	%rsi
0000000000015fb0	pushq	%rdx
0000000000015fb1	pushq	%rcx
0000000000015fb2	pushq	%r8
0000000000015fb4	pushq	%r9
0000000000015fb6	pushq	%r10
0000000000015fb8	pushq	%r11
0000000000015fba	pushq	%r12
0000000000015fbc	pushq	%r13
0000000000015fbe	pushq	%r14
0000000000015fc0	pushq	%r15
0000000000015fc2	subq	$0x10, %rsp
0000000000015fc6	movss	%xmm0, (%rsp)
0000000000015fcb	subq	$0x10, %rsp
0000000000015fcf	movss	%xmm1, (%rsp)
0000000000015fd4	pushq	%rsi
0000000000015fd5	pushq	%rdi
0000000000015fd6	callq	__Z7getBasev ## getBase()
0000000000015fdb	addq	$0x444150, %rax
0000000000015fe1	popq	%rdi
0000000000015fe2	popq	%rsi
0000000000015fe3	movss	(%rsp), %xmm1
0000000000015fe8	addq	$0x10, %rsp
0000000000015fec	movss	(%rsp), %xmm0
0000000000015ff1	addq	$0x10, %rsp
0000000000015ff5	popq	%r15
0000000000015ff7	popq	%r14
0000000000015ff9	popq	%r13
0000000000015ffb	popq	%r12
0000000000015ffd	popq	%r11
0000000000015fff	popq	%r10
0000000000016001	popq	%r9
0000000000016003	popq	%r8
0000000000016005	popq	%rcx
0000000000016006	popq	%rdx
0000000000016007	popq	%rsi
0000000000016008	popq	%rdi
0000000000016009	popq	%rbx
000000000001600a	popq	%rbp
000000000001600b	jmpq	*%rax
__ZN21MoreVideoOptionsLayer6createEv:
000000000001600d	pushq	%rbp
000000000001600e	movq	%rsp, %rbp
0000000000016011	pushq	%rbx
0000000000016012	pushq	%rdi
0000000000016013	pushq	%rsi
0000000000016014	pushq	%rdx
0000000000016015	pushq	%rcx
0000000000016016	pushq	%r8
0000000000016018	pushq	%r9
000000000001601a	pushq	%r10
000000000001601c	pushq	%r11
000000000001601e	pushq	%r12
0000000000016020	pushq	%r13
0000000000016022	pushq	%r14
0000000000016024	pushq	%r15
0000000000016026	subq	$0x10, %rsp
000000000001602a	movss	%xmm0, (%rsp)
000000000001602f	subq	$0x10, %rsp
0000000000016033	movss	%xmm1, (%rsp)
0000000000016038	pushq	%rsi
0000000000016039	pushq	%rdi
000000000001603a	callq	__Z7getBasev ## getBase()
000000000001603f	addq	$0x443c10, %rax
0000000000016045	popq	%rdi
0000000000016046	popq	%rsi
0000000000016047	movss	(%rsp), %xmm1
000000000001604c	addq	$0x10, %rsp
0000000000016050	movss	(%rsp), %xmm0
0000000000016055	addq	$0x10, %rsp
0000000000016059	popq	%r15
000000000001605b	popq	%r14
000000000001605d	popq	%r13
000000000001605f	popq	%r12
0000000000016061	popq	%r11
0000000000016063	popq	%r10
0000000000016065	popq	%r9
0000000000016067	popq	%r8
0000000000016069	popq	%rcx
000000000001606a	popq	%rdx
000000000001606b	popq	%rsi
000000000001606c	popq	%rdi
000000000001606d	popq	%rbx
000000000001606e	popq	%rbp
000000000001606f	jmpq	*%rax
__ZN7cocos2d10CCDirector10getWinSizeEv:
0000000000016071	pushq	%rbp
0000000000016072	movq	%rsp, %rbp
0000000000016075	pushq	%rbx
0000000000016076	pushq	%rdi
0000000000016077	pushq	%rsi
0000000000016078	pushq	%rdx
0000000000016079	pushq	%rcx
000000000001607a	pushq	%r8
000000000001607c	pushq	%r9
000000000001607e	pushq	%r10
0000000000016080	pushq	%r11
0000000000016082	pushq	%r12
0000000000016084	pushq	%r13
0000000000016086	pushq	%r14
0000000000016088	pushq	%r15
000000000001608a	subq	$0x10, %rsp
000000000001608e	movss	%xmm0, (%rsp)
0000000000016093	subq	$0x10, %rsp
0000000000016097	movss	%xmm1, (%rsp)
000000000001609c	pushq	%rsi
000000000001609d	pushq	%rdi
000000000001609e	callq	__Z7getBasev ## getBase()
00000000000160a3	addq	$0x24a0f0, %rax
00000000000160a9	popq	%rdi
00000000000160aa	popq	%rsi
00000000000160ab	movss	(%rsp), %xmm1
00000000000160b0	addq	$0x10, %rsp
00000000000160b4	movss	(%rsp), %xmm0
00000000000160b9	addq	$0x10, %rsp
00000000000160bd	popq	%r15
00000000000160bf	popq	%r14
00000000000160c1	popq	%r13
00000000000160c3	popq	%r12
00000000000160c5	popq	%r11
00000000000160c7	popq	%r10
00000000000160c9	popq	%r9
00000000000160cb	popq	%r8
00000000000160cd	popq	%rcx
00000000000160ce	popq	%rdx
00000000000160cf	popq	%rsi
00000000000160d0	popq	%rdi
00000000000160d1	popq	%rbx
00000000000160d2	popq	%rbp
00000000000160d3	jmpq	*%rax
__ZN7cocos2d10CCDirector12getScreenTopEv:
00000000000160d5	pushq	%rbp
00000000000160d6	movq	%rsp, %rbp
00000000000160d9	pushq	%rbx
00000000000160da	pushq	%rdi
00000000000160db	pushq	%rsi
00000000000160dc	pushq	%rdx
00000000000160dd	pushq	%rcx
00000000000160de	pushq	%r8
00000000000160e0	pushq	%r9
00000000000160e2	pushq	%r10
00000000000160e4	pushq	%r11
00000000000160e6	pushq	%r12
00000000000160e8	pushq	%r13
00000000000160ea	pushq	%r14
00000000000160ec	pushq	%r15
00000000000160ee	subq	$0x10, %rsp
00000000000160f2	movss	%xmm0, (%rsp)
00000000000160f7	subq	$0x10, %rsp
00000000000160fb	movss	%xmm1, (%rsp)
0000000000016100	pushq	%rsi
0000000000016101	pushq	%rdi
0000000000016102	callq	__Z7getBasev ## getBase()
0000000000016107	addq	$0x24b200, %rax
000000000001610d	popq	%rdi
000000000001610e	popq	%rsi
000000000001610f	movss	(%rsp), %xmm1
0000000000016114	addq	$0x10, %rsp
0000000000016118	movss	(%rsp), %xmm0
000000000001611d	addq	$0x10, %rsp
0000000000016121	popq	%r15
0000000000016123	popq	%r14
0000000000016125	popq	%r13
0000000000016127	popq	%r12
0000000000016129	popq	%r11
000000000001612b	popq	%r10
000000000001612d	popq	%r9
000000000001612f	popq	%r8
0000000000016131	popq	%rcx
0000000000016132	popq	%rdx
0000000000016133	popq	%rsi
0000000000016134	popq	%rdi
0000000000016135	popq	%rbx
0000000000016136	popq	%rbp
0000000000016137	jmpq	*%rax
__ZN7cocos2d10CCDirector13getScreenLeftEv:
0000000000016139	pushq	%rbp
000000000001613a	movq	%rsp, %rbp
000000000001613d	pushq	%rbx
000000000001613e	pushq	%rdi
000000000001613f	pushq	%rsi
0000000000016140	pushq	%rdx
0000000000016141	pushq	%rcx
0000000000016142	pushq	%r8
0000000000016144	pushq	%r9
0000000000016146	pushq	%r10
0000000000016148	pushq	%r11
000000000001614a	pushq	%r12
000000000001614c	pushq	%r13
000000000001614e	pushq	%r14
0000000000016150	pushq	%r15
0000000000016152	subq	$0x10, %rsp
0000000000016156	movss	%xmm0, (%rsp)
000000000001615b	subq	$0x10, %rsp
000000000001615f	movss	%xmm1, (%rsp)
0000000000016164	pushq	%rsi
0000000000016165	pushq	%rdi
0000000000016166	callq	__Z7getBasev ## getBase()
000000000001616b	addq	$0x24b220, %rax
0000000000016171	popq	%rdi
0000000000016172	popq	%rsi
0000000000016173	movss	(%rsp), %xmm1
0000000000016178	addq	$0x10, %rsp
000000000001617c	movss	(%rsp), %xmm0
0000000000016181	addq	$0x10, %rsp
0000000000016185	popq	%r15
0000000000016187	popq	%r14
0000000000016189	popq	%r13
000000000001618b	popq	%r12
000000000001618d	popq	%r11
000000000001618f	popq	%r10
0000000000016191	popq	%r9
0000000000016193	popq	%r8
0000000000016195	popq	%rcx
0000000000016196	popq	%rdx
0000000000016197	popq	%rsi
0000000000016198	popq	%rdi
0000000000016199	popq	%rbx
000000000001619a	popq	%rbp
000000000001619b	jmpq	*%rax
__ZN7cocos2d10CCDirector14getScreenRightEv:
000000000001619d	pushq	%rbp
000000000001619e	movq	%rsp, %rbp
00000000000161a1	pushq	%rbx
00000000000161a2	pushq	%rdi
00000000000161a3	pushq	%rsi
00000000000161a4	pushq	%rdx
00000000000161a5	pushq	%rcx
00000000000161a6	pushq	%r8
00000000000161a8	pushq	%r9
00000000000161aa	pushq	%r10
00000000000161ac	pushq	%r11
00000000000161ae	pushq	%r12
00000000000161b0	pushq	%r13
00000000000161b2	pushq	%r14
00000000000161b4	pushq	%r15
00000000000161b6	subq	$0x10, %rsp
00000000000161ba	movss	%xmm0, (%rsp)
00000000000161bf	subq	$0x10, %rsp
00000000000161c3	movss	%xmm1, (%rsp)
00000000000161c8	pushq	%rsi
00000000000161c9	pushq	%rdi
00000000000161ca	callq	__Z7getBasev ## getBase()
00000000000161cf	addq	$0x24b230, %rax
00000000000161d5	popq	%rdi
00000000000161d6	popq	%rsi
00000000000161d7	movss	(%rsp), %xmm1
00000000000161dc	addq	$0x10, %rsp
00000000000161e0	movss	(%rsp), %xmm0
00000000000161e5	addq	$0x10, %rsp
00000000000161e9	popq	%r15
00000000000161eb	popq	%r14
00000000000161ed	popq	%r13
00000000000161ef	popq	%r12
00000000000161f1	popq	%r11
00000000000161f3	popq	%r10
00000000000161f5	popq	%r9
00000000000161f7	popq	%r8
00000000000161f9	popq	%rcx
00000000000161fa	popq	%rdx
00000000000161fb	popq	%rsi
00000000000161fc	popq	%rdi
00000000000161fd	popq	%rbx
00000000000161fe	popq	%rbp
00000000000161ff	jmpq	*%rax
__ZN7cocos2d10CCDirector14sharedDirectorEv:
0000000000016201	pushq	%rbp
0000000000016202	movq	%rsp, %rbp
0000000000016205	pushq	%rbx
0000000000016206	pushq	%rdi
0000000000016207	pushq	%rsi
0000000000016208	pushq	%rdx
0000000000016209	pushq	%rcx
000000000001620a	pushq	%r8
000000000001620c	pushq	%r9
000000000001620e	pushq	%r10
0000000000016210	pushq	%r11
0000000000016212	pushq	%r12
0000000000016214	pushq	%r13
0000000000016216	pushq	%r14
0000000000016218	pushq	%r15
000000000001621a	subq	$0x10, %rsp
000000000001621e	movss	%xmm0, (%rsp)
0000000000016223	subq	$0x10, %rsp
0000000000016227	movss	%xmm1, (%rsp)
000000000001622c	pushq	%rsi
000000000001622d	pushq	%rdi
000000000001622e	callq	__Z7getBasev ## getBase()
0000000000016233	addq	$0x248cb0, %rax
0000000000016239	popq	%rdi
000000000001623a	popq	%rsi
000000000001623b	movss	(%rsp), %xmm1
0000000000016240	addq	$0x10, %rsp
0000000000016244	movss	(%rsp), %xmm0
0000000000016249	addq	$0x10, %rsp
000000000001624d	popq	%r15
000000000001624f	popq	%r14
0000000000016251	popq	%r13
0000000000016253	popq	%r12
0000000000016255	popq	%r11
0000000000016257	popq	%r10
0000000000016259	popq	%r9
000000000001625b	popq	%r8
000000000001625d	popq	%rcx
000000000001625e	popq	%rdx
000000000001625f	popq	%rsi
0000000000016260	popq	%rdi
0000000000016261	popq	%rbx
0000000000016262	popq	%rbp
0000000000016263	jmpq	*%rax
__ZN7cocos2d10CCDirector15getScreenBottomEv:
0000000000016265	pushq	%rbp
0000000000016266	movq	%rsp, %rbp
0000000000016269	pushq	%rbx
000000000001626a	pushq	%rdi
000000000001626b	pushq	%rsi
000000000001626c	pushq	%rdx
000000000001626d	pushq	%rcx
000000000001626e	pushq	%r8
0000000000016270	pushq	%r9
0000000000016272	pushq	%r10
0000000000016274	pushq	%r11
0000000000016276	pushq	%r12
0000000000016278	pushq	%r13
000000000001627a	pushq	%r14
000000000001627c	pushq	%r15
000000000001627e	subq	$0x10, %rsp
0000000000016282	movss	%xmm0, (%rsp)
0000000000016287	subq	$0x10, %rsp
000000000001628b	movss	%xmm1, (%rsp)
0000000000016290	pushq	%rsi
0000000000016291	pushq	%rdi
0000000000016292	callq	__Z7getBasev ## getBase()
0000000000016297	addq	$0x24b210, %rax
000000000001629d	popq	%rdi
000000000001629e	popq	%rsi
000000000001629f	movss	(%rsp), %xmm1
00000000000162a4	addq	$0x10, %rsp
00000000000162a8	movss	(%rsp), %xmm0
00000000000162ad	addq	$0x10, %rsp
00000000000162b1	popq	%r15
00000000000162b3	popq	%r14
00000000000162b5	popq	%r13
00000000000162b7	popq	%r12
00000000000162b9	popq	%r11
00000000000162bb	popq	%r10
00000000000162bd	popq	%r9
00000000000162bf	popq	%r8
00000000000162c1	popq	%rcx
00000000000162c2	popq	%rdx
00000000000162c3	popq	%rsi
00000000000162c4	popq	%rdi
00000000000162c5	popq	%rbx
00000000000162c6	popq	%rbp
00000000000162c7	jmpq	*%rax
__ZN7cocos2d10CCDirector18getTouchDispatcherEPv:
00000000000162c9	pushq	%rbp
00000000000162ca	movq	%rsp, %rbp
00000000000162cd	pushq	%rbx
00000000000162ce	pushq	%rdi
00000000000162cf	pushq	%rsi
00000000000162d0	pushq	%rdx
00000000000162d1	pushq	%rcx
00000000000162d2	pushq	%r8
00000000000162d4	pushq	%r9
00000000000162d6	pushq	%r10
00000000000162d8	pushq	%r11
00000000000162da	pushq	%r12
00000000000162dc	pushq	%r13
00000000000162de	pushq	%r14
00000000000162e0	pushq	%r15
00000000000162e2	subq	$0x10, %rsp
00000000000162e6	movss	%xmm0, (%rsp)
00000000000162eb	subq	$0x10, %rsp
00000000000162ef	movss	%xmm1, (%rsp)
00000000000162f4	pushq	%rsi
00000000000162f5	pushq	%rdi
00000000000162f6	callq	__Z7getBasev ## getBase()
00000000000162fb	addq	$0x24afa0, %rax
0000000000016301	popq	%rdi
0000000000016302	popq	%rsi
0000000000016303	movss	(%rsp), %xmm1
0000000000016308	addq	$0x10, %rsp
000000000001630c	movss	(%rsp), %xmm0
0000000000016311	addq	$0x10, %rsp
0000000000016315	popq	%r15
0000000000016317	popq	%r14
0000000000016319	popq	%r13
000000000001631b	popq	%r12
000000000001631d	popq	%r11
000000000001631f	popq	%r10
0000000000016321	popq	%r9
0000000000016323	popq	%r8
0000000000016325	popq	%rcx
0000000000016326	popq	%rdx
0000000000016327	popq	%rsi
0000000000016328	popq	%rdi
0000000000016329	popq	%rbx
000000000001632a	popq	%rbp
000000000001632b	jmpq	*%rax
__ZN7cocos2d10CCDirector9pushSceneEPNS_7CCSceneE:
000000000001632d	pushq	%rbp
000000000001632e	movq	%rsp, %rbp
0000000000016331	pushq	%rbx
0000000000016332	pushq	%rdi
0000000000016333	pushq	%rsi
0000000000016334	pushq	%rdx
0000000000016335	pushq	%rcx
0000000000016336	pushq	%r8
0000000000016338	pushq	%r9
000000000001633a	pushq	%r10
000000000001633c	pushq	%r11
000000000001633e	pushq	%r12
0000000000016340	pushq	%r13
0000000000016342	pushq	%r14
0000000000016344	pushq	%r15
0000000000016346	subq	$0x10, %rsp
000000000001634a	movss	%xmm0, (%rsp)
000000000001634f	subq	$0x10, %rsp
0000000000016353	movss	%xmm1, (%rsp)
0000000000016358	pushq	%rsi
0000000000016359	pushq	%rdi
000000000001635a	callq	__Z7getBasev ## getBase()
000000000001635f	addq	$0x24a620, %rax
0000000000016365	popq	%rdi
0000000000016366	popq	%rsi
0000000000016367	movss	(%rsp), %xmm1
000000000001636c	addq	$0x10, %rsp
0000000000016370	movss	(%rsp), %xmm0
0000000000016375	addq	$0x10, %rsp
0000000000016379	popq	%r15
000000000001637b	popq	%r14
000000000001637d	popq	%r13
000000000001637f	popq	%r12
0000000000016381	popq	%r11
0000000000016383	popq	%r10
0000000000016385	popq	%r9
0000000000016387	popq	%r8
0000000000016389	popq	%rcx
000000000001638a	popq	%rdx
000000000001638b	popq	%rsi
000000000001638c	popq	%rdi
000000000001638d	popq	%rbx
000000000001638e	popq	%rbp
000000000001638f	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA10getOpacityEv:
0000000000016391	pushq	%rbp
0000000000016392	movq	%rsp, %rbp
0000000000016395	pushq	%rbx
0000000000016396	pushq	%rdi
0000000000016397	pushq	%rsi
0000000000016398	pushq	%rdx
0000000000016399	pushq	%rcx
000000000001639a	pushq	%r8
000000000001639c	pushq	%r9
000000000001639e	pushq	%r10
00000000000163a0	pushq	%r11
00000000000163a2	pushq	%r12
00000000000163a4	pushq	%r13
00000000000163a6	pushq	%r14
00000000000163a8	pushq	%r15
00000000000163aa	subq	$0x10, %rsp
00000000000163ae	movss	%xmm0, (%rsp)
00000000000163b3	subq	$0x10, %rsp
00000000000163b7	movss	%xmm1, (%rsp)
00000000000163bc	pushq	%rsi
00000000000163bd	pushq	%rdi
00000000000163be	callq	__Z7getBasev ## getBase()
00000000000163c3	addq	$0x273be0, %rax
00000000000163c9	popq	%rdi
00000000000163ca	popq	%rsi
00000000000163cb	movss	(%rsp), %xmm1
00000000000163d0	addq	$0x10, %rsp
00000000000163d4	movss	(%rsp), %xmm0
00000000000163d9	addq	$0x10, %rsp
00000000000163dd	popq	%r15
00000000000163df	popq	%r14
00000000000163e1	popq	%r13
00000000000163e3	popq	%r12
00000000000163e5	popq	%r11
00000000000163e7	popq	%r10
00000000000163e9	popq	%r9
00000000000163eb	popq	%r8
00000000000163ed	popq	%rcx
00000000000163ee	popq	%rdx
00000000000163ef	popq	%rsi
00000000000163f0	popq	%rdi
00000000000163f1	popq	%rbx
00000000000163f2	popq	%rbp
00000000000163f3	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA17getDisplayedColorEv:
00000000000163f5	pushq	%rbp
00000000000163f6	movq	%rsp, %rbp
00000000000163f9	pushq	%rbx
00000000000163fa	pushq	%rdi
00000000000163fb	pushq	%rsi
00000000000163fc	pushq	%rdx
00000000000163fd	pushq	%rcx
00000000000163fe	pushq	%r8
0000000000016400	pushq	%r9
0000000000016402	pushq	%r10
0000000000016404	pushq	%r11
0000000000016406	pushq	%r12
0000000000016408	pushq	%r13
000000000001640a	pushq	%r14
000000000001640c	pushq	%r15
000000000001640e	subq	$0x10, %rsp
0000000000016412	movss	%xmm0, (%rsp)
0000000000016417	subq	$0x10, %rsp
000000000001641b	movss	%xmm1, (%rsp)
0000000000016420	pushq	%rsi
0000000000016421	pushq	%rdi
0000000000016422	callq	__Z7getBasev ## getBase()
0000000000016427	addq	$0x273d80, %rax
000000000001642d	popq	%rdi
000000000001642e	popq	%rsi
000000000001642f	movss	(%rsp), %xmm1
0000000000016434	addq	$0x10, %rsp
0000000000016438	movss	(%rsp), %xmm0
000000000001643d	addq	$0x10, %rsp
0000000000016441	popq	%r15
0000000000016443	popq	%r14
0000000000016445	popq	%r13
0000000000016447	popq	%r12
0000000000016449	popq	%r11
000000000001644b	popq	%r10
000000000001644d	popq	%r9
000000000001644f	popq	%r8
0000000000016451	popq	%rcx
0000000000016452	popq	%rdx
0000000000016453	popq	%rsi
0000000000016454	popq	%rdi
0000000000016455	popq	%rbx
0000000000016456	popq	%rbp
0000000000016457	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA18isOpacityModifyRGBEv:
0000000000016459	pushq	%rbp
000000000001645a	movq	%rsp, %rbp
000000000001645d	pushq	%rbx
000000000001645e	pushq	%rdi
000000000001645f	pushq	%rsi
0000000000016460	pushq	%rdx
0000000000016461	pushq	%rcx
0000000000016462	pushq	%r8
0000000000016464	pushq	%r9
0000000000016466	pushq	%r10
0000000000016468	pushq	%r11
000000000001646a	pushq	%r12
000000000001646c	pushq	%r13
000000000001646e	pushq	%r14
0000000000016470	pushq	%r15
0000000000016472	subq	$0x10, %rsp
0000000000016476	movss	%xmm0, (%rsp)
000000000001647b	subq	$0x10, %rsp
000000000001647f	movss	%xmm1, (%rsp)
0000000000016484	pushq	%rsi
0000000000016485	pushq	%rdi
0000000000016486	callq	__Z7getBasev ## getBase()
000000000001648b	addq	$0x6190, %rax
0000000000016491	popq	%rdi
0000000000016492	popq	%rsi
0000000000016493	movss	(%rsp), %xmm1
0000000000016498	addq	$0x10, %rsp
000000000001649c	movss	(%rsp), %xmm0
00000000000164a1	addq	$0x10, %rsp
00000000000164a5	popq	%r15
00000000000164a7	popq	%r14
00000000000164a9	popq	%r13
00000000000164ab	popq	%r12
00000000000164ad	popq	%r11
00000000000164af	popq	%r10
00000000000164b1	popq	%r9
00000000000164b3	popq	%r8
00000000000164b5	popq	%rcx
00000000000164b6	popq	%rdx
00000000000164b7	popq	%rsi
00000000000164b8	popq	%rdi
00000000000164b9	popq	%rbx
00000000000164ba	popq	%rbp
00000000000164bb	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA19getDisplayedOpacityEv:
00000000000164bd	pushq	%rbp
00000000000164be	movq	%rsp, %rbp
00000000000164c1	pushq	%rbx
00000000000164c2	pushq	%rdi
00000000000164c3	pushq	%rsi
00000000000164c4	pushq	%rdx
00000000000164c5	pushq	%rcx
00000000000164c6	pushq	%r8
00000000000164c8	pushq	%r9
00000000000164ca	pushq	%r10
00000000000164cc	pushq	%r11
00000000000164ce	pushq	%r12
00000000000164d0	pushq	%r13
00000000000164d2	pushq	%r14
00000000000164d4	pushq	%r15
00000000000164d6	subq	$0x10, %rsp
00000000000164da	movss	%xmm0, (%rsp)
00000000000164df	subq	$0x10, %rsp
00000000000164e3	movss	%xmm1, (%rsp)
00000000000164e8	pushq	%rsi
00000000000164e9	pushq	%rdi
00000000000164ea	callq	__Z7getBasev ## getBase()
00000000000164ef	addq	$0x273c00, %rax
00000000000164f5	popq	%rdi
00000000000164f6	popq	%rsi
00000000000164f7	movss	(%rsp), %xmm1
00000000000164fc	addq	$0x10, %rsp
0000000000016500	movss	(%rsp), %xmm0
0000000000016505	addq	$0x10, %rsp
0000000000016509	popq	%r15
000000000001650b	popq	%r14
000000000001650d	popq	%r13
000000000001650f	popq	%r12
0000000000016511	popq	%r11
0000000000016513	popq	%r10
0000000000016515	popq	%r9
0000000000016517	popq	%r8
0000000000016519	popq	%rcx
000000000001651a	popq	%rdx
000000000001651b	popq	%rsi
000000000001651c	popq	%rdi
000000000001651d	popq	%rbx
000000000001651e	popq	%rbp
000000000001651f	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA19setOpacityModifyRGBEb:
0000000000016521	pushq	%rbp
0000000000016522	movq	%rsp, %rbp
0000000000016525	pushq	%rbx
0000000000016526	pushq	%rdi
0000000000016527	pushq	%rsi
0000000000016528	pushq	%rdx
0000000000016529	pushq	%rcx
000000000001652a	pushq	%r8
000000000001652c	pushq	%r9
000000000001652e	pushq	%r10
0000000000016530	pushq	%r11
0000000000016532	pushq	%r12
0000000000016534	pushq	%r13
0000000000016536	pushq	%r14
0000000000016538	pushq	%r15
000000000001653a	subq	$0x10, %rsp
000000000001653e	movss	%xmm0, (%rsp)
0000000000016543	subq	$0x10, %rsp
0000000000016547	movss	%xmm1, (%rsp)
000000000001654c	pushq	%rsi
000000000001654d	pushq	%rdi
000000000001654e	callq	__Z7getBasev ## getBase()
0000000000016553	addq	$0x6180, %rax
0000000000016559	popq	%rdi
000000000001655a	popq	%rsi
000000000001655b	movss	(%rsp), %xmm1
0000000000016560	addq	$0x10, %rsp
0000000000016564	movss	(%rsp), %xmm0
0000000000016569	addq	$0x10, %rsp
000000000001656d	popq	%r15
000000000001656f	popq	%r14
0000000000016571	popq	%r13
0000000000016573	popq	%r12
0000000000016575	popq	%r11
0000000000016577	popq	%r10
0000000000016579	popq	%r9
000000000001657b	popq	%r8
000000000001657d	popq	%rcx
000000000001657e	popq	%rdx
000000000001657f	popq	%rsi
0000000000016580	popq	%rdi
0000000000016581	popq	%rbx
0000000000016582	popq	%rbp
0000000000016583	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA20updateDisplayedColorERKNS_10_ccColor3BE:
0000000000016585	pushq	%rbp
0000000000016586	movq	%rsp, %rbp
0000000000016589	pushq	%rbx
000000000001658a	pushq	%rdi
000000000001658b	pushq	%rsi
000000000001658c	pushq	%rdx
000000000001658d	pushq	%rcx
000000000001658e	pushq	%r8
0000000000016590	pushq	%r9
0000000000016592	pushq	%r10
0000000000016594	pushq	%r11
0000000000016596	pushq	%r12
0000000000016598	pushq	%r13
000000000001659a	pushq	%r14
000000000001659c	pushq	%r15
000000000001659e	subq	$0x10, %rsp
00000000000165a2	movss	%xmm0, (%rsp)
00000000000165a7	subq	$0x10, %rsp
00000000000165ab	movss	%xmm1, (%rsp)
00000000000165b0	pushq	%rsi
00000000000165b1	pushq	%rdi
00000000000165b2	callq	__Z7getBasev ## getBase()
00000000000165b7	addq	$0x2740b0, %rax
00000000000165bd	popq	%rdi
00000000000165be	popq	%rsi
00000000000165bf	movss	(%rsp), %xmm1
00000000000165c4	addq	$0x10, %rsp
00000000000165c8	movss	(%rsp), %xmm0
00000000000165cd	addq	$0x10, %rsp
00000000000165d1	popq	%r15
00000000000165d3	popq	%r14
00000000000165d5	popq	%r13
00000000000165d7	popq	%r12
00000000000165d9	popq	%r11
00000000000165db	popq	%r10
00000000000165dd	popq	%r9
00000000000165df	popq	%r8
00000000000165e1	popq	%rcx
00000000000165e2	popq	%rdx
00000000000165e3	popq	%rsi
00000000000165e4	popq	%rdi
00000000000165e5	popq	%rbx
00000000000165e6	popq	%rbp
00000000000165e7	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA21isCascadeColorEnabledEv:
00000000000165e9	pushq	%rbp
00000000000165ea	movq	%rsp, %rbp
00000000000165ed	pushq	%rbx
00000000000165ee	pushq	%rdi
00000000000165ef	pushq	%rsi
00000000000165f0	pushq	%rdx
00000000000165f1	pushq	%rcx
00000000000165f2	pushq	%r8
00000000000165f4	pushq	%r9
00000000000165f6	pushq	%r10
00000000000165f8	pushq	%r11
00000000000165fa	pushq	%r12
00000000000165fc	pushq	%r13
00000000000165fe	pushq	%r14
0000000000016600	pushq	%r15
0000000000016602	subq	$0x10, %rsp
0000000000016606	movss	%xmm0, (%rsp)
000000000001660b	subq	$0x10, %rsp
000000000001660f	movss	%xmm1, (%rsp)
0000000000016614	pushq	%rsi
0000000000016615	pushq	%rdi
0000000000016616	callq	__Z7getBasev ## getBase()
000000000001661b	addq	$0x274230, %rax
0000000000016621	popq	%rdi
0000000000016622	popq	%rsi
0000000000016623	movss	(%rsp), %xmm1
0000000000016628	addq	$0x10, %rsp
000000000001662c	movss	(%rsp), %xmm0
0000000000016631	addq	$0x10, %rsp
0000000000016635	popq	%r15
0000000000016637	popq	%r14
0000000000016639	popq	%r13
000000000001663b	popq	%r12
000000000001663d	popq	%r11
000000000001663f	popq	%r10
0000000000016641	popq	%r9
0000000000016643	popq	%r8
0000000000016645	popq	%rcx
0000000000016646	popq	%rdx
0000000000016647	popq	%rsi
0000000000016648	popq	%rdi
0000000000016649	popq	%rbx
000000000001664a	popq	%rbp
000000000001664b	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA22setCascadeColorEnabledEb:
000000000001664d	pushq	%rbp
000000000001664e	movq	%rsp, %rbp
0000000000016651	pushq	%rbx
0000000000016652	pushq	%rdi
0000000000016653	pushq	%rsi
0000000000016654	pushq	%rdx
0000000000016655	pushq	%rcx
0000000000016656	pushq	%r8
0000000000016658	pushq	%r9
000000000001665a	pushq	%r10
000000000001665c	pushq	%r11
000000000001665e	pushq	%r12
0000000000016660	pushq	%r13
0000000000016662	pushq	%r14
0000000000016664	pushq	%r15
0000000000016666	subq	$0x10, %rsp
000000000001666a	movss	%xmm0, (%rsp)
000000000001666f	subq	$0x10, %rsp
0000000000016673	movss	%xmm1, (%rsp)
0000000000016678	pushq	%rsi
0000000000016679	pushq	%rdi
000000000001667a	callq	__Z7getBasev ## getBase()
000000000001667f	addq	$0x274250, %rax
0000000000016685	popq	%rdi
0000000000016686	popq	%rsi
0000000000016687	movss	(%rsp), %xmm1
000000000001668c	addq	$0x10, %rsp
0000000000016690	movss	(%rsp), %xmm0
0000000000016695	addq	$0x10, %rsp
0000000000016699	popq	%r15
000000000001669b	popq	%r14
000000000001669d	popq	%r13
000000000001669f	popq	%r12
00000000000166a1	popq	%r11
00000000000166a3	popq	%r10
00000000000166a5	popq	%r9
00000000000166a7	popq	%r8
00000000000166a9	popq	%rcx
00000000000166aa	popq	%rdx
00000000000166ab	popq	%rsi
00000000000166ac	popq	%rdi
00000000000166ad	popq	%rbx
00000000000166ae	popq	%rbp
00000000000166af	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA22updateDisplayedOpacityEh:
00000000000166b1	pushq	%rbp
00000000000166b2	movq	%rsp, %rbp
00000000000166b5	pushq	%rbx
00000000000166b6	pushq	%rdi
00000000000166b7	pushq	%rsi
00000000000166b8	pushq	%rdx
00000000000166b9	pushq	%rcx
00000000000166ba	pushq	%r8
00000000000166bc	pushq	%r9
00000000000166be	pushq	%r10
00000000000166c0	pushq	%r11
00000000000166c2	pushq	%r12
00000000000166c4	pushq	%r13
00000000000166c6	pushq	%r14
00000000000166c8	pushq	%r15
00000000000166ca	subq	$0x10, %rsp
00000000000166ce	movss	%xmm0, (%rsp)
00000000000166d3	subq	$0x10, %rsp
00000000000166d7	movss	%xmm1, (%rsp)
00000000000166dc	pushq	%rsi
00000000000166dd	pushq	%rdi
00000000000166de	callq	__Z7getBasev ## getBase()
00000000000166e3	addq	$0x273f20, %rax
00000000000166e9	popq	%rdi
00000000000166ea	popq	%rsi
00000000000166eb	movss	(%rsp), %xmm1
00000000000166f0	addq	$0x10, %rsp
00000000000166f4	movss	(%rsp), %xmm0
00000000000166f9	addq	$0x10, %rsp
00000000000166fd	popq	%r15
00000000000166ff	popq	%r14
0000000000016701	popq	%r13
0000000000016703	popq	%r12
0000000000016705	popq	%r11
0000000000016707	popq	%r10
0000000000016709	popq	%r9
000000000001670b	popq	%r8
000000000001670d	popq	%rcx
000000000001670e	popq	%rdx
000000000001670f	popq	%rsi
0000000000016710	popq	%rdi
0000000000016711	popq	%rbx
0000000000016712	popq	%rbp
0000000000016713	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA23isCascadeOpacityEnabledEv:
0000000000016715	pushq	%rbp
0000000000016716	movq	%rsp, %rbp
0000000000016719	pushq	%rbx
000000000001671a	pushq	%rdi
000000000001671b	pushq	%rsi
000000000001671c	pushq	%rdx
000000000001671d	pushq	%rcx
000000000001671e	pushq	%r8
0000000000016720	pushq	%r9
0000000000016722	pushq	%r10
0000000000016724	pushq	%r11
0000000000016726	pushq	%r12
0000000000016728	pushq	%r13
000000000001672a	pushq	%r14
000000000001672c	pushq	%r15
000000000001672e	subq	$0x10, %rsp
0000000000016732	movss	%xmm0, (%rsp)
0000000000016737	subq	$0x10, %rsp
000000000001673b	movss	%xmm1, (%rsp)
0000000000016740	pushq	%rsi
0000000000016741	pushq	%rdi
0000000000016742	callq	__Z7getBasev ## getBase()
0000000000016747	addq	$0x2741f0, %rax
000000000001674d	popq	%rdi
000000000001674e	popq	%rsi
000000000001674f	movss	(%rsp), %xmm1
0000000000016754	addq	$0x10, %rsp
0000000000016758	movss	(%rsp), %xmm0
000000000001675d	addq	$0x10, %rsp
0000000000016761	popq	%r15
0000000000016763	popq	%r14
0000000000016765	popq	%r13
0000000000016767	popq	%r12
0000000000016769	popq	%r11
000000000001676b	popq	%r10
000000000001676d	popq	%r9
000000000001676f	popq	%r8
0000000000016771	popq	%rcx
0000000000016772	popq	%rdx
0000000000016773	popq	%rsi
0000000000016774	popq	%rdi
0000000000016775	popq	%rbx
0000000000016776	popq	%rbp
0000000000016777	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA24setCascadeOpacityEnabledEb:
0000000000016779	pushq	%rbp
000000000001677a	movq	%rsp, %rbp
000000000001677d	pushq	%rbx
000000000001677e	pushq	%rdi
000000000001677f	pushq	%rsi
0000000000016780	pushq	%rdx
0000000000016781	pushq	%rcx
0000000000016782	pushq	%r8
0000000000016784	pushq	%r9
0000000000016786	pushq	%r10
0000000000016788	pushq	%r11
000000000001678a	pushq	%r12
000000000001678c	pushq	%r13
000000000001678e	pushq	%r14
0000000000016790	pushq	%r15
0000000000016792	subq	$0x10, %rsp
0000000000016796	movss	%xmm0, (%rsp)
000000000001679b	subq	$0x10, %rsp
000000000001679f	movss	%xmm1, (%rsp)
00000000000167a4	pushq	%rsi
00000000000167a5	pushq	%rdi
00000000000167a6	callq	__Z7getBasev ## getBase()
00000000000167ab	addq	$0x274210, %rax
00000000000167b1	popq	%rdi
00000000000167b2	popq	%rsi
00000000000167b3	movss	(%rsp), %xmm1
00000000000167b8	addq	$0x10, %rsp
00000000000167bc	movss	(%rsp), %xmm0
00000000000167c1	addq	$0x10, %rsp
00000000000167c5	popq	%r15
00000000000167c7	popq	%r14
00000000000167c9	popq	%r13
00000000000167cb	popq	%r12
00000000000167cd	popq	%r11
00000000000167cf	popq	%r10
00000000000167d1	popq	%r9
00000000000167d3	popq	%r8
00000000000167d5	popq	%rcx
00000000000167d6	popq	%rdx
00000000000167d7	popq	%rsi
00000000000167d8	popq	%rdi
00000000000167d9	popq	%rbx
00000000000167da	popq	%rbp
00000000000167db	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA8getColorEv:
00000000000167dd	pushq	%rbp
00000000000167de	movq	%rsp, %rbp
00000000000167e1	pushq	%rbx
00000000000167e2	pushq	%rdi
00000000000167e3	pushq	%rsi
00000000000167e4	pushq	%rdx
00000000000167e5	pushq	%rcx
00000000000167e6	pushq	%r8
00000000000167e8	pushq	%r9
00000000000167ea	pushq	%r10
00000000000167ec	pushq	%r11
00000000000167ee	pushq	%r12
00000000000167f0	pushq	%r13
00000000000167f2	pushq	%r14
00000000000167f4	pushq	%r15
00000000000167f6	subq	$0x10, %rsp
00000000000167fa	movss	%xmm0, (%rsp)
00000000000167ff	subq	$0x10, %rsp
0000000000016803	movss	%xmm1, (%rsp)
0000000000016808	pushq	%rsi
0000000000016809	pushq	%rdi
000000000001680a	callq	__Z7getBasev ## getBase()
000000000001680f	addq	$0x273d60, %rax
0000000000016815	popq	%rdi
0000000000016816	popq	%rsi
0000000000016817	movss	(%rsp), %xmm1
000000000001681c	addq	$0x10, %rsp
0000000000016820	movss	(%rsp), %xmm0
0000000000016825	addq	$0x10, %rsp
0000000000016829	popq	%r15
000000000001682b	popq	%r14
000000000001682d	popq	%r13
000000000001682f	popq	%r12
0000000000016831	popq	%r11
0000000000016833	popq	%r10
0000000000016835	popq	%r9
0000000000016837	popq	%r8
0000000000016839	popq	%rcx
000000000001683a	popq	%rdx
000000000001683b	popq	%rsi
000000000001683c	popq	%rdi
000000000001683d	popq	%rbx
000000000001683e	popq	%rbp
000000000001683f	jmpq	*%rax
__ZN7cocos2d11CCScheduler16scheduleSelectorEMNS_8CCObjectEFvfEPS1_fjfb:
0000000000016841	pushq	%rbp
0000000000016842	movq	%rsp, %rbp
0000000000016845	pushq	%rbx
0000000000016846	pushq	%rdi
0000000000016847	pushq	%rsi
0000000000016848	pushq	%rdx
0000000000016849	pushq	%rcx
000000000001684a	pushq	%r8
000000000001684c	pushq	%r9
000000000001684e	pushq	%r10
0000000000016850	pushq	%r11
0000000000016852	pushq	%r12
0000000000016854	pushq	%r13
0000000000016856	pushq	%r14
0000000000016858	pushq	%r15
000000000001685a	subq	$0x10, %rsp
000000000001685e	movss	%xmm0, (%rsp)
0000000000016863	subq	$0x10, %rsp
0000000000016867	movss	%xmm1, (%rsp)
000000000001686c	pushq	%rsi
000000000001686d	pushq	%rdi
000000000001686e	callq	__Z7getBasev ## getBase()
0000000000016873	addq	$0x242b20, %rax
0000000000016879	popq	%rdi
000000000001687a	popq	%rsi
000000000001687b	movss	(%rsp), %xmm1
0000000000016880	addq	$0x10, %rsp
0000000000016884	movss	(%rsp), %xmm0
0000000000016889	addq	$0x10, %rsp
000000000001688d	popq	%r15
000000000001688f	popq	%r14
0000000000016891	popq	%r13
0000000000016893	popq	%r12
0000000000016895	popq	%r11
0000000000016897	popq	%r10
0000000000016899	popq	%r9
000000000001689b	popq	%r8
000000000001689d	popq	%rcx
000000000001689e	popq	%rdx
000000000001689f	popq	%rsi
00000000000168a0	popq	%rdi
00000000000168a1	popq	%rbx
00000000000168a2	popq	%rbp
00000000000168a3	jmpq	*%rax
__ZN7cocos2d11CCScheduler22unscheduleAllForTargetEPNS_8CCObjectE:
00000000000168a5	pushq	%rbp
00000000000168a6	movq	%rsp, %rbp
00000000000168a9	pushq	%rbx
00000000000168aa	pushq	%rdi
00000000000168ab	pushq	%rsi
00000000000168ac	pushq	%rdx
00000000000168ad	pushq	%rcx
00000000000168ae	pushq	%r8
00000000000168b0	pushq	%r9
00000000000168b2	pushq	%r10
00000000000168b4	pushq	%r11
00000000000168b6	pushq	%r12
00000000000168b8	pushq	%r13
00000000000168ba	pushq	%r14
00000000000168bc	pushq	%r15
00000000000168be	subq	$0x10, %rsp
00000000000168c2	movss	%xmm0, (%rsp)
00000000000168c7	subq	$0x10, %rsp
00000000000168cb	movss	%xmm1, (%rsp)
00000000000168d0	pushq	%rsi
00000000000168d1	pushq	%rdi
00000000000168d2	callq	__Z7getBasev ## getBase()
00000000000168d7	addq	$0x243e40, %rax
00000000000168dd	popq	%rdi
00000000000168de	popq	%rsi
00000000000168df	movss	(%rsp), %xmm1
00000000000168e4	addq	$0x10, %rsp
00000000000168e8	movss	(%rsp), %xmm0
00000000000168ed	addq	$0x10, %rsp
00000000000168f1	popq	%r15
00000000000168f3	popq	%r14
00000000000168f5	popq	%r13
00000000000168f7	popq	%r12
00000000000168f9	popq	%r11
00000000000168fb	popq	%r10
00000000000168fd	popq	%r9
00000000000168ff	popq	%r8
0000000000016901	popq	%rcx
0000000000016902	popq	%rdx
0000000000016903	popq	%rsi
0000000000016904	popq	%rdi
0000000000016905	popq	%rbx
0000000000016906	popq	%rbp
0000000000016907	jmpq	*%rax
__ZN7cocos2d11CCScheduler23scheduleUpdateForTargetEPNS_8CCObjectEib:
0000000000016909	pushq	%rbp
000000000001690a	movq	%rsp, %rbp
000000000001690d	pushq	%rbx
000000000001690e	pushq	%rdi
000000000001690f	pushq	%rsi
0000000000016910	pushq	%rdx
0000000000016911	pushq	%rcx
0000000000016912	pushq	%r8
0000000000016914	pushq	%r9
0000000000016916	pushq	%r10
0000000000016918	pushq	%r11
000000000001691a	pushq	%r12
000000000001691c	pushq	%r13
000000000001691e	pushq	%r14
0000000000016920	pushq	%r15
0000000000016922	subq	$0x10, %rsp
0000000000016926	movss	%xmm0, (%rsp)
000000000001692b	subq	$0x10, %rsp
000000000001692f	movss	%xmm1, (%rsp)
0000000000016934	pushq	%rsi
0000000000016935	pushq	%rdi
0000000000016936	callq	__Z7getBasev ## getBase()
000000000001693b	addq	$0x2438d0, %rax
0000000000016941	popq	%rdi
0000000000016942	popq	%rsi
0000000000016943	movss	(%rsp), %xmm1
0000000000016948	addq	$0x10, %rsp
000000000001694c	movss	(%rsp), %xmm0
0000000000016951	addq	$0x10, %rsp
0000000000016955	popq	%r15
0000000000016957	popq	%r14
0000000000016959	popq	%r13
000000000001695b	popq	%r12
000000000001695d	popq	%r11
000000000001695f	popq	%r10
0000000000016961	popq	%r9
0000000000016963	popq	%r8
0000000000016965	popq	%rcx
0000000000016966	popq	%rdx
0000000000016967	popq	%rsi
0000000000016968	popq	%rdi
0000000000016969	popq	%rbx
000000000001696a	popq	%rbp
000000000001696b	jmpq	*%rax
__ZN7cocos2d11CCTexture2D13initWithImageEPNS_7CCImageE:
000000000001696d	pushq	%rbp
000000000001696e	movq	%rsp, %rbp
0000000000016971	pushq	%rbx
0000000000016972	pushq	%rdi
0000000000016973	pushq	%rsi
0000000000016974	pushq	%rdx
0000000000016975	pushq	%rcx
0000000000016976	pushq	%r8
0000000000016978	pushq	%r9
000000000001697a	pushq	%r10
000000000001697c	pushq	%r11
000000000001697e	pushq	%r12
0000000000016980	pushq	%r13
0000000000016982	pushq	%r14
0000000000016984	pushq	%r15
0000000000016986	subq	$0x10, %rsp
000000000001698a	movss	%xmm0, (%rsp)
000000000001698f	subq	$0x10, %rsp
0000000000016993	movss	%xmm1, (%rsp)
0000000000016998	pushq	%rsi
0000000000016999	pushq	%rdi
000000000001699a	callq	__Z7getBasev ## getBase()
000000000001699f	addq	$0x246940, %rax
00000000000169a5	popq	%rdi
00000000000169a6	popq	%rsi
00000000000169a7	movss	(%rsp), %xmm1
00000000000169ac	addq	$0x10, %rsp
00000000000169b0	movss	(%rsp), %xmm0
00000000000169b5	addq	$0x10, %rsp
00000000000169b9	popq	%r15
00000000000169bb	popq	%r14
00000000000169bd	popq	%r13
00000000000169bf	popq	%r12
00000000000169c1	popq	%r11
00000000000169c3	popq	%r10
00000000000169c5	popq	%r9
00000000000169c7	popq	%r8
00000000000169c9	popq	%rcx
00000000000169ca	popq	%rdx
00000000000169cb	popq	%rsi
00000000000169cc	popq	%rdi
00000000000169cd	popq	%rbx
00000000000169ce	popq	%rbp
00000000000169cf	jmpq	*%rax
__ZN7cocos2d11CCTexture2DC1Ev:
00000000000169d1	pushq	%rbp
00000000000169d2	movq	%rsp, %rbp
00000000000169d5	pushq	%rbx
00000000000169d6	pushq	%rdi
00000000000169d7	pushq	%rsi
00000000000169d8	pushq	%rdx
00000000000169d9	pushq	%rcx
00000000000169da	pushq	%r8
00000000000169dc	pushq	%r9
00000000000169de	pushq	%r10
00000000000169e0	pushq	%r11
00000000000169e2	pushq	%r12
00000000000169e4	pushq	%r13
00000000000169e6	pushq	%r14
00000000000169e8	pushq	%r15
00000000000169ea	subq	$0x10, %rsp
00000000000169ee	movss	%xmm0, (%rsp)
00000000000169f3	subq	$0x10, %rsp
00000000000169f7	movss	%xmm1, (%rsp)
00000000000169fc	pushq	%rsi
00000000000169fd	pushq	%rdi
00000000000169fe	callq	__Z7getBasev ## getBase()
0000000000016a03	addq	$0x246280, %rax
0000000000016a09	popq	%rdi
0000000000016a0a	popq	%rsi
0000000000016a0b	movss	(%rsp), %xmm1
0000000000016a10	addq	$0x10, %rsp
0000000000016a14	movss	(%rsp), %xmm0
0000000000016a19	addq	$0x10, %rsp
0000000000016a1d	popq	%r15
0000000000016a1f	popq	%r14
0000000000016a21	popq	%r13
0000000000016a23	popq	%r12
0000000000016a25	popq	%r11
0000000000016a27	popq	%r10
0000000000016a29	popq	%r9
0000000000016a2b	popq	%r8
0000000000016a2d	popq	%rcx
0000000000016a2e	popq	%rdx
0000000000016a2f	popq	%rsi
0000000000016a30	popq	%rdi
0000000000016a31	popq	%rbx
0000000000016a32	popq	%rbp
0000000000016a33	jmpq	*%rax
__ZN7cocos2d11CCTexture2DC2Ev:
0000000000016a35	pushq	%rbp
0000000000016a36	movq	%rsp, %rbp
0000000000016a39	pushq	%rbx
0000000000016a3a	pushq	%rdi
0000000000016a3b	pushq	%rsi
0000000000016a3c	pushq	%rdx
0000000000016a3d	pushq	%rcx
0000000000016a3e	pushq	%r8
0000000000016a40	pushq	%r9
0000000000016a42	pushq	%r10
0000000000016a44	pushq	%r11
0000000000016a46	pushq	%r12
0000000000016a48	pushq	%r13
0000000000016a4a	pushq	%r14
0000000000016a4c	pushq	%r15
0000000000016a4e	subq	$0x10, %rsp
0000000000016a52	movss	%xmm0, (%rsp)
0000000000016a57	subq	$0x10, %rsp
0000000000016a5b	movss	%xmm1, (%rsp)
0000000000016a60	pushq	%rsi
0000000000016a61	pushq	%rdi
0000000000016a62	callq	__Z7getBasev ## getBase()
0000000000016a67	addq	$0x246280, %rax
0000000000016a6d	popq	%rdi
0000000000016a6e	popq	%rsi
0000000000016a6f	movss	(%rsp), %xmm1
0000000000016a74	addq	$0x10, %rsp
0000000000016a78	movss	(%rsp), %xmm0
0000000000016a7d	addq	$0x10, %rsp
0000000000016a81	popq	%r15
0000000000016a83	popq	%r14
0000000000016a85	popq	%r13
0000000000016a87	popq	%r12
0000000000016a89	popq	%r11
0000000000016a8b	popq	%r10
0000000000016a8d	popq	%r9
0000000000016a8f	popq	%r8
0000000000016a91	popq	%rcx
0000000000016a92	popq	%rdx
0000000000016a93	popq	%rsi
0000000000016a94	popq	%rdi
0000000000016a95	popq	%rbx
0000000000016a96	popq	%rbp
0000000000016a97	jmpq	*%rax
__ZN15CCTextInputNode6createEffPKcS1_iS1_:
0000000000016a99	pushq	%rbp
0000000000016a9a	movq	%rsp, %rbp
0000000000016a9d	pushq	%rbx
0000000000016a9e	pushq	%rdi
0000000000016a9f	pushq	%rsi
0000000000016aa0	pushq	%rdx
0000000000016aa1	pushq	%rcx
0000000000016aa2	pushq	%r8
0000000000016aa4	pushq	%r9
0000000000016aa6	pushq	%r10
0000000000016aa8	pushq	%r11
0000000000016aaa	pushq	%r12
0000000000016aac	pushq	%r13
0000000000016aae	pushq	%r14
0000000000016ab0	pushq	%r15
0000000000016ab2	subq	$0x10, %rsp
0000000000016ab6	movss	%xmm0, (%rsp)
0000000000016abb	subq	$0x10, %rsp
0000000000016abf	movss	%xmm1, (%rsp)
0000000000016ac4	pushq	%rsi
0000000000016ac5	pushq	%rdi
0000000000016ac6	callq	__Z7getBasev ## getBase()
0000000000016acb	addq	$0x5cfb0, %rax
0000000000016ad1	popq	%rdi
0000000000016ad2	popq	%rsi
0000000000016ad3	movss	(%rsp), %xmm1
0000000000016ad8	addq	$0x10, %rsp
0000000000016adc	movss	(%rsp), %xmm0
0000000000016ae1	addq	$0x10, %rsp
0000000000016ae5	popq	%r15
0000000000016ae7	popq	%r14
0000000000016ae9	popq	%r13
0000000000016aeb	popq	%r12
0000000000016aed	popq	%r11
0000000000016aef	popq	%r10
0000000000016af1	popq	%r9
0000000000016af3	popq	%r8
0000000000016af5	popq	%rcx
0000000000016af6	popq	%rdx
0000000000016af7	popq	%rsi
0000000000016af8	popq	%rdi
0000000000016af9	popq	%rbx
0000000000016afa	popq	%rbp
0000000000016afb	jmpq	*%rax
__ZN15CCTextInputNode15setAllowedCharsESs:
0000000000016afd	pushq	%rbp
0000000000016afe	movq	%rsp, %rbp
0000000000016b01	pushq	%rbx
0000000000016b02	pushq	%rdi
0000000000016b03	pushq	%rsi
0000000000016b04	pushq	%rdx
0000000000016b05	pushq	%rcx
0000000000016b06	pushq	%r8
0000000000016b08	pushq	%r9
0000000000016b0a	pushq	%r10
0000000000016b0c	pushq	%r11
0000000000016b0e	pushq	%r12
0000000000016b10	pushq	%r13
0000000000016b12	pushq	%r14
0000000000016b14	pushq	%r15
0000000000016b16	subq	$0x10, %rsp
0000000000016b1a	movss	%xmm0, (%rsp)
0000000000016b1f	subq	$0x10, %rsp
0000000000016b23	movss	%xmm1, (%rsp)
0000000000016b28	pushq	%rsi
0000000000016b29	pushq	%rdi
0000000000016b2a	callq	__Z7getBasev ## getBase()
0000000000016b2f	addq	$0x5d360, %rax
0000000000016b35	popq	%rdi
0000000000016b36	popq	%rsi
0000000000016b37	movss	(%rsp), %xmm1
0000000000016b3c	addq	$0x10, %rsp
0000000000016b40	movss	(%rsp), %xmm0
0000000000016b45	addq	$0x10, %rsp
0000000000016b49	popq	%r15
0000000000016b4b	popq	%r14
0000000000016b4d	popq	%r13
0000000000016b4f	popq	%r12
0000000000016b51	popq	%r11
0000000000016b53	popq	%r10
0000000000016b55	popq	%r9
0000000000016b57	popq	%r8
0000000000016b59	popq	%rcx
0000000000016b5a	popq	%rdx
0000000000016b5b	popq	%rsi
0000000000016b5c	popq	%rdi
0000000000016b5d	popq	%rbx
0000000000016b5e	popq	%rbp
0000000000016b5f	jmpq	*%rax
__ZN15CCTextInputNode16setMaxLabelScaleEf:
0000000000016b61	pushq	%rbp
0000000000016b62	movq	%rsp, %rbp
0000000000016b65	pushq	%rbx
0000000000016b66	pushq	%rdi
0000000000016b67	pushq	%rsi
0000000000016b68	pushq	%rdx
0000000000016b69	pushq	%rcx
0000000000016b6a	pushq	%r8
0000000000016b6c	pushq	%r9
0000000000016b6e	pushq	%r10
0000000000016b70	pushq	%r11
0000000000016b72	pushq	%r12
0000000000016b74	pushq	%r13
0000000000016b76	pushq	%r14
0000000000016b78	pushq	%r15
0000000000016b7a	subq	$0x10, %rsp
0000000000016b7e	movss	%xmm0, (%rsp)
0000000000016b83	subq	$0x10, %rsp
0000000000016b87	movss	%xmm1, (%rsp)
0000000000016b8c	pushq	%rsi
0000000000016b8d	pushq	%rdi
0000000000016b8e	callq	__Z7getBasev ## getBase()
0000000000016b93	addq	$0x5da30, %rax
0000000000016b99	popq	%rdi
0000000000016b9a	popq	%rsi
0000000000016b9b	movss	(%rsp), %xmm1
0000000000016ba0	addq	$0x10, %rsp
0000000000016ba4	movss	(%rsp), %xmm0
0000000000016ba9	addq	$0x10, %rsp
0000000000016bad	popq	%r15
0000000000016baf	popq	%r14
0000000000016bb1	popq	%r13
0000000000016bb3	popq	%r12
0000000000016bb5	popq	%r11
0000000000016bb7	popq	%r10
0000000000016bb9	popq	%r9
0000000000016bbb	popq	%r8
0000000000016bbd	popq	%rcx
0000000000016bbe	popq	%rdx
0000000000016bbf	popq	%rsi
0000000000016bc0	popq	%rdi
0000000000016bc1	popq	%rbx
0000000000016bc2	popq	%rbp
0000000000016bc3	jmpq	*%rax
__ZN15CCTextInputNode16setMaxLabelWidthEf:
0000000000016bc5	pushq	%rbp
0000000000016bc6	movq	%rsp, %rbp
0000000000016bc9	pushq	%rbx
0000000000016bca	pushq	%rdi
0000000000016bcb	pushq	%rsi
0000000000016bcc	pushq	%rdx
0000000000016bcd	pushq	%rcx
0000000000016bce	pushq	%r8
0000000000016bd0	pushq	%r9
0000000000016bd2	pushq	%r10
0000000000016bd4	pushq	%r11
0000000000016bd6	pushq	%r12
0000000000016bd8	pushq	%r13
0000000000016bda	pushq	%r14
0000000000016bdc	pushq	%r15
0000000000016bde	subq	$0x10, %rsp
0000000000016be2	movss	%xmm0, (%rsp)
0000000000016be7	subq	$0x10, %rsp
0000000000016beb	movss	%xmm1, (%rsp)
0000000000016bf0	pushq	%rsi
0000000000016bf1	pushq	%rdi
0000000000016bf2	callq	__Z7getBasev ## getBase()
0000000000016bf7	addq	$0x5da50, %rax
0000000000016bfd	popq	%rdi
0000000000016bfe	popq	%rsi
0000000000016bff	movss	(%rsp), %xmm1
0000000000016c04	addq	$0x10, %rsp
0000000000016c08	movss	(%rsp), %xmm0
0000000000016c0d	addq	$0x10, %rsp
0000000000016c11	popq	%r15
0000000000016c13	popq	%r14
0000000000016c15	popq	%r13
0000000000016c17	popq	%r12
0000000000016c19	popq	%r11
0000000000016c1b	popq	%r10
0000000000016c1d	popq	%r9
0000000000016c1f	popq	%r8
0000000000016c21	popq	%rcx
0000000000016c22	popq	%rdx
0000000000016c23	popq	%rsi
0000000000016c24	popq	%rdi
0000000000016c25	popq	%rbx
0000000000016c26	popq	%rbp
0000000000016c27	jmpq	*%rax
__ZN15CCTextInputNode9getStringEv:
0000000000016c29	pushq	%rbp
0000000000016c2a	movq	%rsp, %rbp
0000000000016c2d	pushq	%rbx
0000000000016c2e	pushq	%rdi
0000000000016c2f	pushq	%rsi
0000000000016c30	pushq	%rdx
0000000000016c31	pushq	%rcx
0000000000016c32	pushq	%r8
0000000000016c34	pushq	%r9
0000000000016c36	pushq	%r10
0000000000016c38	pushq	%r11
0000000000016c3a	pushq	%r12
0000000000016c3c	pushq	%r13
0000000000016c3e	pushq	%r14
0000000000016c40	pushq	%r15
0000000000016c42	subq	$0x10, %rsp
0000000000016c46	movss	%xmm0, (%rsp)
0000000000016c4b	subq	$0x10, %rsp
0000000000016c4f	movss	%xmm1, (%rsp)
0000000000016c54	pushq	%rsi
0000000000016c55	pushq	%rdi
0000000000016c56	callq	__Z7getBasev ## getBase()
0000000000016c5b	addq	$0x5d6f0, %rax
0000000000016c61	popq	%rdi
0000000000016c62	popq	%rsi
0000000000016c63	movss	(%rsp), %xmm1
0000000000016c68	addq	$0x10, %rsp
0000000000016c6c	movss	(%rsp), %xmm0
0000000000016c71	addq	$0x10, %rsp
0000000000016c75	popq	%r15
0000000000016c77	popq	%r14
0000000000016c79	popq	%r13
0000000000016c7b	popq	%r12
0000000000016c7d	popq	%r11
0000000000016c7f	popq	%r10
0000000000016c81	popq	%r9
0000000000016c83	popq	%r8
0000000000016c85	popq	%rcx
0000000000016c86	popq	%rdx
0000000000016c87	popq	%rsi
0000000000016c88	popq	%rdi
0000000000016c89	popq	%rbx
0000000000016c8a	popq	%rbp
0000000000016c8b	jmpq	*%rax
__ZN15CCTextInputNode11getString_sEv:
0000000000016c8d	pushq	%rbp
0000000000016c8e	movq	%rsp, %rbp
0000000000016c91	movq	0x1c0(%rdi), %rdi
0000000000016c98	movq	(%rdi), %rax
0000000000016c9b	callq	*0x4b8(%rax)
0000000000016ca1	popq	%rbp
0000000000016ca2	retq
__ZN7cocos2d12CCDictionary11valueForKeyEl:
0000000000016ca3	pushq	%rbp
0000000000016ca4	movq	%rsp, %rbp
0000000000016ca7	pushq	%rbx
0000000000016ca8	pushq	%rdi
0000000000016ca9	pushq	%rsi
0000000000016caa	pushq	%rdx
0000000000016cab	pushq	%rcx
0000000000016cac	pushq	%r8
0000000000016cae	pushq	%r9
0000000000016cb0	pushq	%r10
0000000000016cb2	pushq	%r11
0000000000016cb4	pushq	%r12
0000000000016cb6	pushq	%r13
0000000000016cb8	pushq	%r14
0000000000016cba	pushq	%r15
0000000000016cbc	subq	$0x10, %rsp
0000000000016cc0	movss	%xmm0, (%rsp)
0000000000016cc5	subq	$0x10, %rsp
0000000000016cc9	movss	%xmm1, (%rsp)
0000000000016cce	pushq	%rsi
0000000000016ccf	pushq	%rdi
0000000000016cd0	callq	__Z7getBasev ## getBase()
0000000000016cd5	addq	$0x190cf0, %rax
0000000000016cdb	popq	%rdi
0000000000016cdc	popq	%rsi
0000000000016cdd	movss	(%rsp), %xmm1
0000000000016ce2	addq	$0x10, %rsp
0000000000016ce6	movss	(%rsp), %xmm0
0000000000016ceb	addq	$0x10, %rsp
0000000000016cef	popq	%r15
0000000000016cf1	popq	%r14
0000000000016cf3	popq	%r13
0000000000016cf5	popq	%r12
0000000000016cf7	popq	%r11
0000000000016cf9	popq	%r10
0000000000016cfb	popq	%r9
0000000000016cfd	popq	%r8
0000000000016cff	popq	%rcx
0000000000016d00	popq	%rdx
0000000000016d01	popq	%rsi
0000000000016d02	popq	%rdi
0000000000016d03	popq	%rbx
0000000000016d04	popq	%rbp
0000000000016d05	jmpq	*%rax
__ZN7cocos2d12CCDictionary12objectForKeyERKSs:
0000000000016d07	pushq	%rbp
0000000000016d08	movq	%rsp, %rbp
0000000000016d0b	pushq	%rbx
0000000000016d0c	pushq	%rdi
0000000000016d0d	pushq	%rsi
0000000000016d0e	pushq	%rdx
0000000000016d0f	pushq	%rcx
0000000000016d10	pushq	%r8
0000000000016d12	pushq	%r9
0000000000016d14	pushq	%r10
0000000000016d16	pushq	%r11
0000000000016d18	pushq	%r12
0000000000016d1a	pushq	%r13
0000000000016d1c	pushq	%r14
0000000000016d1e	pushq	%r15
0000000000016d20	subq	$0x10, %rsp
0000000000016d24	movss	%xmm0, (%rsp)
0000000000016d29	subq	$0x10, %rsp
0000000000016d2d	movss	%xmm1, (%rsp)
0000000000016d32	pushq	%rsi
0000000000016d33	pushq	%rdi
0000000000016d34	callq	__Z7getBasev ## getBase()
0000000000016d39	addq	$0x190870, %rax
0000000000016d3f	popq	%rdi
0000000000016d40	popq	%rsi
0000000000016d41	movss	(%rsp), %xmm1
0000000000016d46	addq	$0x10, %rsp
0000000000016d4a	movss	(%rsp), %xmm0
0000000000016d4f	addq	$0x10, %rsp
0000000000016d53	popq	%r15
0000000000016d55	popq	%r14
0000000000016d57	popq	%r13
0000000000016d59	popq	%r12
0000000000016d5b	popq	%r11
0000000000016d5d	popq	%r10
0000000000016d5f	popq	%r9
0000000000016d61	popq	%r8
0000000000016d63	popq	%rcx
0000000000016d64	popq	%rdx
0000000000016d65	popq	%rsi
0000000000016d66	popq	%rdi
0000000000016d67	popq	%rbx
0000000000016d68	popq	%rbp
0000000000016d69	jmpq	*%rax
__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectEl:
0000000000016d6b	pushq	%rbp
0000000000016d6c	movq	%rsp, %rbp
0000000000016d6f	pushq	%rbx
0000000000016d70	pushq	%rdi
0000000000016d71	pushq	%rsi
0000000000016d72	pushq	%rdx
0000000000016d73	pushq	%rcx
0000000000016d74	pushq	%r8
0000000000016d76	pushq	%r9
0000000000016d78	pushq	%r10
0000000000016d7a	pushq	%r11
0000000000016d7c	pushq	%r12
0000000000016d7e	pushq	%r13
0000000000016d80	pushq	%r14
0000000000016d82	pushq	%r15
0000000000016d84	subq	$0x10, %rsp
0000000000016d88	movss	%xmm0, (%rsp)
0000000000016d8d	subq	$0x10, %rsp
0000000000016d91	movss	%xmm1, (%rsp)
0000000000016d96	pushq	%rsi
0000000000016d97	pushq	%rdi
0000000000016d98	callq	__Z7getBasev ## getBase()
0000000000016d9d	addq	$0x191790, %rax
0000000000016da3	popq	%rdi
0000000000016da4	popq	%rsi
0000000000016da5	movss	(%rsp), %xmm1
0000000000016daa	addq	$0x10, %rsp
0000000000016dae	movss	(%rsp), %xmm0
0000000000016db3	addq	$0x10, %rsp
0000000000016db7	popq	%r15
0000000000016db9	popq	%r14
0000000000016dbb	popq	%r13
0000000000016dbd	popq	%r12
0000000000016dbf	popq	%r11
0000000000016dc1	popq	%r10
0000000000016dc3	popq	%r9
0000000000016dc5	popq	%r8
0000000000016dc7	popq	%rcx
0000000000016dc8	popq	%rdx
0000000000016dc9	popq	%rsi
0000000000016dca	popq	%rdi
0000000000016dcb	popq	%rbx
0000000000016dcc	popq	%rbp
0000000000016dcd	jmpq	*%rax
__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectERKSs:
0000000000016dcf	pushq	%rbp
0000000000016dd0	movq	%rsp, %rbp
0000000000016dd3	pushq	%rbx
0000000000016dd4	pushq	%rdi
0000000000016dd5	pushq	%rsi
0000000000016dd6	pushq	%rdx
0000000000016dd7	pushq	%rcx
0000000000016dd8	pushq	%r8
0000000000016dda	pushq	%r9
0000000000016ddc	pushq	%r10
0000000000016dde	pushq	%r11
0000000000016de0	pushq	%r12
0000000000016de2	pushq	%r13
0000000000016de4	pushq	%r14
0000000000016de6	pushq	%r15
0000000000016de8	subq	$0x10, %rsp
0000000000016dec	movss	%xmm0, (%rsp)
0000000000016df1	subq	$0x10, %rsp
0000000000016df5	movss	%xmm1, (%rsp)
0000000000016dfa	pushq	%rsi
0000000000016dfb	pushq	%rdi
0000000000016dfc	callq	__Z7getBasev ## getBase()
0000000000016e01	addq	$0x190dc0, %rax
0000000000016e07	popq	%rdi
0000000000016e08	popq	%rsi
0000000000016e09	movss	(%rsp), %xmm1
0000000000016e0e	addq	$0x10, %rsp
0000000000016e12	movss	(%rsp), %xmm0
0000000000016e17	addq	$0x10, %rsp
0000000000016e1b	popq	%r15
0000000000016e1d	popq	%r14
0000000000016e1f	popq	%r13
0000000000016e21	popq	%r12
0000000000016e23	popq	%r11
0000000000016e25	popq	%r10
0000000000016e27	popq	%r9
0000000000016e29	popq	%r8
0000000000016e2b	popq	%rcx
0000000000016e2c	popq	%rdx
0000000000016e2d	popq	%rsi
0000000000016e2e	popq	%rdi
0000000000016e2f	popq	%rbx
0000000000016e30	popq	%rbp
0000000000016e31	jmpq	*%rax
__ZN7cocos2d12CCLayerColor11updateColorEv:
0000000000016e33	pushq	%rbp
0000000000016e34	movq	%rsp, %rbp
0000000000016e37	pushq	%rbx
0000000000016e38	pushq	%rdi
0000000000016e39	pushq	%rsi
0000000000016e3a	pushq	%rdx
0000000000016e3b	pushq	%rcx
0000000000016e3c	pushq	%r8
0000000000016e3e	pushq	%r9
0000000000016e40	pushq	%r10
0000000000016e42	pushq	%r11
0000000000016e44	pushq	%r12
0000000000016e46	pushq	%r13
0000000000016e48	pushq	%r14
0000000000016e4a	pushq	%r15
0000000000016e4c	subq	$0x10, %rsp
0000000000016e50	movss	%xmm0, (%rsp)
0000000000016e55	subq	$0x10, %rsp
0000000000016e59	movss	%xmm1, (%rsp)
0000000000016e5e	pushq	%rsi
0000000000016e5f	pushq	%rdi
0000000000016e60	callq	__Z7getBasev ## getBase()
0000000000016e65	addq	$0x274ae0, %rax
0000000000016e6b	popq	%rdi
0000000000016e6c	popq	%rsi
0000000000016e6d	movss	(%rsp), %xmm1
0000000000016e72	addq	$0x10, %rsp
0000000000016e76	movss	(%rsp), %xmm0
0000000000016e7b	addq	$0x10, %rsp
0000000000016e7f	popq	%r15
0000000000016e81	popq	%r14
0000000000016e83	popq	%r13
0000000000016e85	popq	%r12
0000000000016e87	popq	%r11
0000000000016e89	popq	%r10
0000000000016e8b	popq	%r9
0000000000016e8d	popq	%r8
0000000000016e8f	popq	%rcx
0000000000016e90	popq	%rdx
0000000000016e91	popq	%rsi
0000000000016e92	popq	%rdi
0000000000016e93	popq	%rbx
0000000000016e94	popq	%rbp
0000000000016e95	jmpq	*%rax
__ZN7cocos2d12CCLayerColor12getBlendFuncEv:
0000000000016e97	pushq	%rbp
0000000000016e98	movq	%rsp, %rbp
0000000000016e9b	pushq	%rbx
0000000000016e9c	pushq	%rdi
0000000000016e9d	pushq	%rsi
0000000000016e9e	pushq	%rdx
0000000000016e9f	pushq	%rcx
0000000000016ea0	pushq	%r8
0000000000016ea2	pushq	%r9
0000000000016ea4	pushq	%r10
0000000000016ea6	pushq	%r11
0000000000016ea8	pushq	%r12
0000000000016eaa	pushq	%r13
0000000000016eac	pushq	%r14
0000000000016eae	pushq	%r15
0000000000016eb0	subq	$0x10, %rsp
0000000000016eb4	movss	%xmm0, (%rsp)
0000000000016eb9	subq	$0x10, %rsp
0000000000016ebd	movss	%xmm1, (%rsp)
0000000000016ec2	pushq	%rsi
0000000000016ec3	pushq	%rdi
0000000000016ec4	callq	__Z7getBasev ## getBase()
0000000000016ec9	addq	$0x274480, %rax
0000000000016ecf	popq	%rdi
0000000000016ed0	popq	%rsi
0000000000016ed1	movss	(%rsp), %xmm1
0000000000016ed6	addq	$0x10, %rsp
0000000000016eda	movss	(%rsp), %xmm0
0000000000016edf	addq	$0x10, %rsp
0000000000016ee3	popq	%r15
0000000000016ee5	popq	%r14
0000000000016ee7	popq	%r13
0000000000016ee9	popq	%r12
0000000000016eeb	popq	%r11
0000000000016eed	popq	%r10
0000000000016eef	popq	%r9
0000000000016ef1	popq	%r8
0000000000016ef3	popq	%rcx
0000000000016ef4	popq	%rdx
0000000000016ef5	popq	%rsi
0000000000016ef6	popq	%rdi
0000000000016ef7	popq	%rbx
0000000000016ef8	popq	%rbp
0000000000016ef9	jmpq	*%rax
__ZN7cocos2d12CCLayerColor6createERKNS_10_ccColor4BEff:
0000000000016efb	pushq	%rbp
0000000000016efc	movq	%rsp, %rbp
0000000000016eff	pushq	%rbx
0000000000016f00	pushq	%rdi
0000000000016f01	pushq	%rsi
0000000000016f02	pushq	%rdx
0000000000016f03	pushq	%rcx
0000000000016f04	pushq	%r8
0000000000016f06	pushq	%r9
0000000000016f08	pushq	%r10
0000000000016f0a	pushq	%r11
0000000000016f0c	pushq	%r12
0000000000016f0e	pushq	%r13
0000000000016f10	pushq	%r14
0000000000016f12	pushq	%r15
0000000000016f14	subq	$0x10, %rsp
0000000000016f18	movss	%xmm0, (%rsp)
0000000000016f1d	subq	$0x10, %rsp
0000000000016f21	movss	%xmm1, (%rsp)
0000000000016f26	pushq	%rsi
0000000000016f27	pushq	%rdi
0000000000016f28	callq	__Z7getBasev ## getBase()
0000000000016f2d	addq	$0x2745e0, %rax
0000000000016f33	popq	%rdi
0000000000016f34	popq	%rsi
0000000000016f35	movss	(%rsp), %xmm1
0000000000016f3a	addq	$0x10, %rsp
0000000000016f3e	movss	(%rsp), %xmm0
0000000000016f43	addq	$0x10, %rsp
0000000000016f47	popq	%r15
0000000000016f49	popq	%r14
0000000000016f4b	popq	%r13
0000000000016f4d	popq	%r12
0000000000016f4f	popq	%r11
0000000000016f51	popq	%r10
0000000000016f53	popq	%r9
0000000000016f55	popq	%r8
0000000000016f57	popq	%rcx
0000000000016f58	popq	%rdx
0000000000016f59	popq	%rsi
0000000000016f5a	popq	%rdi
0000000000016f5b	popq	%rbx
0000000000016f5c	popq	%rbp
0000000000016f5d	jmpq	*%rax
__ZN7cocos2d12CCLayerColor12setBlendFuncENS_12_ccBlendFuncE:
0000000000016f5f	pushq	%rbp
0000000000016f60	movq	%rsp, %rbp
0000000000016f63	pushq	%rbx
0000000000016f64	pushq	%rdi
0000000000016f65	pushq	%rsi
0000000000016f66	pushq	%rdx
0000000000016f67	pushq	%rcx
0000000000016f68	pushq	%r8
0000000000016f6a	pushq	%r9
0000000000016f6c	pushq	%r10
0000000000016f6e	pushq	%r11
0000000000016f70	pushq	%r12
0000000000016f72	pushq	%r13
0000000000016f74	pushq	%r14
0000000000016f76	pushq	%r15
0000000000016f78	subq	$0x10, %rsp
0000000000016f7c	movss	%xmm0, (%rsp)
0000000000016f81	subq	$0x10, %rsp
0000000000016f85	movss	%xmm1, (%rsp)
0000000000016f8a	pushq	%rsi
0000000000016f8b	pushq	%rdi
0000000000016f8c	callq	__Z7getBasev ## getBase()
0000000000016f91	addq	$0x2744a0, %rax
0000000000016f97	popq	%rdi
0000000000016f98	popq	%rsi
0000000000016f99	movss	(%rsp), %xmm1
0000000000016f9e	addq	$0x10, %rsp
0000000000016fa2	movss	(%rsp), %xmm0
0000000000016fa7	addq	$0x10, %rsp
0000000000016fab	popq	%r15
0000000000016fad	popq	%r14
0000000000016faf	popq	%r13
0000000000016fb1	popq	%r12
0000000000016fb3	popq	%r11
0000000000016fb5	popq	%r10
0000000000016fb7	popq	%r9
0000000000016fb9	popq	%r8
0000000000016fbb	popq	%rcx
0000000000016fbc	popq	%rdx
0000000000016fbd	popq	%rsi
0000000000016fbe	popq	%rdi
0000000000016fbf	popq	%rbx
0000000000016fc0	popq	%rbp
0000000000016fc1	jmpq	*%rax
__ZN7cocos2d12CCLayerColor10setOpacityEh:
0000000000016fc3	pushq	%rbp
0000000000016fc4	movq	%rsp, %rbp
0000000000016fc7	pushq	%rbx
0000000000016fc8	pushq	%rdi
0000000000016fc9	pushq	%rsi
0000000000016fca	pushq	%rdx
0000000000016fcb	pushq	%rcx
0000000000016fcc	pushq	%r8
0000000000016fce	pushq	%r9
0000000000016fd0	pushq	%r10
0000000000016fd2	pushq	%r11
0000000000016fd4	pushq	%r12
0000000000016fd6	pushq	%r13
0000000000016fd8	pushq	%r14
0000000000016fda	pushq	%r15
0000000000016fdc	subq	$0x10, %rsp
0000000000016fe0	movss	%xmm0, (%rsp)
0000000000016fe5	subq	$0x10, %rsp
0000000000016fe9	movss	%xmm1, (%rsp)
0000000000016fee	pushq	%rsi
0000000000016fef	pushq	%rdi
0000000000016ff0	callq	__Z7getBasev ## getBase()
0000000000016ff5	addq	$0x274db0, %rax
0000000000016ffb	popq	%rdi
0000000000016ffc	popq	%rsi
0000000000016ffd	movss	(%rsp), %xmm1
0000000000017002	addq	$0x10, %rsp
0000000000017006	movss	(%rsp), %xmm0
000000000001700b	addq	$0x10, %rsp
000000000001700f	popq	%r15
0000000000017011	popq	%r14
0000000000017013	popq	%r13
0000000000017015	popq	%r12
0000000000017017	popq	%r11
0000000000017019	popq	%r10
000000000001701b	popq	%r9
000000000001701d	popq	%r8
000000000001701f	popq	%rcx
0000000000017020	popq	%rdx
0000000000017021	popq	%rsi
0000000000017022	popq	%rdi
0000000000017023	popq	%rbx
0000000000017024	popq	%rbp
0000000000017025	jmpq	*%rax
__ZN7cocos2d12CCLayerColor13initWithColorERKNS_10_ccColor4BE:
0000000000017027	pushq	%rbp
0000000000017028	movq	%rsp, %rbp
000000000001702b	pushq	%rbx
000000000001702c	pushq	%rdi
000000000001702d	pushq	%rsi
000000000001702e	pushq	%rdx
000000000001702f	pushq	%rcx
0000000000017030	pushq	%r8
0000000000017032	pushq	%r9
0000000000017034	pushq	%r10
0000000000017036	pushq	%r11
0000000000017038	pushq	%r12
000000000001703a	pushq	%r13
000000000001703c	pushq	%r14
000000000001703e	pushq	%r15
0000000000017040	subq	$0x10, %rsp
0000000000017044	movss	%xmm0, (%rsp)
0000000000017049	subq	$0x10, %rsp
000000000001704d	movss	%xmm1, (%rsp)
0000000000017052	pushq	%rsi
0000000000017053	pushq	%rdi
0000000000017054	callq	__Z7getBasev ## getBase()
0000000000017059	addq	$0x2749a0, %rax
000000000001705f	popq	%rdi
0000000000017060	popq	%rsi
0000000000017061	movss	(%rsp), %xmm1
0000000000017066	addq	$0x10, %rsp
000000000001706a	movss	(%rsp), %xmm0
000000000001706f	addq	$0x10, %rsp
0000000000017073	popq	%r15
0000000000017075	popq	%r14
0000000000017077	popq	%r13
0000000000017079	popq	%r12
000000000001707b	popq	%r11
000000000001707d	popq	%r10
000000000001707f	popq	%r9
0000000000017081	popq	%r8
0000000000017083	popq	%rcx
0000000000017084	popq	%rdx
0000000000017085	popq	%rsi
0000000000017086	popq	%rdi
0000000000017087	popq	%rbx
0000000000017088	popq	%rbp
0000000000017089	jmpq	*%rax
__ZN7cocos2d12CCLayerColor13initWithColorERKNS_10_ccColor4BEff:
000000000001708b	pushq	%rbp
000000000001708c	movq	%rsp, %rbp
000000000001708f	pushq	%rbx
0000000000017090	pushq	%rdi
0000000000017091	pushq	%rsi
0000000000017092	pushq	%rdx
0000000000017093	pushq	%rcx
0000000000017094	pushq	%r8
0000000000017096	pushq	%r9
0000000000017098	pushq	%r10
000000000001709a	pushq	%r11
000000000001709c	pushq	%r12
000000000001709e	pushq	%r13
00000000000170a0	pushq	%r14
00000000000170a2	pushq	%r15
00000000000170a4	subq	$0x10, %rsp
00000000000170a8	movss	%xmm0, (%rsp)
00000000000170ad	subq	$0x10, %rsp
00000000000170b1	movss	%xmm1, (%rsp)
00000000000170b6	pushq	%rsi
00000000000170b7	pushq	%rdi
00000000000170b8	callq	__Z7getBasev ## getBase()
00000000000170bd	addq	$0x274850, %rax
00000000000170c3	popq	%rdi
00000000000170c4	popq	%rsi
00000000000170c5	movss	(%rsp), %xmm1
00000000000170ca	addq	$0x10, %rsp
00000000000170ce	movss	(%rsp), %xmm0
00000000000170d3	addq	$0x10, %rsp
00000000000170d7	popq	%r15
00000000000170d9	popq	%r14
00000000000170db	popq	%r13
00000000000170dd	popq	%r12
00000000000170df	popq	%r11
00000000000170e1	popq	%r10
00000000000170e3	popq	%r9
00000000000170e5	popq	%r8
00000000000170e7	popq	%rcx
00000000000170e8	popq	%rdx
00000000000170e9	popq	%rsi
00000000000170ea	popq	%rdi
00000000000170eb	popq	%rbx
00000000000170ec	popq	%rbp
00000000000170ed	jmpq	*%rax
__ZN7cocos2d12CCLayerColor14setContentSizeERKNS_6CCSizeE:
00000000000170ef	pushq	%rbp
00000000000170f0	movq	%rsp, %rbp
00000000000170f3	pushq	%rbx
00000000000170f4	pushq	%rdi
00000000000170f5	pushq	%rsi
00000000000170f6	pushq	%rdx
00000000000170f7	pushq	%rcx
00000000000170f8	pushq	%r8
00000000000170fa	pushq	%r9
00000000000170fc	pushq	%r10
00000000000170fe	pushq	%r11
0000000000017100	pushq	%r12
0000000000017102	pushq	%r13
0000000000017104	pushq	%r14
0000000000017106	pushq	%r15
0000000000017108	subq	$0x10, %rsp
000000000001710c	movss	%xmm0, (%rsp)
0000000000017111	subq	$0x10, %rsp
0000000000017115	movss	%xmm1, (%rsp)
000000000001711a	pushq	%rsi
000000000001711b	pushq	%rdi
000000000001711c	callq	__Z7getBasev ## getBase()
0000000000017121	addq	$0x2749f0, %rax
0000000000017127	popq	%rdi
0000000000017128	popq	%rsi
0000000000017129	movss	(%rsp), %xmm1
000000000001712e	addq	$0x10, %rsp
0000000000017132	movss	(%rsp), %xmm0
0000000000017137	addq	$0x10, %rsp
000000000001713b	popq	%r15
000000000001713d	popq	%r14
000000000001713f	popq	%r13
0000000000017141	popq	%r12
0000000000017143	popq	%r11
0000000000017145	popq	%r10
0000000000017147	popq	%r9
0000000000017149	popq	%r8
000000000001714b	popq	%rcx
000000000001714c	popq	%rdx
000000000001714d	popq	%rsi
000000000001714e	popq	%rdi
000000000001714f	popq	%rbx
0000000000017150	popq	%rbp
0000000000017151	jmpq	*%rax
__ZN7cocos2d12CCLayerColor4drawEv:
0000000000017153	pushq	%rbp
0000000000017154	movq	%rsp, %rbp
0000000000017157	pushq	%rbx
0000000000017158	pushq	%rdi
0000000000017159	pushq	%rsi
000000000001715a	pushq	%rdx
000000000001715b	pushq	%rcx
000000000001715c	pushq	%r8
000000000001715e	pushq	%r9
0000000000017160	pushq	%r10
0000000000017162	pushq	%r11
0000000000017164	pushq	%r12
0000000000017166	pushq	%r13
0000000000017168	pushq	%r14
000000000001716a	pushq	%r15
000000000001716c	subq	$0x10, %rsp
0000000000017170	movss	%xmm0, (%rsp)
0000000000017175	subq	$0x10, %rsp
0000000000017179	movss	%xmm1, (%rsp)
000000000001717e	pushq	%rsi
000000000001717f	pushq	%rdi
0000000000017180	callq	__Z7getBasev ## getBase()
0000000000017185	addq	$0x123840, %rax
000000000001718b	popq	%rdi
000000000001718c	popq	%rsi
000000000001718d	movss	(%rsp), %xmm1
0000000000017192	addq	$0x10, %rsp
0000000000017196	movss	(%rsp), %xmm0
000000000001719b	addq	$0x10, %rsp
000000000001719f	popq	%r15
00000000000171a1	popq	%r14
00000000000171a3	popq	%r13
00000000000171a5	popq	%r12
00000000000171a7	popq	%r11
00000000000171a9	popq	%r10
00000000000171ab	popq	%r9
00000000000171ad	popq	%r8
00000000000171af	popq	%rcx
00000000000171b0	popq	%rdx
00000000000171b1	popq	%rsi
00000000000171b2	popq	%rdi
00000000000171b3	popq	%rbx
00000000000171b4	popq	%rbp
00000000000171b5	jmpq	*%rax
__ZN7cocos2d12CCLayerColor4initEv:
00000000000171b7	pushq	%rbp
00000000000171b8	movq	%rsp, %rbp
00000000000171bb	pushq	%rbx
00000000000171bc	pushq	%rdi
00000000000171bd	pushq	%rsi
00000000000171be	pushq	%rdx
00000000000171bf	pushq	%rcx
00000000000171c0	pushq	%r8
00000000000171c2	pushq	%r9
00000000000171c4	pushq	%r10
00000000000171c6	pushq	%r11
00000000000171c8	pushq	%r12
00000000000171ca	pushq	%r13
00000000000171cc	pushq	%r14
00000000000171ce	pushq	%r15
00000000000171d0	subq	$0x10, %rsp
00000000000171d4	movss	%xmm0, (%rsp)
00000000000171d9	subq	$0x10, %rsp
00000000000171dd	movss	%xmm1, (%rsp)
00000000000171e2	pushq	%rsi
00000000000171e3	pushq	%rdi
00000000000171e4	callq	__Z7getBasev ## getBase()
00000000000171e9	addq	$0x274800, %rax
00000000000171ef	popq	%rdi
00000000000171f0	popq	%rsi
00000000000171f1	movss	(%rsp), %xmm1
00000000000171f6	addq	$0x10, %rsp
00000000000171fa	movss	(%rsp), %xmm0
00000000000171ff	addq	$0x10, %rsp
0000000000017203	popq	%r15
0000000000017205	popq	%r14
0000000000017207	popq	%r13
0000000000017209	popq	%r12
000000000001720b	popq	%r11
000000000001720d	popq	%r10
000000000001720f	popq	%r9
0000000000017211	popq	%r8
0000000000017213	popq	%rcx
0000000000017214	popq	%rdx
0000000000017215	popq	%rsi
0000000000017216	popq	%rdi
0000000000017217	popq	%rbx
0000000000017218	popq	%rbp
0000000000017219	jmpq	*%rax
__ZN7cocos2d12CCLayerColor8setColorERKNS_10_ccColor3BE:
000000000001721b	pushq	%rbp
000000000001721c	movq	%rsp, %rbp
000000000001721f	pushq	%rbx
0000000000017220	pushq	%rdi
0000000000017221	pushq	%rsi
0000000000017222	pushq	%rdx
0000000000017223	pushq	%rcx
0000000000017224	pushq	%r8
0000000000017226	pushq	%r9
0000000000017228	pushq	%r10
000000000001722a	pushq	%r11
000000000001722c	pushq	%r12
000000000001722e	pushq	%r13
0000000000017230	pushq	%r14
0000000000017232	pushq	%r15
0000000000017234	subq	$0x10, %rsp
0000000000017238	movss	%xmm0, (%rsp)
000000000001723d	subq	$0x10, %rsp
0000000000017241	movss	%xmm1, (%rsp)
0000000000017246	pushq	%rsi
0000000000017247	pushq	%rdi
0000000000017248	callq	__Z7getBasev ## getBase()
000000000001724d	addq	$0x274c20, %rax
0000000000017253	popq	%rdi
0000000000017254	popq	%rsi
0000000000017255	movss	(%rsp), %xmm1
000000000001725a	addq	$0x10, %rsp
000000000001725e	movss	(%rsp), %xmm0
0000000000017263	addq	$0x10, %rsp
0000000000017267	popq	%r15
0000000000017269	popq	%r14
000000000001726b	popq	%r13
000000000001726d	popq	%r12
000000000001726f	popq	%r11
0000000000017271	popq	%r10
0000000000017273	popq	%r9
0000000000017275	popq	%r8
0000000000017277	popq	%rcx
0000000000017278	popq	%rdx
0000000000017279	popq	%rsi
000000000001727a	popq	%rdi
000000000001727b	popq	%rbx
000000000001727c	popq	%rbp
000000000001727d	jmpq	*%rax
__ZN7cocos2d12CCLayerColorD0Ev:
000000000001727f	pushq	%rbp
0000000000017280	movq	%rsp, %rbp
0000000000017283	pushq	%rbx
0000000000017284	pushq	%rdi
0000000000017285	pushq	%rsi
0000000000017286	pushq	%rdx
0000000000017287	pushq	%rcx
0000000000017288	pushq	%r8
000000000001728a	pushq	%r9
000000000001728c	pushq	%r10
000000000001728e	pushq	%r11
0000000000017290	pushq	%r12
0000000000017292	pushq	%r13
0000000000017294	pushq	%r14
0000000000017296	pushq	%r15
0000000000017298	subq	$0x10, %rsp
000000000001729c	movss	%xmm0, (%rsp)
00000000000172a1	subq	$0x10, %rsp
00000000000172a5	movss	%xmm1, (%rsp)
00000000000172aa	pushq	%rsi
00000000000172ab	pushq	%rdi
00000000000172ac	callq	__Z7getBasev ## getBase()
00000000000172b1	addq	$0x272930, %rax
00000000000172b7	popq	%rdi
00000000000172b8	popq	%rsi
00000000000172b9	movss	(%rsp), %xmm1
00000000000172be	addq	$0x10, %rsp
00000000000172c2	movss	(%rsp), %xmm0
00000000000172c7	addq	$0x10, %rsp
00000000000172cb	popq	%r15
00000000000172cd	popq	%r14
00000000000172cf	popq	%r13
00000000000172d1	popq	%r12
00000000000172d3	popq	%r11
00000000000172d5	popq	%r10
00000000000172d7	popq	%r9
00000000000172d9	popq	%r8
00000000000172db	popq	%rcx
00000000000172dc	popq	%rdx
00000000000172dd	popq	%rsi
00000000000172de	popq	%rdi
00000000000172df	popq	%rbx
00000000000172e0	popq	%rbp
00000000000172e1	jmpq	*%rax
__ZN7cocos2d12CCLayerColorD1Ev:
00000000000172e3	pushq	%rbp
00000000000172e4	movq	%rsp, %rbp
00000000000172e7	pushq	%rbx
00000000000172e8	pushq	%rdi
00000000000172e9	pushq	%rsi
00000000000172ea	pushq	%rdx
00000000000172eb	pushq	%rcx
00000000000172ec	pushq	%r8
00000000000172ee	pushq	%r9
00000000000172f0	pushq	%r10
00000000000172f2	pushq	%r11
00000000000172f4	pushq	%r12
00000000000172f6	pushq	%r13
00000000000172f8	pushq	%r14
00000000000172fa	pushq	%r15
00000000000172fc	subq	$0x10, %rsp
0000000000017300	movss	%xmm0, (%rsp)
0000000000017305	subq	$0x10, %rsp
0000000000017309	movss	%xmm1, (%rsp)
000000000001730e	pushq	%rsi
000000000001730f	pushq	%rdi
0000000000017310	callq	__Z7getBasev ## getBase()
0000000000017315	addq	$0x272900, %rax
000000000001731b	popq	%rdi
000000000001731c	popq	%rsi
000000000001731d	movss	(%rsp), %xmm1
0000000000017322	addq	$0x10, %rsp
0000000000017326	movss	(%rsp), %xmm0
000000000001732b	addq	$0x10, %rsp
000000000001732f	popq	%r15
0000000000017331	popq	%r14
0000000000017333	popq	%r13
0000000000017335	popq	%r12
0000000000017337	popq	%r11
0000000000017339	popq	%r10
000000000001733b	popq	%r9
000000000001733d	popq	%r8
000000000001733f	popq	%rcx
0000000000017340	popq	%rdx
0000000000017341	popq	%rsi
0000000000017342	popq	%rdi
0000000000017343	popq	%rbx
0000000000017344	popq	%rbp
0000000000017345	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont6createEPKcS2_:
0000000000017347	pushq	%rbp
0000000000017348	movq	%rsp, %rbp
000000000001734b	pushq	%rbx
000000000001734c	pushq	%rdi
000000000001734d	pushq	%rsi
000000000001734e	pushq	%rdx
000000000001734f	pushq	%rcx
0000000000017350	pushq	%r8
0000000000017352	pushq	%r9
0000000000017354	pushq	%r10
0000000000017356	pushq	%r11
0000000000017358	pushq	%r12
000000000001735a	pushq	%r13
000000000001735c	pushq	%r14
000000000001735e	pushq	%r15
0000000000017360	subq	$0x10, %rsp
0000000000017364	movss	%xmm0, (%rsp)
0000000000017369	subq	$0x10, %rsp
000000000001736d	movss	%xmm1, (%rsp)
0000000000017372	pushq	%rsi
0000000000017373	pushq	%rdi
0000000000017374	callq	__Z7getBasev ## getBase()
0000000000017379	addq	$0x347660, %rax
000000000001737f	popq	%rdi
0000000000017380	popq	%rsi
0000000000017381	movss	(%rsp), %xmm1
0000000000017386	addq	$0x10, %rsp
000000000001738a	movss	(%rsp), %xmm0
000000000001738f	addq	$0x10, %rsp
0000000000017393	popq	%r15
0000000000017395	popq	%r14
0000000000017397	popq	%r13
0000000000017399	popq	%r12
000000000001739b	popq	%r11
000000000001739d	popq	%r10
000000000001739f	popq	%r9
00000000000173a1	popq	%r8
00000000000173a3	popq	%rcx
00000000000173a4	popq	%rdx
00000000000173a5	popq	%rsi
00000000000173a6	popq	%rdi
00000000000173a7	popq	%rbx
00000000000173a8	popq	%rbp
00000000000173a9	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont8setScaleEf:
00000000000173ab	pushq	%rbp
00000000000173ac	movq	%rsp, %rbp
00000000000173af	pushq	%rbx
00000000000173b0	pushq	%rdi
00000000000173b1	pushq	%rsi
00000000000173b2	pushq	%rdx
00000000000173b3	pushq	%rcx
00000000000173b4	pushq	%r8
00000000000173b6	pushq	%r9
00000000000173b8	pushq	%r10
00000000000173ba	pushq	%r11
00000000000173bc	pushq	%r12
00000000000173be	pushq	%r13
00000000000173c0	pushq	%r14
00000000000173c2	pushq	%r15
00000000000173c4	subq	$0x10, %rsp
00000000000173c8	movss	%xmm0, (%rsp)
00000000000173cd	subq	$0x10, %rsp
00000000000173d1	movss	%xmm1, (%rsp)
00000000000173d6	pushq	%rsi
00000000000173d7	pushq	%rdi
00000000000173d8	callq	__Z7getBasev ## getBase()
00000000000173dd	addq	$0x34a5d0, %rax
00000000000173e3	popq	%rdi
00000000000173e4	popq	%rsi
00000000000173e5	movss	(%rsp), %xmm1
00000000000173ea	addq	$0x10, %rsp
00000000000173ee	movss	(%rsp), %xmm0
00000000000173f3	addq	$0x10, %rsp
00000000000173f7	popq	%r15
00000000000173f9	popq	%r14
00000000000173fb	popq	%r13
00000000000173fd	popq	%r12
00000000000173ff	popq	%r11
0000000000017401	popq	%r10
0000000000017403	popq	%r9
0000000000017405	popq	%r8
0000000000017407	popq	%rcx
0000000000017408	popq	%rdx
0000000000017409	popq	%rsi
000000000001740a	popq	%rdi
000000000001740b	popq	%rbx
000000000001740c	popq	%rbp
000000000001740d	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont9setStringEPKcb:
000000000001740f	pushq	%rbp
0000000000017410	movq	%rsp, %rbp
0000000000017413	pushq	%rbx
0000000000017414	pushq	%rdi
0000000000017415	pushq	%rsi
0000000000017416	pushq	%rdx
0000000000017417	pushq	%rcx
0000000000017418	pushq	%r8
000000000001741a	pushq	%r9
000000000001741c	pushq	%r10
000000000001741e	pushq	%r11
0000000000017420	pushq	%r12
0000000000017422	pushq	%r13
0000000000017424	pushq	%r14
0000000000017426	pushq	%r15
0000000000017428	subq	$0x10, %rsp
000000000001742c	movss	%xmm0, (%rsp)
0000000000017431	subq	$0x10, %rsp
0000000000017435	movss	%xmm1, (%rsp)
000000000001743a	pushq	%rsi
000000000001743b	pushq	%rdi
000000000001743c	callq	__Z7getBasev ## getBase()
0000000000017441	addq	$0x3489e0, %rax
0000000000017447	popq	%rdi
0000000000017448	popq	%rsi
0000000000017449	movss	(%rsp), %xmm1
000000000001744e	addq	$0x10, %rsp
0000000000017452	movss	(%rsp), %xmm0
0000000000017457	addq	$0x10, %rsp
000000000001745b	popq	%r15
000000000001745d	popq	%r14
000000000001745f	popq	%r13
0000000000017461	popq	%r12
0000000000017463	popq	%r11
0000000000017465	popq	%r10
0000000000017467	popq	%r9
0000000000017469	popq	%r8
000000000001746b	popq	%rcx
000000000001746c	popq	%rdx
000000000001746d	popq	%rsi
000000000001746e	popq	%rdi
000000000001746f	popq	%rbx
0000000000017470	popq	%rbp
0000000000017471	jmpq	*%rax
__ZN7cocos2d16CCTransitionFade6createEfPNS_7CCSceneE:
0000000000017473	pushq	%rbp
0000000000017474	movq	%rsp, %rbp
0000000000017477	pushq	%rbx
0000000000017478	pushq	%rdi
0000000000017479	pushq	%rsi
000000000001747a	pushq	%rdx
000000000001747b	pushq	%rcx
000000000001747c	pushq	%r8
000000000001747e	pushq	%r9
0000000000017480	pushq	%r10
0000000000017482	pushq	%r11
0000000000017484	pushq	%r12
0000000000017486	pushq	%r13
0000000000017488	pushq	%r14
000000000001748a	pushq	%r15
000000000001748c	subq	$0x10, %rsp
0000000000017490	movss	%xmm0, (%rsp)
0000000000017495	subq	$0x10, %rsp
0000000000017499	movss	%xmm1, (%rsp)
000000000001749e	pushq	%rsi
000000000001749f	pushq	%rdi
00000000000174a0	callq	__Z7getBasev ## getBase()
00000000000174a5	addq	$0x8ea30, %rax
00000000000174ab	popq	%rdi
00000000000174ac	popq	%rsi
00000000000174ad	movss	(%rsp), %xmm1
00000000000174b2	addq	$0x10, %rsp
00000000000174b6	movss	(%rsp), %xmm0
00000000000174bb	addq	$0x10, %rsp
00000000000174bf	popq	%r15
00000000000174c1	popq	%r14
00000000000174c3	popq	%r13
00000000000174c5	popq	%r12
00000000000174c7	popq	%r11
00000000000174c9	popq	%r10
00000000000174cb	popq	%r9
00000000000174cd	popq	%r8
00000000000174cf	popq	%rcx
00000000000174d0	popq	%rdx
00000000000174d1	popq	%rsi
00000000000174d2	popq	%rdi
00000000000174d3	popq	%rbx
00000000000174d4	popq	%rbp
00000000000174d5	jmpq	*%rax
__ZN7cocos2d17CCTouchDispatcher18incrementForcePrioEi:
00000000000174d7	pushq	%rbp
00000000000174d8	movq	%rsp, %rbp
00000000000174db	pushq	%rbx
00000000000174dc	pushq	%rdi
00000000000174dd	pushq	%rsi
00000000000174de	pushq	%rdx
00000000000174df	pushq	%rcx
00000000000174e0	pushq	%r8
00000000000174e2	pushq	%r9
00000000000174e4	pushq	%r10
00000000000174e6	pushq	%r11
00000000000174e8	pushq	%r12
00000000000174ea	pushq	%r13
00000000000174ec	pushq	%r14
00000000000174ee	pushq	%r15
00000000000174f0	subq	$0x10, %rsp
00000000000174f4	movss	%xmm0, (%rsp)
00000000000174f9	subq	$0x10, %rsp
00000000000174fd	movss	%xmm1, (%rsp)
0000000000017502	pushq	%rsi
0000000000017503	pushq	%rdi
0000000000017504	callq	__Z7getBasev ## getBase()
0000000000017509	addq	$0x280f60, %rax
000000000001750f	popq	%rdi
0000000000017510	popq	%rsi
0000000000017511	movss	(%rsp), %xmm1
0000000000017516	addq	$0x10, %rsp
000000000001751a	movss	(%rsp), %xmm0
000000000001751f	addq	$0x10, %rsp
0000000000017523	popq	%r15
0000000000017525	popq	%r14
0000000000017527	popq	%r13
0000000000017529	popq	%r12
000000000001752b	popq	%r11
000000000001752d	popq	%r10
000000000001752f	popq	%r9
0000000000017531	popq	%r8
0000000000017533	popq	%rcx
0000000000017534	popq	%rdx
0000000000017535	popq	%rsi
0000000000017536	popq	%rdi
0000000000017537	popq	%rbx
0000000000017538	popq	%rbp
0000000000017539	jmpq	*%rax
__ZN7cocos2d6CCMenu6createEv:
000000000001753b	pushq	%rbp
000000000001753c	movq	%rsp, %rbp
000000000001753f	pushq	%rbx
0000000000017540	pushq	%rdi
0000000000017541	pushq	%rsi
0000000000017542	pushq	%rdx
0000000000017543	pushq	%rcx
0000000000017544	pushq	%r8
0000000000017546	pushq	%r9
0000000000017548	pushq	%r10
000000000001754a	pushq	%r11
000000000001754c	pushq	%r12
000000000001754e	pushq	%r13
0000000000017550	pushq	%r14
0000000000017552	pushq	%r15
0000000000017554	subq	$0x10, %rsp
0000000000017558	movss	%xmm0, (%rsp)
000000000001755d	subq	$0x10, %rsp
0000000000017561	movss	%xmm1, (%rsp)
0000000000017566	pushq	%rsi
0000000000017567	pushq	%rdi
0000000000017568	callq	__Z7getBasev ## getBase()
000000000001756d	addq	$0x438720, %rax
0000000000017573	popq	%rdi
0000000000017574	popq	%rsi
0000000000017575	movss	(%rsp), %xmm1
000000000001757a	addq	$0x10, %rsp
000000000001757e	movss	(%rsp), %xmm0
0000000000017583	addq	$0x10, %rsp
0000000000017587	popq	%r15
0000000000017589	popq	%r14
000000000001758b	popq	%r13
000000000001758d	popq	%r12
000000000001758f	popq	%r11
0000000000017591	popq	%r10
0000000000017593	popq	%r9
0000000000017595	popq	%r8
0000000000017597	popq	%rcx
0000000000017598	popq	%rdx
0000000000017599	popq	%rsi
000000000001759a	popq	%rdi
000000000001759b	popq	%rbx
000000000001759c	popq	%rbp
000000000001759d	jmpq	*%rax
__ZN7cocos2d6CCNode10_setZOrderEi:
000000000001759f	pushq	%rbp
00000000000175a0	movq	%rsp, %rbp
00000000000175a3	pushq	%rbx
00000000000175a4	pushq	%rdi
00000000000175a5	pushq	%rsi
00000000000175a6	pushq	%rdx
00000000000175a7	pushq	%rcx
00000000000175a8	pushq	%r8
00000000000175aa	pushq	%r9
00000000000175ac	pushq	%r10
00000000000175ae	pushq	%r11
00000000000175b0	pushq	%r12
00000000000175b2	pushq	%r13
00000000000175b4	pushq	%r14
00000000000175b6	pushq	%r15
00000000000175b8	subq	$0x10, %rsp
00000000000175bc	movss	%xmm0, (%rsp)
00000000000175c1	subq	$0x10, %rsp
00000000000175c5	movss	%xmm1, (%rsp)
00000000000175ca	pushq	%rsi
00000000000175cb	pushq	%rdi
00000000000175cc	callq	__Z7getBasev ## getBase()
00000000000175d1	addq	$0x122990, %rax
00000000000175d7	popq	%rdi
00000000000175d8	popq	%rsi
00000000000175d9	movss	(%rsp), %xmm1
00000000000175de	addq	$0x10, %rsp
00000000000175e2	movss	(%rsp), %xmm0
00000000000175e7	addq	$0x10, %rsp
00000000000175eb	popq	%r15
00000000000175ed	popq	%r14
00000000000175ef	popq	%r13
00000000000175f1	popq	%r12
00000000000175f3	popq	%r11
00000000000175f5	popq	%r10
00000000000175f7	popq	%r9
00000000000175f9	popq	%r8
00000000000175fb	popq	%rcx
00000000000175fc	popq	%rdx
00000000000175fd	popq	%rsi
00000000000175fe	popq	%rdi
00000000000175ff	popq	%rbx
0000000000017600	popq	%rbp
0000000000017601	jmpq	*%rax
__ZN7cocos2d6CCNode10getVertexZEv:
0000000000017603	pushq	%rbp
0000000000017604	movq	%rsp, %rbp
0000000000017607	pushq	%rbx
0000000000017608	pushq	%rdi
0000000000017609	pushq	%rsi
000000000001760a	pushq	%rdx
000000000001760b	pushq	%rcx
000000000001760c	pushq	%r8
000000000001760e	pushq	%r9
0000000000017610	pushq	%r10
0000000000017612	pushq	%r11
0000000000017614	pushq	%r12
0000000000017616	pushq	%r13
0000000000017618	pushq	%r14
000000000001761a	pushq	%r15
000000000001761c	subq	$0x10, %rsp
0000000000017620	movss	%xmm0, (%rsp)
0000000000017625	subq	$0x10, %rsp
0000000000017629	movss	%xmm1, (%rsp)
000000000001762e	pushq	%rsi
000000000001762f	pushq	%rdi
0000000000017630	callq	__Z7getBasev ## getBase()
0000000000017635	addq	$0x1229e0, %rax
000000000001763b	popq	%rdi
000000000001763c	popq	%rsi
000000000001763d	movss	(%rsp), %xmm1
0000000000017642	addq	$0x10, %rsp
0000000000017646	movss	(%rsp), %xmm0
000000000001764b	addq	$0x10, %rsp
000000000001764f	popq	%r15
0000000000017651	popq	%r14
0000000000017653	popq	%r13
0000000000017655	popq	%r12
0000000000017657	popq	%r11
0000000000017659	popq	%r10
000000000001765b	popq	%r9
000000000001765d	popq	%r8
000000000001765f	popq	%rcx
0000000000017660	popq	%rdx
0000000000017661	popq	%rsi
0000000000017662	popq	%rdi
0000000000017663	popq	%rbx
0000000000017664	popq	%rbp
0000000000017665	jmpq	*%rax
__ZN7cocos2d6CCNode10setVertexZEf:
0000000000017667	pushq	%rbp
0000000000017668	movq	%rsp, %rbp
000000000001766b	pushq	%rbx
000000000001766c	pushq	%rdi
000000000001766d	pushq	%rsi
000000000001766e	pushq	%rdx
000000000001766f	pushq	%rcx
0000000000017670	pushq	%r8
0000000000017672	pushq	%r9
0000000000017674	pushq	%r10
0000000000017676	pushq	%r11
0000000000017678	pushq	%r12
000000000001767a	pushq	%r13
000000000001767c	pushq	%r14
000000000001767e	pushq	%r15
0000000000017680	subq	$0x10, %rsp
0000000000017684	movss	%xmm0, (%rsp)
0000000000017689	subq	$0x10, %rsp
000000000001768d	movss	%xmm1, (%rsp)
0000000000017692	pushq	%rsi
0000000000017693	pushq	%rdi
0000000000017694	callq	__Z7getBasev ## getBase()
0000000000017699	addq	$0x1229f0, %rax
000000000001769f	popq	%rdi
00000000000176a0	popq	%rsi
00000000000176a1	movss	(%rsp), %xmm1
00000000000176a6	addq	$0x10, %rsp
00000000000176aa	movss	(%rsp), %xmm0
00000000000176af	addq	$0x10, %rsp
00000000000176b3	popq	%r15
00000000000176b5	popq	%r14
00000000000176b7	popq	%r13
00000000000176b9	popq	%r12
00000000000176bb	popq	%r11
00000000000176bd	popq	%r10
00000000000176bf	popq	%r9
00000000000176c1	popq	%r8
00000000000176c3	popq	%rcx
00000000000176c4	popq	%rdx
00000000000176c5	popq	%rsi
00000000000176c6	popq	%rdi
00000000000176c7	popq	%rbx
00000000000176c8	popq	%rbp
00000000000176c9	jmpq	*%rax
__ZN7cocos2d6CCNode10setVisibleEb:
00000000000176cb	pushq	%rbp
00000000000176cc	movq	%rsp, %rbp
00000000000176cf	pushq	%rbx
00000000000176d0	pushq	%rdi
00000000000176d1	pushq	%rsi
00000000000176d2	pushq	%rdx
00000000000176d3	pushq	%rcx
00000000000176d4	pushq	%r8
00000000000176d6	pushq	%r9
00000000000176d8	pushq	%r10
00000000000176da	pushq	%r11
00000000000176dc	pushq	%r12
00000000000176de	pushq	%r13
00000000000176e0	pushq	%r14
00000000000176e2	pushq	%r15
00000000000176e4	subq	$0x10, %rsp
00000000000176e8	movss	%xmm0, (%rsp)
00000000000176ed	subq	$0x10, %rsp
00000000000176f1	movss	%xmm1, (%rsp)
00000000000176f6	pushq	%rsi
00000000000176f7	pushq	%rdi
00000000000176f8	callq	__Z7getBasev ## getBase()
00000000000176fd	addq	$0x122d60, %rax
0000000000017703	popq	%rdi
0000000000017704	popq	%rsi
0000000000017705	movss	(%rsp), %xmm1
000000000001770a	addq	$0x10, %rsp
000000000001770e	movss	(%rsp), %xmm0
0000000000017713	addq	$0x10, %rsp
0000000000017717	popq	%r15
0000000000017719	popq	%r14
000000000001771b	popq	%r13
000000000001771d	popq	%r12
000000000001771f	popq	%r11
0000000000017721	popq	%r10
0000000000017723	popq	%r9
0000000000017725	popq	%r8
0000000000017727	popq	%rcx
0000000000017728	popq	%rdx
0000000000017729	popq	%rsi
000000000001772a	popq	%rdi
000000000001772b	popq	%rbx
000000000001772c	popq	%rbp
000000000001772d	jmpq	*%rax
__ZN7cocos2d6CCNode10unscheduleEMNS_8CCObjectEFvfE:
000000000001772f	pushq	%rbp
0000000000017730	movq	%rsp, %rbp
0000000000017733	pushq	%rbx
0000000000017734	pushq	%rdi
0000000000017735	pushq	%rsi
0000000000017736	pushq	%rdx
0000000000017737	pushq	%rcx
0000000000017738	pushq	%r8
000000000001773a	pushq	%r9
000000000001773c	pushq	%r10
000000000001773e	pushq	%r11
0000000000017740	pushq	%r12
0000000000017742	pushq	%r13
0000000000017744	pushq	%r14
0000000000017746	pushq	%r15
0000000000017748	subq	$0x10, %rsp
000000000001774c	movss	%xmm0, (%rsp)
0000000000017751	subq	$0x10, %rsp
0000000000017755	movss	%xmm1, (%rsp)
000000000001775a	pushq	%rsi
000000000001775b	pushq	%rdi
000000000001775c	callq	__Z7getBasev ## getBase()
0000000000017761	addq	$0x124180, %rax
0000000000017767	popq	%rdi
0000000000017768	popq	%rsi
0000000000017769	movss	(%rsp), %xmm1
000000000001776e	addq	$0x10, %rsp
0000000000017772	movss	(%rsp), %xmm0
0000000000017777	addq	$0x10, %rsp
000000000001777b	popq	%r15
000000000001777d	popq	%r14
000000000001777f	popq	%r13
0000000000017781	popq	%r12
0000000000017783	popq	%r11
0000000000017785	popq	%r10
0000000000017787	popq	%r9
0000000000017789	popq	%r8
000000000001778b	popq	%rcx
000000000001778c	popq	%rdx
000000000001778d	popq	%rsi
000000000001778e	popq	%rdi
000000000001778f	popq	%rbx
0000000000017790	popq	%rbp
0000000000017791	jmpq	*%rax
__ZN7cocos2d6CCNode11getChildrenEv:
0000000000017793	pushq	%rbp
0000000000017794	movq	%rsp, %rbp
0000000000017797	pushq	%rbx
0000000000017798	pushq	%rdi
0000000000017799	pushq	%rsi
000000000001779a	pushq	%rdx
000000000001779b	pushq	%rcx
000000000001779c	pushq	%r8
000000000001779e	pushq	%r9
00000000000177a0	pushq	%r10
00000000000177a2	pushq	%r11
00000000000177a4	pushq	%r12
00000000000177a6	pushq	%r13
00000000000177a8	pushq	%r14
00000000000177aa	pushq	%r15
00000000000177ac	subq	$0x10, %rsp
00000000000177b0	movss	%xmm0, (%rsp)
00000000000177b5	subq	$0x10, %rsp
00000000000177b9	movss	%xmm1, (%rsp)
00000000000177be	pushq	%rsi
00000000000177bf	pushq	%rdi
00000000000177c0	callq	__Z7getBasev ## getBase()
00000000000177c5	addq	$0x122c80, %rax
00000000000177cb	popq	%rdi
00000000000177cc	popq	%rsi
00000000000177cd	movss	(%rsp), %xmm1
00000000000177d2	addq	$0x10, %rsp
00000000000177d6	movss	(%rsp), %xmm0
00000000000177db	addq	$0x10, %rsp
00000000000177df	popq	%r15
00000000000177e1	popq	%r14
00000000000177e3	popq	%r13
00000000000177e5	popq	%r12
00000000000177e7	popq	%r11
00000000000177e9	popq	%r10
00000000000177eb	popq	%r9
00000000000177ed	popq	%r8
00000000000177ef	popq	%rcx
00000000000177f0	popq	%rdx
00000000000177f1	popq	%rsi
00000000000177f2	popq	%rdi
00000000000177f3	popq	%rbx
00000000000177f4	popq	%rbp
00000000000177f5	jmpq	*%rax
__ZN7cocos2d6CCNode11getPositionEPfS1_:
00000000000177f7	pushq	%rbp
00000000000177f8	movq	%rsp, %rbp
00000000000177fb	pushq	%rbx
00000000000177fc	pushq	%rdi
00000000000177fd	pushq	%rsi
00000000000177fe	pushq	%rdx
00000000000177ff	pushq	%rcx
0000000000017800	pushq	%r8
0000000000017802	pushq	%r9
0000000000017804	pushq	%r10
0000000000017806	pushq	%r11
0000000000017808	pushq	%r12
000000000001780a	pushq	%r13
000000000001780c	pushq	%r14
000000000001780e	pushq	%r15
0000000000017810	subq	$0x10, %rsp
0000000000017814	movss	%xmm0, (%rsp)
0000000000017819	subq	$0x10, %rsp
000000000001781d	movss	%xmm1, (%rsp)
0000000000017822	pushq	%rsi
0000000000017823	pushq	%rdi
0000000000017824	callq	__Z7getBasev ## getBase()
0000000000017829	addq	$0x122b90, %rax
000000000001782f	popq	%rdi
0000000000017830	popq	%rsi
0000000000017831	movss	(%rsp), %xmm1
0000000000017836	addq	$0x10, %rsp
000000000001783a	movss	(%rsp), %xmm0
000000000001783f	addq	$0x10, %rsp
0000000000017843	popq	%r15
0000000000017845	popq	%r14
0000000000017847	popq	%r13
0000000000017849	popq	%r12
000000000001784b	popq	%r11
000000000001784d	popq	%r10
000000000001784f	popq	%r9
0000000000017851	popq	%r8
0000000000017853	popq	%rcx
0000000000017854	popq	%rdx
0000000000017855	popq	%rsi
0000000000017856	popq	%rdi
0000000000017857	popq	%rbx
0000000000017858	popq	%rbp
0000000000017859	jmpq	*%rax
__ZN7cocos2d6CCNode11getPositionEv:
000000000001785b	pushq	%rbp
000000000001785c	movq	%rsp, %rbp
000000000001785f	pushq	%rbx
0000000000017860	pushq	%rdi
0000000000017861	pushq	%rsi
0000000000017862	pushq	%rdx
0000000000017863	pushq	%rcx
0000000000017864	pushq	%r8
0000000000017866	pushq	%r9
0000000000017868	pushq	%r10
000000000001786a	pushq	%r11
000000000001786c	pushq	%r12
000000000001786e	pushq	%r13
0000000000017870	pushq	%r14
0000000000017872	pushq	%r15
0000000000017874	subq	$0x10, %rsp
0000000000017878	movss	%xmm0, (%rsp)
000000000001787d	subq	$0x10, %rsp
0000000000017881	movss	%xmm1, (%rsp)
0000000000017886	pushq	%rsi
0000000000017887	pushq	%rdi
0000000000017888	callq	__Z7getBasev ## getBase()
000000000001788d	addq	$0x122b60, %rax
0000000000017893	popq	%rdi
0000000000017894	popq	%rsi
0000000000017895	movss	(%rsp), %xmm1
000000000001789a	addq	$0x10, %rsp
000000000001789e	movss	(%rsp), %xmm0
00000000000178a3	addq	$0x10, %rsp
00000000000178a7	popq	%r15
00000000000178a9	popq	%r14
00000000000178ab	popq	%r13
00000000000178ad	popq	%r12
00000000000178af	popq	%r11
00000000000178b1	popq	%r10
00000000000178b3	popq	%r9
00000000000178b5	popq	%r8
00000000000178b7	popq	%rcx
00000000000178b8	popq	%rdx
00000000000178b9	popq	%rsi
00000000000178ba	popq	%rdi
00000000000178bb	popq	%rbx
00000000000178bc	popq	%rbp
00000000000178bd	jmpq	*%rax
__ZN7cocos2d6CCNode11getRotationEv:
00000000000178bf	pushq	%rbp
00000000000178c0	movq	%rsp, %rbp
00000000000178c3	pushq	%rbx
00000000000178c4	pushq	%rdi
00000000000178c5	pushq	%rsi
00000000000178c6	pushq	%rdx
00000000000178c7	pushq	%rcx
00000000000178c8	pushq	%r8
00000000000178ca	pushq	%r9
00000000000178cc	pushq	%r10
00000000000178ce	pushq	%r11
00000000000178d0	pushq	%r12
00000000000178d2	pushq	%r13
00000000000178d4	pushq	%r14
00000000000178d6	pushq	%r15
00000000000178d8	subq	$0x10, %rsp
00000000000178dc	movss	%xmm0, (%rsp)
00000000000178e1	subq	$0x10, %rsp
00000000000178e5	movss	%xmm1, (%rsp)
00000000000178ea	pushq	%rsi
00000000000178eb	pushq	%rdi
00000000000178ec	callq	__Z7getBasev ## getBase()
00000000000178f1	addq	$0x122a00, %rax
00000000000178f7	popq	%rdi
00000000000178f8	popq	%rsi
00000000000178f9	movss	(%rsp), %xmm1
00000000000178fe	addq	$0x10, %rsp
0000000000017902	movss	(%rsp), %xmm0
0000000000017907	addq	$0x10, %rsp
000000000001790b	popq	%r15
000000000001790d	popq	%r14
000000000001790f	popq	%r13
0000000000017911	popq	%r12
0000000000017913	popq	%r11
0000000000017915	popq	%r10
0000000000017917	popq	%r9
0000000000017919	popq	%r8
000000000001791b	popq	%rcx
000000000001791c	popq	%rdx
000000000001791d	popq	%rsi
000000000001791e	popq	%rdi
000000000001791f	popq	%rbx
0000000000017920	popq	%rbp
0000000000017921	jmpq	*%rax
__ZN7cocos2d6CCNode11getUserDataEv:
0000000000017923	pushq	%rbp
0000000000017924	movq	%rsp, %rbp
0000000000017927	pushq	%rbx
0000000000017928	pushq	%rdi
0000000000017929	pushq	%rsi
000000000001792a	pushq	%rdx
000000000001792b	pushq	%rcx
000000000001792c	pushq	%r8
000000000001792e	pushq	%r9
0000000000017930	pushq	%r10
0000000000017932	pushq	%r11
0000000000017934	pushq	%r12
0000000000017936	pushq	%r13
0000000000017938	pushq	%r14
000000000001793a	pushq	%r15
000000000001793c	subq	$0x10, %rsp
0000000000017940	movss	%xmm0, (%rsp)
0000000000017945	subq	$0x10, %rsp
0000000000017949	movss	%xmm1, (%rsp)
000000000001794e	pushq	%rsi
000000000001794f	pushq	%rdi
0000000000017950	callq	__Z7getBasev ## getBase()
0000000000017955	addq	$0x122f30, %rax
000000000001795b	popq	%rdi
000000000001795c	popq	%rsi
000000000001795d	movss	(%rsp), %xmm1
0000000000017962	addq	$0x10, %rsp
0000000000017966	movss	(%rsp), %xmm0
000000000001796b	addq	$0x10, %rsp
000000000001796f	popq	%r15
0000000000017971	popq	%r14
0000000000017973	popq	%r13
0000000000017975	popq	%r12
0000000000017977	popq	%r11
0000000000017979	popq	%r10
000000000001797b	popq	%r9
000000000001797d	popq	%r8
000000000001797f	popq	%rcx
0000000000017980	popq	%rdx
0000000000017981	popq	%rsi
0000000000017982	popq	%rdi
0000000000017983	popq	%rbx
0000000000017984	popq	%rbp
0000000000017985	jmpq	*%rax
__ZN7cocos2d6CCNode11removeChildEPS0_:
0000000000017987	pushq	%rbp
0000000000017988	movq	%rsp, %rbp
000000000001798b	pushq	%rbx
000000000001798c	pushq	%rdi
000000000001798d	pushq	%rsi
000000000001798e	pushq	%rdx
000000000001798f	pushq	%rcx
0000000000017990	pushq	%r8
0000000000017992	pushq	%r9
0000000000017994	pushq	%r10
0000000000017996	pushq	%r11
0000000000017998	pushq	%r12
000000000001799a	pushq	%r13
000000000001799c	pushq	%r14
000000000001799e	pushq	%r15
00000000000179a0	subq	$0x10, %rsp
00000000000179a4	movss	%xmm0, (%rsp)
00000000000179a9	subq	$0x10, %rsp
00000000000179ad	movss	%xmm1, (%rsp)
00000000000179b2	pushq	%rsi
00000000000179b3	pushq	%rdi
00000000000179b4	callq	__Z7getBasev ## getBase()
00000000000179b9	addq	$0x123460, %rax
00000000000179bf	popq	%rdi
00000000000179c0	popq	%rsi
00000000000179c1	movss	(%rsp), %xmm1
00000000000179c6	addq	$0x10, %rsp
00000000000179ca	movss	(%rsp), %xmm0
00000000000179cf	addq	$0x10, %rsp
00000000000179d3	popq	%r15
00000000000179d5	popq	%r14
00000000000179d7	popq	%r13
00000000000179d9	popq	%r12
00000000000179db	popq	%r11
00000000000179dd	popq	%r10
00000000000179df	popq	%r9
00000000000179e1	popq	%r8
00000000000179e3	popq	%rcx
00000000000179e4	popq	%rdx
00000000000179e5	popq	%rsi
00000000000179e6	popq	%rdi
00000000000179e7	popq	%rbx
00000000000179e8	popq	%rbp
00000000000179e9	jmpq	*%rax
__ZN7cocos2d6CCNode11removeChildEPS0_b:
00000000000179eb	pushq	%rbp
00000000000179ec	movq	%rsp, %rbp
00000000000179ef	pushq	%rbx
00000000000179f0	pushq	%rdi
00000000000179f1	pushq	%rsi
00000000000179f2	pushq	%rdx
00000000000179f3	pushq	%rcx
00000000000179f4	pushq	%r8
00000000000179f6	pushq	%r9
00000000000179f8	pushq	%r10
00000000000179fa	pushq	%r11
00000000000179fc	pushq	%r12
00000000000179fe	pushq	%r13
0000000000017a00	pushq	%r14
0000000000017a02	pushq	%r15
0000000000017a04	subq	$0x10, %rsp
0000000000017a08	movss	%xmm0, (%rsp)
0000000000017a0d	subq	$0x10, %rsp
0000000000017a11	movss	%xmm1, (%rsp)
0000000000017a16	pushq	%rsi
0000000000017a17	pushq	%rdi
0000000000017a18	callq	__Z7getBasev ## getBase()
0000000000017a1d	addq	$0x123480, %rax
0000000000017a23	popq	%rdi
0000000000017a24	popq	%rsi
0000000000017a25	movss	(%rsp), %xmm1
0000000000017a2a	addq	$0x10, %rsp
0000000000017a2e	movss	(%rsp), %xmm0
0000000000017a33	addq	$0x10, %rsp
0000000000017a37	popq	%r15
0000000000017a39	popq	%r14
0000000000017a3b	popq	%r13
0000000000017a3d	popq	%r12
0000000000017a3f	popq	%r11
0000000000017a41	popq	%r10
0000000000017a43	popq	%r9
0000000000017a45	popq	%r8
0000000000017a47	popq	%rcx
0000000000017a48	popq	%rdx
0000000000017a49	popq	%rsi
0000000000017a4a	popq	%rdi
0000000000017a4b	popq	%rbx
0000000000017a4c	popq	%rbp
0000000000017a4d	jmpq	*%rax
__ZN7cocos2d6CCNode11setPositionEff:
0000000000017a4f	pushq	%rbp
0000000000017a50	movq	%rsp, %rbp
0000000000017a53	pushq	%rbx
0000000000017a54	pushq	%rdi
0000000000017a55	pushq	%rsi
0000000000017a56	pushq	%rdx
0000000000017a57	pushq	%rcx
0000000000017a58	pushq	%r8
0000000000017a5a	pushq	%r9
0000000000017a5c	pushq	%r10
0000000000017a5e	pushq	%r11
0000000000017a60	pushq	%r12
0000000000017a62	pushq	%r13
0000000000017a64	pushq	%r14
0000000000017a66	pushq	%r15
0000000000017a68	subq	$0x10, %rsp
0000000000017a6c	movss	%xmm0, (%rsp)
0000000000017a71	subq	$0x10, %rsp
0000000000017a75	movss	%xmm1, (%rsp)
0000000000017a7a	pushq	%rsi
0000000000017a7b	pushq	%rdi
0000000000017a7c	callq	__Z7getBasev ## getBase()
0000000000017a81	addq	$0x122ba0, %rax
0000000000017a87	popq	%rdi
0000000000017a88	popq	%rsi
0000000000017a89	movss	(%rsp), %xmm1
0000000000017a8e	addq	$0x10, %rsp
0000000000017a92	movss	(%rsp), %xmm0
0000000000017a97	addq	$0x10, %rsp
0000000000017a9b	popq	%r15
0000000000017a9d	popq	%r14
0000000000017a9f	popq	%r13
0000000000017aa1	popq	%r12
0000000000017aa3	popq	%r11
0000000000017aa5	popq	%r10
0000000000017aa7	popq	%r9
0000000000017aa9	popq	%r8
0000000000017aab	popq	%rcx
0000000000017aac	popq	%rdx
0000000000017aad	popq	%rsi
0000000000017aae	popq	%rdi
0000000000017aaf	popq	%rbx
0000000000017ab0	popq	%rbp
0000000000017ab1	jmpq	*%rax
__ZN7cocos2d6CCNode11setPositionERKNS_7CCPointE:
0000000000017ab3	pushq	%rbp
0000000000017ab4	movq	%rsp, %rbp
0000000000017ab7	pushq	%rbx
0000000000017ab8	pushq	%rdi
0000000000017ab9	pushq	%rsi
0000000000017aba	pushq	%rdx
0000000000017abb	pushq	%rcx
0000000000017abc	pushq	%r8
0000000000017abe	pushq	%r9
0000000000017ac0	pushq	%r10
0000000000017ac2	pushq	%r11
0000000000017ac4	pushq	%r12
0000000000017ac6	pushq	%r13
0000000000017ac8	pushq	%r14
0000000000017aca	pushq	%r15
0000000000017acc	subq	$0x10, %rsp
0000000000017ad0	movss	%xmm0, (%rsp)
0000000000017ad5	subq	$0x10, %rsp
0000000000017ad9	movss	%xmm1, (%rsp)
0000000000017ade	pushq	%rsi
0000000000017adf	pushq	%rdi
0000000000017ae0	callq	__Z7getBasev ## getBase()
0000000000017ae5	addq	$0x122b70, %rax
0000000000017aeb	popq	%rdi
0000000000017aec	popq	%rsi
0000000000017aed	movss	(%rsp), %xmm1
0000000000017af2	addq	$0x10, %rsp
0000000000017af6	movss	(%rsp), %xmm0
0000000000017afb	addq	$0x10, %rsp
0000000000017aff	popq	%r15
0000000000017b01	popq	%r14
0000000000017b03	popq	%r13
0000000000017b05	popq	%r12
0000000000017b07	popq	%r11
0000000000017b09	popq	%r10
0000000000017b0b	popq	%r9
0000000000017b0d	popq	%r8
0000000000017b0f	popq	%rcx
0000000000017b10	popq	%rdx
0000000000017b11	popq	%rsi
0000000000017b12	popq	%rdi
0000000000017b13	popq	%rbx
0000000000017b14	popq	%rbp
0000000000017b15	jmpq	*%rax
__ZN7cocos2d6CCNode11setRotationEf:
0000000000017b17	pushq	%rbp
0000000000017b18	movq	%rsp, %rbp
0000000000017b1b	pushq	%rbx
0000000000017b1c	pushq	%rdi
0000000000017b1d	pushq	%rsi
0000000000017b1e	pushq	%rdx
0000000000017b1f	pushq	%rcx
0000000000017b20	pushq	%r8
0000000000017b22	pushq	%r9
0000000000017b24	pushq	%r10
0000000000017b26	pushq	%r11
0000000000017b28	pushq	%r12
0000000000017b2a	pushq	%r13
0000000000017b2c	pushq	%r14
0000000000017b2e	pushq	%r15
0000000000017b30	subq	$0x10, %rsp
0000000000017b34	movss	%xmm0, (%rsp)
0000000000017b39	subq	$0x10, %rsp
0000000000017b3d	movss	%xmm1, (%rsp)
0000000000017b42	pushq	%rsi
0000000000017b43	pushq	%rdi
0000000000017b44	callq	__Z7getBasev ## getBase()
0000000000017b49	addq	$0x122a10, %rax
0000000000017b4f	popq	%rdi
0000000000017b50	popq	%rsi
0000000000017b51	movss	(%rsp), %xmm1
0000000000017b56	addq	$0x10, %rsp
0000000000017b5a	movss	(%rsp), %xmm0
0000000000017b5f	addq	$0x10, %rsp
0000000000017b63	popq	%r15
0000000000017b65	popq	%r14
0000000000017b67	popq	%r13
0000000000017b69	popq	%r12
0000000000017b6b	popq	%r11
0000000000017b6d	popq	%r10
0000000000017b6f	popq	%r9
0000000000017b71	popq	%r8
0000000000017b73	popq	%rcx
0000000000017b74	popq	%rdx
0000000000017b75	popq	%rsi
0000000000017b76	popq	%rdi
0000000000017b77	popq	%rbx
0000000000017b78	popq	%rbp
0000000000017b79	jmpq	*%rax
__ZN7cocos2d6CCNode11setUserDataEPv:
0000000000017b7b	pushq	%rbp
0000000000017b7c	movq	%rsp, %rbp
0000000000017b7f	pushq	%rbx
0000000000017b80	pushq	%rdi
0000000000017b81	pushq	%rsi
0000000000017b82	pushq	%rdx
0000000000017b83	pushq	%rcx
0000000000017b84	pushq	%r8
0000000000017b86	pushq	%r9
0000000000017b88	pushq	%r10
0000000000017b8a	pushq	%r11
0000000000017b8c	pushq	%r12
0000000000017b8e	pushq	%r13
0000000000017b90	pushq	%r14
0000000000017b92	pushq	%r15
0000000000017b94	subq	$0x10, %rsp
0000000000017b98	movss	%xmm0, (%rsp)
0000000000017b9d	subq	$0x10, %rsp
0000000000017ba1	movss	%xmm1, (%rsp)
0000000000017ba6	pushq	%rsi
0000000000017ba7	pushq	%rdi
0000000000017ba8	callq	__Z7getBasev ## getBase()
0000000000017bad	addq	$0x122f40, %rax
0000000000017bb3	popq	%rdi
0000000000017bb4	popq	%rsi
0000000000017bb5	movss	(%rsp), %xmm1
0000000000017bba	addq	$0x10, %rsp
0000000000017bbe	movss	(%rsp), %xmm0
0000000000017bc3	addq	$0x10, %rsp
0000000000017bc7	popq	%r15
0000000000017bc9	popq	%r14
0000000000017bcb	popq	%r13
0000000000017bcd	popq	%r12
0000000000017bcf	popq	%r11
0000000000017bd1	popq	%r10
0000000000017bd3	popq	%r9
0000000000017bd5	popq	%r8
0000000000017bd7	popq	%rcx
0000000000017bd8	popq	%rdx
0000000000017bd9	popq	%rsi
0000000000017bda	popq	%rdi
0000000000017bdb	popq	%rbx
0000000000017bdc	popq	%rbp
0000000000017bdd	jmpq	*%rax
__ZN7cocos2d6CCNode12addComponentEPNS_11CCComponentE:
0000000000017bdf	pushq	%rbp
0000000000017be0	movq	%rsp, %rbp
0000000000017be3	pushq	%rbx
0000000000017be4	pushq	%rdi
0000000000017be5	pushq	%rsi
0000000000017be6	pushq	%rdx
0000000000017be7	pushq	%rcx
0000000000017be8	pushq	%r8
0000000000017bea	pushq	%r9
0000000000017bec	pushq	%r10
0000000000017bee	pushq	%r11
0000000000017bf0	pushq	%r12
0000000000017bf2	pushq	%r13
0000000000017bf4	pushq	%r14
0000000000017bf6	pushq	%r15
0000000000017bf8	subq	$0x10, %rsp
0000000000017bfc	movss	%xmm0, (%rsp)
0000000000017c01	subq	$0x10, %rsp
0000000000017c05	movss	%xmm1, (%rsp)
0000000000017c0a	pushq	%rsi
0000000000017c0b	pushq	%rdi
0000000000017c0c	callq	__Z7getBasev ## getBase()
0000000000017c11	addq	$0x124a40, %rax
0000000000017c17	popq	%rdi
0000000000017c18	popq	%rsi
0000000000017c19	movss	(%rsp), %xmm1
0000000000017c1e	addq	$0x10, %rsp
0000000000017c22	movss	(%rsp), %xmm0
0000000000017c27	addq	$0x10, %rsp
0000000000017c2b	popq	%r15
0000000000017c2d	popq	%r14
0000000000017c2f	popq	%r13
0000000000017c31	popq	%r12
0000000000017c33	popq	%r11
0000000000017c35	popq	%r10
0000000000017c37	popq	%r9
0000000000017c39	popq	%r8
0000000000017c3b	popq	%rcx
0000000000017c3c	popq	%rdx
0000000000017c3d	popq	%rsi
0000000000017c3e	popq	%rdi
0000000000017c3f	popq	%rbx
0000000000017c40	popq	%rbp
0000000000017c41	jmpq	*%rax
__ZN7cocos2d6CCNode12getPositionXEv:
0000000000017c43	pushq	%rbp
0000000000017c44	movq	%rsp, %rbp
0000000000017c47	pushq	%rbx
0000000000017c48	pushq	%rdi
0000000000017c49	pushq	%rsi
0000000000017c4a	pushq	%rdx
0000000000017c4b	pushq	%rcx
0000000000017c4c	pushq	%r8
0000000000017c4e	pushq	%r9
0000000000017c50	pushq	%r10
0000000000017c52	pushq	%r11
0000000000017c54	pushq	%r12
0000000000017c56	pushq	%r13
0000000000017c58	pushq	%r14
0000000000017c5a	pushq	%r15
0000000000017c5c	subq	$0x10, %rsp
0000000000017c60	movss	%xmm0, (%rsp)
0000000000017c65	subq	$0x10, %rsp
0000000000017c69	movss	%xmm1, (%rsp)
0000000000017c6e	pushq	%rsi
0000000000017c6f	pushq	%rdi
0000000000017c70	callq	__Z7getBasev ## getBase()
0000000000017c75	addq	$0x122be0, %rax
0000000000017c7b	popq	%rdi
0000000000017c7c	popq	%rsi
0000000000017c7d	movss	(%rsp), %xmm1
0000000000017c82	addq	$0x10, %rsp
0000000000017c86	movss	(%rsp), %xmm0
0000000000017c8b	addq	$0x10, %rsp
0000000000017c8f	popq	%r15
0000000000017c91	popq	%r14
0000000000017c93	popq	%r13
0000000000017c95	popq	%r12
0000000000017c97	popq	%r11
0000000000017c99	popq	%r10
0000000000017c9b	popq	%r9
0000000000017c9d	popq	%r8
0000000000017c9f	popq	%rcx
0000000000017ca0	popq	%rdx
0000000000017ca1	popq	%rsi
0000000000017ca2	popq	%rdi
0000000000017ca3	popq	%rbx
0000000000017ca4	popq	%rbp
0000000000017ca5	jmpq	*%rax
__ZN7cocos2d6CCNode12getPositionYEv:
0000000000017ca7	pushq	%rbp
0000000000017ca8	movq	%rsp, %rbp
0000000000017cab	pushq	%rbx
0000000000017cac	pushq	%rdi
0000000000017cad	pushq	%rsi
0000000000017cae	pushq	%rdx
0000000000017caf	pushq	%rcx
0000000000017cb0	pushq	%r8
0000000000017cb2	pushq	%r9
0000000000017cb4	pushq	%r10
0000000000017cb6	pushq	%r11
0000000000017cb8	pushq	%r12
0000000000017cba	pushq	%r13
0000000000017cbc	pushq	%r14
0000000000017cbe	pushq	%r15
0000000000017cc0	subq	$0x10, %rsp
0000000000017cc4	movss	%xmm0, (%rsp)
0000000000017cc9	subq	$0x10, %rsp
0000000000017ccd	movss	%xmm1, (%rsp)
0000000000017cd2	pushq	%rsi
0000000000017cd3	pushq	%rdi
0000000000017cd4	callq	__Z7getBasev ## getBase()
0000000000017cd9	addq	$0x122bf0, %rax
0000000000017cdf	popq	%rdi
0000000000017ce0	popq	%rsi
0000000000017ce1	movss	(%rsp), %xmm1
0000000000017ce6	addq	$0x10, %rsp
0000000000017cea	movss	(%rsp), %xmm0
0000000000017cef	addq	$0x10, %rsp
0000000000017cf3	popq	%r15
0000000000017cf5	popq	%r14
0000000000017cf7	popq	%r13
0000000000017cf9	popq	%r12
0000000000017cfb	popq	%r11
0000000000017cfd	popq	%r10
0000000000017cff	popq	%r9
0000000000017d01	popq	%r8
0000000000017d03	popq	%rcx
0000000000017d04	popq	%rdx
0000000000017d05	popq	%rsi
0000000000017d06	popq	%rdi
0000000000017d07	popq	%rbx
0000000000017d08	popq	%rbp
0000000000017d09	jmpq	*%rax
__ZN7cocos2d6CCNode12getRotationXEv:
0000000000017d0b	pushq	%rbp
0000000000017d0c	movq	%rsp, %rbp
0000000000017d0f	pushq	%rbx
0000000000017d10	pushq	%rdi
0000000000017d11	pushq	%rsi
0000000000017d12	pushq	%rdx
0000000000017d13	pushq	%rcx
0000000000017d14	pushq	%r8
0000000000017d16	pushq	%r9
0000000000017d18	pushq	%r10
0000000000017d1a	pushq	%r11
0000000000017d1c	pushq	%r12
0000000000017d1e	pushq	%r13
0000000000017d20	pushq	%r14
0000000000017d22	pushq	%r15
0000000000017d24	subq	$0x10, %rsp
0000000000017d28	movss	%xmm0, (%rsp)
0000000000017d2d	subq	$0x10, %rsp
0000000000017d31	movss	%xmm1, (%rsp)
0000000000017d36	pushq	%rsi
0000000000017d37	pushq	%rdi
0000000000017d38	callq	__Z7getBasev ## getBase()
0000000000017d3d	addq	$0x122a50, %rax
0000000000017d43	popq	%rdi
0000000000017d44	popq	%rsi
0000000000017d45	movss	(%rsp), %xmm1
0000000000017d4a	addq	$0x10, %rsp
0000000000017d4e	movss	(%rsp), %xmm0
0000000000017d53	addq	$0x10, %rsp
0000000000017d57	popq	%r15
0000000000017d59	popq	%r14
0000000000017d5b	popq	%r13
0000000000017d5d	popq	%r12
0000000000017d5f	popq	%r11
0000000000017d61	popq	%r10
0000000000017d63	popq	%r9
0000000000017d65	popq	%r8
0000000000017d67	popq	%rcx
0000000000017d68	popq	%rdx
0000000000017d69	popq	%rsi
0000000000017d6a	popq	%rdi
0000000000017d6b	popq	%rbx
0000000000017d6c	popq	%rbp
0000000000017d6d	jmpq	*%rax
__ZN7cocos2d6CCNode12getRotationYEv:
0000000000017d6f	pushq	%rbp
0000000000017d70	movq	%rsp, %rbp
0000000000017d73	pushq	%rbx
0000000000017d74	pushq	%rdi
0000000000017d75	pushq	%rsi
0000000000017d76	pushq	%rdx
0000000000017d77	pushq	%rcx
0000000000017d78	pushq	%r8
0000000000017d7a	pushq	%r9
0000000000017d7c	pushq	%r10
0000000000017d7e	pushq	%r11
0000000000017d80	pushq	%r12
0000000000017d82	pushq	%r13
0000000000017d84	pushq	%r14
0000000000017d86	pushq	%r15
0000000000017d88	subq	$0x10, %rsp
0000000000017d8c	movss	%xmm0, (%rsp)
0000000000017d91	subq	$0x10, %rsp
0000000000017d95	movss	%xmm1, (%rsp)
0000000000017d9a	pushq	%rsi
0000000000017d9b	pushq	%rdi
0000000000017d9c	callq	__Z7getBasev ## getBase()
0000000000017da1	addq	$0x122a80, %rax
0000000000017da7	popq	%rdi
0000000000017da8	popq	%rsi
0000000000017da9	movss	(%rsp), %xmm1
0000000000017dae	addq	$0x10, %rsp
0000000000017db2	movss	(%rsp), %xmm0
0000000000017db7	addq	$0x10, %rsp
0000000000017dbb	popq	%r15
0000000000017dbd	popq	%r14
0000000000017dbf	popq	%r13
0000000000017dc1	popq	%r12
0000000000017dc3	popq	%r11
0000000000017dc5	popq	%r10
0000000000017dc7	popq	%r9
0000000000017dc9	popq	%r8
0000000000017dcb	popq	%rcx
0000000000017dcc	popq	%rdx
0000000000017dcd	popq	%rsi
0000000000017dce	popq	%rdi
0000000000017dcf	popq	%rbx
0000000000017dd0	popq	%rbp
0000000000017dd1	jmpq	*%rax
__ZN7cocos2d6CCNode12getSchedulerEv:
0000000000017dd3	pushq	%rbp
0000000000017dd4	movq	%rsp, %rbp
0000000000017dd7	pushq	%rbx
0000000000017dd8	pushq	%rdi
0000000000017dd9	pushq	%rsi
0000000000017dda	pushq	%rdx
0000000000017ddb	pushq	%rcx
0000000000017ddc	pushq	%r8
0000000000017dde	pushq	%r9
0000000000017de0	pushq	%r10
0000000000017de2	pushq	%r11
0000000000017de4	pushq	%r12
0000000000017de6	pushq	%r13
0000000000017de8	pushq	%r14
0000000000017dea	pushq	%r15
0000000000017dec	subq	$0x10, %rsp
0000000000017df0	movss	%xmm0, (%rsp)
0000000000017df5	subq	$0x10, %rsp
0000000000017df9	movss	%xmm1, (%rsp)
0000000000017dfe	pushq	%rsi
0000000000017dff	pushq	%rdi
0000000000017e00	callq	__Z7getBasev ## getBase()
0000000000017e05	addq	$0x123f70, %rax
0000000000017e0b	popq	%rdi
0000000000017e0c	popq	%rsi
0000000000017e0d	movss	(%rsp), %xmm1
0000000000017e12	addq	$0x10, %rsp
0000000000017e16	movss	(%rsp), %xmm0
0000000000017e1b	addq	$0x10, %rsp
0000000000017e1f	popq	%r15
0000000000017e21	popq	%r14
0000000000017e23	popq	%r13
0000000000017e25	popq	%r12
0000000000017e27	popq	%r11
0000000000017e29	popq	%r10
0000000000017e2b	popq	%r9
0000000000017e2d	popq	%r8
0000000000017e2f	popq	%rcx
0000000000017e30	popq	%rdx
0000000000017e31	popq	%rsi
0000000000017e32	popq	%rdi
0000000000017e33	popq	%rbx
0000000000017e34	popq	%rbp
0000000000017e35	jmpq	*%rax
__ZN7cocos2d6CCNode12reorderChildEPS0_i:
0000000000017e37	pushq	%rbp
0000000000017e38	movq	%rsp, %rbp
0000000000017e3b	pushq	%rbx
0000000000017e3c	pushq	%rdi
0000000000017e3d	pushq	%rsi
0000000000017e3e	pushq	%rdx
0000000000017e3f	pushq	%rcx
0000000000017e40	pushq	%r8
0000000000017e42	pushq	%r9
0000000000017e44	pushq	%r10
0000000000017e46	pushq	%r11
0000000000017e48	pushq	%r12
0000000000017e4a	pushq	%r13
0000000000017e4c	pushq	%r14
0000000000017e4e	pushq	%r15
0000000000017e50	subq	$0x10, %rsp
0000000000017e54	movss	%xmm0, (%rsp)
0000000000017e59	subq	$0x10, %rsp
0000000000017e5d	movss	%xmm1, (%rsp)
0000000000017e62	pushq	%rsi
0000000000017e63	pushq	%rdi
0000000000017e64	callq	__Z7getBasev ## getBase()
0000000000017e69	addq	$0x123760, %rax
0000000000017e6f	popq	%rdi
0000000000017e70	popq	%rsi
0000000000017e71	movss	(%rsp), %xmm1
0000000000017e76	addq	$0x10, %rsp
0000000000017e7a	movss	(%rsp), %xmm0
0000000000017e7f	addq	$0x10, %rsp
0000000000017e83	popq	%r15
0000000000017e85	popq	%r14
0000000000017e87	popq	%r13
0000000000017e89	popq	%r12
0000000000017e8b	popq	%r11
0000000000017e8d	popq	%r10
0000000000017e8f	popq	%r9
0000000000017e91	popq	%r8
0000000000017e93	popq	%rcx
0000000000017e94	popq	%rdx
0000000000017e95	popq	%rsi
0000000000017e96	popq	%rdi
0000000000017e97	popq	%rbx
0000000000017e98	popq	%rbp
0000000000017e99	jmpq	*%rax
__ZN7cocos2d6CCNode12setPositionXEf:
0000000000017e9b	pushq	%rbp
0000000000017e9c	movq	%rsp, %rbp
0000000000017e9f	pushq	%rbx
0000000000017ea0	pushq	%rdi
0000000000017ea1	pushq	%rsi
0000000000017ea2	pushq	%rdx
0000000000017ea3	pushq	%rcx
0000000000017ea4	pushq	%r8
0000000000017ea6	pushq	%r9
0000000000017ea8	pushq	%r10
0000000000017eaa	pushq	%r11
0000000000017eac	pushq	%r12
0000000000017eae	pushq	%r13
0000000000017eb0	pushq	%r14
0000000000017eb2	pushq	%r15
0000000000017eb4	subq	$0x10, %rsp
0000000000017eb8	movss	%xmm0, (%rsp)
0000000000017ebd	subq	$0x10, %rsp
0000000000017ec1	movss	%xmm1, (%rsp)
0000000000017ec6	pushq	%rsi
0000000000017ec7	pushq	%rdi
0000000000017ec8	callq	__Z7getBasev ## getBase()
0000000000017ecd	addq	$0x122c00, %rax
0000000000017ed3	popq	%rdi
0000000000017ed4	popq	%rsi
0000000000017ed5	movss	(%rsp), %xmm1
0000000000017eda	addq	$0x10, %rsp
0000000000017ede	movss	(%rsp), %xmm0
0000000000017ee3	addq	$0x10, %rsp
0000000000017ee7	popq	%r15
0000000000017ee9	popq	%r14
0000000000017eeb	popq	%r13
0000000000017eed	popq	%r12
0000000000017eef	popq	%r11
0000000000017ef1	popq	%r10
0000000000017ef3	popq	%r9
0000000000017ef5	popq	%r8
0000000000017ef7	popq	%rcx
0000000000017ef8	popq	%rdx
0000000000017ef9	popq	%rsi
0000000000017efa	popq	%rdi
0000000000017efb	popq	%rbx
0000000000017efc	popq	%rbp
0000000000017efd	jmpq	*%rax
__ZN7cocos2d6CCNode12setPositionYEf:
0000000000017eff	pushq	%rbp
0000000000017f00	movq	%rsp, %rbp
0000000000017f03	pushq	%rbx
0000000000017f04	pushq	%rdi
0000000000017f05	pushq	%rsi
0000000000017f06	pushq	%rdx
0000000000017f07	pushq	%rcx
0000000000017f08	pushq	%r8
0000000000017f0a	pushq	%r9
0000000000017f0c	pushq	%r10
0000000000017f0e	pushq	%r11
0000000000017f10	pushq	%r12
0000000000017f12	pushq	%r13
0000000000017f14	pushq	%r14
0000000000017f16	pushq	%r15
0000000000017f18	subq	$0x10, %rsp
0000000000017f1c	movss	%xmm0, (%rsp)
0000000000017f21	subq	$0x10, %rsp
0000000000017f25	movss	%xmm1, (%rsp)
0000000000017f2a	pushq	%rsi
0000000000017f2b	pushq	%rdi
0000000000017f2c	callq	__Z7getBasev ## getBase()
0000000000017f31	addq	$0x122c40, %rax
0000000000017f37	popq	%rdi
0000000000017f38	popq	%rsi
0000000000017f39	movss	(%rsp), %xmm1
0000000000017f3e	addq	$0x10, %rsp
0000000000017f42	movss	(%rsp), %xmm0
0000000000017f47	addq	$0x10, %rsp
0000000000017f4b	popq	%r15
0000000000017f4d	popq	%r14
0000000000017f4f	popq	%r13
0000000000017f51	popq	%r12
0000000000017f53	popq	%r11
0000000000017f55	popq	%r10
0000000000017f57	popq	%r9
0000000000017f59	popq	%r8
0000000000017f5b	popq	%rcx
0000000000017f5c	popq	%rdx
0000000000017f5d	popq	%rsi
0000000000017f5e	popq	%rdi
0000000000017f5f	popq	%rbx
0000000000017f60	popq	%rbp
0000000000017f61	jmpq	*%rax
__ZN7cocos2d6CCNode12setRotationXEf:
0000000000017f63	pushq	%rbp
0000000000017f64	movq	%rsp, %rbp
0000000000017f67	pushq	%rbx
0000000000017f68	pushq	%rdi
0000000000017f69	pushq	%rsi
0000000000017f6a	pushq	%rdx
0000000000017f6b	pushq	%rcx
0000000000017f6c	pushq	%r8
0000000000017f6e	pushq	%r9
0000000000017f70	pushq	%r10
0000000000017f72	pushq	%r11
0000000000017f74	pushq	%r12
0000000000017f76	pushq	%r13
0000000000017f78	pushq	%r14
0000000000017f7a	pushq	%r15
0000000000017f7c	subq	$0x10, %rsp
0000000000017f80	movss	%xmm0, (%rsp)
0000000000017f85	subq	$0x10, %rsp
0000000000017f89	movss	%xmm1, (%rsp)
0000000000017f8e	pushq	%rsi
0000000000017f8f	pushq	%rdi
0000000000017f90	callq	__Z7getBasev ## getBase()
0000000000017f95	addq	$0x122a60, %rax
0000000000017f9b	popq	%rdi
0000000000017f9c	popq	%rsi
0000000000017f9d	movss	(%rsp), %xmm1
0000000000017fa2	addq	$0x10, %rsp
0000000000017fa6	movss	(%rsp), %xmm0
0000000000017fab	addq	$0x10, %rsp
0000000000017faf	popq	%r15
0000000000017fb1	popq	%r14
0000000000017fb3	popq	%r13
0000000000017fb5	popq	%r12
0000000000017fb7	popq	%r11
0000000000017fb9	popq	%r10
0000000000017fbb	popq	%r9
0000000000017fbd	popq	%r8
0000000000017fbf	popq	%rcx
0000000000017fc0	popq	%rdx
0000000000017fc1	popq	%rsi
0000000000017fc2	popq	%rdi
0000000000017fc3	popq	%rbx
0000000000017fc4	popq	%rbp
0000000000017fc5	jmpq	*%rax
__ZN7cocos2d6CCNode12setRotationYEf:
0000000000017fc7	pushq	%rbp
0000000000017fc8	movq	%rsp, %rbp
0000000000017fcb	pushq	%rbx
0000000000017fcc	pushq	%rdi
0000000000017fcd	pushq	%rsi
0000000000017fce	pushq	%rdx
0000000000017fcf	pushq	%rcx
0000000000017fd0	pushq	%r8
0000000000017fd2	pushq	%r9
0000000000017fd4	pushq	%r10
0000000000017fd6	pushq	%r11
0000000000017fd8	pushq	%r12
0000000000017fda	pushq	%r13
0000000000017fdc	pushq	%r14
0000000000017fde	pushq	%r15
0000000000017fe0	subq	$0x10, %rsp
0000000000017fe4	movss	%xmm0, (%rsp)
0000000000017fe9	subq	$0x10, %rsp
0000000000017fed	movss	%xmm1, (%rsp)
0000000000017ff2	pushq	%rsi
0000000000017ff3	pushq	%rdi
0000000000017ff4	callq	__Z7getBasev ## getBase()
0000000000017ff9	addq	$0x122a90, %rax
0000000000017fff	popq	%rdi
0000000000018000	popq	%rsi
0000000000018001	movss	(%rsp), %xmm1
0000000000018006	addq	$0x10, %rsp
000000000001800a	movss	(%rsp), %xmm0
000000000001800f	addq	$0x10, %rsp
0000000000018013	popq	%r15
0000000000018015	popq	%r14
0000000000018017	popq	%r13
0000000000018019	popq	%r12
000000000001801b	popq	%r11
000000000001801d	popq	%r10
000000000001801f	popq	%r9
0000000000018021	popq	%r8
0000000000018023	popq	%rcx
0000000000018024	popq	%rdx
0000000000018025	popq	%rsi
0000000000018026	popq	%rdi
0000000000018027	popq	%rbx
0000000000018028	popq	%rbp
0000000000018029	jmpq	*%rax
__ZN7cocos2d6CCNode12setSchedulerEPNS_11CCSchedulerE:
000000000001802b	pushq	%rbp
000000000001802c	movq	%rsp, %rbp
000000000001802f	pushq	%rbx
0000000000018030	pushq	%rdi
0000000000018031	pushq	%rsi
0000000000018032	pushq	%rdx
0000000000018033	pushq	%rcx
0000000000018034	pushq	%r8
0000000000018036	pushq	%r9
0000000000018038	pushq	%r10
000000000001803a	pushq	%r11
000000000001803c	pushq	%r12
000000000001803e	pushq	%r13
0000000000018040	pushq	%r14
0000000000018042	pushq	%r15
0000000000018044	subq	$0x10, %rsp
0000000000018048	movss	%xmm0, (%rsp)
000000000001804d	subq	$0x10, %rsp
0000000000018051	movss	%xmm1, (%rsp)
0000000000018056	pushq	%rsi
0000000000018057	pushq	%rdi
0000000000018058	callq	__Z7getBasev ## getBase()
000000000001805d	addq	$0x123f20, %rax
0000000000018063	popq	%rdi
0000000000018064	popq	%rsi
0000000000018065	movss	(%rsp), %xmm1
000000000001806a	addq	$0x10, %rsp
000000000001806e	movss	(%rsp), %xmm0
0000000000018073	addq	$0x10, %rsp
0000000000018077	popq	%r15
0000000000018079	popq	%r14
000000000001807b	popq	%r13
000000000001807d	popq	%r12
000000000001807f	popq	%r11
0000000000018081	popq	%r10
0000000000018083	popq	%r9
0000000000018085	popq	%r8
0000000000018087	popq	%rcx
0000000000018088	popq	%rdx
0000000000018089	popq	%rsi
000000000001808a	popq	%rdi
000000000001808b	popq	%rbx
000000000001808c	popq	%rbp
000000000001808d	jmpq	*%rax
__ZN7cocos2d6CCNode13getChildByTagEi:
000000000001808f	pushq	%rbp
0000000000018090	movq	%rsp, %rbp
0000000000018093	pushq	%rbx
0000000000018094	pushq	%rdi
0000000000018095	pushq	%rsi
0000000000018096	pushq	%rdx
0000000000018097	pushq	%rcx
0000000000018098	pushq	%r8
000000000001809a	pushq	%r9
000000000001809c	pushq	%r10
000000000001809e	pushq	%r11
00000000000180a0	pushq	%r12
00000000000180a2	pushq	%r13
00000000000180a4	pushq	%r14
00000000000180a6	pushq	%r15
00000000000180a8	subq	$0x10, %rsp
00000000000180ac	movss	%xmm0, (%rsp)
00000000000180b1	subq	$0x10, %rsp
00000000000180b5	movss	%xmm1, (%rsp)
00000000000180ba	pushq	%rsi
00000000000180bb	pushq	%rdi
00000000000180bc	callq	__Z7getBasev ## getBase()
00000000000180c1	addq	$0x123220, %rax
00000000000180c7	popq	%rdi
00000000000180c8	popq	%rsi
00000000000180c9	movss	(%rsp), %xmm1
00000000000180ce	addq	$0x10, %rsp
00000000000180d2	movss	(%rsp), %xmm0
00000000000180d7	addq	$0x10, %rsp
00000000000180db	popq	%r15
00000000000180dd	popq	%r14
00000000000180df	popq	%r13
00000000000180e1	popq	%r12
00000000000180e3	popq	%r11
00000000000180e5	popq	%r10
00000000000180e7	popq	%r9
00000000000180e9	popq	%r8
00000000000180eb	popq	%rcx
00000000000180ec	popq	%rdx
00000000000180ed	popq	%rsi
00000000000180ee	popq	%rdi
00000000000180ef	popq	%rbx
00000000000180f0	popq	%rbp
00000000000180f1	jmpq	*%rax
__ZN7cocos2d6CCNode13getUserObjectEv:
00000000000180f3	pushq	%rbp
00000000000180f4	movq	%rsp, %rbp
00000000000180f7	pushq	%rbx
00000000000180f8	pushq	%rdi
00000000000180f9	pushq	%rsi
00000000000180fa	pushq	%rdx
00000000000180fb	pushq	%rcx
00000000000180fc	pushq	%r8
00000000000180fe	pushq	%r9
0000000000018100	pushq	%r10
0000000000018102	pushq	%r11
0000000000018104	pushq	%r12
0000000000018106	pushq	%r13
0000000000018108	pushq	%r14
000000000001810a	pushq	%r15
000000000001810c	subq	$0x10, %rsp
0000000000018110	movss	%xmm0, (%rsp)
0000000000018115	subq	$0x10, %rsp
0000000000018119	movss	%xmm1, (%rsp)
000000000001811e	pushq	%rsi
000000000001811f	pushq	%rdi
0000000000018120	callq	__Z7getBasev ## getBase()
0000000000018125	addq	$0x122f80, %rax
000000000001812b	popq	%rdi
000000000001812c	popq	%rsi
000000000001812d	movss	(%rsp), %xmm1
0000000000018132	addq	$0x10, %rsp
0000000000018136	movss	(%rsp), %xmm0
000000000001813b	addq	$0x10, %rsp
000000000001813f	popq	%r15
0000000000018141	popq	%r14
0000000000018143	popq	%r13
0000000000018145	popq	%r12
0000000000018147	popq	%r11
0000000000018149	popq	%r10
000000000001814b	popq	%r9
000000000001814d	popq	%r8
000000000001814f	popq	%rcx
0000000000018150	popq	%rdx
0000000000018151	popq	%rsi
0000000000018152	popq	%rdi
0000000000018153	popq	%rbx
0000000000018154	popq	%rbp
0000000000018155	jmpq	*%rax
__ZN7cocos2d6CCNode13setUserObjectEPNS_8CCObjectE:
0000000000018157	pushq	%rbp
0000000000018158	movq	%rsp, %rbp
000000000001815b	pushq	%rbx
000000000001815c	pushq	%rdi
000000000001815d	pushq	%rsi
000000000001815e	pushq	%rdx
000000000001815f	pushq	%rcx
0000000000018160	pushq	%r8
0000000000018162	pushq	%r9
0000000000018164	pushq	%r10
0000000000018166	pushq	%r11
0000000000018168	pushq	%r12
000000000001816a	pushq	%r13
000000000001816c	pushq	%r14
000000000001816e	pushq	%r15
0000000000018170	subq	$0x10, %rsp
0000000000018174	movss	%xmm0, (%rsp)
0000000000018179	subq	$0x10, %rsp
000000000001817d	movss	%xmm1, (%rsp)
0000000000018182	pushq	%rsi
0000000000018183	pushq	%rdi
0000000000018184	callq	__Z7getBasev ## getBase()
0000000000018189	addq	$0x122fb0, %rax
000000000001818f	popq	%rdi
0000000000018190	popq	%rsi
0000000000018191	movss	(%rsp), %xmm1
0000000000018196	addq	$0x10, %rsp
000000000001819a	movss	(%rsp), %xmm0
000000000001819f	addq	$0x10, %rsp
00000000000181a3	popq	%r15
00000000000181a5	popq	%r14
00000000000181a7	popq	%r13
00000000000181a9	popq	%r12
00000000000181ab	popq	%r11
00000000000181ad	popq	%r10
00000000000181af	popq	%r9
00000000000181b1	popq	%r8
00000000000181b3	popq	%rcx
00000000000181b4	popq	%rdx
00000000000181b5	popq	%rsi
00000000000181b6	popq	%rdi
00000000000181b7	popq	%rbx
00000000000181b8	popq	%rbp
00000000000181b9	jmpq	*%rax
__ZN7cocos2d6CCNode14getAnchorPointEv:
00000000000181bb	pushq	%rbp
00000000000181bc	movq	%rsp, %rbp
00000000000181bf	pushq	%rbx
00000000000181c0	pushq	%rdi
00000000000181c1	pushq	%rsi
00000000000181c2	pushq	%rdx
00000000000181c3	pushq	%rcx
00000000000181c4	pushq	%r8
00000000000181c6	pushq	%r9
00000000000181c8	pushq	%r10
00000000000181ca	pushq	%r11
00000000000181cc	pushq	%r12
00000000000181ce	pushq	%r13
00000000000181d0	pushq	%r14
00000000000181d2	pushq	%r15
00000000000181d4	subq	$0x10, %rsp
00000000000181d8	movss	%xmm0, (%rsp)
00000000000181dd	subq	$0x10, %rsp
00000000000181e1	movss	%xmm1, (%rsp)
00000000000181e6	pushq	%rsi
00000000000181e7	pushq	%rdi
00000000000181e8	callq	__Z7getBasev ## getBase()
00000000000181ed	addq	$0x122d80, %rax
00000000000181f3	popq	%rdi
00000000000181f4	popq	%rsi
00000000000181f5	movss	(%rsp), %xmm1
00000000000181fa	addq	$0x10, %rsp
00000000000181fe	movss	(%rsp), %xmm0
0000000000018203	addq	$0x10, %rsp
0000000000018207	popq	%r15
0000000000018209	popq	%r14
000000000001820b	popq	%r13
000000000001820d	popq	%r12
000000000001820f	popq	%r11
0000000000018211	popq	%r10
0000000000018213	popq	%r9
0000000000018215	popq	%r8
0000000000018217	popq	%rcx
0000000000018218	popq	%rdx
0000000000018219	popq	%rsi
000000000001821a	popq	%rdi
000000000001821b	popq	%rbx
000000000001821c	popq	%rbp
000000000001821d	jmpq	*%rax
__ZN7cocos2d6CCNode14setAnchorPointERKNS_7CCPointE:
000000000001821f	pushq	%rbp
0000000000018220	movq	%rsp, %rbp
0000000000018223	pushq	%rbx
0000000000018224	pushq	%rdi
0000000000018225	pushq	%rsi
0000000000018226	pushq	%rdx
0000000000018227	pushq	%rcx
0000000000018228	pushq	%r8
000000000001822a	pushq	%r9
000000000001822c	pushq	%r10
000000000001822e	pushq	%r11
0000000000018230	pushq	%r12
0000000000018232	pushq	%r13
0000000000018234	pushq	%r14
0000000000018236	pushq	%r15
0000000000018238	subq	$0x10, %rsp
000000000001823c	movss	%xmm0, (%rsp)
0000000000018241	subq	$0x10, %rsp
0000000000018245	movss	%xmm1, (%rsp)
000000000001824a	pushq	%rsi
000000000001824b	pushq	%rdi
000000000001824c	callq	__Z7getBasev ## getBase()
0000000000018251	addq	$0x122d90, %rax
0000000000018257	popq	%rdi
0000000000018258	popq	%rsi
0000000000018259	movss	(%rsp), %xmm1
000000000001825e	addq	$0x10, %rsp
0000000000018262	movss	(%rsp), %xmm0
0000000000018267	addq	$0x10, %rsp
000000000001826b	popq	%r15
000000000001826d	popq	%r14
000000000001826f	popq	%r13
0000000000018271	popq	%r12
0000000000018273	popq	%r11
0000000000018275	popq	%r10
0000000000018277	popq	%r9
0000000000018279	popq	%r8
000000000001827b	popq	%rcx
000000000001827c	popq	%rdx
000000000001827d	popq	%rsi
000000000001827e	popq	%rdi
000000000001827f	popq	%rbx
0000000000018280	popq	%rbp
0000000000018281	jmpq	*%rax
__ZN7cocos2d6CCNode14setContentSizeERKNS_6CCSizeE:
0000000000018283	pushq	%rbp
0000000000018284	movq	%rsp, %rbp
0000000000018287	pushq	%rbx
0000000000018288	pushq	%rdi
0000000000018289	pushq	%rsi
000000000001828a	pushq	%rdx
000000000001828b	pushq	%rcx
000000000001828c	pushq	%r8
000000000001828e	pushq	%r9
0000000000018290	pushq	%r10
0000000000018292	pushq	%r11
0000000000018294	pushq	%r12
0000000000018296	pushq	%r13
0000000000018298	pushq	%r14
000000000001829a	pushq	%r15
000000000001829c	subq	$0x10, %rsp
00000000000182a0	movss	%xmm0, (%rsp)
00000000000182a5	subq	$0x10, %rsp
00000000000182a9	movss	%xmm1, (%rsp)
00000000000182ae	pushq	%rsi
00000000000182af	pushq	%rdi
00000000000182b0	callq	__Z7getBasev ## getBase()
00000000000182b5	addq	$0x122e50, %rax
00000000000182bb	popq	%rdi
00000000000182bc	popq	%rsi
00000000000182bd	movss	(%rsp), %xmm1
00000000000182c2	addq	$0x10, %rsp
00000000000182c6	movss	(%rsp), %xmm0
00000000000182cb	addq	$0x10, %rsp
00000000000182cf	popq	%r15
00000000000182d1	popq	%r14
00000000000182d3	popq	%r13
00000000000182d5	popq	%r12
00000000000182d7	popq	%r11
00000000000182d9	popq	%r10
00000000000182db	popq	%r9
00000000000182dd	popq	%r8
00000000000182df	popq	%rcx
00000000000182e0	popq	%rdx
00000000000182e1	popq	%rsi
00000000000182e2	popq	%rdi
00000000000182e3	popq	%rbx
00000000000182e4	popq	%rbp
00000000000182e5	jmpq	*%rax
__ZN7cocos2d6CCNode15removeComponentEPKc:
00000000000182e7	pushq	%rbp
00000000000182e8	movq	%rsp, %rbp
00000000000182eb	pushq	%rbx
00000000000182ec	pushq	%rdi
00000000000182ed	pushq	%rsi
00000000000182ee	pushq	%rdx
00000000000182ef	pushq	%rcx
00000000000182f0	pushq	%r8
00000000000182f2	pushq	%r9
00000000000182f4	pushq	%r10
00000000000182f6	pushq	%r11
00000000000182f8	pushq	%r12
00000000000182fa	pushq	%r13
00000000000182fc	pushq	%r14
00000000000182fe	pushq	%r15
0000000000018300	subq	$0x10, %rsp
0000000000018304	movss	%xmm0, (%rsp)
0000000000018309	subq	$0x10, %rsp
000000000001830d	movss	%xmm1, (%rsp)
0000000000018312	pushq	%rsi
0000000000018313	pushq	%rdi
0000000000018314	callq	__Z7getBasev ## getBase()
0000000000018319	addq	$0x124a60, %rax
000000000001831f	popq	%rdi
0000000000018320	popq	%rsi
0000000000018321	movss	(%rsp), %xmm1
0000000000018326	addq	$0x10, %rsp
000000000001832a	movss	(%rsp), %xmm0
000000000001832f	addq	$0x10, %rsp
0000000000018333	popq	%r15
0000000000018335	popq	%r14
0000000000018337	popq	%r13
0000000000018339	popq	%r12
000000000001833b	popq	%r11
000000000001833d	popq	%r10
000000000001833f	popq	%r9
0000000000018341	popq	%r8
0000000000018343	popq	%rcx
0000000000018344	popq	%rdx
0000000000018345	popq	%rsi
0000000000018346	popq	%rdi
0000000000018347	popq	%rbx
0000000000018348	popq	%rbp
0000000000018349	jmpq	*%rax
__ZN7cocos2d6CCNode15removeComponentEPNS_11CCComponentE:
000000000001834b	pushq	%rbp
000000000001834c	movq	%rsp, %rbp
000000000001834f	pushq	%rbx
0000000000018350	pushq	%rdi
0000000000018351	pushq	%rsi
0000000000018352	pushq	%rdx
0000000000018353	pushq	%rcx
0000000000018354	pushq	%r8
0000000000018356	pushq	%r9
0000000000018358	pushq	%r10
000000000001835a	pushq	%r11
000000000001835c	pushq	%r12
000000000001835e	pushq	%r13
0000000000018360	pushq	%r14
0000000000018362	pushq	%r15
0000000000018364	subq	$0x10, %rsp
0000000000018368	movss	%xmm0, (%rsp)
000000000001836d	subq	$0x10, %rsp
0000000000018371	movss	%xmm1, (%rsp)
0000000000018376	pushq	%rsi
0000000000018377	pushq	%rdi
0000000000018378	callq	__Z7getBasev ## getBase()
000000000001837d	addq	$0x124a80, %rax
0000000000018383	popq	%rdi
0000000000018384	popq	%rsi
0000000000018385	movss	(%rsp), %xmm1
000000000001838a	addq	$0x10, %rsp
000000000001838e	movss	(%rsp), %xmm0
0000000000018393	addq	$0x10, %rsp
0000000000018397	popq	%r15
0000000000018399	popq	%r14
000000000001839b	popq	%r13
000000000001839d	popq	%r12
000000000001839f	popq	%r11
00000000000183a1	popq	%r10
00000000000183a3	popq	%r9
00000000000183a5	popq	%r8
00000000000183a7	popq	%rcx
00000000000183a8	popq	%rdx
00000000000183a9	popq	%rsi
00000000000183aa	popq	%rdi
00000000000183ab	popq	%rbx
00000000000183ac	popq	%rbp
00000000000183ad	jmpq	*%rax
__ZN7cocos2d6CCNode15sortAllChildrenEv:
00000000000183af	pushq	%rbp
00000000000183b0	movq	%rsp, %rbp
00000000000183b3	pushq	%rbx
00000000000183b4	pushq	%rdi
00000000000183b5	pushq	%rsi
00000000000183b6	pushq	%rdx
00000000000183b7	pushq	%rcx
00000000000183b8	pushq	%r8
00000000000183ba	pushq	%r9
00000000000183bc	pushq	%r10
00000000000183be	pushq	%r11
00000000000183c0	pushq	%r12
00000000000183c2	pushq	%r13
00000000000183c4	pushq	%r14
00000000000183c6	pushq	%r15
00000000000183c8	subq	$0x10, %rsp
00000000000183cc	movss	%xmm0, (%rsp)
00000000000183d1	subq	$0x10, %rsp
00000000000183d5	movss	%xmm1, (%rsp)
00000000000183da	pushq	%rsi
00000000000183db	pushq	%rdi
00000000000183dc	callq	__Z7getBasev ## getBase()
00000000000183e1	addq	$0x1237b0, %rax
00000000000183e7	popq	%rdi
00000000000183e8	popq	%rsi
00000000000183e9	movss	(%rsp), %xmm1
00000000000183ee	addq	$0x10, %rsp
00000000000183f2	movss	(%rsp), %xmm0
00000000000183f7	addq	$0x10, %rsp
00000000000183fb	popq	%r15
00000000000183fd	popq	%r14
00000000000183ff	popq	%r13
0000000000018401	popq	%r12
0000000000018403	popq	%r11
0000000000018405	popq	%r10
0000000000018407	popq	%r9
0000000000018409	popq	%r8
000000000001840b	popq	%rcx
000000000001840c	popq	%rdx
000000000001840d	popq	%rsi
000000000001840e	popq	%rdi
000000000001840f	popq	%rbx
0000000000018410	popq	%rbp
0000000000018411	jmpq	*%rax
__ZN7cocos2d6CCNode15updateTransformEv:
0000000000018413	pushq	%rbp
0000000000018414	movq	%rsp, %rbp
0000000000018417	pushq	%rbx
0000000000018418	pushq	%rdi
0000000000018419	pushq	%rsi
000000000001841a	pushq	%rdx
000000000001841b	pushq	%rcx
000000000001841c	pushq	%r8
000000000001841e	pushq	%r9
0000000000018420	pushq	%r10
0000000000018422	pushq	%r11
0000000000018424	pushq	%r12
0000000000018426	pushq	%r13
0000000000018428	pushq	%r14
000000000001842a	pushq	%r15
000000000001842c	subq	$0x10, %rsp
0000000000018430	movss	%xmm0, (%rsp)
0000000000018435	subq	$0x10, %rsp
0000000000018439	movss	%xmm1, (%rsp)
000000000001843e	pushq	%rsi
000000000001843f	pushq	%rdi
0000000000018440	callq	__Z7getBasev ## getBase()
0000000000018445	addq	$0x1249d0, %rax
000000000001844b	popq	%rdi
000000000001844c	popq	%rsi
000000000001844d	movss	(%rsp), %xmm1
0000000000018452	addq	$0x10, %rsp
0000000000018456	movss	(%rsp), %xmm0
000000000001845b	addq	$0x10, %rsp
000000000001845f	popq	%r15
0000000000018461	popq	%r14
0000000000018463	popq	%r13
0000000000018465	popq	%r12
0000000000018467	popq	%r11
0000000000018469	popq	%r10
000000000001846b	popq	%r9
000000000001846d	popq	%r8
000000000001846f	popq	%rcx
0000000000018470	popq	%rdx
0000000000018471	popq	%rsi
0000000000018472	popq	%rdi
0000000000018473	popq	%rbx
0000000000018474	popq	%rbp
0000000000018475	jmpq	*%rax
__ZN7cocos2d6CCNode16getActionManagerEv:
0000000000018477	pushq	%rbp
0000000000018478	movq	%rsp, %rbp
000000000001847b	pushq	%rbx
000000000001847c	pushq	%rdi
000000000001847d	pushq	%rsi
000000000001847e	pushq	%rdx
000000000001847f	pushq	%rcx
0000000000018480	pushq	%r8
0000000000018482	pushq	%r9
0000000000018484	pushq	%r10
0000000000018486	pushq	%r11
0000000000018488	pushq	%r12
000000000001848a	pushq	%r13
000000000001848c	pushq	%r14
000000000001848e	pushq	%r15
0000000000018490	subq	$0x10, %rsp
0000000000018494	movss	%xmm0, (%rsp)
0000000000018499	subq	$0x10, %rsp
000000000001849d	movss	%xmm1, (%rsp)
00000000000184a2	pushq	%rsi
00000000000184a3	pushq	%rdi
00000000000184a4	callq	__Z7getBasev ## getBase()
00000000000184a9	addq	$0x123e50, %rax
00000000000184af	popq	%rdi
00000000000184b0	popq	%rsi
00000000000184b1	movss	(%rsp), %xmm1
00000000000184b6	addq	$0x10, %rsp
00000000000184ba	movss	(%rsp), %xmm0
00000000000184bf	addq	$0x10, %rsp
00000000000184c3	popq	%r15
00000000000184c5	popq	%r14
00000000000184c7	popq	%r13
00000000000184c9	popq	%r12
00000000000184cb	popq	%r11
00000000000184cd	popq	%r10
00000000000184cf	popq	%r9
00000000000184d1	popq	%r8
00000000000184d3	popq	%rcx
00000000000184d4	popq	%rdx
00000000000184d5	popq	%rsi
00000000000184d6	popq	%rdi
00000000000184d7	popq	%rbx
00000000000184d8	popq	%rbp
00000000000184d9	jmpq	*%rax
__ZN7cocos2d6CCNode16getGLServerStateEv:
00000000000184db	pushq	%rbp
00000000000184dc	movq	%rsp, %rbp
00000000000184df	pushq	%rbx
00000000000184e0	pushq	%rdi
00000000000184e1	pushq	%rsi
00000000000184e2	pushq	%rdx
00000000000184e3	pushq	%rcx
00000000000184e4	pushq	%r8
00000000000184e6	pushq	%r9
00000000000184e8	pushq	%r10
00000000000184ea	pushq	%r11
00000000000184ec	pushq	%r12
00000000000184ee	pushq	%r13
00000000000184f0	pushq	%r14
00000000000184f2	pushq	%r15
00000000000184f4	subq	$0x10, %rsp
00000000000184f8	movss	%xmm0, (%rsp)
00000000000184fd	subq	$0x10, %rsp
0000000000018501	movss	%xmm1, (%rsp)
0000000000018506	pushq	%rsi
0000000000018507	pushq	%rdi
0000000000018508	callq	__Z7getBasev ## getBase()
000000000001850d	addq	$0x122f90, %rax
0000000000018513	popq	%rdi
0000000000018514	popq	%rsi
0000000000018515	movss	(%rsp), %xmm1
000000000001851a	addq	$0x10, %rsp
000000000001851e	movss	(%rsp), %xmm0
0000000000018523	addq	$0x10, %rsp
0000000000018527	popq	%r15
0000000000018529	popq	%r14
000000000001852b	popq	%r13
000000000001852d	popq	%r12
000000000001852f	popq	%r11
0000000000018531	popq	%r10
0000000000018533	popq	%r9
0000000000018535	popq	%r8
0000000000018537	popq	%rcx
0000000000018538	popq	%rdx
0000000000018539	popq	%rsi
000000000001853a	popq	%rdi
000000000001853b	popq	%rbx
000000000001853c	popq	%rbp
000000000001853d	jmpq	*%rax
__ZN7cocos2d6CCNode16getShaderProgramEv:
000000000001853f	pushq	%rbp
0000000000018540	movq	%rsp, %rbp
0000000000018543	pushq	%rbx
0000000000018544	pushq	%rdi
0000000000018545	pushq	%rsi
0000000000018546	pushq	%rdx
0000000000018547	pushq	%rcx
0000000000018548	pushq	%r8
000000000001854a	pushq	%r9
000000000001854c	pushq	%r10
000000000001854e	pushq	%r11
0000000000018550	pushq	%r12
0000000000018552	pushq	%r13
0000000000018554	pushq	%r14
0000000000018556	pushq	%r15
0000000000018558	subq	$0x10, %rsp
000000000001855c	movss	%xmm0, (%rsp)
0000000000018561	subq	$0x10, %rsp
0000000000018565	movss	%xmm1, (%rsp)
000000000001856a	pushq	%rsi
000000000001856b	pushq	%rdi
000000000001856c	callq	__Z7getBasev ## getBase()
0000000000018571	addq	$0x122f70, %rax
0000000000018577	popq	%rdi
0000000000018578	popq	%rsi
0000000000018579	movss	(%rsp), %xmm1
000000000001857e	addq	$0x10, %rsp
0000000000018582	movss	(%rsp), %xmm0
0000000000018587	addq	$0x10, %rsp
000000000001858b	popq	%r15
000000000001858d	popq	%r14
000000000001858f	popq	%r13
0000000000018591	popq	%r12
0000000000018593	popq	%r11
0000000000018595	popq	%r10
0000000000018597	popq	%r9
0000000000018599	popq	%r8
000000000001859b	popq	%rcx
000000000001859c	popq	%rdx
000000000001859d	popq	%rsi
000000000001859e	popq	%rdi
000000000001859f	popq	%rbx
00000000000185a0	popq	%rbp
00000000000185a1	jmpq	*%rax
__ZN7cocos2d6CCNode16removeChildByTagEi:
00000000000185a3	pushq	%rbp
00000000000185a4	movq	%rsp, %rbp
00000000000185a7	pushq	%rbx
00000000000185a8	pushq	%rdi
00000000000185a9	pushq	%rsi
00000000000185aa	pushq	%rdx
00000000000185ab	pushq	%rcx
00000000000185ac	pushq	%r8
00000000000185ae	pushq	%r9
00000000000185b0	pushq	%r10
00000000000185b2	pushq	%r11
00000000000185b4	pushq	%r12
00000000000185b6	pushq	%r13
00000000000185b8	pushq	%r14
00000000000185ba	pushq	%r15
00000000000185bc	subq	$0x10, %rsp
00000000000185c0	movss	%xmm0, (%rsp)
00000000000185c5	subq	$0x10, %rsp
00000000000185c9	movss	%xmm1, (%rsp)
00000000000185ce	pushq	%rsi
00000000000185cf	pushq	%rdi
00000000000185d0	callq	__Z7getBasev ## getBase()
00000000000185d5	addq	$0x1235a0, %rax
00000000000185db	popq	%rdi
00000000000185dc	popq	%rsi
00000000000185dd	movss	(%rsp), %xmm1
00000000000185e2	addq	$0x10, %rsp
00000000000185e6	movss	(%rsp), %xmm0
00000000000185eb	addq	$0x10, %rsp
00000000000185ef	popq	%r15
00000000000185f1	popq	%r14
00000000000185f3	popq	%r13
00000000000185f5	popq	%r12
00000000000185f7	popq	%r11
00000000000185f9	popq	%r10
00000000000185fb	popq	%r9
00000000000185fd	popq	%r8
00000000000185ff	popq	%rcx
0000000000018600	popq	%rdx
0000000000018601	popq	%rsi
0000000000018602	popq	%rdi
0000000000018603	popq	%rbx
0000000000018604	popq	%rbp
0000000000018605	jmpq	*%rax
__ZN7cocos2d6CCNode16removeChildByTagEib:
0000000000018607	pushq	%rbp
0000000000018608	movq	%rsp, %rbp
000000000001860b	pushq	%rbx
000000000001860c	pushq	%rdi
000000000001860d	pushq	%rsi
000000000001860e	pushq	%rdx
000000000001860f	pushq	%rcx
0000000000018610	pushq	%r8
0000000000018612	pushq	%r9
0000000000018614	pushq	%r10
0000000000018616	pushq	%r11
0000000000018618	pushq	%r12
000000000001861a	pushq	%r13
000000000001861c	pushq	%r14
000000000001861e	pushq	%r15
0000000000018620	subq	$0x10, %rsp
0000000000018624	movss	%xmm0, (%rsp)
0000000000018629	subq	$0x10, %rsp
000000000001862d	movss	%xmm1, (%rsp)
0000000000018632	pushq	%rsi
0000000000018633	pushq	%rdi
0000000000018634	callq	__Z7getBasev ## getBase()
0000000000018639	addq	$0x1235c0, %rax
000000000001863f	popq	%rdi
0000000000018640	popq	%rsi
0000000000018641	movss	(%rsp), %xmm1
0000000000018646	addq	$0x10, %rsp
000000000001864a	movss	(%rsp), %xmm0
000000000001864f	addq	$0x10, %rsp
0000000000018653	popq	%r15
0000000000018655	popq	%r14
0000000000018657	popq	%r13
0000000000018659	popq	%r12
000000000001865b	popq	%r11
000000000001865d	popq	%r10
000000000001865f	popq	%r9
0000000000018661	popq	%r8
0000000000018663	popq	%rcx
0000000000018664	popq	%rdx
0000000000018665	popq	%rsi
0000000000018666	popq	%rdi
0000000000018667	popq	%rbx
0000000000018668	popq	%rbp
0000000000018669	jmpq	*%rax
__ZN7cocos2d6CCNode16removeFromParentEv:
000000000001866b	pushq	%rbp
000000000001866c	movq	%rsp, %rbp
000000000001866f	pushq	%rbx
0000000000018670	pushq	%rdi
0000000000018671	pushq	%rsi
0000000000018672	pushq	%rdx
0000000000018673	pushq	%rcx
0000000000018674	pushq	%r8
0000000000018676	pushq	%r9
0000000000018678	pushq	%r10
000000000001867a	pushq	%r11
000000000001867c	pushq	%r12
000000000001867e	pushq	%r13
0000000000018680	pushq	%r14
0000000000018682	pushq	%r15
0000000000018684	subq	$0x10, %rsp
0000000000018688	movss	%xmm0, (%rsp)
000000000001868d	subq	$0x10, %rsp
0000000000018691	movss	%xmm1, (%rsp)
0000000000018696	pushq	%rsi
0000000000018697	pushq	%rdi
0000000000018698	callq	__Z7getBasev ## getBase()
000000000001869d	addq	$0x1233f0, %rax
00000000000186a3	popq	%rdi
00000000000186a4	popq	%rsi
00000000000186a5	movss	(%rsp), %xmm1
00000000000186aa	addq	$0x10, %rsp
00000000000186ae	movss	(%rsp), %xmm0
00000000000186b3	addq	$0x10, %rsp
00000000000186b7	popq	%r15
00000000000186b9	popq	%r14
00000000000186bb	popq	%r13
00000000000186bd	popq	%r12
00000000000186bf	popq	%r11
00000000000186c1	popq	%r10
00000000000186c3	popq	%r9
00000000000186c5	popq	%r8
00000000000186c7	popq	%rcx
00000000000186c8	popq	%rdx
00000000000186c9	popq	%rsi
00000000000186ca	popq	%rdi
00000000000186cb	popq	%rbx
00000000000186cc	popq	%rbp
00000000000186cd	jmpq	*%rax
__ZN7cocos2d6CCNode16setActionManagerEPNS_15CCActionManagerE:
00000000000186cf	pushq	%rbp
00000000000186d0	movq	%rsp, %rbp
00000000000186d3	pushq	%rbx
00000000000186d4	pushq	%rdi
00000000000186d5	pushq	%rsi
00000000000186d6	pushq	%rdx
00000000000186d7	pushq	%rcx
00000000000186d8	pushq	%r8
00000000000186da	pushq	%r9
00000000000186dc	pushq	%r10
00000000000186de	pushq	%r11
00000000000186e0	pushq	%r12
00000000000186e2	pushq	%r13
00000000000186e4	pushq	%r14
00000000000186e6	pushq	%r15
00000000000186e8	subq	$0x10, %rsp
00000000000186ec	movss	%xmm0, (%rsp)
00000000000186f1	subq	$0x10, %rsp
00000000000186f5	movss	%xmm1, (%rsp)
00000000000186fa	pushq	%rsi
00000000000186fb	pushq	%rdi
00000000000186fc	callq	__Z7getBasev ## getBase()
0000000000018701	addq	$0x123e00, %rax
0000000000018707	popq	%rdi
0000000000018708	popq	%rsi
0000000000018709	movss	(%rsp), %xmm1
000000000001870e	addq	$0x10, %rsp
0000000000018712	movss	(%rsp), %xmm0
0000000000018717	addq	$0x10, %rsp
000000000001871b	popq	%r15
000000000001871d	popq	%r14
000000000001871f	popq	%r13
0000000000018721	popq	%r12
0000000000018723	popq	%r11
0000000000018725	popq	%r10
0000000000018727	popq	%r9
0000000000018729	popq	%r8
000000000001872b	popq	%rcx
000000000001872c	popq	%rdx
000000000001872d	popq	%rsi
000000000001872e	popq	%rdi
000000000001872f	popq	%rbx
0000000000018730	popq	%rbp
0000000000018731	jmpq	*%rax
__ZN7cocos2d6CCNode16setGLServerStateENS_15ccGLServerStateE:
0000000000018733	pushq	%rbp
0000000000018734	movq	%rsp, %rbp
0000000000018737	pushq	%rbx
0000000000018738	pushq	%rdi
0000000000018739	pushq	%rsi
000000000001873a	pushq	%rdx
000000000001873b	pushq	%rcx
000000000001873c	pushq	%r8
000000000001873e	pushq	%r9
0000000000018740	pushq	%r10
0000000000018742	pushq	%r11
0000000000018744	pushq	%r12
0000000000018746	pushq	%r13
0000000000018748	pushq	%r14
000000000001874a	pushq	%r15
000000000001874c	subq	$0x10, %rsp
0000000000018750	movss	%xmm0, (%rsp)
0000000000018755	subq	$0x10, %rsp
0000000000018759	movss	%xmm1, (%rsp)
000000000001875e	pushq	%rsi
000000000001875f	pushq	%rdi
0000000000018760	callq	__Z7getBasev ## getBase()
0000000000018765	addq	$0x122fa0, %rax
000000000001876b	popq	%rdi
000000000001876c	popq	%rsi
000000000001876d	movss	(%rsp), %xmm1
0000000000018772	addq	$0x10, %rsp
0000000000018776	movss	(%rsp), %xmm0
000000000001877b	addq	$0x10, %rsp
000000000001877f	popq	%r15
0000000000018781	popq	%r14
0000000000018783	popq	%r13
0000000000018785	popq	%r12
0000000000018787	popq	%r11
0000000000018789	popq	%r10
000000000001878b	popq	%r9
000000000001878d	popq	%r8
000000000001878f	popq	%rcx
0000000000018790	popq	%rdx
0000000000018791	popq	%rsi
0000000000018792	popq	%rdi
0000000000018793	popq	%rbx
0000000000018794	popq	%rbp
0000000000018795	jmpq	*%rax
__ZN7cocos2d6CCNode16setShaderProgramEPNS_11CCGLProgramE:
0000000000018797	pushq	%rbp
0000000000018798	movq	%rsp, %rbp
000000000001879b	pushq	%rbx
000000000001879c	pushq	%rdi
000000000001879d	pushq	%rsi
000000000001879e	pushq	%rdx
000000000001879f	pushq	%rcx
00000000000187a0	pushq	%r8
00000000000187a2	pushq	%r9
00000000000187a4	pushq	%r10
00000000000187a6	pushq	%r11
00000000000187a8	pushq	%r12
00000000000187aa	pushq	%r13
00000000000187ac	pushq	%r14
00000000000187ae	pushq	%r15
00000000000187b0	subq	$0x10, %rsp
00000000000187b4	movss	%xmm0, (%rsp)
00000000000187b9	subq	$0x10, %rsp
00000000000187bd	movss	%xmm1, (%rsp)
00000000000187c2	pushq	%rsi
00000000000187c3	pushq	%rdi
00000000000187c4	callq	__Z7getBasev ## getBase()
00000000000187c9	addq	$0x122ff0, %rax
00000000000187cf	popq	%rdi
00000000000187d0	popq	%rsi
00000000000187d1	movss	(%rsp), %xmm1
00000000000187d6	addq	$0x10, %rsp
00000000000187da	movss	(%rsp), %xmm0
00000000000187df	addq	$0x10, %rsp
00000000000187e3	popq	%r15
00000000000187e5	popq	%r14
00000000000187e7	popq	%r13
00000000000187e9	popq	%r12
00000000000187eb	popq	%r11
00000000000187ed	popq	%r10
00000000000187ef	popq	%r9
00000000000187f1	popq	%r8
00000000000187f3	popq	%rcx
00000000000187f4	popq	%rdx
00000000000187f5	popq	%rsi
00000000000187f6	popq	%rdi
00000000000187f7	popq	%rbx
00000000000187f8	popq	%rbp
00000000000187f9	jmpq	*%rax
__ZN7cocos2d6CCNode17getOrderOfArrivalEv:
00000000000187fb	pushq	%rbp
00000000000187fc	movq	%rsp, %rbp
00000000000187ff	pushq	%rbx
0000000000018800	pushq	%rdi
0000000000018801	pushq	%rsi
0000000000018802	pushq	%rdx
0000000000018803	pushq	%rcx
0000000000018804	pushq	%r8
0000000000018806	pushq	%r9
0000000000018808	pushq	%r10
000000000001880a	pushq	%r11
000000000001880c	pushq	%r12
000000000001880e	pushq	%r13
0000000000018810	pushq	%r14
0000000000018812	pushq	%r15
0000000000018814	subq	$0x10, %rsp
0000000000018818	movss	%xmm0, (%rsp)
000000000001881d	subq	$0x10, %rsp
0000000000018821	movss	%xmm1, (%rsp)
0000000000018826	pushq	%rsi
0000000000018827	pushq	%rdi
0000000000018828	callq	__Z7getBasev ## getBase()
000000000001882d	addq	$0x122f50, %rax
0000000000018833	popq	%rdi
0000000000018834	popq	%rsi
0000000000018835	movss	(%rsp), %xmm1
000000000001883a	addq	$0x10, %rsp
000000000001883e	movss	(%rsp), %xmm0
0000000000018843	addq	$0x10, %rsp
0000000000018847	popq	%r15
0000000000018849	popq	%r14
000000000001884b	popq	%r13
000000000001884d	popq	%r12
000000000001884f	popq	%r11
0000000000018851	popq	%r10
0000000000018853	popq	%r9
0000000000018855	popq	%r8
0000000000018857	popq	%rcx
0000000000018858	popq	%rdx
0000000000018859	popq	%rsi
000000000001885a	popq	%rdi
000000000001885b	popq	%rbx
000000000001885c	popq	%rbp
000000000001885d	jmpq	*%rax
__ZN7cocos2d6CCNode17removeAllChildrenEv:
000000000001885f	pushq	%rbp
0000000000018860	movq	%rsp, %rbp
0000000000018863	pushq	%rbx
0000000000018864	pushq	%rdi
0000000000018865	pushq	%rsi
0000000000018866	pushq	%rdx
0000000000018867	pushq	%rcx
0000000000018868	pushq	%r8
000000000001886a	pushq	%r9
000000000001886c	pushq	%r10
000000000001886e	pushq	%r11
0000000000018870	pushq	%r12
0000000000018872	pushq	%r13
0000000000018874	pushq	%r14
0000000000018876	pushq	%r15
0000000000018878	subq	$0x10, %rsp
000000000001887c	movss	%xmm0, (%rsp)
0000000000018881	subq	$0x10, %rsp
0000000000018885	movss	%xmm1, (%rsp)
000000000001888a	pushq	%rsi
000000000001888b	pushq	%rdi
000000000001888c	callq	__Z7getBasev ## getBase()
0000000000018891	addq	$0x123600, %rax
0000000000018897	popq	%rdi
0000000000018898	popq	%rsi
0000000000018899	movss	(%rsp), %xmm1
000000000001889e	addq	$0x10, %rsp
00000000000188a2	movss	(%rsp), %xmm0
00000000000188a7	addq	$0x10, %rsp
00000000000188ab	popq	%r15
00000000000188ad	popq	%r14
00000000000188af	popq	%r13
00000000000188b1	popq	%r12
00000000000188b3	popq	%r11
00000000000188b5	popq	%r10
00000000000188b7	popq	%r9
00000000000188b9	popq	%r8
00000000000188bb	popq	%rcx
00000000000188bc	popq	%rdx
00000000000188bd	popq	%rsi
00000000000188be	popq	%rdi
00000000000188bf	popq	%rbx
00000000000188c0	popq	%rbp
00000000000188c1	jmpq	*%rax
__ZN7cocos2d6CCNode17setOrderOfArrivalEj:
00000000000188c3	pushq	%rbp
00000000000188c4	movq	%rsp, %rbp
00000000000188c7	pushq	%rbx
00000000000188c8	pushq	%rdi
00000000000188c9	pushq	%rsi
00000000000188ca	pushq	%rdx
00000000000188cb	pushq	%rcx
00000000000188cc	pushq	%r8
00000000000188ce	pushq	%r9
00000000000188d0	pushq	%r10
00000000000188d2	pushq	%r11
00000000000188d4	pushq	%r12
00000000000188d6	pushq	%r13
00000000000188d8	pushq	%r14
00000000000188da	pushq	%r15
00000000000188dc	subq	$0x10, %rsp
00000000000188e0	movss	%xmm0, (%rsp)
00000000000188e5	subq	$0x10, %rsp
00000000000188e9	movss	%xmm1, (%rsp)
00000000000188ee	pushq	%rsi
00000000000188ef	pushq	%rdi
00000000000188f0	callq	__Z7getBasev ## getBase()
00000000000188f5	addq	$0x122f60, %rax
00000000000188fb	popq	%rdi
00000000000188fc	popq	%rsi
00000000000188fd	movss	(%rsp), %xmm1
0000000000018902	addq	$0x10, %rsp
0000000000018906	movss	(%rsp), %xmm0
000000000001890b	addq	$0x10, %rsp
000000000001890f	popq	%r15
0000000000018911	popq	%r14
0000000000018913	popq	%r13
0000000000018915	popq	%r12
0000000000018917	popq	%r11
0000000000018919	popq	%r10
000000000001891b	popq	%r9
000000000001891d	popq	%r8
000000000001891f	popq	%rcx
0000000000018920	popq	%rdx
0000000000018921	popq	%rsi
0000000000018922	popq	%rdi
0000000000018923	popq	%rbx
0000000000018924	popq	%rbp
0000000000018925	jmpq	*%rax
__ZN7cocos2d6CCNode17updateTweenActionEfPKc:
0000000000018927	pushq	%rbp
0000000000018928	movq	%rsp, %rbp
000000000001892b	pushq	%rbx
000000000001892c	pushq	%rdi
000000000001892d	pushq	%rsi
000000000001892e	pushq	%rdx
000000000001892f	pushq	%rcx
0000000000018930	pushq	%r8
0000000000018932	pushq	%r9
0000000000018934	pushq	%r10
0000000000018936	pushq	%r11
0000000000018938	pushq	%r12
000000000001893a	pushq	%r13
000000000001893c	pushq	%r14
000000000001893e	pushq	%r15
0000000000018940	subq	$0x10, %rsp
0000000000018944	movss	%xmm0, (%rsp)
0000000000018949	subq	$0x10, %rsp
000000000001894d	movss	%xmm1, (%rsp)
0000000000018952	pushq	%rsi
0000000000018953	pushq	%rdi
0000000000018954	callq	__Z7getBasev ## getBase()
0000000000018959	addq	$0x1249c0, %rax
000000000001895f	popq	%rdi
0000000000018960	popq	%rsi
0000000000018961	movss	(%rsp), %xmm1
0000000000018966	addq	$0x10, %rsp
000000000001896a	movss	(%rsp), %xmm0
000000000001896f	addq	$0x10, %rsp
0000000000018973	popq	%r15
0000000000018975	popq	%r14
0000000000018977	popq	%r13
0000000000018979	popq	%r12
000000000001897b	popq	%r11
000000000001897d	popq	%r10
000000000001897f	popq	%r9
0000000000018981	popq	%r8
0000000000018983	popq	%rcx
0000000000018984	popq	%rdx
0000000000018985	popq	%rsi
0000000000018986	popq	%rdi
0000000000018987	popq	%rbx
0000000000018988	popq	%rbp
0000000000018989	jmpq	*%rax
__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE:
000000000001898b	pushq	%rbp
000000000001898c	movq	%rsp, %rbp
000000000001898f	pushq	%rbx
0000000000018990	pushq	%rdi
0000000000018991	pushq	%rsi
0000000000018992	pushq	%rdx
0000000000018993	pushq	%rcx
0000000000018994	pushq	%r8
0000000000018996	pushq	%r9
0000000000018998	pushq	%r10
000000000001899a	pushq	%r11
000000000001899c	pushq	%r12
000000000001899e	pushq	%r13
00000000000189a0	pushq	%r14
00000000000189a2	pushq	%r15
00000000000189a4	subq	$0x10, %rsp
00000000000189a8	movss	%xmm0, (%rsp)
00000000000189ad	subq	$0x10, %rsp
00000000000189b1	movss	%xmm1, (%rsp)
00000000000189b6	pushq	%rsi
00000000000189b7	pushq	%rdi
00000000000189b8	callq	__Z7getBasev ## getBase()
00000000000189bd	addq	$0x124750, %rax
00000000000189c3	popq	%rdi
00000000000189c4	popq	%rsi
00000000000189c5	movss	(%rsp), %xmm1
00000000000189ca	addq	$0x10, %rsp
00000000000189ce	movss	(%rsp), %xmm0
00000000000189d3	addq	$0x10, %rsp
00000000000189d7	popq	%r15
00000000000189d9	popq	%r14
00000000000189db	popq	%r13
00000000000189dd	popq	%r12
00000000000189df	popq	%r11
00000000000189e1	popq	%r10
00000000000189e3	popq	%r9
00000000000189e5	popq	%r8
00000000000189e7	popq	%rcx
00000000000189e8	popq	%rdx
00000000000189e9	popq	%rsi
00000000000189ea	popq	%rdi
00000000000189eb	popq	%rbx
00000000000189ec	popq	%rbp
00000000000189ed	jmpq	*%rax
__ZN7cocos2d6CCNode18removeMeAndCleanupEv:
00000000000189ef	pushq	%rbp
00000000000189f0	movq	%rsp, %rbp
00000000000189f3	pushq	%rbx
00000000000189f4	pushq	%rdi
00000000000189f5	pushq	%rsi
00000000000189f6	pushq	%rdx
00000000000189f7	pushq	%rcx
00000000000189f8	pushq	%r8
00000000000189fa	pushq	%r9
00000000000189fc	pushq	%r10
00000000000189fe	pushq	%r11
0000000000018a00	pushq	%r12
0000000000018a02	pushq	%r13
0000000000018a04	pushq	%r14
0000000000018a06	pushq	%r15
0000000000018a08	subq	$0x10, %rsp
0000000000018a0c	movss	%xmm0, (%rsp)
0000000000018a11	subq	$0x10, %rsp
0000000000018a15	movss	%xmm1, (%rsp)
0000000000018a1a	pushq	%rsi
0000000000018a1b	pushq	%rdi
0000000000018a1c	callq	__Z7getBasev ## getBase()
0000000000018a21	addq	$0x123440, %rax
0000000000018a27	popq	%rdi
0000000000018a28	popq	%rsi
0000000000018a29	movss	(%rsp), %xmm1
0000000000018a2e	addq	$0x10, %rsp
0000000000018a32	movss	(%rsp), %xmm0
0000000000018a37	addq	$0x10, %rsp
0000000000018a3b	popq	%r15
0000000000018a3d	popq	%r14
0000000000018a3f	popq	%r13
0000000000018a41	popq	%r12
0000000000018a43	popq	%r11
0000000000018a45	popq	%r10
0000000000018a47	popq	%r9
0000000000018a49	popq	%r8
0000000000018a4b	popq	%rcx
0000000000018a4c	popq	%rdx
0000000000018a4d	popq	%rsi
0000000000018a4e	popq	%rdi
0000000000018a4f	popq	%rbx
0000000000018a50	popq	%rbp
0000000000018a51	jmpq	*%rax
__ZN7cocos2d6CCNode19removeAllComponentsEv:
0000000000018a53	pushq	%rbp
0000000000018a54	movq	%rsp, %rbp
0000000000018a57	pushq	%rbx
0000000000018a58	pushq	%rdi
0000000000018a59	pushq	%rsi
0000000000018a5a	pushq	%rdx
0000000000018a5b	pushq	%rcx
0000000000018a5c	pushq	%r8
0000000000018a5e	pushq	%r9
0000000000018a60	pushq	%r10
0000000000018a62	pushq	%r11
0000000000018a64	pushq	%r12
0000000000018a66	pushq	%r13
0000000000018a68	pushq	%r14
0000000000018a6a	pushq	%r15
0000000000018a6c	subq	$0x10, %rsp
0000000000018a70	movss	%xmm0, (%rsp)
0000000000018a75	subq	$0x10, %rsp
0000000000018a79	movss	%xmm1, (%rsp)
0000000000018a7e	pushq	%rsi
0000000000018a7f	pushq	%rdi
0000000000018a80	callq	__Z7getBasev ## getBase()
0000000000018a85	addq	$0x124aa0, %rax
0000000000018a8b	popq	%rdi
0000000000018a8c	popq	%rsi
0000000000018a8d	movss	(%rsp), %xmm1
0000000000018a92	addq	$0x10, %rsp
0000000000018a96	movss	(%rsp), %xmm0
0000000000018a9b	addq	$0x10, %rsp
0000000000018a9f	popq	%r15
0000000000018aa1	popq	%r14
0000000000018aa3	popq	%r13
0000000000018aa5	popq	%r12
0000000000018aa7	popq	%r11
0000000000018aa9	popq	%r10
0000000000018aab	popq	%r9
0000000000018aad	popq	%r8
0000000000018aaf	popq	%rcx
0000000000018ab0	popq	%rdx
0000000000018ab1	popq	%rsi
0000000000018ab2	popq	%rdi
0000000000018ab3	popq	%rbx
0000000000018ab4	popq	%rbp
0000000000018ab5	jmpq	*%rax
__ZN7cocos2d6CCNode20getScaledContentSizeEv:
0000000000018ab7	pushq	%rbp
0000000000018ab8	movq	%rsp, %rbp
0000000000018abb	pushq	%rbx
0000000000018abc	pushq	%rdi
0000000000018abd	pushq	%rsi
0000000000018abe	pushq	%rdx
0000000000018abf	pushq	%rcx
0000000000018ac0	pushq	%r8
0000000000018ac2	pushq	%r9
0000000000018ac4	pushq	%r10
0000000000018ac6	pushq	%r11
0000000000018ac8	pushq	%r12
0000000000018aca	pushq	%r13
0000000000018acc	pushq	%r14
0000000000018ace	pushq	%r15
0000000000018ad0	subq	$0x10, %rsp
0000000000018ad4	movss	%xmm0, (%rsp)
0000000000018ad9	subq	$0x10, %rsp
0000000000018add	movss	%xmm1, (%rsp)
0000000000018ae2	pushq	%rsi
0000000000018ae3	pushq	%rdi
0000000000018ae4	callq	__Z7getBasev ## getBase()
0000000000018ae9	addq	$0x122e10, %rax
0000000000018aef	popq	%rdi
0000000000018af0	popq	%rsi
0000000000018af1	movss	(%rsp), %xmm1
0000000000018af6	addq	$0x10, %rsp
0000000000018afa	movss	(%rsp), %xmm0
0000000000018aff	addq	$0x10, %rsp
0000000000018b03	popq	%r15
0000000000018b05	popq	%r14
0000000000018b07	popq	%r13
0000000000018b09	popq	%r12
0000000000018b0b	popq	%r11
0000000000018b0d	popq	%r10
0000000000018b0f	popq	%r9
0000000000018b11	popq	%r8
0000000000018b13	popq	%rcx
0000000000018b14	popq	%rdx
0000000000018b15	popq	%rsi
0000000000018b16	popq	%rdi
0000000000018b17	popq	%rbx
0000000000018b18	popq	%rbp
0000000000018b19	jmpq	*%rax
__ZN7cocos2d6CCNode20nodeToWorldTransformEv:
0000000000018b1b	pushq	%rbp
0000000000018b1c	movq	%rsp, %rbp
0000000000018b1f	pushq	%rbx
0000000000018b20	pushq	%rdi
0000000000018b21	pushq	%rsi
0000000000018b22	pushq	%rdx
0000000000018b23	pushq	%rcx
0000000000018b24	pushq	%r8
0000000000018b26	pushq	%r9
0000000000018b28	pushq	%r10
0000000000018b2a	pushq	%r11
0000000000018b2c	pushq	%r12
0000000000018b2e	pushq	%r13
0000000000018b30	pushq	%r14
0000000000018b32	pushq	%r15
0000000000018b34	subq	$0x10, %rsp
0000000000018b38	movss	%xmm0, (%rsp)
0000000000018b3d	subq	$0x10, %rsp
0000000000018b41	movss	%xmm1, (%rsp)
0000000000018b46	pushq	%rsi
0000000000018b47	pushq	%rdi
0000000000018b48	callq	__Z7getBasev ## getBase()
0000000000018b4d	addq	$0x124670, %rax
0000000000018b53	popq	%rdi
0000000000018b54	popq	%rsi
0000000000018b55	movss	(%rsp), %xmm1
0000000000018b5a	addq	$0x10, %rsp
0000000000018b5e	movss	(%rsp), %xmm0
0000000000018b63	addq	$0x10, %rsp
0000000000018b67	popq	%r15
0000000000018b69	popq	%r14
0000000000018b6b	popq	%r13
0000000000018b6d	popq	%r12
0000000000018b6f	popq	%r11
0000000000018b71	popq	%r10
0000000000018b73	popq	%r9
0000000000018b75	popq	%r8
0000000000018b77	popq	%rcx
0000000000018b78	popq	%rdx
0000000000018b79	popq	%rsi
0000000000018b7a	popq	%rdi
0000000000018b7b	popq	%rbx
0000000000018b7c	popq	%rbp
0000000000018b7d	jmpq	*%rax
__ZN7cocos2d6CCNode20worldToNodeTransformEv:
0000000000018b7f	pushq	%rbp
0000000000018b80	movq	%rsp, %rbp
0000000000018b83	pushq	%rbx
0000000000018b84	pushq	%rdi
0000000000018b85	pushq	%rsi
0000000000018b86	pushq	%rdx
0000000000018b87	pushq	%rcx
0000000000018b88	pushq	%r8
0000000000018b8a	pushq	%r9
0000000000018b8c	pushq	%r10
0000000000018b8e	pushq	%r11
0000000000018b90	pushq	%r12
0000000000018b92	pushq	%r13
0000000000018b94	pushq	%r14
0000000000018b96	pushq	%r15
0000000000018b98	subq	$0x10, %rsp
0000000000018b9c	movss	%xmm0, (%rsp)
0000000000018ba1	subq	$0x10, %rsp
0000000000018ba5	movss	%xmm1, (%rsp)
0000000000018baa	pushq	%rsi
0000000000018bab	pushq	%rdi
0000000000018bac	callq	__Z7getBasev ## getBase()
0000000000018bb1	addq	$0x124710, %rax
0000000000018bb7	popq	%rdi
0000000000018bb8	popq	%rsi
0000000000018bb9	movss	(%rsp), %xmm1
0000000000018bbe	addq	$0x10, %rsp
0000000000018bc2	movss	(%rsp), %xmm0
0000000000018bc7	addq	$0x10, %rsp
0000000000018bcb	popq	%r15
0000000000018bcd	popq	%r14
0000000000018bcf	popq	%r13
0000000000018bd1	popq	%r12
0000000000018bd3	popq	%r11
0000000000018bd5	popq	%r10
0000000000018bd7	popq	%r9
0000000000018bd9	popq	%r8
0000000000018bdb	popq	%rcx
0000000000018bdc	popq	%rdx
0000000000018bdd	popq	%rsi
0000000000018bde	popq	%rdi
0000000000018bdf	popq	%rbx
0000000000018be0	popq	%rbp
0000000000018be1	jmpq	*%rax
__ZN7cocos2d6CCNode21nodeToParentTransformEv:
0000000000018be3	pushq	%rbp
0000000000018be4	movq	%rsp, %rbp
0000000000018be7	pushq	%rbx
0000000000018be8	pushq	%rdi
0000000000018be9	pushq	%rsi
0000000000018bea	pushq	%rdx
0000000000018beb	pushq	%rcx
0000000000018bec	pushq	%r8
0000000000018bee	pushq	%r9
0000000000018bf0	pushq	%r10
0000000000018bf2	pushq	%r11
0000000000018bf4	pushq	%r12
0000000000018bf6	pushq	%r13
0000000000018bf8	pushq	%r14
0000000000018bfa	pushq	%r15
0000000000018bfc	subq	$0x10, %rsp
0000000000018c00	movss	%xmm0, (%rsp)
0000000000018c05	subq	$0x10, %rsp
0000000000018c09	movss	%xmm1, (%rsp)
0000000000018c0e	pushq	%rsi
0000000000018c0f	pushq	%rdi
0000000000018c10	callq	__Z7getBasev ## getBase()
0000000000018c15	addq	$0x124210, %rax
0000000000018c1b	popq	%rdi
0000000000018c1c	popq	%rsi
0000000000018c1d	movss	(%rsp), %xmm1
0000000000018c22	addq	$0x10, %rsp
0000000000018c26	movss	(%rsp), %xmm0
0000000000018c2b	addq	$0x10, %rsp
0000000000018c2f	popq	%r15
0000000000018c31	popq	%r14
0000000000018c33	popq	%r13
0000000000018c35	popq	%r12
0000000000018c37	popq	%r11
0000000000018c39	popq	%r10
0000000000018c3b	popq	%r9
0000000000018c3d	popq	%r8
0000000000018c3f	popq	%rcx
0000000000018c40	popq	%rdx
0000000000018c41	popq	%rsi
0000000000018c42	popq	%rdi
0000000000018c43	popq	%rbx
0000000000018c44	popq	%rbp
0000000000018c45	jmpq	*%rax
__ZN7cocos2d6CCNode21parentToNodeTransformEv:
0000000000018c47	pushq	%rbp
0000000000018c48	movq	%rsp, %rbp
0000000000018c4b	pushq	%rbx
0000000000018c4c	pushq	%rdi
0000000000018c4d	pushq	%rsi
0000000000018c4e	pushq	%rdx
0000000000018c4f	pushq	%rcx
0000000000018c50	pushq	%r8
0000000000018c52	pushq	%r9
0000000000018c54	pushq	%r10
0000000000018c56	pushq	%r11
0000000000018c58	pushq	%r12
0000000000018c5a	pushq	%r13
0000000000018c5c	pushq	%r14
0000000000018c5e	pushq	%r15
0000000000018c60	subq	$0x10, %rsp
0000000000018c64	movss	%xmm0, (%rsp)
0000000000018c69	subq	$0x10, %rsp
0000000000018c6d	movss	%xmm1, (%rsp)
0000000000018c72	pushq	%rsi
0000000000018c73	pushq	%rdi
0000000000018c74	callq	__Z7getBasev ## getBase()
0000000000018c79	addq	$0x1245d0, %rax
0000000000018c7f	popq	%rdi
0000000000018c80	popq	%rsi
0000000000018c81	movss	(%rsp), %xmm1
0000000000018c86	addq	$0x10, %rsp
0000000000018c8a	movss	(%rsp), %xmm0
0000000000018c8f	addq	$0x10, %rsp
0000000000018c93	popq	%r15
0000000000018c95	popq	%r14
0000000000018c97	popq	%r13
0000000000018c99	popq	%r12
0000000000018c9b	popq	%r11
0000000000018c9d	popq	%r10
0000000000018c9f	popq	%r9
0000000000018ca1	popq	%r8
0000000000018ca3	popq	%rcx
0000000000018ca4	popq	%rdx
0000000000018ca5	popq	%rsi
0000000000018ca6	popq	%rdi
0000000000018ca7	popq	%rbx
0000000000018ca8	popq	%rbp
0000000000018ca9	jmpq	*%rax
__ZN7cocos2d6CCNode21registerScriptHandlerEi:
0000000000018cab	pushq	%rbp
0000000000018cac	movq	%rsp, %rbp
0000000000018caf	pushq	%rbx
0000000000018cb0	pushq	%rdi
0000000000018cb1	pushq	%rsi
0000000000018cb2	pushq	%rdx
0000000000018cb3	pushq	%rcx
0000000000018cb4	pushq	%r8
0000000000018cb6	pushq	%r9
0000000000018cb8	pushq	%r10
0000000000018cba	pushq	%r11
0000000000018cbc	pushq	%r12
0000000000018cbe	pushq	%r13
0000000000018cc0	pushq	%r14
0000000000018cc2	pushq	%r15
0000000000018cc4	subq	$0x10, %rsp
0000000000018cc8	movss	%xmm0, (%rsp)
0000000000018ccd	subq	$0x10, %rsp
0000000000018cd1	movss	%xmm1, (%rsp)
0000000000018cd6	pushq	%rsi
0000000000018cd7	pushq	%rdi
0000000000018cd8	callq	__Z7getBasev ## getBase()
0000000000018cdd	addq	$0x123d90, %rax
0000000000018ce3	popq	%rdi
0000000000018ce4	popq	%rsi
0000000000018ce5	movss	(%rsp), %xmm1
0000000000018cea	addq	$0x10, %rsp
0000000000018cee	movss	(%rsp), %xmm0
0000000000018cf3	addq	$0x10, %rsp
0000000000018cf7	popq	%r15
0000000000018cf9	popq	%r14
0000000000018cfb	popq	%r13
0000000000018cfd	popq	%r12
0000000000018cff	popq	%r11
0000000000018d01	popq	%r10
0000000000018d03	popq	%r9
0000000000018d05	popq	%r8
0000000000018d07	popq	%rcx
0000000000018d08	popq	%rdx
0000000000018d09	popq	%rsi
0000000000018d0a	popq	%rdi
0000000000018d0b	popq	%rbx
0000000000018d0c	popq	%rbp
0000000000018d0d	jmpq	*%rax
__ZN7cocos2d6CCNode22getAnchorPointInPointsEv:
0000000000018d0f	pushq	%rbp
0000000000018d10	movq	%rsp, %rbp
0000000000018d13	pushq	%rbx
0000000000018d14	pushq	%rdi
0000000000018d15	pushq	%rsi
0000000000018d16	pushq	%rdx
0000000000018d17	pushq	%rcx
0000000000018d18	pushq	%r8
0000000000018d1a	pushq	%r9
0000000000018d1c	pushq	%r10
0000000000018d1e	pushq	%r11
0000000000018d20	pushq	%r12
0000000000018d22	pushq	%r13
0000000000018d24	pushq	%r14
0000000000018d26	pushq	%r15
0000000000018d28	subq	$0x10, %rsp
0000000000018d2c	movss	%xmm0, (%rsp)
0000000000018d31	subq	$0x10, %rsp
0000000000018d35	movss	%xmm1, (%rsp)
0000000000018d3a	pushq	%rsi
0000000000018d3b	pushq	%rdi
0000000000018d3c	callq	__Z7getBasev ## getBase()
0000000000018d41	addq	$0x122d70, %rax
0000000000018d47	popq	%rdi
0000000000018d48	popq	%rsi
0000000000018d49	movss	(%rsp), %xmm1
0000000000018d4e	addq	$0x10, %rsp
0000000000018d52	movss	(%rsp), %xmm0
0000000000018d57	addq	$0x10, %rsp
0000000000018d5b	popq	%r15
0000000000018d5d	popq	%r14
0000000000018d5f	popq	%r13
0000000000018d61	popq	%r12
0000000000018d63	popq	%r11
0000000000018d65	popq	%r10
0000000000018d67	popq	%r9
0000000000018d69	popq	%r8
0000000000018d6b	popq	%rcx
0000000000018d6c	popq	%rdx
0000000000018d6d	popq	%rsi
0000000000018d6e	popq	%rdi
0000000000018d6f	popq	%rbx
0000000000018d70	popq	%rbp
0000000000018d71	jmpq	*%rax
__ZN7cocos2d6CCNode23unregisterScriptHandlerEv:
0000000000018d73	pushq	%rbp
0000000000018d74	movq	%rsp, %rbp
0000000000018d77	pushq	%rbx
0000000000018d78	pushq	%rdi
0000000000018d79	pushq	%rsi
0000000000018d7a	pushq	%rdx
0000000000018d7b	pushq	%rcx
0000000000018d7c	pushq	%r8
0000000000018d7e	pushq	%r9
0000000000018d80	pushq	%r10
0000000000018d82	pushq	%r11
0000000000018d84	pushq	%r12
0000000000018d86	pushq	%r13
0000000000018d88	pushq	%r14
0000000000018d8a	pushq	%r15
0000000000018d8c	subq	$0x10, %rsp
0000000000018d90	movss	%xmm0, (%rsp)
0000000000018d95	subq	$0x10, %rsp
0000000000018d99	movss	%xmm1, (%rsp)
0000000000018d9e	pushq	%rsi
0000000000018d9f	pushq	%rdi
0000000000018da0	callq	__Z7getBasev ## getBase()
0000000000018da5	addq	$0x123dc0, %rax
0000000000018dab	popq	%rdi
0000000000018dac	popq	%rsi
0000000000018dad	movss	(%rsp), %xmm1
0000000000018db2	addq	$0x10, %rsp
0000000000018db6	movss	(%rsp), %xmm0
0000000000018dbb	addq	$0x10, %rsp
0000000000018dbf	popq	%r15
0000000000018dc1	popq	%r14
0000000000018dc3	popq	%r13
0000000000018dc5	popq	%r12
0000000000018dc7	popq	%r11
0000000000018dc9	popq	%r10
0000000000018dcb	popq	%r9
0000000000018dcd	popq	%r8
0000000000018dcf	popq	%rcx
0000000000018dd0	popq	%rdx
0000000000018dd1	popq	%rsi
0000000000018dd2	popq	%rdi
0000000000018dd3	popq	%rbx
0000000000018dd4	popq	%rbp
0000000000018dd5	jmpq	*%rax
__ZN7cocos2d6CCNode24onExitTransitionDidStartEv:
0000000000018dd7	pushq	%rbp
0000000000018dd8	movq	%rsp, %rbp
0000000000018ddb	pushq	%rbx
0000000000018ddc	pushq	%rdi
0000000000018ddd	pushq	%rsi
0000000000018dde	pushq	%rdx
0000000000018ddf	pushq	%rcx
0000000000018de0	pushq	%r8
0000000000018de2	pushq	%r9
0000000000018de4	pushq	%r10
0000000000018de6	pushq	%r11
0000000000018de8	pushq	%r12
0000000000018dea	pushq	%r13
0000000000018dec	pushq	%r14
0000000000018dee	pushq	%r15
0000000000018df0	subq	$0x10, %rsp
0000000000018df4	movss	%xmm0, (%rsp)
0000000000018df9	subq	$0x10, %rsp
0000000000018dfd	movss	%xmm1, (%rsp)
0000000000018e02	pushq	%rsi
0000000000018e03	pushq	%rdi
0000000000018e04	callq	__Z7getBasev ## getBase()
0000000000018e09	addq	$0x123c00, %rax
0000000000018e0f	popq	%rdi
0000000000018e10	popq	%rsi
0000000000018e11	movss	(%rsp), %xmm1
0000000000018e16	addq	$0x10, %rsp
0000000000018e1a	movss	(%rsp), %xmm0
0000000000018e1f	addq	$0x10, %rsp
0000000000018e23	popq	%r15
0000000000018e25	popq	%r14
0000000000018e27	popq	%r13
0000000000018e29	popq	%r12
0000000000018e2b	popq	%r11
0000000000018e2d	popq	%r10
0000000000018e2f	popq	%r9
0000000000018e31	popq	%r8
0000000000018e33	popq	%rcx
0000000000018e34	popq	%rdx
0000000000018e35	popq	%rsi
0000000000018e36	popq	%rdi
0000000000018e37	popq	%rbx
0000000000018e38	popq	%rbp
0000000000018e39	jmpq	*%rax
__ZN7cocos2d6CCNode26onEnterTransitionDidFinishEv:
0000000000018e3b	pushq	%rbp
0000000000018e3c	movq	%rsp, %rbp
0000000000018e3f	pushq	%rbx
0000000000018e40	pushq	%rdi
0000000000018e41	pushq	%rsi
0000000000018e42	pushq	%rdx
0000000000018e43	pushq	%rcx
0000000000018e44	pushq	%r8
0000000000018e46	pushq	%r9
0000000000018e48	pushq	%r10
0000000000018e4a	pushq	%r11
0000000000018e4c	pushq	%r12
0000000000018e4e	pushq	%r13
0000000000018e50	pushq	%r14
0000000000018e52	pushq	%r15
0000000000018e54	subq	$0x10, %rsp
0000000000018e58	movss	%xmm0, (%rsp)
0000000000018e5d	subq	$0x10, %rsp
0000000000018e61	movss	%xmm1, (%rsp)
0000000000018e66	pushq	%rsi
0000000000018e67	pushq	%rdi
0000000000018e68	callq	__Z7getBasev ## getBase()
0000000000018e6d	addq	$0x123b90, %rax
0000000000018e73	popq	%rdi
0000000000018e74	popq	%rsi
0000000000018e75	movss	(%rsp), %xmm1
0000000000018e7a	addq	$0x10, %rsp
0000000000018e7e	movss	(%rsp), %xmm0
0000000000018e83	addq	$0x10, %rsp
0000000000018e87	popq	%r15
0000000000018e89	popq	%r14
0000000000018e8b	popq	%r13
0000000000018e8d	popq	%r12
0000000000018e8f	popq	%r11
0000000000018e91	popq	%r10
0000000000018e93	popq	%r9
0000000000018e95	popq	%r8
0000000000018e97	popq	%rcx
0000000000018e98	popq	%rdx
0000000000018e99	popq	%rsi
0000000000018e9a	popq	%rdi
0000000000018e9b	popq	%rbx
0000000000018e9c	popq	%rbp
0000000000018e9d	jmpq	*%rax
__ZN7cocos2d6CCNode26removeFromParentAndCleanupEb:
0000000000018e9f	pushq	%rbp
0000000000018ea0	movq	%rsp, %rbp
0000000000018ea3	pushq	%rbx
0000000000018ea4	pushq	%rdi
0000000000018ea5	pushq	%rsi
0000000000018ea6	pushq	%rdx
0000000000018ea7	pushq	%rcx
0000000000018ea8	pushq	%r8
0000000000018eaa	pushq	%r9
0000000000018eac	pushq	%r10
0000000000018eae	pushq	%r11
0000000000018eb0	pushq	%r12
0000000000018eb2	pushq	%r13
0000000000018eb4	pushq	%r14
0000000000018eb6	pushq	%r15
0000000000018eb8	subq	$0x10, %rsp
0000000000018ebc	movss	%xmm0, (%rsp)
0000000000018ec1	subq	$0x10, %rsp
0000000000018ec5	movss	%xmm1, (%rsp)
0000000000018eca	pushq	%rsi
0000000000018ecb	pushq	%rdi
0000000000018ecc	callq	__Z7getBasev ## getBase()
0000000000018ed1	addq	$0x123410, %rax
0000000000018ed7	popq	%rdi
0000000000018ed8	popq	%rsi
0000000000018ed9	movss	(%rsp), %xmm1
0000000000018ede	addq	$0x10, %rsp
0000000000018ee2	movss	(%rsp), %xmm0
0000000000018ee7	addq	$0x10, %rsp
0000000000018eeb	popq	%r15
0000000000018eed	popq	%r14
0000000000018eef	popq	%r13
0000000000018ef1	popq	%r12
0000000000018ef3	popq	%r11
0000000000018ef5	popq	%r10
0000000000018ef7	popq	%r9
0000000000018ef9	popq	%r8
0000000000018efb	popq	%rcx
0000000000018efc	popq	%rdx
0000000000018efd	popq	%rsi
0000000000018efe	popq	%rdi
0000000000018eff	popq	%rbx
0000000000018f00	popq	%rbp
0000000000018f01	jmpq	*%rax
__ZN7cocos2d6CCNode28ignoreAnchorPointForPositionEb:
0000000000018f03	pushq	%rbp
0000000000018f04	movq	%rsp, %rbp
0000000000018f07	pushq	%rbx
0000000000018f08	pushq	%rdi
0000000000018f09	pushq	%rsi
0000000000018f0a	pushq	%rdx
0000000000018f0b	pushq	%rcx
0000000000018f0c	pushq	%r8
0000000000018f0e	pushq	%r9
0000000000018f10	pushq	%r10
0000000000018f12	pushq	%r11
0000000000018f14	pushq	%r12
0000000000018f16	pushq	%r13
0000000000018f18	pushq	%r14
0000000000018f1a	pushq	%r15
0000000000018f1c	subq	$0x10, %rsp
0000000000018f20	movss	%xmm0, (%rsp)
0000000000018f25	subq	$0x10, %rsp
0000000000018f29	movss	%xmm1, (%rsp)
0000000000018f2e	pushq	%rsi
0000000000018f2f	pushq	%rdi
0000000000018f30	callq	__Z7getBasev ## getBase()
0000000000018f35	addq	$0x122f00, %rax
0000000000018f3b	popq	%rdi
0000000000018f3c	popq	%rsi
0000000000018f3d	movss	(%rsp), %xmm1
0000000000018f42	addq	$0x10, %rsp
0000000000018f46	movss	(%rsp), %xmm0
0000000000018f4b	addq	$0x10, %rsp
0000000000018f4f	popq	%r15
0000000000018f51	popq	%r14
0000000000018f53	popq	%r13
0000000000018f55	popq	%r12
0000000000018f57	popq	%r11
0000000000018f59	popq	%r10
0000000000018f5b	popq	%r9
0000000000018f5d	popq	%r8
0000000000018f5f	popq	%rcx
0000000000018f60	popq	%rdx
0000000000018f61	popq	%rsi
0000000000018f62	popq	%rdi
0000000000018f63	popq	%rbx
0000000000018f64	popq	%rbp
0000000000018f65	jmpq	*%rax
__ZN7cocos2d6CCNode28removeAllChildrenWithCleanupEb:
0000000000018f67	pushq	%rbp
0000000000018f68	movq	%rsp, %rbp
0000000000018f6b	pushq	%rbx
0000000000018f6c	pushq	%rdi
0000000000018f6d	pushq	%rsi
0000000000018f6e	pushq	%rdx
0000000000018f6f	pushq	%rcx
0000000000018f70	pushq	%r8
0000000000018f72	pushq	%r9
0000000000018f74	pushq	%r10
0000000000018f76	pushq	%r11
0000000000018f78	pushq	%r12
0000000000018f7a	pushq	%r13
0000000000018f7c	pushq	%r14
0000000000018f7e	pushq	%r15
0000000000018f80	subq	$0x10, %rsp
0000000000018f84	movss	%xmm0, (%rsp)
0000000000018f89	subq	$0x10, %rsp
0000000000018f8d	movss	%xmm1, (%rsp)
0000000000018f92	pushq	%rsi
0000000000018f93	pushq	%rdi
0000000000018f94	callq	__Z7getBasev ## getBase()
0000000000018f99	addq	$0x123620, %rax
0000000000018f9f	popq	%rdi
0000000000018fa0	popq	%rsi
0000000000018fa1	movss	(%rsp), %xmm1
0000000000018fa6	addq	$0x10, %rsp
0000000000018faa	movss	(%rsp), %xmm0
0000000000018faf	addq	$0x10, %rsp
0000000000018fb3	popq	%r15
0000000000018fb5	popq	%r14
0000000000018fb7	popq	%r13
0000000000018fb9	popq	%r12
0000000000018fbb	popq	%r11
0000000000018fbd	popq	%r10
0000000000018fbf	popq	%r9
0000000000018fc1	popq	%r8
0000000000018fc3	popq	%rcx
0000000000018fc4	popq	%rdx
0000000000018fc5	popq	%rsi
0000000000018fc6	popq	%rdi
0000000000018fc7	popq	%rbx
0000000000018fc8	popq	%rbp
0000000000018fc9	jmpq	*%rax
__ZN7cocos2d6CCNode30isIgnoreAnchorPointForPositionEv:
0000000000018fcb	pushq	%rbp
0000000000018fcc	movq	%rsp, %rbp
0000000000018fcf	pushq	%rbx
0000000000018fd0	pushq	%rdi
0000000000018fd1	pushq	%rsi
0000000000018fd2	pushq	%rdx
0000000000018fd3	pushq	%rcx
0000000000018fd4	pushq	%r8
0000000000018fd6	pushq	%r9
0000000000018fd8	pushq	%r10
0000000000018fda	pushq	%r11
0000000000018fdc	pushq	%r12
0000000000018fde	pushq	%r13
0000000000018fe0	pushq	%r14
0000000000018fe2	pushq	%r15
0000000000018fe4	subq	$0x10, %rsp
0000000000018fe8	movss	%xmm0, (%rsp)
0000000000018fed	subq	$0x10, %rsp
0000000000018ff1	movss	%xmm1, (%rsp)
0000000000018ff6	pushq	%rsi
0000000000018ff7	pushq	%rdi
0000000000018ff8	callq	__Z7getBasev ## getBase()
0000000000018ffd	addq	$0x122ef0, %rax
0000000000019003	popq	%rdi
0000000000019004	popq	%rsi
0000000000019005	movss	(%rsp), %xmm1
000000000001900a	addq	$0x10, %rsp
000000000001900e	movss	(%rsp), %xmm0
0000000000019013	addq	$0x10, %rsp
0000000000019017	popq	%r15
0000000000019019	popq	%r14
000000000001901b	popq	%r13
000000000001901d	popq	%r12
000000000001901f	popq	%r11
0000000000019021	popq	%r10
0000000000019023	popq	%r9
0000000000019025	popq	%r8
0000000000019027	popq	%rcx
0000000000019028	popq	%rdx
0000000000019029	popq	%rsi
000000000001902a	popq	%rdi
000000000001902b	popq	%rbx
000000000001902c	popq	%rbp
000000000001902d	jmpq	*%rax
__ZN7cocos2d6CCNode4drawEv:
000000000001902f	pushq	%rbp
0000000000019030	movq	%rsp, %rbp
0000000000019033	pushq	%rbx
0000000000019034	pushq	%rdi
0000000000019035	pushq	%rsi
0000000000019036	pushq	%rdx
0000000000019037	pushq	%rcx
0000000000019038	pushq	%r8
000000000001903a	pushq	%r9
000000000001903c	pushq	%r10
000000000001903e	pushq	%r11
0000000000019040	pushq	%r12
0000000000019042	pushq	%r13
0000000000019044	pushq	%r14
0000000000019046	pushq	%r15
0000000000019048	subq	$0x10, %rsp
000000000001904c	movss	%xmm0, (%rsp)
0000000000019051	subq	$0x10, %rsp
0000000000019055	movss	%xmm1, (%rsp)
000000000001905a	pushq	%rsi
000000000001905b	pushq	%rdi
000000000001905c	callq	__Z7getBasev ## getBase()
0000000000019061	addq	$0x123840, %rax
0000000000019067	popq	%rdi
0000000000019068	popq	%rsi
0000000000019069	movss	(%rsp), %xmm1
000000000001906e	addq	$0x10, %rsp
0000000000019072	movss	(%rsp), %xmm0
0000000000019077	addq	$0x10, %rsp
000000000001907b	popq	%r15
000000000001907d	popq	%r14
000000000001907f	popq	%r13
0000000000019081	popq	%r12
0000000000019083	popq	%r11
0000000000019085	popq	%r10
0000000000019087	popq	%r9
0000000000019089	popq	%r8
000000000001908b	popq	%rcx
000000000001908c	popq	%rdx
000000000001908d	popq	%rsi
000000000001908e	popq	%rdi
000000000001908f	popq	%rbx
0000000000019090	popq	%rbp
0000000000019091	jmpq	*%rax
__ZN7cocos2d6CCNode4initEv:
0000000000019093	pushq	%rbp
0000000000019094	movq	%rsp, %rbp
0000000000019097	pushq	%rbx
0000000000019098	pushq	%rdi
0000000000019099	pushq	%rsi
000000000001909a	pushq	%rdx
000000000001909b	pushq	%rcx
000000000001909c	pushq	%r8
000000000001909e	pushq	%r9
00000000000190a0	pushq	%r10
00000000000190a2	pushq	%r11
00000000000190a4	pushq	%r12
00000000000190a6	pushq	%r13
00000000000190a8	pushq	%r14
00000000000190aa	pushq	%r15
00000000000190ac	subq	$0x10, %rsp
00000000000190b0	movss	%xmm0, (%rsp)
00000000000190b5	subq	$0x10, %rsp
00000000000190b9	movss	%xmm1, (%rsp)
00000000000190be	pushq	%rsi
00000000000190bf	pushq	%rdi
00000000000190c0	callq	__Z7getBasev ## getBase()
00000000000190c5	addq	$0x122910, %rax
00000000000190cb	popq	%rdi
00000000000190cc	popq	%rsi
00000000000190cd	movss	(%rsp), %xmm1
00000000000190d2	addq	$0x10, %rsp
00000000000190d6	movss	(%rsp), %xmm0
00000000000190db	addq	$0x10, %rsp
00000000000190df	popq	%r15
00000000000190e1	popq	%r14
00000000000190e3	popq	%r13
00000000000190e5	popq	%r12
00000000000190e7	popq	%r11
00000000000190e9	popq	%r10
00000000000190eb	popq	%r9
00000000000190ed	popq	%r8
00000000000190ef	popq	%rcx
00000000000190f0	popq	%rdx
00000000000190f1	popq	%rsi
00000000000190f2	popq	%rdi
00000000000190f3	popq	%rbx
00000000000190f4	popq	%rbp
00000000000190f5	jmpq	*%rax
__ZN7cocos2d6CCNode5visitEv:
00000000000190f7	pushq	%rbp
00000000000190f8	movq	%rsp, %rbp
00000000000190fb	pushq	%rbx
00000000000190fc	pushq	%rdi
00000000000190fd	pushq	%rsi
00000000000190fe	pushq	%rdx
00000000000190ff	pushq	%rcx
0000000000019100	pushq	%r8
0000000000019102	pushq	%r9
0000000000019104	pushq	%r10
0000000000019106	pushq	%r11
0000000000019108	pushq	%r12
000000000001910a	pushq	%r13
000000000001910c	pushq	%r14
000000000001910e	pushq	%r15
0000000000019110	subq	$0x10, %rsp
0000000000019114	movss	%xmm0, (%rsp)
0000000000019119	subq	$0x10, %rsp
000000000001911d	movss	%xmm1, (%rsp)
0000000000019122	pushq	%rsi
0000000000019123	pushq	%rdi
0000000000019124	callq	__Z7getBasev ## getBase()
0000000000019129	addq	$0x123850, %rax
000000000001912f	popq	%rdi
0000000000019130	popq	%rsi
0000000000019131	movss	(%rsp), %xmm1
0000000000019136	addq	$0x10, %rsp
000000000001913a	movss	(%rsp), %xmm0
000000000001913f	addq	$0x10, %rsp
0000000000019143	popq	%r15
0000000000019145	popq	%r14
0000000000019147	popq	%r13
0000000000019149	popq	%r12
000000000001914b	popq	%r11
000000000001914d	popq	%r10
000000000001914f	popq	%r9
0000000000019151	popq	%r8
0000000000019153	popq	%rcx
0000000000019154	popq	%rdx
0000000000019155	popq	%rsi
0000000000019156	popq	%rdi
0000000000019157	popq	%rbx
0000000000019158	popq	%rbp
0000000000019159	jmpq	*%rax
__ZN7cocos2d6CCNode6onExitEv:
000000000001915b	pushq	%rbp
000000000001915c	movq	%rsp, %rbp
000000000001915f	pushq	%rbx
0000000000019160	pushq	%rdi
0000000000019161	pushq	%rsi
0000000000019162	pushq	%rdx
0000000000019163	pushq	%rcx
0000000000019164	pushq	%r8
0000000000019166	pushq	%r9
0000000000019168	pushq	%r10
000000000001916a	pushq	%r11
000000000001916c	pushq	%r12
000000000001916e	pushq	%r13
0000000000019170	pushq	%r14
0000000000019172	pushq	%r15
0000000000019174	subq	$0x10, %rsp
0000000000019178	movss	%xmm0, (%rsp)
000000000001917d	subq	$0x10, %rsp
0000000000019181	movss	%xmm1, (%rsp)
0000000000019186	pushq	%rsi
0000000000019187	pushq	%rdi
0000000000019188	callq	__Z7getBasev ## getBase()
000000000001918d	addq	$0x123ca0, %rax
0000000000019193	popq	%rdi
0000000000019194	popq	%rsi
0000000000019195	movss	(%rsp), %xmm1
000000000001919a	addq	$0x10, %rsp
000000000001919e	movss	(%rsp), %xmm0
00000000000191a3	addq	$0x10, %rsp
00000000000191a7	popq	%r15
00000000000191a9	popq	%r14
00000000000191ab	popq	%r13
00000000000191ad	popq	%r12
00000000000191af	popq	%r11
00000000000191b1	popq	%r10
00000000000191b3	popq	%r9
00000000000191b5	popq	%r8
00000000000191b7	popq	%rcx
00000000000191b8	popq	%rdx
00000000000191b9	popq	%rsi
00000000000191ba	popq	%rdi
00000000000191bb	popq	%rbx
00000000000191bc	popq	%rbp
00000000000191bd	jmpq	*%rax
__ZN7cocos2d6CCNode6updateEf:
00000000000191bf	pushq	%rbp
00000000000191c0	movq	%rsp, %rbp
00000000000191c3	pushq	%rbx
00000000000191c4	pushq	%rdi
00000000000191c5	pushq	%rsi
00000000000191c6	pushq	%rdx
00000000000191c7	pushq	%rcx
00000000000191c8	pushq	%r8
00000000000191ca	pushq	%r9
00000000000191cc	pushq	%r10
00000000000191ce	pushq	%r11
00000000000191d0	pushq	%r12
00000000000191d2	pushq	%r13
00000000000191d4	pushq	%r14
00000000000191d6	pushq	%r15
00000000000191d8	subq	$0x10, %rsp
00000000000191dc	movss	%xmm0, (%rsp)
00000000000191e1	subq	$0x10, %rsp
00000000000191e5	movss	%xmm1, (%rsp)
00000000000191ea	pushq	%rsi
00000000000191eb	pushq	%rdi
00000000000191ec	callq	__Z7getBasev ## getBase()
00000000000191f1	addq	$0x1241a0, %rax
00000000000191f7	popq	%rdi
00000000000191f8	popq	%rsi
00000000000191f9	movss	(%rsp), %xmm1
00000000000191fe	addq	$0x10, %rsp
0000000000019202	movss	(%rsp), %xmm0
0000000000019207	addq	$0x10, %rsp
000000000001920b	popq	%r15
000000000001920d	popq	%r14
000000000001920f	popq	%r13
0000000000019211	popq	%r12
0000000000019213	popq	%r11
0000000000019215	popq	%r10
0000000000019217	popq	%r9
0000000000019219	popq	%r8
000000000001921b	popq	%rcx
000000000001921c	popq	%rdx
000000000001921d	popq	%rsi
000000000001921e	popq	%rdi
000000000001921f	popq	%rbx
0000000000019220	popq	%rbp
0000000000019221	jmpq	*%rax
__ZN7cocos2d6CCNode7cleanupEv:
0000000000019223	pushq	%rbp
0000000000019224	movq	%rsp, %rbp
0000000000019227	pushq	%rbx
0000000000019228	pushq	%rdi
0000000000019229	pushq	%rsi
000000000001922a	pushq	%rdx
000000000001922b	pushq	%rcx
000000000001922c	pushq	%r8
000000000001922e	pushq	%r9
0000000000019230	pushq	%r10
0000000000019232	pushq	%r11
0000000000019234	pushq	%r12
0000000000019236	pushq	%r13
0000000000019238	pushq	%r14
000000000001923a	pushq	%r15
000000000001923c	subq	$0x10, %rsp
0000000000019240	movss	%xmm0, (%rsp)
0000000000019245	subq	$0x10, %rsp
0000000000019249	movss	%xmm1, (%rsp)
000000000001924e	pushq	%rsi
000000000001924f	pushq	%rdi
0000000000019250	callq	__Z7getBasev ## getBase()
0000000000019255	addq	$0x123100, %rax
000000000001925b	popq	%rdi
000000000001925c	popq	%rsi
000000000001925d	movss	(%rsp), %xmm1
0000000000019262	addq	$0x10, %rsp
0000000000019266	movss	(%rsp), %xmm0
000000000001926b	addq	$0x10, %rsp
000000000001926f	popq	%r15
0000000000019271	popq	%r14
0000000000019273	popq	%r13
0000000000019275	popq	%r12
0000000000019277	popq	%r11
0000000000019279	popq	%r10
000000000001927b	popq	%r9
000000000001927d	popq	%r8
000000000001927f	popq	%rcx
0000000000019280	popq	%rdx
0000000000019281	popq	%rsi
0000000000019282	popq	%rdi
0000000000019283	popq	%rbx
0000000000019284	popq	%rbp
0000000000019285	jmpq	*%rax
__ZN7cocos2d6CCNode7getGridEv:
0000000000019287	pushq	%rbp
0000000000019288	movq	%rsp, %rbp
000000000001928b	pushq	%rbx
000000000001928c	pushq	%rdi
000000000001928d	pushq	%rsi
000000000001928e	pushq	%rdx
000000000001928f	pushq	%rcx
0000000000019290	pushq	%r8
0000000000019292	pushq	%r9
0000000000019294	pushq	%r10
0000000000019296	pushq	%r11
0000000000019298	pushq	%r12
000000000001929a	pushq	%r13
000000000001929c	pushq	%r14
000000000001929e	pushq	%r15
00000000000192a0	subq	$0x10, %rsp
00000000000192a4	movss	%xmm0, (%rsp)
00000000000192a9	subq	$0x10, %rsp
00000000000192ad	movss	%xmm1, (%rsp)
00000000000192b2	pushq	%rsi
00000000000192b3	pushq	%rdi
00000000000192b4	callq	__Z7getBasev ## getBase()
00000000000192b9	addq	$0x122d00, %rax
00000000000192bf	popq	%rdi
00000000000192c0	popq	%rsi
00000000000192c1	movss	(%rsp), %xmm1
00000000000192c6	addq	$0x10, %rsp
00000000000192ca	movss	(%rsp), %xmm0
00000000000192cf	addq	$0x10, %rsp
00000000000192d3	popq	%r15
00000000000192d5	popq	%r14
00000000000192d7	popq	%r13
00000000000192d9	popq	%r12
00000000000192db	popq	%r11
00000000000192dd	popq	%r10
00000000000192df	popq	%r9
00000000000192e1	popq	%r8
00000000000192e3	popq	%rcx
00000000000192e4	popq	%rdx
00000000000192e5	popq	%rsi
00000000000192e6	popq	%rdi
00000000000192e7	popq	%rbx
00000000000192e8	popq	%rbp
00000000000192e9	jmpq	*%rax
__ZN7cocos2d6CCNode7onEnterEv:
00000000000192eb	pushq	%rbp
00000000000192ec	movq	%rsp, %rbp
00000000000192ef	pushq	%rbx
00000000000192f0	pushq	%rdi
00000000000192f1	pushq	%rsi
00000000000192f2	pushq	%rdx
00000000000192f3	pushq	%rcx
00000000000192f4	pushq	%r8
00000000000192f6	pushq	%r9
00000000000192f8	pushq	%r10
00000000000192fa	pushq	%r11
00000000000192fc	pushq	%r12
00000000000192fe	pushq	%r13
0000000000019300	pushq	%r14
0000000000019302	pushq	%r15
0000000000019304	subq	$0x10, %rsp
0000000000019308	movss	%xmm0, (%rsp)
000000000001930d	subq	$0x10, %rsp
0000000000019311	movss	%xmm1, (%rsp)
0000000000019316	pushq	%rsi
0000000000019317	pushq	%rdi
0000000000019318	callq	__Z7getBasev ## getBase()
000000000001931d	addq	$0x123a90, %rax
0000000000019323	popq	%rdi
0000000000019324	popq	%rsi
0000000000019325	movss	(%rsp), %xmm1
000000000001932a	addq	$0x10, %rsp
000000000001932e	movss	(%rsp), %xmm0
0000000000019333	addq	$0x10, %rsp
0000000000019337	popq	%r15
0000000000019339	popq	%r14
000000000001933b	popq	%r13
000000000001933d	popq	%r12
000000000001933f	popq	%r11
0000000000019341	popq	%r10
0000000000019343	popq	%r9
0000000000019345	popq	%r8
0000000000019347	popq	%rcx
0000000000019348	popq	%rdx
0000000000019349	popq	%rsi
000000000001934a	popq	%rdi
000000000001934b	popq	%rbx
000000000001934c	popq	%rbp
000000000001934d	jmpq	*%rax
__ZN7cocos2d6CCNode7setGridEPNS_10CCGridBaseE:
000000000001934f	pushq	%rbp
0000000000019350	movq	%rsp, %rbp
0000000000019353	pushq	%rbx
0000000000019354	pushq	%rdi
0000000000019355	pushq	%rsi
0000000000019356	pushq	%rdx
0000000000019357	pushq	%rcx
0000000000019358	pushq	%r8
000000000001935a	pushq	%r9
000000000001935c	pushq	%r10
000000000001935e	pushq	%r11
0000000000019360	pushq	%r12
0000000000019362	pushq	%r13
0000000000019364	pushq	%r14
0000000000019366	pushq	%r15
0000000000019368	subq	$0x10, %rsp
000000000001936c	movss	%xmm0, (%rsp)
0000000000019371	subq	$0x10, %rsp
0000000000019375	movss	%xmm1, (%rsp)
000000000001937a	pushq	%rsi
000000000001937b	pushq	%rdi
000000000001937c	callq	__Z7getBasev ## getBase()
0000000000019381	addq	$0x122d10, %rax
0000000000019387	popq	%rdi
0000000000019388	popq	%rsi
0000000000019389	movss	(%rsp), %xmm1
000000000001938e	addq	$0x10, %rsp
0000000000019392	movss	(%rsp), %xmm0
0000000000019397	addq	$0x10, %rsp
000000000001939b	popq	%r15
000000000001939d	popq	%r14
000000000001939f	popq	%r13
00000000000193a1	popq	%r12
00000000000193a3	popq	%r11
00000000000193a5	popq	%r10
00000000000193a7	popq	%r9
00000000000193a9	popq	%r8
00000000000193ab	popq	%rcx
00000000000193ac	popq	%rdx
00000000000193ad	popq	%rsi
00000000000193ae	popq	%rdi
00000000000193af	popq	%rbx
00000000000193b0	popq	%rbp
00000000000193b1	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_:
00000000000193b3	pushq	%rbp
00000000000193b4	movq	%rsp, %rbp
00000000000193b7	pushq	%rbx
00000000000193b8	pushq	%rdi
00000000000193b9	pushq	%rsi
00000000000193ba	pushq	%rdx
00000000000193bb	pushq	%rcx
00000000000193bc	pushq	%r8
00000000000193be	pushq	%r9
00000000000193c0	pushq	%r10
00000000000193c2	pushq	%r11
00000000000193c4	pushq	%r12
00000000000193c6	pushq	%r13
00000000000193c8	pushq	%r14
00000000000193ca	pushq	%r15
00000000000193cc	subq	$0x10, %rsp
00000000000193d0	movss	%xmm0, (%rsp)
00000000000193d5	subq	$0x10, %rsp
00000000000193d9	movss	%xmm1, (%rsp)
00000000000193de	pushq	%rsi
00000000000193df	pushq	%rdi
00000000000193e0	callq	__Z7getBasev ## getBase()
00000000000193e5	addq	$0x1233d0, %rax
00000000000193eb	popq	%rdi
00000000000193ec	popq	%rsi
00000000000193ed	movss	(%rsp), %xmm1
00000000000193f2	addq	$0x10, %rsp
00000000000193f6	movss	(%rsp), %xmm0
00000000000193fb	addq	$0x10, %rsp
00000000000193ff	popq	%r15
0000000000019401	popq	%r14
0000000000019403	popq	%r13
0000000000019405	popq	%r12
0000000000019407	popq	%r11
0000000000019409	popq	%r10
000000000001940b	popq	%r9
000000000001940d	popq	%r8
000000000001940f	popq	%rcx
0000000000019410	popq	%rdx
0000000000019411	popq	%rsi
0000000000019412	popq	%rdi
0000000000019413	popq	%rbx
0000000000019414	popq	%rbp
0000000000019415	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_i:
0000000000019417	pushq	%rbp
0000000000019418	movq	%rsp, %rbp
000000000001941b	pushq	%rbx
000000000001941c	pushq	%rdi
000000000001941d	pushq	%rsi
000000000001941e	pushq	%rdx
000000000001941f	pushq	%rcx
0000000000019420	pushq	%r8
0000000000019422	pushq	%r9
0000000000019424	pushq	%r10
0000000000019426	pushq	%r11
0000000000019428	pushq	%r12
000000000001942a	pushq	%r13
000000000001942c	pushq	%r14
000000000001942e	pushq	%r15
0000000000019430	subq	$0x10, %rsp
0000000000019434	movss	%xmm0, (%rsp)
0000000000019439	subq	$0x10, %rsp
000000000001943d	movss	%xmm1, (%rsp)
0000000000019442	pushq	%rsi
0000000000019443	pushq	%rdi
0000000000019444	callq	__Z7getBasev ## getBase()
0000000000019449	addq	$0x1233b0, %rax
000000000001944f	popq	%rdi
0000000000019450	popq	%rsi
0000000000019451	movss	(%rsp), %xmm1
0000000000019456	addq	$0x10, %rsp
000000000001945a	movss	(%rsp), %xmm0
000000000001945f	addq	$0x10, %rsp
0000000000019463	popq	%r15
0000000000019465	popq	%r14
0000000000019467	popq	%r13
0000000000019469	popq	%r12
000000000001946b	popq	%r11
000000000001946d	popq	%r10
000000000001946f	popq	%r9
0000000000019471	popq	%r8
0000000000019473	popq	%rcx
0000000000019474	popq	%rdx
0000000000019475	popq	%rsi
0000000000019476	popq	%rdi
0000000000019477	popq	%rbx
0000000000019478	popq	%rbp
0000000000019479	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_ii:
000000000001947b	pushq	%rbp
000000000001947c	movq	%rsp, %rbp
000000000001947f	pushq	%rbx
0000000000019480	pushq	%rdi
0000000000019481	pushq	%rsi
0000000000019482	pushq	%rdx
0000000000019483	pushq	%rcx
0000000000019484	pushq	%r8
0000000000019486	pushq	%r9
0000000000019488	pushq	%r10
000000000001948a	pushq	%r11
000000000001948c	pushq	%r12
000000000001948e	pushq	%r13
0000000000019490	pushq	%r14
0000000000019492	pushq	%r15
0000000000019494	subq	$0x10, %rsp
0000000000019498	movss	%xmm0, (%rsp)
000000000001949d	subq	$0x10, %rsp
00000000000194a1	movss	%xmm1, (%rsp)
00000000000194a6	pushq	%rsi
00000000000194a7	pushq	%rdi
00000000000194a8	callq	__Z7getBasev ## getBase()
00000000000194ad	addq	$0x1232a0, %rax
00000000000194b3	popq	%rdi
00000000000194b4	popq	%rsi
00000000000194b5	movss	(%rsp), %xmm1
00000000000194ba	addq	$0x10, %rsp
00000000000194be	movss	(%rsp), %xmm0
00000000000194c3	addq	$0x10, %rsp
00000000000194c7	popq	%r15
00000000000194c9	popq	%r14
00000000000194cb	popq	%r13
00000000000194cd	popq	%r12
00000000000194cf	popq	%r11
00000000000194d1	popq	%r10
00000000000194d3	popq	%r9
00000000000194d5	popq	%r8
00000000000194d7	popq	%rcx
00000000000194d8	popq	%rdx
00000000000194d9	popq	%rsi
00000000000194da	popq	%rdi
00000000000194db	popq	%rbx
00000000000194dc	popq	%rbp
00000000000194dd	jmpq	*%rax
__ZN7cocos2d6CCNode8getScaleEv:
00000000000194df	pushq	%rbp
00000000000194e0	movq	%rsp, %rbp
00000000000194e3	pushq	%rbx
00000000000194e4	pushq	%rdi
00000000000194e5	pushq	%rsi
00000000000194e6	pushq	%rdx
00000000000194e7	pushq	%rcx
00000000000194e8	pushq	%r8
00000000000194ea	pushq	%r9
00000000000194ec	pushq	%r10
00000000000194ee	pushq	%r11
00000000000194f0	pushq	%r12
00000000000194f2	pushq	%r13
00000000000194f4	pushq	%r14
00000000000194f6	pushq	%r15
00000000000194f8	subq	$0x10, %rsp
00000000000194fc	movss	%xmm0, (%rsp)
0000000000019501	subq	$0x10, %rsp
0000000000019505	movss	%xmm1, (%rsp)
000000000001950a	pushq	%rsi
000000000001950b	pushq	%rdi
000000000001950c	callq	__Z7getBasev ## getBase()
0000000000019511	addq	$0x122ab0, %rax
0000000000019517	popq	%rdi
0000000000019518	popq	%rsi
0000000000019519	movss	(%rsp), %xmm1
000000000001951e	addq	$0x10, %rsp
0000000000019522	movss	(%rsp), %xmm0
0000000000019527	addq	$0x10, %rsp
000000000001952b	popq	%r15
000000000001952d	popq	%r14
000000000001952f	popq	%r13
0000000000019531	popq	%r12
0000000000019533	popq	%r11
0000000000019535	popq	%r10
0000000000019537	popq	%r9
0000000000019539	popq	%r8
000000000001953b	popq	%rcx
000000000001953c	popq	%rdx
000000000001953d	popq	%rsi
000000000001953e	popq	%rdi
000000000001953f	popq	%rbx
0000000000019540	popq	%rbp
0000000000019541	jmpq	*%rax
__ZN7cocos2d6CCNode8getSkewXEv:
0000000000019543	pushq	%rbp
0000000000019544	movq	%rsp, %rbp
0000000000019547	pushq	%rbx
0000000000019548	pushq	%rdi
0000000000019549	pushq	%rsi
000000000001954a	pushq	%rdx
000000000001954b	pushq	%rcx
000000000001954c	pushq	%r8
000000000001954e	pushq	%r9
0000000000019550	pushq	%r10
0000000000019552	pushq	%r11
0000000000019554	pushq	%r12
0000000000019556	pushq	%r13
0000000000019558	pushq	%r14
000000000001955a	pushq	%r15
000000000001955c	subq	$0x10, %rsp
0000000000019560	movss	%xmm0, (%rsp)
0000000000019565	subq	$0x10, %rsp
0000000000019569	movss	%xmm1, (%rsp)
000000000001956e	pushq	%rsi
000000000001956f	pushq	%rdi
0000000000019570	callq	__Z7getBasev ## getBase()
0000000000019575	addq	$0x122920, %rax
000000000001957b	popq	%rdi
000000000001957c	popq	%rsi
000000000001957d	movss	(%rsp), %xmm1
0000000000019582	addq	$0x10, %rsp
0000000000019586	movss	(%rsp), %xmm0
000000000001958b	addq	$0x10, %rsp
000000000001958f	popq	%r15
0000000000019591	popq	%r14
0000000000019593	popq	%r13
0000000000019595	popq	%r12
0000000000019597	popq	%r11
0000000000019599	popq	%r10
000000000001959b	popq	%r9
000000000001959d	popq	%r8
000000000001959f	popq	%rcx
00000000000195a0	popq	%rdx
00000000000195a1	popq	%rsi
00000000000195a2	popq	%rdi
00000000000195a3	popq	%rbx
00000000000195a4	popq	%rbp
00000000000195a5	jmpq	*%rax
__ZN7cocos2d6CCNode8getSkewYEv:
00000000000195a7	pushq	%rbp
00000000000195a8	movq	%rsp, %rbp
00000000000195ab	pushq	%rbx
00000000000195ac	pushq	%rdi
00000000000195ad	pushq	%rsi
00000000000195ae	pushq	%rdx
00000000000195af	pushq	%rcx
00000000000195b0	pushq	%r8
00000000000195b2	pushq	%r9
00000000000195b4	pushq	%r10
00000000000195b6	pushq	%r11
00000000000195b8	pushq	%r12
00000000000195ba	pushq	%r13
00000000000195bc	pushq	%r14
00000000000195be	pushq	%r15
00000000000195c0	subq	$0x10, %rsp
00000000000195c4	movss	%xmm0, (%rsp)
00000000000195c9	subq	$0x10, %rsp
00000000000195cd	movss	%xmm1, (%rsp)
00000000000195d2	pushq	%rsi
00000000000195d3	pushq	%rdi
00000000000195d4	callq	__Z7getBasev ## getBase()
00000000000195d9	addq	$0x122950, %rax
00000000000195df	popq	%rdi
00000000000195e0	popq	%rsi
00000000000195e1	movss	(%rsp), %xmm1
00000000000195e6	addq	$0x10, %rsp
00000000000195ea	movss	(%rsp), %xmm0
00000000000195ef	addq	$0x10, %rsp
00000000000195f3	popq	%r15
00000000000195f5	popq	%r14
00000000000195f7	popq	%r13
00000000000195f9	popq	%r12
00000000000195fb	popq	%r11
00000000000195fd	popq	%r10
00000000000195ff	popq	%r9
0000000000019601	popq	%r8
0000000000019603	popq	%rcx
0000000000019604	popq	%rdx
0000000000019605	popq	%rsi
0000000000019606	popq	%rdi
0000000000019607	popq	%rbx
0000000000019608	popq	%rbp
0000000000019609	jmpq	*%rax
__ZN7cocos2d6CCNode8scheduleEMNS_8CCObjectEFvfEf:
000000000001960b	pushq	%rbp
000000000001960c	movq	%rsp, %rbp
000000000001960f	pushq	%rbx
0000000000019610	pushq	%rdi
0000000000019611	pushq	%rsi
0000000000019612	pushq	%rdx
0000000000019613	pushq	%rcx
0000000000019614	pushq	%r8
0000000000019616	pushq	%r9
0000000000019618	pushq	%r10
000000000001961a	pushq	%r11
000000000001961c	pushq	%r12
000000000001961e	pushq	%r13
0000000000019620	pushq	%r14
0000000000019622	pushq	%r15
0000000000019624	subq	$0x10, %rsp
0000000000019628	movss	%xmm0, (%rsp)
000000000001962d	subq	$0x10, %rsp
0000000000019631	movss	%xmm1, (%rsp)
0000000000019636	pushq	%rsi
0000000000019637	pushq	%rdi
0000000000019638	callq	__Z7getBasev ## getBase()
000000000001963d	addq	$0x124120, %rax
0000000000019643	popq	%rdi
0000000000019644	popq	%rsi
0000000000019645	movss	(%rsp), %xmm1
000000000001964a	addq	$0x10, %rsp
000000000001964e	movss	(%rsp), %xmm0
0000000000019653	addq	$0x10, %rsp
0000000000019657	popq	%r15
0000000000019659	popq	%r14
000000000001965b	popq	%r13
000000000001965d	popq	%r12
000000000001965f	popq	%r11
0000000000019661	popq	%r10
0000000000019663	popq	%r9
0000000000019665	popq	%r8
0000000000019667	popq	%rcx
0000000000019668	popq	%rdx
0000000000019669	popq	%rsi
000000000001966a	popq	%rdi
000000000001966b	popq	%rbx
000000000001966c	popq	%rbp
000000000001966d	jmpq	*%rax
__ZN7cocos2d6CCNode8setScaleEf:
000000000001966f	pushq	%rbp
0000000000019670	movq	%rsp, %rbp
0000000000019673	pushq	%rbx
0000000000019674	pushq	%rdi
0000000000019675	pushq	%rsi
0000000000019676	pushq	%rdx
0000000000019677	pushq	%rcx
0000000000019678	pushq	%r8
000000000001967a	pushq	%r9
000000000001967c	pushq	%r10
000000000001967e	pushq	%r11
0000000000019680	pushq	%r12
0000000000019682	pushq	%r13
0000000000019684	pushq	%r14
0000000000019686	pushq	%r15
0000000000019688	subq	$0x10, %rsp
000000000001968c	movss	%xmm0, (%rsp)
0000000000019691	subq	$0x10, %rsp
0000000000019695	movss	%xmm1, (%rsp)
000000000001969a	pushq	%rsi
000000000001969b	pushq	%rdi
000000000001969c	callq	__Z7getBasev ## getBase()
00000000000196a1	addq	$0x122ac0, %rax
00000000000196a7	popq	%rdi
00000000000196a8	popq	%rsi
00000000000196a9	movss	(%rsp), %xmm1
00000000000196ae	addq	$0x10, %rsp
00000000000196b2	movss	(%rsp), %xmm0
00000000000196b7	addq	$0x10, %rsp
00000000000196bb	popq	%r15
00000000000196bd	popq	%r14
00000000000196bf	popq	%r13
00000000000196c1	popq	%r12
00000000000196c3	popq	%r11
00000000000196c5	popq	%r10
00000000000196c7	popq	%r9
00000000000196c9	popq	%r8
00000000000196cb	popq	%rcx
00000000000196cc	popq	%rdx
00000000000196cd	popq	%rsi
00000000000196ce	popq	%rdi
00000000000196cf	popq	%rbx
00000000000196d0	popq	%rbp
00000000000196d1	jmpq	*%rax
__ZN7cocos2d6CCNode8setScaleEff:
00000000000196d3	pushq	%rbp
00000000000196d4	movq	%rsp, %rbp
00000000000196d7	pushq	%rbx
00000000000196d8	pushq	%rdi
00000000000196d9	pushq	%rsi
00000000000196da	pushq	%rdx
00000000000196db	pushq	%rcx
00000000000196dc	pushq	%r8
00000000000196de	pushq	%r9
00000000000196e0	pushq	%r10
00000000000196e2	pushq	%r11
00000000000196e4	pushq	%r12
00000000000196e6	pushq	%r13
00000000000196e8	pushq	%r14
00000000000196ea	pushq	%r15
00000000000196ec	subq	$0x10, %rsp
00000000000196f0	movss	%xmm0, (%rsp)
00000000000196f5	subq	$0x10, %rsp
00000000000196f9	movss	%xmm1, (%rsp)
00000000000196fe	pushq	%rsi
00000000000196ff	pushq	%rdi
0000000000019700	callq	__Z7getBasev ## getBase()
0000000000019705	addq	$0x122ae0, %rax
000000000001970b	popq	%rdi
000000000001970c	popq	%rsi
000000000001970d	movss	(%rsp), %xmm1
0000000000019712	addq	$0x10, %rsp
0000000000019716	movss	(%rsp), %xmm0
000000000001971b	addq	$0x10, %rsp
000000000001971f	popq	%r15
0000000000019721	popq	%r14
0000000000019723	popq	%r13
0000000000019725	popq	%r12
0000000000019727	popq	%r11
0000000000019729	popq	%r10
000000000001972b	popq	%r9
000000000001972d	popq	%r8
000000000001972f	popq	%rcx
0000000000019730	popq	%rdx
0000000000019731	popq	%rsi
0000000000019732	popq	%rdi
0000000000019733	popq	%rbx
0000000000019734	popq	%rbp
0000000000019735	jmpq	*%rax
__ZN7cocos2d6CCNode8setSkewXEf:
0000000000019737	pushq	%rbp
0000000000019738	movq	%rsp, %rbp
000000000001973b	pushq	%rbx
000000000001973c	pushq	%rdi
000000000001973d	pushq	%rsi
000000000001973e	pushq	%rdx
000000000001973f	pushq	%rcx
0000000000019740	pushq	%r8
0000000000019742	pushq	%r9
0000000000019744	pushq	%r10
0000000000019746	pushq	%r11
0000000000019748	pushq	%r12
000000000001974a	pushq	%r13
000000000001974c	pushq	%r14
000000000001974e	pushq	%r15
0000000000019750	subq	$0x10, %rsp
0000000000019754	movss	%xmm0, (%rsp)
0000000000019759	subq	$0x10, %rsp
000000000001975d	movss	%xmm1, (%rsp)
0000000000019762	pushq	%rsi
0000000000019763	pushq	%rdi
0000000000019764	callq	__Z7getBasev ## getBase()
0000000000019769	addq	$0x122930, %rax
000000000001976f	popq	%rdi
0000000000019770	popq	%rsi
0000000000019771	movss	(%rsp), %xmm1
0000000000019776	addq	$0x10, %rsp
000000000001977a	movss	(%rsp), %xmm0
000000000001977f	addq	$0x10, %rsp
0000000000019783	popq	%r15
0000000000019785	popq	%r14
0000000000019787	popq	%r13
0000000000019789	popq	%r12
000000000001978b	popq	%r11
000000000001978d	popq	%r10
000000000001978f	popq	%r9
0000000000019791	popq	%r8
0000000000019793	popq	%rcx
0000000000019794	popq	%rdx
0000000000019795	popq	%rsi
0000000000019796	popq	%rdi
0000000000019797	popq	%rbx
0000000000019798	popq	%rbp
0000000000019799	jmpq	*%rax
__ZN7cocos2d6CCNode8setSkewYEf:
000000000001979b	pushq	%rbp
000000000001979c	movq	%rsp, %rbp
000000000001979f	pushq	%rbx
00000000000197a0	pushq	%rdi
00000000000197a1	pushq	%rsi
00000000000197a2	pushq	%rdx
00000000000197a3	pushq	%rcx
00000000000197a4	pushq	%r8
00000000000197a6	pushq	%r9
00000000000197a8	pushq	%r10
00000000000197aa	pushq	%r11
00000000000197ac	pushq	%r12
00000000000197ae	pushq	%r13
00000000000197b0	pushq	%r14
00000000000197b2	pushq	%r15
00000000000197b4	subq	$0x10, %rsp
00000000000197b8	movss	%xmm0, (%rsp)
00000000000197bd	subq	$0x10, %rsp
00000000000197c1	movss	%xmm1, (%rsp)
00000000000197c6	pushq	%rsi
00000000000197c7	pushq	%rdi
00000000000197c8	callq	__Z7getBasev ## getBase()
00000000000197cd	addq	$0x122960, %rax
00000000000197d3	popq	%rdi
00000000000197d4	popq	%rsi
00000000000197d5	movss	(%rsp), %xmm1
00000000000197da	addq	$0x10, %rsp
00000000000197de	movss	(%rsp), %xmm0
00000000000197e3	addq	$0x10, %rsp
00000000000197e7	popq	%r15
00000000000197e9	popq	%r14
00000000000197eb	popq	%r13
00000000000197ed	popq	%r12
00000000000197ef	popq	%r11
00000000000197f1	popq	%r10
00000000000197f3	popq	%r9
00000000000197f5	popq	%r8
00000000000197f7	popq	%rcx
00000000000197f8	popq	%rdx
00000000000197f9	popq	%rsi
00000000000197fa	popq	%rdi
00000000000197fb	popq	%rbx
00000000000197fc	popq	%rbp
00000000000197fd	jmpq	*%rax
__ZN7cocos2d6CCNode9getCameraEv:
00000000000197ff	pushq	%rbp
0000000000019800	movq	%rsp, %rbp
0000000000019803	pushq	%rbx
0000000000019804	pushq	%rdi
0000000000019805	pushq	%rsi
0000000000019806	pushq	%rdx
0000000000019807	pushq	%rcx
0000000000019808	pushq	%r8
000000000001980a	pushq	%r9
000000000001980c	pushq	%r10
000000000001980e	pushq	%r11
0000000000019810	pushq	%r12
0000000000019812	pushq	%r13
0000000000019814	pushq	%r14
0000000000019816	pushq	%r15
0000000000019818	subq	$0x10, %rsp
000000000001981c	movss	%xmm0, (%rsp)
0000000000019821	subq	$0x10, %rsp
0000000000019825	movss	%xmm1, (%rsp)
000000000001982a	pushq	%rsi
000000000001982b	pushq	%rdi
000000000001982c	callq	__Z7getBasev ## getBase()
0000000000019831	addq	$0x122cb0, %rax
0000000000019837	popq	%rdi
0000000000019838	popq	%rsi
0000000000019839	movss	(%rsp), %xmm1
000000000001983e	addq	$0x10, %rsp
0000000000019842	movss	(%rsp), %xmm0
0000000000019847	addq	$0x10, %rsp
000000000001984b	popq	%r15
000000000001984d	popq	%r14
000000000001984f	popq	%r13
0000000000019851	popq	%r12
0000000000019853	popq	%r11
0000000000019855	popq	%r10
0000000000019857	popq	%r9
0000000000019859	popq	%r8
000000000001985b	popq	%rcx
000000000001985c	popq	%rdx
000000000001985d	popq	%rsi
000000000001985e	popq	%rdi
000000000001985f	popq	%rbx
0000000000019860	popq	%rbp
0000000000019861	jmpq	*%rax
__ZN7cocos2d6CCNode9getParentEv:
0000000000019863	pushq	%rbp
0000000000019864	movq	%rsp, %rbp
0000000000019867	pushq	%rbx
0000000000019868	pushq	%rdi
0000000000019869	pushq	%rsi
000000000001986a	pushq	%rdx
000000000001986b	pushq	%rcx
000000000001986c	pushq	%r8
000000000001986e	pushq	%r9
0000000000019870	pushq	%r10
0000000000019872	pushq	%r11
0000000000019874	pushq	%r12
0000000000019876	pushq	%r13
0000000000019878	pushq	%r14
000000000001987a	pushq	%r15
000000000001987c	subq	$0x10, %rsp
0000000000019880	movss	%xmm0, (%rsp)
0000000000019885	subq	$0x10, %rsp
0000000000019889	movss	%xmm1, (%rsp)
000000000001988e	pushq	%rsi
000000000001988f	pushq	%rdi
0000000000019890	callq	__Z7getBasev ## getBase()
0000000000019895	addq	$0x122ed0, %rax
000000000001989b	popq	%rdi
000000000001989c	popq	%rsi
000000000001989d	movss	(%rsp), %xmm1
00000000000198a2	addq	$0x10, %rsp
00000000000198a6	movss	(%rsp), %xmm0
00000000000198ab	addq	$0x10, %rsp
00000000000198af	popq	%r15
00000000000198b1	popq	%r14
00000000000198b3	popq	%r13
00000000000198b5	popq	%r12
00000000000198b7	popq	%r11
00000000000198b9	popq	%r10
00000000000198bb	popq	%r9
00000000000198bd	popq	%r8
00000000000198bf	popq	%rcx
00000000000198c0	popq	%rdx
00000000000198c1	popq	%rsi
00000000000198c2	popq	%rdi
00000000000198c3	popq	%rbx
00000000000198c4	popq	%rbp
00000000000198c5	jmpq	*%rax
__ZN7cocos2d6CCNode9getScaleXEv:
00000000000198c7	pushq	%rbp
00000000000198c8	movq	%rsp, %rbp
00000000000198cb	pushq	%rbx
00000000000198cc	pushq	%rdi
00000000000198cd	pushq	%rsi
00000000000198ce	pushq	%rdx
00000000000198cf	pushq	%rcx
00000000000198d0	pushq	%r8
00000000000198d2	pushq	%r9
00000000000198d4	pushq	%r10
00000000000198d6	pushq	%r11
00000000000198d8	pushq	%r12
00000000000198da	pushq	%r13
00000000000198dc	pushq	%r14
00000000000198de	pushq	%r15
00000000000198e0	subq	$0x10, %rsp
00000000000198e4	movss	%xmm0, (%rsp)
00000000000198e9	subq	$0x10, %rsp
00000000000198ed	movss	%xmm1, (%rsp)
00000000000198f2	pushq	%rsi
00000000000198f3	pushq	%rdi
00000000000198f4	callq	__Z7getBasev ## getBase()
00000000000198f9	addq	$0x122b00, %rax
00000000000198ff	popq	%rdi
0000000000019900	popq	%rsi
0000000000019901	movss	(%rsp), %xmm1
0000000000019906	addq	$0x10, %rsp
000000000001990a	movss	(%rsp), %xmm0
000000000001990f	addq	$0x10, %rsp
0000000000019913	popq	%r15
0000000000019915	popq	%r14
0000000000019917	popq	%r13
0000000000019919	popq	%r12
000000000001991b	popq	%r11
000000000001991d	popq	%r10
000000000001991f	popq	%r9
0000000000019921	popq	%r8
0000000000019923	popq	%rcx
0000000000019924	popq	%rdx
0000000000019925	popq	%rsi
0000000000019926	popq	%rdi
0000000000019927	popq	%rbx
0000000000019928	popq	%rbp
0000000000019929	jmpq	*%rax
__ZN7cocos2d6CCNode9getScaleYEv:
000000000001992b	pushq	%rbp
000000000001992c	movq	%rsp, %rbp
000000000001992f	pushq	%rbx
0000000000019930	pushq	%rdi
0000000000019931	pushq	%rsi
0000000000019932	pushq	%rdx
0000000000019933	pushq	%rcx
0000000000019934	pushq	%r8
0000000000019936	pushq	%r9
0000000000019938	pushq	%r10
000000000001993a	pushq	%r11
000000000001993c	pushq	%r12
000000000001993e	pushq	%r13
0000000000019940	pushq	%r14
0000000000019942	pushq	%r15
0000000000019944	subq	$0x10, %rsp
0000000000019948	movss	%xmm0, (%rsp)
000000000001994d	subq	$0x10, %rsp
0000000000019951	movss	%xmm1, (%rsp)
0000000000019956	pushq	%rsi
0000000000019957	pushq	%rdi
0000000000019958	callq	__Z7getBasev ## getBase()
000000000001995d	addq	$0x122b30, %rax
0000000000019963	popq	%rdi
0000000000019964	popq	%rsi
0000000000019965	movss	(%rsp), %xmm1
000000000001996a	addq	$0x10, %rsp
000000000001996e	movss	(%rsp), %xmm0
0000000000019973	addq	$0x10, %rsp
0000000000019977	popq	%r15
0000000000019979	popq	%r14
000000000001997b	popq	%r13
000000000001997d	popq	%r12
000000000001997f	popq	%r11
0000000000019981	popq	%r10
0000000000019983	popq	%r9
0000000000019985	popq	%r8
0000000000019987	popq	%rcx
0000000000019988	popq	%rdx
0000000000019989	popq	%rsi
000000000001998a	popq	%rdi
000000000001998b	popq	%rbx
000000000001998c	popq	%rbp
000000000001998d	jmpq	*%rax
__ZN7cocos2d6CCNode9getZOrderEv:
000000000001998f	pushq	%rbp
0000000000019990	movq	%rsp, %rbp
0000000000019993	pushq	%rbx
0000000000019994	pushq	%rdi
0000000000019995	pushq	%rsi
0000000000019996	pushq	%rdx
0000000000019997	pushq	%rcx
0000000000019998	pushq	%r8
000000000001999a	pushq	%r9
000000000001999c	pushq	%r10
000000000001999e	pushq	%r11
00000000000199a0	pushq	%r12
00000000000199a2	pushq	%r13
00000000000199a4	pushq	%r14
00000000000199a6	pushq	%r15
00000000000199a8	subq	$0x10, %rsp
00000000000199ac	movss	%xmm0, (%rsp)
00000000000199b1	subq	$0x10, %rsp
00000000000199b5	movss	%xmm1, (%rsp)
00000000000199ba	pushq	%rsi
00000000000199bb	pushq	%rdi
00000000000199bc	callq	__Z7getBasev ## getBase()
00000000000199c1	addq	$0x122980, %rax
00000000000199c7	popq	%rdi
00000000000199c8	popq	%rsi
00000000000199c9	movss	(%rsp), %xmm1
00000000000199ce	addq	$0x10, %rsp
00000000000199d2	movss	(%rsp), %xmm0
00000000000199d7	addq	$0x10, %rsp
00000000000199db	popq	%r15
00000000000199dd	popq	%r14
00000000000199df	popq	%r13
00000000000199e1	popq	%r12
00000000000199e3	popq	%r11
00000000000199e5	popq	%r10
00000000000199e7	popq	%r9
00000000000199e9	popq	%r8
00000000000199eb	popq	%rcx
00000000000199ec	popq	%rdx
00000000000199ed	popq	%rsi
00000000000199ee	popq	%rdi
00000000000199ef	popq	%rbx
00000000000199f0	popq	%rbp
00000000000199f1	jmpq	*%rax
__ZN7cocos2d6CCNode9isRunningEv:
00000000000199f3	pushq	%rbp
00000000000199f4	movq	%rsp, %rbp
00000000000199f7	pushq	%rbx
00000000000199f8	pushq	%rdi
00000000000199f9	pushq	%rsi
00000000000199fa	pushq	%rdx
00000000000199fb	pushq	%rcx
00000000000199fc	pushq	%r8
00000000000199fe	pushq	%r9
0000000000019a00	pushq	%r10
0000000000019a02	pushq	%r11
0000000000019a04	pushq	%r12
0000000000019a06	pushq	%r13
0000000000019a08	pushq	%r14
0000000000019a0a	pushq	%r15
0000000000019a0c	subq	$0x10, %rsp
0000000000019a10	movss	%xmm0, (%rsp)
0000000000019a15	subq	$0x10, %rsp
0000000000019a19	movss	%xmm1, (%rsp)
0000000000019a1e	pushq	%rsi
0000000000019a1f	pushq	%rdi
0000000000019a20	callq	__Z7getBasev ## getBase()
0000000000019a25	addq	$0x122ec0, %rax
0000000000019a2b	popq	%rdi
0000000000019a2c	popq	%rsi
0000000000019a2d	movss	(%rsp), %xmm1
0000000000019a32	addq	$0x10, %rsp
0000000000019a36	movss	(%rsp), %xmm0
0000000000019a3b	addq	$0x10, %rsp
0000000000019a3f	popq	%r15
0000000000019a41	popq	%r14
0000000000019a43	popq	%r13
0000000000019a45	popq	%r12
0000000000019a47	popq	%r11
0000000000019a49	popq	%r10
0000000000019a4b	popq	%r9
0000000000019a4d	popq	%r8
0000000000019a4f	popq	%rcx
0000000000019a50	popq	%rdx
0000000000019a51	popq	%rsi
0000000000019a52	popq	%rdi
0000000000019a53	popq	%rbx
0000000000019a54	popq	%rbp
0000000000019a55	jmpq	*%rax
__ZN7cocos2d6CCNode9isVisibleEv:
0000000000019a57	pushq	%rbp
0000000000019a58	movq	%rsp, %rbp
0000000000019a5b	pushq	%rbx
0000000000019a5c	pushq	%rdi
0000000000019a5d	pushq	%rsi
0000000000019a5e	pushq	%rdx
0000000000019a5f	pushq	%rcx
0000000000019a60	pushq	%r8
0000000000019a62	pushq	%r9
0000000000019a64	pushq	%r10
0000000000019a66	pushq	%r11
0000000000019a68	pushq	%r12
0000000000019a6a	pushq	%r13
0000000000019a6c	pushq	%r14
0000000000019a6e	pushq	%r15
0000000000019a70	subq	$0x10, %rsp
0000000000019a74	movss	%xmm0, (%rsp)
0000000000019a79	subq	$0x10, %rsp
0000000000019a7d	movss	%xmm1, (%rsp)
0000000000019a82	pushq	%rsi
0000000000019a83	pushq	%rdi
0000000000019a84	callq	__Z7getBasev ## getBase()
0000000000019a89	addq	$0x122d50, %rax
0000000000019a8f	popq	%rdi
0000000000019a90	popq	%rsi
0000000000019a91	movss	(%rsp), %xmm1
0000000000019a96	addq	$0x10, %rsp
0000000000019a9a	movss	(%rsp), %xmm0
0000000000019a9f	addq	$0x10, %rsp
0000000000019aa3	popq	%r15
0000000000019aa5	popq	%r14
0000000000019aa7	popq	%r13
0000000000019aa9	popq	%r12
0000000000019aab	popq	%r11
0000000000019aad	popq	%r10
0000000000019aaf	popq	%r9
0000000000019ab1	popq	%r8
0000000000019ab3	popq	%rcx
0000000000019ab4	popq	%rdx
0000000000019ab5	popq	%rsi
0000000000019ab6	popq	%rdi
0000000000019ab7	popq	%rbx
0000000000019ab8	popq	%rbp
0000000000019ab9	jmpq	*%rax
__ZN7cocos2d6CCNode9setParentEPS0_:
0000000000019abb	pushq	%rbp
0000000000019abc	movq	%rsp, %rbp
0000000000019abf	pushq	%rbx
0000000000019ac0	pushq	%rdi
0000000000019ac1	pushq	%rsi
0000000000019ac2	pushq	%rdx
0000000000019ac3	pushq	%rcx
0000000000019ac4	pushq	%r8
0000000000019ac6	pushq	%r9
0000000000019ac8	pushq	%r10
0000000000019aca	pushq	%r11
0000000000019acc	pushq	%r12
0000000000019ace	pushq	%r13
0000000000019ad0	pushq	%r14
0000000000019ad2	pushq	%r15
0000000000019ad4	subq	$0x10, %rsp
0000000000019ad8	movss	%xmm0, (%rsp)
0000000000019add	subq	$0x10, %rsp
0000000000019ae1	movss	%xmm1, (%rsp)
0000000000019ae6	pushq	%rsi
0000000000019ae7	pushq	%rdi
0000000000019ae8	callq	__Z7getBasev ## getBase()
0000000000019aed	addq	$0x122ee0, %rax
0000000000019af3	popq	%rdi
0000000000019af4	popq	%rsi
0000000000019af5	movss	(%rsp), %xmm1
0000000000019afa	addq	$0x10, %rsp
0000000000019afe	movss	(%rsp), %xmm0
0000000000019b03	addq	$0x10, %rsp
0000000000019b07	popq	%r15
0000000000019b09	popq	%r14
0000000000019b0b	popq	%r13
0000000000019b0d	popq	%r12
0000000000019b0f	popq	%r11
0000000000019b11	popq	%r10
0000000000019b13	popq	%r9
0000000000019b15	popq	%r8
0000000000019b17	popq	%rcx
0000000000019b18	popq	%rdx
0000000000019b19	popq	%rsi
0000000000019b1a	popq	%rdi
0000000000019b1b	popq	%rbx
0000000000019b1c	popq	%rbp
0000000000019b1d	jmpq	*%rax
__ZN7cocos2d6CCNode9setScaleXEf:
0000000000019b1f	pushq	%rbp
0000000000019b20	movq	%rsp, %rbp
0000000000019b23	pushq	%rbx
0000000000019b24	pushq	%rdi
0000000000019b25	pushq	%rsi
0000000000019b26	pushq	%rdx
0000000000019b27	pushq	%rcx
0000000000019b28	pushq	%r8
0000000000019b2a	pushq	%r9
0000000000019b2c	pushq	%r10
0000000000019b2e	pushq	%r11
0000000000019b30	pushq	%r12
0000000000019b32	pushq	%r13
0000000000019b34	pushq	%r14
0000000000019b36	pushq	%r15
0000000000019b38	subq	$0x10, %rsp
0000000000019b3c	movss	%xmm0, (%rsp)
0000000000019b41	subq	$0x10, %rsp
0000000000019b45	movss	%xmm1, (%rsp)
0000000000019b4a	pushq	%rsi
0000000000019b4b	pushq	%rdi
0000000000019b4c	callq	__Z7getBasev ## getBase()
0000000000019b51	addq	$0x122b10, %rax
0000000000019b57	popq	%rdi
0000000000019b58	popq	%rsi
0000000000019b59	movss	(%rsp), %xmm1
0000000000019b5e	addq	$0x10, %rsp
0000000000019b62	movss	(%rsp), %xmm0
0000000000019b67	addq	$0x10, %rsp
0000000000019b6b	popq	%r15
0000000000019b6d	popq	%r14
0000000000019b6f	popq	%r13
0000000000019b71	popq	%r12
0000000000019b73	popq	%r11
0000000000019b75	popq	%r10
0000000000019b77	popq	%r9
0000000000019b79	popq	%r8
0000000000019b7b	popq	%rcx
0000000000019b7c	popq	%rdx
0000000000019b7d	popq	%rsi
0000000000019b7e	popq	%rdi
0000000000019b7f	popq	%rbx
0000000000019b80	popq	%rbp
0000000000019b81	jmpq	*%rax
__ZN7cocos2d6CCNode9setScaleYEf:
0000000000019b83	pushq	%rbp
0000000000019b84	movq	%rsp, %rbp
0000000000019b87	pushq	%rbx
0000000000019b88	pushq	%rdi
0000000000019b89	pushq	%rsi
0000000000019b8a	pushq	%rdx
0000000000019b8b	pushq	%rcx
0000000000019b8c	pushq	%r8
0000000000019b8e	pushq	%r9
0000000000019b90	pushq	%r10
0000000000019b92	pushq	%r11
0000000000019b94	pushq	%r12
0000000000019b96	pushq	%r13
0000000000019b98	pushq	%r14
0000000000019b9a	pushq	%r15
0000000000019b9c	subq	$0x10, %rsp
0000000000019ba0	movss	%xmm0, (%rsp)
0000000000019ba5	subq	$0x10, %rsp
0000000000019ba9	movss	%xmm1, (%rsp)
0000000000019bae	pushq	%rsi
0000000000019baf	pushq	%rdi
0000000000019bb0	callq	__Z7getBasev ## getBase()
0000000000019bb5	addq	$0x122b40, %rax
0000000000019bbb	popq	%rdi
0000000000019bbc	popq	%rsi
0000000000019bbd	movss	(%rsp), %xmm1
0000000000019bc2	addq	$0x10, %rsp
0000000000019bc6	movss	(%rsp), %xmm0
0000000000019bcb	addq	$0x10, %rsp
0000000000019bcf	popq	%r15
0000000000019bd1	popq	%r14
0000000000019bd3	popq	%r13
0000000000019bd5	popq	%r12
0000000000019bd7	popq	%r11
0000000000019bd9	popq	%r10
0000000000019bdb	popq	%r9
0000000000019bdd	popq	%r8
0000000000019bdf	popq	%rcx
0000000000019be0	popq	%rdx
0000000000019be1	popq	%rsi
0000000000019be2	popq	%rdi
0000000000019be3	popq	%rbx
0000000000019be4	popq	%rbp
0000000000019be5	jmpq	*%rax
__ZN7cocos2d6CCNode9setZOrderEi:
0000000000019be7	pushq	%rbp
0000000000019be8	movq	%rsp, %rbp
0000000000019beb	pushq	%rbx
0000000000019bec	pushq	%rdi
0000000000019bed	pushq	%rsi
0000000000019bee	pushq	%rdx
0000000000019bef	pushq	%rcx
0000000000019bf0	pushq	%r8
0000000000019bf2	pushq	%r9
0000000000019bf4	pushq	%r10
0000000000019bf6	pushq	%r11
0000000000019bf8	pushq	%r12
0000000000019bfa	pushq	%r13
0000000000019bfc	pushq	%r14
0000000000019bfe	pushq	%r15
0000000000019c00	subq	$0x10, %rsp
0000000000019c04	movss	%xmm0, (%rsp)
0000000000019c09	subq	$0x10, %rsp
0000000000019c0d	movss	%xmm1, (%rsp)
0000000000019c12	pushq	%rsi
0000000000019c13	pushq	%rdi
0000000000019c14	callq	__Z7getBasev ## getBase()
0000000000019c19	addq	$0x1229a0, %rax
0000000000019c1f	popq	%rdi
0000000000019c20	popq	%rsi
0000000000019c21	movss	(%rsp), %xmm1
0000000000019c26	addq	$0x10, %rsp
0000000000019c2a	movss	(%rsp), %xmm0
0000000000019c2f	addq	$0x10, %rsp
0000000000019c33	popq	%r15
0000000000019c35	popq	%r14
0000000000019c37	popq	%r13
0000000000019c39	popq	%r12
0000000000019c3b	popq	%r11
0000000000019c3d	popq	%r10
0000000000019c3f	popq	%r9
0000000000019c41	popq	%r8
0000000000019c43	popq	%rcx
0000000000019c44	popq	%rdx
0000000000019c45	popq	%rsi
0000000000019c46	popq	%rdi
0000000000019c47	popq	%rbx
0000000000019c48	popq	%rbp
0000000000019c49	jmpq	*%rax
__ZN7cocos2d6CCNodeC1Ev:
0000000000019c4b	pushq	%rbp
0000000000019c4c	movq	%rsp, %rbp
0000000000019c4f	pushq	%rbx
0000000000019c50	pushq	%rdi
0000000000019c51	pushq	%rsi
0000000000019c52	pushq	%rdx
0000000000019c53	pushq	%rcx
0000000000019c54	pushq	%r8
0000000000019c56	pushq	%r9
0000000000019c58	pushq	%r10
0000000000019c5a	pushq	%r11
0000000000019c5c	pushq	%r12
0000000000019c5e	pushq	%r13
0000000000019c60	pushq	%r14
0000000000019c62	pushq	%r15
0000000000019c64	subq	$0x10, %rsp
0000000000019c68	movss	%xmm0, (%rsp)
0000000000019c6d	subq	$0x10, %rsp
0000000000019c71	movss	%xmm1, (%rsp)
0000000000019c76	pushq	%rsi
0000000000019c77	pushq	%rdi
0000000000019c78	callq	__Z7getBasev ## getBase()
0000000000019c7d	addq	$0x122550, %rax
0000000000019c83	popq	%rdi
0000000000019c84	popq	%rsi
0000000000019c85	movss	(%rsp), %xmm1
0000000000019c8a	addq	$0x10, %rsp
0000000000019c8e	movss	(%rsp), %xmm0
0000000000019c93	addq	$0x10, %rsp
0000000000019c97	popq	%r15
0000000000019c99	popq	%r14
0000000000019c9b	popq	%r13
0000000000019c9d	popq	%r12
0000000000019c9f	popq	%r11
0000000000019ca1	popq	%r10
0000000000019ca3	popq	%r9
0000000000019ca5	popq	%r8
0000000000019ca7	popq	%rcx
0000000000019ca8	popq	%rdx
0000000000019ca9	popq	%rsi
0000000000019caa	popq	%rdi
0000000000019cab	popq	%rbx
0000000000019cac	popq	%rbp
0000000000019cad	jmpq	*%rax
__ZN7cocos2d6CCNodeC2Ev:
0000000000019caf	pushq	%rbp
0000000000019cb0	movq	%rsp, %rbp
0000000000019cb3	pushq	%rbx
0000000000019cb4	pushq	%rdi
0000000000019cb5	pushq	%rsi
0000000000019cb6	pushq	%rdx
0000000000019cb7	pushq	%rcx
0000000000019cb8	pushq	%r8
0000000000019cba	pushq	%r9
0000000000019cbc	pushq	%r10
0000000000019cbe	pushq	%r11
0000000000019cc0	pushq	%r12
0000000000019cc2	pushq	%r13
0000000000019cc4	pushq	%r14
0000000000019cc6	pushq	%r15
0000000000019cc8	subq	$0x10, %rsp
0000000000019ccc	movss	%xmm0, (%rsp)
0000000000019cd1	subq	$0x10, %rsp
0000000000019cd5	movss	%xmm1, (%rsp)
0000000000019cda	pushq	%rsi
0000000000019cdb	pushq	%rdi
0000000000019cdc	callq	__Z7getBasev ## getBase()
0000000000019ce1	addq	$0x122550, %rax
0000000000019ce7	popq	%rdi
0000000000019ce8	popq	%rsi
0000000000019ce9	movss	(%rsp), %xmm1
0000000000019cee	addq	$0x10, %rsp
0000000000019cf2	movss	(%rsp), %xmm0
0000000000019cf7	addq	$0x10, %rsp
0000000000019cfb	popq	%r15
0000000000019cfd	popq	%r14
0000000000019cff	popq	%r13
0000000000019d01	popq	%r12
0000000000019d03	popq	%r11
0000000000019d05	popq	%r10
0000000000019d07	popq	%r9
0000000000019d09	popq	%r8
0000000000019d0b	popq	%rcx
0000000000019d0c	popq	%rdx
0000000000019d0d	popq	%rsi
0000000000019d0e	popq	%rdi
0000000000019d0f	popq	%rbx
0000000000019d10	popq	%rbp
0000000000019d11	jmpq	*%rax
__ZN7cocos2d6CCNodeD0Ev:
0000000000019d13	pushq	%rbp
0000000000019d14	movq	%rsp, %rbp
0000000000019d17	pushq	%rbx
0000000000019d18	pushq	%rdi
0000000000019d19	pushq	%rsi
0000000000019d1a	pushq	%rdx
0000000000019d1b	pushq	%rcx
0000000000019d1c	pushq	%r8
0000000000019d1e	pushq	%r9
0000000000019d20	pushq	%r10
0000000000019d22	pushq	%r11
0000000000019d24	pushq	%r12
0000000000019d26	pushq	%r13
0000000000019d28	pushq	%r14
0000000000019d2a	pushq	%r15
0000000000019d2c	subq	$0x10, %rsp
0000000000019d30	movss	%xmm0, (%rsp)
0000000000019d35	subq	$0x10, %rsp
0000000000019d39	movss	%xmm1, (%rsp)
0000000000019d3e	pushq	%rsi
0000000000019d3f	pushq	%rdi
0000000000019d40	callq	__Z7getBasev ## getBase()
0000000000019d45	addq	$0x1228e0, %rax
0000000000019d4b	popq	%rdi
0000000000019d4c	popq	%rsi
0000000000019d4d	movss	(%rsp), %xmm1
0000000000019d52	addq	$0x10, %rsp
0000000000019d56	movss	(%rsp), %xmm0
0000000000019d5b	addq	$0x10, %rsp
0000000000019d5f	popq	%r15
0000000000019d61	popq	%r14
0000000000019d63	popq	%r13
0000000000019d65	popq	%r12
0000000000019d67	popq	%r11
0000000000019d69	popq	%r10
0000000000019d6b	popq	%r9
0000000000019d6d	popq	%r8
0000000000019d6f	popq	%rcx
0000000000019d70	popq	%rdx
0000000000019d71	popq	%rsi
0000000000019d72	popq	%rdi
0000000000019d73	popq	%rbx
0000000000019d74	popq	%rbp
0000000000019d75	jmpq	*%rax
__ZN7cocos2d6CCNodeD1Ev:
0000000000019d77	pushq	%rbp
0000000000019d78	movq	%rsp, %rbp
0000000000019d7b	pushq	%rbx
0000000000019d7c	pushq	%rdi
0000000000019d7d	pushq	%rsi
0000000000019d7e	pushq	%rdx
0000000000019d7f	pushq	%rcx
0000000000019d80	pushq	%r8
0000000000019d82	pushq	%r9
0000000000019d84	pushq	%r10
0000000000019d86	pushq	%r11
0000000000019d88	pushq	%r12
0000000000019d8a	pushq	%r13
0000000000019d8c	pushq	%r14
0000000000019d8e	pushq	%r15
0000000000019d90	subq	$0x10, %rsp
0000000000019d94	movss	%xmm0, (%rsp)
0000000000019d99	subq	$0x10, %rsp
0000000000019d9d	movss	%xmm1, (%rsp)
0000000000019da2	pushq	%rsi
0000000000019da3	pushq	%rdi
0000000000019da4	callq	__Z7getBasev ## getBase()
0000000000019da9	addq	$0x1228d0, %rax
0000000000019daf	popq	%rdi
0000000000019db0	popq	%rsi
0000000000019db1	movss	(%rsp), %xmm1
0000000000019db6	addq	$0x10, %rsp
0000000000019dba	movss	(%rsp), %xmm0
0000000000019dbf	addq	$0x10, %rsp
0000000000019dc3	popq	%r15
0000000000019dc5	popq	%r14
0000000000019dc7	popq	%r13
0000000000019dc9	popq	%r12
0000000000019dcb	popq	%r11
0000000000019dcd	popq	%r10
0000000000019dcf	popq	%r9
0000000000019dd1	popq	%r8
0000000000019dd3	popq	%rcx
0000000000019dd4	popq	%rdx
0000000000019dd5	popq	%rsi
0000000000019dd6	popq	%rdi
0000000000019dd7	popq	%rbx
0000000000019dd8	popq	%rbp
0000000000019dd9	jmpq	*%rax
__ZN7cocos2d6CCNodeD2Ev:
0000000000019ddb	pushq	%rbp
0000000000019ddc	movq	%rsp, %rbp
0000000000019ddf	pushq	%rbx
0000000000019de0	pushq	%rdi
0000000000019de1	pushq	%rsi
0000000000019de2	pushq	%rdx
0000000000019de3	pushq	%rcx
0000000000019de4	pushq	%r8
0000000000019de6	pushq	%r9
0000000000019de8	pushq	%r10
0000000000019dea	pushq	%r11
0000000000019dec	pushq	%r12
0000000000019dee	pushq	%r13
0000000000019df0	pushq	%r14
0000000000019df2	pushq	%r15
0000000000019df4	subq	$0x10, %rsp
0000000000019df8	movss	%xmm0, (%rsp)
0000000000019dfd	subq	$0x10, %rsp
0000000000019e01	movss	%xmm1, (%rsp)
0000000000019e06	pushq	%rsi
0000000000019e07	pushq	%rdi
0000000000019e08	callq	__Z7getBasev ## getBase()
0000000000019e0d	addq	$0x1228d0, %rax
0000000000019e13	popq	%rdi
0000000000019e14	popq	%rsi
0000000000019e15	movss	(%rsp), %xmm1
0000000000019e1a	addq	$0x10, %rsp
0000000000019e1e	movss	(%rsp), %xmm0
0000000000019e23	addq	$0x10, %rsp
0000000000019e27	popq	%r15
0000000000019e29	popq	%r14
0000000000019e2b	popq	%r13
0000000000019e2d	popq	%r12
0000000000019e2f	popq	%r11
0000000000019e31	popq	%r10
0000000000019e33	popq	%r9
0000000000019e35	popq	%r8
0000000000019e37	popq	%rcx
0000000000019e38	popq	%rdx
0000000000019e39	popq	%rsi
0000000000019e3a	popq	%rdi
0000000000019e3b	popq	%rbx
0000000000019e3c	popq	%rbp
0000000000019e3d	jmpq	*%rax
__ZN7cocos2d6CCRect14intersectsRectERKS0_:
0000000000019e3f	pushq	%rbp
0000000000019e40	movq	%rsp, %rbp
0000000000019e43	pushq	%rbx
0000000000019e44	pushq	%rdi
0000000000019e45	pushq	%rsi
0000000000019e46	pushq	%rdx
0000000000019e47	pushq	%rcx
0000000000019e48	pushq	%r8
0000000000019e4a	pushq	%r9
0000000000019e4c	pushq	%r10
0000000000019e4e	pushq	%r11
0000000000019e50	pushq	%r12
0000000000019e52	pushq	%r13
0000000000019e54	pushq	%r14
0000000000019e56	pushq	%r15
0000000000019e58	subq	$0x10, %rsp
0000000000019e5c	movss	%xmm0, (%rsp)
0000000000019e61	subq	$0x10, %rsp
0000000000019e65	movss	%xmm1, (%rsp)
0000000000019e6a	pushq	%rsi
0000000000019e6b	pushq	%rdi
0000000000019e6c	callq	__Z7getBasev ## getBase()
0000000000019e71	addq	$0x137800, %rax
0000000000019e77	popq	%rdi
0000000000019e78	popq	%rsi
0000000000019e79	movss	(%rsp), %xmm1
0000000000019e7e	addq	$0x10, %rsp
0000000000019e82	movss	(%rsp), %xmm0
0000000000019e87	addq	$0x10, %rsp
0000000000019e8b	popq	%r15
0000000000019e8d	popq	%r14
0000000000019e8f	popq	%r13
0000000000019e91	popq	%r12
0000000000019e93	popq	%r11
0000000000019e95	popq	%r10
0000000000019e97	popq	%r9
0000000000019e99	popq	%r8
0000000000019e9b	popq	%rcx
0000000000019e9c	popq	%rdx
0000000000019e9d	popq	%rsi
0000000000019e9e	popq	%rdi
0000000000019e9f	popq	%rbx
0000000000019ea0	popq	%rbp
0000000000019ea1	jmpq	*%rax
__ZN7cocos2d6CCRect7getMaxXEv:
0000000000019ea3	pushq	%rbp
0000000000019ea4	movq	%rsp, %rbp
0000000000019ea7	pushq	%rbx
0000000000019ea8	pushq	%rdi
0000000000019ea9	pushq	%rsi
0000000000019eaa	pushq	%rdx
0000000000019eab	pushq	%rcx
0000000000019eac	pushq	%r8
0000000000019eae	pushq	%r9
0000000000019eb0	pushq	%r10
0000000000019eb2	pushq	%r11
0000000000019eb4	pushq	%r12
0000000000019eb6	pushq	%r13
0000000000019eb8	pushq	%r14
0000000000019eba	pushq	%r15
0000000000019ebc	subq	$0x10, %rsp
0000000000019ec0	movss	%xmm0, (%rsp)
0000000000019ec5	subq	$0x10, %rsp
0000000000019ec9	movss	%xmm1, (%rsp)
0000000000019ece	pushq	%rsi
0000000000019ecf	pushq	%rdi
0000000000019ed0	callq	__Z7getBasev ## getBase()
0000000000019ed5	addq	$0x137710, %rax
0000000000019edb	popq	%rdi
0000000000019edc	popq	%rsi
0000000000019edd	movss	(%rsp), %xmm1
0000000000019ee2	addq	$0x10, %rsp
0000000000019ee6	movss	(%rsp), %xmm0
0000000000019eeb	addq	$0x10, %rsp
0000000000019eef	popq	%r15
0000000000019ef1	popq	%r14
0000000000019ef3	popq	%r13
0000000000019ef5	popq	%r12
0000000000019ef7	popq	%r11
0000000000019ef9	popq	%r10
0000000000019efb	popq	%r9
0000000000019efd	popq	%r8
0000000000019eff	popq	%rcx
0000000000019f00	popq	%rdx
0000000000019f01	popq	%rsi
0000000000019f02	popq	%rdi
0000000000019f03	popq	%rbx
0000000000019f04	popq	%rbp
0000000000019f05	jmpq	*%rax
__ZN7cocos2d6CCRect7getMaxYEv:
0000000000019f07	pushq	%rbp
0000000000019f08	movq	%rsp, %rbp
0000000000019f0b	pushq	%rbx
0000000000019f0c	pushq	%rdi
0000000000019f0d	pushq	%rsi
0000000000019f0e	pushq	%rdx
0000000000019f0f	pushq	%rcx
0000000000019f10	pushq	%r8
0000000000019f12	pushq	%r9
0000000000019f14	pushq	%r10
0000000000019f16	pushq	%r11
0000000000019f18	pushq	%r12
0000000000019f1a	pushq	%r13
0000000000019f1c	pushq	%r14
0000000000019f1e	pushq	%r15
0000000000019f20	subq	$0x10, %rsp
0000000000019f24	movss	%xmm0, (%rsp)
0000000000019f29	subq	$0x10, %rsp
0000000000019f2d	movss	%xmm1, (%rsp)
0000000000019f32	pushq	%rsi
0000000000019f33	pushq	%rdi
0000000000019f34	callq	__Z7getBasev ## getBase()
0000000000019f39	addq	$0x137760, %rax
0000000000019f3f	popq	%rdi
0000000000019f40	popq	%rsi
0000000000019f41	movss	(%rsp), %xmm1
0000000000019f46	addq	$0x10, %rsp
0000000000019f4a	movss	(%rsp), %xmm0
0000000000019f4f	addq	$0x10, %rsp
0000000000019f53	popq	%r15
0000000000019f55	popq	%r14
0000000000019f57	popq	%r13
0000000000019f59	popq	%r12
0000000000019f5b	popq	%r11
0000000000019f5d	popq	%r10
0000000000019f5f	popq	%r9
0000000000019f61	popq	%r8
0000000000019f63	popq	%rcx
0000000000019f64	popq	%rdx
0000000000019f65	popq	%rsi
0000000000019f66	popq	%rdi
0000000000019f67	popq	%rbx
0000000000019f68	popq	%rbp
0000000000019f69	jmpq	*%rax
__ZN7cocos2d6CCRect7getMinXEv:
0000000000019f6b	pushq	%rbp
0000000000019f6c	movq	%rsp, %rbp
0000000000019f6f	pushq	%rbx
0000000000019f70	pushq	%rdi
0000000000019f71	pushq	%rsi
0000000000019f72	pushq	%rdx
0000000000019f73	pushq	%rcx
0000000000019f74	pushq	%r8
0000000000019f76	pushq	%r9
0000000000019f78	pushq	%r10
0000000000019f7a	pushq	%r11
0000000000019f7c	pushq	%r12
0000000000019f7e	pushq	%r13
0000000000019f80	pushq	%r14
0000000000019f82	pushq	%r15
0000000000019f84	subq	$0x10, %rsp
0000000000019f88	movss	%xmm0, (%rsp)
0000000000019f8d	subq	$0x10, %rsp
0000000000019f91	movss	%xmm1, (%rsp)
0000000000019f96	pushq	%rsi
0000000000019f97	pushq	%rdi
0000000000019f98	callq	__Z7getBasev ## getBase()
0000000000019f9d	addq	$0x137750, %rax
0000000000019fa3	popq	%rdi
0000000000019fa4	popq	%rsi
0000000000019fa5	movss	(%rsp), %xmm1
0000000000019faa	addq	$0x10, %rsp
0000000000019fae	movss	(%rsp), %xmm0
0000000000019fb3	addq	$0x10, %rsp
0000000000019fb7	popq	%r15
0000000000019fb9	popq	%r14
0000000000019fbb	popq	%r13
0000000000019fbd	popq	%r12
0000000000019fbf	popq	%r11
0000000000019fc1	popq	%r10
0000000000019fc3	popq	%r9
0000000000019fc5	popq	%r8
0000000000019fc7	popq	%rcx
0000000000019fc8	popq	%rdx
0000000000019fc9	popq	%rsi
0000000000019fca	popq	%rdi
0000000000019fcb	popq	%rbx
0000000000019fcc	popq	%rbp
0000000000019fcd	jmpq	*%rax
__ZN7cocos2d6CCRect7getMinYEv:
0000000000019fcf	pushq	%rbp
0000000000019fd0	movq	%rsp, %rbp
0000000000019fd3	pushq	%rbx
0000000000019fd4	pushq	%rdi
0000000000019fd5	pushq	%rsi
0000000000019fd6	pushq	%rdx
0000000000019fd7	pushq	%rcx
0000000000019fd8	pushq	%r8
0000000000019fda	pushq	%r9
0000000000019fdc	pushq	%r10
0000000000019fde	pushq	%r11
0000000000019fe0	pushq	%r12
0000000000019fe2	pushq	%r13
0000000000019fe4	pushq	%r14
0000000000019fe6	pushq	%r15
0000000000019fe8	subq	$0x10, %rsp
0000000000019fec	movss	%xmm0, (%rsp)
0000000000019ff1	subq	$0x10, %rsp
0000000000019ff5	movss	%xmm1, (%rsp)
0000000000019ffa	pushq	%rsi
0000000000019ffb	pushq	%rdi
0000000000019ffc	callq	__Z7getBasev ## getBase()
000000000001a001	addq	$0x1377a0, %rax
000000000001a007	popq	%rdi
000000000001a008	popq	%rsi
000000000001a009	movss	(%rsp), %xmm1
000000000001a00e	addq	$0x10, %rsp
000000000001a012	movss	(%rsp), %xmm0
000000000001a017	addq	$0x10, %rsp
000000000001a01b	popq	%r15
000000000001a01d	popq	%r14
000000000001a01f	popq	%r13
000000000001a021	popq	%r12
000000000001a023	popq	%r11
000000000001a025	popq	%r10
000000000001a027	popq	%r9
000000000001a029	popq	%r8
000000000001a02b	popq	%rcx
000000000001a02c	popq	%rdx
000000000001a02d	popq	%rsi
000000000001a02e	popq	%rdi
000000000001a02f	popq	%rbx
000000000001a030	popq	%rbp
000000000001a031	jmpq	*%rax
__ZN7cocos2d6CCRectaSERKS0_:
000000000001a033	pushq	%rbp
000000000001a034	movq	%rsp, %rbp
000000000001a037	pushq	%rbx
000000000001a038	pushq	%rdi
000000000001a039	pushq	%rsi
000000000001a03a	pushq	%rdx
000000000001a03b	pushq	%rcx
000000000001a03c	pushq	%r8
000000000001a03e	pushq	%r9
000000000001a040	pushq	%r10
000000000001a042	pushq	%r11
000000000001a044	pushq	%r12
000000000001a046	pushq	%r13
000000000001a048	pushq	%r14
000000000001a04a	pushq	%r15
000000000001a04c	subq	$0x10, %rsp
000000000001a050	movss	%xmm0, (%rsp)
000000000001a055	subq	$0x10, %rsp
000000000001a059	movss	%xmm1, (%rsp)
000000000001a05e	pushq	%rsi
000000000001a05f	pushq	%rdi
000000000001a060	callq	__Z7getBasev ## getBase()
000000000001a065	addq	$0x137670, %rax
000000000001a06b	popq	%rdi
000000000001a06c	popq	%rsi
000000000001a06d	movss	(%rsp), %xmm1
000000000001a072	addq	$0x10, %rsp
000000000001a076	movss	(%rsp), %xmm0
000000000001a07b	addq	$0x10, %rsp
000000000001a07f	popq	%r15
000000000001a081	popq	%r14
000000000001a083	popq	%r13
000000000001a085	popq	%r12
000000000001a087	popq	%r11
000000000001a089	popq	%r10
000000000001a08b	popq	%r9
000000000001a08d	popq	%r8
000000000001a08f	popq	%rcx
000000000001a090	popq	%rdx
000000000001a091	popq	%rsi
000000000001a092	popq	%rdi
000000000001a093	popq	%rbx
000000000001a094	popq	%rbp
000000000001a095	jmpq	*%rax
__ZN7cocos2d6CCRectC1Effff:
000000000001a097	pushq	%rbp
000000000001a098	movq	%rsp, %rbp
000000000001a09b	pushq	%rbx
000000000001a09c	pushq	%rdi
000000000001a09d	pushq	%rsi
000000000001a09e	pushq	%rdx
000000000001a09f	pushq	%rcx
000000000001a0a0	pushq	%r8
000000000001a0a2	pushq	%r9
000000000001a0a4	pushq	%r10
000000000001a0a6	pushq	%r11
000000000001a0a8	pushq	%r12
000000000001a0aa	pushq	%r13
000000000001a0ac	pushq	%r14
000000000001a0ae	pushq	%r15
000000000001a0b0	subq	$0x10, %rsp
000000000001a0b4	movss	%xmm0, (%rsp)
000000000001a0b9	subq	$0x10, %rsp
000000000001a0bd	movss	%xmm1, (%rsp)
000000000001a0c2	pushq	%rsi
000000000001a0c3	pushq	%rdi
000000000001a0c4	callq	__Z7getBasev ## getBase()
000000000001a0c9	addq	$0x137020, %rax
000000000001a0cf	popq	%rdi
000000000001a0d0	popq	%rsi
000000000001a0d1	movss	(%rsp), %xmm1
000000000001a0d6	addq	$0x10, %rsp
000000000001a0da	movss	(%rsp), %xmm0
000000000001a0df	addq	$0x10, %rsp
000000000001a0e3	popq	%r15
000000000001a0e5	popq	%r14
000000000001a0e7	popq	%r13
000000000001a0e9	popq	%r12
000000000001a0eb	popq	%r11
000000000001a0ed	popq	%r10
000000000001a0ef	popq	%r9
000000000001a0f1	popq	%r8
000000000001a0f3	popq	%rcx
000000000001a0f4	popq	%rdx
000000000001a0f5	popq	%rsi
000000000001a0f6	popq	%rdi
000000000001a0f7	popq	%rbx
000000000001a0f8	popq	%rbp
000000000001a0f9	jmpq	*%rax
__ZN7cocos2d6CCRectC1ERKS0_:
000000000001a0fb	pushq	%rbp
000000000001a0fc	movq	%rsp, %rbp
000000000001a0ff	pushq	%rbx
000000000001a100	pushq	%rdi
000000000001a101	pushq	%rsi
000000000001a102	pushq	%rdx
000000000001a103	pushq	%rcx
000000000001a104	pushq	%r8
000000000001a106	pushq	%r9
000000000001a108	pushq	%r10
000000000001a10a	pushq	%r11
000000000001a10c	pushq	%r12
000000000001a10e	pushq	%r13
000000000001a110	pushq	%r14
000000000001a112	pushq	%r15
000000000001a114	subq	$0x10, %rsp
000000000001a118	movss	%xmm0, (%rsp)
000000000001a11d	subq	$0x10, %rsp
000000000001a121	movss	%xmm1, (%rsp)
000000000001a126	pushq	%rsi
000000000001a127	pushq	%rdi
000000000001a128	callq	__Z7getBasev ## getBase()
000000000001a12d	addq	$0x137630, %rax
000000000001a133	popq	%rdi
000000000001a134	popq	%rsi
000000000001a135	movss	(%rsp), %xmm1
000000000001a13a	addq	$0x10, %rsp
000000000001a13e	movss	(%rsp), %xmm0
000000000001a143	addq	$0x10, %rsp
000000000001a147	popq	%r15
000000000001a149	popq	%r14
000000000001a14b	popq	%r13
000000000001a14d	popq	%r12
000000000001a14f	popq	%r11
000000000001a151	popq	%r10
000000000001a153	popq	%r9
000000000001a155	popq	%r8
000000000001a157	popq	%rcx
000000000001a158	popq	%rdx
000000000001a159	popq	%rsi
000000000001a15a	popq	%rdi
000000000001a15b	popq	%rbx
000000000001a15c	popq	%rbp
000000000001a15d	jmpq	*%rax
__ZN7cocos2d6CCRectC2Ev:
000000000001a15f	pushq	%rbp
000000000001a160	movq	%rsp, %rbp
000000000001a163	pushq	%rbx
000000000001a164	pushq	%rdi
000000000001a165	pushq	%rsi
000000000001a166	pushq	%rdx
000000000001a167	pushq	%rcx
000000000001a168	pushq	%r8
000000000001a16a	pushq	%r9
000000000001a16c	pushq	%r10
000000000001a16e	pushq	%r11
000000000001a170	pushq	%r12
000000000001a172	pushq	%r13
000000000001a174	pushq	%r14
000000000001a176	pushq	%r15
000000000001a178	subq	$0x10, %rsp
000000000001a17c	movss	%xmm0, (%rsp)
000000000001a181	subq	$0x10, %rsp
000000000001a185	movss	%xmm1, (%rsp)
000000000001a18a	pushq	%rsi
000000000001a18b	pushq	%rdi
000000000001a18c	callq	__Z7getBasev ## getBase()
000000000001a191	addq	$0x1375a0, %rax
000000000001a197	popq	%rdi
000000000001a198	popq	%rsi
000000000001a199	movss	(%rsp), %xmm1
000000000001a19e	addq	$0x10, %rsp
000000000001a1a2	movss	(%rsp), %xmm0
000000000001a1a7	addq	$0x10, %rsp
000000000001a1ab	popq	%r15
000000000001a1ad	popq	%r14
000000000001a1af	popq	%r13
000000000001a1b1	popq	%r12
000000000001a1b3	popq	%r11
000000000001a1b5	popq	%r10
000000000001a1b7	popq	%r9
000000000001a1b9	popq	%r8
000000000001a1bb	popq	%rcx
000000000001a1bc	popq	%rdx
000000000001a1bd	popq	%rsi
000000000001a1be	popq	%rdi
000000000001a1bf	popq	%rbx
000000000001a1c0	popq	%rbp
000000000001a1c1	jmpq	*%rax
__ZN7cocos2d6CCSizeC1Eff:
000000000001a1c3	pushq	%rbp
000000000001a1c4	movq	%rsp, %rbp
000000000001a1c7	pushq	%rbx
000000000001a1c8	pushq	%rdi
000000000001a1c9	pushq	%rsi
000000000001a1ca	pushq	%rdx
000000000001a1cb	pushq	%rcx
000000000001a1cc	pushq	%r8
000000000001a1ce	pushq	%r9
000000000001a1d0	pushq	%r10
000000000001a1d2	pushq	%r11
000000000001a1d4	pushq	%r12
000000000001a1d6	pushq	%r13
000000000001a1d8	pushq	%r14
000000000001a1da	pushq	%r15
000000000001a1dc	subq	$0x10, %rsp
000000000001a1e0	movss	%xmm0, (%rsp)
000000000001a1e5	subq	$0x10, %rsp
000000000001a1e9	movss	%xmm1, (%rsp)
000000000001a1ee	pushq	%rsi
000000000001a1ef	pushq	%rdi
000000000001a1f0	callq	__Z7getBasev ## getBase()
000000000001a1f5	addq	$0x137010, %rax
000000000001a1fb	popq	%rdi
000000000001a1fc	popq	%rsi
000000000001a1fd	movss	(%rsp), %xmm1
000000000001a202	addq	$0x10, %rsp
000000000001a206	movss	(%rsp), %xmm0
000000000001a20b	addq	$0x10, %rsp
000000000001a20f	popq	%r15
000000000001a211	popq	%r14
000000000001a213	popq	%r13
000000000001a215	popq	%r12
000000000001a217	popq	%r11
000000000001a219	popq	%r10
000000000001a21b	popq	%r9
000000000001a21d	popq	%r8
000000000001a21f	popq	%rcx
000000000001a220	popq	%rdx
000000000001a221	popq	%rsi
000000000001a222	popq	%rdi
000000000001a223	popq	%rbx
000000000001a224	popq	%rbp
000000000001a225	jmpq	*%rax
__ZN7cocos2d7CCArray13objectAtIndexEj:
000000000001a227	pushq	%rbp
000000000001a228	movq	%rsp, %rbp
000000000001a22b	pushq	%rbx
000000000001a22c	pushq	%rdi
000000000001a22d	pushq	%rsi
000000000001a22e	pushq	%rdx
000000000001a22f	pushq	%rcx
000000000001a230	pushq	%r8
000000000001a232	pushq	%r9
000000000001a234	pushq	%r10
000000000001a236	pushq	%r11
000000000001a238	pushq	%r12
000000000001a23a	pushq	%r13
000000000001a23c	pushq	%r14
000000000001a23e	pushq	%r15
000000000001a240	subq	$0x10, %rsp
000000000001a244	movss	%xmm0, (%rsp)
000000000001a249	subq	$0x10, %rsp
000000000001a24d	movss	%xmm1, (%rsp)
000000000001a252	pushq	%rsi
000000000001a253	pushq	%rdi
000000000001a254	callq	__Z7getBasev ## getBase()
000000000001a259	addq	$0x41a340, %rax
000000000001a25f	popq	%rdi
000000000001a260	popq	%rsi
000000000001a261	movss	(%rsp), %xmm1
000000000001a266	addq	$0x10, %rsp
000000000001a26a	movss	(%rsp), %xmm0
000000000001a26f	addq	$0x10, %rsp
000000000001a273	popq	%r15
000000000001a275	popq	%r14
000000000001a277	popq	%r13
000000000001a279	popq	%r12
000000000001a27b	popq	%r11
000000000001a27d	popq	%r10
000000000001a27f	popq	%r9
000000000001a281	popq	%r8
000000000001a283	popq	%rcx
000000000001a284	popq	%rdx
000000000001a285	popq	%rsi
000000000001a286	popq	%rdi
000000000001a287	popq	%rbx
000000000001a288	popq	%rbp
000000000001a289	jmpq	*%rax
__ZN7cocos2d7CCArray6createEv:
000000000001a28b	pushq	%rbp
000000000001a28c	movq	%rsp, %rbp
000000000001a28f	pushq	%rbx
000000000001a290	pushq	%rdi
000000000001a291	pushq	%rsi
000000000001a292	pushq	%rdx
000000000001a293	pushq	%rcx
000000000001a294	pushq	%r8
000000000001a296	pushq	%r9
000000000001a298	pushq	%r10
000000000001a29a	pushq	%r11
000000000001a29c	pushq	%r12
000000000001a29e	pushq	%r13
000000000001a2a0	pushq	%r14
000000000001a2a2	pushq	%r15
000000000001a2a4	subq	$0x10, %rsp
000000000001a2a8	movss	%xmm0, (%rsp)
000000000001a2ad	subq	$0x10, %rsp
000000000001a2b1	movss	%xmm1, (%rsp)
000000000001a2b6	pushq	%rsi
000000000001a2b7	pushq	%rdi
000000000001a2b8	callq	__Z7getBasev ## getBase()
000000000001a2bd	addq	$0x419cb0, %rax
000000000001a2c3	popq	%rdi
000000000001a2c4	popq	%rsi
000000000001a2c5	movss	(%rsp), %xmm1
000000000001a2ca	addq	$0x10, %rsp
000000000001a2ce	movss	(%rsp), %xmm0
000000000001a2d3	addq	$0x10, %rsp
000000000001a2d7	popq	%r15
000000000001a2d9	popq	%r14
000000000001a2db	popq	%r13
000000000001a2dd	popq	%r12
000000000001a2df	popq	%r11
000000000001a2e1	popq	%r10
000000000001a2e3	popq	%r9
000000000001a2e5	popq	%r8
000000000001a2e7	popq	%rcx
000000000001a2e8	popq	%rdx
000000000001a2e9	popq	%rsi
000000000001a2ea	popq	%rdi
000000000001a2eb	popq	%rbx
000000000001a2ec	popq	%rbp
000000000001a2ed	jmpq	*%rax
__ZN7cocos2d7CCArray9addObjectEPNS_8CCObjectE:
000000000001a2ef	pushq	%rbp
000000000001a2f0	movq	%rsp, %rbp
000000000001a2f3	pushq	%rbx
000000000001a2f4	pushq	%rdi
000000000001a2f5	pushq	%rsi
000000000001a2f6	pushq	%rdx
000000000001a2f7	pushq	%rcx
000000000001a2f8	pushq	%r8
000000000001a2fa	pushq	%r9
000000000001a2fc	pushq	%r10
000000000001a2fe	pushq	%r11
000000000001a300	pushq	%r12
000000000001a302	pushq	%r13
000000000001a304	pushq	%r14
000000000001a306	pushq	%r15
000000000001a308	subq	$0x10, %rsp
000000000001a30c	movss	%xmm0, (%rsp)
000000000001a311	subq	$0x10, %rsp
000000000001a315	movss	%xmm1, (%rsp)
000000000001a31a	pushq	%rsi
000000000001a31b	pushq	%rdi
000000000001a31c	callq	__Z7getBasev ## getBase()
000000000001a321	addq	$0x419f90, %rax
000000000001a327	popq	%rdi
000000000001a328	popq	%rsi
000000000001a329	movss	(%rsp), %xmm1
000000000001a32e	addq	$0x10, %rsp
000000000001a332	movss	(%rsp), %xmm0
000000000001a337	addq	$0x10, %rsp
000000000001a33b	popq	%r15
000000000001a33d	popq	%r14
000000000001a33f	popq	%r13
000000000001a341	popq	%r12
000000000001a343	popq	%r11
000000000001a345	popq	%r10
000000000001a347	popq	%r9
000000000001a349	popq	%r8
000000000001a34b	popq	%rcx
000000000001a34c	popq	%rdx
000000000001a34d	popq	%rsi
000000000001a34e	popq	%rdi
000000000001a34f	popq	%rbx
000000000001a350	popq	%rbp
000000000001a351	jmpq	*%rax
__ZN7cocos2d7CCImage17initWithImageDataEPviNS0_12EImageFormatEiii:
000000000001a353	pushq	%rbp
000000000001a354	movq	%rsp, %rbp
000000000001a357	pushq	%rbx
000000000001a358	pushq	%rdi
000000000001a359	pushq	%rsi
000000000001a35a	pushq	%rdx
000000000001a35b	pushq	%rcx
000000000001a35c	pushq	%r8
000000000001a35e	pushq	%r9
000000000001a360	pushq	%r10
000000000001a362	pushq	%r11
000000000001a364	pushq	%r12
000000000001a366	pushq	%r13
000000000001a368	pushq	%r14
000000000001a36a	pushq	%r15
000000000001a36c	subq	$0x10, %rsp
000000000001a370	movss	%xmm0, (%rsp)
000000000001a375	subq	$0x10, %rsp
000000000001a379	movss	%xmm1, (%rsp)
000000000001a37e	pushq	%rsi
000000000001a37f	pushq	%rdi
000000000001a380	callq	__Z7getBasev ## getBase()
000000000001a385	addq	$0x24fcb0, %rax
000000000001a38b	popq	%rdi
000000000001a38c	popq	%rsi
000000000001a38d	movss	(%rsp), %xmm1
000000000001a392	addq	$0x10, %rsp
000000000001a396	movss	(%rsp), %xmm0
000000000001a39b	addq	$0x10, %rsp
000000000001a39f	popq	%r15
000000000001a3a1	popq	%r14
000000000001a3a3	popq	%r13
000000000001a3a5	popq	%r12
000000000001a3a7	popq	%r11
000000000001a3a9	popq	%r10
000000000001a3ab	popq	%r9
000000000001a3ad	popq	%r8
000000000001a3af	popq	%rcx
000000000001a3b0	popq	%rdx
000000000001a3b1	popq	%rsi
000000000001a3b2	popq	%rdi
000000000001a3b3	popq	%rbx
000000000001a3b4	popq	%rbp
000000000001a3b5	jmpq	*%rax
__ZN7cocos2d7CCImageC1Ev:
000000000001a3b7	pushq	%rbp
000000000001a3b8	movq	%rsp, %rbp
000000000001a3bb	pushq	%rbx
000000000001a3bc	pushq	%rdi
000000000001a3bd	pushq	%rsi
000000000001a3be	pushq	%rdx
000000000001a3bf	pushq	%rcx
000000000001a3c0	pushq	%r8
000000000001a3c2	pushq	%r9
000000000001a3c4	pushq	%r10
000000000001a3c6	pushq	%r11
000000000001a3c8	pushq	%r12
000000000001a3ca	pushq	%r13
000000000001a3cc	pushq	%r14
000000000001a3ce	pushq	%r15
000000000001a3d0	subq	$0x10, %rsp
000000000001a3d4	movss	%xmm0, (%rsp)
000000000001a3d9	subq	$0x10, %rsp
000000000001a3dd	movss	%xmm1, (%rsp)
000000000001a3e2	pushq	%rsi
000000000001a3e3	pushq	%rdi
000000000001a3e4	callq	__Z7getBasev ## getBase()
000000000001a3e9	addq	$0x24fa00, %rax
000000000001a3ef	popq	%rdi
000000000001a3f0	popq	%rsi
000000000001a3f1	movss	(%rsp), %xmm1
000000000001a3f6	addq	$0x10, %rsp
000000000001a3fa	movss	(%rsp), %xmm0
000000000001a3ff	addq	$0x10, %rsp
000000000001a403	popq	%r15
000000000001a405	popq	%r14
000000000001a407	popq	%r13
000000000001a409	popq	%r12
000000000001a40b	popq	%r11
000000000001a40d	popq	%r10
000000000001a40f	popq	%r9
000000000001a411	popq	%r8
000000000001a413	popq	%rcx
000000000001a414	popq	%rdx
000000000001a415	popq	%rsi
000000000001a416	popq	%rdi
000000000001a417	popq	%rbx
000000000001a418	popq	%rbp
000000000001a419	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchBeganEPNS_7CCTouchEPNS_7CCEventE:
000000000001a41b	pushq	%rbp
000000000001a41c	movq	%rsp, %rbp
000000000001a41f	pushq	%rbx
000000000001a420	pushq	%rdi
000000000001a421	pushq	%rsi
000000000001a422	pushq	%rdx
000000000001a423	pushq	%rcx
000000000001a424	pushq	%r8
000000000001a426	pushq	%r9
000000000001a428	pushq	%r10
000000000001a42a	pushq	%r11
000000000001a42c	pushq	%r12
000000000001a42e	pushq	%r13
000000000001a430	pushq	%r14
000000000001a432	pushq	%r15
000000000001a434	subq	$0x10, %rsp
000000000001a438	movss	%xmm0, (%rsp)
000000000001a43d	subq	$0x10, %rsp
000000000001a441	movss	%xmm1, (%rsp)
000000000001a446	pushq	%rsi
000000000001a447	pushq	%rdi
000000000001a448	callq	__Z7getBasev ## getBase()
000000000001a44d	addq	$0x2734d0, %rax
000000000001a453	popq	%rdi
000000000001a454	popq	%rsi
000000000001a455	movss	(%rsp), %xmm1
000000000001a45a	addq	$0x10, %rsp
000000000001a45e	movss	(%rsp), %xmm0
000000000001a463	addq	$0x10, %rsp
000000000001a467	popq	%r15
000000000001a469	popq	%r14
000000000001a46b	popq	%r13
000000000001a46d	popq	%r12
000000000001a46f	popq	%r11
000000000001a471	popq	%r10
000000000001a473	popq	%r9
000000000001a475	popq	%r8
000000000001a477	popq	%rcx
000000000001a478	popq	%rdx
000000000001a479	popq	%rsi
000000000001a47a	popq	%rdi
000000000001a47b	popq	%rbx
000000000001a47c	popq	%rbp
000000000001a47d	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchEndedEPNS_7CCTouchEPNS_7CCEventE:
000000000001a47f	pushq	%rbp
000000000001a480	movq	%rsp, %rbp
000000000001a483	pushq	%rbx
000000000001a484	pushq	%rdi
000000000001a485	pushq	%rsi
000000000001a486	pushq	%rdx
000000000001a487	pushq	%rcx
000000000001a488	pushq	%r8
000000000001a48a	pushq	%r9
000000000001a48c	pushq	%r10
000000000001a48e	pushq	%r11
000000000001a490	pushq	%r12
000000000001a492	pushq	%r13
000000000001a494	pushq	%r14
000000000001a496	pushq	%r15
000000000001a498	subq	$0x10, %rsp
000000000001a49c	movss	%xmm0, (%rsp)
000000000001a4a1	subq	$0x10, %rsp
000000000001a4a5	movss	%xmm1, (%rsp)
000000000001a4aa	pushq	%rsi
000000000001a4ab	pushq	%rdi
000000000001a4ac	callq	__Z7getBasev ## getBase()
000000000001a4b1	addq	$0x2735d0, %rax
000000000001a4b7	popq	%rdi
000000000001a4b8	popq	%rsi
000000000001a4b9	movss	(%rsp), %xmm1
000000000001a4be	addq	$0x10, %rsp
000000000001a4c2	movss	(%rsp), %xmm0
000000000001a4c7	addq	$0x10, %rsp
000000000001a4cb	popq	%r15
000000000001a4cd	popq	%r14
000000000001a4cf	popq	%r13
000000000001a4d1	popq	%r12
000000000001a4d3	popq	%r11
000000000001a4d5	popq	%r10
000000000001a4d7	popq	%r9
000000000001a4d9	popq	%r8
000000000001a4db	popq	%rcx
000000000001a4dc	popq	%rdx
000000000001a4dd	popq	%rsi
000000000001a4de	popq	%rdi
000000000001a4df	popq	%rbx
000000000001a4e0	popq	%rbp
000000000001a4e1	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchMovedEPNS_7CCTouchEPNS_7CCEventE:
000000000001a4e3	pushq	%rbp
000000000001a4e4	movq	%rsp, %rbp
000000000001a4e7	pushq	%rbx
000000000001a4e8	pushq	%rdi
000000000001a4e9	pushq	%rsi
000000000001a4ea	pushq	%rdx
000000000001a4eb	pushq	%rcx
000000000001a4ec	pushq	%r8
000000000001a4ee	pushq	%r9
000000000001a4f0	pushq	%r10
000000000001a4f2	pushq	%r11
000000000001a4f4	pushq	%r12
000000000001a4f6	pushq	%r13
000000000001a4f8	pushq	%r14
000000000001a4fa	pushq	%r15
000000000001a4fc	subq	$0x10, %rsp
000000000001a500	movss	%xmm0, (%rsp)
000000000001a505	subq	$0x10, %rsp
000000000001a509	movss	%xmm1, (%rsp)
000000000001a50e	pushq	%rsi
000000000001a50f	pushq	%rdi
000000000001a510	callq	__Z7getBasev ## getBase()
000000000001a515	addq	$0x273550, %rax
000000000001a51b	popq	%rdi
000000000001a51c	popq	%rsi
000000000001a51d	movss	(%rsp), %xmm1
000000000001a522	addq	$0x10, %rsp
000000000001a526	movss	(%rsp), %xmm0
000000000001a52b	addq	$0x10, %rsp
000000000001a52f	popq	%r15
000000000001a531	popq	%r14
000000000001a533	popq	%r13
000000000001a535	popq	%r12
000000000001a537	popq	%r11
000000000001a539	popq	%r10
000000000001a53b	popq	%r9
000000000001a53d	popq	%r8
000000000001a53f	popq	%rcx
000000000001a540	popq	%rdx
000000000001a541	popq	%rsi
000000000001a542	popq	%rdi
000000000001a543	popq	%rbx
000000000001a544	popq	%rbp
000000000001a545	jmpq	*%rax
__ZN7cocos2d7CCLayer12getTouchModeEv:
000000000001a547	pushq	%rbp
000000000001a548	movq	%rsp, %rbp
000000000001a54b	pushq	%rbx
000000000001a54c	pushq	%rdi
000000000001a54d	pushq	%rsi
000000000001a54e	pushq	%rdx
000000000001a54f	pushq	%rcx
000000000001a550	pushq	%r8
000000000001a552	pushq	%r9
000000000001a554	pushq	%r10
000000000001a556	pushq	%r11
000000000001a558	pushq	%r12
000000000001a55a	pushq	%r13
000000000001a55c	pushq	%r14
000000000001a55e	pushq	%r15
000000000001a560	subq	$0x10, %rsp
000000000001a564	movss	%xmm0, (%rsp)
000000000001a569	subq	$0x10, %rsp
000000000001a56d	movss	%xmm1, (%rsp)
000000000001a572	pushq	%rsi
000000000001a573	pushq	%rdi
000000000001a574	callq	__Z7getBasev ## getBase()
000000000001a579	addq	$0x272e10, %rax
000000000001a57f	popq	%rdi
000000000001a580	popq	%rsi
000000000001a581	movss	(%rsp), %xmm1
000000000001a586	addq	$0x10, %rsp
000000000001a58a	movss	(%rsp), %xmm0
000000000001a58f	addq	$0x10, %rsp
000000000001a593	popq	%r15
000000000001a595	popq	%r14
000000000001a597	popq	%r13
000000000001a599	popq	%r12
000000000001a59b	popq	%r11
000000000001a59d	popq	%r10
000000000001a59f	popq	%r9
000000000001a5a1	popq	%r8
000000000001a5a3	popq	%rcx
000000000001a5a4	popq	%rdx
000000000001a5a5	popq	%rsi
000000000001a5a6	popq	%rdi
000000000001a5a7	popq	%rbx
000000000001a5a8	popq	%rbp
000000000001a5a9	jmpq	*%rax
__ZN7cocos2d7CCLayer12setTouchModeENS_13ccTouchesModeE:
000000000001a5ab	pushq	%rbp
000000000001a5ac	movq	%rsp, %rbp
000000000001a5af	pushq	%rbx
000000000001a5b0	pushq	%rdi
000000000001a5b1	pushq	%rsi
000000000001a5b2	pushq	%rdx
000000000001a5b3	pushq	%rcx
000000000001a5b4	pushq	%r8
000000000001a5b6	pushq	%r9
000000000001a5b8	pushq	%r10
000000000001a5ba	pushq	%r11
000000000001a5bc	pushq	%r12
000000000001a5be	pushq	%r13
000000000001a5c0	pushq	%r14
000000000001a5c2	pushq	%r15
000000000001a5c4	subq	$0x10, %rsp
000000000001a5c8	movss	%xmm0, (%rsp)
000000000001a5cd	subq	$0x10, %rsp
000000000001a5d1	movss	%xmm1, (%rsp)
000000000001a5d6	pushq	%rsi
000000000001a5d7	pushq	%rdi
000000000001a5d8	callq	__Z7getBasev ## getBase()
000000000001a5dd	addq	$0x272d60, %rax
000000000001a5e3	popq	%rdi
000000000001a5e4	popq	%rsi
000000000001a5e5	movss	(%rsp), %xmm1
000000000001a5ea	addq	$0x10, %rsp
000000000001a5ee	movss	(%rsp), %xmm0
000000000001a5f3	addq	$0x10, %rsp
000000000001a5f7	popq	%r15
000000000001a5f9	popq	%r14
000000000001a5fb	popq	%r13
000000000001a5fd	popq	%r12
000000000001a5ff	popq	%r11
000000000001a601	popq	%r10
000000000001a603	popq	%r9
000000000001a605	popq	%r8
000000000001a607	popq	%rcx
000000000001a608	popq	%rdx
000000000001a609	popq	%rsi
000000000001a60a	popq	%rdi
000000000001a60b	popq	%rbx
000000000001a60c	popq	%rbp
000000000001a60d	jmpq	*%rax
__ZN7cocos2d7CCLayer13didAccelerateEPNS_14CCAccelerationE:
000000000001a60f	pushq	%rbp
000000000001a610	movq	%rsp, %rbp
000000000001a613	pushq	%rbx
000000000001a614	pushq	%rdi
000000000001a615	pushq	%rsi
000000000001a616	pushq	%rdx
000000000001a617	pushq	%rcx
000000000001a618	pushq	%r8
000000000001a61a	pushq	%r9
000000000001a61c	pushq	%r10
000000000001a61e	pushq	%r11
000000000001a620	pushq	%r12
000000000001a622	pushq	%r13
000000000001a624	pushq	%r14
000000000001a626	pushq	%r15
000000000001a628	subq	$0x10, %rsp
000000000001a62c	movss	%xmm0, (%rsp)
000000000001a631	subq	$0x10, %rsp
000000000001a635	movss	%xmm1, (%rsp)
000000000001a63a	pushq	%rsi
000000000001a63b	pushq	%rdi
000000000001a63c	callq	__Z7getBasev ## getBase()
000000000001a641	addq	$0x272ea0, %rax
000000000001a647	popq	%rdi
000000000001a648	popq	%rsi
000000000001a649	movss	(%rsp), %xmm1
000000000001a64e	addq	$0x10, %rsp
000000000001a652	movss	(%rsp), %xmm0
000000000001a657	addq	$0x10, %rsp
000000000001a65b	popq	%r15
000000000001a65d	popq	%r14
000000000001a65f	popq	%r13
000000000001a661	popq	%r12
000000000001a663	popq	%r11
000000000001a665	popq	%r10
000000000001a667	popq	%r9
000000000001a669	popq	%r8
000000000001a66b	popq	%rcx
000000000001a66c	popq	%rdx
000000000001a66d	popq	%rsi
000000000001a66e	popq	%rdi
000000000001a66f	popq	%rbx
000000000001a670	popq	%rbp
000000000001a671	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesBeganEPNS_5CCSetEPNS_7CCEventE:
000000000001a673	pushq	%rbp
000000000001a674	movq	%rsp, %rbp
000000000001a677	pushq	%rbx
000000000001a678	pushq	%rdi
000000000001a679	pushq	%rsi
000000000001a67a	pushq	%rdx
000000000001a67b	pushq	%rcx
000000000001a67c	pushq	%r8
000000000001a67e	pushq	%r9
000000000001a680	pushq	%r10
000000000001a682	pushq	%r11
000000000001a684	pushq	%r12
000000000001a686	pushq	%r13
000000000001a688	pushq	%r14
000000000001a68a	pushq	%r15
000000000001a68c	subq	$0x10, %rsp
000000000001a690	movss	%xmm0, (%rsp)
000000000001a695	subq	$0x10, %rsp
000000000001a699	movss	%xmm1, (%rsp)
000000000001a69e	pushq	%rsi
000000000001a69f	pushq	%rdi
000000000001a6a0	callq	__Z7getBasev ## getBase()
000000000001a6a5	addq	$0x2736d0, %rax
000000000001a6ab	popq	%rdi
000000000001a6ac	popq	%rsi
000000000001a6ad	movss	(%rsp), %xmm1
000000000001a6b2	addq	$0x10, %rsp
000000000001a6b6	movss	(%rsp), %xmm0
000000000001a6bb	addq	$0x10, %rsp
000000000001a6bf	popq	%r15
000000000001a6c1	popq	%r14
000000000001a6c3	popq	%r13
000000000001a6c5	popq	%r12
000000000001a6c7	popq	%r11
000000000001a6c9	popq	%r10
000000000001a6cb	popq	%r9
000000000001a6cd	popq	%r8
000000000001a6cf	popq	%rcx
000000000001a6d0	popq	%rdx
000000000001a6d1	popq	%rsi
000000000001a6d2	popq	%rdi
000000000001a6d3	popq	%rbx
000000000001a6d4	popq	%rbp
000000000001a6d5	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesEndedEPNS_5CCSetEPNS_7CCEventE:
000000000001a6d7	pushq	%rbp
000000000001a6d8	movq	%rsp, %rbp
000000000001a6db	pushq	%rbx
000000000001a6dc	pushq	%rdi
000000000001a6dd	pushq	%rsi
000000000001a6de	pushq	%rdx
000000000001a6df	pushq	%rcx
000000000001a6e0	pushq	%r8
000000000001a6e2	pushq	%r9
000000000001a6e4	pushq	%r10
000000000001a6e6	pushq	%r11
000000000001a6e8	pushq	%r12
000000000001a6ea	pushq	%r13
000000000001a6ec	pushq	%r14
000000000001a6ee	pushq	%r15
000000000001a6f0	subq	$0x10, %rsp
000000000001a6f4	movss	%xmm0, (%rsp)
000000000001a6f9	subq	$0x10, %rsp
000000000001a6fd	movss	%xmm1, (%rsp)
000000000001a702	pushq	%rsi
000000000001a703	pushq	%rdi
000000000001a704	callq	__Z7getBasev ## getBase()
000000000001a709	addq	$0x2737d0, %rax
000000000001a70f	popq	%rdi
000000000001a710	popq	%rsi
000000000001a711	movss	(%rsp), %xmm1
000000000001a716	addq	$0x10, %rsp
000000000001a71a	movss	(%rsp), %xmm0
000000000001a71f	addq	$0x10, %rsp
000000000001a723	popq	%r15
000000000001a725	popq	%r14
000000000001a727	popq	%r13
000000000001a729	popq	%r12
000000000001a72b	popq	%r11
000000000001a72d	popq	%r10
000000000001a72f	popq	%r9
000000000001a731	popq	%r8
000000000001a733	popq	%rcx
000000000001a734	popq	%rdx
000000000001a735	popq	%rsi
000000000001a736	popq	%rdi
000000000001a737	popq	%rbx
000000000001a738	popq	%rbp
000000000001a739	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesMovedEPNS_5CCSetEPNS_7CCEventE:
000000000001a73b	pushq	%rbp
000000000001a73c	movq	%rsp, %rbp
000000000001a73f	pushq	%rbx
000000000001a740	pushq	%rdi
000000000001a741	pushq	%rsi
000000000001a742	pushq	%rdx
000000000001a743	pushq	%rcx
000000000001a744	pushq	%r8
000000000001a746	pushq	%r9
000000000001a748	pushq	%r10
000000000001a74a	pushq	%r11
000000000001a74c	pushq	%r12
000000000001a74e	pushq	%r13
000000000001a750	pushq	%r14
000000000001a752	pushq	%r15
000000000001a754	subq	$0x10, %rsp
000000000001a758	movss	%xmm0, (%rsp)
000000000001a75d	subq	$0x10, %rsp
000000000001a761	movss	%xmm1, (%rsp)
000000000001a766	pushq	%rsi
000000000001a767	pushq	%rdi
000000000001a768	callq	__Z7getBasev ## getBase()
000000000001a76d	addq	$0x273750, %rax
000000000001a773	popq	%rdi
000000000001a774	popq	%rsi
000000000001a775	movss	(%rsp), %xmm1
000000000001a77a	addq	$0x10, %rsp
000000000001a77e	movss	(%rsp), %xmm0
000000000001a783	addq	$0x10, %rsp
000000000001a787	popq	%r15
000000000001a789	popq	%r14
000000000001a78b	popq	%r13
000000000001a78d	popq	%r12
000000000001a78f	popq	%r11
000000000001a791	popq	%r10
000000000001a793	popq	%r9
000000000001a795	popq	%r8
000000000001a797	popq	%rcx
000000000001a798	popq	%rdx
000000000001a799	popq	%rsi
000000000001a79a	popq	%rdi
000000000001a79b	popq	%rbx
000000000001a79c	popq	%rbp
000000000001a79d	jmpq	*%rax
__ZN7cocos2d7CCLayer14isMouseEnabledEv:
000000000001a79f	pushq	%rbp
000000000001a7a0	movq	%rsp, %rbp
000000000001a7a3	pushq	%rbx
000000000001a7a4	pushq	%rdi
000000000001a7a5	pushq	%rsi
000000000001a7a6	pushq	%rdx
000000000001a7a7	pushq	%rcx
000000000001a7a8	pushq	%r8
000000000001a7aa	pushq	%r9
000000000001a7ac	pushq	%r10
000000000001a7ae	pushq	%r11
000000000001a7b0	pushq	%r12
000000000001a7b2	pushq	%r13
000000000001a7b4	pushq	%r14
000000000001a7b6	pushq	%r15
000000000001a7b8	subq	$0x10, %rsp
000000000001a7bc	movss	%xmm0, (%rsp)
000000000001a7c1	subq	$0x10, %rsp
000000000001a7c5	movss	%xmm1, (%rsp)
000000000001a7ca	pushq	%rsi
000000000001a7cb	pushq	%rdi
000000000001a7cc	callq	__Z7getBasev ## getBase()
000000000001a7d1	addq	$0x273090, %rax
000000000001a7d7	popq	%rdi
000000000001a7d8	popq	%rsi
000000000001a7d9	movss	(%rsp), %xmm1
000000000001a7de	addq	$0x10, %rsp
000000000001a7e2	movss	(%rsp), %xmm0
000000000001a7e7	addq	$0x10, %rsp
000000000001a7eb	popq	%r15
000000000001a7ed	popq	%r14
000000000001a7ef	popq	%r13
000000000001a7f1	popq	%r12
000000000001a7f3	popq	%r11
000000000001a7f5	popq	%r10
000000000001a7f7	popq	%r9
000000000001a7f9	popq	%r8
000000000001a7fb	popq	%rcx
000000000001a7fc	popq	%rdx
000000000001a7fd	popq	%rsi
000000000001a7fe	popq	%rdi
000000000001a7ff	popq	%rbx
000000000001a800	popq	%rbp
000000000001a801	jmpq	*%rax
__ZN7cocos2d7CCLayer14isTouchEnabledEv:
000000000001a803	pushq	%rbp
000000000001a804	movq	%rsp, %rbp
000000000001a807	pushq	%rbx
000000000001a808	pushq	%rdi
000000000001a809	pushq	%rsi
000000000001a80a	pushq	%rdx
000000000001a80b	pushq	%rcx
000000000001a80c	pushq	%r8
000000000001a80e	pushq	%r9
000000000001a810	pushq	%r10
000000000001a812	pushq	%r11
000000000001a814	pushq	%r12
000000000001a816	pushq	%r13
000000000001a818	pushq	%r14
000000000001a81a	pushq	%r15
000000000001a81c	subq	$0x10, %rsp
000000000001a820	movss	%xmm0, (%rsp)
000000000001a825	subq	$0x10, %rsp
000000000001a829	movss	%xmm1, (%rsp)
000000000001a82e	pushq	%rsi
000000000001a82f	pushq	%rdi
000000000001a830	callq	__Z7getBasev ## getBase()
000000000001a835	addq	$0x272ce0, %rax
000000000001a83b	popq	%rdi
000000000001a83c	popq	%rsi
000000000001a83d	movss	(%rsp), %xmm1
000000000001a842	addq	$0x10, %rsp
000000000001a846	movss	(%rsp), %xmm0
000000000001a84b	addq	$0x10, %rsp
000000000001a84f	popq	%r15
000000000001a851	popq	%r14
000000000001a853	popq	%r13
000000000001a855	popq	%r12
000000000001a857	popq	%r11
000000000001a859	popq	%r10
000000000001a85b	popq	%r9
000000000001a85d	popq	%r8
000000000001a85f	popq	%rcx
000000000001a860	popq	%rdx
000000000001a861	popq	%rsi
000000000001a862	popq	%rdi
000000000001a863	popq	%rbx
000000000001a864	popq	%rbp
000000000001a865	jmpq	*%rax
__ZN7cocos2d7CCLayer14keyBackClickedEv:
000000000001a867	pushq	%rbp
000000000001a868	movq	%rsp, %rbp
000000000001a86b	pushq	%rbx
000000000001a86c	pushq	%rdi
000000000001a86d	pushq	%rsi
000000000001a86e	pushq	%rdx
000000000001a86f	pushq	%rcx
000000000001a870	pushq	%r8
000000000001a872	pushq	%r9
000000000001a874	pushq	%r10
000000000001a876	pushq	%r11
000000000001a878	pushq	%r12
000000000001a87a	pushq	%r13
000000000001a87c	pushq	%r14
000000000001a87e	pushq	%r15
000000000001a880	subq	$0x10, %rsp
000000000001a884	movss	%xmm0, (%rsp)
000000000001a889	subq	$0x10, %rsp
000000000001a88d	movss	%xmm1, (%rsp)
000000000001a892	pushq	%rsi
000000000001a893	pushq	%rdi
000000000001a894	callq	__Z7getBasev ## getBase()
000000000001a899	addq	$0x273160, %rax
000000000001a89f	popq	%rdi
000000000001a8a0	popq	%rsi
000000000001a8a1	movss	(%rsp), %xmm1
000000000001a8a6	addq	$0x10, %rsp
000000000001a8aa	movss	(%rsp), %xmm0
000000000001a8af	addq	$0x10, %rsp
000000000001a8b3	popq	%r15
000000000001a8b5	popq	%r14
000000000001a8b7	popq	%r13
000000000001a8b9	popq	%r12
000000000001a8bb	popq	%r11
000000000001a8bd	popq	%r10
000000000001a8bf	popq	%r9
000000000001a8c1	popq	%r8
000000000001a8c3	popq	%rcx
000000000001a8c4	popq	%rdx
000000000001a8c5	popq	%rsi
000000000001a8c6	popq	%rdi
000000000001a8c7	popq	%rbx
000000000001a8c8	popq	%rbp
000000000001a8c9	jmpq	*%rax
__ZN7cocos2d7CCLayer14keyMenuClickedEv:
000000000001a8cb	pushq	%rbp
000000000001a8cc	movq	%rsp, %rbp
000000000001a8cf	pushq	%rbx
000000000001a8d0	pushq	%rdi
000000000001a8d1	pushq	%rsi
000000000001a8d2	pushq	%rdx
000000000001a8d3	pushq	%rcx
000000000001a8d4	pushq	%r8
000000000001a8d6	pushq	%r9
000000000001a8d8	pushq	%r10
000000000001a8da	pushq	%r11
000000000001a8dc	pushq	%r12
000000000001a8de	pushq	%r13
000000000001a8e0	pushq	%r14
000000000001a8e2	pushq	%r15
000000000001a8e4	subq	$0x10, %rsp
000000000001a8e8	movss	%xmm0, (%rsp)
000000000001a8ed	subq	$0x10, %rsp
000000000001a8f1	movss	%xmm1, (%rsp)
000000000001a8f6	pushq	%rsi
000000000001a8f7	pushq	%rdi
000000000001a8f8	callq	__Z7getBasev ## getBase()
000000000001a8fd	addq	$0x273200, %rax
000000000001a903	popq	%rdi
000000000001a904	popq	%rsi
000000000001a905	movss	(%rsp), %xmm1
000000000001a90a	addq	$0x10, %rsp
000000000001a90e	movss	(%rsp), %xmm0
000000000001a913	addq	$0x10, %rsp
000000000001a917	popq	%r15
000000000001a919	popq	%r14
000000000001a91b	popq	%r13
000000000001a91d	popq	%r12
000000000001a91f	popq	%r11
000000000001a921	popq	%r10
000000000001a923	popq	%r9
000000000001a925	popq	%r8
000000000001a927	popq	%rcx
000000000001a928	popq	%rdx
000000000001a929	popq	%rsi
000000000001a92a	popq	%rdi
000000000001a92b	popq	%rbx
000000000001a92c	popq	%rbp
000000000001a92d	jmpq	*%rax
__ZN7cocos2d7CCLayer15isKeypadEnabledEv:
000000000001a92f	pushq	%rbp
000000000001a930	movq	%rsp, %rbp
000000000001a933	pushq	%rbx
000000000001a934	pushq	%rdi
000000000001a935	pushq	%rsi
000000000001a936	pushq	%rdx
000000000001a937	pushq	%rcx
000000000001a938	pushq	%r8
000000000001a93a	pushq	%r9
000000000001a93c	pushq	%r10
000000000001a93e	pushq	%r11
000000000001a940	pushq	%r12
000000000001a942	pushq	%r13
000000000001a944	pushq	%r14
000000000001a946	pushq	%r15
000000000001a948	subq	$0x10, %rsp
000000000001a94c	movss	%xmm0, (%rsp)
000000000001a951	subq	$0x10, %rsp
000000000001a955	movss	%xmm1, (%rsp)
000000000001a95a	pushq	%rsi
000000000001a95b	pushq	%rdi
000000000001a95c	callq	__Z7getBasev ## getBase()
000000000001a961	addq	$0x272f70, %rax
000000000001a967	popq	%rdi
000000000001a968	popq	%rsi
000000000001a969	movss	(%rsp), %xmm1
000000000001a96e	addq	$0x10, %rsp
000000000001a972	movss	(%rsp), %xmm0
000000000001a977	addq	$0x10, %rsp
000000000001a97b	popq	%r15
000000000001a97d	popq	%r14
000000000001a97f	popq	%r13
000000000001a981	popq	%r12
000000000001a983	popq	%r11
000000000001a985	popq	%r10
000000000001a987	popq	%r9
000000000001a989	popq	%r8
000000000001a98b	popq	%rcx
000000000001a98c	popq	%rdx
000000000001a98d	popq	%rsi
000000000001a98e	popq	%rdi
000000000001a98f	popq	%rbx
000000000001a990	popq	%rbp
000000000001a991	jmpq	*%rax
__ZN7cocos2d7CCLayer15setMouseEnabledEb:
000000000001a993	pushq	%rbp
000000000001a994	movq	%rsp, %rbp
000000000001a997	pushq	%rbx
000000000001a998	pushq	%rdi
000000000001a999	pushq	%rsi
000000000001a99a	pushq	%rdx
000000000001a99b	pushq	%rcx
000000000001a99c	pushq	%r8
000000000001a99e	pushq	%r9
000000000001a9a0	pushq	%r10
000000000001a9a2	pushq	%r11
000000000001a9a4	pushq	%r12
000000000001a9a6	pushq	%r13
000000000001a9a8	pushq	%r14
000000000001a9aa	pushq	%r15
000000000001a9ac	subq	$0x10, %rsp
000000000001a9b0	movss	%xmm0, (%rsp)
000000000001a9b5	subq	$0x10, %rsp
000000000001a9b9	movss	%xmm1, (%rsp)
000000000001a9be	pushq	%rsi
000000000001a9bf	pushq	%rdi
000000000001a9c0	callq	__Z7getBasev ## getBase()
000000000001a9c5	addq	$0x2730a0, %rax
000000000001a9cb	popq	%rdi
000000000001a9cc	popq	%rsi
000000000001a9cd	movss	(%rsp), %xmm1
000000000001a9d2	addq	$0x10, %rsp
000000000001a9d6	movss	(%rsp), %xmm0
000000000001a9db	addq	$0x10, %rsp
000000000001a9df	popq	%r15
000000000001a9e1	popq	%r14
000000000001a9e3	popq	%r13
000000000001a9e5	popq	%r12
000000000001a9e7	popq	%r11
000000000001a9e9	popq	%r10
000000000001a9eb	popq	%r9
000000000001a9ed	popq	%r8
000000000001a9ef	popq	%rcx
000000000001a9f0	popq	%rdx
000000000001a9f1	popq	%rsi
000000000001a9f2	popq	%rdi
000000000001a9f3	popq	%rbx
000000000001a9f4	popq	%rbp
000000000001a9f5	jmpq	*%rax
__ZN7cocos2d7CCLayer15setTouchEnabledEb:
000000000001a9f7	pushq	%rbp
000000000001a9f8	movq	%rsp, %rbp
000000000001a9fb	pushq	%rbx
000000000001a9fc	pushq	%rdi
000000000001a9fd	pushq	%rsi
000000000001a9fe	pushq	%rdx
000000000001a9ff	pushq	%rcx
000000000001aa00	pushq	%r8
000000000001aa02	pushq	%r9
000000000001aa04	pushq	%r10
000000000001aa06	pushq	%r11
000000000001aa08	pushq	%r12
000000000001aa0a	pushq	%r13
000000000001aa0c	pushq	%r14
000000000001aa0e	pushq	%r15
000000000001aa10	subq	$0x10, %rsp
000000000001aa14	movss	%xmm0, (%rsp)
000000000001aa19	subq	$0x10, %rsp
000000000001aa1d	movss	%xmm1, (%rsp)
000000000001aa22	pushq	%rsi
000000000001aa23	pushq	%rdi
000000000001aa24	callq	__Z7getBasev ## getBase()
000000000001aa29	addq	$0x272cf0, %rax
000000000001aa2f	popq	%rdi
000000000001aa30	popq	%rsi
000000000001aa31	movss	(%rsp), %xmm1
000000000001aa36	addq	$0x10, %rsp
000000000001aa3a	movss	(%rsp), %xmm0
000000000001aa3f	addq	$0x10, %rsp
000000000001aa43	popq	%r15
000000000001aa45	popq	%r14
000000000001aa47	popq	%r13
000000000001aa49	popq	%r12
000000000001aa4b	popq	%r11
000000000001aa4d	popq	%r10
000000000001aa4f	popq	%r9
000000000001aa51	popq	%r8
000000000001aa53	popq	%rcx
000000000001aa54	popq	%rdx
000000000001aa55	popq	%rsi
000000000001aa56	popq	%rdi
000000000001aa57	popq	%rbx
000000000001aa58	popq	%rbp
000000000001aa59	jmpq	*%rax
__ZN7cocos2d7CCLayer16ccTouchCancelledEPNS_7CCTouchEPNS_7CCEventE:
000000000001aa5b	pushq	%rbp
000000000001aa5c	movq	%rsp, %rbp
000000000001aa5f	pushq	%rbx
000000000001aa60	pushq	%rdi
000000000001aa61	pushq	%rsi
000000000001aa62	pushq	%rdx
000000000001aa63	pushq	%rcx
000000000001aa64	pushq	%r8
000000000001aa66	pushq	%r9
000000000001aa68	pushq	%r10
000000000001aa6a	pushq	%r11
000000000001aa6c	pushq	%r12
000000000001aa6e	pushq	%r13
000000000001aa70	pushq	%r14
000000000001aa72	pushq	%r15
000000000001aa74	subq	$0x10, %rsp
000000000001aa78	movss	%xmm0, (%rsp)
000000000001aa7d	subq	$0x10, %rsp
000000000001aa81	movss	%xmm1, (%rsp)
000000000001aa86	pushq	%rsi
000000000001aa87	pushq	%rdi
000000000001aa88	callq	__Z7getBasev ## getBase()
000000000001aa8d	addq	$0x273650, %rax
000000000001aa93	popq	%rdi
000000000001aa94	popq	%rsi
000000000001aa95	movss	(%rsp), %xmm1
000000000001aa9a	addq	$0x10, %rsp
000000000001aa9e	movss	(%rsp), %xmm0
000000000001aaa3	addq	$0x10, %rsp
000000000001aaa7	popq	%r15
000000000001aaa9	popq	%r14
000000000001aaab	popq	%r13
000000000001aaad	popq	%r12
000000000001aaaf	popq	%r11
000000000001aab1	popq	%r10
000000000001aab3	popq	%r9
000000000001aab5	popq	%r8
000000000001aab7	popq	%rcx
000000000001aab8	popq	%rdx
000000000001aab9	popq	%rsi
000000000001aaba	popq	%rdi
000000000001aabb	popq	%rbx
000000000001aabc	popq	%rbp
000000000001aabd	jmpq	*%rax
__ZN7cocos2d7CCLayer16getTouchPriorityEv:
000000000001aabf	pushq	%rbp
000000000001aac0	movq	%rsp, %rbp
000000000001aac3	pushq	%rbx
000000000001aac4	pushq	%rdi
000000000001aac5	pushq	%rsi
000000000001aac6	pushq	%rdx
000000000001aac7	pushq	%rcx
000000000001aac8	pushq	%r8
000000000001aaca	pushq	%r9
000000000001aacc	pushq	%r10
000000000001aace	pushq	%r11
000000000001aad0	pushq	%r12
000000000001aad2	pushq	%r13
000000000001aad4	pushq	%r14
000000000001aad6	pushq	%r15
000000000001aad8	subq	$0x10, %rsp
000000000001aadc	movss	%xmm0, (%rsp)
000000000001aae1	subq	$0x10, %rsp
000000000001aae5	movss	%xmm1, (%rsp)
000000000001aaea	pushq	%rsi
000000000001aaeb	pushq	%rdi
000000000001aaec	callq	__Z7getBasev ## getBase()
000000000001aaf1	addq	$0x272e00, %rax
000000000001aaf7	popq	%rdi
000000000001aaf8	popq	%rsi
000000000001aaf9	movss	(%rsp), %xmm1
000000000001aafe	addq	$0x10, %rsp
000000000001ab02	movss	(%rsp), %xmm0
000000000001ab07	addq	$0x10, %rsp
000000000001ab0b	popq	%r15
000000000001ab0d	popq	%r14
000000000001ab0f	popq	%r13
000000000001ab11	popq	%r12
000000000001ab13	popq	%r11
000000000001ab15	popq	%r10
000000000001ab17	popq	%r9
000000000001ab19	popq	%r8
000000000001ab1b	popq	%rcx
000000000001ab1c	popq	%rdx
000000000001ab1d	popq	%rsi
000000000001ab1e	popq	%rdi
000000000001ab1f	popq	%rbx
000000000001ab20	popq	%rbp
000000000001ab21	jmpq	*%rax
__ZN7cocos2d7CCLayer16setKeypadEnabledEb:
000000000001ab23	pushq	%rbp
000000000001ab24	movq	%rsp, %rbp
000000000001ab27	pushq	%rbx
000000000001ab28	pushq	%rdi
000000000001ab29	pushq	%rsi
000000000001ab2a	pushq	%rdx
000000000001ab2b	pushq	%rcx
000000000001ab2c	pushq	%r8
000000000001ab2e	pushq	%r9
000000000001ab30	pushq	%r10
000000000001ab32	pushq	%r11
000000000001ab34	pushq	%r12
000000000001ab36	pushq	%r13
000000000001ab38	pushq	%r14
000000000001ab3a	pushq	%r15
000000000001ab3c	subq	$0x10, %rsp
000000000001ab40	movss	%xmm0, (%rsp)
000000000001ab45	subq	$0x10, %rsp
000000000001ab49	movss	%xmm1, (%rsp)
000000000001ab4e	pushq	%rsi
000000000001ab4f	pushq	%rdi
000000000001ab50	callq	__Z7getBasev ## getBase()
000000000001ab55	addq	$0x272f80, %rax
000000000001ab5b	popq	%rdi
000000000001ab5c	popq	%rsi
000000000001ab5d	movss	(%rsp), %xmm1
000000000001ab62	addq	$0x10, %rsp
000000000001ab66	movss	(%rsp), %xmm0
000000000001ab6b	addq	$0x10, %rsp
000000000001ab6f	popq	%r15
000000000001ab71	popq	%r14
000000000001ab73	popq	%r13
000000000001ab75	popq	%r12
000000000001ab77	popq	%r11
000000000001ab79	popq	%r10
000000000001ab7b	popq	%r9
000000000001ab7d	popq	%r8
000000000001ab7f	popq	%rcx
000000000001ab80	popq	%rdx
000000000001ab81	popq	%rsi
000000000001ab82	popq	%rdi
000000000001ab83	popq	%rbx
000000000001ab84	popq	%rbp
000000000001ab85	jmpq	*%rax
__ZN7cocos2d7CCLayer16setTouchPriorityEi:
000000000001ab87	pushq	%rbp
000000000001ab88	movq	%rsp, %rbp
000000000001ab8b	pushq	%rbx
000000000001ab8c	pushq	%rdi
000000000001ab8d	pushq	%rsi
000000000001ab8e	pushq	%rdx
000000000001ab8f	pushq	%rcx
000000000001ab90	pushq	%r8
000000000001ab92	pushq	%r9
000000000001ab94	pushq	%r10
000000000001ab96	pushq	%r11
000000000001ab98	pushq	%r12
000000000001ab9a	pushq	%r13
000000000001ab9c	pushq	%r14
000000000001ab9e	pushq	%r15
000000000001aba0	subq	$0x10, %rsp
000000000001aba4	movss	%xmm0, (%rsp)
000000000001aba9	subq	$0x10, %rsp
000000000001abad	movss	%xmm1, (%rsp)
000000000001abb2	pushq	%rsi
000000000001abb3	pushq	%rdi
000000000001abb4	callq	__Z7getBasev ## getBase()
000000000001abb9	addq	$0x272db0, %rax
000000000001abbf	popq	%rdi
000000000001abc0	popq	%rsi
000000000001abc1	movss	(%rsp), %xmm1
000000000001abc6	addq	$0x10, %rsp
000000000001abca	movss	(%rsp), %xmm0
000000000001abcf	addq	$0x10, %rsp
000000000001abd3	popq	%r15
000000000001abd5	popq	%r14
000000000001abd7	popq	%r13
000000000001abd9	popq	%r12
000000000001abdb	popq	%r11
000000000001abdd	popq	%r10
000000000001abdf	popq	%r9
000000000001abe1	popq	%r8
000000000001abe3	popq	%rcx
000000000001abe4	popq	%rdx
000000000001abe5	popq	%rsi
000000000001abe6	popq	%rdi
000000000001abe7	popq	%rbx
000000000001abe8	popq	%rbp
000000000001abe9	jmpq	*%rax
__ZN7cocos2d7CCLayer17isKeyboardEnabledEv:
000000000001abeb	pushq	%rbp
000000000001abec	movq	%rsp, %rbp
000000000001abef	pushq	%rbx
000000000001abf0	pushq	%rdi
000000000001abf1	pushq	%rsi
000000000001abf2	pushq	%rdx
000000000001abf3	pushq	%rcx
000000000001abf4	pushq	%r8
000000000001abf6	pushq	%r9
000000000001abf8	pushq	%r10
000000000001abfa	pushq	%r11
000000000001abfc	pushq	%r12
000000000001abfe	pushq	%r13
000000000001ac00	pushq	%r14
000000000001ac02	pushq	%r15
000000000001ac04	subq	$0x10, %rsp
000000000001ac08	movss	%xmm0, (%rsp)
000000000001ac0d	subq	$0x10, %rsp
000000000001ac11	movss	%xmm1, (%rsp)
000000000001ac16	pushq	%rsi
000000000001ac17	pushq	%rdi
000000000001ac18	callq	__Z7getBasev ## getBase()
000000000001ac1d	addq	$0x273010, %rax
000000000001ac23	popq	%rdi
000000000001ac24	popq	%rsi
000000000001ac25	movss	(%rsp), %xmm1
000000000001ac2a	addq	$0x10, %rsp
000000000001ac2e	movss	(%rsp), %xmm0
000000000001ac33	addq	$0x10, %rsp
000000000001ac37	popq	%r15
000000000001ac39	popq	%r14
000000000001ac3b	popq	%r13
000000000001ac3d	popq	%r12
000000000001ac3f	popq	%r11
000000000001ac41	popq	%r10
000000000001ac43	popq	%r9
000000000001ac45	popq	%r8
000000000001ac47	popq	%rcx
000000000001ac48	popq	%rdx
000000000001ac49	popq	%rsi
000000000001ac4a	popq	%rdi
000000000001ac4b	popq	%rbx
000000000001ac4c	popq	%rbp
000000000001ac4d	jmpq	*%rax
__ZN7cocos2d7CCLayer18ccTouchesCancelledEPNS_5CCSetEPNS_7CCEventE:
000000000001ac4f	pushq	%rbp
000000000001ac50	movq	%rsp, %rbp
000000000001ac53	pushq	%rbx
000000000001ac54	pushq	%rdi
000000000001ac55	pushq	%rsi
000000000001ac56	pushq	%rdx
000000000001ac57	pushq	%rcx
000000000001ac58	pushq	%r8
000000000001ac5a	pushq	%r9
000000000001ac5c	pushq	%r10
000000000001ac5e	pushq	%r11
000000000001ac60	pushq	%r12
000000000001ac62	pushq	%r13
000000000001ac64	pushq	%r14
000000000001ac66	pushq	%r15
000000000001ac68	subq	$0x10, %rsp
000000000001ac6c	movss	%xmm0, (%rsp)
000000000001ac71	subq	$0x10, %rsp
000000000001ac75	movss	%xmm1, (%rsp)
000000000001ac7a	pushq	%rsi
000000000001ac7b	pushq	%rdi
000000000001ac7c	callq	__Z7getBasev ## getBase()
000000000001ac81	addq	$0x273850, %rax
000000000001ac87	popq	%rdi
000000000001ac88	popq	%rsi
000000000001ac89	movss	(%rsp), %xmm1
000000000001ac8e	addq	$0x10, %rsp
000000000001ac92	movss	(%rsp), %xmm0
000000000001ac97	addq	$0x10, %rsp
000000000001ac9b	popq	%r15
000000000001ac9d	popq	%r14
000000000001ac9f	popq	%r13
000000000001aca1	popq	%r12
000000000001aca3	popq	%r11
000000000001aca5	popq	%r10
000000000001aca7	popq	%r9
000000000001aca9	popq	%r8
000000000001acab	popq	%rcx
000000000001acac	popq	%rdx
000000000001acad	popq	%rsi
000000000001acae	popq	%rdi
000000000001acaf	popq	%rbx
000000000001acb0	popq	%rbp
000000000001acb1	jmpq	*%rax
__ZN7cocos2d7CCLayer18setKeyboardEnabledEb:
000000000001acb3	pushq	%rbp
000000000001acb4	movq	%rsp, %rbp
000000000001acb7	pushq	%rbx
000000000001acb8	pushq	%rdi
000000000001acb9	pushq	%rsi
000000000001acba	pushq	%rdx
000000000001acbb	pushq	%rcx
000000000001acbc	pushq	%r8
000000000001acbe	pushq	%r9
000000000001acc0	pushq	%r10
000000000001acc2	pushq	%r11
000000000001acc4	pushq	%r12
000000000001acc6	pushq	%r13
000000000001acc8	pushq	%r14
000000000001acca	pushq	%r15
000000000001accc	subq	$0x10, %rsp
000000000001acd0	movss	%xmm0, (%rsp)
000000000001acd5	subq	$0x10, %rsp
000000000001acd9	movss	%xmm1, (%rsp)
000000000001acde	pushq	%rsi
000000000001acdf	pushq	%rdi
000000000001ace0	callq	__Z7getBasev ## getBase()
000000000001ace5	addq	$0x273020, %rax
000000000001aceb	popq	%rdi
000000000001acec	popq	%rsi
000000000001aced	movss	(%rsp), %xmm1
000000000001acf2	addq	$0x10, %rsp
000000000001acf6	movss	(%rsp), %xmm0
000000000001acfb	addq	$0x10, %rsp
000000000001acff	popq	%r15
000000000001ad01	popq	%r14
000000000001ad03	popq	%r13
000000000001ad05	popq	%r12
000000000001ad07	popq	%r11
000000000001ad09	popq	%r10
000000000001ad0b	popq	%r9
000000000001ad0d	popq	%r8
000000000001ad0f	popq	%rcx
000000000001ad10	popq	%rdx
000000000001ad11	popq	%rsi
000000000001ad12	popq	%rdi
000000000001ad13	popq	%rbx
000000000001ad14	popq	%rbp
000000000001ad15	jmpq	*%rax
__ZN7cocos2d7CCLayer22isAccelerometerEnabledEv:
000000000001ad17	pushq	%rbp
000000000001ad18	movq	%rsp, %rbp
000000000001ad1b	pushq	%rbx
000000000001ad1c	pushq	%rdi
000000000001ad1d	pushq	%rsi
000000000001ad1e	pushq	%rdx
000000000001ad1f	pushq	%rcx
000000000001ad20	pushq	%r8
000000000001ad22	pushq	%r9
000000000001ad24	pushq	%r10
000000000001ad26	pushq	%r11
000000000001ad28	pushq	%r12
000000000001ad2a	pushq	%r13
000000000001ad2c	pushq	%r14
000000000001ad2e	pushq	%r15
000000000001ad30	subq	$0x10, %rsp
000000000001ad34	movss	%xmm0, (%rsp)
000000000001ad39	subq	$0x10, %rsp
000000000001ad3d	movss	%xmm1, (%rsp)
000000000001ad42	pushq	%rsi
000000000001ad43	pushq	%rdi
000000000001ad44	callq	__Z7getBasev ## getBase()
000000000001ad49	addq	$0x272e20, %rax
000000000001ad4f	popq	%rdi
000000000001ad50	popq	%rsi
000000000001ad51	movss	(%rsp), %xmm1
000000000001ad56	addq	$0x10, %rsp
000000000001ad5a	movss	(%rsp), %xmm0
000000000001ad5f	addq	$0x10, %rsp
000000000001ad63	popq	%r15
000000000001ad65	popq	%r14
000000000001ad67	popq	%r13
000000000001ad69	popq	%r12
000000000001ad6b	popq	%r11
000000000001ad6d	popq	%r10
000000000001ad6f	popq	%r9
000000000001ad71	popq	%r8
000000000001ad73	popq	%rcx
000000000001ad74	popq	%rdx
000000000001ad75	popq	%rsi
000000000001ad76	popq	%rdi
000000000001ad77	popq	%rbx
000000000001ad78	popq	%rbp
000000000001ad79	jmpq	*%rax
__ZN7cocos2d7CCLayer23setAccelerometerEnabledEb:
000000000001ad7b	pushq	%rbp
000000000001ad7c	movq	%rsp, %rbp
000000000001ad7f	pushq	%rbx
000000000001ad80	pushq	%rdi
000000000001ad81	pushq	%rsi
000000000001ad82	pushq	%rdx
000000000001ad83	pushq	%rcx
000000000001ad84	pushq	%r8
000000000001ad86	pushq	%r9
000000000001ad88	pushq	%r10
000000000001ad8a	pushq	%r11
000000000001ad8c	pushq	%r12
000000000001ad8e	pushq	%r13
000000000001ad90	pushq	%r14
000000000001ad92	pushq	%r15
000000000001ad94	subq	$0x10, %rsp
000000000001ad98	movss	%xmm0, (%rsp)
000000000001ad9d	subq	$0x10, %rsp
000000000001ada1	movss	%xmm1, (%rsp)
000000000001ada6	pushq	%rsi
000000000001ada7	pushq	%rdi
000000000001ada8	callq	__Z7getBasev ## getBase()
000000000001adad	addq	$0x272e30, %rax
000000000001adb3	popq	%rdi
000000000001adb4	popq	%rsi
000000000001adb5	movss	(%rsp), %xmm1
000000000001adba	addq	$0x10, %rsp
000000000001adbe	movss	(%rsp), %xmm0
000000000001adc3	addq	$0x10, %rsp
000000000001adc7	popq	%r15
000000000001adc9	popq	%r14
000000000001adcb	popq	%r13
000000000001adcd	popq	%r12
000000000001adcf	popq	%r11
000000000001add1	popq	%r10
000000000001add3	popq	%r9
000000000001add5	popq	%r8
000000000001add7	popq	%rcx
000000000001add8	popq	%rdx
000000000001add9	popq	%rsi
000000000001adda	popq	%rdi
000000000001addb	popq	%rbx
000000000001addc	popq	%rbp
000000000001addd	jmpq	*%rax
__ZN7cocos2d7CCLayer24setAccelerometerIntervalEd:
000000000001addf	pushq	%rbp
000000000001ade0	movq	%rsp, %rbp
000000000001ade3	pushq	%rbx
000000000001ade4	pushq	%rdi
000000000001ade5	pushq	%rsi
000000000001ade6	pushq	%rdx
000000000001ade7	pushq	%rcx
000000000001ade8	pushq	%r8
000000000001adea	pushq	%r9
000000000001adec	pushq	%r10
000000000001adee	pushq	%r11
000000000001adf0	pushq	%r12
000000000001adf2	pushq	%r13
000000000001adf4	pushq	%r14
000000000001adf6	pushq	%r15
000000000001adf8	subq	$0x10, %rsp
000000000001adfc	movss	%xmm0, (%rsp)
000000000001ae01	subq	$0x10, %rsp
000000000001ae05	movss	%xmm1, (%rsp)
000000000001ae0a	pushq	%rsi
000000000001ae0b	pushq	%rdi
000000000001ae0c	callq	__Z7getBasev ## getBase()
000000000001ae11	addq	$0x272e70, %rax
000000000001ae17	popq	%rdi
000000000001ae18	popq	%rsi
000000000001ae19	movss	(%rsp), %xmm1
000000000001ae1e	addq	$0x10, %rsp
000000000001ae22	movss	(%rsp), %xmm0
000000000001ae27	addq	$0x10, %rsp
000000000001ae2b	popq	%r15
000000000001ae2d	popq	%r14
000000000001ae2f	popq	%r13
000000000001ae31	popq	%r12
000000000001ae33	popq	%r11
000000000001ae35	popq	%r10
000000000001ae37	popq	%r9
000000000001ae39	popq	%r8
000000000001ae3b	popq	%rcx
000000000001ae3c	popq	%rdx
000000000001ae3d	popq	%rsi
000000000001ae3e	popq	%rdi
000000000001ae3f	popq	%rbx
000000000001ae40	popq	%rbp
000000000001ae41	jmpq	*%rax
__ZN7cocos2d7CCLayer26onEnterTransitionDidFinishEv:
000000000001ae43	pushq	%rbp
000000000001ae44	movq	%rsp, %rbp
000000000001ae47	pushq	%rbx
000000000001ae48	pushq	%rdi
000000000001ae49	pushq	%rsi
000000000001ae4a	pushq	%rdx
000000000001ae4b	pushq	%rcx
000000000001ae4c	pushq	%r8
000000000001ae4e	pushq	%r9
000000000001ae50	pushq	%r10
000000000001ae52	pushq	%r11
000000000001ae54	pushq	%r12
000000000001ae56	pushq	%r13
000000000001ae58	pushq	%r14
000000000001ae5a	pushq	%r15
000000000001ae5c	subq	$0x10, %rsp
000000000001ae60	movss	%xmm0, (%rsp)
000000000001ae65	subq	$0x10, %rsp
000000000001ae69	movss	%xmm1, (%rsp)
000000000001ae6e	pushq	%rsi
000000000001ae6f	pushq	%rdi
000000000001ae70	callq	__Z7getBasev ## getBase()
000000000001ae75	addq	$0x273490, %rax
000000000001ae7b	popq	%rdi
000000000001ae7c	popq	%rsi
000000000001ae7d	movss	(%rsp), %xmm1
000000000001ae82	addq	$0x10, %rsp
000000000001ae86	movss	(%rsp), %xmm0
000000000001ae8b	addq	$0x10, %rsp
000000000001ae8f	popq	%r15
000000000001ae91	popq	%r14
000000000001ae93	popq	%r13
000000000001ae95	popq	%r12
000000000001ae97	popq	%r11
000000000001ae99	popq	%r10
000000000001ae9b	popq	%r9
000000000001ae9d	popq	%r8
000000000001ae9f	popq	%rcx
000000000001aea0	popq	%rdx
000000000001aea1	popq	%rsi
000000000001aea2	popq	%rdi
000000000001aea3	popq	%rbx
000000000001aea4	popq	%rbp
000000000001aea5	jmpq	*%rax
__ZN7cocos2d7CCLayer26registerScriptTouchHandlerEibib:
000000000001aea7	pushq	%rbp
000000000001aea8	movq	%rsp, %rbp
000000000001aeab	pushq	%rbx
000000000001aeac	pushq	%rdi
000000000001aead	pushq	%rsi
000000000001aeae	pushq	%rdx
000000000001aeaf	pushq	%rcx
000000000001aeb0	pushq	%r8
000000000001aeb2	pushq	%r9
000000000001aeb4	pushq	%r10
000000000001aeb6	pushq	%r11
000000000001aeb8	pushq	%r12
000000000001aeba	pushq	%r13
000000000001aebc	pushq	%r14
000000000001aebe	pushq	%r15
000000000001aec0	subq	$0x10, %rsp
000000000001aec4	movss	%xmm0, (%rsp)
000000000001aec9	subq	$0x10, %rsp
000000000001aecd	movss	%xmm1, (%rsp)
000000000001aed2	pushq	%rsi
000000000001aed3	pushq	%rdi
000000000001aed4	callq	__Z7getBasev ## getBase()
000000000001aed9	addq	$0x272bd0, %rax
000000000001aedf	popq	%rdi
000000000001aee0	popq	%rsi
000000000001aee1	movss	(%rsp), %xmm1
000000000001aee6	addq	$0x10, %rsp
000000000001aeea	movss	(%rsp), %xmm0
000000000001aeef	addq	$0x10, %rsp
000000000001aef3	popq	%r15
000000000001aef5	popq	%r14
000000000001aef7	popq	%r13
000000000001aef9	popq	%r12
000000000001aefb	popq	%r11
000000000001aefd	popq	%r10
000000000001aeff	popq	%r9
000000000001af01	popq	%r8
000000000001af03	popq	%rcx
000000000001af04	popq	%rdx
000000000001af05	popq	%rsi
000000000001af06	popq	%rdi
000000000001af07	popq	%rbx
000000000001af08	popq	%rbp
000000000001af09	jmpq	*%rax
__ZN7cocos2d7CCLayer27registerWithTouchDispatcherEv:
000000000001af0b	pushq	%rbp
000000000001af0c	movq	%rsp, %rbp
000000000001af0f	pushq	%rbx
000000000001af10	pushq	%rdi
000000000001af11	pushq	%rsi
000000000001af12	pushq	%rdx
000000000001af13	pushq	%rcx
000000000001af14	pushq	%r8
000000000001af16	pushq	%r9
000000000001af18	pushq	%r10
000000000001af1a	pushq	%r11
000000000001af1c	pushq	%r12
000000000001af1e	pushq	%r13
000000000001af20	pushq	%r14
000000000001af22	pushq	%r15
000000000001af24	subq	$0x10, %rsp
000000000001af28	movss	%xmm0, (%rsp)
000000000001af2d	subq	$0x10, %rsp
000000000001af31	movss	%xmm1, (%rsp)
000000000001af36	pushq	%rsi
000000000001af37	pushq	%rdi
000000000001af38	callq	__Z7getBasev ## getBase()
000000000001af3d	addq	$0x272b40, %rax
000000000001af43	popq	%rdi
000000000001af44	popq	%rsi
000000000001af45	movss	(%rsp), %xmm1
000000000001af4a	addq	$0x10, %rsp
000000000001af4e	movss	(%rsp), %xmm0
000000000001af53	addq	$0x10, %rsp
000000000001af57	popq	%r15
000000000001af59	popq	%r14
000000000001af5b	popq	%r13
000000000001af5d	popq	%r12
000000000001af5f	popq	%r11
000000000001af61	popq	%r10
000000000001af63	popq	%r9
000000000001af65	popq	%r8
000000000001af67	popq	%rcx
000000000001af68	popq	%rdx
000000000001af69	popq	%rsi
000000000001af6a	popq	%rdi
000000000001af6b	popq	%rbx
000000000001af6c	popq	%rbp
000000000001af6d	jmpq	*%rax
__ZN7cocos2d7CCLayer28unregisterScriptTouchHandlerEv:
000000000001af6f	pushq	%rbp
000000000001af70	movq	%rsp, %rbp
000000000001af73	pushq	%rbx
000000000001af74	pushq	%rdi
000000000001af75	pushq	%rsi
000000000001af76	pushq	%rdx
000000000001af77	pushq	%rcx
000000000001af78	pushq	%r8
000000000001af7a	pushq	%r9
000000000001af7c	pushq	%r10
000000000001af7e	pushq	%r11
000000000001af80	pushq	%r12
000000000001af82	pushq	%r13
000000000001af84	pushq	%r14
000000000001af86	pushq	%r15
000000000001af88	subq	$0x10, %rsp
000000000001af8c	movss	%xmm0, (%rsp)
000000000001af91	subq	$0x10, %rsp
000000000001af95	movss	%xmm1, (%rsp)
000000000001af9a	pushq	%rsi
000000000001af9b	pushq	%rdi
000000000001af9c	callq	__Z7getBasev ## getBase()
000000000001afa1	addq	$0x272c30, %rax
000000000001afa7	popq	%rdi
000000000001afa8	popq	%rsi
000000000001afa9	movss	(%rsp), %xmm1
000000000001afae	addq	$0x10, %rsp
000000000001afb2	movss	(%rsp), %xmm0
000000000001afb7	addq	$0x10, %rsp
000000000001afbb	popq	%r15
000000000001afbd	popq	%r14
000000000001afbf	popq	%r13
000000000001afc1	popq	%r12
000000000001afc3	popq	%r11
000000000001afc5	popq	%r10
000000000001afc7	popq	%r9
000000000001afc9	popq	%r8
000000000001afcb	popq	%rcx
000000000001afcc	popq	%rdx
000000000001afcd	popq	%rsi
000000000001afce	popq	%rdi
000000000001afcf	popq	%rbx
000000000001afd0	popq	%rbp
000000000001afd1	jmpq	*%rax
__ZN7cocos2d7CCLayer6createEv:
000000000001afd3	pushq	%rbp
000000000001afd4	movq	%rsp, %rbp
000000000001afd7	pushq	%rbx
000000000001afd8	pushq	%rdi
000000000001afd9	pushq	%rsi
000000000001afda	pushq	%rdx
000000000001afdb	pushq	%rcx
000000000001afdc	pushq	%r8
000000000001afde	pushq	%r9
000000000001afe0	pushq	%r10
000000000001afe2	pushq	%r11
000000000001afe4	pushq	%r12
000000000001afe6	pushq	%r13
000000000001afe8	pushq	%r14
000000000001afea	pushq	%r15
000000000001afec	subq	$0x10, %rsp
000000000001aff0	movss	%xmm0, (%rsp)
000000000001aff5	subq	$0x10, %rsp
000000000001aff9	movss	%xmm1, (%rsp)
000000000001affe	pushq	%rsi
000000000001afff	pushq	%rdi
000000000001b000	callq	__Z7getBasev ## getBase()
000000000001b005	addq	$0x272a00, %rax
000000000001b00b	popq	%rdi
000000000001b00c	popq	%rsi
000000000001b00d	movss	(%rsp), %xmm1
000000000001b012	addq	$0x10, %rsp
000000000001b016	movss	(%rsp), %xmm0
000000000001b01b	addq	$0x10, %rsp
000000000001b01f	popq	%r15
000000000001b021	popq	%r14
000000000001b023	popq	%r13
000000000001b025	popq	%r12
000000000001b027	popq	%r11
000000000001b029	popq	%r10
000000000001b02b	popq	%r9
000000000001b02d	popq	%r8
000000000001b02f	popq	%rcx
000000000001b030	popq	%rdx
000000000001b031	popq	%rsi
000000000001b032	popq	%rdi
000000000001b033	popq	%rbx
000000000001b034	popq	%rbp
000000000001b035	jmpq	*%rax
__ZN7cocos2d7CCLayer6onExitEv:
000000000001b037	pushq	%rbp
000000000001b038	movq	%rsp, %rbp
000000000001b03b	pushq	%rbx
000000000001b03c	pushq	%rdi
000000000001b03d	pushq	%rsi
000000000001b03e	pushq	%rdx
000000000001b03f	pushq	%rcx
000000000001b040	pushq	%r8
000000000001b042	pushq	%r9
000000000001b044	pushq	%r10
000000000001b046	pushq	%r11
000000000001b048	pushq	%r12
000000000001b04a	pushq	%r13
000000000001b04c	pushq	%r14
000000000001b04e	pushq	%r15
000000000001b050	subq	$0x10, %rsp
000000000001b054	movss	%xmm0, (%rsp)
000000000001b059	subq	$0x10, %rsp
000000000001b05d	movss	%xmm1, (%rsp)
000000000001b062	pushq	%rsi
000000000001b063	pushq	%rdi
000000000001b064	callq	__Z7getBasev ## getBase()
000000000001b069	addq	$0x2733c0, %rax
000000000001b06f	popq	%rdi
000000000001b070	popq	%rsi
000000000001b071	movss	(%rsp), %xmm1
000000000001b076	addq	$0x10, %rsp
000000000001b07a	movss	(%rsp), %xmm0
000000000001b07f	addq	$0x10, %rsp
000000000001b083	popq	%r15
000000000001b085	popq	%r14
000000000001b087	popq	%r13
000000000001b089	popq	%r12
000000000001b08b	popq	%r11
000000000001b08d	popq	%r10
000000000001b08f	popq	%r9
000000000001b091	popq	%r8
000000000001b093	popq	%rcx
000000000001b094	popq	%rdx
000000000001b095	popq	%rsi
000000000001b096	popq	%rdi
000000000001b097	popq	%rbx
000000000001b098	popq	%rbp
000000000001b099	jmpq	*%rax
__ZN7cocos2d7CCLayer7keyDownENS_12enumKeyCodesE:
000000000001b09b	pushq	%rbp
000000000001b09c	movq	%rsp, %rbp
000000000001b09f	pushq	%rbx
000000000001b0a0	pushq	%rdi
000000000001b0a1	pushq	%rsi
000000000001b0a2	pushq	%rdx
000000000001b0a3	pushq	%rcx
000000000001b0a4	pushq	%r8
000000000001b0a6	pushq	%r9
000000000001b0a8	pushq	%r10
000000000001b0aa	pushq	%r11
000000000001b0ac	pushq	%r12
000000000001b0ae	pushq	%r13
000000000001b0b0	pushq	%r14
000000000001b0b2	pushq	%r15
000000000001b0b4	subq	$0x10, %rsp
000000000001b0b8	movss	%xmm0, (%rsp)
000000000001b0bd	subq	$0x10, %rsp
000000000001b0c1	movss	%xmm1, (%rsp)
000000000001b0c6	pushq	%rsi
000000000001b0c7	pushq	%rdi
000000000001b0c8	callq	__Z7getBasev ## getBase()
000000000001b0cd	addq	$0x273280, %rax
000000000001b0d3	popq	%rdi
000000000001b0d4	popq	%rsi
000000000001b0d5	movss	(%rsp), %xmm1
000000000001b0da	addq	$0x10, %rsp
000000000001b0de	movss	(%rsp), %xmm0
000000000001b0e3	addq	$0x10, %rsp
000000000001b0e7	popq	%r15
000000000001b0e9	popq	%r14
000000000001b0eb	popq	%r13
000000000001b0ed	popq	%r12
000000000001b0ef	popq	%r11
000000000001b0f1	popq	%r10
000000000001b0f3	popq	%r9
000000000001b0f5	popq	%r8
000000000001b0f7	popq	%rcx
000000000001b0f8	popq	%rdx
000000000001b0f9	popq	%rsi
000000000001b0fa	popq	%rdi
000000000001b0fb	popq	%rbx
000000000001b0fc	popq	%rbp
000000000001b0fd	jmpq	*%rax
__ZN7cocos2d7CCLayer7onEnterEv:
000000000001b0ff	pushq	%rbp
000000000001b100	movq	%rsp, %rbp
000000000001b103	pushq	%rbx
000000000001b104	pushq	%rdi
000000000001b105	pushq	%rsi
000000000001b106	pushq	%rdx
000000000001b107	pushq	%rcx
000000000001b108	pushq	%r8
000000000001b10a	pushq	%r9
000000000001b10c	pushq	%r10
000000000001b10e	pushq	%r11
000000000001b110	pushq	%r12
000000000001b112	pushq	%r13
000000000001b114	pushq	%r14
000000000001b116	pushq	%r15
000000000001b118	subq	$0x10, %rsp
000000000001b11c	movss	%xmm0, (%rsp)
000000000001b121	subq	$0x10, %rsp
000000000001b125	movss	%xmm1, (%rsp)
000000000001b12a	pushq	%rsi
000000000001b12b	pushq	%rdi
000000000001b12c	callq	__Z7getBasev ## getBase()
000000000001b131	addq	$0x273300, %rax
000000000001b137	popq	%rdi
000000000001b138	popq	%rsi
000000000001b139	movss	(%rsp), %xmm1
000000000001b13e	addq	$0x10, %rsp
000000000001b142	movss	(%rsp), %xmm0
000000000001b147	addq	$0x10, %rsp
000000000001b14b	popq	%r15
000000000001b14d	popq	%r14
000000000001b14f	popq	%r13
000000000001b151	popq	%r12
000000000001b153	popq	%r11
000000000001b155	popq	%r10
000000000001b157	popq	%r9
000000000001b159	popq	%r8
000000000001b15b	popq	%rcx
000000000001b15c	popq	%rdx
000000000001b15d	popq	%rsi
000000000001b15e	popq	%rdi
000000000001b15f	popq	%rbx
000000000001b160	popq	%rbp
000000000001b161	jmpq	*%rax
__ZN7cocos2d7CCPoint6equalsEPvRKS0_:
000000000001b163	pushq	%rbp
000000000001b164	movq	%rsp, %rbp
000000000001b167	pushq	%rbx
000000000001b168	pushq	%rdi
000000000001b169	pushq	%rsi
000000000001b16a	pushq	%rdx
000000000001b16b	pushq	%rcx
000000000001b16c	pushq	%r8
000000000001b16e	pushq	%r9
000000000001b170	pushq	%r10
000000000001b172	pushq	%r11
000000000001b174	pushq	%r12
000000000001b176	pushq	%r13
000000000001b178	pushq	%r14
000000000001b17a	pushq	%r15
000000000001b17c	subq	$0x10, %rsp
000000000001b180	movss	%xmm0, (%rsp)
000000000001b185	subq	$0x10, %rsp
000000000001b189	movss	%xmm1, (%rsp)
000000000001b18e	pushq	%rsi
000000000001b18f	pushq	%rdi
000000000001b190	callq	__Z7getBasev ## getBase()
000000000001b195	addq	$0x1371d0, %rax
000000000001b19b	popq	%rdi
000000000001b19c	popq	%rsi
000000000001b19d	movss	(%rsp), %xmm1
000000000001b1a2	addq	$0x10, %rsp
000000000001b1a6	movss	(%rsp), %xmm0
000000000001b1ab	addq	$0x10, %rsp
000000000001b1af	popq	%r15
000000000001b1b1	popq	%r14
000000000001b1b3	popq	%r13
000000000001b1b5	popq	%r12
000000000001b1b7	popq	%r11
000000000001b1b9	popq	%r10
000000000001b1bb	popq	%r9
000000000001b1bd	popq	%r8
000000000001b1bf	popq	%rcx
000000000001b1c0	popq	%rdx
000000000001b1c1	popq	%rsi
000000000001b1c2	popq	%rdi
000000000001b1c3	popq	%rbx
000000000001b1c4	popq	%rbp
000000000001b1c5	jmpq	*%rax
__ZN7cocos2d7CCPointaSERKS0_:
000000000001b1c7	pushq	%rbp
000000000001b1c8	movq	%rsp, %rbp
000000000001b1cb	pushq	%rbx
000000000001b1cc	pushq	%rdi
000000000001b1cd	pushq	%rsi
000000000001b1ce	pushq	%rdx
000000000001b1cf	pushq	%rcx
000000000001b1d0	pushq	%r8
000000000001b1d2	pushq	%r9
000000000001b1d4	pushq	%r10
000000000001b1d6	pushq	%r11
000000000001b1d8	pushq	%r12
000000000001b1da	pushq	%r13
000000000001b1dc	pushq	%r14
000000000001b1de	pushq	%r15
000000000001b1e0	subq	$0x10, %rsp
000000000001b1e4	movss	%xmm0, (%rsp)
000000000001b1e9	subq	$0x10, %rsp
000000000001b1ed	movss	%xmm1, (%rsp)
000000000001b1f2	pushq	%rsi
000000000001b1f3	pushq	%rdi
000000000001b1f4	callq	__Z7getBasev ## getBase()
000000000001b1f9	addq	$0x1370c0, %rax
000000000001b1ff	popq	%rdi
000000000001b200	popq	%rsi
000000000001b201	movss	(%rsp), %xmm1
000000000001b206	addq	$0x10, %rsp
000000000001b20a	movss	(%rsp), %xmm0
000000000001b20f	addq	$0x10, %rsp
000000000001b213	popq	%r15
000000000001b215	popq	%r14
000000000001b217	popq	%r13
000000000001b219	popq	%r12
000000000001b21b	popq	%r11
000000000001b21d	popq	%r10
000000000001b21f	popq	%r9
000000000001b221	popq	%r8
000000000001b223	popq	%rcx
000000000001b224	popq	%rdx
000000000001b225	popq	%rsi
000000000001b226	popq	%rdi
000000000001b227	popq	%rbx
000000000001b228	popq	%rbp
000000000001b229	jmpq	*%rax
__ZN7cocos2d7CCPointC1Eff:
000000000001b22b	pushq	%rbp
000000000001b22c	movq	%rsp, %rbp
000000000001b22f	pushq	%rbx
000000000001b230	pushq	%rdi
000000000001b231	pushq	%rsi
000000000001b232	pushq	%rdx
000000000001b233	pushq	%rcx
000000000001b234	pushq	%r8
000000000001b236	pushq	%r9
000000000001b238	pushq	%r10
000000000001b23a	pushq	%r11
000000000001b23c	pushq	%r12
000000000001b23e	pushq	%r13
000000000001b240	pushq	%r14
000000000001b242	pushq	%r15
000000000001b244	subq	$0x10, %rsp
000000000001b248	movss	%xmm0, (%rsp)
000000000001b24d	subq	$0x10, %rsp
000000000001b251	movss	%xmm1, (%rsp)
000000000001b256	pushq	%rsi
000000000001b257	pushq	%rdi
000000000001b258	callq	__Z7getBasev ## getBase()
000000000001b25d	addq	$0x137000, %rax
000000000001b263	popq	%rdi
000000000001b264	popq	%rsi
000000000001b265	movss	(%rsp), %xmm1
000000000001b26a	addq	$0x10, %rsp
000000000001b26e	movss	(%rsp), %xmm0
000000000001b273	addq	$0x10, %rsp
000000000001b277	popq	%r15
000000000001b279	popq	%r14
000000000001b27b	popq	%r13
000000000001b27d	popq	%r12
000000000001b27f	popq	%r11
000000000001b281	popq	%r10
000000000001b283	popq	%r9
000000000001b285	popq	%r8
000000000001b287	popq	%rcx
000000000001b288	popq	%rdx
000000000001b289	popq	%rsi
000000000001b28a	popq	%rdi
000000000001b28b	popq	%rbx
000000000001b28c	popq	%rbp
000000000001b28d	jmpq	*%rax
__ZN7cocos2d7CCPointC1Ev:
000000000001b28f	pushq	%rbp
000000000001b290	movq	%rsp, %rbp
000000000001b293	pushq	%rbx
000000000001b294	pushq	%rdi
000000000001b295	pushq	%rsi
000000000001b296	pushq	%rdx
000000000001b297	pushq	%rcx
000000000001b298	pushq	%r8
000000000001b29a	pushq	%r9
000000000001b29c	pushq	%r10
000000000001b29e	pushq	%r11
000000000001b2a0	pushq	%r12
000000000001b2a2	pushq	%r13
000000000001b2a4	pushq	%r14
000000000001b2a6	pushq	%r15
000000000001b2a8	subq	$0x10, %rsp
000000000001b2ac	movss	%xmm0, (%rsp)
000000000001b2b1	subq	$0x10, %rsp
000000000001b2b5	movss	%xmm1, (%rsp)
000000000001b2ba	pushq	%rsi
000000000001b2bb	pushq	%rdi
000000000001b2bc	callq	__Z7getBasev ## getBase()
000000000001b2c1	addq	$0x137060, %rax
000000000001b2c7	popq	%rdi
000000000001b2c8	popq	%rsi
000000000001b2c9	movss	(%rsp), %xmm1
000000000001b2ce	addq	$0x10, %rsp
000000000001b2d2	movss	(%rsp), %xmm0
000000000001b2d7	addq	$0x10, %rsp
000000000001b2db	popq	%r15
000000000001b2dd	popq	%r14
000000000001b2df	popq	%r13
000000000001b2e1	popq	%r12
000000000001b2e3	popq	%r11
000000000001b2e5	popq	%r10
000000000001b2e7	popq	%r9
000000000001b2e9	popq	%r8
000000000001b2eb	popq	%rcx
000000000001b2ec	popq	%rdx
000000000001b2ed	popq	%rsi
000000000001b2ee	popq	%rdi
000000000001b2ef	popq	%rbx
000000000001b2f0	popq	%rbp
000000000001b2f1	jmpq	*%rax
__ZN7cocos2d7CCPointC2ERKS0_:
000000000001b2f3	pushq	%rbp
000000000001b2f4	movq	%rsp, %rbp
000000000001b2f7	pushq	%rbx
000000000001b2f8	pushq	%rdi
000000000001b2f9	pushq	%rsi
000000000001b2fa	pushq	%rdx
000000000001b2fb	pushq	%rcx
000000000001b2fc	pushq	%r8
000000000001b2fe	pushq	%r9
000000000001b300	pushq	%r10
000000000001b302	pushq	%r11
000000000001b304	pushq	%r12
000000000001b306	pushq	%r13
000000000001b308	pushq	%r14
000000000001b30a	pushq	%r15
000000000001b30c	subq	$0x10, %rsp
000000000001b310	movss	%xmm0, (%rsp)
000000000001b315	subq	$0x10, %rsp
000000000001b319	movss	%xmm1, (%rsp)
000000000001b31e	pushq	%rsi
000000000001b31f	pushq	%rdi
000000000001b320	callq	__Z7getBasev ## getBase()
000000000001b325	addq	$0x137090, %rax
000000000001b32b	popq	%rdi
000000000001b32c	popq	%rsi
000000000001b32d	movss	(%rsp), %xmm1
000000000001b332	addq	$0x10, %rsp
000000000001b336	movss	(%rsp), %xmm0
000000000001b33b	addq	$0x10, %rsp
000000000001b33f	popq	%r15
000000000001b341	popq	%r14
000000000001b343	popq	%r13
000000000001b345	popq	%r12
000000000001b347	popq	%r11
000000000001b349	popq	%r10
000000000001b34b	popq	%r9
000000000001b34d	popq	%r8
000000000001b34f	popq	%rcx
000000000001b350	popq	%rdx
000000000001b351	popq	%rsi
000000000001b352	popq	%rdi
000000000001b353	popq	%rbx
000000000001b354	popq	%rbp
000000000001b355	jmpq	*%rax
__ZN7cocos2d7CCPointC1ERKS0_:
000000000001b357	pushq	%rbp
000000000001b358	movq	%rsp, %rbp
000000000001b35b	pushq	%rbx
000000000001b35c	pushq	%rdi
000000000001b35d	pushq	%rsi
000000000001b35e	pushq	%rdx
000000000001b35f	pushq	%rcx
000000000001b360	pushq	%r8
000000000001b362	pushq	%r9
000000000001b364	pushq	%r10
000000000001b366	pushq	%r11
000000000001b368	pushq	%r12
000000000001b36a	pushq	%r13
000000000001b36c	pushq	%r14
000000000001b36e	pushq	%r15
000000000001b370	subq	$0x10, %rsp
000000000001b374	movss	%xmm0, (%rsp)
000000000001b379	subq	$0x10, %rsp
000000000001b37d	movss	%xmm1, (%rsp)
000000000001b382	pushq	%rsi
000000000001b383	pushq	%rdi
000000000001b384	callq	__Z7getBasev ## getBase()
000000000001b389	addq	$0x137090, %rax
000000000001b38f	popq	%rdi
000000000001b390	popq	%rsi
000000000001b391	movss	(%rsp), %xmm1
000000000001b396	addq	$0x10, %rsp
000000000001b39a	movss	(%rsp), %xmm0
000000000001b39f	addq	$0x10, %rsp
000000000001b3a3	popq	%r15
000000000001b3a5	popq	%r14
000000000001b3a7	popq	%r13
000000000001b3a9	popq	%r12
000000000001b3ab	popq	%r11
000000000001b3ad	popq	%r10
000000000001b3af	popq	%r9
000000000001b3b1	popq	%r8
000000000001b3b3	popq	%rcx
000000000001b3b4	popq	%rdx
000000000001b3b5	popq	%rsi
000000000001b3b6	popq	%rdi
000000000001b3b7	popq	%rbx
000000000001b3b8	popq	%rbp
000000000001b3b9	jmpq	*%rax
__ZN7cocos2d7CCPointmiERKS0_:
000000000001b3bb	pushq	%rbp
000000000001b3bc	movq	%rsp, %rbp
000000000001b3bf	pushq	%rbx
000000000001b3c0	pushq	%rdi
000000000001b3c1	pushq	%rsi
000000000001b3c2	pushq	%rdx
000000000001b3c3	pushq	%rcx
000000000001b3c4	pushq	%r8
000000000001b3c6	pushq	%r9
000000000001b3c8	pushq	%r10
000000000001b3ca	pushq	%r11
000000000001b3cc	pushq	%r12
000000000001b3ce	pushq	%r13
000000000001b3d0	pushq	%r14
000000000001b3d2	pushq	%r15
000000000001b3d4	subq	$0x10, %rsp
000000000001b3d8	movss	%xmm0, (%rsp)
000000000001b3dd	subq	$0x10, %rsp
000000000001b3e1	movss	%xmm1, (%rsp)
000000000001b3e6	pushq	%rsi
000000000001b3e7	pushq	%rdi
000000000001b3e8	callq	__Z7getBasev ## getBase()
000000000001b3ed	addq	$0x137120, %rax
000000000001b3f3	popq	%rdi
000000000001b3f4	popq	%rsi
000000000001b3f5	movss	(%rsp), %xmm1
000000000001b3fa	addq	$0x10, %rsp
000000000001b3fe	movss	(%rsp), %xmm0
000000000001b403	addq	$0x10, %rsp
000000000001b407	popq	%r15
000000000001b409	popq	%r14
000000000001b40b	popq	%r13
000000000001b40d	popq	%r12
000000000001b40f	popq	%r11
000000000001b411	popq	%r10
000000000001b413	popq	%r9
000000000001b415	popq	%r8
000000000001b417	popq	%rcx
000000000001b418	popq	%rdx
000000000001b419	popq	%rsi
000000000001b41a	popq	%rdi
000000000001b41b	popq	%rbx
000000000001b41c	popq	%rbp
000000000001b41d	jmpq	*%rax
__ZN7cocos2d8CCObject11autoreleaseEv:
000000000001b41f	pushq	%rbp
000000000001b420	movq	%rsp, %rbp
000000000001b423	pushq	%rbx
000000000001b424	pushq	%rdi
000000000001b425	pushq	%rsi
000000000001b426	pushq	%rdx
000000000001b427	pushq	%rcx
000000000001b428	pushq	%r8
000000000001b42a	pushq	%r9
000000000001b42c	pushq	%r10
000000000001b42e	pushq	%r11
000000000001b430	pushq	%r12
000000000001b432	pushq	%r13
000000000001b434	pushq	%r14
000000000001b436	pushq	%r15
000000000001b438	subq	$0x10, %rsp
000000000001b43c	movss	%xmm0, (%rsp)
000000000001b441	subq	$0x10, %rsp
000000000001b445	movss	%xmm1, (%rsp)
000000000001b44a	pushq	%rsi
000000000001b44b	pushq	%rdi
000000000001b44c	callq	__Z7getBasev ## getBase()
000000000001b451	addq	$0x250ed0, %rax
000000000001b457	popq	%rdi
000000000001b458	popq	%rsi
000000000001b459	movss	(%rsp), %xmm1
000000000001b45e	addq	$0x10, %rsp
000000000001b462	movss	(%rsp), %xmm0
000000000001b467	addq	$0x10, %rsp
000000000001b46b	popq	%r15
000000000001b46d	popq	%r14
000000000001b46f	popq	%r13
000000000001b471	popq	%r12
000000000001b473	popq	%r11
000000000001b475	popq	%r10
000000000001b477	popq	%r9
000000000001b479	popq	%r8
000000000001b47b	popq	%rcx
000000000001b47c	popq	%rdx
000000000001b47d	popq	%rsi
000000000001b47e	popq	%rdi
000000000001b47f	popq	%rbx
000000000001b480	popq	%rbp
000000000001b481	jmpq	*%rax
__ZN7cocos2d8CCObject13acceptVisitorERNS_13CCDataVisitorE:
000000000001b483	pushq	%rbp
000000000001b484	movq	%rsp, %rbp
000000000001b487	pushq	%rbx
000000000001b488	pushq	%rdi
000000000001b489	pushq	%rsi
000000000001b48a	pushq	%rdx
000000000001b48b	pushq	%rcx
000000000001b48c	pushq	%r8
000000000001b48e	pushq	%r9
000000000001b490	pushq	%r10
000000000001b492	pushq	%r11
000000000001b494	pushq	%r12
000000000001b496	pushq	%r13
000000000001b498	pushq	%r14
000000000001b49a	pushq	%r15
000000000001b49c	subq	$0x10, %rsp
000000000001b4a0	movss	%xmm0, (%rsp)
000000000001b4a5	subq	$0x10, %rsp
000000000001b4a9	movss	%xmm1, (%rsp)
000000000001b4ae	pushq	%rsi
000000000001b4af	pushq	%rdi
000000000001b4b0	callq	__Z7getBasev ## getBase()
000000000001b4b5	addq	$0x250f30, %rax
000000000001b4bb	popq	%rdi
000000000001b4bc	popq	%rsi
000000000001b4bd	movss	(%rsp), %xmm1
000000000001b4c2	addq	$0x10, %rsp
000000000001b4c6	movss	(%rsp), %xmm0
000000000001b4cb	addq	$0x10, %rsp
000000000001b4cf	popq	%r15
000000000001b4d1	popq	%r14
000000000001b4d3	popq	%r13
000000000001b4d5	popq	%r12
000000000001b4d7	popq	%r11
000000000001b4d9	popq	%r10
000000000001b4db	popq	%r9
000000000001b4dd	popq	%r8
000000000001b4df	popq	%rcx
000000000001b4e0	popq	%rdx
000000000001b4e1	popq	%rsi
000000000001b4e2	popq	%rdi
000000000001b4e3	popq	%rbx
000000000001b4e4	popq	%rbp
000000000001b4e5	jmpq	*%rax
__ZN7cocos2d8CCObject15encodeWithCoderEP13DS_Dictionary:
000000000001b4e7	pushq	%rbp
000000000001b4e8	movq	%rsp, %rbp
000000000001b4eb	pushq	%rbx
000000000001b4ec	pushq	%rdi
000000000001b4ed	pushq	%rsi
000000000001b4ee	pushq	%rdx
000000000001b4ef	pushq	%rcx
000000000001b4f0	pushq	%r8
000000000001b4f2	pushq	%r9
000000000001b4f4	pushq	%r10
000000000001b4f6	pushq	%r11
000000000001b4f8	pushq	%r12
000000000001b4fa	pushq	%r13
000000000001b4fc	pushq	%r14
000000000001b4fe	pushq	%r15
000000000001b500	subq	$0x10, %rsp
000000000001b504	movss	%xmm0, (%rsp)
000000000001b509	subq	$0x10, %rsp
000000000001b50d	movss	%xmm1, (%rsp)
000000000001b512	pushq	%rsi
000000000001b513	pushq	%rdi
000000000001b514	callq	__Z7getBasev ## getBase()
000000000001b519	addq	$0x250f70, %rax
000000000001b51f	popq	%rdi
000000000001b520	popq	%rsi
000000000001b521	movss	(%rsp), %xmm1
000000000001b526	addq	$0x10, %rsp
000000000001b52a	movss	(%rsp), %xmm0
000000000001b52f	addq	$0x10, %rsp
000000000001b533	popq	%r15
000000000001b535	popq	%r14
000000000001b537	popq	%r13
000000000001b539	popq	%r12
000000000001b53b	popq	%r11
000000000001b53d	popq	%r10
000000000001b53f	popq	%r9
000000000001b541	popq	%r8
000000000001b543	popq	%rcx
000000000001b544	popq	%rdx
000000000001b545	popq	%rsi
000000000001b546	popq	%rdi
000000000001b547	popq	%rbx
000000000001b548	popq	%rbp
000000000001b549	jmpq	*%rax
__ZN7cocos2d8CCObject6retainEv:
000000000001b54b	pushq	%rbp
000000000001b54c	movq	%rsp, %rbp
000000000001b54f	pushq	%rbx
000000000001b550	pushq	%rdi
000000000001b551	pushq	%rsi
000000000001b552	pushq	%rdx
000000000001b553	pushq	%rcx
000000000001b554	pushq	%r8
000000000001b556	pushq	%r9
000000000001b558	pushq	%r10
000000000001b55a	pushq	%r11
000000000001b55c	pushq	%r12
000000000001b55e	pushq	%r13
000000000001b560	pushq	%r14
000000000001b562	pushq	%r15
000000000001b564	subq	$0x10, %rsp
000000000001b568	movss	%xmm0, (%rsp)
000000000001b56d	subq	$0x10, %rsp
000000000001b571	movss	%xmm1, (%rsp)
000000000001b576	pushq	%rsi
000000000001b577	pushq	%rdi
000000000001b578	callq	__Z7getBasev ## getBase()
000000000001b57d	addq	$0x250ec0, %rax
000000000001b583	popq	%rdi
000000000001b584	popq	%rsi
000000000001b585	movss	(%rsp), %xmm1
000000000001b58a	addq	$0x10, %rsp
000000000001b58e	movss	(%rsp), %xmm0
000000000001b593	addq	$0x10, %rsp
000000000001b597	popq	%r15
000000000001b599	popq	%r14
000000000001b59b	popq	%r13
000000000001b59d	popq	%r12
000000000001b59f	popq	%r11
000000000001b5a1	popq	%r10
000000000001b5a3	popq	%r9
000000000001b5a5	popq	%r8
000000000001b5a7	popq	%rcx
000000000001b5a8	popq	%rdx
000000000001b5a9	popq	%rsi
000000000001b5aa	popq	%rdi
000000000001b5ab	popq	%rbx
000000000001b5ac	popq	%rbp
000000000001b5ad	jmpq	*%rax
__ZN7cocos2d8CCObject6setTagEi:
000000000001b5af	pushq	%rbp
000000000001b5b0	movq	%rsp, %rbp
000000000001b5b3	pushq	%rbx
000000000001b5b4	pushq	%rdi
000000000001b5b5	pushq	%rsi
000000000001b5b6	pushq	%rdx
000000000001b5b7	pushq	%rcx
000000000001b5b8	pushq	%r8
000000000001b5ba	pushq	%r9
000000000001b5bc	pushq	%r10
000000000001b5be	pushq	%r11
000000000001b5c0	pushq	%r12
000000000001b5c2	pushq	%r13
000000000001b5c4	pushq	%r14
000000000001b5c6	pushq	%r15
000000000001b5c8	subq	$0x10, %rsp
000000000001b5cc	movss	%xmm0, (%rsp)
000000000001b5d1	subq	$0x10, %rsp
000000000001b5d5	movss	%xmm1, (%rsp)
000000000001b5da	pushq	%rsi
000000000001b5db	pushq	%rdi
000000000001b5dc	callq	__Z7getBasev ## getBase()
000000000001b5e1	addq	$0x250f60, %rax
000000000001b5e7	popq	%rdi
000000000001b5e8	popq	%rsi
000000000001b5e9	movss	(%rsp), %xmm1
000000000001b5ee	addq	$0x10, %rsp
000000000001b5f2	movss	(%rsp), %xmm0
000000000001b5f7	addq	$0x10, %rsp
000000000001b5fb	popq	%r15
000000000001b5fd	popq	%r14
000000000001b5ff	popq	%r13
000000000001b601	popq	%r12
000000000001b603	popq	%r11
000000000001b605	popq	%r10
000000000001b607	popq	%r9
000000000001b609	popq	%r8
000000000001b60b	popq	%rcx
000000000001b60c	popq	%rdx
000000000001b60d	popq	%rsi
000000000001b60e	popq	%rdi
000000000001b60f	popq	%rbx
000000000001b610	popq	%rbp
000000000001b611	jmpq	*%rax
__ZN7cocos2d8CCObject7isEqualEPKS0_:
000000000001b613	pushq	%rbp
000000000001b614	movq	%rsp, %rbp
000000000001b617	pushq	%rbx
000000000001b618	pushq	%rdi
000000000001b619	pushq	%rsi
000000000001b61a	pushq	%rdx
000000000001b61b	pushq	%rcx
000000000001b61c	pushq	%r8
000000000001b61e	pushq	%r9
000000000001b620	pushq	%r10
000000000001b622	pushq	%r11
000000000001b624	pushq	%r12
000000000001b626	pushq	%r13
000000000001b628	pushq	%r14
000000000001b62a	pushq	%r15
000000000001b62c	subq	$0x10, %rsp
000000000001b630	movss	%xmm0, (%rsp)
000000000001b635	subq	$0x10, %rsp
000000000001b639	movss	%xmm1, (%rsp)
000000000001b63e	pushq	%rsi
000000000001b63f	pushq	%rdi
000000000001b640	callq	__Z7getBasev ## getBase()
000000000001b645	addq	$0x250f20, %rax
000000000001b64b	popq	%rdi
000000000001b64c	popq	%rsi
000000000001b64d	movss	(%rsp), %xmm1
000000000001b652	addq	$0x10, %rsp
000000000001b656	movss	(%rsp), %xmm0
000000000001b65b	addq	$0x10, %rsp
000000000001b65f	popq	%r15
000000000001b661	popq	%r14
000000000001b663	popq	%r13
000000000001b665	popq	%r12
000000000001b667	popq	%r11
000000000001b669	popq	%r10
000000000001b66b	popq	%r9
000000000001b66d	popq	%r8
000000000001b66f	popq	%rcx
000000000001b670	popq	%rdx
000000000001b671	popq	%rsi
000000000001b672	popq	%rdi
000000000001b673	popq	%rbx
000000000001b674	popq	%rbp
000000000001b675	jmpq	*%rax
__ZN7cocos2d8CCObject9canEncodeEv:
000000000001b677	pushq	%rbp
000000000001b678	movq	%rsp, %rbp
000000000001b67b	pushq	%rbx
000000000001b67c	pushq	%rdi
000000000001b67d	pushq	%rsi
000000000001b67e	pushq	%rdx
000000000001b67f	pushq	%rcx
000000000001b680	pushq	%r8
000000000001b682	pushq	%r9
000000000001b684	pushq	%r10
000000000001b686	pushq	%r11
000000000001b688	pushq	%r12
000000000001b68a	pushq	%r13
000000000001b68c	pushq	%r14
000000000001b68e	pushq	%r15
000000000001b690	subq	$0x10, %rsp
000000000001b694	movss	%xmm0, (%rsp)
000000000001b699	subq	$0x10, %rsp
000000000001b69d	movss	%xmm1, (%rsp)
000000000001b6a2	pushq	%rsi
000000000001b6a3	pushq	%rdi
000000000001b6a4	callq	__Z7getBasev ## getBase()
000000000001b6a9	addq	$0x250f90, %rax
000000000001b6af	popq	%rdi
000000000001b6b0	popq	%rsi
000000000001b6b1	movss	(%rsp), %xmm1
000000000001b6b6	addq	$0x10, %rsp
000000000001b6ba	movss	(%rsp), %xmm0
000000000001b6bf	addq	$0x10, %rsp
000000000001b6c3	popq	%r15
000000000001b6c5	popq	%r14
000000000001b6c7	popq	%r13
000000000001b6c9	popq	%r12
000000000001b6cb	popq	%r11
000000000001b6cd	popq	%r10
000000000001b6cf	popq	%r9
000000000001b6d1	popq	%r8
000000000001b6d3	popq	%rcx
000000000001b6d4	popq	%rdx
000000000001b6d5	popq	%rsi
000000000001b6d6	popq	%rdi
000000000001b6d7	popq	%rbx
000000000001b6d8	popq	%rbp
000000000001b6d9	jmpq	*%rax
__ZN7cocos2d8CCObjectC1Ev:
000000000001b6db	pushq	%rbp
000000000001b6dc	movq	%rsp, %rbp
000000000001b6df	pushq	%rbx
000000000001b6e0	pushq	%rdi
000000000001b6e1	pushq	%rsi
000000000001b6e2	pushq	%rdx
000000000001b6e3	pushq	%rcx
000000000001b6e4	pushq	%r8
000000000001b6e6	pushq	%r9
000000000001b6e8	pushq	%r10
000000000001b6ea	pushq	%r11
000000000001b6ec	pushq	%r12
000000000001b6ee	pushq	%r13
000000000001b6f0	pushq	%r14
000000000001b6f2	pushq	%r15
000000000001b6f4	subq	$0x10, %rsp
000000000001b6f8	movss	%xmm0, (%rsp)
000000000001b6fd	subq	$0x10, %rsp
000000000001b701	movss	%xmm1, (%rsp)
000000000001b706	pushq	%rsi
000000000001b707	pushq	%rdi
000000000001b708	callq	__Z7getBasev ## getBase()
000000000001b70d	addq	$0x250ca0, %rax
000000000001b713	popq	%rdi
000000000001b714	popq	%rsi
000000000001b715	movss	(%rsp), %xmm1
000000000001b71a	addq	$0x10, %rsp
000000000001b71e	movss	(%rsp), %xmm0
000000000001b723	addq	$0x10, %rsp
000000000001b727	popq	%r15
000000000001b729	popq	%r14
000000000001b72b	popq	%r13
000000000001b72d	popq	%r12
000000000001b72f	popq	%r11
000000000001b731	popq	%r10
000000000001b733	popq	%r9
000000000001b735	popq	%r8
000000000001b737	popq	%rcx
000000000001b738	popq	%rdx
000000000001b739	popq	%rsi
000000000001b73a	popq	%rdi
000000000001b73b	popq	%rbx
000000000001b73c	popq	%rbp
000000000001b73d	jmpq	*%rax
__ZN7cocos2d8CCObjectD1Ev:
000000000001b73f	pushq	%rbp
000000000001b740	movq	%rsp, %rbp
000000000001b743	pushq	%rbx
000000000001b744	pushq	%rdi
000000000001b745	pushq	%rsi
000000000001b746	pushq	%rdx
000000000001b747	pushq	%rcx
000000000001b748	pushq	%r8
000000000001b74a	pushq	%r9
000000000001b74c	pushq	%r10
000000000001b74e	pushq	%r11
000000000001b750	pushq	%r12
000000000001b752	pushq	%r13
000000000001b754	pushq	%r14
000000000001b756	pushq	%r15
000000000001b758	subq	$0x10, %rsp
000000000001b75c	movss	%xmm0, (%rsp)
000000000001b761	subq	$0x10, %rsp
000000000001b765	movss	%xmm1, (%rsp)
000000000001b76a	pushq	%rsi
000000000001b76b	pushq	%rdi
000000000001b76c	callq	__Z7getBasev ## getBase()
000000000001b771	addq	$0x250d20, %rax
000000000001b777	popq	%rdi
000000000001b778	popq	%rsi
000000000001b779	movss	(%rsp), %xmm1
000000000001b77e	addq	$0x10, %rsp
000000000001b782	movss	(%rsp), %xmm0
000000000001b787	addq	$0x10, %rsp
000000000001b78b	popq	%r15
000000000001b78d	popq	%r14
000000000001b78f	popq	%r13
000000000001b791	popq	%r12
000000000001b793	popq	%r11
000000000001b795	popq	%r10
000000000001b797	popq	%r9
000000000001b799	popq	%r8
000000000001b79b	popq	%rcx
000000000001b79c	popq	%rdx
000000000001b79d	popq	%rsi
000000000001b79e	popq	%rdi
000000000001b79f	popq	%rbx
000000000001b7a0	popq	%rbp
000000000001b7a1	jmpq	*%rax
__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc:
000000000001b7a3	pushq	%rbp
000000000001b7a4	movq	%rsp, %rbp
000000000001b7a7	pushq	%rbx
000000000001b7a8	pushq	%rdi
000000000001b7a9	pushq	%rsi
000000000001b7aa	pushq	%rdx
000000000001b7ab	pushq	%rcx
000000000001b7ac	pushq	%r8
000000000001b7ae	pushq	%r9
000000000001b7b0	pushq	%r10
000000000001b7b2	pushq	%r11
000000000001b7b4	pushq	%r12
000000000001b7b6	pushq	%r13
000000000001b7b8	pushq	%r14
000000000001b7ba	pushq	%r15
000000000001b7bc	subq	$0x10, %rsp
000000000001b7c0	movss	%xmm0, (%rsp)
000000000001b7c5	subq	$0x10, %rsp
000000000001b7c9	movss	%xmm1, (%rsp)
000000000001b7ce	pushq	%rsi
000000000001b7cf	pushq	%rdi
000000000001b7d0	callq	__Z7getBasev ## getBase()
000000000001b7d5	addq	$0x132dc0, %rax
000000000001b7db	popq	%rdi
000000000001b7dc	popq	%rsi
000000000001b7dd	movss	(%rsp), %xmm1
000000000001b7e2	addq	$0x10, %rsp
000000000001b7e6	movss	(%rsp), %xmm0
000000000001b7eb	addq	$0x10, %rsp
000000000001b7ef	popq	%r15
000000000001b7f1	popq	%r14
000000000001b7f3	popq	%r13
000000000001b7f5	popq	%r12
000000000001b7f7	popq	%r11
000000000001b7f9	popq	%r10
000000000001b7fb	popq	%r9
000000000001b7fd	popq	%r8
000000000001b7ff	popq	%rcx
000000000001b800	popq	%rdx
000000000001b801	popq	%rsi
000000000001b802	popq	%rdi
000000000001b803	popq	%rbx
000000000001b804	popq	%rbp
000000000001b805	jmpq	*%rax
__ZN7cocos2d8CCSprite6createEv:
000000000001b807	pushq	%rbp
000000000001b808	movq	%rsp, %rbp
000000000001b80b	pushq	%rbx
000000000001b80c	pushq	%rdi
000000000001b80d	pushq	%rsi
000000000001b80e	pushq	%rdx
000000000001b80f	pushq	%rcx
000000000001b810	pushq	%r8
000000000001b812	pushq	%r9
000000000001b814	pushq	%r10
000000000001b816	pushq	%r11
000000000001b818	pushq	%r12
000000000001b81a	pushq	%r13
000000000001b81c	pushq	%r14
000000000001b81e	pushq	%r15
000000000001b820	subq	$0x10, %rsp
000000000001b824	movss	%xmm0, (%rsp)
000000000001b829	subq	$0x10, %rsp
000000000001b82d	movss	%xmm1, (%rsp)
000000000001b832	pushq	%rsi
000000000001b833	pushq	%rdi
000000000001b834	callq	__Z7getBasev ## getBase()
000000000001b839	addq	$0x132df0, %rax
000000000001b83f	popq	%rdi
000000000001b840	popq	%rsi
000000000001b841	movss	(%rsp), %xmm1
000000000001b846	addq	$0x10, %rsp
000000000001b84a	movss	(%rsp), %xmm0
000000000001b84f	addq	$0x10, %rsp
000000000001b853	popq	%r15
000000000001b855	popq	%r14
000000000001b857	popq	%r13
000000000001b859	popq	%r12
000000000001b85b	popq	%r11
000000000001b85d	popq	%r10
000000000001b85f	popq	%r9
000000000001b861	popq	%r8
000000000001b863	popq	%rcx
000000000001b864	popq	%rdx
000000000001b865	popq	%rsi
000000000001b866	popq	%rdi
000000000001b867	popq	%rbx
000000000001b868	popq	%rbp
000000000001b869	jmpq	*%rax
__ZN7cocos2d8CCSpriteC1Ev:
000000000001b86b	pushq	%rbp
000000000001b86c	movq	%rsp, %rbp
000000000001b86f	pushq	%rbx
000000000001b870	pushq	%rdi
000000000001b871	pushq	%rsi
000000000001b872	pushq	%rdx
000000000001b873	pushq	%rcx
000000000001b874	pushq	%r8
000000000001b876	pushq	%r9
000000000001b878	pushq	%r10
000000000001b87a	pushq	%r11
000000000001b87c	pushq	%r12
000000000001b87e	pushq	%r13
000000000001b880	pushq	%r14
000000000001b882	pushq	%r15
000000000001b884	subq	$0x10, %rsp
000000000001b888	movss	%xmm0, (%rsp)
000000000001b88d	subq	$0x10, %rsp
000000000001b891	movss	%xmm1, (%rsp)
000000000001b896	pushq	%rsi
000000000001b897	pushq	%rdi
000000000001b898	callq	__Z7getBasev ## getBase()
000000000001b89d	addq	$0x124ac0, %rax
000000000001b8a3	popq	%rdi
000000000001b8a4	popq	%rsi
000000000001b8a5	movss	(%rsp), %xmm1
000000000001b8aa	addq	$0x10, %rsp
000000000001b8ae	movss	(%rsp), %xmm0
000000000001b8b3	addq	$0x10, %rsp
000000000001b8b7	popq	%r15
000000000001b8b9	popq	%r14
000000000001b8bb	popq	%r13
000000000001b8bd	popq	%r12
000000000001b8bf	popq	%r11
000000000001b8c1	popq	%r10
000000000001b8c3	popq	%r9
000000000001b8c5	popq	%r8
000000000001b8c7	popq	%rcx
000000000001b8c8	popq	%rdx
000000000001b8c9	popq	%rsi
000000000001b8ca	popq	%rdi
000000000001b8cb	popq	%rbx
000000000001b8cc	popq	%rbp
000000000001b8cd	jmpq	*%rax
__ZN7cocos2d8CCString11doubleValueEv:
000000000001b8cf	pushq	%rbp
000000000001b8d0	movq	%rsp, %rbp
000000000001b8d3	pushq	%rbx
000000000001b8d4	pushq	%rdi
000000000001b8d5	pushq	%rsi
000000000001b8d6	pushq	%rdx
000000000001b8d7	pushq	%rcx
000000000001b8d8	pushq	%r8
000000000001b8da	pushq	%r9
000000000001b8dc	pushq	%r10
000000000001b8de	pushq	%r11
000000000001b8e0	pushq	%r12
000000000001b8e2	pushq	%r13
000000000001b8e4	pushq	%r14
000000000001b8e6	pushq	%r15
000000000001b8e8	subq	$0x10, %rsp
000000000001b8ec	movss	%xmm0, (%rsp)
000000000001b8f1	subq	$0x10, %rsp
000000000001b8f5	movss	%xmm1, (%rsp)
000000000001b8fa	pushq	%rsi
000000000001b8fb	pushq	%rdi
000000000001b8fc	callq	__Z7getBasev ## getBase()
000000000001b901	addq	$0x44c7f0, %rax
000000000001b907	popq	%rdi
000000000001b908	popq	%rsi
000000000001b909	movss	(%rsp), %xmm1
000000000001b90e	addq	$0x10, %rsp
000000000001b912	movss	(%rsp), %xmm0
000000000001b917	addq	$0x10, %rsp
000000000001b91b	popq	%r15
000000000001b91d	popq	%r14
000000000001b91f	popq	%r13
000000000001b921	popq	%r12
000000000001b923	popq	%r11
000000000001b925	popq	%r10
000000000001b927	popq	%r9
000000000001b929	popq	%r8
000000000001b92b	popq	%rcx
000000000001b92c	popq	%rdx
000000000001b92d	popq	%rsi
000000000001b92e	popq	%rdi
000000000001b92f	popq	%rbx
000000000001b930	popq	%rbp
000000000001b931	jmpq	*%rax
__ZN7cocos2d8CCString16createWithFormatEPKcz:
000000000001b933	pushq	%rbp
000000000001b934	movq	%rsp, %rbp
000000000001b937	pushq	%rbx
000000000001b938	pushq	%rdi
000000000001b939	pushq	%rsi
000000000001b93a	pushq	%rdx
000000000001b93b	pushq	%rcx
000000000001b93c	pushq	%r8
000000000001b93e	pushq	%r9
000000000001b940	pushq	%r10
000000000001b942	pushq	%r11
000000000001b944	pushq	%r12
000000000001b946	pushq	%r13
000000000001b948	pushq	%r14
000000000001b94a	pushq	%r15
000000000001b94c	subq	$0x10, %rsp
000000000001b950	movss	%xmm0, (%rsp)
000000000001b955	subq	$0x10, %rsp
000000000001b959	movss	%xmm1, (%rsp)
000000000001b95e	pushq	%rsi
000000000001b95f	pushq	%rdi
000000000001b960	callq	__Z7getBasev ## getBase()
000000000001b965	addq	$0x44cab0, %rax
000000000001b96b	popq	%rdi
000000000001b96c	popq	%rsi
000000000001b96d	movss	(%rsp), %xmm1
000000000001b972	addq	$0x10, %rsp
000000000001b976	movss	(%rsp), %xmm0
000000000001b97b	addq	$0x10, %rsp
000000000001b97f	popq	%r15
000000000001b981	popq	%r14
000000000001b983	popq	%r13
000000000001b985	popq	%r12
000000000001b987	popq	%r11
000000000001b989	popq	%r10
000000000001b98b	popq	%r9
000000000001b98d	popq	%r8
000000000001b98f	popq	%rcx
000000000001b990	popq	%rdx
000000000001b991	popq	%rsi
000000000001b992	popq	%rdi
000000000001b993	popq	%rbx
000000000001b994	popq	%rbp
000000000001b995	jmpq	*%rax
__ZN7cocos2d8CCString8intValueEv:
000000000001b997	pushq	%rbp
000000000001b998	movq	%rsp, %rbp
000000000001b99b	pushq	%rbx
000000000001b99c	pushq	%rdi
000000000001b99d	pushq	%rsi
000000000001b99e	pushq	%rdx
000000000001b99f	pushq	%rcx
000000000001b9a0	pushq	%r8
000000000001b9a2	pushq	%r9
000000000001b9a4	pushq	%r10
000000000001b9a6	pushq	%r11
000000000001b9a8	pushq	%r12
000000000001b9aa	pushq	%r13
000000000001b9ac	pushq	%r14
000000000001b9ae	pushq	%r15
000000000001b9b0	subq	$0x10, %rsp
000000000001b9b4	movss	%xmm0, (%rsp)
000000000001b9b9	subq	$0x10, %rsp
000000000001b9bd	movss	%xmm1, (%rsp)
000000000001b9c2	pushq	%rsi
000000000001b9c3	pushq	%rdi
000000000001b9c4	callq	__Z7getBasev ## getBase()
000000000001b9c9	addq	$0x44c780, %rax
000000000001b9cf	popq	%rdi
000000000001b9d0	popq	%rsi
000000000001b9d1	movss	(%rsp), %xmm1
000000000001b9d6	addq	$0x10, %rsp
000000000001b9da	movss	(%rsp), %xmm0
000000000001b9df	addq	$0x10, %rsp
000000000001b9e3	popq	%r15
000000000001b9e5	popq	%r14
000000000001b9e7	popq	%r13
000000000001b9e9	popq	%r12
000000000001b9eb	popq	%r11
000000000001b9ed	popq	%r10
000000000001b9ef	popq	%r9
000000000001b9f1	popq	%r8
000000000001b9f3	popq	%rcx
000000000001b9f4	popq	%rdx
000000000001b9f5	popq	%rsi
000000000001b9f6	popq	%rdi
000000000001b9f7	popq	%rbx
000000000001b9f8	popq	%rbp
000000000001b9f9	jmpq	*%rax
__ZN7cocos2d8CCString9boolValueEPv:
000000000001b9fb	pushq	%rbp
000000000001b9fc	movq	%rsp, %rbp
000000000001b9ff	pushq	%rbx
000000000001ba00	pushq	%rdi
000000000001ba01	pushq	%rsi
000000000001ba02	pushq	%rdx
000000000001ba03	pushq	%rcx
000000000001ba04	pushq	%r8
000000000001ba06	pushq	%r9
000000000001ba08	pushq	%r10
000000000001ba0a	pushq	%r11
000000000001ba0c	pushq	%r12
000000000001ba0e	pushq	%r13
000000000001ba10	pushq	%r14
000000000001ba12	pushq	%r15
000000000001ba14	subq	$0x10, %rsp
000000000001ba18	movss	%xmm0, (%rsp)
000000000001ba1d	subq	$0x10, %rsp
000000000001ba21	movss	%xmm1, (%rsp)
000000000001ba26	pushq	%rsi
000000000001ba27	pushq	%rdi
000000000001ba28	callq	__Z7getBasev ## getBase()
000000000001ba2d	addq	$0x44c810, %rax
000000000001ba33	popq	%rdi
000000000001ba34	popq	%rsi
000000000001ba35	movss	(%rsp), %xmm1
000000000001ba3a	addq	$0x10, %rsp
000000000001ba3e	movss	(%rsp), %xmm0
000000000001ba43	addq	$0x10, %rsp
000000000001ba47	popq	%r15
000000000001ba49	popq	%r14
000000000001ba4b	popq	%r13
000000000001ba4d	popq	%r12
000000000001ba4f	popq	%r11
000000000001ba51	popq	%r10
000000000001ba53	popq	%r9
000000000001ba55	popq	%r8
000000000001ba57	popq	%rcx
000000000001ba58	popq	%rdx
000000000001ba59	popq	%rsi
000000000001ba5a	popq	%rdi
000000000001ba5b	popq	%rbx
000000000001ba5c	popq	%rbp
000000000001ba5d	jmpq	*%rax
__ZN7cocos2d9CCCopying12copyWithZoneEPNS_6CCZoneE:
000000000001ba5f	pushq	%rbp
000000000001ba60	movq	%rsp, %rbp
000000000001ba63	pushq	%rbx
000000000001ba64	pushq	%rdi
000000000001ba65	pushq	%rsi
000000000001ba66	pushq	%rdx
000000000001ba67	pushq	%rcx
000000000001ba68	pushq	%r8
000000000001ba6a	pushq	%r9
000000000001ba6c	pushq	%r10
000000000001ba6e	pushq	%r11
000000000001ba70	pushq	%r12
000000000001ba72	pushq	%r13
000000000001ba74	pushq	%r14
000000000001ba76	pushq	%r15
000000000001ba78	subq	$0x10, %rsp
000000000001ba7c	movss	%xmm0, (%rsp)
000000000001ba81	subq	$0x10, %rsp
000000000001ba85	movss	%xmm1, (%rsp)
000000000001ba8a	pushq	%rsi
000000000001ba8b	pushq	%rdi
000000000001ba8c	callq	__Z7getBasev ## getBase()
000000000001ba91	addq	$0x250c90, %rax
000000000001ba97	popq	%rdi
000000000001ba98	popq	%rsi
000000000001ba99	movss	(%rsp), %xmm1
000000000001ba9e	addq	$0x10, %rsp
000000000001baa2	movss	(%rsp), %xmm0
000000000001baa7	addq	$0x10, %rsp
000000000001baab	popq	%r15
000000000001baad	popq	%r14
000000000001baaf	popq	%r13
000000000001bab1	popq	%r12
000000000001bab3	popq	%r11
000000000001bab5	popq	%r10
000000000001bab7	popq	%r9
000000000001bab9	popq	%r8
000000000001babb	popq	%rcx
000000000001babc	popq	%rdx
000000000001babd	popq	%rsi
000000000001babe	popq	%rdi
000000000001babf	popq	%rbx
000000000001bac0	popq	%rbp
000000000001bac1	jmpq	*%rax
__ZN7cocos2d9extension14CCScale9Sprite14setContentSizeERKNS_6CCSizeE:
000000000001bac3	pushq	%rbp
000000000001bac4	movq	%rsp, %rbp
000000000001bac7	pushq	%rbx
000000000001bac8	pushq	%rdi
000000000001bac9	pushq	%rsi
000000000001baca	pushq	%rdx
000000000001bacb	pushq	%rcx
000000000001bacc	pushq	%r8
000000000001bace	pushq	%r9
000000000001bad0	pushq	%r10
000000000001bad2	pushq	%r11
000000000001bad4	pushq	%r12
000000000001bad6	pushq	%r13
000000000001bad8	pushq	%r14
000000000001bada	pushq	%r15
000000000001badc	subq	$0x10, %rsp
000000000001bae0	movss	%xmm0, (%rsp)
000000000001bae5	subq	$0x10, %rsp
000000000001bae9	movss	%xmm1, (%rsp)
000000000001baee	pushq	%rsi
000000000001baef	pushq	%rdi
000000000001baf0	callq	__Z7getBasev ## getBase()
000000000001baf5	addq	$0x2127c0, %rax
000000000001bafb	popq	%rdi
000000000001bafc	popq	%rsi
000000000001bafd	movss	(%rsp), %xmm1
000000000001bb02	addq	$0x10, %rsp
000000000001bb06	movss	(%rsp), %xmm0
000000000001bb0b	addq	$0x10, %rsp
000000000001bb0f	popq	%r15
000000000001bb11	popq	%r14
000000000001bb13	popq	%r13
000000000001bb15	popq	%r12
000000000001bb17	popq	%r11
000000000001bb19	popq	%r10
000000000001bb1b	popq	%r9
000000000001bb1d	popq	%r8
000000000001bb1f	popq	%rcx
000000000001bb20	popq	%rdx
000000000001bb21	popq	%rsi
000000000001bb22	popq	%rdi
000000000001bb23	popq	%rbx
000000000001bb24	popq	%rbp
000000000001bb25	jmpq	*%rax
__ZN7cocos2d9extension14CCScale9Sprite6createEPKcNS_6CCRectE:
000000000001bb27	pushq	%rbp
000000000001bb28	movq	%rsp, %rbp
000000000001bb2b	pushq	%rbx
000000000001bb2c	pushq	%rdi
000000000001bb2d	pushq	%rsi
000000000001bb2e	pushq	%rdx
000000000001bb2f	pushq	%rcx
000000000001bb30	pushq	%r8
000000000001bb32	pushq	%r9
000000000001bb34	pushq	%r10
000000000001bb36	pushq	%r11
000000000001bb38	pushq	%r12
000000000001bb3a	pushq	%r13
000000000001bb3c	pushq	%r14
000000000001bb3e	pushq	%r15
000000000001bb40	subq	$0x10, %rsp
000000000001bb44	movss	%xmm0, (%rsp)
000000000001bb49	subq	$0x10, %rsp
000000000001bb4d	movss	%xmm1, (%rsp)
000000000001bb52	pushq	%rsi
000000000001bb53	pushq	%rdi
000000000001bb54	callq	__Z7getBasev ## getBase()
000000000001bb59	addq	$0x212ef0, %rax
000000000001bb5f	popq	%rdi
000000000001bb60	popq	%rsi
000000000001bb61	movss	(%rsp), %xmm1
000000000001bb66	addq	$0x10, %rsp
000000000001bb6a	movss	(%rsp), %xmm0
000000000001bb6f	addq	$0x10, %rsp
000000000001bb73	popq	%r15
000000000001bb75	popq	%r14
000000000001bb77	popq	%r13
000000000001bb79	popq	%r12
000000000001bb7b	popq	%r11
000000000001bb7d	popq	%r10
000000000001bb7f	popq	%r9
000000000001bb81	popq	%r8
000000000001bb83	popq	%rcx
000000000001bb84	popq	%rdx
000000000001bb85	popq	%rsi
000000000001bb86	popq	%rdi
000000000001bb87	popq	%rbx
000000000001bb88	popq	%rbp
000000000001bb89	jmpq	*%rax
__ZN8EditorUI12pasteObjectsESs:
000000000001bb8b	pushq	%rbp
000000000001bb8c	movq	%rsp, %rbp
000000000001bb8f	pushq	%rbx
000000000001bb90	pushq	%rdi
000000000001bb91	pushq	%rsi
000000000001bb92	pushq	%rdx
000000000001bb93	pushq	%rcx
000000000001bb94	pushq	%r8
000000000001bb96	pushq	%r9
000000000001bb98	pushq	%r10
000000000001bb9a	pushq	%r11
000000000001bb9c	pushq	%r12
000000000001bb9e	pushq	%r13
000000000001bba0	pushq	%r14
000000000001bba2	pushq	%r15
000000000001bba4	subq	$0x10, %rsp
000000000001bba8	movss	%xmm0, (%rsp)
000000000001bbad	subq	$0x10, %rsp
000000000001bbb1	movss	%xmm1, (%rsp)
000000000001bbb6	pushq	%rsi
000000000001bbb7	pushq	%rdi
000000000001bbb8	callq	__Z7getBasev ## getBase()
000000000001bbbd	addq	$0x232d0, %rax
000000000001bbc3	popq	%rdi
000000000001bbc4	popq	%rsi
000000000001bbc5	movss	(%rsp), %xmm1
000000000001bbca	addq	$0x10, %rsp
000000000001bbce	movss	(%rsp), %xmm0
000000000001bbd3	addq	$0x10, %rsp
000000000001bbd7	popq	%r15
000000000001bbd9	popq	%r14
000000000001bbdb	popq	%r13
000000000001bbdd	popq	%r12
000000000001bbdf	popq	%r11
000000000001bbe1	popq	%r10
000000000001bbe3	popq	%r9
000000000001bbe5	popq	%r8
000000000001bbe7	popq	%rcx
000000000001bbe8	popq	%rdx
000000000001bbe9	popq	%rsi
000000000001bbea	popq	%rdi
000000000001bbeb	popq	%rbx
000000000001bbec	popq	%rbp
000000000001bbed	jmpq	*%rax
__ZN8EditorUI13selectObjectsEPN7cocos2d7CCArrayEb:
000000000001bbef	pushq	%rbp
000000000001bbf0	movq	%rsp, %rbp
000000000001bbf3	pushq	%rbx
000000000001bbf4	pushq	%rdi
000000000001bbf5	pushq	%rsi
000000000001bbf6	pushq	%rdx
000000000001bbf7	pushq	%rcx
000000000001bbf8	pushq	%r8
000000000001bbfa	pushq	%r9
000000000001bbfc	pushq	%r10
000000000001bbfe	pushq	%r11
000000000001bc00	pushq	%r12
000000000001bc02	pushq	%r13
000000000001bc04	pushq	%r14
000000000001bc06	pushq	%r15
000000000001bc08	subq	$0x10, %rsp
000000000001bc0c	movss	%xmm0, (%rsp)
000000000001bc11	subq	$0x10, %rsp
000000000001bc15	movss	%xmm1, (%rsp)
000000000001bc1a	pushq	%rsi
000000000001bc1b	pushq	%rdi
000000000001bc1c	callq	__Z7getBasev ## getBase()
000000000001bc21	addq	$0x23940, %rax
000000000001bc27	popq	%rdi
000000000001bc28	popq	%rsi
000000000001bc29	movss	(%rsp), %xmm1
000000000001bc2e	addq	$0x10, %rsp
000000000001bc32	movss	(%rsp), %xmm0
000000000001bc37	addq	$0x10, %rsp
000000000001bc3b	popq	%r15
000000000001bc3d	popq	%r14
000000000001bc3f	popq	%r13
000000000001bc41	popq	%r12
000000000001bc43	popq	%r11
000000000001bc45	popq	%r10
000000000001bc47	popq	%r9
000000000001bc49	popq	%r8
000000000001bc4b	popq	%rcx
000000000001bc4c	popq	%rdx
000000000001bc4d	popq	%rsi
000000000001bc4e	popq	%rdi
000000000001bc4f	popq	%rbx
000000000001bc50	popq	%rbp
000000000001bc51	jmpq	*%rax
__ZN8EditorUI14redoLastActionEv:
000000000001bc53	pushq	%rbp
000000000001bc54	movq	%rsp, %rbp
000000000001bc57	pushq	%rbx
000000000001bc58	pushq	%rdi
000000000001bc59	pushq	%rsi
000000000001bc5a	pushq	%rdx
000000000001bc5b	pushq	%rcx
000000000001bc5c	pushq	%r8
000000000001bc5e	pushq	%r9
000000000001bc60	pushq	%r10
000000000001bc62	pushq	%r11
000000000001bc64	pushq	%r12
000000000001bc66	pushq	%r13
000000000001bc68	pushq	%r14
000000000001bc6a	pushq	%r15
000000000001bc6c	subq	$0x10, %rsp
000000000001bc70	movss	%xmm0, (%rsp)
000000000001bc75	subq	$0x10, %rsp
000000000001bc79	movss	%xmm1, (%rsp)
000000000001bc7e	pushq	%rsi
000000000001bc7f	pushq	%rdi
000000000001bc80	callq	__Z7getBasev ## getBase()
000000000001bc85	addq	$0xb8e0, %rax
000000000001bc8b	popq	%rdi
000000000001bc8c	popq	%rsi
000000000001bc8d	movss	(%rsp), %xmm1
000000000001bc92	addq	$0x10, %rsp
000000000001bc96	movss	(%rsp), %xmm0
000000000001bc9b	addq	$0x10, %rsp
000000000001bc9f	popq	%r15
000000000001bca1	popq	%r14
000000000001bca3	popq	%r13
000000000001bca5	popq	%r12
000000000001bca7	popq	%r11
000000000001bca9	popq	%r10
000000000001bcab	popq	%r9
000000000001bcad	popq	%r8
000000000001bcaf	popq	%rcx
000000000001bcb0	popq	%rdx
000000000001bcb1	popq	%rsi
000000000001bcb2	popq	%rdi
000000000001bcb3	popq	%rbx
000000000001bcb4	popq	%rbp
000000000001bcb5	jmpq	*%rax
__ZN8EditorUI14undoLastActionEv:
000000000001bcb7	pushq	%rbp
000000000001bcb8	movq	%rsp, %rbp
000000000001bcbb	pushq	%rbx
000000000001bcbc	pushq	%rdi
000000000001bcbd	pushq	%rsi
000000000001bcbe	pushq	%rdx
000000000001bcbf	pushq	%rcx
000000000001bcc0	pushq	%r8
000000000001bcc2	pushq	%r9
000000000001bcc4	pushq	%r10
000000000001bcc6	pushq	%r11
000000000001bcc8	pushq	%r12
000000000001bcca	pushq	%r13
000000000001bccc	pushq	%r14
000000000001bcce	pushq	%r15
000000000001bcd0	subq	$0x10, %rsp
000000000001bcd4	movss	%xmm0, (%rsp)
000000000001bcd9	subq	$0x10, %rsp
000000000001bcdd	movss	%xmm1, (%rsp)
000000000001bce2	pushq	%rsi
000000000001bce3	pushq	%rdi
000000000001bce4	callq	__Z7getBasev ## getBase()
000000000001bce9	addq	$0xb830, %rax
000000000001bcef	popq	%rdi
000000000001bcf0	popq	%rsi
000000000001bcf1	movss	(%rsp), %xmm1
000000000001bcf6	addq	$0x10, %rsp
000000000001bcfa	movss	(%rsp), %xmm0
000000000001bcff	addq	$0x10, %rsp
000000000001bd03	popq	%r15
000000000001bd05	popq	%r14
000000000001bd07	popq	%r13
000000000001bd09	popq	%r12
000000000001bd0b	popq	%r11
000000000001bd0d	popq	%r10
000000000001bd0f	popq	%r9
000000000001bd11	popq	%r8
000000000001bd13	popq	%rcx
000000000001bd14	popq	%rdx
000000000001bd15	popq	%rsi
000000000001bd16	popq	%rdi
000000000001bd17	popq	%rbx
000000000001bd18	popq	%rbp
000000000001bd19	jmpq	*%rax
__ZN8EditorUI18getSelectedObjectsEv:
000000000001bd1b	pushq	%rbp
000000000001bd1c	movq	%rsp, %rbp
000000000001bd1f	pushq	%rbx
000000000001bd20	pushq	%rdi
000000000001bd21	pushq	%rsi
000000000001bd22	pushq	%rdx
000000000001bd23	pushq	%rcx
000000000001bd24	pushq	%r8
000000000001bd26	pushq	%r9
000000000001bd28	pushq	%r10
000000000001bd2a	pushq	%r11
000000000001bd2c	pushq	%r12
000000000001bd2e	pushq	%r13
000000000001bd30	pushq	%r14
000000000001bd32	pushq	%r15
000000000001bd34	subq	$0x10, %rsp
000000000001bd38	movss	%xmm0, (%rsp)
000000000001bd3d	subq	$0x10, %rsp
000000000001bd41	movss	%xmm1, (%rsp)
000000000001bd46	pushq	%rsi
000000000001bd47	pushq	%rdi
000000000001bd48	callq	__Z7getBasev ## getBase()
000000000001bd4d	addq	$0x23f30, %rax
000000000001bd53	popq	%rdi
000000000001bd54	popq	%rsi
000000000001bd55	movss	(%rsp), %xmm1
000000000001bd5a	addq	$0x10, %rsp
000000000001bd5e	movss	(%rsp), %xmm0
000000000001bd63	addq	$0x10, %rsp
000000000001bd67	popq	%r15
000000000001bd69	popq	%r14
000000000001bd6b	popq	%r13
000000000001bd6d	popq	%r12
000000000001bd6f	popq	%r11
000000000001bd71	popq	%r10
000000000001bd73	popq	%r9
000000000001bd75	popq	%r8
000000000001bd77	popq	%rcx
000000000001bd78	popq	%rdx
000000000001bd79	popq	%rsi
000000000001bd7a	popq	%rdi
000000000001bd7b	popq	%rbx
000000000001bd7c	popq	%rbp
000000000001bd7d	jmpq	*%rax
__ZN9InfoLayer17onRefreshCommentsEPN7cocos2d8CCObjectE:
000000000001bd7f	pushq	%rbp
000000000001bd80	movq	%rsp, %rbp
000000000001bd83	pushq	%rbx
000000000001bd84	pushq	%rdi
000000000001bd85	pushq	%rsi
000000000001bd86	pushq	%rdx
000000000001bd87	pushq	%rcx
000000000001bd88	pushq	%r8
000000000001bd8a	pushq	%r9
000000000001bd8c	pushq	%r10
000000000001bd8e	pushq	%r11
000000000001bd90	pushq	%r12
000000000001bd92	pushq	%r13
000000000001bd94	pushq	%r14
000000000001bd96	pushq	%r15
000000000001bd98	subq	$0x10, %rsp
000000000001bd9c	movss	%xmm0, (%rsp)
000000000001bda1	subq	$0x10, %rsp
000000000001bda5	movss	%xmm1, (%rsp)
000000000001bdaa	pushq	%rsi
000000000001bdab	pushq	%rdi
000000000001bdac	callq	__Z7getBasev ## getBase()
000000000001bdb1	addq	$0x459b60, %rax
000000000001bdb7	popq	%rdi
000000000001bdb8	popq	%rsi
000000000001bdb9	movss	(%rsp), %xmm1
000000000001bdbe	addq	$0x10, %rsp
000000000001bdc2	movss	(%rsp), %xmm0
000000000001bdc7	addq	$0x10, %rsp
000000000001bdcb	popq	%r15
000000000001bdcd	popq	%r14
000000000001bdcf	popq	%r13
000000000001bdd1	popq	%r12
000000000001bdd3	popq	%r11
000000000001bdd5	popq	%r10
000000000001bdd7	popq	%r9
000000000001bdd9	popq	%r8
000000000001bddb	popq	%rcx
000000000001bddc	popq	%rdx
000000000001bddd	popq	%rsi
000000000001bdde	popq	%rdi
000000000001bddf	popq	%rbx
000000000001bde0	popq	%rbp
000000000001bde1	jmpq	*%rax
__ZN9InfoLayer8loadPageEib:
000000000001bde3	pushq	%rbp
000000000001bde4	movq	%rsp, %rbp
000000000001bde7	pushq	%rbx
000000000001bde8	pushq	%rdi
000000000001bde9	pushq	%rsi
000000000001bdea	pushq	%rdx
000000000001bdeb	pushq	%rcx
000000000001bdec	pushq	%r8
000000000001bdee	pushq	%r9
000000000001bdf0	pushq	%r10
000000000001bdf2	pushq	%r11
000000000001bdf4	pushq	%r12
000000000001bdf6	pushq	%r13
000000000001bdf8	pushq	%r14
000000000001bdfa	pushq	%r15
000000000001bdfc	subq	$0x10, %rsp
000000000001be00	movss	%xmm0, (%rsp)
000000000001be05	subq	$0x10, %rsp
000000000001be09	movss	%xmm1, (%rsp)
000000000001be0e	pushq	%rsi
000000000001be0f	pushq	%rdi
000000000001be10	callq	__Z7getBasev ## getBase()
000000000001be15	addq	$0x458fb0, %rax
000000000001be1b	popq	%rdi
000000000001be1c	popq	%rsi
000000000001be1d	movss	(%rsp), %xmm1
000000000001be22	addq	$0x10, %rsp
000000000001be26	movss	(%rsp), %xmm0
000000000001be2b	addq	$0x10, %rsp
000000000001be2f	popq	%r15
000000000001be31	popq	%r14
000000000001be33	popq	%r13
000000000001be35	popq	%r12
000000000001be37	popq	%r11
000000000001be39	popq	%r10
000000000001be3b	popq	%r9
000000000001be3d	popq	%r8
000000000001be3f	popq	%rcx
000000000001be40	popq	%rdx
000000000001be41	popq	%rsi
000000000001be42	popq	%rdi
000000000001be43	popq	%rbx
000000000001be44	popq	%rbp
000000000001be45	jmpq	*%rax
__ZN9MenuLayer14keyBackClickedEv:
000000000001be47	pushq	%rbp
000000000001be48	movq	%rsp, %rbp
000000000001be4b	pushq	%rbx
000000000001be4c	pushq	%rdi
000000000001be4d	pushq	%rsi
000000000001be4e	pushq	%rdx
000000000001be4f	pushq	%rcx
000000000001be50	pushq	%r8
000000000001be52	pushq	%r9
000000000001be54	pushq	%r10
000000000001be56	pushq	%r11
000000000001be58	pushq	%r12
000000000001be5a	pushq	%r13
000000000001be5c	pushq	%r14
000000000001be5e	pushq	%r15
000000000001be60	subq	$0x10, %rsp
000000000001be64	movss	%xmm0, (%rsp)
000000000001be69	subq	$0x10, %rsp
000000000001be6d	movss	%xmm1, (%rsp)
000000000001be72	pushq	%rsi
000000000001be73	pushq	%rdi
000000000001be74	callq	__Z7getBasev ## getBase()
000000000001be79	addq	$0x1d3170, %rax
000000000001be7f	popq	%rdi
000000000001be80	popq	%rsi
000000000001be81	movss	(%rsp), %xmm1
000000000001be86	addq	$0x10, %rsp
000000000001be8a	movss	(%rsp), %xmm0
000000000001be8f	addq	$0x10, %rsp
000000000001be93	popq	%r15
000000000001be95	popq	%r14
000000000001be97	popq	%r13
000000000001be99	popq	%r12
000000000001be9b	popq	%r11
000000000001be9d	popq	%r10
000000000001be9f	popq	%r9
000000000001bea1	popq	%r8
000000000001bea3	popq	%rcx
000000000001bea4	popq	%rdx
000000000001bea5	popq	%rsi
000000000001bea6	popq	%rdi
000000000001bea7	popq	%rbx
000000000001bea8	popq	%rbp
000000000001bea9	jmpq	*%rax
__ZN9MenuLayer6onQuitEPN7cocos2d8CCObjectE:
000000000001beab	pushq	%rbp
000000000001beac	movq	%rsp, %rbp
000000000001beaf	pushq	%rbx
000000000001beb0	pushq	%rdi
000000000001beb1	pushq	%rsi
000000000001beb2	pushq	%rdx
000000000001beb3	pushq	%rcx
000000000001beb4	pushq	%r8
000000000001beb6	pushq	%r9
000000000001beb8	pushq	%r10
000000000001beba	pushq	%r11
000000000001bebc	pushq	%r12
000000000001bebe	pushq	%r13
000000000001bec0	pushq	%r14
000000000001bec2	pushq	%r15
000000000001bec4	subq	$0x10, %rsp
000000000001bec8	movss	%xmm0, (%rsp)
000000000001becd	subq	$0x10, %rsp
000000000001bed1	movss	%xmm1, (%rsp)
000000000001bed6	pushq	%rsi
000000000001bed7	pushq	%rdi
000000000001bed8	callq	__Z7getBasev ## getBase()
000000000001bedd	addq	$0x1d2b40, %rax
000000000001bee3	popq	%rdi
000000000001bee4	popq	%rsi
000000000001bee5	movss	(%rsp), %xmm1
000000000001beea	addq	$0x10, %rsp
000000000001beee	movss	(%rsp), %xmm0
000000000001bef3	addq	$0x10, %rsp
000000000001bef7	popq	%r15
000000000001bef9	popq	%r14
000000000001befb	popq	%r13
000000000001befd	popq	%r12
000000000001beff	popq	%r11
000000000001bf01	popq	%r10
000000000001bf03	popq	%r9
000000000001bf05	popq	%r8
000000000001bf07	popq	%rcx
000000000001bf08	popq	%rdx
000000000001bf09	popq	%rsi
000000000001bf0a	popq	%rdi
000000000001bf0b	popq	%rbx
000000000001bf0c	popq	%rbp
000000000001bf0d	jmpq	*%rax
__ZNK7cocos2d6CCNode14getContentSizeEv:
000000000001bf0f	pushq	%rbp
000000000001bf10	movq	%rsp, %rbp
000000000001bf13	pushq	%rbx
000000000001bf14	pushq	%rdi
000000000001bf15	pushq	%rsi
000000000001bf16	pushq	%rdx
000000000001bf17	pushq	%rcx
000000000001bf18	pushq	%r8
000000000001bf1a	pushq	%r9
000000000001bf1c	pushq	%r10
000000000001bf1e	pushq	%r11
000000000001bf20	pushq	%r12
000000000001bf22	pushq	%r13
000000000001bf24	pushq	%r14
000000000001bf26	pushq	%r15
000000000001bf28	subq	$0x10, %rsp
000000000001bf2c	movss	%xmm0, (%rsp)
000000000001bf31	subq	$0x10, %rsp
000000000001bf35	movss	%xmm1, (%rsp)
000000000001bf3a	pushq	%rsi
000000000001bf3b	pushq	%rdi
000000000001bf3c	callq	__Z7getBasev ## getBase()
000000000001bf41	addq	$0x122e00, %rax
000000000001bf47	popq	%rdi
000000000001bf48	popq	%rsi
000000000001bf49	movss	(%rsp), %xmm1
000000000001bf4e	addq	$0x10, %rsp
000000000001bf52	movss	(%rsp), %xmm0
000000000001bf57	addq	$0x10, %rsp
000000000001bf5b	popq	%r15
000000000001bf5d	popq	%r14
000000000001bf5f	popq	%r13
000000000001bf61	popq	%r12
000000000001bf63	popq	%r11
000000000001bf65	popq	%r10
000000000001bf67	popq	%r9
000000000001bf69	popq	%r8
000000000001bf6b	popq	%rcx
000000000001bf6c	popq	%rdx
000000000001bf6d	popq	%rsi
000000000001bf6e	popq	%rdi
000000000001bf6f	popq	%rbx
000000000001bf70	popq	%rbp
000000000001bf71	jmpq	*%rax
__ZNK7cocos2d6CCNode16getChildrenCountEv:
000000000001bf73	pushq	%rbp
000000000001bf74	movq	%rsp, %rbp
000000000001bf77	pushq	%rbx
000000000001bf78	pushq	%rdi
000000000001bf79	pushq	%rsi
000000000001bf7a	pushq	%rdx
000000000001bf7b	pushq	%rcx
000000000001bf7c	pushq	%r8
000000000001bf7e	pushq	%r9
000000000001bf80	pushq	%r10
000000000001bf82	pushq	%r11
000000000001bf84	pushq	%r12
000000000001bf86	pushq	%r13
000000000001bf88	pushq	%r14
000000000001bf8a	pushq	%r15
000000000001bf8c	subq	$0x10, %rsp
000000000001bf90	movss	%xmm0, (%rsp)
000000000001bf95	subq	$0x10, %rsp
000000000001bf99	movss	%xmm1, (%rsp)
000000000001bf9e	pushq	%rsi
000000000001bf9f	pushq	%rdi
000000000001bfa0	callq	__Z7getBasev ## getBase()
000000000001bfa5	addq	$0x122c90, %rax
000000000001bfab	popq	%rdi
000000000001bfac	popq	%rsi
000000000001bfad	movss	(%rsp), %xmm1
000000000001bfb2	addq	$0x10, %rsp
000000000001bfb6	movss	(%rsp), %xmm0
000000000001bfbb	addq	$0x10, %rsp
000000000001bfbf	popq	%r15
000000000001bfc1	popq	%r14
000000000001bfc3	popq	%r13
000000000001bfc5	popq	%r12
000000000001bfc7	popq	%r11
000000000001bfc9	popq	%r10
000000000001bfcb	popq	%r9
000000000001bfcd	popq	%r8
000000000001bfcf	popq	%rcx
000000000001bfd0	popq	%rdx
000000000001bfd1	popq	%rsi
000000000001bfd2	popq	%rdi
000000000001bfd3	popq	%rbx
000000000001bfd4	popq	%rbp
000000000001bfd5	jmpq	*%rax
__ZNK7cocos2d7CCArray5countEv:
000000000001bfd7	pushq	%rbp
000000000001bfd8	movq	%rsp, %rbp
000000000001bfdb	pushq	%rbx
000000000001bfdc	pushq	%rdi
000000000001bfdd	pushq	%rsi
000000000001bfde	pushq	%rdx
000000000001bfdf	pushq	%rcx
000000000001bfe0	pushq	%r8
000000000001bfe2	pushq	%r9
000000000001bfe4	pushq	%r10
000000000001bfe6	pushq	%r11
000000000001bfe8	pushq	%r12
000000000001bfea	pushq	%r13
000000000001bfec	pushq	%r14
000000000001bfee	pushq	%r15
000000000001bff0	subq	$0x10, %rsp
000000000001bff4	movss	%xmm0, (%rsp)
000000000001bff9	subq	$0x10, %rsp
000000000001bffd	movss	%xmm1, (%rsp)
000000000001c002	pushq	%rsi
000000000001c003	pushq	%rdi
000000000001c004	callq	__Z7getBasev ## getBase()
000000000001c009	addq	$0x41a2f0, %rax
000000000001c00f	popq	%rdi
000000000001c010	popq	%rsi
000000000001c011	movss	(%rsp), %xmm1
000000000001c016	addq	$0x10, %rsp
000000000001c01a	movss	(%rsp), %xmm0
000000000001c01f	addq	$0x10, %rsp
000000000001c023	popq	%r15
000000000001c025	popq	%r14
000000000001c027	popq	%r13
000000000001c029	popq	%r12
000000000001c02b	popq	%r11
000000000001c02d	popq	%r10
000000000001c02f	popq	%r9
000000000001c031	popq	%r8
000000000001c033	popq	%rcx
000000000001c034	popq	%rdx
000000000001c035	popq	%rsi
000000000001c036	popq	%rdi
000000000001c037	popq	%rbx
000000000001c038	popq	%rbp
000000000001c039	jmpq	*%rax
__ZNK7cocos2d7CCPointplERKS0_:
000000000001c03b	pushq	%rbp
000000000001c03c	movq	%rsp, %rbp
000000000001c03f	pushq	%rbx
000000000001c040	pushq	%rdi
000000000001c041	pushq	%rsi
000000000001c042	pushq	%rdx
000000000001c043	pushq	%rcx
000000000001c044	pushq	%r8
000000000001c046	pushq	%r9
000000000001c048	pushq	%r10
000000000001c04a	pushq	%r11
000000000001c04c	pushq	%r12
000000000001c04e	pushq	%r13
000000000001c050	pushq	%r14
000000000001c052	pushq	%r15
000000000001c054	subq	$0x10, %rsp
000000000001c058	movss	%xmm0, (%rsp)
000000000001c05d	subq	$0x10, %rsp
000000000001c061	movss	%xmm1, (%rsp)
000000000001c066	pushq	%rsi
000000000001c067	pushq	%rdi
000000000001c068	callq	__Z7getBasev ## getBase()
000000000001c06d	addq	$0x1370f0, %rax
000000000001c073	popq	%rdi
000000000001c074	popq	%rsi
000000000001c075	movss	(%rsp), %xmm1
000000000001c07a	addq	$0x10, %rsp
000000000001c07e	movss	(%rsp), %xmm0
000000000001c083	addq	$0x10, %rsp
000000000001c087	popq	%r15
000000000001c089	popq	%r14
000000000001c08b	popq	%r13
000000000001c08d	popq	%r12
000000000001c08f	popq	%r11
000000000001c091	popq	%r10
000000000001c093	popq	%r9
000000000001c095	popq	%r8
000000000001c097	popq	%rcx
000000000001c098	popq	%rdx
000000000001c099	popq	%rsi
000000000001c09a	popq	%rdi
000000000001c09b	popq	%rbx
000000000001c09c	popq	%rbp
000000000001c09d	jmpq	*%rax
__ZNK7cocos2d7CCPointmiERKS0_:
000000000001c09f	pushq	%rbp
000000000001c0a0	movq	%rsp, %rbp
000000000001c0a3	pushq	%rbx
000000000001c0a4	pushq	%rdi
000000000001c0a5	pushq	%rsi
000000000001c0a6	pushq	%rdx
000000000001c0a7	pushq	%rcx
000000000001c0a8	pushq	%r8
000000000001c0aa	pushq	%r9
000000000001c0ac	pushq	%r10
000000000001c0ae	pushq	%r11
000000000001c0b0	pushq	%r12
000000000001c0b2	pushq	%r13
000000000001c0b4	pushq	%r14
000000000001c0b6	pushq	%r15
000000000001c0b8	subq	$0x10, %rsp
000000000001c0bc	movss	%xmm0, (%rsp)
000000000001c0c1	subq	$0x10, %rsp
000000000001c0c5	movss	%xmm1, (%rsp)
000000000001c0ca	pushq	%rsi
000000000001c0cb	pushq	%rdi
000000000001c0cc	callq	__Z7getBasev ## getBase()
000000000001c0d1	addq	$0x137120, %rax
000000000001c0d7	popq	%rdi
000000000001c0d8	popq	%rsi
000000000001c0d9	movss	(%rsp), %xmm1
000000000001c0de	addq	$0x10, %rsp
000000000001c0e2	movss	(%rsp), %xmm0
000000000001c0e7	addq	$0x10, %rsp
000000000001c0eb	popq	%r15
000000000001c0ed	popq	%r14
000000000001c0ef	popq	%r13
000000000001c0f1	popq	%r12
000000000001c0f3	popq	%r11
000000000001c0f5	popq	%r10
000000000001c0f7	popq	%r9
000000000001c0f9	popq	%r8
000000000001c0fb	popq	%rcx
000000000001c0fc	popq	%rdx
000000000001c0fd	popq	%rsi
000000000001c0fe	popq	%rdi
000000000001c0ff	popq	%rbx
000000000001c100	popq	%rbp
000000000001c101	jmpq	*%rax
__ZNK7cocos2d8CCObject6getTagEv:
000000000001c103	pushq	%rbp
000000000001c104	movq	%rsp, %rbp
000000000001c107	pushq	%rbx
000000000001c108	pushq	%rdi
000000000001c109	pushq	%rsi
000000000001c10a	pushq	%rdx
000000000001c10b	pushq	%rcx
000000000001c10c	pushq	%r8
000000000001c10e	pushq	%r9
000000000001c110	pushq	%r10
000000000001c112	pushq	%r11
000000000001c114	pushq	%r12
000000000001c116	pushq	%r13
000000000001c118	pushq	%r14
000000000001c11a	pushq	%r15
000000000001c11c	subq	$0x10, %rsp
000000000001c120	movss	%xmm0, (%rsp)
000000000001c125	subq	$0x10, %rsp
000000000001c129	movss	%xmm1, (%rsp)
000000000001c12e	pushq	%rsi
000000000001c12f	pushq	%rdi
000000000001c130	callq	__Z7getBasev ## getBase()
000000000001c135	addq	$0x250f50, %rax
000000000001c13b	popq	%rdi
000000000001c13c	popq	%rsi
000000000001c13d	movss	(%rsp), %xmm1
000000000001c142	addq	$0x10, %rsp
000000000001c146	movss	(%rsp), %xmm0
000000000001c14b	addq	$0x10, %rsp
000000000001c14f	popq	%r15
000000000001c151	popq	%r14
000000000001c153	popq	%r13
000000000001c155	popq	%r12
000000000001c157	popq	%r11
000000000001c159	popq	%r10
000000000001c15b	popq	%r9
000000000001c15d	popq	%r8
000000000001c15f	popq	%rcx
000000000001c160	popq	%rdx
000000000001c161	popq	%rsi
000000000001c162	popq	%rdi
000000000001c163	popq	%rbx
000000000001c164	popq	%rbp
000000000001c165	jmpq	*%rax
__ZNK7cocos2d8CCString10getCStringEv:
000000000001c167	pushq	%rbp
000000000001c168	movq	%rsp, %rbp
000000000001c16b	pushq	%rbx
000000000001c16c	pushq	%rdi
000000000001c16d	pushq	%rsi
000000000001c16e	pushq	%rdx
000000000001c16f	pushq	%rcx
000000000001c170	pushq	%r8
000000000001c172	pushq	%r9
000000000001c174	pushq	%r10
000000000001c176	pushq	%r11
000000000001c178	pushq	%r12
000000000001c17a	pushq	%r13
000000000001c17c	pushq	%r14
000000000001c17e	pushq	%r15
000000000001c180	subq	$0x10, %rsp
000000000001c184	movss	%xmm0, (%rsp)
000000000001c189	subq	$0x10, %rsp
000000000001c18d	movss	%xmm1, (%rsp)
000000000001c192	pushq	%rsi
000000000001c193	pushq	%rdi
000000000001c194	callq	__Z7getBasev ## getBase()
000000000001c199	addq	$0x44c470, %rax
000000000001c19f	popq	%rdi
000000000001c1a0	popq	%rsi
000000000001c1a1	movss	(%rsp), %xmm1
000000000001c1a6	addq	$0x10, %rsp
000000000001c1aa	movss	(%rsp), %xmm0
000000000001c1af	addq	$0x10, %rsp
000000000001c1b3	popq	%r15
000000000001c1b5	popq	%r14
000000000001c1b7	popq	%r13
000000000001c1b9	popq	%r12
000000000001c1bb	popq	%r11
000000000001c1bd	popq	%r10
000000000001c1bf	popq	%r9
000000000001c1c1	popq	%r8
000000000001c1c3	popq	%rcx
000000000001c1c4	popq	%rdx
000000000001c1c5	popq	%rsi
000000000001c1c6	popq	%rdi
000000000001c1c7	popq	%rbx
000000000001c1c8	popq	%rbp
000000000001c1c9	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchBeganEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001c1cb	pushq	%rbp
000000000001c1cc	movq	%rsp, %rbp
000000000001c1cf	pushq	%rbx
000000000001c1d0	pushq	%rdi
000000000001c1d1	pushq	%rsi
000000000001c1d2	pushq	%rdx
000000000001c1d3	pushq	%rcx
000000000001c1d4	pushq	%r8
000000000001c1d6	pushq	%r9
000000000001c1d8	pushq	%r10
000000000001c1da	pushq	%r11
000000000001c1dc	pushq	%r12
000000000001c1de	pushq	%r13
000000000001c1e0	pushq	%r14
000000000001c1e2	pushq	%r15
000000000001c1e4	subq	$0x10, %rsp
000000000001c1e8	movss	%xmm0, (%rsp)
000000000001c1ed	subq	$0x10, %rsp
000000000001c1f1	movss	%xmm1, (%rsp)
000000000001c1f6	pushq	%rsi
000000000001c1f7	pushq	%rdi
000000000001c1f8	callq	__Z7getBasev ## getBase()
000000000001c1fd	addq	$0x273510, %rax
000000000001c203	popq	%rdi
000000000001c204	popq	%rsi
000000000001c205	movss	(%rsp), %xmm1
000000000001c20a	addq	$0x10, %rsp
000000000001c20e	movss	(%rsp), %xmm0
000000000001c213	addq	$0x10, %rsp
000000000001c217	popq	%r15
000000000001c219	popq	%r14
000000000001c21b	popq	%r13
000000000001c21d	popq	%r12
000000000001c21f	popq	%r11
000000000001c221	popq	%r10
000000000001c223	popq	%r9
000000000001c225	popq	%r8
000000000001c227	popq	%rcx
000000000001c228	popq	%rdx
000000000001c229	popq	%rsi
000000000001c22a	popq	%rdi
000000000001c22b	popq	%rbx
000000000001c22c	popq	%rbp
000000000001c22d	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchMovedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001c22f	pushq	%rbp
000000000001c230	movq	%rsp, %rbp
000000000001c233	pushq	%rbx
000000000001c234	pushq	%rdi
000000000001c235	pushq	%rsi
000000000001c236	pushq	%rdx
000000000001c237	pushq	%rcx
000000000001c238	pushq	%r8
000000000001c23a	pushq	%r9
000000000001c23c	pushq	%r10
000000000001c23e	pushq	%r11
000000000001c240	pushq	%r12
000000000001c242	pushq	%r13
000000000001c244	pushq	%r14
000000000001c246	pushq	%r15
000000000001c248	subq	$0x10, %rsp
000000000001c24c	movss	%xmm0, (%rsp)
000000000001c251	subq	$0x10, %rsp
000000000001c255	movss	%xmm1, (%rsp)
000000000001c25a	pushq	%rsi
000000000001c25b	pushq	%rdi
000000000001c25c	callq	__Z7getBasev ## getBase()
000000000001c261	addq	$0x273590, %rax
000000000001c267	popq	%rdi
000000000001c268	popq	%rsi
000000000001c269	movss	(%rsp), %xmm1
000000000001c26e	addq	$0x10, %rsp
000000000001c272	movss	(%rsp), %xmm0
000000000001c277	addq	$0x10, %rsp
000000000001c27b	popq	%r15
000000000001c27d	popq	%r14
000000000001c27f	popq	%r13
000000000001c281	popq	%r12
000000000001c283	popq	%r11
000000000001c285	popq	%r10
000000000001c287	popq	%r9
000000000001c289	popq	%r8
000000000001c28b	popq	%rcx
000000000001c28c	popq	%rdx
000000000001c28d	popq	%rsi
000000000001c28e	popq	%rdi
000000000001c28f	popq	%rbx
000000000001c290	popq	%rbp
000000000001c291	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchEndedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001c293	pushq	%rbp
000000000001c294	movq	%rsp, %rbp
000000000001c297	pushq	%rbx
000000000001c298	pushq	%rdi
000000000001c299	pushq	%rsi
000000000001c29a	pushq	%rdx
000000000001c29b	pushq	%rcx
000000000001c29c	pushq	%r8
000000000001c29e	pushq	%r9
000000000001c2a0	pushq	%r10
000000000001c2a2	pushq	%r11
000000000001c2a4	pushq	%r12
000000000001c2a6	pushq	%r13
000000000001c2a8	pushq	%r14
000000000001c2aa	pushq	%r15
000000000001c2ac	subq	$0x10, %rsp
000000000001c2b0	movss	%xmm0, (%rsp)
000000000001c2b5	subq	$0x10, %rsp
000000000001c2b9	movss	%xmm1, (%rsp)
000000000001c2be	pushq	%rsi
000000000001c2bf	pushq	%rdi
000000000001c2c0	callq	__Z7getBasev ## getBase()
000000000001c2c5	addq	$0x273610, %rax
000000000001c2cb	popq	%rdi
000000000001c2cc	popq	%rsi
000000000001c2cd	movss	(%rsp), %xmm1
000000000001c2d2	addq	$0x10, %rsp
000000000001c2d6	movss	(%rsp), %xmm0
000000000001c2db	addq	$0x10, %rsp
000000000001c2df	popq	%r15
000000000001c2e1	popq	%r14
000000000001c2e3	popq	%r13
000000000001c2e5	popq	%r12
000000000001c2e7	popq	%r11
000000000001c2e9	popq	%r10
000000000001c2eb	popq	%r9
000000000001c2ed	popq	%r8
000000000001c2ef	popq	%rcx
000000000001c2f0	popq	%rdx
000000000001c2f1	popq	%rsi
000000000001c2f2	popq	%rdi
000000000001c2f3	popq	%rbx
000000000001c2f4	popq	%rbp
000000000001c2f5	jmpq	*%rax
__ZThn288_N12FLAlertLayer16ccTouchCancelledEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001c2f7	pushq	%rbp
000000000001c2f8	movq	%rsp, %rbp
000000000001c2fb	pushq	%rbx
000000000001c2fc	pushq	%rdi
000000000001c2fd	pushq	%rsi
000000000001c2fe	pushq	%rdx
000000000001c2ff	pushq	%rcx
000000000001c300	pushq	%r8
000000000001c302	pushq	%r9
000000000001c304	pushq	%r10
000000000001c306	pushq	%r11
000000000001c308	pushq	%r12
000000000001c30a	pushq	%r13
000000000001c30c	pushq	%r14
000000000001c30e	pushq	%r15
000000000001c310	subq	$0x10, %rsp
000000000001c314	movss	%xmm0, (%rsp)
000000000001c319	subq	$0x10, %rsp
000000000001c31d	movss	%xmm1, (%rsp)
000000000001c322	pushq	%rsi
000000000001c323	pushq	%rdi
000000000001c324	callq	__Z7getBasev ## getBase()
000000000001c329	addq	$0x273690, %rax
000000000001c32f	popq	%rdi
000000000001c330	popq	%rsi
000000000001c331	movss	(%rsp), %xmm1
000000000001c336	addq	$0x10, %rsp
000000000001c33a	movss	(%rsp), %xmm0
000000000001c33f	addq	$0x10, %rsp
000000000001c343	popq	%r15
000000000001c345	popq	%r14
000000000001c347	popq	%r13
000000000001c349	popq	%r12
000000000001c34b	popq	%r11
000000000001c34d	popq	%r10
000000000001c34f	popq	%r9
000000000001c351	popq	%r8
000000000001c353	popq	%rcx
000000000001c354	popq	%rdx
000000000001c355	popq	%rsi
000000000001c356	popq	%rdi
000000000001c357	popq	%rbx
000000000001c358	popq	%rbp
000000000001c359	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesBeganEPNS_5CCSetEPNS_7CCEventE:
000000000001c35b	pushq	%rbp
000000000001c35c	movq	%rsp, %rbp
000000000001c35f	pushq	%rbx
000000000001c360	pushq	%rdi
000000000001c361	pushq	%rsi
000000000001c362	pushq	%rdx
000000000001c363	pushq	%rcx
000000000001c364	pushq	%r8
000000000001c366	pushq	%r9
000000000001c368	pushq	%r10
000000000001c36a	pushq	%r11
000000000001c36c	pushq	%r12
000000000001c36e	pushq	%r13
000000000001c370	pushq	%r14
000000000001c372	pushq	%r15
000000000001c374	subq	$0x10, %rsp
000000000001c378	movss	%xmm0, (%rsp)
000000000001c37d	subq	$0x10, %rsp
000000000001c381	movss	%xmm1, (%rsp)
000000000001c386	pushq	%rsi
000000000001c387	pushq	%rdi
000000000001c388	callq	__Z7getBasev ## getBase()
000000000001c38d	addq	$0x273710, %rax
000000000001c393	popq	%rdi
000000000001c394	popq	%rsi
000000000001c395	movss	(%rsp), %xmm1
000000000001c39a	addq	$0x10, %rsp
000000000001c39e	movss	(%rsp), %xmm0
000000000001c3a3	addq	$0x10, %rsp
000000000001c3a7	popq	%r15
000000000001c3a9	popq	%r14
000000000001c3ab	popq	%r13
000000000001c3ad	popq	%r12
000000000001c3af	popq	%r11
000000000001c3b1	popq	%r10
000000000001c3b3	popq	%r9
000000000001c3b5	popq	%r8
000000000001c3b7	popq	%rcx
000000000001c3b8	popq	%rdx
000000000001c3b9	popq	%rsi
000000000001c3ba	popq	%rdi
000000000001c3bb	popq	%rbx
000000000001c3bc	popq	%rbp
000000000001c3bd	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesMovedEPNS_5CCSetEPNS_7CCEventE:
000000000001c3bf	pushq	%rbp
000000000001c3c0	movq	%rsp, %rbp
000000000001c3c3	pushq	%rbx
000000000001c3c4	pushq	%rdi
000000000001c3c5	pushq	%rsi
000000000001c3c6	pushq	%rdx
000000000001c3c7	pushq	%rcx
000000000001c3c8	pushq	%r8
000000000001c3ca	pushq	%r9
000000000001c3cc	pushq	%r10
000000000001c3ce	pushq	%r11
000000000001c3d0	pushq	%r12
000000000001c3d2	pushq	%r13
000000000001c3d4	pushq	%r14
000000000001c3d6	pushq	%r15
000000000001c3d8	subq	$0x10, %rsp
000000000001c3dc	movss	%xmm0, (%rsp)
000000000001c3e1	subq	$0x10, %rsp
000000000001c3e5	movss	%xmm1, (%rsp)
000000000001c3ea	pushq	%rsi
000000000001c3eb	pushq	%rdi
000000000001c3ec	callq	__Z7getBasev ## getBase()
000000000001c3f1	addq	$0x273790, %rax
000000000001c3f7	popq	%rdi
000000000001c3f8	popq	%rsi
000000000001c3f9	movss	(%rsp), %xmm1
000000000001c3fe	addq	$0x10, %rsp
000000000001c402	movss	(%rsp), %xmm0
000000000001c407	addq	$0x10, %rsp
000000000001c40b	popq	%r15
000000000001c40d	popq	%r14
000000000001c40f	popq	%r13
000000000001c411	popq	%r12
000000000001c413	popq	%r11
000000000001c415	popq	%r10
000000000001c417	popq	%r9
000000000001c419	popq	%r8
000000000001c41b	popq	%rcx
000000000001c41c	popq	%rdx
000000000001c41d	popq	%rsi
000000000001c41e	popq	%rdi
000000000001c41f	popq	%rbx
000000000001c420	popq	%rbp
000000000001c421	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesEndedEPNS_5CCSetEPNS_7CCEventE:
000000000001c423	pushq	%rbp
000000000001c424	movq	%rsp, %rbp
000000000001c427	pushq	%rbx
000000000001c428	pushq	%rdi
000000000001c429	pushq	%rsi
000000000001c42a	pushq	%rdx
000000000001c42b	pushq	%rcx
000000000001c42c	pushq	%r8
000000000001c42e	pushq	%r9
000000000001c430	pushq	%r10
000000000001c432	pushq	%r11
000000000001c434	pushq	%r12
000000000001c436	pushq	%r13
000000000001c438	pushq	%r14
000000000001c43a	pushq	%r15
000000000001c43c	subq	$0x10, %rsp
000000000001c440	movss	%xmm0, (%rsp)
000000000001c445	subq	$0x10, %rsp
000000000001c449	movss	%xmm1, (%rsp)
000000000001c44e	pushq	%rsi
000000000001c44f	pushq	%rdi
000000000001c450	callq	__Z7getBasev ## getBase()
000000000001c455	addq	$0x273810, %rax
000000000001c45b	popq	%rdi
000000000001c45c	popq	%rsi
000000000001c45d	movss	(%rsp), %xmm1
000000000001c462	addq	$0x10, %rsp
000000000001c466	movss	(%rsp), %xmm0
000000000001c46b	addq	$0x10, %rsp
000000000001c46f	popq	%r15
000000000001c471	popq	%r14
000000000001c473	popq	%r13
000000000001c475	popq	%r12
000000000001c477	popq	%r11
000000000001c479	popq	%r10
000000000001c47b	popq	%r9
000000000001c47d	popq	%r8
000000000001c47f	popq	%rcx
000000000001c480	popq	%rdx
000000000001c481	popq	%rsi
000000000001c482	popq	%rdi
000000000001c483	popq	%rbx
000000000001c484	popq	%rbp
000000000001c485	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer18ccTouchesCancelledEPNS_5CCSetEPNS_7CCEventE:
000000000001c487	pushq	%rbp
000000000001c488	movq	%rsp, %rbp
000000000001c48b	pushq	%rbx
000000000001c48c	pushq	%rdi
000000000001c48d	pushq	%rsi
000000000001c48e	pushq	%rdx
000000000001c48f	pushq	%rcx
000000000001c490	pushq	%r8
000000000001c492	pushq	%r9
000000000001c494	pushq	%r10
000000000001c496	pushq	%r11
000000000001c498	pushq	%r12
000000000001c49a	pushq	%r13
000000000001c49c	pushq	%r14
000000000001c49e	pushq	%r15
000000000001c4a0	subq	$0x10, %rsp
000000000001c4a4	movss	%xmm0, (%rsp)
000000000001c4a9	subq	$0x10, %rsp
000000000001c4ad	movss	%xmm1, (%rsp)
000000000001c4b2	pushq	%rsi
000000000001c4b3	pushq	%rdi
000000000001c4b4	callq	__Z7getBasev ## getBase()
000000000001c4b9	addq	$0x273890, %rax
000000000001c4bf	popq	%rdi
000000000001c4c0	popq	%rsi
000000000001c4c1	movss	(%rsp), %xmm1
000000000001c4c6	addq	$0x10, %rsp
000000000001c4ca	movss	(%rsp), %xmm0
000000000001c4cf	addq	$0x10, %rsp
000000000001c4d3	popq	%r15
000000000001c4d5	popq	%r14
000000000001c4d7	popq	%r13
000000000001c4d9	popq	%r12
000000000001c4db	popq	%r11
000000000001c4dd	popq	%r10
000000000001c4df	popq	%r9
000000000001c4e1	popq	%r8
000000000001c4e3	popq	%rcx
000000000001c4e4	popq	%rdx
000000000001c4e5	popq	%rsi
000000000001c4e6	popq	%rdi
000000000001c4e7	popq	%rbx
000000000001c4e8	popq	%rbp
000000000001c4e9	jmpq	*%rax
__ZThn296_N7cocos2d7CCLayer13didAccelerateEPNS_14CCAccelerationE:
000000000001c4eb	pushq	%rbp
000000000001c4ec	movq	%rsp, %rbp
000000000001c4ef	pushq	%rbx
000000000001c4f0	pushq	%rdi
000000000001c4f1	pushq	%rsi
000000000001c4f2	pushq	%rdx
000000000001c4f3	pushq	%rcx
000000000001c4f4	pushq	%r8
000000000001c4f6	pushq	%r9
000000000001c4f8	pushq	%r10
000000000001c4fa	pushq	%r11
000000000001c4fc	pushq	%r12
000000000001c4fe	pushq	%r13
000000000001c500	pushq	%r14
000000000001c502	pushq	%r15
000000000001c504	subq	$0x10, %rsp
000000000001c508	movss	%xmm0, (%rsp)
000000000001c50d	subq	$0x10, %rsp
000000000001c511	movss	%xmm1, (%rsp)
000000000001c516	pushq	%rsi
000000000001c517	pushq	%rdi
000000000001c518	callq	__Z7getBasev ## getBase()
000000000001c51d	addq	$0x272ee0, %rax
000000000001c523	popq	%rdi
000000000001c524	popq	%rsi
000000000001c525	movss	(%rsp), %xmm1
000000000001c52a	addq	$0x10, %rsp
000000000001c52e	movss	(%rsp), %xmm0
000000000001c533	addq	$0x10, %rsp
000000000001c537	popq	%r15
000000000001c539	popq	%r14
000000000001c53b	popq	%r13
000000000001c53d	popq	%r12
000000000001c53f	popq	%r11
000000000001c541	popq	%r10
000000000001c543	popq	%r9
000000000001c545	popq	%r8
000000000001c547	popq	%rcx
000000000001c548	popq	%rdx
000000000001c549	popq	%rsi
000000000001c54a	popq	%rdi
000000000001c54b	popq	%rbx
000000000001c54c	popq	%rbp
000000000001c54d	jmpq	*%rax
__ZThn304_N7cocos2d7CCLayer14keyMenuClickedEv:
000000000001c54f	pushq	%rbp
000000000001c550	movq	%rsp, %rbp
000000000001c553	pushq	%rbx
000000000001c554	pushq	%rdi
000000000001c555	pushq	%rsi
000000000001c556	pushq	%rdx
000000000001c557	pushq	%rcx
000000000001c558	pushq	%r8
000000000001c55a	pushq	%r9
000000000001c55c	pushq	%r10
000000000001c55e	pushq	%r11
000000000001c560	pushq	%r12
000000000001c562	pushq	%r13
000000000001c564	pushq	%r14
000000000001c566	pushq	%r15
000000000001c568	subq	$0x10, %rsp
000000000001c56c	movss	%xmm0, (%rsp)
000000000001c571	subq	$0x10, %rsp
000000000001c575	movss	%xmm1, (%rsp)
000000000001c57a	pushq	%rsi
000000000001c57b	pushq	%rdi
000000000001c57c	callq	__Z7getBasev ## getBase()
000000000001c581	addq	$0x273240, %rax
000000000001c587	popq	%rdi
000000000001c588	popq	%rsi
000000000001c589	movss	(%rsp), %xmm1
000000000001c58e	addq	$0x10, %rsp
000000000001c592	movss	(%rsp), %xmm0
000000000001c597	addq	$0x10, %rsp
000000000001c59b	popq	%r15
000000000001c59d	popq	%r14
000000000001c59f	popq	%r13
000000000001c5a1	popq	%r12
000000000001c5a3	popq	%r11
000000000001c5a5	popq	%r10
000000000001c5a7	popq	%r9
000000000001c5a9	popq	%r8
000000000001c5ab	popq	%rcx
000000000001c5ac	popq	%rdx
000000000001c5ad	popq	%rsi
000000000001c5ae	popq	%rdi
000000000001c5af	popq	%rbx
000000000001c5b0	popq	%rbp
000000000001c5b1	jmpq	*%rax
__ZThn304_N12FLAlertLayer14keyBackClickedEv:
000000000001c5b3	pushq	%rbp
000000000001c5b4	movq	%rsp, %rbp
000000000001c5b7	pushq	%rbx
000000000001c5b8	pushq	%rdi
000000000001c5b9	pushq	%rsi
000000000001c5ba	pushq	%rdx
000000000001c5bb	pushq	%rcx
000000000001c5bc	pushq	%r8
000000000001c5be	pushq	%r9
000000000001c5c0	pushq	%r10
000000000001c5c2	pushq	%r11
000000000001c5c4	pushq	%r12
000000000001c5c6	pushq	%r13
000000000001c5c8	pushq	%r14
000000000001c5ca	pushq	%r15
000000000001c5cc	subq	$0x10, %rsp
000000000001c5d0	movss	%xmm0, (%rsp)
000000000001c5d5	subq	$0x10, %rsp
000000000001c5d9	movss	%xmm1, (%rsp)
000000000001c5de	pushq	%rsi
000000000001c5df	pushq	%rdi
000000000001c5e0	callq	__Z7getBasev ## getBase()
000000000001c5e5	addq	$0x25ed90, %rax
000000000001c5eb	popq	%rdi
000000000001c5ec	popq	%rsi
000000000001c5ed	movss	(%rsp), %xmm1
000000000001c5f2	addq	$0x10, %rsp
000000000001c5f6	movss	(%rsp), %xmm0
000000000001c5fb	addq	$0x10, %rsp
000000000001c5ff	popq	%r15
000000000001c601	popq	%r14
000000000001c603	popq	%r13
000000000001c605	popq	%r12
000000000001c607	popq	%r11
000000000001c609	popq	%r10
000000000001c60b	popq	%r9
000000000001c60d	popq	%r8
000000000001c60f	popq	%rcx
000000000001c610	popq	%rdx
000000000001c611	popq	%rsi
000000000001c612	popq	%rdi
000000000001c613	popq	%rbx
000000000001c614	popq	%rbp
000000000001c615	jmpq	*%rax
__ZThn312_N12FLAlertLayer7keyDownEN7cocos2d12enumKeyCodesE:
000000000001c617	pushq	%rbp
000000000001c618	movq	%rsp, %rbp
000000000001c61b	pushq	%rbx
000000000001c61c	pushq	%rdi
000000000001c61d	pushq	%rsi
000000000001c61e	pushq	%rdx
000000000001c61f	pushq	%rcx
000000000001c620	pushq	%r8
000000000001c622	pushq	%r9
000000000001c624	pushq	%r10
000000000001c626	pushq	%r11
000000000001c628	pushq	%r12
000000000001c62a	pushq	%r13
000000000001c62c	pushq	%r14
000000000001c62e	pushq	%r15
000000000001c630	subq	$0x10, %rsp
000000000001c634	movss	%xmm0, (%rsp)
000000000001c639	subq	$0x10, %rsp
000000000001c63d	movss	%xmm1, (%rsp)
000000000001c642	pushq	%rsi
000000000001c643	pushq	%rdi
000000000001c644	callq	__Z7getBasev ## getBase()
000000000001c649	addq	$0x2732c0, %rax
000000000001c64f	popq	%rdi
000000000001c650	popq	%rsi
000000000001c651	movss	(%rsp), %xmm1
000000000001c656	addq	$0x10, %rsp
000000000001c65a	movss	(%rsp), %xmm0
000000000001c65f	addq	$0x10, %rsp
000000000001c663	popq	%r15
000000000001c665	popq	%r14
000000000001c667	popq	%r13
000000000001c669	popq	%r12
000000000001c66b	popq	%r11
000000000001c66d	popq	%r10
000000000001c66f	popq	%r9
000000000001c671	popq	%r8
000000000001c673	popq	%rcx
000000000001c674	popq	%rdx
000000000001c675	popq	%rsi
000000000001c676	popq	%rdi
000000000001c677	popq	%rbx
000000000001c678	popq	%rbp
000000000001c679	jmpq	*%rax
__ZN7cocos2d18CCKeyboardDelegate5keyUpENS_12enumKeyCodesE:
000000000001c67b	pushq	%rbp
000000000001c67c	movq	%rsp, %rbp
000000000001c67f	pushq	%rbx
000000000001c680	pushq	%rdi
000000000001c681	pushq	%rsi
000000000001c682	pushq	%rdx
000000000001c683	pushq	%rcx
000000000001c684	pushq	%r8
000000000001c686	pushq	%r9
000000000001c688	pushq	%r10
000000000001c68a	pushq	%r11
000000000001c68c	pushq	%r12
000000000001c68e	pushq	%r13
000000000001c690	pushq	%r14
000000000001c692	pushq	%r15
000000000001c694	subq	$0x10, %rsp
000000000001c698	movss	%xmm0, (%rsp)
000000000001c69d	subq	$0x10, %rsp
000000000001c6a1	movss	%xmm1, (%rsp)
000000000001c6a6	pushq	%rsi
000000000001c6a7	pushq	%rdi
000000000001c6a8	callq	__Z7getBasev ## getBase()
000000000001c6ad	addq	$0x61a0, %rax
000000000001c6b3	popq	%rdi
000000000001c6b4	popq	%rsi
000000000001c6b5	movss	(%rsp), %xmm1
000000000001c6ba	addq	$0x10, %rsp
000000000001c6be	movss	(%rsp), %xmm0
000000000001c6c3	addq	$0x10, %rsp
000000000001c6c7	popq	%r15
000000000001c6c9	popq	%r14
000000000001c6cb	popq	%r13
000000000001c6cd	popq	%r12
000000000001c6cf	popq	%r11
000000000001c6d1	popq	%r10
000000000001c6d3	popq	%r9
000000000001c6d5	popq	%r8
000000000001c6d7	popq	%rcx
000000000001c6d8	popq	%rdx
000000000001c6d9	popq	%rsi
000000000001c6da	popq	%rdi
000000000001c6db	popq	%rbx
000000000001c6dc	popq	%rbp
000000000001c6dd	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate12rightKeyDownEv:
000000000001c6df	pushq	%rbp
000000000001c6e0	movq	%rsp, %rbp
000000000001c6e3	pushq	%rbx
000000000001c6e4	pushq	%rdi
000000000001c6e5	pushq	%rsi
000000000001c6e6	pushq	%rdx
000000000001c6e7	pushq	%rcx
000000000001c6e8	pushq	%r8
000000000001c6ea	pushq	%r9
000000000001c6ec	pushq	%r10
000000000001c6ee	pushq	%r11
000000000001c6f0	pushq	%r12
000000000001c6f2	pushq	%r13
000000000001c6f4	pushq	%r14
000000000001c6f6	pushq	%r15
000000000001c6f8	subq	$0x10, %rsp
000000000001c6fc	movss	%xmm0, (%rsp)
000000000001c701	subq	$0x10, %rsp
000000000001c705	movss	%xmm1, (%rsp)
000000000001c70a	pushq	%rsi
000000000001c70b	pushq	%rdi
000000000001c70c	callq	__Z7getBasev ## getBase()
000000000001c711	addq	$0x61b0, %rax
000000000001c717	popq	%rdi
000000000001c718	popq	%rsi
000000000001c719	movss	(%rsp), %xmm1
000000000001c71e	addq	$0x10, %rsp
000000000001c722	movss	(%rsp), %xmm0
000000000001c727	addq	$0x10, %rsp
000000000001c72b	popq	%r15
000000000001c72d	popq	%r14
000000000001c72f	popq	%r13
000000000001c731	popq	%r12
000000000001c733	popq	%r11
000000000001c735	popq	%r10
000000000001c737	popq	%r9
000000000001c739	popq	%r8
000000000001c73b	popq	%rcx
000000000001c73c	popq	%rdx
000000000001c73d	popq	%rsi
000000000001c73e	popq	%rdi
000000000001c73f	popq	%rbx
000000000001c740	popq	%rbp
000000000001c741	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate10rightKeyUpEv:
000000000001c743	pushq	%rbp
000000000001c744	movq	%rsp, %rbp
000000000001c747	pushq	%rbx
000000000001c748	pushq	%rdi
000000000001c749	pushq	%rsi
000000000001c74a	pushq	%rdx
000000000001c74b	pushq	%rcx
000000000001c74c	pushq	%r8
000000000001c74e	pushq	%r9
000000000001c750	pushq	%r10
000000000001c752	pushq	%r11
000000000001c754	pushq	%r12
000000000001c756	pushq	%r13
000000000001c758	pushq	%r14
000000000001c75a	pushq	%r15
000000000001c75c	subq	$0x10, %rsp
000000000001c760	movss	%xmm0, (%rsp)
000000000001c765	subq	$0x10, %rsp
000000000001c769	movss	%xmm1, (%rsp)
000000000001c76e	pushq	%rsi
000000000001c76f	pushq	%rdi
000000000001c770	callq	__Z7getBasev ## getBase()
000000000001c775	addq	$0x61c0, %rax
000000000001c77b	popq	%rdi
000000000001c77c	popq	%rsi
000000000001c77d	movss	(%rsp), %xmm1
000000000001c782	addq	$0x10, %rsp
000000000001c786	movss	(%rsp), %xmm0
000000000001c78b	addq	$0x10, %rsp
000000000001c78f	popq	%r15
000000000001c791	popq	%r14
000000000001c793	popq	%r13
000000000001c795	popq	%r12
000000000001c797	popq	%r11
000000000001c799	popq	%r10
000000000001c79b	popq	%r9
000000000001c79d	popq	%r8
000000000001c79f	popq	%rcx
000000000001c7a0	popq	%rdx
000000000001c7a1	popq	%rsi
000000000001c7a2	popq	%rdi
000000000001c7a3	popq	%rbx
000000000001c7a4	popq	%rbp
000000000001c7a5	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate11scrollWheelEff:
000000000001c7a7	pushq	%rbp
000000000001c7a8	movq	%rsp, %rbp
000000000001c7ab	pushq	%rbx
000000000001c7ac	pushq	%rdi
000000000001c7ad	pushq	%rsi
000000000001c7ae	pushq	%rdx
000000000001c7af	pushq	%rcx
000000000001c7b0	pushq	%r8
000000000001c7b2	pushq	%r9
000000000001c7b4	pushq	%r10
000000000001c7b6	pushq	%r11
000000000001c7b8	pushq	%r12
000000000001c7ba	pushq	%r13
000000000001c7bc	pushq	%r14
000000000001c7be	pushq	%r15
000000000001c7c0	subq	$0x10, %rsp
000000000001c7c4	movss	%xmm0, (%rsp)
000000000001c7c9	subq	$0x10, %rsp
000000000001c7cd	movss	%xmm1, (%rsp)
000000000001c7d2	pushq	%rsi
000000000001c7d3	pushq	%rdi
000000000001c7d4	callq	__Z7getBasev ## getBase()
000000000001c7d9	addq	$0x61d0, %rax
000000000001c7df	popq	%rdi
000000000001c7e0	popq	%rsi
000000000001c7e1	movss	(%rsp), %xmm1
000000000001c7e6	addq	$0x10, %rsp
000000000001c7ea	movss	(%rsp), %xmm0
000000000001c7ef	addq	$0x10, %rsp
000000000001c7f3	popq	%r15
000000000001c7f5	popq	%r14
000000000001c7f7	popq	%r13
000000000001c7f9	popq	%r12
000000000001c7fb	popq	%r11
000000000001c7fd	popq	%r10
000000000001c7ff	popq	%r9
000000000001c801	popq	%r8
000000000001c803	popq	%rcx
000000000001c804	popq	%rdx
000000000001c805	popq	%rsi
000000000001c806	popq	%rdi
000000000001c807	popq	%rbx
000000000001c808	popq	%rbp
000000000001c809	jmpq	*%rax
__ZThn368_N7cocos2d12CCLayerColor8setColorERKNS_10_ccColor3BE:
000000000001c80b	pushq	%rbp
000000000001c80c	movq	%rsp, %rbp
000000000001c80f	pushq	%rbx
000000000001c810	pushq	%rdi
000000000001c811	pushq	%rsi
000000000001c812	pushq	%rdx
000000000001c813	pushq	%rcx
000000000001c814	pushq	%r8
000000000001c816	pushq	%r9
000000000001c818	pushq	%r10
000000000001c81a	pushq	%r11
000000000001c81c	pushq	%r12
000000000001c81e	pushq	%r13
000000000001c820	pushq	%r14
000000000001c822	pushq	%r15
000000000001c824	subq	$0x10, %rsp
000000000001c828	movss	%xmm0, (%rsp)
000000000001c82d	subq	$0x10, %rsp
000000000001c831	movss	%xmm1, (%rsp)
000000000001c836	pushq	%rsi
000000000001c837	pushq	%rdi
000000000001c838	callq	__Z7getBasev ## getBase()
000000000001c83d	addq	$0x274cf0, %rax
000000000001c843	popq	%rdi
000000000001c844	popq	%rsi
000000000001c845	movss	(%rsp), %xmm1
000000000001c84a	addq	$0x10, %rsp
000000000001c84e	movss	(%rsp), %xmm0
000000000001c853	addq	$0x10, %rsp
000000000001c857	popq	%r15
000000000001c859	popq	%r14
000000000001c85b	popq	%r13
000000000001c85d	popq	%r12
000000000001c85f	popq	%r11
000000000001c861	popq	%r10
000000000001c863	popq	%r9
000000000001c865	popq	%r8
000000000001c867	popq	%rcx
000000000001c868	popq	%rdx
000000000001c869	popq	%rsi
000000000001c86a	popq	%rdi
000000000001c86b	popq	%rbx
000000000001c86c	popq	%rbp
000000000001c86d	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA8getColorEv:
000000000001c86f	pushq	%rbp
000000000001c870	movq	%rsp, %rbp
000000000001c873	pushq	%rbx
000000000001c874	pushq	%rdi
000000000001c875	pushq	%rsi
000000000001c876	pushq	%rdx
000000000001c877	pushq	%rcx
000000000001c878	pushq	%r8
000000000001c87a	pushq	%r9
000000000001c87c	pushq	%r10
000000000001c87e	pushq	%r11
000000000001c880	pushq	%r12
000000000001c882	pushq	%r13
000000000001c884	pushq	%r14
000000000001c886	pushq	%r15
000000000001c888	subq	$0x10, %rsp
000000000001c88c	movss	%xmm0, (%rsp)
000000000001c891	subq	$0x10, %rsp
000000000001c895	movss	%xmm1, (%rsp)
000000000001c89a	pushq	%rsi
000000000001c89b	pushq	%rdi
000000000001c89c	callq	__Z7getBasev ## getBase()
000000000001c8a1	addq	$0x273d70, %rax
000000000001c8a7	popq	%rdi
000000000001c8a8	popq	%rsi
000000000001c8a9	movss	(%rsp), %xmm1
000000000001c8ae	addq	$0x10, %rsp
000000000001c8b2	movss	(%rsp), %xmm0
000000000001c8b7	addq	$0x10, %rsp
000000000001c8bb	popq	%r15
000000000001c8bd	popq	%r14
000000000001c8bf	popq	%r13
000000000001c8c1	popq	%r12
000000000001c8c3	popq	%r11
000000000001c8c5	popq	%r10
000000000001c8c7	popq	%r9
000000000001c8c9	popq	%r8
000000000001c8cb	popq	%rcx
000000000001c8cc	popq	%rdx
000000000001c8cd	popq	%rsi
000000000001c8ce	popq	%rdi
000000000001c8cf	popq	%rbx
000000000001c8d0	popq	%rbp
000000000001c8d1	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA17getDisplayedColorEv:
000000000001c8d3	pushq	%rbp
000000000001c8d4	movq	%rsp, %rbp
000000000001c8d7	pushq	%rbx
000000000001c8d8	pushq	%rdi
000000000001c8d9	pushq	%rsi
000000000001c8da	pushq	%rdx
000000000001c8db	pushq	%rcx
000000000001c8dc	pushq	%r8
000000000001c8de	pushq	%r9
000000000001c8e0	pushq	%r10
000000000001c8e2	pushq	%r11
000000000001c8e4	pushq	%r12
000000000001c8e6	pushq	%r13
000000000001c8e8	pushq	%r14
000000000001c8ea	pushq	%r15
000000000001c8ec	subq	$0x10, %rsp
000000000001c8f0	movss	%xmm0, (%rsp)
000000000001c8f5	subq	$0x10, %rsp
000000000001c8f9	movss	%xmm1, (%rsp)
000000000001c8fe	pushq	%rsi
000000000001c8ff	pushq	%rdi
000000000001c900	callq	__Z7getBasev ## getBase()
000000000001c905	addq	$0x273d90, %rax
000000000001c90b	popq	%rdi
000000000001c90c	popq	%rsi
000000000001c90d	movss	(%rsp), %xmm1
000000000001c912	addq	$0x10, %rsp
000000000001c916	movss	(%rsp), %xmm0
000000000001c91b	addq	$0x10, %rsp
000000000001c91f	popq	%r15
000000000001c921	popq	%r14
000000000001c923	popq	%r13
000000000001c925	popq	%r12
000000000001c927	popq	%r11
000000000001c929	popq	%r10
000000000001c92b	popq	%r9
000000000001c92d	popq	%r8
000000000001c92f	popq	%rcx
000000000001c930	popq	%rdx
000000000001c931	popq	%rsi
000000000001c932	popq	%rdi
000000000001c933	popq	%rbx
000000000001c934	popq	%rbp
000000000001c935	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA19getDisplayedOpacityEv:
000000000001c937	pushq	%rbp
000000000001c938	movq	%rsp, %rbp
000000000001c93b	pushq	%rbx
000000000001c93c	pushq	%rdi
000000000001c93d	pushq	%rsi
000000000001c93e	pushq	%rdx
000000000001c93f	pushq	%rcx
000000000001c940	pushq	%r8
000000000001c942	pushq	%r9
000000000001c944	pushq	%r10
000000000001c946	pushq	%r11
000000000001c948	pushq	%r12
000000000001c94a	pushq	%r13
000000000001c94c	pushq	%r14
000000000001c94e	pushq	%r15
000000000001c950	subq	$0x10, %rsp
000000000001c954	movss	%xmm0, (%rsp)
000000000001c959	subq	$0x10, %rsp
000000000001c95d	movss	%xmm1, (%rsp)
000000000001c962	pushq	%rsi
000000000001c963	pushq	%rdi
000000000001c964	callq	__Z7getBasev ## getBase()
000000000001c969	addq	$0x273c10, %rax
000000000001c96f	popq	%rdi
000000000001c970	popq	%rsi
000000000001c971	movss	(%rsp), %xmm1
000000000001c976	addq	$0x10, %rsp
000000000001c97a	movss	(%rsp), %xmm0
000000000001c97f	addq	$0x10, %rsp
000000000001c983	popq	%r15
000000000001c985	popq	%r14
000000000001c987	popq	%r13
000000000001c989	popq	%r12
000000000001c98b	popq	%r11
000000000001c98d	popq	%r10
000000000001c98f	popq	%r9
000000000001c991	popq	%r8
000000000001c993	popq	%rcx
000000000001c994	popq	%rdx
000000000001c995	popq	%rsi
000000000001c996	popq	%rdi
000000000001c997	popq	%rbx
000000000001c998	popq	%rbp
000000000001c999	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA10getOpacityEv:
000000000001c99b	pushq	%rbp
000000000001c99c	movq	%rsp, %rbp
000000000001c99f	pushq	%rbx
000000000001c9a0	pushq	%rdi
000000000001c9a1	pushq	%rsi
000000000001c9a2	pushq	%rdx
000000000001c9a3	pushq	%rcx
000000000001c9a4	pushq	%r8
000000000001c9a6	pushq	%r9
000000000001c9a8	pushq	%r10
000000000001c9aa	pushq	%r11
000000000001c9ac	pushq	%r12
000000000001c9ae	pushq	%r13
000000000001c9b0	pushq	%r14
000000000001c9b2	pushq	%r15
000000000001c9b4	subq	$0x10, %rsp
000000000001c9b8	movss	%xmm0, (%rsp)
000000000001c9bd	subq	$0x10, %rsp
000000000001c9c1	movss	%xmm1, (%rsp)
000000000001c9c6	pushq	%rsi
000000000001c9c7	pushq	%rdi
000000000001c9c8	callq	__Z7getBasev ## getBase()
000000000001c9cd	addq	$0x273bf0, %rax
000000000001c9d3	popq	%rdi
000000000001c9d4	popq	%rsi
000000000001c9d5	movss	(%rsp), %xmm1
000000000001c9da	addq	$0x10, %rsp
000000000001c9de	movss	(%rsp), %xmm0
000000000001c9e3	addq	$0x10, %rsp
000000000001c9e7	popq	%r15
000000000001c9e9	popq	%r14
000000000001c9eb	popq	%r13
000000000001c9ed	popq	%r12
000000000001c9ef	popq	%r11
000000000001c9f1	popq	%r10
000000000001c9f3	popq	%r9
000000000001c9f5	popq	%r8
000000000001c9f7	popq	%rcx
000000000001c9f8	popq	%rdx
000000000001c9f9	popq	%rsi
000000000001c9fa	popq	%rdi
000000000001c9fb	popq	%rbx
000000000001c9fc	popq	%rbp
000000000001c9fd	jmpq	*%rax
__ZThn368_N7cocos2d12CCLayerColor10setOpacityEh:
000000000001c9ff	pushq	%rbp
000000000001ca00	movq	%rsp, %rbp
000000000001ca03	pushq	%rbx
000000000001ca04	pushq	%rdi
000000000001ca05	pushq	%rsi
000000000001ca06	pushq	%rdx
000000000001ca07	pushq	%rcx
000000000001ca08	pushq	%r8
000000000001ca0a	pushq	%r9
000000000001ca0c	pushq	%r10
000000000001ca0e	pushq	%r11
000000000001ca10	pushq	%r12
000000000001ca12	pushq	%r13
000000000001ca14	pushq	%r14
000000000001ca16	pushq	%r15
000000000001ca18	subq	$0x10, %rsp
000000000001ca1c	movss	%xmm0, (%rsp)
000000000001ca21	subq	$0x10, %rsp
000000000001ca25	movss	%xmm1, (%rsp)
000000000001ca2a	pushq	%rsi
000000000001ca2b	pushq	%rdi
000000000001ca2c	callq	__Z7getBasev ## getBase()
000000000001ca31	addq	$0x274e50, %rax
000000000001ca37	popq	%rdi
000000000001ca38	popq	%rsi
000000000001ca39	movss	(%rsp), %xmm1
000000000001ca3e	addq	$0x10, %rsp
000000000001ca42	movss	(%rsp), %xmm0
000000000001ca47	addq	$0x10, %rsp
000000000001ca4b	popq	%r15
000000000001ca4d	popq	%r14
000000000001ca4f	popq	%r13
000000000001ca51	popq	%r12
000000000001ca53	popq	%r11
000000000001ca55	popq	%r10
000000000001ca57	popq	%r9
000000000001ca59	popq	%r8
000000000001ca5b	popq	%rcx
000000000001ca5c	popq	%rdx
000000000001ca5d	popq	%rsi
000000000001ca5e	popq	%rdi
000000000001ca5f	popq	%rbx
000000000001ca60	popq	%rbp
000000000001ca61	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA19setOpacityModifyRGBEb:
000000000001ca63	pushq	%rbp
000000000001ca64	movq	%rsp, %rbp
000000000001ca67	pushq	%rbx
000000000001ca68	pushq	%rdi
000000000001ca69	pushq	%rsi
000000000001ca6a	pushq	%rdx
000000000001ca6b	pushq	%rcx
000000000001ca6c	pushq	%r8
000000000001ca6e	pushq	%r9
000000000001ca70	pushq	%r10
000000000001ca72	pushq	%r11
000000000001ca74	pushq	%r12
000000000001ca76	pushq	%r13
000000000001ca78	pushq	%r14
000000000001ca7a	pushq	%r15
000000000001ca7c	subq	$0x10, %rsp
000000000001ca80	movss	%xmm0, (%rsp)
000000000001ca85	subq	$0x10, %rsp
000000000001ca89	movss	%xmm1, (%rsp)
000000000001ca8e	pushq	%rsi
000000000001ca8f	pushq	%rdi
000000000001ca90	callq	__Z7getBasev ## getBase()
000000000001ca95	addq	$0x61e0, %rax
000000000001ca9b	popq	%rdi
000000000001ca9c	popq	%rsi
000000000001ca9d	movss	(%rsp), %xmm1
000000000001caa2	addq	$0x10, %rsp
000000000001caa6	movss	(%rsp), %xmm0
000000000001caab	addq	$0x10, %rsp
000000000001caaf	popq	%r15
000000000001cab1	popq	%r14
000000000001cab3	popq	%r13
000000000001cab5	popq	%r12
000000000001cab7	popq	%r11
000000000001cab9	popq	%r10
000000000001cabb	popq	%r9
000000000001cabd	popq	%r8
000000000001cabf	popq	%rcx
000000000001cac0	popq	%rdx
000000000001cac1	popq	%rsi
000000000001cac2	popq	%rdi
000000000001cac3	popq	%rbx
000000000001cac4	popq	%rbp
000000000001cac5	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA18isOpacityModifyRGBEv:
000000000001cac7	pushq	%rbp
000000000001cac8	movq	%rsp, %rbp
000000000001cacb	pushq	%rbx
000000000001cacc	pushq	%rdi
000000000001cacd	pushq	%rsi
000000000001cace	pushq	%rdx
000000000001cacf	pushq	%rcx
000000000001cad0	pushq	%r8
000000000001cad2	pushq	%r9
000000000001cad4	pushq	%r10
000000000001cad6	pushq	%r11
000000000001cad8	pushq	%r12
000000000001cada	pushq	%r13
000000000001cadc	pushq	%r14
000000000001cade	pushq	%r15
000000000001cae0	subq	$0x10, %rsp
000000000001cae4	movss	%xmm0, (%rsp)
000000000001cae9	subq	$0x10, %rsp
000000000001caed	movss	%xmm1, (%rsp)
000000000001caf2	pushq	%rsi
000000000001caf3	pushq	%rdi
000000000001caf4	callq	__Z7getBasev ## getBase()
000000000001caf9	addq	$0x61f0, %rax
000000000001caff	popq	%rdi
000000000001cb00	popq	%rsi
000000000001cb01	movss	(%rsp), %xmm1
000000000001cb06	addq	$0x10, %rsp
000000000001cb0a	movss	(%rsp), %xmm0
000000000001cb0f	addq	$0x10, %rsp
000000000001cb13	popq	%r15
000000000001cb15	popq	%r14
000000000001cb17	popq	%r13
000000000001cb19	popq	%r12
000000000001cb1b	popq	%r11
000000000001cb1d	popq	%r10
000000000001cb1f	popq	%r9
000000000001cb21	popq	%r8
000000000001cb23	popq	%rcx
000000000001cb24	popq	%rdx
000000000001cb25	popq	%rsi
000000000001cb26	popq	%rdi
000000000001cb27	popq	%rbx
000000000001cb28	popq	%rbp
000000000001cb29	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA21isCascadeColorEnabledEv:
000000000001cb2b	pushq	%rbp
000000000001cb2c	movq	%rsp, %rbp
000000000001cb2f	pushq	%rbx
000000000001cb30	pushq	%rdi
000000000001cb31	pushq	%rsi
000000000001cb32	pushq	%rdx
000000000001cb33	pushq	%rcx
000000000001cb34	pushq	%r8
000000000001cb36	pushq	%r9
000000000001cb38	pushq	%r10
000000000001cb3a	pushq	%r11
000000000001cb3c	pushq	%r12
000000000001cb3e	pushq	%r13
000000000001cb40	pushq	%r14
000000000001cb42	pushq	%r15
000000000001cb44	subq	$0x10, %rsp
000000000001cb48	movss	%xmm0, (%rsp)
000000000001cb4d	subq	$0x10, %rsp
000000000001cb51	movss	%xmm1, (%rsp)
000000000001cb56	pushq	%rsi
000000000001cb57	pushq	%rdi
000000000001cb58	callq	__Z7getBasev ## getBase()
000000000001cb5d	addq	$0x274240, %rax
000000000001cb63	popq	%rdi
000000000001cb64	popq	%rsi
000000000001cb65	movss	(%rsp), %xmm1
000000000001cb6a	addq	$0x10, %rsp
000000000001cb6e	movss	(%rsp), %xmm0
000000000001cb73	addq	$0x10, %rsp
000000000001cb77	popq	%r15
000000000001cb79	popq	%r14
000000000001cb7b	popq	%r13
000000000001cb7d	popq	%r12
000000000001cb7f	popq	%r11
000000000001cb81	popq	%r10
000000000001cb83	popq	%r9
000000000001cb85	popq	%r8
000000000001cb87	popq	%rcx
000000000001cb88	popq	%rdx
000000000001cb89	popq	%rsi
000000000001cb8a	popq	%rdi
000000000001cb8b	popq	%rbx
000000000001cb8c	popq	%rbp
000000000001cb8d	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA22setCascadeColorEnabledEb:
000000000001cb8f	pushq	%rbp
000000000001cb90	movq	%rsp, %rbp
000000000001cb93	pushq	%rbx
000000000001cb94	pushq	%rdi
000000000001cb95	pushq	%rsi
000000000001cb96	pushq	%rdx
000000000001cb97	pushq	%rcx
000000000001cb98	pushq	%r8
000000000001cb9a	pushq	%r9
000000000001cb9c	pushq	%r10
000000000001cb9e	pushq	%r11
000000000001cba0	pushq	%r12
000000000001cba2	pushq	%r13
000000000001cba4	pushq	%r14
000000000001cba6	pushq	%r15
000000000001cba8	subq	$0x10, %rsp
000000000001cbac	movss	%xmm0, (%rsp)
000000000001cbb1	subq	$0x10, %rsp
000000000001cbb5	movss	%xmm1, (%rsp)
000000000001cbba	pushq	%rsi
000000000001cbbb	pushq	%rdi
000000000001cbbc	callq	__Z7getBasev ## getBase()
000000000001cbc1	addq	$0x274260, %rax
000000000001cbc7	popq	%rdi
000000000001cbc8	popq	%rsi
000000000001cbc9	movss	(%rsp), %xmm1
000000000001cbce	addq	$0x10, %rsp
000000000001cbd2	movss	(%rsp), %xmm0
000000000001cbd7	addq	$0x10, %rsp
000000000001cbdb	popq	%r15
000000000001cbdd	popq	%r14
000000000001cbdf	popq	%r13
000000000001cbe1	popq	%r12
000000000001cbe3	popq	%r11
000000000001cbe5	popq	%r10
000000000001cbe7	popq	%r9
000000000001cbe9	popq	%r8
000000000001cbeb	popq	%rcx
000000000001cbec	popq	%rdx
000000000001cbed	popq	%rsi
000000000001cbee	popq	%rdi
000000000001cbef	popq	%rbx
000000000001cbf0	popq	%rbp
000000000001cbf1	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA20updateDisplayedColorERKNS_10_ccColor3BE:
000000000001cbf3	pushq	%rbp
000000000001cbf4	movq	%rsp, %rbp
000000000001cbf7	pushq	%rbx
000000000001cbf8	pushq	%rdi
000000000001cbf9	pushq	%rsi
000000000001cbfa	pushq	%rdx
000000000001cbfb	pushq	%rcx
000000000001cbfc	pushq	%r8
000000000001cbfe	pushq	%r9
000000000001cc00	pushq	%r10
000000000001cc02	pushq	%r11
000000000001cc04	pushq	%r12
000000000001cc06	pushq	%r13
000000000001cc08	pushq	%r14
000000000001cc0a	pushq	%r15
000000000001cc0c	subq	$0x10, %rsp
000000000001cc10	movss	%xmm0, (%rsp)
000000000001cc15	subq	$0x10, %rsp
000000000001cc19	movss	%xmm1, (%rsp)
000000000001cc1e	pushq	%rsi
000000000001cc1f	pushq	%rdi
000000000001cc20	callq	__Z7getBasev ## getBase()
000000000001cc25	addq	$0x2741d0, %rax
000000000001cc2b	popq	%rdi
000000000001cc2c	popq	%rsi
000000000001cc2d	movss	(%rsp), %xmm1
000000000001cc32	addq	$0x10, %rsp
000000000001cc36	movss	(%rsp), %xmm0
000000000001cc3b	addq	$0x10, %rsp
000000000001cc3f	popq	%r15
000000000001cc41	popq	%r14
000000000001cc43	popq	%r13
000000000001cc45	popq	%r12
000000000001cc47	popq	%r11
000000000001cc49	popq	%r10
000000000001cc4b	popq	%r9
000000000001cc4d	popq	%r8
000000000001cc4f	popq	%rcx
000000000001cc50	popq	%rdx
000000000001cc51	popq	%rsi
000000000001cc52	popq	%rdi
000000000001cc53	popq	%rbx
000000000001cc54	popq	%rbp
000000000001cc55	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA23isCascadeOpacityEnabledEv:
000000000001cc57	pushq	%rbp
000000000001cc58	movq	%rsp, %rbp
000000000001cc5b	pushq	%rbx
000000000001cc5c	pushq	%rdi
000000000001cc5d	pushq	%rsi
000000000001cc5e	pushq	%rdx
000000000001cc5f	pushq	%rcx
000000000001cc60	pushq	%r8
000000000001cc62	pushq	%r9
000000000001cc64	pushq	%r10
000000000001cc66	pushq	%r11
000000000001cc68	pushq	%r12
000000000001cc6a	pushq	%r13
000000000001cc6c	pushq	%r14
000000000001cc6e	pushq	%r15
000000000001cc70	subq	$0x10, %rsp
000000000001cc74	movss	%xmm0, (%rsp)
000000000001cc79	subq	$0x10, %rsp
000000000001cc7d	movss	%xmm1, (%rsp)
000000000001cc82	pushq	%rsi
000000000001cc83	pushq	%rdi
000000000001cc84	callq	__Z7getBasev ## getBase()
000000000001cc89	addq	$0x274200, %rax
000000000001cc8f	popq	%rdi
000000000001cc90	popq	%rsi
000000000001cc91	movss	(%rsp), %xmm1
000000000001cc96	addq	$0x10, %rsp
000000000001cc9a	movss	(%rsp), %xmm0
000000000001cc9f	addq	$0x10, %rsp
000000000001cca3	popq	%r15
000000000001cca5	popq	%r14
000000000001cca7	popq	%r13
000000000001cca9	popq	%r12
000000000001ccab	popq	%r11
000000000001ccad	popq	%r10
000000000001ccaf	popq	%r9
000000000001ccb1	popq	%r8
000000000001ccb3	popq	%rcx
000000000001ccb4	popq	%rdx
000000000001ccb5	popq	%rsi
000000000001ccb6	popq	%rdi
000000000001ccb7	popq	%rbx
000000000001ccb8	popq	%rbp
000000000001ccb9	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA24setCascadeOpacityEnabledEb:
000000000001ccbb	pushq	%rbp
000000000001ccbc	movq	%rsp, %rbp
000000000001ccbf	pushq	%rbx
000000000001ccc0	pushq	%rdi
000000000001ccc1	pushq	%rsi
000000000001ccc2	pushq	%rdx
000000000001ccc3	pushq	%rcx
000000000001ccc4	pushq	%r8
000000000001ccc6	pushq	%r9
000000000001ccc8	pushq	%r10
000000000001ccca	pushq	%r11
000000000001cccc	pushq	%r12
000000000001ccce	pushq	%r13
000000000001ccd0	pushq	%r14
000000000001ccd2	pushq	%r15
000000000001ccd4	subq	$0x10, %rsp
000000000001ccd8	movss	%xmm0, (%rsp)
000000000001ccdd	subq	$0x10, %rsp
000000000001cce1	movss	%xmm1, (%rsp)
000000000001cce6	pushq	%rsi
000000000001cce7	pushq	%rdi
000000000001cce8	callq	__Z7getBasev ## getBase()
000000000001cced	addq	$0x274220, %rax
000000000001ccf3	popq	%rdi
000000000001ccf4	popq	%rsi
000000000001ccf5	movss	(%rsp), %xmm1
000000000001ccfa	addq	$0x10, %rsp
000000000001ccfe	movss	(%rsp), %xmm0
000000000001cd03	addq	$0x10, %rsp
000000000001cd07	popq	%r15
000000000001cd09	popq	%r14
000000000001cd0b	popq	%r13
000000000001cd0d	popq	%r12
000000000001cd0f	popq	%r11
000000000001cd11	popq	%r10
000000000001cd13	popq	%r9
000000000001cd15	popq	%r8
000000000001cd17	popq	%rcx
000000000001cd18	popq	%rdx
000000000001cd19	popq	%rsi
000000000001cd1a	popq	%rdi
000000000001cd1b	popq	%rbx
000000000001cd1c	popq	%rbp
000000000001cd1d	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA22updateDisplayedOpacityEh:
000000000001cd1f	pushq	%rbp
000000000001cd20	movq	%rsp, %rbp
000000000001cd23	pushq	%rbx
000000000001cd24	pushq	%rdi
000000000001cd25	pushq	%rsi
000000000001cd26	pushq	%rdx
000000000001cd27	pushq	%rcx
000000000001cd28	pushq	%r8
000000000001cd2a	pushq	%r9
000000000001cd2c	pushq	%r10
000000000001cd2e	pushq	%r11
000000000001cd30	pushq	%r12
000000000001cd32	pushq	%r13
000000000001cd34	pushq	%r14
000000000001cd36	pushq	%r15
000000000001cd38	subq	$0x10, %rsp
000000000001cd3c	movss	%xmm0, (%rsp)
000000000001cd41	subq	$0x10, %rsp
000000000001cd45	movss	%xmm1, (%rsp)
000000000001cd4a	pushq	%rsi
000000000001cd4b	pushq	%rdi
000000000001cd4c	callq	__Z7getBasev ## getBase()
000000000001cd51	addq	$0x273ff0, %rax
000000000001cd57	popq	%rdi
000000000001cd58	popq	%rsi
000000000001cd59	movss	(%rsp), %xmm1
000000000001cd5e	addq	$0x10, %rsp
000000000001cd62	movss	(%rsp), %xmm0
000000000001cd67	addq	$0x10, %rsp
000000000001cd6b	popq	%r15
000000000001cd6d	popq	%r14
000000000001cd6f	popq	%r13
000000000001cd71	popq	%r12
000000000001cd73	popq	%r11
000000000001cd75	popq	%r10
000000000001cd77	popq	%r9
000000000001cd79	popq	%r8
000000000001cd7b	popq	%rcx
000000000001cd7c	popq	%rdx
000000000001cd7d	popq	%rsi
000000000001cd7e	popq	%rdi
000000000001cd7f	popq	%rbx
000000000001cd80	popq	%rbp
000000000001cd81	jmpq	*%rax
__ZThn392_N7cocos2d12CCLayerColor12setBlendFuncENS_12_ccBlendFuncE:
000000000001cd83	pushq	%rbp
000000000001cd84	movq	%rsp, %rbp
000000000001cd87	pushq	%rbx
000000000001cd88	pushq	%rdi
000000000001cd89	pushq	%rsi
000000000001cd8a	pushq	%rdx
000000000001cd8b	pushq	%rcx
000000000001cd8c	pushq	%r8
000000000001cd8e	pushq	%r9
000000000001cd90	pushq	%r10
000000000001cd92	pushq	%r11
000000000001cd94	pushq	%r12
000000000001cd96	pushq	%r13
000000000001cd98	pushq	%r14
000000000001cd9a	pushq	%r15
000000000001cd9c	subq	$0x10, %rsp
000000000001cda0	movss	%xmm0, (%rsp)
000000000001cda5	subq	$0x10, %rsp
000000000001cda9	movss	%xmm1, (%rsp)
000000000001cdae	pushq	%rsi
000000000001cdaf	pushq	%rdi
000000000001cdb0	callq	__Z7getBasev ## getBase()
000000000001cdb5	addq	$0x2744b0, %rax
000000000001cdbb	popq	%rdi
000000000001cdbc	popq	%rsi
000000000001cdbd	movss	(%rsp), %xmm1
000000000001cdc2	addq	$0x10, %rsp
000000000001cdc6	movss	(%rsp), %xmm0
000000000001cdcb	addq	$0x10, %rsp
000000000001cdcf	popq	%r15
000000000001cdd1	popq	%r14
000000000001cdd3	popq	%r13
000000000001cdd5	popq	%r12
000000000001cdd7	popq	%r11
000000000001cdd9	popq	%r10
000000000001cddb	popq	%r9
000000000001cddd	popq	%r8
000000000001cddf	popq	%rcx
000000000001cde0	popq	%rdx
000000000001cde1	popq	%rsi
000000000001cde2	popq	%rdi
000000000001cde3	popq	%rbx
000000000001cde4	popq	%rbp
000000000001cde5	jmpq	*%rax
__ZThn392_N7cocos2d12CCLayerColor12getBlendFuncEv:
000000000001cde7	pushq	%rbp
000000000001cde8	movq	%rsp, %rbp
000000000001cdeb	pushq	%rbx
000000000001cdec	pushq	%rdi
000000000001cded	pushq	%rsi
000000000001cdee	pushq	%rdx
000000000001cdef	pushq	%rcx
000000000001cdf0	pushq	%r8
000000000001cdf2	pushq	%r9
000000000001cdf4	pushq	%r10
000000000001cdf6	pushq	%r11
000000000001cdf8	pushq	%r12
000000000001cdfa	pushq	%r13
000000000001cdfc	pushq	%r14
000000000001cdfe	pushq	%r15
000000000001ce00	subq	$0x10, %rsp
000000000001ce04	movss	%xmm0, (%rsp)
000000000001ce09	subq	$0x10, %rsp
000000000001ce0d	movss	%xmm1, (%rsp)
000000000001ce12	pushq	%rsi
000000000001ce13	pushq	%rdi
000000000001ce14	callq	__Z7getBasev ## getBase()
000000000001ce19	addq	$0x274490, %rax
000000000001ce1f	popq	%rdi
000000000001ce20	popq	%rsi
000000000001ce21	movss	(%rsp), %xmm1
000000000001ce26	addq	$0x10, %rsp
000000000001ce2a	movss	(%rsp), %xmm0
000000000001ce2f	addq	$0x10, %rsp
000000000001ce33	popq	%r15
000000000001ce35	popq	%r14
000000000001ce37	popq	%r13
000000000001ce39	popq	%r12
000000000001ce3b	popq	%r11
000000000001ce3d	popq	%r10
000000000001ce3f	popq	%r9
000000000001ce41	popq	%r8
000000000001ce43	popq	%rcx
000000000001ce44	popq	%rdx
000000000001ce45	popq	%rsi
000000000001ce46	popq	%rdi
000000000001ce47	popq	%rbx
000000000001ce48	popq	%rbp
000000000001ce49	jmpq	*%rax
__ZN8TextArea6createESsPKcffN7cocos2d7CCPointEfb:
000000000001ce4b	pushq	%rbp
000000000001ce4c	movq	%rsp, %rbp
000000000001ce4f	pushq	%rbx
000000000001ce50	pushq	%rdi
000000000001ce51	pushq	%rsi
000000000001ce52	pushq	%rdx
000000000001ce53	pushq	%rcx
000000000001ce54	pushq	%r8
000000000001ce56	pushq	%r9
000000000001ce58	pushq	%r10
000000000001ce5a	pushq	%r11
000000000001ce5c	pushq	%r12
000000000001ce5e	pushq	%r13
000000000001ce60	pushq	%r14
000000000001ce62	pushq	%r15
000000000001ce64	subq	$0x10, %rsp
000000000001ce68	movss	%xmm0, (%rsp)
000000000001ce6d	subq	$0x10, %rsp
000000000001ce71	movss	%xmm1, (%rsp)
000000000001ce76	pushq	%rsi
000000000001ce77	pushq	%rdi
000000000001ce78	callq	__Z7getBasev ## getBase()
000000000001ce7d	addq	$0x19eb40, %rax
000000000001ce83	popq	%rdi
000000000001ce84	popq	%rsi
000000000001ce85	movss	(%rsp), %xmm1
000000000001ce8a	addq	$0x10, %rsp
000000000001ce8e	movss	(%rsp), %xmm0
000000000001ce93	addq	$0x10, %rsp
000000000001ce97	popq	%r15
000000000001ce99	popq	%r14
000000000001ce9b	popq	%r13
000000000001ce9d	popq	%r12
000000000001ce9f	popq	%r11
000000000001cea1	popq	%r10
000000000001cea3	popq	%r9
000000000001cea5	popq	%r8
000000000001cea7	popq	%rcx
000000000001cea8	popq	%rdx
000000000001cea9	popq	%rsi
000000000001ceaa	popq	%rdi
000000000001ceab	popq	%rbx
000000000001ceac	popq	%rbp
000000000001cead	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture6createEiiNS_22CCTexture2DPixelFormatE:
000000000001ceaf	pushq	%rbp
000000000001ceb0	movq	%rsp, %rbp
000000000001ceb3	pushq	%rbx
000000000001ceb4	pushq	%rdi
000000000001ceb5	pushq	%rsi
000000000001ceb6	pushq	%rdx
000000000001ceb7	pushq	%rcx
000000000001ceb8	pushq	%r8
000000000001ceba	pushq	%r9
000000000001cebc	pushq	%r10
000000000001cebe	pushq	%r11
000000000001cec0	pushq	%r12
000000000001cec2	pushq	%r13
000000000001cec4	pushq	%r14
000000000001cec6	pushq	%r15
000000000001cec8	subq	$0x10, %rsp
000000000001cecc	movss	%xmm0, (%rsp)
000000000001ced1	subq	$0x10, %rsp
000000000001ced5	movss	%xmm1, (%rsp)
000000000001ceda	pushq	%rsi
000000000001cedb	pushq	%rdi
000000000001cedc	callq	__Z7getBasev ## getBase()
000000000001cee1	addq	$0x35c720, %rax
000000000001cee7	popq	%rdi
000000000001cee8	popq	%rsi
000000000001cee9	movss	(%rsp), %xmm1
000000000001ceee	addq	$0x10, %rsp
000000000001cef2	movss	(%rsp), %xmm0
000000000001cef7	addq	$0x10, %rsp
000000000001cefb	popq	%r15
000000000001cefd	popq	%r14
000000000001ceff	popq	%r13
000000000001cf01	popq	%r12
000000000001cf03	popq	%r11
000000000001cf05	popq	%r10
000000000001cf07	popq	%r9
000000000001cf09	popq	%r8
000000000001cf0b	popq	%rcx
000000000001cf0c	popq	%rdx
000000000001cf0d	popq	%rsi
000000000001cf0e	popq	%rdi
000000000001cf0f	popq	%rbx
000000000001cf10	popq	%rbp
000000000001cf11	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture5beginEv:
000000000001cf13	pushq	%rbp
000000000001cf14	movq	%rsp, %rbp
000000000001cf17	pushq	%rbx
000000000001cf18	pushq	%rdi
000000000001cf19	pushq	%rsi
000000000001cf1a	pushq	%rdx
000000000001cf1b	pushq	%rcx
000000000001cf1c	pushq	%r8
000000000001cf1e	pushq	%r9
000000000001cf20	pushq	%r10
000000000001cf22	pushq	%r11
000000000001cf24	pushq	%r12
000000000001cf26	pushq	%r13
000000000001cf28	pushq	%r14
000000000001cf2a	pushq	%r15
000000000001cf2c	subq	$0x10, %rsp
000000000001cf30	movss	%xmm0, (%rsp)
000000000001cf35	subq	$0x10, %rsp
000000000001cf39	movss	%xmm1, (%rsp)
000000000001cf3e	pushq	%rsi
000000000001cf3f	pushq	%rdi
000000000001cf40	callq	__Z7getBasev ## getBase()
000000000001cf45	addq	$0x35ce10, %rax
000000000001cf4b	popq	%rdi
000000000001cf4c	popq	%rsi
000000000001cf4d	movss	(%rsp), %xmm1
000000000001cf52	addq	$0x10, %rsp
000000000001cf56	movss	(%rsp), %xmm0
000000000001cf5b	addq	$0x10, %rsp
000000000001cf5f	popq	%r15
000000000001cf61	popq	%r14
000000000001cf63	popq	%r13
000000000001cf65	popq	%r12
000000000001cf67	popq	%r11
000000000001cf69	popq	%r10
000000000001cf6b	popq	%r9
000000000001cf6d	popq	%r8
000000000001cf6f	popq	%rcx
000000000001cf70	popq	%rdx
000000000001cf71	popq	%rsi
000000000001cf72	popq	%rdi
000000000001cf73	popq	%rbx
000000000001cf74	popq	%rbp
000000000001cf75	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture3endEv:
000000000001cf77	pushq	%rbp
000000000001cf78	movq	%rsp, %rbp
000000000001cf7b	pushq	%rbx
000000000001cf7c	pushq	%rdi
000000000001cf7d	pushq	%rsi
000000000001cf7e	pushq	%rdx
000000000001cf7f	pushq	%rcx
000000000001cf80	pushq	%r8
000000000001cf82	pushq	%r9
000000000001cf84	pushq	%r10
000000000001cf86	pushq	%r11
000000000001cf88	pushq	%r12
000000000001cf8a	pushq	%r13
000000000001cf8c	pushq	%r14
000000000001cf8e	pushq	%r15
000000000001cf90	subq	$0x10, %rsp
000000000001cf94	movss	%xmm0, (%rsp)
000000000001cf99	subq	$0x10, %rsp
000000000001cf9d	movss	%xmm1, (%rsp)
000000000001cfa2	pushq	%rsi
000000000001cfa3	pushq	%rdi
000000000001cfa4	callq	__Z7getBasev ## getBase()
000000000001cfa9	addq	$0x35d2c0, %rax
000000000001cfaf	popq	%rdi
000000000001cfb0	popq	%rsi
000000000001cfb1	movss	(%rsp), %xmm1
000000000001cfb6	addq	$0x10, %rsp
000000000001cfba	movss	(%rsp), %xmm0
000000000001cfbf	addq	$0x10, %rsp
000000000001cfc3	popq	%r15
000000000001cfc5	popq	%r14
000000000001cfc7	popq	%r13
000000000001cfc9	popq	%r12
000000000001cfcb	popq	%r11
000000000001cfcd	popq	%r10
000000000001cfcf	popq	%r9
000000000001cfd1	popq	%r8
000000000001cfd3	popq	%rcx
000000000001cfd4	popq	%rdx
000000000001cfd5	popq	%rsi
000000000001cfd6	popq	%rdi
000000000001cfd7	popq	%rbx
000000000001cfd8	popq	%rbp
000000000001cfd9	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture10newCCImageEb:
000000000001cfdb	pushq	%rbp
000000000001cfdc	movq	%rsp, %rbp
000000000001cfdf	pushq	%rbx
000000000001cfe0	pushq	%rdi
000000000001cfe1	pushq	%rsi
000000000001cfe2	pushq	%rdx
000000000001cfe3	pushq	%rcx
000000000001cfe4	pushq	%r8
000000000001cfe6	pushq	%r9
000000000001cfe8	pushq	%r10
000000000001cfea	pushq	%r11
000000000001cfec	pushq	%r12
000000000001cfee	pushq	%r13
000000000001cff0	pushq	%r14
000000000001cff2	pushq	%r15
000000000001cff4	subq	$0x10, %rsp
000000000001cff8	movss	%xmm0, (%rsp)
000000000001cffd	subq	$0x10, %rsp
000000000001d001	movss	%xmm1, (%rsp)
000000000001d006	pushq	%rsi
000000000001d007	pushq	%rdi
000000000001d008	callq	__Z7getBasev ## getBase()
000000000001d00d	addq	$0x35d7d0, %rax
000000000001d013	popq	%rdi
000000000001d014	popq	%rsi
000000000001d015	movss	(%rsp), %xmm1
000000000001d01a	addq	$0x10, %rsp
000000000001d01e	movss	(%rsp), %xmm0
000000000001d023	addq	$0x10, %rsp
000000000001d027	popq	%r15
000000000001d029	popq	%r14
000000000001d02b	popq	%r13
000000000001d02d	popq	%r12
000000000001d02f	popq	%r11
000000000001d031	popq	%r10
000000000001d033	popq	%r9
000000000001d035	popq	%r8
000000000001d037	popq	%rcx
000000000001d038	popq	%rdx
000000000001d039	popq	%rsi
000000000001d03a	popq	%rdi
000000000001d03b	popq	%rbx
000000000001d03c	popq	%rbp
000000000001d03d	jmpq	*%rax
_sexyRender:
000000000001d03f	pushq	%rbp
000000000001d040	movq	%rsp, %rbp
000000000001d043	pushq	%rbx
000000000001d044	pushq	%rdi
000000000001d045	pushq	%rsi
000000000001d046	pushq	%rdx
000000000001d047	pushq	%rcx
000000000001d048	pushq	%r8
000000000001d04a	pushq	%r9
000000000001d04c	pushq	%r10
000000000001d04e	pushq	%r11
000000000001d050	pushq	%r12
000000000001d052	pushq	%r13
000000000001d054	pushq	%r14
000000000001d056	pushq	%r15
000000000001d058	subq	$0x10, %rsp
000000000001d05c	movss	%xmm0, (%rsp)
000000000001d061	subq	$0x10, %rsp
000000000001d065	movss	%xmm1, (%rsp)
000000000001d06a	pushq	%rsi
000000000001d06b	pushq	%rdi
000000000001d06c	callq	__Z7getBasev ## getBase()
000000000001d071	addq	$0x274b50, %rax
000000000001d077	popq	%rdi
000000000001d078	popq	%rsi
000000000001d079	movss	(%rsp), %xmm1
000000000001d07e	addq	$0x10, %rsp
000000000001d082	movss	(%rsp), %xmm0
000000000001d087	addq	$0x10, %rsp
000000000001d08b	popq	%r15
000000000001d08d	popq	%r14
000000000001d08f	popq	%r13
000000000001d091	popq	%r12
000000000001d093	popq	%r11
000000000001d095	popq	%r10
000000000001d097	popq	%r9
000000000001d099	popq	%r8
000000000001d09b	popq	%rcx
000000000001d09c	popq	%rdx
000000000001d09d	popq	%rsi
000000000001d09e	popq	%rdi
000000000001d09f	popq	%rbx
000000000001d0a0	popq	%rbp
000000000001d0a1	jmpq	*%rax
__Z14setupTypeinfosv:
000000000001d0a3	pushq	%rbp
000000000001d0a4	movq	%rsp, %rbp
000000000001d0a7	callq	__Z7getBasev ## getBase()
000000000001d0ac	addq	$0x624f70, %rax
000000000001d0b2	movq	%rax, __ZTIN7cocos2d6CCNodeE(%rip) ## typeinfo for cocos2d::CCNode
000000000001d0b9	callq	__Z7getBasev ## getBase()
000000000001d0be	addq	$0x65d870, %rax
000000000001d0c4	movq	%rax, %rsi
000000000001d0c7	leaq	__ZTI12FLAlertLayer(%rip), %rdi ## typeinfo for FLAlertLayer
000000000001d0ce	movl	$0x28, %edx
000000000001d0d3	callq	0x1f69e ## symbol stub for: _memcpy
000000000001d0d8	popq	%rbp
000000000001d0d9	retq
000000000001d0da	nop
000000000001d0db	nop
000000000001d0dc	nop
000000000001d0dd	nop
000000000001d0de	nop
000000000001d0df	nop
__ZN5Cacao16relativePositionEdd:
000000000001d0e0	pushq	%rbp
000000000001d0e1	movq	%rsp, %rbp
000000000001d0e4	subq	$0x30, %rsp
000000000001d0e8	movq	%rdi, %rax
000000000001d0eb	movsd	%xmm0, -0x8(%rbp)
000000000001d0f0	movsd	%xmm1, -0x10(%rbp)
000000000001d0f5	movq	%rdi, -0x28(%rbp)
000000000001d0f9	movq	%rax, -0x30(%rbp)
000000000001d0fd	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
000000000001d102	leaq	-0x18(%rbp), %rdi
000000000001d106	movq	%rax, %rsi
000000000001d109	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
000000000001d10e	movsd	0x434d2(%rip), %xmm0
000000000001d116	movss	-0x18(%rbp), %xmm1
000000000001d11b	cvtss2sd	%xmm1, %xmm1
000000000001d11f	movsd	-0x8(%rbp), %xmm2
000000000001d124	divsd	%xmm0, %xmm2
000000000001d128	mulsd	%xmm2, %xmm1
000000000001d12c	cvtsd2ss	%xmm1, %xmm1
000000000001d130	movss	%xmm1, -0x1c(%rbp)
000000000001d135	movss	-0x14(%rbp), %xmm1
000000000001d13a	cvtss2sd	%xmm1, %xmm1
000000000001d13e	movsd	-0x10(%rbp), %xmm2
000000000001d143	divsd	%xmm0, %xmm2
000000000001d147	mulsd	%xmm2, %xmm1
000000000001d14b	cvtsd2ss	%xmm1, %xmm0
000000000001d14f	movss	%xmm0, -0x20(%rbp)
000000000001d154	movq	-0x28(%rbp), %rdi
000000000001d158	callq	__ZN7cocos2d7CCPointC1Ev ## cocos2d::CCPoint::CCPoint()
000000000001d15d	movss	-0x1c(%rbp), %xmm0
000000000001d162	movq	-0x28(%rbp), %rax
000000000001d166	movss	%xmm0, (%rax)
000000000001d16a	movss	-0x20(%rbp), %xmm0
000000000001d16f	movss	%xmm0, 0x4(%rax)
000000000001d174	movq	-0x30(%rbp), %rax
000000000001d178	addq	$0x30, %rsp
000000000001d17c	popq	%rbp
000000000001d17d	retq
000000000001d17e	nop
__ZN5Cacao13spriteFromPngEPhi:
000000000001d180	pushq	%rbp
000000000001d181	movq	%rsp, %rbp
000000000001d184	subq	$0xb0, %rsp
000000000001d18b	movq	%rdi, -0x8(%rbp)
000000000001d18f	movl	%esi, -0xc(%rbp)
000000000001d192	movl	$0x40, %edi
000000000001d197	callq	0x1f608 ## symbol stub for: __Znwm
000000000001d19c	movq	%rax, %rdi
000000000001d19f	movq	%rax, %rcx
000000000001d1a2	movq	%rdi, -0x50(%rbp)
000000000001d1a6	movq	%rax, %rdi
000000000001d1a9	movq	%rcx, -0x58(%rbp)
000000000001d1ad	callq	__ZN7cocos2d7CCImageC1Ev ## cocos2d::CCImage::CCImage()
000000000001d1b2	jmp	0x1d1b7
000000000001d1b7	movq	-0x58(%rbp), %rax
000000000001d1bb	movq	%rax, -0x18(%rbp)
000000000001d1bf	movq	-0x18(%rbp), %rdi
000000000001d1c3	movq	-0x8(%rbp), %rsi
000000000001d1c7	movl	-0xc(%rbp), %edx
000000000001d1ca	movq	%rsp, %rcx
000000000001d1cd	movl	$0x1, (%rcx)
000000000001d1d3	movl	$0x1, %r8d
000000000001d1d9	movl	%r8d, %ecx
000000000001d1dc	movl	%r8d, -0x5c(%rbp)
000000000001d1e0	movl	-0x5c(%rbp), %r9d
000000000001d1e4	callq	__ZN7cocos2d7CCImage17initWithImageDataEPviNS0_12EImageFormatEiii ## cocos2d::CCImage::initWithImageData(void*, int, cocos2d::CCImage::EImageFormat, int, int, int)
000000000001d1e9	movl	$0x58, %edi
000000000001d1ee	movb	%al, -0x5d(%rbp)
000000000001d1f1	callq	0x1f608 ## symbol stub for: __Znwm
000000000001d1f6	movq	%rax, %rsi
000000000001d1f9	movq	%rax, %rdi
000000000001d1fc	movq	%rdi, -0x68(%rbp)
000000000001d200	movq	%rax, %rdi
000000000001d203	movq	%rsi, -0x70(%rbp)
000000000001d207	callq	__ZN7cocos2d11CCTexture2DC1Ev ## cocos2d::CCTexture2D::CCTexture2D()
000000000001d20c	jmp	0x1d211
000000000001d211	movq	-0x68(%rbp), %rax
000000000001d215	movq	%rax, -0x30(%rbp)
000000000001d219	movq	-0x30(%rbp), %rdi
000000000001d21d	movq	-0x18(%rbp), %rsi
000000000001d221	callq	__ZN7cocos2d11CCTexture2D13initWithImageEPNS_7CCImageE ## cocos2d::CCTexture2D::initWithImage(cocos2d::CCImage*)
000000000001d226	movq	-0x18(%rbp), %rdi
000000000001d22a	movb	%al, -0x71(%rbp)
000000000001d22d	callq	0x1f350 ## symbol stub for: __ZNK7cocos2d7CCImage8getWidthEv
000000000001d232	movzwl	%ax, %ecx
000000000001d235	cvtsi2ssl	%ecx, %xmm2
000000000001d239	movq	-0x18(%rbp), %rdi
000000000001d23d	movss	%xmm2, -0x78(%rbp)
000000000001d242	callq	0x1f356 ## symbol stub for: __ZNK7cocos2d7CCImage9getHeightEv
000000000001d247	movzwl	%ax, %ecx
000000000001d24a	cvtsi2ssl	%ecx, %xmm3
000000000001d24e	leaq	-0x40(%rbp), %rdi
000000000001d252	xorps	%xmm2, %xmm2
000000000001d255	movaps	%xmm2, %xmm0
000000000001d258	movaps	%xmm2, %xmm1
000000000001d25b	movss	-0x78(%rbp), %xmm2
000000000001d260	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001d265	movq	-0x18(%rbp), %rdi
000000000001d269	callq	0x1f350 ## symbol stub for: __ZNK7cocos2d7CCImage8getWidthEv
000000000001d26e	movq	0x48dab(%rip), %rdi ## literal pool symbol address: __ZSt4cout
000000000001d275	movzwl	%ax, %esi
000000000001d278	callq	0x1f41c ## symbol stub for: __ZNSolsEt
000000000001d27d	movq	%rax, %rdi
000000000001d280	leaq	0x45b22(%rip), %rsi ## literal pool for: "\n"
000000000001d287	callq	0x1f5fc ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000001d28c	movq	-0x18(%rbp), %rdi
000000000001d290	movq	%rax, -0x80(%rbp)
000000000001d294	callq	0x1f356 ## symbol stub for: __ZNK7cocos2d7CCImage9getHeightEv
000000000001d299	movq	0x48d80(%rip), %rdi ## literal pool symbol address: __ZSt4cout
000000000001d2a0	movzwl	%ax, %esi
000000000001d2a3	callq	0x1f41c ## symbol stub for: __ZNSolsEt
000000000001d2a8	movq	%rax, %rdi
000000000001d2ab	leaq	0x45af7(%rip), %rsi ## literal pool for: "\n"
000000000001d2b2	callq	0x1f5fc ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000001d2b7	movq	%rax, -0x88(%rbp)
000000000001d2be	callq	__ZN7cocos2d8CCSprite6createEv ## cocos2d::CCSprite::create()
000000000001d2c3	movq	%rax, -0x48(%rbp)
000000000001d2c7	movq	-0x48(%rbp), %rax
000000000001d2cb	movq	-0x30(%rbp), %rsi
000000000001d2cf	movq	(%rax), %rdi
000000000001d2d2	movq	%rdi, -0x90(%rbp)
000000000001d2d9	movq	%rax, %rdi
000000000001d2dc	leaq	-0x40(%rbp), %rdx
000000000001d2e0	movq	-0x90(%rbp), %rax
000000000001d2e7	callq	*0x3d0(%rax)
000000000001d2ed	movq	-0x48(%rbp), %rdx
000000000001d2f1	movq	-0x30(%rbp), %rsi
000000000001d2f5	movq	(%rdx), %rdi
000000000001d2f8	movq	%rdi, -0x98(%rbp)
000000000001d2ff	movq	%rdx, %rdi
000000000001d302	movq	-0x98(%rbp), %rdx
000000000001d309	movb	%al, -0x99(%rbp)
000000000001d30f	callq	*0x400(%rdx)
000000000001d315	movq	-0x48(%rbp), %rax
000000000001d319	addq	$0xb0, %rsp
000000000001d320	popq	%rbp
000000000001d321	retq
000000000001d322	movl	%edx, %ecx
000000000001d324	movq	%rax, -0x20(%rbp)
000000000001d328	movl	%ecx, -0x24(%rbp)
000000000001d32b	movq	-0x50(%rbp), %rdi
000000000001d32f	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001d334	jmp	0x1d34b
000000000001d339	movl	%edx, %ecx
000000000001d33b	movq	%rax, -0x20(%rbp)
000000000001d33f	movl	%ecx, -0x24(%rbp)
000000000001d342	movq	-0x70(%rbp), %rdi
000000000001d346	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001d34b	movq	-0x20(%rbp), %rdi
000000000001d34f	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001d354	ud2
000000000001d356	nopw	%cs:(%rax,%rax)
__ZNK7cocos2d7CCImage8getWidthEv:
000000000001d360	pushq	%rbp
000000000001d361	movq	%rsp, %rbp
000000000001d364	movq	%rdi, -0x8(%rbp)
000000000001d368	movq	-0x8(%rbp), %rdi
000000000001d36c	movzwl	0x24(%rdi), %eax
000000000001d370	popq	%rbp
000000000001d371	retq
000000000001d372	nopw	%cs:(%rax,%rax)
000000000001d37c	nopl	(%rax)
__ZNK7cocos2d7CCImage9getHeightEv:
000000000001d380	pushq	%rbp
000000000001d381	movq	%rsp, %rbp
000000000001d384	movq	%rdi, -0x8(%rbp)
000000000001d388	movq	-0x8(%rbp), %rdi
000000000001d38c	movzwl	0x26(%rdi), %eax
000000000001d390	popq	%rbp
000000000001d391	retq
000000000001d392	nopw	%cs:(%rax,%rax)
000000000001d39c	nopl	(%rax)
__ZN5Cacao13createTogglerEPN7cocos2d8CCObjectEMS1_FvS2_E:
000000000001d3a0	pushq	%rbp
000000000001d3a1	movq	%rsp, %rbp
000000000001d3a4	subq	$0x50, %rsp
000000000001d3a8	movq	%rsi, -0x10(%rbp)
000000000001d3ac	movq	%rdx, -0x8(%rbp)
000000000001d3b0	movq	-0x10(%rbp), %rdx
000000000001d3b4	movq	-0x8(%rbp), %rsi
000000000001d3b8	movq	%rdi, -0x18(%rbp)
000000000001d3bc	movq	%rsi, -0x20(%rbp)
000000000001d3c0	movq	%rdx, -0x28(%rbp)
000000000001d3c4	leaq	0x459e0(%rip), %rdi ## literal pool for: "GJ_checkOn_001.png"
000000000001d3cb	callq	__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc ## cocos2d::CCSprite::createWithSpriteFrameName(char const*)
000000000001d3d0	movq	%rax, -0x30(%rbp)
000000000001d3d4	leaq	0x459e3(%rip), %rdi ## literal pool for: "GJ_checkOff_001.png"
000000000001d3db	callq	__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc ## cocos2d::CCSprite::createWithSpriteFrameName(char const*)
000000000001d3e0	movq	%rax, -0x38(%rbp)
000000000001d3e4	movq	-0x38(%rbp), %rdi
000000000001d3e8	movq	-0x30(%rbp), %rsi
000000000001d3ec	movq	-0x18(%rbp), %rdx
000000000001d3f0	movq	-0x28(%rbp), %rax
000000000001d3f4	movq	-0x20(%rbp), %rcx
000000000001d3f8	movq	%rcx, -0x40(%rbp)
000000000001d3fc	movq	%rax, -0x48(%rbp)
000000000001d400	movq	-0x48(%rbp), %rcx
000000000001d404	movq	-0x40(%rbp), %r8
000000000001d408	callq	__ZN17CCMenuItemToggler6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemToggler::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001d40d	addq	$0x50, %rsp
000000000001d411	popq	%rbp
000000000001d412	retq
000000000001d413	nopw	%cs:(%rax,%rax)
000000000001d41d	nopl	(%rax)
__ZN5Cacao16FLDialogDelegate8onSubmitEPNS_14FLDialogHelperERKSs:
000000000001d420	pushq	%rbp
000000000001d421	movq	%rsp, %rbp
000000000001d424	subq	$0x20, %rsp
000000000001d428	movq	%rdi, -0x8(%rbp)
000000000001d42c	movq	%rsi, -0x10(%rbp)
000000000001d430	movq	%rdx, -0x18(%rbp)
000000000001d434	movq	-0x10(%rbp), %rdi
000000000001d438	callq	__ZN5Cacao14FLDialogHelper5closeEv ## Cacao::FLDialogHelper::close()
000000000001d43d	addq	$0x20, %rsp
000000000001d441	popq	%rbp
000000000001d442	retq
000000000001d443	nopw	%cs:(%rax,%rax)
000000000001d44d	nopl	(%rax)
__ZN5Cacao14FLDialogHelper5closeEv:
000000000001d450	pushq	%rbp
000000000001d451	movq	%rsp, %rbp
000000000001d454	subq	$0x10, %rsp
000000000001d458	movq	%rdi, -0x8(%rbp)
000000000001d45c	movq	-0x8(%rbp), %rdi
000000000001d460	movq	0x120(%rdi), %rdi
000000000001d467	movq	(%rdi), %rax
000000000001d46a	callq	*0x430(%rax)
000000000001d470	addq	$0x10, %rsp
000000000001d474	popq	%rbp
000000000001d475	retq
000000000001d476	nopw	%cs:(%rax,%rax)
__ZN5Cacao16FLDialogDelegate8onCancelEPNS_14FLDialogHelperE:
000000000001d480	pushq	%rbp
000000000001d481	movq	%rsp, %rbp
000000000001d484	subq	$0x10, %rsp
000000000001d488	movq	%rdi, -0x8(%rbp)
000000000001d48c	movq	%rsi, -0x10(%rbp)
000000000001d490	movq	-0x10(%rbp), %rdi
000000000001d494	callq	__ZN5Cacao14FLDialogHelper5closeEv ## Cacao::FLDialogHelper::close()
000000000001d499	addq	$0x10, %rsp
000000000001d49d	popq	%rbp
000000000001d49e	retq
000000000001d49f	nop
__ZN5Cacao16FLDialogDelegate6onShowEPNS_14FLDialogHelperE:
000000000001d4a0	pushq	%rbp
000000000001d4a1	movq	%rsp, %rbp
000000000001d4a4	movq	%rdi, -0x8(%rbp)
000000000001d4a8	movq	%rsi, -0x10(%rbp)
000000000001d4ac	popq	%rbp
000000000001d4ad	retq
000000000001d4ae	nop
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_S4_:
000000000001d4b0	pushq	%rbp
000000000001d4b1	movq	%rsp, %rbp
000000000001d4b4	subq	$0x70, %rsp
000000000001d4b8	movq	%rdi, -0x10(%rbp)
000000000001d4bc	movq	%rsi, -0x18(%rbp)
000000000001d4c0	movq	%rdx, -0x20(%rbp)
000000000001d4c4	movq	%rcx, -0x28(%rbp)
000000000001d4c8	movq	%r8, -0x30(%rbp)
000000000001d4cc	movl	$0x140, %ecx
000000000001d4d1	movq	%rcx, %rdi
000000000001d4d4	movq	%rcx, -0x50(%rbp)
000000000001d4d8	callq	0x1f608 ## symbol stub for: __Znwm
000000000001d4dd	movq	%rax, %rcx
000000000001d4e0	movq	%rax, %rdx
000000000001d4e3	movq	%rax, %rdi
000000000001d4e6	movq	-0x50(%rbp), %rsi
000000000001d4ea	movq	%rax, -0x58(%rbp)
000000000001d4ee	movq	%rcx, -0x60(%rbp)
000000000001d4f2	movq	%rdx, -0x68(%rbp)
000000000001d4f6	callq	0x1f614 ## symbol stub for: ___bzero
000000000001d4fb	movq	-0x58(%rbp), %rdi
000000000001d4ff	callq	__ZN5Cacao14FLDialogHelperC1Ev ## Cacao::FLDialogHelper::FLDialogHelper()
000000000001d504	jmp	0x1d509
000000000001d509	movq	-0x68(%rbp), %rax
000000000001d50d	movq	%rax, -0x38(%rbp)
000000000001d511	movq	-0x38(%rbp), %rdi
000000000001d515	movq	-0x10(%rbp), %rsi
000000000001d519	movq	-0x18(%rbp), %rdx
000000000001d51d	movq	-0x20(%rbp), %rcx
000000000001d521	movq	-0x28(%rbp), %r8
000000000001d525	movq	-0x30(%rbp), %r9
000000000001d529	callq	__ZN5Cacao14FLDialogHelper13initWithStuffEPNS_16FLDialogDelegateEPKcS4_S4_S4_ ## Cacao::FLDialogHelper::initWithStuff(Cacao::FLDialogDelegate*, char const*, char const*, char const*, char const*)
000000000001d52e	testb	$0x1, %al
000000000001d530	jne	0x1d53b
000000000001d536	jmp	0x1d55f
000000000001d53b	movq	-0x38(%rbp), %rax
000000000001d53f	movq	%rax, -0x8(%rbp)
000000000001d543	jmp	0x1d586
000000000001d548	movl	%edx, %ecx
000000000001d54a	movq	%rax, -0x40(%rbp)
000000000001d54e	movl	%ecx, -0x44(%rbp)
000000000001d551	movq	-0x60(%rbp), %rdi
000000000001d555	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001d55a	jmp	0x1d590
000000000001d55f	movq	-0x38(%rbp), %rax
000000000001d563	cmpq	$0x0, %rax
000000000001d567	movq	%rax, -0x70(%rbp)
000000000001d56b	je	0x1d57e
000000000001d571	movq	-0x70(%rbp), %rax
000000000001d575	movq	(%rax), %rcx
000000000001d578	movq	%rax, %rdi
000000000001d57b	callq	*0x10(%rcx)
000000000001d57e	movq	$0x0, -0x8(%rbp)
000000000001d586	movq	-0x8(%rbp), %rax
000000000001d58a	addq	$0x70, %rsp
000000000001d58e	popq	%rbp
000000000001d58f	retq
000000000001d590	movq	-0x40(%rbp), %rdi
000000000001d594	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001d599	ud2
000000000001d59b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperC1Ev:
000000000001d5a0	pushq	%rbp
000000000001d5a1	movq	%rsp, %rbp
000000000001d5a4	subq	$0x10, %rsp
000000000001d5a8	movq	%rdi, -0x8(%rbp)
000000000001d5ac	movq	-0x8(%rbp), %rdi
000000000001d5b0	callq	__ZN5Cacao14FLDialogHelperC2Ev ## Cacao::FLDialogHelper::FLDialogHelper()
000000000001d5b5	addq	$0x10, %rsp
000000000001d5b9	popq	%rbp
000000000001d5ba	retq
000000000001d5bb	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelper13initWithStuffEPNS_16FLDialogDelegateEPKcS4_S4_S4_:
000000000001d5c0	pushq	%rbp
000000000001d5c1	movq	%rsp, %rbp
000000000001d5c4	subq	$0x230, %rsp
000000000001d5cb	movq	%rdi, -0x8(%rbp)
000000000001d5cf	movq	%rsi, -0x10(%rbp)
000000000001d5d3	movq	%rdx, -0x18(%rbp)
000000000001d5d7	movq	%rcx, -0x20(%rbp)
000000000001d5db	movq	%r8, -0x28(%rbp)
000000000001d5df	movq	%r9, -0x30(%rbp)
000000000001d5e3	movq	-0x8(%rbp), %rcx
000000000001d5e7	cmpq	$0x0, -0x10(%rbp)
000000000001d5ec	movq	%rcx, -0x170(%rbp)
000000000001d5f3	je	0x1d610
000000000001d5f9	movq	-0x10(%rbp), %rax
000000000001d5fd	movq	-0x170(%rbp), %rcx
000000000001d604	movq	%rax, 0x138(%rcx)
000000000001d60b	jmp	0x1d651
000000000001d610	movl	$0x8, %edi
000000000001d615	callq	0x1f608 ## symbol stub for: __Znwm
000000000001d61a	xorl	%esi, %esi
000000000001d61c	movq	%rax, %rdi
000000000001d61f	movl	$0x8, %edx
000000000001d624	movq	%rax, -0x178(%rbp)
000000000001d62b	callq	0x1f6aa ## symbol stub for: _memset
000000000001d630	movq	-0x178(%rbp), %rdi
000000000001d637	callq	__ZN5Cacao16FLDialogDelegateC1Ev ## Cacao::FLDialogDelegate::FLDialogDelegate()
000000000001d63c	movq	-0x170(%rbp), %rax
000000000001d643	movq	-0x178(%rbp), %rdx
000000000001d64a	movq	%rdx, 0x138(%rax)
000000000001d651	leaq	-0x40(%rbp), %rax
000000000001d655	movq	%rax, %rdi
000000000001d658	movq	%rax, -0x180(%rbp)
000000000001d65f	callq	0x1f40a ## symbol stub for: __ZNSaIcEC1Ev
000000000001d664	leaq	0x4578e(%rip), %rsi ## literal pool for: "ok"
000000000001d66b	leaq	-0x38(%rbp), %rdi
000000000001d66f	movq	-0x180(%rbp), %rdx
000000000001d676	callq	0x1f422 ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000001d67b	jmp	0x1d680
000000000001d680	leaq	0x45772(%rip), %rax ## literal pool for: "ok"
000000000001d687	leaq	-0x38(%rbp), %rsi
000000000001d68b	movq	%rax, %rdi
000000000001d68e	movq	%rax, %rdx
000000000001d691	callq	0x1f272 ## symbol stub for: __ZN12FLAlertLayer6createEPKcRKSsS1_
000000000001d696	movq	%rax, -0x188(%rbp)
000000000001d69d	jmp	0x1d6a2
000000000001d6a2	movq	-0x170(%rbp), %rax
000000000001d6a9	movq	-0x188(%rbp), %rcx
000000000001d6b0	movq	%rcx, 0x120(%rax)
000000000001d6b7	leaq	-0x38(%rbp), %rdi
000000000001d6bb	callq	0x1f428 ## symbol stub for: __ZNSsD1Ev
000000000001d6c0	leaq	-0x40(%rbp), %rdi
000000000001d6c4	callq	0x1f410 ## symbol stub for: __ZNSaIcED1Ev
000000000001d6c9	movq	-0x170(%rbp), %rax
000000000001d6d0	movq	0x120(%rax), %rcx
000000000001d6d7	movq	0x220(%rcx), %rcx
000000000001d6de	movq	%rcx, 0x128(%rax)
000000000001d6e5	movq	0x120(%rax), %rcx
000000000001d6ec	movq	0x220(%rcx), %rcx
000000000001d6f3	movq	%rcx, %rdi
000000000001d6f6	movq	(%rcx), %rcx
000000000001d6f9	callq	*0x1d8(%rcx)
000000000001d6ff	movq	%rax, -0x58(%rbp)
000000000001d703	movl	$0x0, -0x5c(%rbp)
000000000001d70a	movl	-0x5c(%rbp), %eax
000000000001d70d	movq	-0x58(%rbp), %rdi
000000000001d711	movl	%eax, -0x18c(%rbp)
000000000001d717	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001d71c	movl	-0x18c(%rbp), %ecx
000000000001d722	cmpl	%eax, %ecx
000000000001d724	jae	0x1d813
000000000001d72a	movq	-0x58(%rbp), %rdi
000000000001d72e	movl	-0x5c(%rbp), %esi
000000000001d731	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001d736	movq	%rax, -0x68(%rbp)
000000000001d73a	callq	__Z7getBasev ## getBase()
000000000001d73f	addq	$0x682fc0, %rax
000000000001d745	movq	-0x68(%rbp), %rdi
000000000001d749	cmpq	(%rdi), %rax
000000000001d74c	jne	0x1d7eb
000000000001d752	movq	-0x68(%rbp), %rax
000000000001d756	movq	%rax, %rcx
000000000001d759	movq	(%rax), %rax
000000000001d75c	movq	%rcx, %rdi
000000000001d75f	callq	*0x1d8(%rax)
000000000001d765	movq	%rax, -0x70(%rbp)
000000000001d769	movl	$0x0, -0x74(%rbp)
000000000001d770	movl	-0x74(%rbp), %eax
000000000001d773	movq	-0x70(%rbp), %rdi
000000000001d777	movl	%eax, -0x190(%rbp)
000000000001d77d	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001d782	movl	-0x190(%rbp), %ecx
000000000001d788	cmpl	%eax, %ecx
000000000001d78a	jae	0x1d7e6
000000000001d790	movq	-0x70(%rbp), %rdi
000000000001d794	movl	-0x74(%rbp), %esi
000000000001d797	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001d79c	xorl	%esi, %esi
000000000001d79e	movq	%rax, %rdi
000000000001d7a1	movq	(%rax), %rax
000000000001d7a4	callq	*0x148(%rax)
000000000001d7aa	movl	-0x74(%rbp), %eax
000000000001d7ad	addl	$0x1, %eax
000000000001d7b0	movl	%eax, -0x74(%rbp)
000000000001d7b3	jmp	0x1d770
000000000001d7b8	movl	%edx, %ecx
000000000001d7ba	movq	%rax, -0x48(%rbp)
000000000001d7be	movl	%ecx, -0x4c(%rbp)
000000000001d7c1	jmp	0x1d7d8
000000000001d7c6	movl	%edx, %ecx
000000000001d7c8	movq	%rax, -0x48(%rbp)
000000000001d7cc	movl	%ecx, -0x4c(%rbp)
000000000001d7cf	leaq	-0x38(%rbp), %rdi
000000000001d7d3	callq	0x1f428 ## symbol stub for: __ZNSsD1Ev
000000000001d7d8	leaq	-0x40(%rbp), %rdi
000000000001d7dc	callq	0x1f410 ## symbol stub for: __ZNSaIcED1Ev
000000000001d7e1	jmp	0x1de76
000000000001d7e6	jmp	0x1d800
000000000001d7eb	xorl	%esi, %esi
000000000001d7ed	movq	-0x68(%rbp), %rax
000000000001d7f1	movq	%rax, %rcx
000000000001d7f4	movq	(%rax), %rax
000000000001d7f7	movq	%rcx, %rdi
000000000001d7fa	callq	*0x148(%rax)
000000000001d800	jmp	0x1d805
000000000001d805	movl	-0x5c(%rbp), %eax
000000000001d808	addl	$0x1, %eax
000000000001d80b	movl	%eax, -0x5c(%rbp)
000000000001d80e	jmp	0x1d70a
000000000001d813	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
000000000001d818	leaq	-0x80(%rbp), %rdi
000000000001d81c	movq	%rax, %rsi
000000000001d81f	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
000000000001d824	leaq	-0x90(%rbp), %rdi
000000000001d82b	xorps	%xmm0, %xmm0
000000000001d82e	movss	0x42dd2(%rip), %xmm1
000000000001d836	movss	%xmm0, -0x194(%rbp)
000000000001d83e	movss	-0x194(%rbp), %xmm2
000000000001d846	movss	%xmm1, -0x198(%rbp)
000000000001d84e	movaps	%xmm2, %xmm1
000000000001d851	movss	-0x198(%rbp), %xmm2
000000000001d859	movss	-0x198(%rbp), %xmm3
000000000001d861	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001d866	movl	$0x43070000, -0x94(%rbp)
000000000001d870	movl	$0x42a00000, -0x98(%rbp)
000000000001d87a	movss	-0x80(%rbp), %xmm0
000000000001d87f	movss	-0x7c(%rbp), %xmm1
000000000001d884	movss	0x42d80(%rip), %xmm2
000000000001d88c	divss	%xmm2, %xmm0
000000000001d890	divss	%xmm2, %xmm1
000000000001d894	movss	-0x98(%rbp), %xmm2
000000000001d89c	addss	%xmm2, %xmm1
000000000001d8a0	leaq	-0xa0(%rbp), %rax
000000000001d8a7	movq	%rax, %rdi
000000000001d8aa	movq	%rax, -0x1a0(%rbp)
000000000001d8b1	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001d8b6	movss	-0xa0(%rbp), %xmm0
000000000001d8be	movss	-0x9c(%rbp), %xmm1
000000000001d8c6	cvtss2sd	%xmm1, %xmm1
000000000001d8ca	movss	-0x94(%rbp), %xmm2
000000000001d8d2	cvtss2sd	%xmm2, %xmm2
000000000001d8d6	movsd	0x42d12(%rip), %xmm3
000000000001d8de	divsd	%xmm3, %xmm2
000000000001d8e2	addsd	%xmm2, %xmm1
000000000001d8e6	movsd	0x42d0a(%rip), %xmm2
000000000001d8ee	addsd	%xmm2, %xmm1
000000000001d8f2	cvtsd2ss	%xmm1, %xmm1
000000000001d8f6	leaq	-0xa8(%rbp), %rax
000000000001d8fd	movq	%rax, %rdi
000000000001d900	movq	%rax, -0x1a8(%rbp)
000000000001d907	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001d90c	movss	-0xa0(%rbp), %xmm0
000000000001d914	movss	-0x9c(%rbp), %xmm1
000000000001d91c	movss	0x42cec(%rip), %xmm2
000000000001d924	addss	%xmm2, %xmm1
000000000001d928	leaq	-0xb0(%rbp), %rdi
000000000001d92f	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001d934	movq	-0x18(%rbp), %rdi
000000000001d938	leaq	0x454bd(%rip), %rsi ## literal pool for: "bigFont.fnt"
000000000001d93f	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
000000000001d944	movq	%rax, -0xb8(%rbp)
000000000001d94b	movq	-0xb8(%rbp), %rax
000000000001d952	movq	(%rax), %rsi
000000000001d955	movq	0xb8(%rsi), %rsi
000000000001d95c	movq	%rax, %rdi
000000000001d95f	movq	-0x1a8(%rbp), %rax
000000000001d966	movq	%rsi, -0x1b0(%rbp)
000000000001d96d	movq	%rax, %rsi
000000000001d970	movq	-0x1b0(%rbp), %rcx
000000000001d977	callq	*%rcx
000000000001d979	movq	-0xb8(%rbp), %rax
000000000001d980	movq	(%rax), %rcx
000000000001d983	movq	0xa0(%rcx), %rcx
000000000001d98a	movss	0x42c82(%rip), %xmm0
000000000001d992	movq	%rax, %rdi
000000000001d995	callq	*%rcx
000000000001d997	movq	-0x170(%rbp), %rax
000000000001d99e	movq	0x128(%rax), %rcx
000000000001d9a5	movq	-0xb8(%rbp), %rsi
000000000001d9ac	movq	(%rcx), %rdi
000000000001d9af	movq	0x1b8(%rdi), %rdi
000000000001d9b6	movq	%rdi, -0x1b8(%rbp)
000000000001d9bd	movq	%rcx, %rdi
000000000001d9c0	movq	-0x1b8(%rbp), %rcx
000000000001d9c7	callq	*%rcx
000000000001d9c9	movl	$0x43b40000, -0xbc(%rbp)
000000000001d9d3	movl	$0x42480000, -0xc0(%rbp)
000000000001d9dd	movss	-0xbc(%rbp), %xmm0
000000000001d9e5	movss	-0xc0(%rbp), %xmm1
000000000001d9ed	movq	-0x30(%rbp), %rdi
000000000001d9f1	leaq	0x45410(%rip), %rsi ## literal pool for: "Thonburi"
000000000001d9f8	xorl	%edx, %edx
000000000001d9fa	movl	%edx, %ecx
000000000001d9fc	movl	$0xc, %r8d
000000000001da02	movl	%edx, -0x1bc(%rbp)
000000000001da08	movl	%r8d, %edx
000000000001da0b	callq	__ZN15CCTextInputNode6createEffPKcS1_iS1_ ## CCTextInputNode::create(float, float, char const*, char const*, int, char const*)
000000000001da10	movq	%rax, -0xc8(%rbp)
000000000001da17	movq	-0xc8(%rbp), %rax
000000000001da1e	movq	(%rax), %rcx
000000000001da21	movq	0xb8(%rcx), %rcx
000000000001da28	movq	%rax, %rdi
000000000001da2b	movq	-0x1a0(%rbp), %rsi
000000000001da32	callq	*%rcx
000000000001da34	movq	-0x170(%rbp), %rax
000000000001da3b	movq	0x128(%rax), %rcx
000000000001da42	movq	-0xc8(%rbp), %rsi
000000000001da49	movq	(%rcx), %rdi
000000000001da4c	movq	0x1b8(%rdi), %rdi
000000000001da53	movq	%rdi, -0x1c8(%rbp)
000000000001da5a	movq	%rcx, %rdi
000000000001da5d	movq	-0x1c8(%rbp), %rcx
000000000001da64	callq	*%rcx
000000000001da66	movq	-0xc8(%rbp), %rax
000000000001da6d	movq	-0x170(%rbp), %rcx
000000000001da74	movq	%rax, 0x130(%rcx)
000000000001da7b	leaq	-0xd0(%rbp), %rax
000000000001da82	movss	0x42b8e(%rip), %xmm0
000000000001da8a	movss	0x42b8a(%rip), %xmm1
000000000001da92	movq	%rax, %rdi
000000000001da95	movq	%rax, -0x1d0(%rbp)
000000000001da9c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001daa1	movl	$0xe6, %edx
000000000001daa6	movl	$0x96, %ecx
000000000001daab	movl	%edx, %edi
000000000001daad	movl	%edx, %esi
000000000001daaf	callq	__ZN7cocos2dL4ccc4Ehhhh ## cocos2d::ccc4(unsigned char, unsigned char, unsigned char, unsigned char)
000000000001dab4	movl	%eax, -0xe0(%rbp)
000000000001daba	leaq	-0xe0(%rbp), %rdi
000000000001dac1	movss	0x42b57(%rip), %xmm0
000000000001dac9	movss	0x42b53(%rip), %xmm1
000000000001dad1	callq	__ZN7cocos2d12CCLayerColor6createERKNS_10_ccColor4BEff ## cocos2d::CCLayerColor::create(cocos2d::_ccColor4B const&, float, float)
000000000001dad6	movq	%rax, -0xd8(%rbp)
000000000001dadd	movq	-0xd8(%rbp), %rax
000000000001dae4	leaq	-0xe8(%rbp), %rdi
000000000001daeb	movq	%rdi, -0x1d8(%rbp)
000000000001daf2	movq	-0x1a0(%rbp), %rsi
000000000001daf9	movq	-0x1d0(%rbp), %rdx
000000000001db00	movq	%rax, -0x1e0(%rbp)
000000000001db07	callq	__ZNK7cocos2d7CCPointplERKS0_ ## cocos2d::CCPoint::operator+(cocos2d::CCPoint const&) const
000000000001db0c	movq	-0x1e0(%rbp), %rax
000000000001db13	movq	(%rax), %rdx
000000000001db16	movq	0xb8(%rdx), %rdx
000000000001db1d	movq	%rax, %rdi
000000000001db20	movq	-0x1d8(%rbp), %rsi
000000000001db27	callq	*%rdx
000000000001db29	movq	-0x170(%rbp), %rax
000000000001db30	movq	0x128(%rax), %rdx
000000000001db37	movq	-0xd8(%rbp), %rsi
000000000001db3e	movq	(%rdx), %rdi
000000000001db41	movq	0x1b8(%rdi), %rdi
000000000001db48	movq	%rdi, -0x1e8(%rbp)
000000000001db4f	movq	%rdx, %rdi
000000000001db52	movq	-0x1e8(%rbp), %rdx
000000000001db59	callq	*%rdx
000000000001db5b	movq	-0x28(%rbp), %rdi
000000000001db5f	movl	$0x5a, %ecx
000000000001db64	movss	0x42abc(%rip), %xmm0
000000000001db6c	movl	$0x1, %r8d
000000000001db72	movl	%ecx, %esi
000000000001db74	movl	-0x1bc(%rbp), %edx
000000000001db7a	movss	%xmm0, -0x1ec(%rbp)
000000000001db82	movl	%ecx, -0x1f0(%rbp)
000000000001db88	movl	%r8d, %ecx
000000000001db8b	movl	%r8d, -0x1f4(%rbp)
000000000001db92	callq	__ZN12ButtonSprite6createEPKciifb ## ButtonSprite::create(char const*, int, int, float, bool)
000000000001db97	movq	%rax, -0xf0(%rbp)
000000000001db9e	movq	-0xf0(%rbp), %rax
000000000001dba5	leaq	__ZN5Cacao14FLDialogHelper8onCancelEPN7cocos2d8CCObjectE(%rip), %rdi ## Cacao::FLDialogHelper::onCancel(cocos2d::CCObject*)
000000000001dbac	movq	%rdi, -0x108(%rbp)
000000000001dbb3	movq	$0x0, -0x100(%rbp)
000000000001dbbe	movq	-0x108(%rbp), %rcx
000000000001dbc5	movq	-0x100(%rbp), %r8
000000000001dbcc	movq	%rax, %rdi
000000000001dbcf	movq	%rax, %rsi
000000000001dbd2	movq	-0x170(%rbp), %rdx
000000000001dbd9	callq	__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemSpriteExtra::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001dbde	movq	%rax, -0xf8(%rbp)
000000000001dbe5	movq	-0xf8(%rbp), %rax
000000000001dbec	movq	(%rax), %rcx
000000000001dbef	movq	0xa0(%rcx), %rcx
000000000001dbf6	movss	0x42a02(%rip), %xmm0
000000000001dbfe	movq	%rax, %rdi
000000000001dc01	callq	*%rcx
000000000001dc03	movq	-0x20(%rbp), %rdi
000000000001dc07	movl	-0x1f0(%rbp), %esi
000000000001dc0d	movl	-0x1bc(%rbp), %edx
000000000001dc13	movss	-0x1ec(%rbp), %xmm0
000000000001dc1b	movl	-0x1f4(%rbp), %ecx
000000000001dc21	callq	__ZN12ButtonSprite6createEPKciifb ## ButtonSprite::create(char const*, int, int, float, bool)
000000000001dc26	movq	%rax, -0x110(%rbp)
000000000001dc2d	movq	-0x110(%rbp), %rax
000000000001dc34	movq	%rax, %rdi
000000000001dc37	movq	-0x170(%rbp), %r8
000000000001dc3e	leaq	__ZN5Cacao14FLDialogHelper8onSubmitEPN7cocos2d8CCObjectE(%rip), %r9 ## Cacao::FLDialogHelper::onSubmit(cocos2d::CCObject*)
000000000001dc45	movq	%r9, -0x128(%rbp)
000000000001dc4c	movq	$0x0, -0x120(%rbp)
000000000001dc57	movq	-0x128(%rbp), %rcx
000000000001dc5e	movq	-0x120(%rbp), %r9
000000000001dc65	movq	%rax, %rsi
000000000001dc68	movq	%r8, %rdx
000000000001dc6b	movq	%r9, %r8
000000000001dc6e	callq	__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemSpriteExtra::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001dc73	movss	0x42989(%rip), %xmm0
000000000001dc7b	movq	%rax, -0x118(%rbp)
000000000001dc82	leaq	-0x130(%rbp), %rdi
000000000001dc89	xorps	%xmm1, %xmm1
000000000001dc8c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001dc91	movss	0x42967(%rip), %xmm0
000000000001dc99	movq	-0x118(%rbp), %rax
000000000001dca0	movq	(%rax), %rcx
000000000001dca3	movq	%rax, %rdi
000000000001dca6	callq	*0xa0(%rcx)
000000000001dcac	movl	$0x0, -0x134(%rbp)
000000000001dcb6	movl	-0x134(%rbp), %eax
000000000001dcbc	movq	-0x58(%rbp), %rdi
000000000001dcc0	movl	%eax, -0x1f8(%rbp)
000000000001dcc6	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001dccb	movl	-0x1f8(%rbp), %ecx
000000000001dcd1	cmpl	%eax, %ecx
000000000001dcd3	jae	0x1de66
000000000001dcd9	movq	-0x58(%rbp), %rdi
000000000001dcdd	movl	-0x134(%rbp), %esi
000000000001dce3	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001dce8	movq	%rax, -0x140(%rbp)
000000000001dcef	callq	__Z7getBasev ## getBase()
000000000001dcf4	addq	$0x682fc0, %rax
000000000001dcfa	movq	-0x140(%rbp), %rdi
000000000001dd01	cmpq	(%rdi), %rax
000000000001dd04	jne	0x1de4d
000000000001dd0a	movq	-0x140(%rbp), %rax
000000000001dd11	movq	%rax, -0x148(%rbp)
000000000001dd18	movq	-0x118(%rbp), %rax
000000000001dd1f	movq	%rax, %rcx
000000000001dd22	movq	-0x148(%rbp), %rdx
000000000001dd29	leaq	-0x158(%rbp), %rdi
000000000001dd30	leaq	-0xb0(%rbp), %rsi
000000000001dd37	leaq	-0x130(%rbp), %r8
000000000001dd3e	movq	%rdx, -0x200(%rbp)
000000000001dd45	movq	%r8, %rdx
000000000001dd48	movq	%rax, -0x208(%rbp)
000000000001dd4f	movq	%rcx, -0x210(%rbp)
000000000001dd56	callq	__ZNK7cocos2d7CCPointplERKS0_ ## cocos2d::CCPoint::operator+(cocos2d::CCPoint const&) const
000000000001dd5b	leaq	-0x150(%rbp), %rdi
000000000001dd62	movq	-0x200(%rbp), %rsi
000000000001dd69	leaq	-0x158(%rbp), %rdx
000000000001dd70	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
000000000001dd75	movq	-0x208(%rbp), %rax
000000000001dd7c	movq	(%rax), %rcx
000000000001dd7f	movq	-0x210(%rbp), %rdi
000000000001dd86	leaq	-0x150(%rbp), %rsi
000000000001dd8d	callq	*0xb8(%rcx)
000000000001dd93	movq	-0xf8(%rbp), %rax
000000000001dd9a	movq	%rax, %rcx
000000000001dd9d	movq	-0x148(%rbp), %rdx
000000000001dda4	leaq	-0x168(%rbp), %rdi
000000000001ddab	leaq	-0xb0(%rbp), %rsi
000000000001ddb2	leaq	-0x130(%rbp), %r8
000000000001ddb9	movq	%rdx, -0x218(%rbp)
000000000001ddc0	movq	%r8, %rdx
000000000001ddc3	movq	%rax, -0x220(%rbp)
000000000001ddca	movq	%rcx, -0x228(%rbp)
000000000001ddd1	callq	__ZNK7cocos2d7CCPointmiERKS0_ ## cocos2d::CCPoint::operator-(cocos2d::CCPoint const&) const
000000000001ddd6	leaq	-0x160(%rbp), %rdi
000000000001dddd	movq	-0x218(%rbp), %rsi
000000000001dde4	leaq	-0x168(%rbp), %rdx
000000000001ddeb	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
000000000001ddf0	movq	-0x220(%rbp), %rax
000000000001ddf7	movq	(%rax), %rcx
000000000001ddfa	movq	-0x228(%rbp), %rdi
000000000001de01	leaq	-0x160(%rbp), %rsi
000000000001de08	callq	*0xb8(%rcx)
000000000001de0e	movq	-0x148(%rbp), %rax
000000000001de15	movq	-0x118(%rbp), %rcx
000000000001de1c	movq	(%rax), %rdx
000000000001de1f	movq	%rax, %rdi
000000000001de22	movq	%rcx, %rsi
000000000001de25	callq	*0x1b8(%rdx)
000000000001de2b	movq	-0x148(%rbp), %rax
000000000001de32	movq	-0xf8(%rbp), %rcx
000000000001de39	movq	(%rax), %rdx
000000000001de3c	movq	%rax, %rdi
000000000001de3f	movq	%rcx, %rsi
000000000001de42	callq	*0x1b8(%rdx)
000000000001de48	jmp	0x1de66
000000000001de4d	jmp	0x1de52
000000000001de52	movl	-0x134(%rbp), %eax
000000000001de58	addl	$0x1, %eax
000000000001de5b	movl	%eax, -0x134(%rbp)
000000000001de61	jmp	0x1dcb6
000000000001de66	movb	$0x1, %al
000000000001de68	andb	$0x1, %al
000000000001de6a	movzbl	%al, %eax
000000000001de6d	addq	$0x230, %rsp
000000000001de74	popq	%rbp
000000000001de75	retq
000000000001de76	movq	-0x48(%rbp), %rdi
000000000001de7a	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001de7f	ud2
000000000001de81	nopw	%cs:(%rax,%rax)
000000000001de8b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_:
000000000001de90	pushq	%rbp
000000000001de91	movq	%rsp, %rbp
000000000001de94	subq	$0x20, %rsp
000000000001de98	movq	%rdi, -0x8(%rbp)
000000000001de9c	movq	%rsi, -0x10(%rbp)
000000000001dea0	movq	%rdx, -0x18(%rbp)
000000000001dea4	movq	%rcx, -0x20(%rbp)
000000000001dea8	movq	-0x8(%rbp), %rdi
000000000001deac	movq	-0x10(%rbp), %rsi
000000000001deb0	movq	-0x18(%rbp), %rdx
000000000001deb4	movq	-0x20(%rbp), %rcx
000000000001deb8	leaq	0x44f13(%rip), %r8 ## literal pool for: "Insert text"
000000000001debf	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_S4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*, char const*, char const*)
000000000001dec4	addq	$0x20, %rsp
000000000001dec8	popq	%rbp
000000000001dec9	retq
000000000001deca	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_:
000000000001ded0	pushq	%rbp
000000000001ded1	movq	%rsp, %rbp
000000000001ded4	subq	$0x20, %rsp
000000000001ded8	movq	%rdi, -0x8(%rbp)
000000000001dedc	movq	%rsi, -0x10(%rbp)
000000000001dee0	movq	%rdx, -0x18(%rbp)
000000000001dee4	movq	-0x8(%rbp), %rdi
000000000001dee8	movq	-0x10(%rbp), %rsi
000000000001deec	movq	-0x18(%rbp), %rdx
000000000001def0	leaq	0x44ee7(%rip), %rcx ## literal pool for: "Cancel"
000000000001def7	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*, char const*)
000000000001defc	addq	$0x20, %rsp
000000000001df00	popq	%rbp
000000000001df01	retq
000000000001df02	nopw	%cs:(%rax,%rax)
000000000001df0c	nopl	(%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKc:
000000000001df10	pushq	%rbp
000000000001df11	movq	%rsp, %rbp
000000000001df14	subq	$0x10, %rsp
000000000001df18	movq	%rdi, -0x8(%rbp)
000000000001df1c	movq	%rsi, -0x10(%rbp)
000000000001df20	movq	-0x8(%rbp), %rdi
000000000001df24	movq	-0x10(%rbp), %rsi
000000000001df28	leaq	0x44eb6(%rip), %rdx ## literal pool for: "Submit"
000000000001df2f	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*)
000000000001df34	addq	$0x10, %rsp
000000000001df38	popq	%rbp
000000000001df39	retq
000000000001df3a	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateE:
000000000001df40	pushq	%rbp
000000000001df41	movq	%rsp, %rbp
000000000001df44	subq	$0x10, %rsp
000000000001df48	movq	%rdi, -0x8(%rbp)
000000000001df4c	movq	-0x8(%rbp), %rdi
000000000001df50	leaq	0x44e95(%rip), %rsi ## literal pool for: "Cacao Prompt"
000000000001df57	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKc ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*)
000000000001df5c	addq	$0x10, %rsp
000000000001df60	popq	%rbp
000000000001df61	retq
000000000001df62	nopw	%cs:(%rax,%rax)
000000000001df6c	nopl	(%rax)
__ZN5Cacao14FLDialogHelper6createEv:
000000000001df70	pushq	%rbp
000000000001df71	movq	%rsp, %rbp
000000000001df74	xorl	%eax, %eax
000000000001df76	movl	%eax, %edi
000000000001df78	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateE ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*)
000000000001df7d	popq	%rbp
000000000001df7e	retq
000000000001df7f	nop
__ZN5Cacao14FLDialogHelper8onSubmitEPN7cocos2d8CCObjectE:
000000000001df80	pushq	%rbp
000000000001df81	movq	%rsp, %rbp
000000000001df84	subq	$0x50, %rsp
000000000001df88	movq	%rdi, -0x8(%rbp)
000000000001df8c	movq	%rsi, -0x10(%rbp)
000000000001df90	movq	-0x8(%rbp), %rsi
000000000001df94	movq	0x130(%rsi), %rdi
000000000001df9b	movq	%rsi, -0x38(%rbp)
000000000001df9f	callq	__ZN15CCTextInputNode11getString_sEv ## CCTextInputNode::getString_s()
000000000001dfa4	leaq	-0x20(%rbp), %rsi
000000000001dfa8	movq	%rsi, %rdi
000000000001dfab	movq	%rax, -0x40(%rbp)
000000000001dfaf	movq	%rsi, -0x48(%rbp)
000000000001dfb3	callq	0x1f40a ## symbol stub for: __ZNSaIcEC1Ev
000000000001dfb8	leaq	-0x18(%rbp), %rdi
000000000001dfbc	movq	-0x40(%rbp), %rsi
000000000001dfc0	movq	-0x48(%rbp), %rdx
000000000001dfc4	callq	0x1f422 ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000001dfc9	jmp	0x1dfce
000000000001dfce	leaq	-0x20(%rbp), %rdi
000000000001dfd2	callq	0x1f410 ## symbol stub for: __ZNSaIcED1Ev
000000000001dfd7	movq	-0x38(%rbp), %rdi
000000000001dfdb	movq	0x138(%rdi), %rax
000000000001dfe2	movq	(%rax), %rcx
000000000001dfe5	movq	(%rcx), %rcx
000000000001dfe8	leaq	-0x18(%rbp), %rdx
000000000001dfec	movq	%rax, %rdi
000000000001dfef	movq	-0x38(%rbp), %rsi
000000000001dff3	callq	*%rcx
000000000001dff5	jmp	0x1dffa
000000000001dffa	leaq	-0x18(%rbp), %rdi
000000000001dffe	callq	0x1f428 ## symbol stub for: __ZNSsD1Ev
000000000001e003	addq	$0x50, %rsp
000000000001e007	popq	%rbp
000000000001e008	retq
000000000001e009	movl	%edx, %ecx
000000000001e00b	movq	%rax, -0x28(%rbp)
000000000001e00f	movl	%ecx, -0x2c(%rbp)
000000000001e012	leaq	-0x20(%rbp), %rdi
000000000001e016	callq	0x1f410 ## symbol stub for: __ZNSaIcED1Ev
000000000001e01b	jmp	0x1e032
000000000001e020	movl	%edx, %ecx
000000000001e022	movq	%rax, -0x28(%rbp)
000000000001e026	movl	%ecx, -0x2c(%rbp)
000000000001e029	leaq	-0x18(%rbp), %rdi
000000000001e02d	callq	0x1f428 ## symbol stub for: __ZNSsD1Ev
000000000001e032	movq	-0x28(%rbp), %rdi
000000000001e036	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001e03b	ud2
000000000001e03d	nopl	(%rax)
__ZN5Cacao14FLDialogHelper8onCancelEPN7cocos2d8CCObjectE:
000000000001e040	pushq	%rbp
000000000001e041	movq	%rsp, %rbp
000000000001e044	subq	$0x10, %rsp
000000000001e048	movq	%rdi, -0x8(%rbp)
000000000001e04c	movq	%rsi, -0x10(%rbp)
000000000001e050	movq	-0x8(%rbp), %rsi
000000000001e054	movq	0x138(%rsi), %rdi
000000000001e05b	movq	(%rdi), %rax
000000000001e05e	callq	*0x8(%rax)
000000000001e061	addq	$0x10, %rsp
000000000001e065	popq	%rbp
000000000001e066	retq
000000000001e067	nopw	(%rax,%rax)
__ZN5Cacao16FLDialogDelegateC1Ev:
000000000001e070	pushq	%rbp
000000000001e071	movq	%rsp, %rbp
000000000001e074	subq	$0x10, %rsp
000000000001e078	movq	%rdi, -0x8(%rbp)
000000000001e07c	movq	-0x8(%rbp), %rdi
000000000001e080	callq	__ZN5Cacao16FLDialogDelegateC2Ev ## Cacao::FLDialogDelegate::FLDialogDelegate()
000000000001e085	addq	$0x10, %rsp
000000000001e089	popq	%rbp
000000000001e08a	retq
000000000001e08b	nopl	(%rax,%rax)
__ZN12FLAlertLayer6createEPKcRKSsS1_:
000000000001e090	pushq	%rbp
000000000001e091	movq	%rsp, %rbp
000000000001e094	subq	$0x30, %rsp
000000000001e098	xorl	%eax, %eax
000000000001e09a	movl	%eax, %ecx
000000000001e09c	movss	0x42588(%rip), %xmm0
000000000001e0a4	movq	%rdi, -0x8(%rbp)
000000000001e0a8	movq	%rsi, -0x10(%rbp)
000000000001e0ac	movq	%rdx, -0x18(%rbp)
000000000001e0b0	movq	-0x8(%rbp), %rsi
000000000001e0b4	movq	-0x10(%rbp), %rdx
000000000001e0b8	movq	-0x18(%rbp), %rdi
000000000001e0bc	movq	%rdi, -0x20(%rbp)
000000000001e0c0	movq	%rcx, %rdi
000000000001e0c3	movq	-0x20(%rbp), %r8
000000000001e0c7	movq	%rcx, -0x28(%rbp)
000000000001e0cb	movq	%r8, %rcx
000000000001e0ce	movq	-0x28(%rbp), %r8
000000000001e0d2	callq	__ZN12FLAlertLayer6createEPvPKcRKSsS2_S2_f ## FLAlertLayer::create(void*, char const*, std::string const&, char const*, char const*, float)
000000000001e0d7	addq	$0x30, %rsp
000000000001e0db	popq	%rbp
000000000001e0dc	retq
000000000001e0dd	nopl	(%rax)
__ZN7cocos2dL4ccc4Ehhhh:
000000000001e0e0	pushq	%rbp
000000000001e0e1	movq	%rsp, %rbp
000000000001e0e4	movb	%cl, %al
000000000001e0e6	movb	%dl, %r8b
000000000001e0e9	movb	%sil, %r9b
000000000001e0ec	movb	%dil, %r10b
000000000001e0ef	movb	%r10b, -0x9(%rbp)
000000000001e0f3	movb	%r9b, -0xa(%rbp)
000000000001e0f7	movb	%r8b, -0xb(%rbp)
000000000001e0fb	movb	%al, -0xc(%rbp)
000000000001e0fe	movb	-0x9(%rbp), %al
000000000001e101	movb	%al, -0x8(%rbp)
000000000001e104	movb	-0xa(%rbp), %al
000000000001e107	movb	%al, -0x7(%rbp)
000000000001e10a	movb	-0xb(%rbp), %al
000000000001e10d	movb	%al, -0x6(%rbp)
000000000001e110	movb	-0xc(%rbp), %al
000000000001e113	movb	%al, -0x5(%rbp)
000000000001e116	movl	-0x8(%rbp), %eax
000000000001e119	popq	%rbp
000000000001e11a	retq
000000000001e11b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelper4showEv:
000000000001e120	pushq	%rbp
000000000001e121	movq	%rsp, %rbp
000000000001e124	subq	$0x20, %rsp
000000000001e128	movq	%rdi, -0x8(%rbp)
000000000001e12c	movq	-0x8(%rbp), %rdi
000000000001e130	movq	0x138(%rdi), %rax
000000000001e137	movq	(%rax), %rcx
000000000001e13a	movq	%rdi, -0x10(%rbp)
000000000001e13e	movq	%rax, %rdi
000000000001e141	movq	-0x10(%rbp), %rsi
000000000001e145	callq	*0x10(%rcx)
000000000001e148	movq	-0x10(%rbp), %rax
000000000001e14c	movq	0x120(%rax), %rdi
000000000001e153	callq	__ZN12FLAlertLayer4showEv ## FLAlertLayer::show()
000000000001e158	movl	%eax, -0x14(%rbp)
000000000001e15b	addq	$0x20, %rsp
000000000001e15f	popq	%rbp
000000000001e160	retq
000000000001e161	nopw	%cs:(%rax,%rax)
000000000001e16b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperC2Ev:
000000000001e170	pushq	%rbp
000000000001e171	movq	%rsp, %rbp
000000000001e174	subq	$0x10, %rsp
000000000001e178	movq	%rdi, -0x8(%rbp)
000000000001e17c	movq	-0x8(%rbp), %rdi
000000000001e180	movq	%rdi, %rax
000000000001e183	movq	%rdi, -0x10(%rbp)
000000000001e187	movq	%rax, %rdi
000000000001e18a	callq	__ZN7cocos2d6CCNodeC2Ev ## cocos2d::CCNode::CCNode()
000000000001e18f	movq	0x47eaa(%rip), %rax
000000000001e196	addq	$0x10, %rax
000000000001e19a	movq	-0x10(%rbp), %rdi
000000000001e19e	movq	%rax, (%rdi)
000000000001e1a1	addq	$0x10, %rsp
000000000001e1a5	popq	%rbp
000000000001e1a6	retq
000000000001e1a7	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD1Ev:
000000000001e1b0	pushq	%rbp
000000000001e1b1	movq	%rsp, %rbp
000000000001e1b4	subq	$0x10, %rsp
000000000001e1b8	movq	%rdi, -0x8(%rbp)
000000000001e1bc	movq	-0x8(%rbp), %rdi
000000000001e1c0	callq	__ZN5Cacao14FLDialogHelperD2Ev ## Cacao::FLDialogHelper::~FLDialogHelper()
000000000001e1c5	addq	$0x10, %rsp
000000000001e1c9	popq	%rbp
000000000001e1ca	retq
000000000001e1cb	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD0Ev:
000000000001e1d0	pushq	%rbp
000000000001e1d1	movq	%rsp, %rbp
000000000001e1d4	subq	$0x10, %rsp
000000000001e1d8	movq	%rdi, -0x8(%rbp)
000000000001e1dc	movq	-0x8(%rbp), %rdi
000000000001e1e0	movq	%rdi, -0x10(%rbp)
000000000001e1e4	callq	__ZN5Cacao14FLDialogHelperD1Ev ## Cacao::FLDialogHelper::~FLDialogHelper()
000000000001e1e9	movq	-0x10(%rbp), %rdi
000000000001e1ed	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001e1f2	addq	$0x10, %rsp
000000000001e1f6	popq	%rbp
000000000001e1f7	retq
000000000001e1f8	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD2Ev:
000000000001e200	pushq	%rbp
000000000001e201	movq	%rsp, %rbp
000000000001e204	subq	$0x10, %rsp
000000000001e208	movq	%rdi, -0x8(%rbp)
000000000001e20c	movq	-0x8(%rbp), %rdi
000000000001e210	callq	__ZN7cocos2d6CCNodeD2Ev ## cocos2d::CCNode::~CCNode()
000000000001e215	addq	$0x10, %rsp
000000000001e219	popq	%rbp
000000000001e21a	retq
000000000001e21b	nopl	(%rax,%rax)
__ZN5Cacao16FLDialogDelegateC2Ev:
000000000001e220	pushq	%rbp
000000000001e221	movq	%rsp, %rbp
000000000001e224	leaq	__ZTVN5Cacao16FLDialogDelegateE(%rip), %rax ## vtable for Cacao::FLDialogDelegate
000000000001e22b	addq	$0x10, %rax
000000000001e22f	movq	%rdi, -0x8(%rbp)
000000000001e233	movq	-0x8(%rbp), %rdi
000000000001e237	movq	%rax, (%rdi)
000000000001e23a	popq	%rbp
000000000001e23b	retq
000000000001e23c	nop
000000000001e23d	nop
000000000001e23e	nop
000000000001e23f	nop
___cxx_global_var_init:
000000000001e240	pushq	%rbp
000000000001e241	movq	%rsp, %rbp
000000000001e244	subq	$0x10, %rsp
000000000001e248	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
000000000001e24f	callq	0x1f530 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
000000000001e254	movq	0x47dbd(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
000000000001e25b	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
000000000001e262	leaq	-0x1e269(%rip), %rdx
000000000001e269	callq	0x1f620 ## symbol stub for: ___cxa_atexit
000000000001e26e	movl	%eax, -0x4(%rbp)
000000000001e271	addq	$0x10, %rsp
000000000001e275	popq	%rbp
000000000001e276	retq
000000000001e277	nopw	(%rax,%rax)
___cxx_global_var_init.1:
000000000001e280	pushq	%rbp
000000000001e281	movq	%rsp, %rbp
000000000001e284	subq	$0x10, %rsp
000000000001e288	leaq	__ZN7cocos2dL11CCPointZeroE(%rip), %rdi ## cocos2d::CCPointZero
000000000001e28f	xorps	%xmm0, %xmm0
000000000001e292	movss	%xmm0, -0x4(%rbp)
000000000001e297	movss	-0x4(%rbp), %xmm1
000000000001e29c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e2a1	addq	$0x10, %rsp
000000000001e2a5	popq	%rbp
000000000001e2a6	retq
000000000001e2a7	nopw	(%rax,%rax)
___cxx_global_var_init.2:
000000000001e2b0	pushq	%rbp
000000000001e2b1	movq	%rsp, %rbp
000000000001e2b4	subq	$0x10, %rsp
000000000001e2b8	leaq	__ZN7cocos2dL10CCSizeZeroE(%rip), %rdi ## cocos2d::CCSizeZero
000000000001e2bf	xorps	%xmm0, %xmm0
000000000001e2c2	movss	%xmm0, -0x4(%rbp)
000000000001e2c7	movss	-0x4(%rbp), %xmm1
000000000001e2cc	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
000000000001e2d1	addq	$0x10, %rsp
000000000001e2d5	popq	%rbp
000000000001e2d6	retq
000000000001e2d7	nopw	(%rax,%rax)
___cxx_global_var_init.3:
000000000001e2e0	pushq	%rbp
000000000001e2e1	movq	%rsp, %rbp
000000000001e2e4	subq	$0x10, %rsp
000000000001e2e8	leaq	__ZN7cocos2dL10CCRectZeroE(%rip), %rdi ## cocos2d::CCRectZero
000000000001e2ef	xorps	%xmm0, %xmm0
000000000001e2f2	movss	%xmm0, -0x4(%rbp)
000000000001e2f7	movss	-0x4(%rbp), %xmm1
000000000001e2fc	movss	-0x4(%rbp), %xmm2
000000000001e301	movss	-0x4(%rbp), %xmm3
000000000001e306	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001e30b	addq	$0x10, %rsp
000000000001e30f	popq	%rbp
000000000001e310	retq
000000000001e311	nopw	%cs:(%rax,%rax)
000000000001e31b	nopl	(%rax,%rax)
___cxx_global_var_init.4:
000000000001e320	pushq	%rbp
000000000001e321	movq	%rsp, %rbp
000000000001e324	leaq	__ZN7cocos2d2uiL10MarginZeroE(%rip), %rdi ## cocos2d::ui::MarginZero
000000000001e32b	callq	__ZN7cocos2d2ui6MarginC1Ev ## cocos2d::ui::Margin::Margin()
000000000001e330	popq	%rbp
000000000001e331	retq
000000000001e332	nopw	%cs:(%rax,%rax)
000000000001e33c	nopl	(%rax)
__GLOBAL__sub_I_Cacao.cpp:
000000000001e340	pushq	%rbp
000000000001e341	movq	%rsp, %rbp
000000000001e344	callq	___cxx_global_var_init
000000000001e349	callq	___cxx_global_var_init.1
000000000001e34e	callq	___cxx_global_var_init.2
000000000001e353	callq	___cxx_global_var_init.3
000000000001e358	callq	___cxx_global_var_init.4
000000000001e35d	popq	%rbp
000000000001e35e	retq
000000000001e35f	nop
__Z14hCreateWithKeyi:
000000000001e360	pushq	%rbp
000000000001e361	movq	%rsp, %rbp
000000000001e364	subq	$0x40, %rsp
000000000001e368	movl	%edi, -0xc(%rbp)
000000000001e36b	cmpl	$0xc45, -0xc(%rbp)
000000000001e372	jne	0x1e3d6
000000000001e378	leaq	0x44a92(%rip), %rdi ## literal pool for: "edit_eCounterBtn_001.png"
000000000001e37f	callq	__ZN15LabelGameObject6createEPKc ## LabelGameObject::create(char const*)
000000000001e384	movq	%rax, -0x18(%rbp)
000000000001e388	movq	-0x18(%rbp), %rax
000000000001e38c	movq	%rax, %rdi
000000000001e38f	callq	0x1f266 ## symbol stub for: __ZN10GameObject3_idEv
000000000001e394	movq	%rax, -0x20(%rbp)
000000000001e398	leaq	-0x20(%rbp), %rdi
000000000001e39c	movl	$0xc45, %esi
000000000001e3a1	callq	0x1f29c ## symbol stub for: __ZN9CCPointerIiEaSEi
000000000001e3a6	movq	-0x18(%rbp), %rdi
000000000001e3aa	movq	%rax, -0x30(%rbp)
000000000001e3ae	callq	0x1f26c ## symbol stub for: __ZN10GameObject5_typeEv
000000000001e3b3	movq	%rax, -0x28(%rbp)
000000000001e3b7	leaq	-0x28(%rbp), %rdi
000000000001e3bb	movl	$0x14, %esi
000000000001e3c0	callq	0x1f29c ## symbol stub for: __ZN9CCPointerIiEaSEi
000000000001e3c5	movq	-0x18(%rbp), %rdi
000000000001e3c9	movq	%rdi, -0x8(%rbp)
000000000001e3cd	movq	%rax, -0x38(%rbp)
000000000001e3d1	jmp	0x1e401
000000000001e3d6	movq	_m(%rip), %rdi
000000000001e3dd	movq	%rdi, -0x40(%rbp)
000000000001e3e1	callq	__Z7getBasev ## getBase()
000000000001e3e6	addq	$0x2f4ce0, %rax
000000000001e3ec	movq	-0x40(%rbp), %rdi
000000000001e3f0	movq	%rax, %rsi
000000000001e3f3	callq	__ZN12ModContainer11getOriginalEl ## ModContainer::getOriginal(long)
000000000001e3f8	movl	-0xc(%rbp), %edi
000000000001e3fb	callq	*%rax
000000000001e3fd	movq	%rax, -0x8(%rbp)
000000000001e401	movq	-0x8(%rbp), %rax
000000000001e405	addq	$0x40, %rsp
000000000001e409	popq	%rbp
000000000001e40a	retq
000000000001e40b	nopl	(%rax,%rax)
__ZN10GameObject3_idEv:
000000000001e410	pushq	%rbp
000000000001e411	movq	%rsp, %rbp
000000000001e414	subq	$0x20, %rsp
000000000001e418	movq	%rdi, -0x10(%rbp)
000000000001e41c	movq	-0x10(%rbp), %rdi
000000000001e420	cmpq	$0x0, %rdi
000000000001e424	movq	%rdi, -0x18(%rbp)
000000000001e428	je	0x1e449
000000000001e42e	movq	-0x18(%rbp), %rax
000000000001e432	addq	$0x3c4, %rax
000000000001e438	leaq	-0x8(%rbp), %rdi
000000000001e43c	movq	%rax, %rsi
000000000001e43f	callq	__ZN9CCPointerIiEC1El ## CCPointer<int>::CCPointer(long)
000000000001e444	jmp	0x1e456
000000000001e449	xorl	%eax, %eax
000000000001e44b	movl	%eax, %esi
000000000001e44d	leaq	-0x8(%rbp), %rdi
000000000001e451	callq	__ZN9CCPointerIiEC1El ## CCPointer<int>::CCPointer(long)
000000000001e456	movq	-0x8(%rbp), %rax
000000000001e45a	addq	$0x20, %rsp
000000000001e45e	popq	%rbp
000000000001e45f	retq
__ZN9CCPointerIiEaSEi:
000000000001e460	pushq	%rbp
000000000001e461	movq	%rsp, %rbp
000000000001e464	movq	%rdi, -0x8(%rbp)
000000000001e468	movl	%esi, -0xc(%rbp)
000000000001e46b	movq	-0x8(%rbp), %rdi
000000000001e46f	movl	-0xc(%rbp), %esi
000000000001e472	movq	(%rdi), %rax
000000000001e475	movl	%esi, (%rax)
000000000001e477	movq	%rdi, %rax
000000000001e47a	popq	%rbp
000000000001e47b	retq
000000000001e47c	nopl	(%rax)
__ZN10GameObject5_typeEv:
000000000001e480	pushq	%rbp
000000000001e481	movq	%rsp, %rbp
000000000001e484	subq	$0x20, %rsp
000000000001e488	movq	%rdi, -0x10(%rbp)
000000000001e48c	movq	-0x10(%rbp), %rdi
000000000001e490	cmpq	$0x0, %rdi
000000000001e494	movq	%rdi, -0x18(%rbp)
000000000001e498	je	0x1e4b9
000000000001e49e	movq	-0x18(%rbp), %rax
000000000001e4a2	addq	$0x370, %rax
000000000001e4a8	leaq	-0x8(%rbp), %rdi
000000000001e4ac	movq	%rax, %rsi
000000000001e4af	callq	__ZN9CCPointerIiEC1El ## CCPointer<int>::CCPointer(long)
000000000001e4b4	jmp	0x1e4c6
000000000001e4b9	xorl	%eax, %eax
000000000001e4bb	movl	%eax, %esi
000000000001e4bd	leaq	-0x8(%rbp), %rdi
000000000001e4c1	callq	__ZN9CCPointerIiEC1El ## CCPointer<int>::CCPointer(long)
000000000001e4c6	movq	-0x8(%rbp), %rax
000000000001e4ca	addq	$0x20, %rsp
000000000001e4ce	popq	%rbp
000000000001e4cf	retq
__Z6injectv:
000000000001e4d0	pushq	%rbp
000000000001e4d1	movq	%rsp, %rbp
000000000001e4d4	subq	$0x30, %rsp
000000000001e4d8	movl	$0x20, %edi
000000000001e4dd	callq	0x1f608 ## symbol stub for: __Znwm
000000000001e4e2	movq	%rax, %rdi
000000000001e4e5	movq	%rax, %rcx
000000000001e4e8	leaq	0x4493b(%rip), %rsi ## literal pool for: "Template code"
000000000001e4ef	movq	%rdi, -0x18(%rbp)
000000000001e4f3	movq	%rax, %rdi
000000000001e4f6	movq	%rcx, -0x20(%rbp)
000000000001e4fa	callq	__ZN12ModContainerC1EPKc ## ModContainer::ModContainer(char const*)
000000000001e4ff	jmp	0x1e504
000000000001e504	movq	-0x20(%rbp), %rax
000000000001e508	movq	%rax, _m(%rip)
000000000001e50f	movq	_m(%rip), %rdi
000000000001e516	movq	%rdi, -0x28(%rbp)
000000000001e51a	callq	__Z7getBasev ## getBase()
000000000001e51f	addq	$0x2f4ce0, %rax
000000000001e525	movq	-0x28(%rbp), %rdi
000000000001e529	movq	%rax, %rsi
000000000001e52c	leaq	__Z14hCreateWithKeyi(%rip), %rdx ## hCreateWithKey(int)
000000000001e533	callq	0x1f278 ## symbol stub for: __ZN12ModContainer12registerHookIPFP10GameObjectiEEET_lS5_
000000000001e538	movq	%rax, -0x30(%rbp)
000000000001e53c	addq	$0x30, %rsp
000000000001e540	popq	%rbp
000000000001e541	retq
000000000001e542	movl	%edx, %ecx
000000000001e544	movq	%rax, -0x8(%rbp)
000000000001e548	movl	%ecx, -0xc(%rbp)
000000000001e54b	movq	-0x18(%rbp), %rdi
000000000001e54f	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001e554	movq	-0x8(%rbp), %rdi
000000000001e558	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001e55d	ud2
000000000001e55f	nop
__ZN12ModContainer12registerHookIPFP10GameObjectiEEET_lS5_:
000000000001e560	pushq	%rbp
000000000001e561	movq	%rsp, %rbp
000000000001e564	subq	$0x60, %rsp
000000000001e568	movq	%rdi, -0x8(%rbp)
000000000001e56c	movq	%rsi, -0x10(%rbp)
000000000001e570	movq	%rdx, -0x18(%rbp)
000000000001e574	movq	-0x8(%rbp), %rdi
000000000001e578	movl	$0x30, %edx
000000000001e57d	movq	%rdi, -0x40(%rbp)
000000000001e581	movq	%rdx, %rdi
000000000001e584	callq	0x1f608 ## symbol stub for: __Znwm
000000000001e589	movq	%rax, %rdx
000000000001e58c	movq	%rax, %rsi
000000000001e58f	movq	-0x10(%rbp), %rdi
000000000001e593	movq	-0x18(%rbp), %rcx
000000000001e597	movq	%rdi, -0x48(%rbp)
000000000001e59b	movq	%rax, %rdi
000000000001e59e	movq	-0x48(%rbp), %rax
000000000001e5a2	movq	%rsi, -0x50(%rbp)
000000000001e5a6	movq	%rax, %rsi
000000000001e5a9	movq	%rdx, -0x58(%rbp)
000000000001e5ad	movq	%rcx, %rdx
000000000001e5b0	callq	__ZN13HookContainerC1ElPFvvE ## HookContainer::HookContainer(long, void (*)())
000000000001e5b5	jmp	0x1e5ba
000000000001e5ba	movq	-0x50(%rbp), %rax
000000000001e5be	movq	%rax, -0x20(%rbp)
000000000001e5c2	movq	-0x20(%rbp), %rcx
000000000001e5c6	movq	%rcx, -0x38(%rbp)
000000000001e5ca	movq	-0x40(%rbp), %rdi
000000000001e5ce	leaq	-0x38(%rbp), %rsi
000000000001e5d2	callq	0x1f512 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
000000000001e5d7	movq	-0x20(%rbp), %rdi
000000000001e5db	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
000000000001e5e0	addq	$0x60, %rsp
000000000001e5e4	popq	%rbp
000000000001e5e5	retq
000000000001e5e6	movl	%edx, %ecx
000000000001e5e8	movq	%rax, -0x28(%rbp)
000000000001e5ec	movl	%ecx, -0x2c(%rbp)
000000000001e5ef	movq	-0x58(%rbp), %rdi
000000000001e5f3	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001e5f8	movq	-0x28(%rbp), %rdi
000000000001e5fc	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001e601	ud2
000000000001e603	nopw	%cs:(%rax,%rax)
000000000001e60d	nopl	(%rax)
__ZN9CCPointerIiEC1El:
000000000001e610	pushq	%rbp
000000000001e611	movq	%rsp, %rbp
000000000001e614	subq	$0x10, %rsp
000000000001e618	movq	%rdi, -0x8(%rbp)
000000000001e61c	movq	%rsi, -0x10(%rbp)
000000000001e620	movq	-0x8(%rbp), %rdi
000000000001e624	movq	-0x10(%rbp), %rsi
000000000001e628	callq	__ZN9CCPointerIiEC2El ## CCPointer<int>::CCPointer(long)
000000000001e62d	addq	$0x10, %rsp
000000000001e631	popq	%rbp
000000000001e632	retq
000000000001e633	nopw	%cs:(%rax,%rax)
000000000001e63d	nopl	(%rax)
__ZN9CCPointerIiEC2El:
000000000001e640	pushq	%rbp
000000000001e641	movq	%rsp, %rbp
000000000001e644	movq	%rdi, -0x8(%rbp)
000000000001e648	movq	%rsi, -0x10(%rbp)
000000000001e64c	movq	-0x8(%rbp), %rsi
000000000001e650	movq	-0x10(%rbp), %rdi
000000000001e654	movq	%rdi, (%rsi)
000000000001e657	popq	%rbp
000000000001e658	retq
000000000001e659	nopl	(%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_:
000000000001e660	pushq	%rbp
000000000001e661	movq	%rsp, %rbp
000000000001e664	subq	$0x20, %rsp
000000000001e668	movq	%rdi, -0x8(%rbp)
000000000001e66c	movq	%rsi, -0x10(%rbp)
000000000001e670	movq	-0x8(%rbp), %rsi
000000000001e674	movq	0x8(%rsi), %rdi
000000000001e678	cmpq	0x10(%rsi), %rdi
000000000001e67c	movq	%rsi, -0x20(%rbp)
000000000001e680	je	0x1e6b3
000000000001e686	movq	-0x20(%rbp), %rax
000000000001e68a	movq	-0x20(%rbp), %rcx
000000000001e68e	movq	0x8(%rcx), %rsi
000000000001e692	movq	-0x10(%rbp), %rdx
000000000001e696	movq	%rax, %rdi
000000000001e699	callq	0x1f2de ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
000000000001e69e	movq	-0x20(%rbp), %rax
000000000001e6a2	movq	0x8(%rax), %rcx
000000000001e6a6	addq	$0x8, %rcx
000000000001e6aa	movq	%rcx, 0x8(%rax)
000000000001e6ae	jmp	0x1e6d1
000000000001e6b3	movq	-0x20(%rbp), %rdi
000000000001e6b7	callq	0x1f506 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
000000000001e6bc	movq	%rax, -0x18(%rbp)
000000000001e6c0	movq	-0x10(%rbp), %rdx
000000000001e6c4	movq	-0x18(%rbp), %rsi
000000000001e6c8	movq	-0x20(%rbp), %rdi
000000000001e6cc	callq	0x1f500 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
000000000001e6d1	addq	$0x20, %rsp
000000000001e6d5	popq	%rbp
000000000001e6d6	retq
000000000001e6d7	nopw	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_:
000000000001e6e0	pushq	%rbp
000000000001e6e1	movq	%rsp, %rbp
000000000001e6e4	movq	%rdi, -0x8(%rbp)
000000000001e6e8	movq	%rsi, -0x10(%rbp)
000000000001e6ec	movq	%rdx, -0x18(%rbp)
000000000001e6f0	movq	-0x10(%rbp), %rdx
000000000001e6f4	movq	-0x18(%rbp), %rsi
000000000001e6f8	movq	(%rsi), %rsi
000000000001e6fb	movq	%rsi, (%rdx)
000000000001e6fe	popq	%rbp
000000000001e6ff	retq
__ZNSt6vectorIP13BaseContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
000000000001e700	pushq	%rbp
000000000001e701	movq	%rsp, %rbp
000000000001e704	subq	$0x150, %rsp
000000000001e70b	movq	%rsi, -0x8(%rbp)
000000000001e70f	movq	%rdi, -0x10(%rbp)
000000000001e713	movq	%rdx, -0x18(%rbp)
000000000001e717	movq	-0x10(%rbp), %rdx
000000000001e71b	movq	0x8(%rdx), %rsi
000000000001e71f	cmpq	0x10(%rdx), %rsi
000000000001e723	movq	%rdx, -0x70(%rbp)
000000000001e727	je	0x1e7ad
000000000001e72d	movq	-0x70(%rbp), %rax
000000000001e731	movq	-0x70(%rbp), %rcx
000000000001e735	movq	0x8(%rcx), %rsi
000000000001e739	movq	0x8(%rcx), %rdx
000000000001e73d	addq	$-0x8, %rdx
000000000001e741	movq	%rax, %rdi
000000000001e744	callq	0x1f2de ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
000000000001e749	movq	-0x70(%rbp), %rax
000000000001e74d	movq	0x8(%rax), %rcx
000000000001e751	addq	$0x8, %rcx
000000000001e755	movq	%rcx, 0x8(%rax)
000000000001e759	movq	-0x18(%rbp), %rcx
000000000001e75d	movq	(%rcx), %rcx
000000000001e760	movq	%rcx, -0x20(%rbp)
000000000001e764	leaq	-0x8(%rbp), %rdi
000000000001e768	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000001e76d	movq	(%rax), %rdi
000000000001e770	movq	-0x70(%rbp), %rax
000000000001e774	movq	0x8(%rax), %rcx
000000000001e778	addq	$-0x10, %rcx
000000000001e77c	movq	0x8(%rax), %rdx
000000000001e780	addq	$-0x8, %rdx
000000000001e784	movq	%rcx, %rsi
000000000001e787	callq	0x1f560 ## symbol stub for: __ZSt13copy_backwardIPP13BaseContainerS2_ET0_T_S4_S3_
000000000001e78c	movq	-0x20(%rbp), %rcx
000000000001e790	leaq	-0x8(%rbp), %rdi
000000000001e794	movq	%rax, -0x78(%rbp)
000000000001e798	movq	%rcx, -0x80(%rbp)
000000000001e79c	callq	0x1f386 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
000000000001e7a1	movq	-0x80(%rbp), %rcx
000000000001e7a5	movq	%rcx, (%rax)
000000000001e7a8	jmp	0x1eba9
000000000001e7ad	movq	-0x70(%rbp), %rdi
000000000001e7b1	callq	0x1f3b6 ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE4sizeEv
000000000001e7b6	movq	%rax, -0x28(%rbp)
000000000001e7ba	movq	-0x28(%rbp), %rax
000000000001e7be	movq	-0x70(%rbp), %rdi
000000000001e7c2	movq	%rax, -0x88(%rbp)
000000000001e7c9	callq	0x1f3bc ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv
000000000001e7ce	movq	-0x88(%rbp), %rdi
000000000001e7d5	cmpq	%rax, %rdi
000000000001e7d8	jne	0x1e7ea
000000000001e7de	leaq	0x44653(%rip), %rdi ## literal pool for: "vector::_M_insert_aux"
000000000001e7e5	callq	0x1f590 ## symbol stub for: __ZSt20__throw_length_errorPKc
000000000001e7ea	cmpq	$0x0, -0x28(%rbp)
000000000001e7ef	je	0x1e809
000000000001e7f5	movq	-0x28(%rbp), %rax
000000000001e7f9	shlq	$0x1, %rax
000000000001e7fd	movq	%rax, -0x90(%rbp)
000000000001e804	jmp	0x1e81a
000000000001e809	movl	$0x1, %eax
000000000001e80e	movq	%rax, -0x90(%rbp)
000000000001e815	jmp	0x1e81a
000000000001e81a	movq	-0x90(%rbp), %rax
000000000001e821	movq	%rax, -0x30(%rbp)
000000000001e825	movq	-0x30(%rbp), %rax
000000000001e829	cmpq	-0x28(%rbp), %rax
000000000001e82d	jae	0x1e840
000000000001e833	movq	-0x70(%rbp), %rdi
000000000001e837	callq	0x1f3bc ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv
000000000001e83c	movq	%rax, -0x30(%rbp)
000000000001e840	movq	-0x30(%rbp), %rsi
000000000001e844	movq	-0x70(%rbp), %rdi
000000000001e848	callq	0x1f45e ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE11_M_allocateEm
000000000001e84d	movq	%rax, -0x38(%rbp)
000000000001e851	movq	-0x38(%rbp), %rax
000000000001e855	movq	%rax, -0x40(%rbp)
000000000001e859	movq	-0x70(%rbp), %rax
000000000001e85d	movq	(%rax), %rdi
000000000001e860	leaq	-0x8(%rbp), %rsi
000000000001e864	movq	%rdi, -0x98(%rbp)
000000000001e86b	movq	%rsi, %rdi
000000000001e86e	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000001e873	movq	%rax, -0xa0(%rbp)
000000000001e87a	jmp	0x1e87f
000000000001e87f	movq	-0xa0(%rbp), %rax
000000000001e886	movq	(%rax), %rsi
000000000001e889	movq	-0x38(%rbp), %rdx
000000000001e88d	movq	-0x70(%rbp), %rdi
000000000001e891	movq	%rsi, -0xa8(%rbp)
000000000001e898	movq	%rdx, -0xb0(%rbp)
000000000001e89f	callq	0x1f482 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000001e8a4	movq	%rax, -0xb8(%rbp)
000000000001e8ab	jmp	0x1e8b0
000000000001e8b0	leaq	-0x50(%rbp), %rax
000000000001e8b4	movq	%rax, %rdi
000000000001e8b7	movq	-0xb8(%rbp), %rsi
000000000001e8be	movq	%rax, -0xc0(%rbp)
000000000001e8c5	callq	0x1f3e6 ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000001e8ca	movq	-0x98(%rbp), %rdi
000000000001e8d1	movq	-0xa8(%rbp), %rsi
000000000001e8d8	movq	-0xb0(%rbp), %rdx
000000000001e8df	movq	-0xc0(%rbp), %rcx
000000000001e8e6	callq	0x1f59c ## symbol stub for: __ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E
000000000001e8eb	movq	%rax, -0xc8(%rbp)
000000000001e8f2	jmp	0x1e8f7
000000000001e8f7	movq	-0xc8(%rbp), %rax
000000000001e8fe	movq	%rax, -0x40(%rbp)
000000000001e902	leaq	-0x50(%rbp), %rdi
000000000001e906	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001e90b	movq	-0x40(%rbp), %rsi
000000000001e90f	movq	-0x18(%rbp), %rdx
000000000001e913	movq	-0x70(%rbp), %rdi
000000000001e917	callq	0x1f2de ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
000000000001e91c	jmp	0x1e921
000000000001e921	movq	-0x40(%rbp), %rax
000000000001e925	addq	$0x8, %rax
000000000001e929	movq	%rax, -0x40(%rbp)
000000000001e92d	leaq	-0x8(%rbp), %rdi
000000000001e931	callq	0x1f380 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000001e936	movq	%rax, -0xd0(%rbp)
000000000001e93d	jmp	0x1e942
000000000001e942	movq	-0xd0(%rbp), %rax
000000000001e949	movq	(%rax), %rdi
000000000001e94c	movq	-0x70(%rbp), %rcx
000000000001e950	movq	0x8(%rcx), %rsi
000000000001e954	movq	-0x40(%rbp), %rdx
000000000001e958	movq	%rdi, -0xd8(%rbp)
000000000001e95f	movq	%rcx, %rdi
000000000001e962	movq	%rsi, -0xe0(%rbp)
000000000001e969	movq	%rdx, -0xe8(%rbp)
000000000001e970	callq	0x1f482 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000001e975	movq	%rax, -0xf0(%rbp)
000000000001e97c	jmp	0x1e981
000000000001e981	leaq	-0x58(%rbp), %rax
000000000001e985	movq	%rax, %rdi
000000000001e988	movq	-0xf0(%rbp), %rsi
000000000001e98f	movq	%rax, -0xf8(%rbp)
000000000001e996	callq	0x1f3e6 ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000001e99b	movq	-0xd8(%rbp), %rdi
000000000001e9a2	movq	-0xe0(%rbp), %rsi
000000000001e9a9	movq	-0xe8(%rbp), %rdx
000000000001e9b0	movq	-0xf8(%rbp), %rcx
000000000001e9b7	callq	0x1f59c ## symbol stub for: __ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E
000000000001e9bc	movq	%rax, -0x100(%rbp)
000000000001e9c3	jmp	0x1e9c8
000000000001e9c8	movq	-0x100(%rbp), %rax
000000000001e9cf	movq	%rax, -0x40(%rbp)
000000000001e9d3	leaq	-0x58(%rbp), %rdi
000000000001e9d7	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001e9dc	jmp	0x1eae7
000000000001e9e1	movl	%edx, %ecx
000000000001e9e3	movq	%rax, -0x48(%rbp)
000000000001e9e7	movl	%ecx, -0x4c(%rbp)
000000000001e9ea	jmp	0x1ea18
000000000001e9ef	movl	%edx, %ecx
000000000001e9f1	movq	%rax, -0x48(%rbp)
000000000001e9f5	movl	%ecx, -0x4c(%rbp)
000000000001e9f8	leaq	-0x50(%rbp), %rdi
000000000001e9fc	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001ea01	jmp	0x1ea18
000000000001ea06	movl	%edx, %ecx
000000000001ea08	movq	%rax, -0x48(%rbp)
000000000001ea0c	movl	%ecx, -0x4c(%rbp)
000000000001ea0f	leaq	-0x58(%rbp), %rdi
000000000001ea13	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001ea18	movq	-0x48(%rbp), %rdi
000000000001ea1c	callq	0x1f626 ## symbol stub for: ___cxa_begin_catch
000000000001ea21	movq	-0x38(%rbp), %rdi
000000000001ea25	movq	-0x40(%rbp), %rsi
000000000001ea29	movq	-0x70(%rbp), %rcx
000000000001ea2d	movq	%rdi, -0x108(%rbp)
000000000001ea34	movq	%rcx, %rdi
000000000001ea37	movq	%rax, -0x110(%rbp)
000000000001ea3e	movq	%rsi, -0x118(%rbp)
000000000001ea45	callq	0x1f482 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000001ea4a	movq	%rax, -0x120(%rbp)
000000000001ea51	jmp	0x1ea56
000000000001ea56	leaq	-0x60(%rbp), %rax
000000000001ea5a	movq	%rax, %rdi
000000000001ea5d	movq	-0x120(%rbp), %rsi
000000000001ea64	movq	%rax, -0x128(%rbp)
000000000001ea6b	callq	0x1f3e6 ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000001ea70	movq	-0x108(%rbp), %rdi
000000000001ea77	movq	-0x118(%rbp), %rsi
000000000001ea7e	movq	-0x128(%rbp), %rdx
000000000001ea85	callq	0x1f5ea ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E
000000000001ea8a	jmp	0x1ea8f
000000000001ea8f	leaq	-0x60(%rbp), %rdi
000000000001ea93	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001ea98	movq	-0x38(%rbp), %rsi
000000000001ea9c	movq	-0x30(%rbp), %rdx
000000000001eaa0	movq	-0x70(%rbp), %rdi
000000000001eaa4	callq	0x1f47c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
000000000001eaa9	jmp	0x1eaae
000000000001eaae	callq	0x1f638 ## symbol stub for: ___cxa_rethrow
000000000001eab3	jmp	0x1ebcc
000000000001eab8	movl	%edx, %ecx
000000000001eaba	movq	%rax, -0x48(%rbp)
000000000001eabe	movl	%ecx, -0x4c(%rbp)
000000000001eac1	jmp	0x1ead8
000000000001eac6	movl	%edx, %ecx
000000000001eac8	movq	%rax, -0x48(%rbp)
000000000001eacc	movl	%ecx, -0x4c(%rbp)
000000000001eacf	leaq	-0x60(%rbp), %rdi
000000000001ead3	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001ead8	callq	0x1f632 ## symbol stub for: ___cxa_end_catch
000000000001eadd	jmp	0x1eae2
000000000001eae2	jmp	0x1ebb2
000000000001eae7	movq	-0x70(%rbp), %rax
000000000001eaeb	movq	(%rax), %rdi
000000000001eaee	movq	0x8(%rax), %rsi
000000000001eaf2	movq	%rdi, -0x130(%rbp)
000000000001eaf9	movq	%rax, %rdi
000000000001eafc	movq	%rsi, -0x138(%rbp)
000000000001eb03	callq	0x1f482 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000001eb08	leaq	-0x68(%rbp), %rsi
000000000001eb0c	movq	%rsi, %rdi
000000000001eb0f	movq	%rsi, -0x140(%rbp)
000000000001eb16	movq	%rax, %rsi
000000000001eb19	callq	0x1f3e6 ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000001eb1e	movq	-0x130(%rbp), %rdi
000000000001eb25	movq	-0x138(%rbp), %rsi
000000000001eb2c	movq	-0x140(%rbp), %rdx
000000000001eb33	callq	0x1f5ea ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E
000000000001eb38	jmp	0x1eb3d
000000000001eb3d	leaq	-0x68(%rbp), %rdi
000000000001eb41	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001eb46	movq	-0x70(%rbp), %rdi
000000000001eb4a	movq	-0x70(%rbp), %rax
000000000001eb4e	movq	(%rax), %rsi
000000000001eb51	movq	0x10(%rax), %rcx
000000000001eb55	movq	(%rax), %rdx
000000000001eb58	subq	%rdx, %rcx
000000000001eb5b	sarq	$0x3, %rcx
000000000001eb5f	movq	%rcx, %rdx
000000000001eb62	callq	0x1f47c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
000000000001eb67	movq	-0x38(%rbp), %rax
000000000001eb6b	movq	-0x70(%rbp), %rcx
000000000001eb6f	movq	%rax, (%rcx)
000000000001eb72	movq	-0x40(%rbp), %rax
000000000001eb76	movq	%rax, 0x8(%rcx)
000000000001eb7a	movq	-0x38(%rbp), %rax
000000000001eb7e	movq	-0x30(%rbp), %rdx
000000000001eb82	shlq	$0x3, %rdx
000000000001eb86	addq	%rdx, %rax
000000000001eb89	movq	%rax, 0x10(%rcx)
000000000001eb8d	jmp	0x1eba9
000000000001eb92	movl	%edx, %ecx
000000000001eb94	movq	%rax, -0x48(%rbp)
000000000001eb98	movl	%ecx, -0x4c(%rbp)
000000000001eb9b	leaq	-0x68(%rbp), %rdi
000000000001eb9f	callq	0x1f3fe ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
000000000001eba4	jmp	0x1ebb2
000000000001eba9	addq	$0x150, %rsp
000000000001ebb0	popq	%rbp
000000000001ebb1	retq
000000000001ebb2	movq	-0x48(%rbp), %rdi
000000000001ebb6	callq	0x1f260 ## symbol stub for: __Unwind_Resume
000000000001ebbb	ud2
000000000001ebbd	movq	%rax, %rdi
000000000001ebc0	movq	%rdx, -0x148(%rbp)
000000000001ebc7	callq	___clang_call_terminate
000000000001ebcc	ud2
000000000001ebce	nop
__ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv:
000000000001ebd0	pushq	%rbp
000000000001ebd1	movq	%rsp, %rbp
000000000001ebd4	subq	$0x20, %rsp
000000000001ebd8	movq	%rdi, -0x10(%rbp)
000000000001ebdc	movq	-0x10(%rbp), %rdi
000000000001ebe0	addq	$0x8, %rdi
000000000001ebe4	leaq	-0x8(%rbp), %rax
000000000001ebe8	movq	%rdi, -0x18(%rbp)
000000000001ebec	movq	%rax, %rdi
000000000001ebef	movq	-0x18(%rbp), %rsi
000000000001ebf3	callq	0x1f320 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
000000000001ebf8	movq	-0x8(%rbp), %rax
000000000001ebfc	addq	$0x20, %rsp
000000000001ec00	popq	%rbp
000000000001ec01	retq
000000000001ec02	nopw	%cs:(%rax,%rax)
000000000001ec0c	nopl	(%rax)
__ZSt13copy_backwardIPP13BaseContainerS2_ET0_T_S4_S3_:
000000000001ec10	pushq	%rbp
000000000001ec11	movq	%rsp, %rbp
000000000001ec14	subq	$0x20, %rsp
000000000001ec18	movq	%rdi, -0x8(%rbp)
000000000001ec1c	movq	%rsi, -0x10(%rbp)
000000000001ec20	movq	%rdx, -0x18(%rbp)
000000000001ec24	movb	$0x0, -0x19(%rbp)
000000000001ec28	movb	$0x0, -0x1a(%rbp)
000000000001ec2c	movq	-0x8(%rbp), %rdi
000000000001ec30	movq	-0x10(%rbp), %rsi
000000000001ec34	movq	-0x18(%rbp), %rdx
000000000001ec38	callq	0x1f4b2 ## symbol stub for: __ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPP13BaseContainerS4_EET0_T_S6_S5_
000000000001ec3d	addq	$0x20, %rsp
000000000001ec41	popq	%rbp
000000000001ec42	retq
000000000001ec43	nopw	%cs:(%rax,%rax)
000000000001ec4d	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv:
000000000001ec50	pushq	%rbp
000000000001ec51	movq	%rsp, %rbp
000000000001ec54	movq	%rdi, -0x8(%rbp)
000000000001ec58	movq	-0x8(%rbp), %rax
000000000001ec5c	popq	%rbp
000000000001ec5d	retq
000000000001ec5e	nop
__ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv:
000000000001ec60	pushq	%rbp
000000000001ec61	movq	%rsp, %rbp
000000000001ec64	movq	%rdi, -0x8(%rbp)
000000000001ec68	movq	-0x8(%rbp), %rdi
000000000001ec6c	movq	(%rdi), %rax
000000000001ec6f	popq	%rbp
000000000001ec70	retq
000000000001ec71	nopw	%cs:(%rax,%rax)
000000000001ec7b	nopl	(%rax,%rax)
__ZNKSt6vectorIP13BaseContainerSaIS1_EE4sizeEv:
000000000001ec80	pushq	%rbp
000000000001ec81	movq	%rsp, %rbp
000000000001ec84	movq	%rdi, -0x8(%rbp)
000000000001ec88	movq	-0x8(%rbp), %rdi
000000000001ec8c	movq	0x8(%rdi), %rax
000000000001ec90	movq	(%rdi), %rdi
000000000001ec93	subq	%rdi, %rax
000000000001ec96	sarq	$0x3, %rax
000000000001ec9a	popq	%rbp
000000000001ec9b	retq
000000000001ec9c	nopl	(%rax)
__ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv:
000000000001eca0	pushq	%rbp
000000000001eca1	movq	%rsp, %rbp
000000000001eca4	subq	$0x10, %rsp
000000000001eca8	movq	%rdi, -0x8(%rbp)
000000000001ecac	movq	-0x8(%rbp), %rdi
000000000001ecb0	callq	0x1f398 ## symbol stub for: __ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000001ecb5	movq	%rax, %rdi
000000000001ecb8	callq	0x1f362 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv
000000000001ecbd	addq	$0x10, %rsp
000000000001ecc1	popq	%rbp
000000000001ecc2	retq
000000000001ecc3	nopw	%cs:(%rax,%rax)
000000000001eccd	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE11_M_allocateEm:
000000000001ecd0	pushq	%rbp
000000000001ecd1	movq	%rsp, %rbp
000000000001ecd4	subq	$0x20, %rsp
000000000001ecd8	xorl	%eax, %eax
000000000001ecda	movl	%eax, %edx
000000000001ecdc	movq	%rdi, -0x8(%rbp)
000000000001ece0	movq	%rsi, -0x10(%rbp)
000000000001ece4	movq	-0x8(%rbp), %rsi
000000000001ece8	movq	-0x10(%rbp), %rdi
000000000001ecec	movq	%rdi, -0x18(%rbp)
000000000001ecf0	movq	%rsi, %rdi
000000000001ecf3	movq	-0x18(%rbp), %rsi
000000000001ecf7	callq	0x1f2d8 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE8allocateEmPKv
000000000001ecfc	addq	$0x20, %rsp
000000000001ed00	popq	%rbp
000000000001ed01	retq
000000000001ed02	nopw	%cs:(%rax,%rax)
000000000001ed0c	nopl	(%rax)
__ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E:
000000000001ed10	pushq	%rbp
000000000001ed11	movq	%rsp, %rbp
000000000001ed14	subq	$0x20, %rsp
000000000001ed18	movq	%rdi, -0x8(%rbp)
000000000001ed1c	movq	%rsi, -0x10(%rbp)
000000000001ed20	movq	%rdx, -0x18(%rbp)
000000000001ed24	movq	-0x8(%rbp), %rdi
000000000001ed28	movq	-0x10(%rbp), %rsi
000000000001ed2c	movq	-0x18(%rbp), %rdx
000000000001ed30	movq	%rcx, -0x20(%rbp)
000000000001ed34	callq	0x1f578 ## symbol stub for: __ZSt18uninitialized_copyIPP13BaseContainerS2_ET0_T_S4_S3_
000000000001ed39	addq	$0x20, %rsp
000000000001ed3d	popq	%rbp
000000000001ed3e	retq
000000000001ed3f	nop
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv:
000000000001ed40	pushq	%rbp
000000000001ed41	movq	%rsp, %rbp
000000000001ed44	movq	%rdi, -0x8(%rbp)
000000000001ed48	movq	-0x8(%rbp), %rdi
000000000001ed4c	movq	%rdi, %rax
000000000001ed4f	popq	%rbp
000000000001ed50	retq
000000000001ed51	nopw	%cs:(%rax,%rax)
000000000001ed5b	nopl	(%rax,%rax)
__ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E:
000000000001ed60	pushq	%rbp
000000000001ed61	movq	%rsp, %rbp
000000000001ed64	subq	$0x20, %rsp
000000000001ed68	movq	%rdi, -0x8(%rbp)
000000000001ed6c	movq	%rsi, -0x10(%rbp)
000000000001ed70	movq	-0x8(%rbp), %rdi
000000000001ed74	movq	-0x10(%rbp), %rsi
000000000001ed78	movq	%rdx, -0x18(%rbp)
000000000001ed7c	callq	0x1f5e4 ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerEvT_S3_
000000000001ed81	addq	$0x20, %rsp
000000000001ed85	popq	%rbp
000000000001ed86	retq
000000000001ed87	nopw	(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m:
000000000001ed90	pushq	%rbp
000000000001ed91	movq	%rsp, %rbp
000000000001ed94	subq	$0x20, %rsp
000000000001ed98	movq	%rdi, -0x8(%rbp)
000000000001ed9c	movq	%rsi, -0x10(%rbp)
000000000001eda0	movq	%rdx, -0x18(%rbp)
000000000001eda4	movq	-0x8(%rbp), %rdx
000000000001eda8	cmpq	$0x0, -0x10(%rbp)
000000000001edad	movq	%rdx, -0x20(%rbp)
000000000001edb1	je	0x1edcb
000000000001edb7	movq	-0x20(%rbp), %rax
000000000001edbb	movq	-0x10(%rbp), %rsi
000000000001edbf	movq	-0x18(%rbp), %rdx
000000000001edc3	movq	%rax, %rdi
000000000001edc6	callq	0x1f2cc ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE10deallocateEPS2_m
000000000001edcb	addq	$0x20, %rsp
000000000001edcf	popq	%rbp
000000000001edd0	retq
000000000001edd1	nopw	%cs:(%rax,%rax)
000000000001eddb	nopl	(%rax,%rax)
___clang_call_terminate:
000000000001ede0	pushq	%rax
000000000001ede1	callq	0x1f626 ## symbol stub for: ___cxa_begin_catch
000000000001ede6	movq	%rax, (%rsp)
000000000001edea	callq	0x1f5f6 ## symbol stub for: __ZSt9terminatev
000000000001edef	nop
__ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPP13BaseContainerS4_EET0_T_S6_S5_:
000000000001edf0	pushq	%rbp
000000000001edf1	movq	%rsp, %rbp
000000000001edf4	subq	$0x20, %rsp
000000000001edf8	movq	%rdi, -0x8(%rbp)
000000000001edfc	movq	%rsi, -0x10(%rbp)
000000000001ee00	movq	%rdx, -0x18(%rbp)
000000000001ee04	movq	-0x8(%rbp), %rdi
000000000001ee08	movq	-0x10(%rbp), %rsi
000000000001ee0c	movq	-0x18(%rbp), %rdx
000000000001ee10	callq	0x1f584 ## symbol stub for: __ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_
000000000001ee15	addq	$0x20, %rsp
000000000001ee19	popq	%rbp
000000000001ee1a	retq
000000000001ee1b	nopl	(%rax,%rax)
__ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_:
000000000001ee20	pushq	%rbp
000000000001ee21	movq	%rsp, %rbp
000000000001ee24	subq	$0x20, %rsp
000000000001ee28	movq	%rdi, -0x8(%rbp)
000000000001ee2c	movq	%rsi, -0x10(%rbp)
000000000001ee30	movq	%rdx, -0x18(%rbp)
000000000001ee34	movb	$0x1, -0x19(%rbp)
000000000001ee38	movq	-0x8(%rbp), %rdi
000000000001ee3c	movq	-0x10(%rbp), %rsi
000000000001ee40	movq	-0x18(%rbp), %rdx
000000000001ee44	callq	0x1f4ac ## symbol stub for: __ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE8__copy_bIP13BaseContainerEEPT_PKS5_S8_S6_
000000000001ee49	addq	$0x20, %rsp
000000000001ee4d	popq	%rbp
000000000001ee4e	retq
000000000001ee4f	nop
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE8__copy_bIP13BaseContainerEEPT_PKS5_S8_S6_:
000000000001ee50	pushq	%rbp
000000000001ee51	movq	%rsp, %rbp
000000000001ee54	subq	$0x40, %rsp
000000000001ee58	xorl	%eax, %eax
000000000001ee5a	movl	%eax, %ecx
000000000001ee5c	movq	%rdi, -0x8(%rbp)
000000000001ee60	movq	%rsi, -0x10(%rbp)
000000000001ee64	movq	%rdx, -0x18(%rbp)
000000000001ee68	movq	-0x10(%rbp), %rdx
000000000001ee6c	movq	-0x8(%rbp), %rsi
000000000001ee70	subq	%rsi, %rdx
000000000001ee73	sarq	$0x3, %rdx
000000000001ee77	movq	%rdx, -0x20(%rbp)
000000000001ee7b	movq	-0x18(%rbp), %rdx
000000000001ee7f	movq	%rcx, %rsi
000000000001ee82	subq	-0x20(%rbp), %rsi
000000000001ee86	shlq	$0x3, %rsi
000000000001ee8a	addq	%rsi, %rdx
000000000001ee8d	movq	-0x8(%rbp), %rsi
000000000001ee91	movq	-0x20(%rbp), %rdi
000000000001ee95	shlq	$0x3, %rdi
000000000001ee99	movq	%rdi, -0x28(%rbp)
000000000001ee9d	movq	%rdx, %rdi
000000000001eea0	movq	-0x28(%rbp), %rdx
000000000001eea4	movq	%rcx, -0x30(%rbp)
000000000001eea8	callq	0x1f6a4 ## symbol stub for: _memmove
000000000001eead	movq	-0x18(%rbp), %rcx
000000000001eeb1	movq	-0x30(%rbp), %rdx
000000000001eeb5	subq	-0x20(%rbp), %rdx
000000000001eeb9	shlq	$0x3, %rdx
000000000001eebd	addq	%rdx, %rcx
000000000001eec0	movq	%rax, -0x38(%rbp)
000000000001eec4	movq	%rcx, %rax
000000000001eec7	addq	$0x40, %rsp
000000000001eecb	popq	%rbp
000000000001eecc	retq
000000000001eecd	nopl	(%rax)
__ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv:
000000000001eed0	pushq	%rbp
000000000001eed1	movq	%rsp, %rbp
000000000001eed4	movq	%rdi, -0x8(%rbp)
000000000001eed8	movq	-0x8(%rbp), %rdi
000000000001eedc	movq	%rdi, %rax
000000000001eedf	popq	%rbp
000000000001eee0	retq
000000000001eee1	nopw	%cs:(%rax,%rax)
000000000001eeeb	nopl	(%rax,%rax)
__ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv:
000000000001eef0	pushq	%rbp
000000000001eef1	movq	%rsp, %rbp
000000000001eef4	movq	%rdi, -0x8(%rbp)
000000000001eef8	movabsq	$0x1fffffffffffffff, %rax
000000000001ef02	popq	%rbp
000000000001ef03	retq
000000000001ef04	nopw	%cs:(%rax,%rax)
000000000001ef0e	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE8allocateEmPKv:
000000000001ef10	pushq	%rbp
000000000001ef11	movq	%rsp, %rbp
000000000001ef14	subq	$0x20, %rsp
000000000001ef18	movq	%rdi, -0x8(%rbp)
000000000001ef1c	movq	%rsi, -0x10(%rbp)
000000000001ef20	movq	%rdx, -0x18(%rbp)
000000000001ef24	movq	-0x8(%rbp), %rdi
000000000001ef28	movq	-0x10(%rbp), %rdx
000000000001ef2c	movq	%rdx, -0x20(%rbp)
000000000001ef30	callq	0x1f362 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv
000000000001ef35	movq	-0x20(%rbp), %rdx
000000000001ef39	cmpq	%rax, %rdx
000000000001ef3c	jbe	0x1ef47
000000000001ef42	callq	0x1f566 ## symbol stub for: __ZSt17__throw_bad_allocv
000000000001ef47	movq	-0x10(%rbp), %rax
000000000001ef4b	shlq	$0x3, %rax
000000000001ef4f	movq	%rax, %rdi
000000000001ef52	callq	0x1f608 ## symbol stub for: __Znwm
000000000001ef57	addq	$0x20, %rsp
000000000001ef5b	popq	%rbp
000000000001ef5c	retq
000000000001ef5d	nopl	(%rax)
__ZSt18uninitialized_copyIPP13BaseContainerS2_ET0_T_S4_S3_:
000000000001ef60	pushq	%rbp
000000000001ef61	movq	%rsp, %rbp
000000000001ef64	subq	$0x20, %rsp
000000000001ef68	movq	%rdi, -0x8(%rbp)
000000000001ef6c	movq	%rsi, -0x10(%rbp)
000000000001ef70	movq	%rdx, -0x18(%rbp)
000000000001ef74	movq	-0x8(%rbp), %rdi
000000000001ef78	movq	-0x10(%rbp), %rsi
000000000001ef7c	movq	-0x18(%rbp), %rdx
000000000001ef80	callq	0x1f5ae ## symbol stub for: __ZSt24__uninitialized_copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_St11__true_type
000000000001ef85	addq	$0x20, %rsp
000000000001ef89	popq	%rbp
000000000001ef8a	retq
000000000001ef8b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_St11__true_type:
000000000001ef90	pushq	%rbp
000000000001ef91	movq	%rsp, %rbp
000000000001ef94	subq	$0x20, %rsp
000000000001ef98	movq	%rdi, -0x10(%rbp)
000000000001ef9c	movq	%rsi, -0x18(%rbp)
000000000001efa0	movq	%rdx, -0x20(%rbp)
000000000001efa4	movq	-0x10(%rbp), %rdi
000000000001efa8	movq	-0x18(%rbp), %rsi
000000000001efac	movq	-0x20(%rbp), %rdx
000000000001efb0	callq	0x1f5c0 ## symbol stub for: __ZSt4copyIPP13BaseContainerS2_ET0_T_S4_S3_
000000000001efb5	addq	$0x20, %rsp
000000000001efb9	popq	%rbp
000000000001efba	retq
000000000001efbb	nopl	(%rax,%rax)
__ZSt4copyIPP13BaseContainerS2_ET0_T_S4_S3_:
000000000001efc0	pushq	%rbp
000000000001efc1	movq	%rsp, %rbp
000000000001efc4	subq	$0x20, %rsp
000000000001efc8	movq	%rdi, -0x8(%rbp)
000000000001efcc	movq	%rsi, -0x10(%rbp)
000000000001efd0	movq	%rdx, -0x18(%rbp)
000000000001efd4	movb	$0x0, -0x19(%rbp)
000000000001efd8	movb	$0x0, -0x1a(%rbp)
000000000001efdc	movq	-0x8(%rbp), %rdi
000000000001efe0	movq	-0x10(%rbp), %rsi
000000000001efe4	movq	-0x18(%rbp), %rdx
000000000001efe8	callq	0x1f494 ## symbol stub for: __ZNSt13__copy_normalILb0ELb0EE8__copy_nIPP13BaseContainerS4_EET0_T_S6_S5_
000000000001efed	addq	$0x20, %rsp
000000000001eff1	popq	%rbp
000000000001eff2	retq
000000000001eff3	nopw	%cs:(%rax,%rax)
000000000001effd	nopl	(%rax)
__ZNSt13__copy_normalILb0ELb0EE8__copy_nIPP13BaseContainerS4_EET0_T_S6_S5_:
000000000001f000	pushq	%rbp
000000000001f001	movq	%rsp, %rbp
000000000001f004	subq	$0x20, %rsp
000000000001f008	movq	%rdi, -0x8(%rbp)
000000000001f00c	movq	%rsi, -0x10(%rbp)
000000000001f010	movq	%rdx, -0x18(%rbp)
000000000001f014	movq	-0x8(%rbp), %rdi
000000000001f018	movq	-0x10(%rbp), %rsi
000000000001f01c	movq	-0x18(%rbp), %rdx
000000000001f020	callq	0x1f548 ## symbol stub for: __ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_
000000000001f025	addq	$0x20, %rsp
000000000001f029	popq	%rbp
000000000001f02a	retq
000000000001f02b	nopl	(%rax,%rax)
__ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_:
000000000001f030	pushq	%rbp
000000000001f031	movq	%rsp, %rbp
000000000001f034	subq	$0x20, %rsp
000000000001f038	movq	%rdi, -0x8(%rbp)
000000000001f03c	movq	%rsi, -0x10(%rbp)
000000000001f040	movq	%rdx, -0x18(%rbp)
000000000001f044	movb	$0x1, -0x19(%rbp)
000000000001f048	movq	-0x8(%rbp), %rdi
000000000001f04c	movq	-0x10(%rbp), %rsi
000000000001f050	movq	-0x18(%rbp), %rdx
000000000001f054	callq	0x1f4ca ## symbol stub for: __ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP13BaseContainerEEPT_PKS5_S8_S6_
000000000001f059	addq	$0x20, %rsp
000000000001f05d	popq	%rbp
000000000001f05e	retq
000000000001f05f	nop
__ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP13BaseContainerEEPT_PKS5_S8_S6_:
000000000001f060	pushq	%rbp
000000000001f061	movq	%rsp, %rbp
000000000001f064	subq	$0x30, %rsp
000000000001f068	movq	%rdi, -0x8(%rbp)
000000000001f06c	movq	%rsi, -0x10(%rbp)
000000000001f070	movq	%rdx, -0x18(%rbp)
000000000001f074	movq	-0x18(%rbp), %rdx
000000000001f078	movq	-0x8(%rbp), %rsi
000000000001f07c	movq	-0x10(%rbp), %rdi
000000000001f080	movq	-0x8(%rbp), %rax
000000000001f084	subq	%rax, %rdi
000000000001f087	sarq	$0x3, %rdi
000000000001f08b	shlq	$0x3, %rdi
000000000001f08f	movq	%rdi, -0x20(%rbp)
000000000001f093	movq	%rdx, %rdi
000000000001f096	movq	-0x20(%rbp), %rdx
000000000001f09a	callq	0x1f6a4 ## symbol stub for: _memmove
000000000001f09f	movq	-0x18(%rbp), %rdx
000000000001f0a3	movq	-0x10(%rbp), %rsi
000000000001f0a7	movq	-0x8(%rbp), %rdi
000000000001f0ab	subq	%rdi, %rsi
000000000001f0ae	sarq	$0x3, %rsi
000000000001f0b2	shlq	$0x3, %rsi
000000000001f0b6	addq	%rsi, %rdx
000000000001f0b9	movq	%rax, -0x28(%rbp)
000000000001f0bd	movq	%rdx, %rax
000000000001f0c0	addq	$0x30, %rsp
000000000001f0c4	popq	%rbp
000000000001f0c5	retq
000000000001f0c6	nopw	%cs:(%rax,%rax)
__ZSt8_DestroyIPP13BaseContainerEvT_S3_:
000000000001f0d0	pushq	%rbp
000000000001f0d1	movq	%rsp, %rbp
000000000001f0d4	subq	$0x20, %rsp
000000000001f0d8	movq	%rdi, -0x8(%rbp)
000000000001f0dc	movq	%rsi, -0x10(%rbp)
000000000001f0e0	movq	-0x8(%rbp), %rdi
000000000001f0e4	movq	-0x10(%rbp), %rsi
000000000001f0e8	callq	0x1f554 ## symbol stub for: __ZSt13__destroy_auxIPP13BaseContainerEvT_S3_St11__true_type
000000000001f0ed	addq	$0x20, %rsp
000000000001f0f1	popq	%rbp
000000000001f0f2	retq
000000000001f0f3	nopw	%cs:(%rax,%rax)
000000000001f0fd	nopl	(%rax)
__ZSt13__destroy_auxIPP13BaseContainerEvT_S3_St11__true_type:
000000000001f100	pushq	%rbp
000000000001f101	movq	%rsp, %rbp
000000000001f104	movq	%rdi, -0x10(%rbp)
000000000001f108	movq	%rsi, -0x18(%rbp)
000000000001f10c	popq	%rbp
000000000001f10d	retq
000000000001f10e	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE10deallocateEPS2_m:
000000000001f110	pushq	%rbp
000000000001f111	movq	%rsp, %rbp
000000000001f114	subq	$0x20, %rsp
000000000001f118	movq	%rdi, -0x8(%rbp)
000000000001f11c	movq	%rsi, -0x10(%rbp)
000000000001f120	movq	%rdx, -0x18(%rbp)
000000000001f124	movq	-0x10(%rbp), %rdx
000000000001f128	movq	%rdx, %rdi
000000000001f12b	callq	0x1f602 ## symbol stub for: __ZdlPv
000000000001f130	addq	$0x20, %rsp
000000000001f134	popq	%rbp
000000000001f135	retq
000000000001f136	nopw	%cs:(%rax,%rax)
___cxx_global_var_init:
000000000001f140	pushq	%rbp
000000000001f141	movq	%rsp, %rbp
000000000001f144	subq	$0x10, %rsp
000000000001f148	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
000000000001f14f	callq	0x1f530 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
000000000001f154	movq	0x46ebd(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
000000000001f15b	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
000000000001f162	leaq	-0x1f169(%rip), %rdx
000000000001f169	callq	0x1f620 ## symbol stub for: ___cxa_atexit
000000000001f16e	movl	%eax, -0x4(%rbp)
000000000001f171	addq	$0x10, %rsp
000000000001f175	popq	%rbp
000000000001f176	retq
000000000001f177	nopw	(%rax,%rax)
___cxx_global_var_init.1:
000000000001f180	pushq	%rbp
000000000001f181	movq	%rsp, %rbp
000000000001f184	subq	$0x10, %rsp
000000000001f188	leaq	__ZN7cocos2dL11CCPointZeroE(%rip), %rdi ## cocos2d::CCPointZero
000000000001f18f	xorps	%xmm0, %xmm0
000000000001f192	movss	%xmm0, -0x4(%rbp)
000000000001f197	movss	-0x4(%rbp), %xmm1
000000000001f19c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001f1a1	addq	$0x10, %rsp
000000000001f1a5	popq	%rbp
000000000001f1a6	retq
000000000001f1a7	nopw	(%rax,%rax)
___cxx_global_var_init.2:
000000000001f1b0	pushq	%rbp
000000000001f1b1	movq	%rsp, %rbp
000000000001f1b4	subq	$0x10, %rsp
000000000001f1b8	leaq	__ZN7cocos2dL10CCSizeZeroE(%rip), %rdi ## cocos2d::CCSizeZero
000000000001f1bf	xorps	%xmm0, %xmm0
000000000001f1c2	movss	%xmm0, -0x4(%rbp)
000000000001f1c7	movss	-0x4(%rbp), %xmm1
000000000001f1cc	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
000000000001f1d1	addq	$0x10, %rsp
000000000001f1d5	popq	%rbp
000000000001f1d6	retq
000000000001f1d7	nopw	(%rax,%rax)
___cxx_global_var_init.3:
000000000001f1e0	pushq	%rbp
000000000001f1e1	movq	%rsp, %rbp
000000000001f1e4	subq	$0x10, %rsp
000000000001f1e8	leaq	__ZN7cocos2dL10CCRectZeroE(%rip), %rdi ## cocos2d::CCRectZero
000000000001f1ef	xorps	%xmm0, %xmm0
000000000001f1f2	movss	%xmm0, -0x4(%rbp)
000000000001f1f7	movss	-0x4(%rbp), %xmm1
000000000001f1fc	movss	-0x4(%rbp), %xmm2
000000000001f201	movss	-0x4(%rbp), %xmm3
000000000001f206	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001f20b	addq	$0x10, %rsp
000000000001f20f	popq	%rbp
000000000001f210	retq
000000000001f211	nopw	%cs:(%rax,%rax)
000000000001f21b	nopl	(%rax,%rax)
___cxx_global_var_init.4:
000000000001f220	pushq	%rbp
000000000001f221	movq	%rsp, %rbp
000000000001f224	leaq	__ZN7cocos2d2uiL10MarginZeroE(%rip), %rdi ## cocos2d::ui::MarginZero
000000000001f22b	callq	__ZN7cocos2d2ui6MarginC1Ev ## cocos2d::ui::Margin::Margin()
000000000001f230	popq	%rbp
000000000001f231	retq
000000000001f232	nopw	%cs:(%rax,%rax)
000000000001f23c	nopl	(%rax)
__GLOBAL__sub_I_main.cpp:
000000000001f240	pushq	%rbp
000000000001f241	movq	%rsp, %rbp
000000000001f244	callq	___cxx_global_var_init
000000000001f249	callq	___cxx_global_var_init.1
000000000001f24e	callq	___cxx_global_var_init.2
000000000001f253	callq	___cxx_global_var_init.3
000000000001f258	callq	___cxx_global_var_init.4
000000000001f25d	popq	%rbp
000000000001f25e	retq
