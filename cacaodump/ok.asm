dist/main.dylib:
(__TEXT,__text) section
__ZNSaIP12ModContainerEC1Ev:
00000000000015b0	pushq	%rbp
00000000000015b1	movq	%rsp, %rbp
00000000000015b4	subq	$0x10, %rsp
00000000000015b8	movq	%rdi, -0x8(%rbp)
00000000000015bc	movq	-0x8(%rbp), %rdi
00000000000015c0	callq	0x274bc ## symbol stub for: __ZNSaIP12ModContainerEC2Ev
00000000000015c5	addq	$0x10, %rsp
00000000000015c9	popq	%rbp
00000000000015ca	retq
00000000000015cb	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EEC1ERKS2_:
00000000000015d0	pushq	%rbp
00000000000015d1	movq	%rsp, %rbp
00000000000015d4	subq	$0x10, %rsp
00000000000015d8	movq	%rdi, -0x8(%rbp)
00000000000015dc	movq	%rsi, -0x10(%rbp)
00000000000015e0	movq	-0x8(%rbp), %rdi
00000000000015e4	movq	-0x10(%rbp), %rsi
00000000000015e8	callq	0x27666 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EEC2ERKS2_
00000000000015ed	addq	$0x10, %rsp
00000000000015f1	popq	%rbp
00000000000015f2	retq
00000000000015f3	nopw	%cs:(%rax,%rax)
00000000000015fd	nopl	(%rax)
__ZNSaIP12ModContainerED1Ev:
0000000000001600	pushq	%rbp
0000000000001601	movq	%rsp, %rbp
0000000000001604	subq	$0x10, %rsp
0000000000001608	movq	%rdi, -0x8(%rbp)
000000000000160c	movq	-0x8(%rbp), %rdi
0000000000001610	callq	0x274c8 ## symbol stub for: __ZNSaIP12ModContainerED2Ev
0000000000001615	addq	$0x10, %rsp
0000000000001619	popq	%rbp
000000000000161a	retq
000000000000161b	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EED1Ev:
0000000000001620	pushq	%rbp
0000000000001621	movq	%rsp, %rbp
0000000000001624	subq	$0x10, %rsp
0000000000001628	movq	%rdi, -0x8(%rbp)
000000000000162c	movq	-0x8(%rbp), %rdi
0000000000001630	callq	0x2766c ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EED2Ev
0000000000001635	addq	$0x10, %rsp
0000000000001639	popq	%rbp
000000000000163a	retq
000000000000163b	nopl	(%rax,%rax)
__ZN13BaseContainerD2Ev:
0000000000001640	pushq	%rbp
0000000000001641	movq	%rsp, %rbp
0000000000001644	subq	$0x20, %rsp
0000000000001648	movq	%rdi, -0x8(%rbp)
000000000000164c	movq	-0x8(%rbp), %rdi
0000000000001650	leaq	0x71559(%rip), %rax
0000000000001657	movq	%rax, (%rdi)
000000000000165a	movq	0x709c7(%rip), %rdi ## literal pool symbol address: __ZSt4cout
0000000000001661	leaq	0x67984(%rip), %rsi ## literal pool for: "bye"
0000000000001668	callq	0x27918 ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000000166d	movq	%rax, -0x10(%rbp)
0000000000001671	jmp	0x1676
0000000000001676	movq	0x709b3(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
000000000000167d	movq	-0x10(%rbp), %rdi
0000000000001681	callq	0x274fe ## symbol stub for: __ZNSolsEPFRSoS_E
0000000000001686	movq	%rax, -0x18(%rbp)
000000000000168a	jmp	0x168f
000000000000168f	addq	$0x20, %rsp
0000000000001693	popq	%rbp
0000000000001694	retq
0000000000001695	movq	%rax, %rdi
0000000000001698	movq	%rdx, -0x20(%rbp)
000000000000169c	callq	___clang_call_terminate
00000000000016a1	nopw	%cs:(%rax,%rax)
00000000000016ab	nopl	(%rax,%rax)
__ZN13BaseContainerD1Ev:
00000000000016b0	pushq	%rbp
00000000000016b1	movq	%rsp, %rbp
00000000000016b4	subq	$0x10, %rsp
00000000000016b8	movq	%rdi, -0x8(%rbp)
00000000000016bc	movq	-0x8(%rbp), %rdi
00000000000016c0	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000016c5	addq	$0x10, %rsp
00000000000016c9	popq	%rbp
00000000000016ca	retq
00000000000016cb	nopl	(%rax,%rax)
__ZN13BaseContainerD0Ev:
00000000000016d0	pushq	%rbp
00000000000016d1	movq	%rsp, %rbp
00000000000016d4	subq	$0x10, %rsp
00000000000016d8	movq	%rdi, -0x8(%rbp)
00000000000016dc	movq	-0x8(%rbp), %rdi
00000000000016e0	movq	%rdi, -0x10(%rbp)
00000000000016e4	callq	__ZN13BaseContainerD1Ev ## BaseContainer::~BaseContainer()
00000000000016e9	movq	-0x10(%rbp), %rdi
00000000000016ed	callq	0x2791e ## symbol stub for: __ZdlPv
00000000000016f2	addq	$0x10, %rsp
00000000000016f6	popq	%rbp
00000000000016f7	retq
00000000000016f8	nopl	(%rax,%rax)
__ZN15MemoryContainerC2ElmPc:
0000000000001700	pushq	%rbp
0000000000001701	movq	%rsp, %rbp
0000000000001704	subq	$0x60, %rsp
0000000000001708	movq	0x70961(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
000000000000170f	movq	(%rax), %rax
0000000000001712	movq	%rax, -0x8(%rbp)
0000000000001716	movq	%rdi, -0x10(%rbp)
000000000000171a	movq	%rsi, -0x18(%rbp)
000000000000171e	movq	%rdx, -0x20(%rbp)
0000000000001722	movq	%rcx, -0x28(%rbp)
0000000000001726	movq	-0x10(%rbp), %rax
000000000000172a	movq	%rax, %rdi
000000000000172d	movq	%rax, -0x50(%rbp)
0000000000001731	callq	0x271f8 ## symbol stub for: __ZN13BaseContainerC2Ev
0000000000001736	leaq	0x71493(%rip), %rax
000000000000173d	movq	-0x50(%rbp), %rcx
0000000000001741	movq	%rax, (%rcx)
0000000000001744	movq	-0x18(%rbp), %rax
0000000000001748	movq	%rax, 0x8(%rcx)
000000000000174c	movq	-0x20(%rbp), %rax
0000000000001750	movq	%rax, 0x10(%rcx)
0000000000001754	movq	0x10(%rcx), %rax
0000000000001758	movq	%rsp, %rdx
000000000000175b	movq	%rdx, -0x30(%rbp)
000000000000175f	movq	%rax, %rdx
0000000000001762	addq	$0xf, %rdx
0000000000001766	andq	$-0x10, %rdx
000000000000176a	movq	%rsp, %rsi
000000000000176d	subq	%rdx, %rsi
0000000000001770	movq	%rsi, %rsp
0000000000001773	movq	%rax, -0x38(%rbp)
0000000000001777	movq	0x8(%rcx), %rdi
000000000000177b	movq	0x10(%rcx), %rax
000000000000177f	movq	%rsi, -0x58(%rbp)
0000000000001783	movq	%rax, %rsi
0000000000001786	movq	-0x58(%rbp), %rdx
000000000000178a	callq	__Z6readPMymPc ## readPM(unsigned long long, unsigned long, char*)
000000000000178f	movl	%eax, -0x5c(%rbp)
0000000000001792	jmp	0x1797
0000000000001797	movq	-0x50(%rbp), %rax
000000000000179b	movq	-0x58(%rbp), %rcx
000000000000179f	movq	%rcx, 0x18(%rax)
00000000000017a3	movq	-0x28(%rbp), %rdx
00000000000017a7	movq	%rdx, 0x20(%rax)
00000000000017ab	movq	-0x30(%rbp), %rdx
00000000000017af	movq	%rdx, %rsp
00000000000017b2	movq	0x708b7(%rip), %rdx ## literal pool symbol address: ___stack_chk_guard
00000000000017b9	movq	(%rdx), %rdx
00000000000017bc	movq	-0x8(%rbp), %rsi
00000000000017c0	cmpq	%rsi, %rdx
00000000000017c3	jne	0x17ee
00000000000017c9	movq	%rbp, %rsp
00000000000017cc	popq	%rbp
00000000000017cd	retq
00000000000017ce	movl	%edx, %ecx
00000000000017d0	movq	%rax, -0x40(%rbp)
00000000000017d4	movl	%ecx, -0x44(%rbp)
00000000000017d7	movq	-0x50(%rbp), %rax
00000000000017db	movq	%rax, %rdi
00000000000017de	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000017e3	movq	-0x40(%rbp), %rdi
00000000000017e7	callq	0x271b0 ## symbol stub for: __Unwind_Resume
00000000000017ec	ud2
00000000000017ee	callq	0x27978 ## symbol stub for: ___stack_chk_fail
00000000000017f3	ud2
00000000000017f5	nopw	%cs:(%rax,%rax)
00000000000017ff	nop
__ZN13BaseContainerC2Ev:
0000000000001800	pushq	%rbp
0000000000001801	movq	%rsp, %rbp
0000000000001804	leaq	__ZTV13BaseContainer(%rip), %rax ## vtable for BaseContainer
000000000000180b	addq	$0x10, %rax
000000000000180f	movq	%rdi, -0x8(%rbp)
0000000000001813	movq	-0x8(%rbp), %rdi
0000000000001817	movq	%rax, (%rdi)
000000000000181a	popq	%rbp
000000000000181b	retq
000000000000181c	nopl	(%rax)
__ZN15MemoryContainerC1ElmPc:
0000000000001820	pushq	%rbp
0000000000001821	movq	%rsp, %rbp
0000000000001824	subq	$0x20, %rsp
0000000000001828	movq	%rdi, -0x8(%rbp)
000000000000182c	movq	%rsi, -0x10(%rbp)
0000000000001830	movq	%rdx, -0x18(%rbp)
0000000000001834	movq	%rcx, -0x20(%rbp)
0000000000001838	movq	-0x8(%rbp), %rdi
000000000000183c	movq	-0x10(%rbp), %rsi
0000000000001840	movq	-0x18(%rbp), %rdx
0000000000001844	movq	-0x20(%rbp), %rcx
0000000000001848	callq	__ZN15MemoryContainerC2ElmPc ## MemoryContainer::MemoryContainer(long, unsigned long, char*)
000000000000184d	addq	$0x20, %rsp
0000000000001851	popq	%rbp
0000000000001852	retq
0000000000001853	nopw	%cs:(%rax,%rax)
000000000000185d	nopl	(%rax)
__ZN15MemoryContainerD2Ev:
0000000000001860	pushq	%rbp
0000000000001861	movq	%rsp, %rbp
0000000000001864	subq	$0x30, %rsp
0000000000001868	movq	%rdi, -0x8(%rbp)
000000000000186c	movq	-0x8(%rbp), %rdi
0000000000001870	leaq	0x71359(%rip), %rax
0000000000001877	movq	%rax, (%rdi)
000000000000187a	movq	0x707a7(%rip), %rax ## literal pool symbol address: __ZSt4cout
0000000000001881	leaq	0x67768(%rip), %rsi ## literal pool for: "bye from memory"
0000000000001888	movq	%rdi, -0x20(%rbp)
000000000000188c	movq	%rax, %rdi
000000000000188f	callq	0x27918 ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
0000000000001894	movq	%rax, -0x28(%rbp)
0000000000001898	jmp	0x189d
000000000000189d	movq	0x7078c(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
00000000000018a4	movq	-0x28(%rbp), %rdi
00000000000018a8	callq	0x274fe ## symbol stub for: __ZNSolsEPFRSoS_E
00000000000018ad	movq	%rax, -0x30(%rbp)
00000000000018b1	jmp	0x18b6
00000000000018b6	movq	-0x20(%rbp), %rax
00000000000018ba	movq	%rax, %rdi
00000000000018bd	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000018c2	addq	$0x30, %rsp
00000000000018c6	popq	%rbp
00000000000018c7	retq
00000000000018c8	movl	%edx, %ecx
00000000000018ca	movq	%rax, -0x10(%rbp)
00000000000018ce	movl	%ecx, -0x14(%rbp)
00000000000018d1	movq	-0x20(%rbp), %rax
00000000000018d5	movq	%rax, %rdi
00000000000018d8	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
00000000000018dd	movq	-0x10(%rbp), %rdi
00000000000018e1	callq	___clang_call_terminate
00000000000018e6	nopw	%cs:(%rax,%rax)
__ZN15MemoryContainerD1Ev:
00000000000018f0	pushq	%rbp
00000000000018f1	movq	%rsp, %rbp
00000000000018f4	subq	$0x10, %rsp
00000000000018f8	movq	%rdi, -0x8(%rbp)
00000000000018fc	movq	-0x8(%rbp), %rdi
0000000000001900	callq	__ZN15MemoryContainerD2Ev ## MemoryContainer::~MemoryContainer()
0000000000001905	addq	$0x10, %rsp
0000000000001909	popq	%rbp
000000000000190a	retq
000000000000190b	nopl	(%rax,%rax)
__ZN15MemoryContainerD0Ev:
0000000000001910	pushq	%rbp
0000000000001911	movq	%rsp, %rbp
0000000000001914	subq	$0x10, %rsp
0000000000001918	movq	%rdi, -0x8(%rbp)
000000000000191c	movq	-0x8(%rbp), %rdi
0000000000001920	movq	%rdi, -0x10(%rbp)
0000000000001924	callq	__ZN15MemoryContainerD1Ev ## MemoryContainer::~MemoryContainer()
0000000000001929	movq	-0x10(%rbp), %rdi
000000000000192d	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000001932	addq	$0x10, %rsp
0000000000001936	popq	%rbp
0000000000001937	retq
0000000000001938	nopl	(%rax,%rax)
__ZN13HookContainerC2ElPFvvE:
0000000000001940	pushq	%rbp
0000000000001941	movq	%rsp, %rbp
0000000000001944	subq	$0x90, %rsp
000000000000194b	movq	0x7071e(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
0000000000001952	movq	(%rax), %rax
0000000000001955	movq	%rax, -0x8(%rbp)
0000000000001959	movq	%rdi, -0x10(%rbp)
000000000000195d	movq	%rsi, -0x18(%rbp)
0000000000001961	movq	%rdx, -0x20(%rbp)
0000000000001965	movq	-0x10(%rbp), %rax
0000000000001969	movq	%rax, %rdi
000000000000196c	movq	%rax, -0x50(%rbp)
0000000000001970	callq	0x271f8 ## symbol stub for: __ZN13BaseContainerC2Ev
0000000000001975	leaq	0x71274(%rip), %rax
000000000000197c	movq	-0x50(%rbp), %rdx
0000000000001980	movq	%rax, (%rdx)
0000000000001983	movq	-0x18(%rbp), %rax
0000000000001987	movq	%rax, 0x8(%rdx)
000000000000198b	movq	-0x18(%rbp), %rdi
000000000000198f	addq	$0x28, %rdx
0000000000001993	movq	%rdx, %rsi
0000000000001996	callq	__Z4dupePvPS_ ## dupe(void*, void**)
000000000000199b	movl	%eax, -0x54(%rbp)
000000000000199e	jmp	0x19a3
00000000000019a3	movq	-0x50(%rbp), %rax
00000000000019a7	movq	$0x10, 0x10(%rax)
00000000000019af	movq	0x10(%rax), %rdi
00000000000019b3	callq	0x279ba ## symbol stub for: _malloc
00000000000019b8	movq	%rax, -0x60(%rbp)
00000000000019bc	jmp	0x19c1
00000000000019c1	movq	-0x50(%rbp), %rax
00000000000019c5	movq	-0x60(%rbp), %rcx
00000000000019c9	movq	%rcx, 0x18(%rax)
00000000000019cd	movq	0x10(%rax), %rdi
00000000000019d1	callq	0x279ba ## symbol stub for: _malloc
00000000000019d6	movq	%rax, -0x68(%rbp)
00000000000019da	jmp	0x19df
00000000000019df	movq	-0x50(%rbp), %rax
00000000000019e3	movq	-0x68(%rbp), %rcx
00000000000019e7	movq	%rcx, 0x20(%rax)
00000000000019eb	movq	0x10(%rax), %rdx
00000000000019ef	movq	%rsp, %rsi
00000000000019f2	movq	%rsi, -0x38(%rbp)
00000000000019f6	movq	%rdx, %rsi
00000000000019f9	addq	$0xf, %rsi
00000000000019fd	andq	$-0x10, %rsi
0000000000001a01	movq	%rsp, %rdi
0000000000001a04	subq	%rsi, %rdi
0000000000001a07	movq	%rdi, %rsp
0000000000001a0a	movq	%rdx, -0x40(%rbp)
0000000000001a0e	movq	0x8(%rax), %rdx
0000000000001a12	movq	0x10(%rax), %rsi
0000000000001a16	movq	%rdi, -0x70(%rbp)
0000000000001a1a	movq	%rdx, %rdi
0000000000001a1d	movq	-0x70(%rbp), %rdx
0000000000001a21	callq	__Z6readPMymPc ## readPM(unsigned long long, unsigned long, char*)
0000000000001a26	movl	%eax, -0x74(%rbp)
0000000000001a29	jmp	0x1a2e
0000000000001a2e	movq	-0x50(%rbp), %rax
0000000000001a32	movq	0x10(%rax), %rdx
0000000000001a36	movq	0x18(%rax), %rdi
0000000000001a3a	movq	-0x70(%rbp), %rsi
0000000000001a3e	callq	0x279c0 ## symbol stub for: _memcpy
0000000000001a43	movq	-0x50(%rbp), %rdx
0000000000001a47	movq	0x10(%rdx), %rsi
0000000000001a4b	movq	%rsi, %rdi
0000000000001a4e	addq	$0xf, %rdi
0000000000001a52	andq	$-0x10, %rdi
0000000000001a56	movq	%rsp, %rcx
0000000000001a59	subq	%rdi, %rcx
0000000000001a5c	movq	%rcx, %rsp
0000000000001a5f	movq	%rsi, -0x48(%rbp)
0000000000001a63	movq	-0x20(%rbp), %rdi
0000000000001a67	movq	%rcx, %rsi
0000000000001a6a	movq	%rax, -0x80(%rbp)
0000000000001a6e	movq	%rcx, -0x88(%rbp)
0000000000001a75	callq	__Z14_get_jmp_bytesPvPc ## _get_jmp_bytes(void*, char*)
0000000000001a7a	movl	%eax, -0x8c(%rbp)
0000000000001a80	jmp	0x1a85
0000000000001a85	movq	-0x50(%rbp), %rax
0000000000001a89	movq	0x20(%rax), %rdi
0000000000001a8d	movq	0x10(%rax), %rdx
0000000000001a91	movq	-0x88(%rbp), %rsi
0000000000001a98	callq	0x279c0 ## symbol stub for: _memcpy
0000000000001a9d	movq	-0x38(%rbp), %rax
0000000000001aa1	movq	%rax, %rsp
0000000000001aa4	movq	0x705c5(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
0000000000001aab	movq	(%rax), %rax
0000000000001aae	movq	-0x8(%rbp), %rdx
0000000000001ab2	cmpq	%rdx, %rax
0000000000001ab5	jne	0x1ae0
0000000000001abb	movq	%rbp, %rsp
0000000000001abe	popq	%rbp
0000000000001abf	retq
0000000000001ac0	movl	%edx, %ecx
0000000000001ac2	movq	%rax, -0x28(%rbp)
0000000000001ac6	movl	%ecx, -0x2c(%rbp)
0000000000001ac9	movq	-0x50(%rbp), %rax
0000000000001acd	movq	%rax, %rdi
0000000000001ad0	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
0000000000001ad5	movq	-0x28(%rbp), %rdi
0000000000001ad9	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000001ade	ud2
0000000000001ae0	callq	0x27978 ## symbol stub for: ___stack_chk_fail
0000000000001ae5	ud2
0000000000001ae7	nopw	(%rax,%rax)
__ZN13HookContainerC1ElPFvvE:
0000000000001af0	pushq	%rbp
0000000000001af1	movq	%rsp, %rbp
0000000000001af4	subq	$0x20, %rsp
0000000000001af8	movq	%rdi, -0x8(%rbp)
0000000000001afc	movq	%rsi, -0x10(%rbp)
0000000000001b00	movq	%rdx, -0x18(%rbp)
0000000000001b04	movq	-0x8(%rbp), %rdi
0000000000001b08	movq	-0x10(%rbp), %rsi
0000000000001b0c	movq	-0x18(%rbp), %rdx
0000000000001b10	callq	__ZN13HookContainerC2ElPFvvE ## HookContainer::HookContainer(long, void (*)())
0000000000001b15	addq	$0x20, %rsp
0000000000001b19	popq	%rbp
0000000000001b1a	retq
0000000000001b1b	nopl	(%rax,%rax)
__ZN13HookContainer11getOriginalEv:
0000000000001b20	pushq	%rbp
0000000000001b21	movq	%rsp, %rbp
0000000000001b24	movq	%rdi, -0x8(%rbp)
0000000000001b28	movq	-0x8(%rbp), %rdi
0000000000001b2c	movq	0x28(%rdi), %rax
0000000000001b30	popq	%rbp
0000000000001b31	retq
0000000000001b32	nopw	%cs:(%rax,%rax)
0000000000001b3c	nopl	(%rax)
__ZN13HookContainerD2Ev:
0000000000001b40	pushq	%rbp
0000000000001b41	movq	%rsp, %rbp
0000000000001b44	subq	$0x30, %rsp
0000000000001b48	movq	%rdi, -0x8(%rbp)
0000000000001b4c	movq	-0x8(%rbp), %rdi
0000000000001b50	leaq	0x71099(%rip), %rax
0000000000001b57	movq	%rax, (%rdi)
0000000000001b5a	movq	0x704c7(%rip), %rax ## literal pool symbol address: __ZSt4cout
0000000000001b61	leaq	0x67498(%rip), %rsi ## literal pool for: "bye from hook"
0000000000001b68	movq	%rdi, -0x20(%rbp)
0000000000001b6c	movq	%rax, %rdi
0000000000001b6f	callq	0x27918 ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
0000000000001b74	movq	%rax, -0x28(%rbp)
0000000000001b78	jmp	0x1b7d
0000000000001b7d	movq	0x704ac(%rip), %rsi ## literal pool symbol address: __ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
0000000000001b84	movq	-0x28(%rbp), %rdi
0000000000001b88	callq	0x274fe ## symbol stub for: __ZNSolsEPFRSoS_E
0000000000001b8d	movq	%rax, -0x30(%rbp)
0000000000001b91	jmp	0x1b96
0000000000001b96	movq	-0x20(%rbp), %rax
0000000000001b9a	movq	%rax, %rdi
0000000000001b9d	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
0000000000001ba2	addq	$0x30, %rsp
0000000000001ba6	popq	%rbp
0000000000001ba7	retq
0000000000001ba8	movl	%edx, %ecx
0000000000001baa	movq	%rax, -0x10(%rbp)
0000000000001bae	movl	%ecx, -0x14(%rbp)
0000000000001bb1	movq	-0x20(%rbp), %rax
0000000000001bb5	movq	%rax, %rdi
0000000000001bb8	callq	__ZN13BaseContainerD2Ev ## BaseContainer::~BaseContainer()
0000000000001bbd	movq	-0x10(%rbp), %rdi
0000000000001bc1	callq	___clang_call_terminate
0000000000001bc6	nopw	%cs:(%rax,%rax)
__ZN13HookContainerD1Ev:
0000000000001bd0	pushq	%rbp
0000000000001bd1	movq	%rsp, %rbp
0000000000001bd4	subq	$0x10, %rsp
0000000000001bd8	movq	%rdi, -0x8(%rbp)
0000000000001bdc	movq	-0x8(%rbp), %rdi
0000000000001be0	callq	__ZN13HookContainerD2Ev ## HookContainer::~HookContainer()
0000000000001be5	addq	$0x10, %rsp
0000000000001be9	popq	%rbp
0000000000001bea	retq
0000000000001beb	nopl	(%rax,%rax)
__ZN13HookContainerD0Ev:
0000000000001bf0	pushq	%rbp
0000000000001bf1	movq	%rsp, %rbp
0000000000001bf4	subq	$0x10, %rsp
0000000000001bf8	movq	%rdi, -0x8(%rbp)
0000000000001bfc	movq	-0x8(%rbp), %rdi
0000000000001c00	movq	%rdi, -0x10(%rbp)
0000000000001c04	callq	__ZN13HookContainerD1Ev ## HookContainer::~HookContainer()
0000000000001c09	movq	-0x10(%rbp), %rdi
0000000000001c0d	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000001c12	addq	$0x10, %rsp
0000000000001c16	popq	%rbp
0000000000001c17	retq
0000000000001c18	nopl	(%rax,%rax)
__ZN13BaseContainer6enableEv:
0000000000001c20	pushq	%rbp
0000000000001c21	movq	%rsp, %rbp
0000000000001c24	subq	$0x10, %rsp
0000000000001c28	movq	%rdi, -0x8(%rbp)
0000000000001c2c	movq	-0x8(%rbp), %rdi
0000000000001c30	movq	0x8(%rdi), %rax
0000000000001c34	movq	0x10(%rdi), %rsi
0000000000001c38	movq	0x20(%rdi), %rdx
0000000000001c3c	movq	%rax, %rdi
0000000000001c3f	callq	__Z7writePMymPc ## writePM(unsigned long long, unsigned long, char*)
0000000000001c44	movl	%eax, -0xc(%rbp)
0000000000001c47	addq	$0x10, %rsp
0000000000001c4b	popq	%rbp
0000000000001c4c	retq
0000000000001c4d	nopl	(%rax)
__ZN13BaseContainer7disableEv:
0000000000001c50	pushq	%rbp
0000000000001c51	movq	%rsp, %rbp
0000000000001c54	subq	$0x10, %rsp
0000000000001c58	movq	%rdi, -0x8(%rbp)
0000000000001c5c	movq	-0x8(%rbp), %rdi
0000000000001c60	movq	0x8(%rdi), %rax
0000000000001c64	movq	0x10(%rdi), %rsi
0000000000001c68	movq	0x18(%rdi), %rdx
0000000000001c6c	movq	%rax, %rdi
0000000000001c6f	callq	__Z7writePMymPc ## writePM(unsigned long long, unsigned long, char*)
0000000000001c74	movl	%eax, -0xc(%rbp)
0000000000001c77	addq	$0x10, %rsp
0000000000001c7b	popq	%rbp
0000000000001c7c	retq
0000000000001c7d	nopl	(%rax)
__ZN12ModContainer6enableEv:
0000000000001c80	pushq	%rbp
0000000000001c81	movq	%rsp, %rbp
0000000000001c84	subq	$0x30, %rsp
0000000000001c88	movq	%rdi, -0x8(%rbp)
0000000000001c8c	movq	-0x8(%rbp), %rdi
0000000000001c90	movq	%rdi, -0x10(%rbp)
0000000000001c94	movq	-0x10(%rbp), %rdi
0000000000001c98	callq	0x2767e ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
0000000000001c9d	movq	%rax, -0x18(%rbp)
0000000000001ca1	movq	-0x10(%rbp), %rdi
0000000000001ca5	callq	0x27678 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
0000000000001caa	movq	%rax, -0x20(%rbp)
0000000000001cae	leaq	-0x18(%rbp), %rdi
0000000000001cb2	leaq	-0x20(%rbp), %rsi
0000000000001cb6	callq	0x27348 ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000001cbb	testb	$0x1, %al
0000000000001cbd	jne	0x1cc8
0000000000001cc3	jmp	0x1cf3
0000000000001cc8	leaq	-0x18(%rbp), %rdi
0000000000001ccc	callq	0x273a8 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000001cd1	movq	(%rax), %rax
0000000000001cd4	movq	%rax, -0x28(%rbp)
0000000000001cd8	movq	-0x28(%rbp), %rdi
0000000000001cdc	callq	__ZN13BaseContainer6enableEv ## BaseContainer::enable()
0000000000001ce1	leaq	-0x18(%rbp), %rdi
0000000000001ce5	callq	0x27318 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000001cea	movq	%rax, -0x30(%rbp)
0000000000001cee	jmp	0x1cae
0000000000001cf3	addq	$0x30, %rsp
0000000000001cf7	popq	%rbp
0000000000001cf8	retq
0000000000001cf9	nopl	(%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv:
0000000000001d00	pushq	%rbp
0000000000001d01	movq	%rsp, %rbp
0000000000001d04	subq	$0x20, %rsp
0000000000001d08	movq	%rdi, -0x10(%rbp)
0000000000001d0c	movq	-0x10(%rbp), %rdi
0000000000001d10	leaq	-0x8(%rbp), %rax
0000000000001d14	movq	%rdi, -0x18(%rbp)
0000000000001d18	movq	%rax, %rdi
0000000000001d1b	movq	-0x18(%rbp), %rsi
0000000000001d1f	callq	0x2730c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000001d24	movq	-0x8(%rbp), %rax
0000000000001d28	addq	$0x20, %rsp
0000000000001d2c	popq	%rbp
0000000000001d2d	retq
0000000000001d2e	nop
__ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
0000000000001d30	pushq	%rbp
0000000000001d31	movq	%rsp, %rbp
0000000000001d34	subq	$0x20, %rsp
0000000000001d38	movq	%rdi, -0x8(%rbp)
0000000000001d3c	movq	%rsi, -0x10(%rbp)
0000000000001d40	movq	-0x8(%rbp), %rdi
0000000000001d44	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000001d49	movq	(%rax), %rax
0000000000001d4c	movq	-0x10(%rbp), %rdi
0000000000001d50	movq	%rax, -0x18(%rbp)
0000000000001d54	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000001d59	movq	-0x18(%rbp), %rsi
0000000000001d5d	cmpq	(%rax), %rsi
0000000000001d60	setne	%cl
0000000000001d63	andb	$0x1, %cl
0000000000001d66	movzbl	%cl, %eax
0000000000001d69	addq	$0x20, %rsp
0000000000001d6d	popq	%rbp
0000000000001d6e	retq
0000000000001d6f	nop
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv:
0000000000001d70	pushq	%rbp
0000000000001d71	movq	%rsp, %rbp
0000000000001d74	movq	%rdi, -0x8(%rbp)
0000000000001d78	movq	-0x8(%rbp), %rdi
0000000000001d7c	movq	(%rdi), %rax
0000000000001d7f	addq	$0x8, %rax
0000000000001d83	movq	%rax, (%rdi)
0000000000001d86	movq	%rdi, %rax
0000000000001d89	popq	%rbp
0000000000001d8a	retq
0000000000001d8b	nopl	(%rax,%rax)
__ZN12ModContainer7disableEv:
0000000000001d90	pushq	%rbp
0000000000001d91	movq	%rsp, %rbp
0000000000001d94	subq	$0x30, %rsp
0000000000001d98	movq	%rdi, -0x8(%rbp)
0000000000001d9c	movq	-0x8(%rbp), %rdi
0000000000001da0	movq	%rdi, -0x10(%rbp)
0000000000001da4	movq	-0x10(%rbp), %rdi
0000000000001da8	callq	0x2767e ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
0000000000001dad	movq	%rax, -0x18(%rbp)
0000000000001db1	movq	-0x10(%rbp), %rdi
0000000000001db5	callq	0x27678 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
0000000000001dba	movq	%rax, -0x20(%rbp)
0000000000001dbe	leaq	-0x18(%rbp), %rdi
0000000000001dc2	leaq	-0x20(%rbp), %rsi
0000000000001dc6	callq	0x27348 ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000001dcb	testb	$0x1, %al
0000000000001dcd	jne	0x1dd8
0000000000001dd3	jmp	0x1e03
0000000000001dd8	leaq	-0x18(%rbp), %rdi
0000000000001ddc	callq	0x273a8 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000001de1	movq	(%rax), %rax
0000000000001de4	movq	%rax, -0x28(%rbp)
0000000000001de8	movq	-0x28(%rbp), %rdi
0000000000001dec	callq	__ZN13BaseContainer7disableEv ## BaseContainer::disable()
0000000000001df1	leaq	-0x18(%rbp), %rdi
0000000000001df5	callq	0x27318 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000001dfa	movq	%rax, -0x30(%rbp)
0000000000001dfe	jmp	0x1dbe
0000000000001e03	addq	$0x30, %rsp
0000000000001e07	popq	%rbp
0000000000001e08	retq
0000000000001e09	nopl	(%rax)
__ZN12ModContainerC2EPKc:
0000000000001e10	pushq	%rbp
0000000000001e11	movq	%rsp, %rbp
0000000000001e14	subq	$0x50, %rsp
0000000000001e18	movq	%rdi, -0x8(%rbp)
0000000000001e1c	movq	%rsi, -0x10(%rbp)
0000000000001e20	movq	-0x8(%rbp), %rsi
0000000000001e24	movq	%rsi, %rdi
0000000000001e27	leaq	-0x18(%rbp), %rax
0000000000001e2b	movq	%rdi, -0x38(%rbp)
0000000000001e2f	movq	%rax, %rdi
0000000000001e32	movq	%rsi, -0x40(%rbp)
0000000000001e36	movq	%rax, -0x48(%rbp)
0000000000001e3a	callq	0x274d4 ## symbol stub for: __ZNSaIP13BaseContainerEC1Ev
0000000000001e3f	movq	-0x40(%rbp), %rdi
0000000000001e43	movq	-0x48(%rbp), %rsi
0000000000001e47	callq	0x2768a ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EEC1ERKS2_
0000000000001e4c	jmp	0x1e51
0000000000001e51	leaq	-0x18(%rbp), %rdi
0000000000001e55	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000001e5a	movq	-0x10(%rbp), %rdi
0000000000001e5e	movq	-0x38(%rbp), %rax
0000000000001e62	movq	%rdi, 0x18(%rax)
0000000000001e66	movq	%rax, -0x30(%rbp)
0000000000001e6a	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000001e71	leaq	-0x30(%rbp), %rsi
0000000000001e75	callq	0x2765a ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE9push_backERKS1_
0000000000001e7a	jmp	0x1e7f
0000000000001e7f	addq	$0x50, %rsp
0000000000001e83	popq	%rbp
0000000000001e84	retq
0000000000001e85	movl	%edx, %ecx
0000000000001e87	movq	%rax, -0x20(%rbp)
0000000000001e8b	movl	%ecx, -0x24(%rbp)
0000000000001e8e	leaq	-0x18(%rbp), %rdi
0000000000001e92	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000001e97	jmp	0x1eae
0000000000001e9c	movl	%edx, %ecx
0000000000001e9e	movq	%rax, -0x20(%rbp)
0000000000001ea2	movl	%ecx, -0x24(%rbp)
0000000000001ea5	movq	-0x40(%rbp), %rdi
0000000000001ea9	callq	0x27696 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
0000000000001eae	movq	-0x20(%rbp), %rdi
0000000000001eb2	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000001eb7	ud2
0000000000001eb9	nopl	(%rax)
__ZNSaIP13BaseContainerEC1Ev:
0000000000001ec0	pushq	%rbp
0000000000001ec1	movq	%rsp, %rbp
0000000000001ec4	subq	$0x10, %rsp
0000000000001ec8	movq	%rdi, -0x8(%rbp)
0000000000001ecc	movq	-0x8(%rbp), %rdi
0000000000001ed0	callq	0x274e0 ## symbol stub for: __ZNSaIP13BaseContainerEC2Ev
0000000000001ed5	addq	$0x10, %rsp
0000000000001ed9	popq	%rbp
0000000000001eda	retq
0000000000001edb	nopl	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EEC1ERKS2_:
0000000000001ee0	pushq	%rbp
0000000000001ee1	movq	%rsp, %rbp
0000000000001ee4	subq	$0x10, %rsp
0000000000001ee8	movq	%rdi, -0x8(%rbp)
0000000000001eec	movq	%rsi, -0x10(%rbp)
0000000000001ef0	movq	-0x8(%rbp), %rdi
0000000000001ef4	movq	-0x10(%rbp), %rsi
0000000000001ef8	callq	0x27690 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EEC2ERKS2_
0000000000001efd	addq	$0x10, %rsp
0000000000001f01	popq	%rbp
0000000000001f02	retq
0000000000001f03	nopw	%cs:(%rax,%rax)
0000000000001f0d	nopl	(%rax)
__ZNSaIP13BaseContainerED1Ev:
0000000000001f10	pushq	%rbp
0000000000001f11	movq	%rsp, %rbp
0000000000001f14	subq	$0x10, %rsp
0000000000001f18	movq	%rdi, -0x8(%rbp)
0000000000001f1c	movq	-0x8(%rbp), %rdi
0000000000001f20	callq	0x274ec ## symbol stub for: __ZNSaIP13BaseContainerED2Ev
0000000000001f25	addq	$0x10, %rsp
0000000000001f29	popq	%rbp
0000000000001f2a	retq
0000000000001f2b	nopl	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EE9push_backERKS1_:
0000000000001f30	pushq	%rbp
0000000000001f31	movq	%rsp, %rbp
0000000000001f34	subq	$0x20, %rsp
0000000000001f38	movq	%rdi, -0x8(%rbp)
0000000000001f3c	movq	%rsi, -0x10(%rbp)
0000000000001f40	movq	-0x8(%rbp), %rsi
0000000000001f44	movq	0x8(%rsi), %rdi
0000000000001f48	cmpq	0x10(%rsi), %rdi
0000000000001f4c	movq	%rsi, -0x20(%rbp)
0000000000001f50	je	0x1f83
0000000000001f56	movq	-0x20(%rbp), %rax
0000000000001f5a	movq	-0x20(%rbp), %rcx
0000000000001f5e	movq	0x8(%rcx), %rsi
0000000000001f62	movq	-0x10(%rbp), %rdx
0000000000001f66	movq	%rax, %rdi
0000000000001f69	callq	0x27252 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
0000000000001f6e	movq	-0x20(%rbp), %rax
0000000000001f72	movq	0x8(%rax), %rcx
0000000000001f76	addq	$0x8, %rcx
0000000000001f7a	movq	%rcx, 0x8(%rax)
0000000000001f7e	jmp	0x1fa1
0000000000001f83	movq	-0x20(%rbp), %rdi
0000000000001f87	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000001f8c	movq	%rax, -0x18(%rbp)
0000000000001f90	movq	-0x10(%rbp), %rdx
0000000000001f94	movq	-0x18(%rbp), %rsi
0000000000001f98	movq	-0x20(%rbp), %rdi
0000000000001f9c	callq	0x27642 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
0000000000001fa1	addq	$0x20, %rsp
0000000000001fa5	popq	%rbp
0000000000001fa6	retq
0000000000001fa7	nopw	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev:
0000000000001fb0	pushq	%rbp
0000000000001fb1	movq	%rsp, %rbp
0000000000001fb4	subq	$0x10, %rsp
0000000000001fb8	movq	%rdi, -0x8(%rbp)
0000000000001fbc	movq	-0x8(%rbp), %rdi
0000000000001fc0	callq	0x2769c ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED2Ev
0000000000001fc5	addq	$0x10, %rsp
0000000000001fc9	popq	%rbp
0000000000001fca	retq
0000000000001fcb	nopl	(%rax,%rax)
__ZN12ModContainerC1EPKc:
0000000000001fd0	pushq	%rbp
0000000000001fd1	movq	%rsp, %rbp
0000000000001fd4	subq	$0x10, %rsp
0000000000001fd8	movq	%rdi, -0x8(%rbp)
0000000000001fdc	movq	%rsi, -0x10(%rbp)
0000000000001fe0	movq	-0x8(%rbp), %rdi
0000000000001fe4	movq	-0x10(%rbp), %rsi
0000000000001fe8	callq	__ZN12ModContainerC2EPKc ## ModContainer::ModContainer(char const*)
0000000000001fed	addq	$0x10, %rsp
0000000000001ff1	popq	%rbp
0000000000001ff2	retq
0000000000001ff3	nopw	%cs:(%rax,%rax)
0000000000001ffd	nopl	(%rax)
__ZN12ModContainerD2Ev:
0000000000002000	pushq	%rbp
0000000000002001	movq	%rsp, %rbp
0000000000002004	subq	$0x80, %rsp
000000000000200b	movq	%rdi, -0x8(%rbp)
000000000000200f	movq	-0x8(%rbp), %rdi
0000000000002013	movq	%rdi, -0x50(%rbp)
0000000000002017	callq	__ZN12ModContainer7disableEv ## ModContainer::disable()
000000000000201c	jmp	0x2021
0000000000002021	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000002028	callq	0x2764e ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv
000000000000202d	movq	%rax, -0x58(%rbp)
0000000000002031	jmp	0x2036
0000000000002036	movq	-0x58(%rbp), %rax
000000000000203a	movq	%rax, -0x28(%rbp)
000000000000203e	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
0000000000002045	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
000000000000204a	movq	%rax, -0x60(%rbp)
000000000000204e	jmp	0x2053
0000000000002053	movq	-0x60(%rbp), %rax
0000000000002057	movq	%rax, -0x30(%rbp)
000000000000205b	movq	-0x50(%rbp), %rcx
000000000000205f	movq	%rcx, -0x38(%rbp)
0000000000002063	movq	-0x28(%rbp), %rdi
0000000000002067	movq	-0x30(%rbp), %rsi
000000000000206b	leaq	-0x38(%rbp), %rdx
000000000000206f	callq	0x278d0 ## symbol stub for: __ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_
0000000000002074	movq	%rax, -0x68(%rbp)
0000000000002078	jmp	0x207d
000000000000207d	movq	-0x68(%rbp), %rax
0000000000002081	movq	%rax, -0x20(%rbp)
0000000000002085	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
000000000000208c	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000002091	movq	%rax, -0x70(%rbp)
0000000000002095	jmp	0x209a
000000000000209a	movq	-0x70(%rbp), %rax
000000000000209e	movq	%rax, -0x40(%rbp)
00000000000020a2	movq	-0x20(%rbp), %rsi
00000000000020a6	movq	-0x40(%rbp), %rdx
00000000000020aa	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
00000000000020b1	callq	0x27654 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_
00000000000020b6	movq	%rax, -0x78(%rbp)
00000000000020ba	jmp	0x20bf
00000000000020bf	movq	-0x78(%rbp), %rax
00000000000020c3	movq	%rax, -0x48(%rbp)
00000000000020c7	movq	-0x50(%rbp), %rdi
00000000000020cb	callq	0x27696 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
00000000000020d0	addq	$0x80, %rsp
00000000000020d7	popq	%rbp
00000000000020d8	retq
00000000000020d9	movl	%edx, %ecx
00000000000020db	movq	%rax, -0x10(%rbp)
00000000000020df	movl	%ecx, -0x14(%rbp)
00000000000020e2	movq	-0x50(%rbp), %rdi
00000000000020e6	callq	0x27696 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EED1Ev
00000000000020eb	movq	-0x10(%rbp), %rdi
00000000000020ef	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
00000000000020f4	nopw	%cs:(%rax,%rax)
00000000000020fe	nop
__ZNSt6vectorIP12ModContainerSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_:
0000000000002100	pushq	%rbp
0000000000002101	movq	%rsp, %rbp
0000000000002104	subq	$0x80, %rsp
000000000000210b	movq	%rsi, -0x10(%rbp)
000000000000210f	movq	%rdx, -0x18(%rbp)
0000000000002113	movq	%rdi, -0x20(%rbp)
0000000000002117	movq	-0x20(%rbp), %rdx
000000000000211b	movq	-0x18(%rbp), %rsi
000000000000211f	movq	%rsi, -0x30(%rbp)
0000000000002123	movq	%rdx, %rdi
0000000000002126	movq	%rdx, -0x70(%rbp)
000000000000212a	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
000000000000212f	movq	%rax, -0x38(%rbp)
0000000000002133	movq	-0x10(%rbp), %rax
0000000000002137	movq	%rax, -0x40(%rbp)
000000000000213b	movq	-0x30(%rbp), %rdi
000000000000213f	movq	-0x38(%rbp), %rsi
0000000000002143	movq	-0x40(%rbp), %rdx
0000000000002147	callq	0x278a6 ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
000000000000214c	movq	%rax, -0x28(%rbp)
0000000000002150	movq	-0x28(%rbp), %rax
0000000000002154	movq	%rax, -0x48(%rbp)
0000000000002158	movq	-0x70(%rbp), %rdi
000000000000215c	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000002161	movq	%rax, -0x50(%rbp)
0000000000002165	leaq	-0x58(%rbp), %rax
0000000000002169	movq	%rax, %rdi
000000000000216c	movq	-0x70(%rbp), %rsi
0000000000002170	movq	%rax, -0x78(%rbp)
0000000000002174	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002179	movq	-0x48(%rbp), %rdi
000000000000217d	movq	-0x50(%rbp), %rsi
0000000000002181	movq	-0x78(%rbp), %rdx
0000000000002185	callq	0x278d6 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
000000000000218a	jmp	0x218f
000000000000218f	leaq	-0x58(%rbp), %rdi
0000000000002193	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002198	movq	-0x70(%rbp), %rdi
000000000000219c	movq	0x8(%rdi), %rax
00000000000021a0	leaq	-0x18(%rbp), %rdi
00000000000021a4	leaq	-0x10(%rbp), %rsi
00000000000021a8	movq	%rax, -0x80(%rbp)
00000000000021ac	callq	0x27330 ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
00000000000021b1	xorl	%ecx, %ecx
00000000000021b3	movl	%ecx, %esi
00000000000021b5	subq	%rax, %rsi
00000000000021b8	shlq	$0x3, %rsi
00000000000021bc	movq	-0x80(%rbp), %rax
00000000000021c0	addq	%rsi, %rax
00000000000021c3	movq	-0x70(%rbp), %rsi
00000000000021c7	movq	%rax, 0x8(%rsi)
00000000000021cb	movq	-0x10(%rbp), %rax
00000000000021cf	movq	%rax, -0x8(%rbp)
00000000000021d3	movq	-0x8(%rbp), %rax
00000000000021d7	addq	$0x80, %rsp
00000000000021de	popq	%rbp
00000000000021df	retq
00000000000021e0	movl	%edx, %ecx
00000000000021e2	movq	%rax, -0x60(%rbp)
00000000000021e6	movl	%ecx, -0x64(%rbp)
00000000000021e9	leaq	-0x58(%rbp), %rdi
00000000000021ed	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000021f2	movq	-0x60(%rbp), %rdi
00000000000021f6	callq	0x271b0 ## symbol stub for: __Unwind_Resume
00000000000021fb	ud2
00000000000021fd	nopl	(%rax)
__ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_:
0000000000002200	pushq	%rbp
0000000000002201	movq	%rsp, %rbp
0000000000002204	subq	$0x60, %rsp
0000000000002208	movq	%rdi, -0x10(%rbp)
000000000000220c	movq	%rsi, -0x18(%rbp)
0000000000002210	movq	%rdx, -0x20(%rbp)
0000000000002214	movq	-0x10(%rbp), %rdx
0000000000002218	movq	%rdx, -0x30(%rbp)
000000000000221c	movq	-0x18(%rbp), %rdx
0000000000002220	movq	%rdx, -0x38(%rbp)
0000000000002224	movq	-0x20(%rbp), %rdx
0000000000002228	movq	-0x30(%rbp), %rdi
000000000000222c	movq	-0x38(%rbp), %rsi
0000000000002230	callq	0x278b8 ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_
0000000000002235	movq	%rax, -0x28(%rbp)
0000000000002239	movq	-0x28(%rbp), %rax
000000000000223d	movq	%rax, -0x10(%rbp)
0000000000002241	movq	-0x10(%rbp), %rax
0000000000002245	movq	%rax, -0x40(%rbp)
0000000000002249	leaq	-0x10(%rbp), %rdi
000000000000224d	leaq	-0x18(%rbp), %rsi
0000000000002251	callq	0x27324 ## symbol stub for: __ZN9__gnu_cxxeqIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000002256	testb	$0x1, %al
0000000000002258	jne	0x2263
000000000000225e	jmp	0x2270
0000000000002263	movq	-0x10(%rbp), %rax
0000000000002267	movq	%rax, -0x8(%rbp)
000000000000226b	jmp	0x22a9
0000000000002270	leaq	-0x40(%rbp), %rdi
0000000000002274	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000002279	movq	(%rax), %rax
000000000000227c	movq	%rax, -0x48(%rbp)
0000000000002280	movq	-0x18(%rbp), %rax
0000000000002284	movq	%rax, -0x50(%rbp)
0000000000002288	movq	-0x10(%rbp), %rax
000000000000228c	movq	%rax, -0x58(%rbp)
0000000000002290	movq	-0x20(%rbp), %rcx
0000000000002294	movq	-0x48(%rbp), %rdi
0000000000002298	movq	-0x50(%rbp), %rsi
000000000000229c	movq	-0x58(%rbp), %rdx
00000000000022a0	callq	0x277ec ## symbol stub for: __ZSt11remove_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_RKT1_
00000000000022a5	movq	%rax, -0x8(%rbp)
00000000000022a9	movq	-0x8(%rbp), %rax
00000000000022ad	addq	$0x60, %rsp
00000000000022b1	popq	%rbp
00000000000022b2	retq
00000000000022b3	nopw	%cs:(%rax,%rax)
00000000000022bd	nopl	(%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv:
00000000000022c0	pushq	%rbp
00000000000022c1	movq	%rsp, %rbp
00000000000022c4	subq	$0x20, %rsp
00000000000022c8	movq	%rdi, -0x10(%rbp)
00000000000022cc	movq	-0x10(%rbp), %rdi
00000000000022d0	leaq	-0x8(%rbp), %rax
00000000000022d4	movq	%rdi, -0x18(%rbp)
00000000000022d8	movq	%rax, %rdi
00000000000022db	movq	-0x18(%rbp), %rsi
00000000000022df	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
00000000000022e4	movq	-0x8(%rbp), %rax
00000000000022e8	addq	$0x20, %rsp
00000000000022ec	popq	%rbp
00000000000022ed	retq
00000000000022ee	nop
__ZNSt6vectorIP12ModContainerSaIS1_EE3endEv:
00000000000022f0	pushq	%rbp
00000000000022f1	movq	%rsp, %rbp
00000000000022f4	subq	$0x20, %rsp
00000000000022f8	movq	%rdi, -0x10(%rbp)
00000000000022fc	movq	-0x10(%rbp), %rdi
0000000000002300	addq	$0x8, %rdi
0000000000002304	leaq	-0x8(%rbp), %rax
0000000000002308	movq	%rdi, -0x18(%rbp)
000000000000230c	movq	%rax, %rdi
000000000000230f	movq	-0x18(%rbp), %rsi
0000000000002313	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002318	movq	-0x8(%rbp), %rax
000000000000231c	addq	$0x20, %rsp
0000000000002320	popq	%rbp
0000000000002321	retq
0000000000002322	nopw	%cs:(%rax,%rax)
000000000000232c	nopl	(%rax)
__ZN12ModContainerD1Ev:
0000000000002330	pushq	%rbp
0000000000002331	movq	%rsp, %rbp
0000000000002334	subq	$0x10, %rsp
0000000000002338	movq	%rdi, -0x8(%rbp)
000000000000233c	movq	-0x8(%rbp), %rdi
0000000000002340	callq	__ZN12ModContainerD2Ev ## ModContainer::~ModContainer()
0000000000002345	addq	$0x10, %rsp
0000000000002349	popq	%rbp
000000000000234a	retq
000000000000234b	nopl	(%rax,%rax)
__ZN12ModContainer7getNameEv:
0000000000002350	pushq	%rbp
0000000000002351	movq	%rsp, %rbp
0000000000002354	movq	%rdi, -0x8(%rbp)
0000000000002358	movq	-0x8(%rbp), %rdi
000000000000235c	movq	0x18(%rdi), %rax
0000000000002360	popq	%rbp
0000000000002361	retq
0000000000002362	nopw	%cs:(%rax,%rax)
000000000000236c	nopl	(%rax)
__ZN12ModContainer13registerWriteElmPc:
0000000000002370	pushq	%rbp
0000000000002371	movq	%rsp, %rbp
0000000000002374	subq	$0x60, %rsp
0000000000002378	movq	%rdi, -0x8(%rbp)
000000000000237c	movq	%rsi, -0x10(%rbp)
0000000000002380	movq	%rdx, -0x18(%rbp)
0000000000002384	movq	%rcx, -0x20(%rbp)
0000000000002388	movq	-0x8(%rbp), %rdi
000000000000238c	movl	$0x28, %ecx
0000000000002391	movq	%rdi, -0x48(%rbp)
0000000000002395	movq	%rcx, %rdi
0000000000002398	callq	0x27924 ## symbol stub for: __Znwm
000000000000239d	movq	%rax, %rcx
00000000000023a0	movq	%rax, %rdx
00000000000023a3	movq	-0x10(%rbp), %rsi
00000000000023a7	movq	-0x18(%rbp), %rdi
00000000000023ab	movq	-0x20(%rbp), %r8
00000000000023af	movq	%rdi, -0x50(%rbp)
00000000000023b3	movq	%rax, %rdi
00000000000023b6	movq	-0x50(%rbp), %rax
00000000000023ba	movq	%rdx, -0x58(%rbp)
00000000000023be	movq	%rax, %rdx
00000000000023c1	movq	%rcx, -0x60(%rbp)
00000000000023c5	movq	%r8, %rcx
00000000000023c8	callq	__ZN15MemoryContainerC1ElmPc ## MemoryContainer::MemoryContainer(long, unsigned long, char*)
00000000000023cd	jmp	0x23d2
00000000000023d2	movq	-0x58(%rbp), %rax
00000000000023d6	movq	%rax, -0x28(%rbp)
00000000000023da	movq	-0x28(%rbp), %rcx
00000000000023de	movq	%rcx, -0x40(%rbp)
00000000000023e2	movq	-0x48(%rbp), %rdi
00000000000023e6	leaq	-0x40(%rbp), %rsi
00000000000023ea	callq	0x27684 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
00000000000023ef	addq	$0x60, %rsp
00000000000023f3	popq	%rbp
00000000000023f4	retq
00000000000023f5	movl	%edx, %ecx
00000000000023f7	movq	%rax, -0x30(%rbp)
00000000000023fb	movl	%ecx, -0x34(%rbp)
00000000000023fe	movq	-0x60(%rbp), %rdi
0000000000002402	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000002407	movq	-0x30(%rbp), %rdi
000000000000240b	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000002410	ud2
0000000000002412	nopw	%cs:(%rax,%rax)
000000000000241c	nopl	(%rax)
__ZN12ModContainer11getOriginalEl:
0000000000002420	pushq	%rbp
0000000000002421	movq	%rsp, %rbp
0000000000002424	subq	$0x60, %rsp
0000000000002428	movq	%rdi, -0x8(%rbp)
000000000000242c	movq	%rsi, -0x10(%rbp)
0000000000002430	movq	-0x8(%rbp), %rsi
0000000000002434	movq	%rsi, -0x18(%rbp)
0000000000002438	movq	-0x18(%rbp), %rdi
000000000000243c	callq	0x2767e ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE5beginEv
0000000000002441	movq	%rax, -0x20(%rbp)
0000000000002445	movq	-0x18(%rbp), %rdi
0000000000002449	callq	0x27678 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
000000000000244e	movq	%rax, -0x28(%rbp)
0000000000002452	leaq	-0x20(%rbp), %rdi
0000000000002456	leaq	-0x28(%rbp), %rsi
000000000000245a	callq	0x27348 ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
000000000000245f	testb	$0x1, %al
0000000000002461	jne	0x246c
0000000000002467	jmp	0x2508
000000000000246c	leaq	-0x20(%rbp), %rdi
0000000000002470	callq	0x273a8 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000002475	movq	(%rax), %rax
0000000000002478	movq	%rax, -0x30(%rbp)
000000000000247c	movq	-0x30(%rbp), %rax
0000000000002480	movq	0x8(%rax), %rax
0000000000002484	cmpq	-0x10(%rbp), %rax
0000000000002488	jne	0x24f1
000000000000248e	movq	-0x30(%rbp), %rax
0000000000002492	cmpq	$0x0, %rax
0000000000002496	movq	%rax, -0x38(%rbp)
000000000000249a	je	0x24d2
00000000000024a0	leaq	__ZTI13BaseContainer(%rip), %rax ## typeinfo for BaseContainer
00000000000024a7	leaq	__ZTI13HookContainer(%rip), %rcx ## typeinfo for HookContainer
00000000000024ae	xorl	%edx, %edx
00000000000024b0	movl	%edx, %esi
00000000000024b2	movq	-0x38(%rbp), %rdi
00000000000024b6	movq	%rsi, -0x40(%rbp)
00000000000024ba	movq	%rax, %rsi
00000000000024bd	movq	%rcx, %rdx
00000000000024c0	movq	-0x40(%rbp), %rcx
00000000000024c4	callq	0x27966 ## symbol stub for: ___dynamic_cast
00000000000024c9	movq	%rax, -0x48(%rbp)
00000000000024cd	jmp	0x24df
00000000000024d2	xorl	%eax, %eax
00000000000024d4	movl	%eax, %ecx
00000000000024d6	movq	%rcx, -0x48(%rbp)
00000000000024da	jmp	0x24df
00000000000024df	movq	-0x48(%rbp), %rax
00000000000024e3	movq	%rax, %rdi
00000000000024e6	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
00000000000024eb	addq	$0x60, %rsp
00000000000024ef	popq	%rbp
00000000000024f0	retq
00000000000024f1	jmp	0x24f6
00000000000024f6	leaq	-0x20(%rbp), %rdi
00000000000024fa	callq	0x27318 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
00000000000024ff	movq	%rax, -0x50(%rbp)
0000000000002503	jmp	0x2452
0000000000002508	movl	$0x8, %edi
000000000000250d	callq	0x27936 ## symbol stub for: ___cxa_allocate_exception
0000000000002512	movq	$0x0, (%rax)
0000000000002519	movq	%rax, %rdi
000000000000251c	movq	%rax, -0x58(%rbp)
0000000000002520	callq	0x27216 ## symbol stub for: __ZN25OriginalNotFoundExceptionC1Ev
0000000000002525	movq	0x6fb0c(%rip), %rsi ## literal pool symbol address: __ZTI25OriginalNotFoundException
000000000000252c	movq	0x6fad5(%rip), %rdx ## literal pool symbol address: __ZN25OriginalNotFoundExceptionD1Ev
0000000000002533	movq	-0x58(%rbp), %rdi
0000000000002537	callq	0x27960 ## symbol stub for: ___cxa_throw
000000000000253c	nopl	(%rax)
__ZN25OriginalNotFoundExceptionC1Ev:
0000000000002540	pushq	%rbp
0000000000002541	movq	%rsp, %rbp
0000000000002544	subq	$0x10, %rsp
0000000000002548	movq	%rdi, -0x8(%rbp)
000000000000254c	movq	-0x8(%rbp), %rdi
0000000000002550	callq	0x2721c ## symbol stub for: __ZN25OriginalNotFoundExceptionC2Ev
0000000000002555	addq	$0x10, %rsp
0000000000002559	popq	%rbp
000000000000255a	retq
000000000000255b	nopl	(%rax,%rax)
__ZN25OriginalNotFoundExceptionD1Ev:
0000000000002560	pushq	%rbp
0000000000002561	movq	%rsp, %rbp
0000000000002564	subq	$0x10, %rsp
0000000000002568	movq	%rdi, -0x8(%rbp)
000000000000256c	movq	-0x8(%rbp), %rdi
0000000000002570	callq	0x27228 ## symbol stub for: __ZN25OriginalNotFoundExceptionD2Ev
0000000000002575	addq	$0x10, %rsp
0000000000002579	popq	%rbp
000000000000257a	retq
000000000000257b	nopl	(%rax,%rax)
__Z7getBasev:
0000000000002580	pushq	%rbp
0000000000002581	movq	%rsp, %rbp
0000000000002584	xorl	%edi, %edi
0000000000002586	callq	0x27984 ## symbol stub for: __dyld_get_image_vmaddr_slide
000000000000258b	movabsq	$0x100000000, %rcx
0000000000002595	addq	%rcx, %rax
0000000000002598	popq	%rbp
0000000000002599	retq
000000000000259a	nopw	(%rax,%rax)
__ZN25OriginalNotFoundExceptionC2Ev:
00000000000025a0	pushq	%rbp
00000000000025a1	movq	%rsp, %rbp
00000000000025a4	subq	$0x10, %rsp
00000000000025a8	movq	%rdi, -0x8(%rbp)
00000000000025ac	movq	-0x8(%rbp), %rdi
00000000000025b0	movq	%rdi, %rax
00000000000025b3	movq	%rdi, -0x10(%rbp)
00000000000025b7	movq	%rax, %rdi
00000000000025ba	callq	0x277ce ## symbol stub for: __ZNSt9exceptionC2Ev
00000000000025bf	movq	0x6fa82(%rip), %rax ## literal pool symbol address: __ZTV25OriginalNotFoundException
00000000000025c6	addq	$0x10, %rax
00000000000025ca	movq	-0x10(%rbp), %rdi
00000000000025ce	movq	%rax, (%rdi)
00000000000025d1	addq	$0x10, %rsp
00000000000025d5	popq	%rbp
00000000000025d6	retq
00000000000025d7	nopw	(%rax,%rax)
__ZNSt9exceptionC2Ev:
00000000000025e0	pushq	%rbp
00000000000025e1	movq	%rsp, %rbp
00000000000025e4	movq	0x6fa75(%rip), %rax ## literal pool symbol address: __ZTVSt9exception
00000000000025eb	addq	$0x10, %rax
00000000000025ef	movq	%rdi, -0x8(%rbp)
00000000000025f3	movq	-0x8(%rbp), %rdi
00000000000025f7	movq	%rax, (%rdi)
00000000000025fa	popq	%rbp
00000000000025fb	retq
00000000000025fc	nopl	(%rax)
__ZN25OriginalNotFoundExceptionD0Ev:
0000000000002600	pushq	%rbp
0000000000002601	movq	%rsp, %rbp
0000000000002604	subq	$0x10, %rsp
0000000000002608	movq	%rdi, -0x8(%rbp)
000000000000260c	movq	-0x8(%rbp), %rdi
0000000000002610	movq	%rdi, -0x10(%rbp)
0000000000002614	callq	0x27222 ## symbol stub for: __ZN25OriginalNotFoundExceptionD1Ev
0000000000002619	movq	-0x10(%rbp), %rdi
000000000000261d	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000002622	addq	$0x10, %rsp
0000000000002626	popq	%rbp
0000000000002627	retq
0000000000002628	nopl	(%rax,%rax)
__ZNK25OriginalNotFoundException4whatEv:
0000000000002630	pushq	%rbp
0000000000002631	movq	%rsp, %rbp
0000000000002634	movq	%rdi, -0x8(%rbp)
0000000000002638	leaq	0x669cf(%rip), %rax ## literal pool for: "Cannot find the original address of this function"
000000000000263f	popq	%rbp
0000000000002640	retq
0000000000002641	nopw	%cs:(%rax,%rax)
000000000000264b	nopl	(%rax,%rax)
__ZN25OriginalNotFoundExceptionD2Ev:
0000000000002650	pushq	%rbp
0000000000002651	movq	%rsp, %rbp
0000000000002654	subq	$0x10, %rsp
0000000000002658	movq	%rdi, -0x8(%rbp)
000000000000265c	movq	-0x8(%rbp), %rdi
0000000000002660	callq	0x277d4 ## symbol stub for: __ZNSt9exceptionD2Ev
0000000000002665	addq	$0x10, %rsp
0000000000002669	popq	%rbp
000000000000266a	retq
000000000000266b	nopl	(%rax,%rax)
__ZNSaIP12ModContainerEC2Ev:
0000000000002670	pushq	%rbp
0000000000002671	movq	%rsp, %rbp
0000000000002674	subq	$0x10, %rsp
0000000000002678	movq	%rdi, -0x8(%rbp)
000000000000267c	movq	-0x8(%rbp), %rdi
0000000000002680	callq	0x2725e ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2Ev
0000000000002685	addq	$0x10, %rsp
0000000000002689	popq	%rbp
000000000000268a	retq
000000000000268b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2Ev:
0000000000002690	pushq	%rbp
0000000000002691	movq	%rsp, %rbp
0000000000002694	movq	%rdi, -0x8(%rbp)
0000000000002698	popq	%rbp
0000000000002699	retq
000000000000269a	nopw	(%rax,%rax)
__ZNSaIP12ModContainerED2Ev:
00000000000026a0	pushq	%rbp
00000000000026a1	movq	%rsp, %rbp
00000000000026a4	subq	$0x10, %rsp
00000000000026a8	movq	%rdi, -0x8(%rbp)
00000000000026ac	movq	-0x8(%rbp), %rdi
00000000000026b0	callq	0x27264 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerED2Ev
00000000000026b5	addq	$0x10, %rsp
00000000000026b9	popq	%rbp
00000000000026ba	retq
00000000000026bb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerED2Ev:
00000000000026c0	pushq	%rbp
00000000000026c1	movq	%rsp, %rbp
00000000000026c4	movq	%rdi, -0x8(%rbp)
00000000000026c8	popq	%rbp
00000000000026c9	retq
00000000000026ca	nopw	(%rax,%rax)
__ZNSt6vectorIP12ModContainerSaIS1_EEC2ERKS2_:
00000000000026d0	pushq	%rbp
00000000000026d1	movq	%rsp, %rbp
00000000000026d4	subq	$0x20, %rsp
00000000000026d8	movq	%rdi, -0x8(%rbp)
00000000000026dc	movq	%rsi, -0x10(%rbp)
00000000000026e0	movq	-0x8(%rbp), %rsi
00000000000026e4	movq	-0x10(%rbp), %rdi
00000000000026e8	movq	%rdi, -0x18(%rbp)
00000000000026ec	movq	%rsi, %rdi
00000000000026ef	movq	-0x18(%rbp), %rsi
00000000000026f3	callq	0x27540 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EEC2ERKS2_
00000000000026f8	addq	$0x20, %rsp
00000000000026fc	popq	%rbp
00000000000026fd	retq
00000000000026fe	nop
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EEC2ERKS2_:
0000000000002700	pushq	%rbp
0000000000002701	movq	%rsp, %rbp
0000000000002704	subq	$0x10, %rsp
0000000000002708	movq	%rdi, -0x8(%rbp)
000000000000270c	movq	%rsi, -0x10(%rbp)
0000000000002710	movq	-0x8(%rbp), %rdi
0000000000002714	movq	-0x10(%rbp), %rsi
0000000000002718	callq	0x27522 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC1ERKS2_
000000000000271d	addq	$0x10, %rsp
0000000000002721	popq	%rbp
0000000000002722	retq
0000000000002723	nopw	%cs:(%rax,%rax)
000000000000272d	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC1ERKS2_:
0000000000002730	pushq	%rbp
0000000000002731	movq	%rsp, %rbp
0000000000002734	subq	$0x10, %rsp
0000000000002738	movq	%rdi, -0x8(%rbp)
000000000000273c	movq	%rsi, -0x10(%rbp)
0000000000002740	movq	-0x8(%rbp), %rdi
0000000000002744	movq	-0x10(%rbp), %rsi
0000000000002748	callq	0x27528 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC2ERKS2_
000000000000274d	addq	$0x10, %rsp
0000000000002751	popq	%rbp
0000000000002752	retq
0000000000002753	nopw	%cs:(%rax,%rax)
000000000000275d	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implC2ERKS2_:
0000000000002760	pushq	%rbp
0000000000002761	movq	%rsp, %rbp
0000000000002764	subq	$0x20, %rsp
0000000000002768	movq	%rdi, -0x8(%rbp)
000000000000276c	movq	%rsi, -0x10(%rbp)
0000000000002770	movq	-0x8(%rbp), %rsi
0000000000002774	movq	%rsi, %rdi
0000000000002777	movq	-0x10(%rbp), %rax
000000000000277b	movq	%rsi, -0x18(%rbp)
000000000000277f	movq	%rax, %rsi
0000000000002782	callq	0x274b6 ## symbol stub for: __ZNSaIP12ModContainerEC2ERKS1_
0000000000002787	movq	-0x18(%rbp), %rax
000000000000278b	movq	$0x0, (%rax)
0000000000002792	movq	$0x0, 0x8(%rax)
000000000000279a	movq	$0x0, 0x10(%rax)
00000000000027a2	addq	$0x20, %rsp
00000000000027a6	popq	%rbp
00000000000027a7	retq
00000000000027a8	nopl	(%rax,%rax)
__ZNSaIP12ModContainerEC2ERKS1_:
00000000000027b0	pushq	%rbp
00000000000027b1	movq	%rsp, %rbp
00000000000027b4	subq	$0x20, %rsp
00000000000027b8	movq	%rdi, -0x8(%rbp)
00000000000027bc	movq	%rsi, -0x10(%rbp)
00000000000027c0	movq	-0x8(%rbp), %rsi
00000000000027c4	movq	-0x10(%rbp), %rdi
00000000000027c8	movq	%rdi, -0x18(%rbp)
00000000000027cc	movq	%rsi, %rdi
00000000000027cf	movq	-0x18(%rbp), %rsi
00000000000027d3	callq	0x27258 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2ERKS3_
00000000000027d8	addq	$0x20, %rsp
00000000000027dc	popq	%rbp
00000000000027dd	retq
00000000000027de	nop
__ZN9__gnu_cxx13new_allocatorIP12ModContainerEC2ERKS3_:
00000000000027e0	pushq	%rbp
00000000000027e1	movq	%rsp, %rbp
00000000000027e4	movq	%rdi, -0x8(%rbp)
00000000000027e8	movq	%rsi, -0x10(%rbp)
00000000000027ec	popq	%rbp
00000000000027ed	retq
00000000000027ee	nop
__ZNSt6vectorIP12ModContainerSaIS1_EED2Ev:
00000000000027f0	pushq	%rbp
00000000000027f1	movq	%rsp, %rbp
00000000000027f4	subq	$0x40, %rsp
00000000000027f8	movq	%rdi, -0x8(%rbp)
00000000000027fc	movq	-0x8(%rbp), %rdi
0000000000002800	movq	(%rdi), %rax
0000000000002803	movq	0x8(%rdi), %rsi
0000000000002807	leaq	-0x10(%rbp), %rcx
000000000000280b	movq	%rdi, -0x28(%rbp)
000000000000280f	movq	%rcx, %rdi
0000000000002812	movq	-0x28(%rbp), %rcx
0000000000002816	movq	%rsi, -0x30(%rbp)
000000000000281a	movq	%rcx, %rsi
000000000000281d	movq	%rax, -0x38(%rbp)
0000000000002821	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000002826	jmp	0x282b
000000000000282b	leaq	-0x10(%rbp), %rdx
000000000000282f	movq	-0x38(%rbp), %rdi
0000000000002833	movq	-0x30(%rbp), %rsi
0000000000002837	callq	0x278dc ## symbol stub for: __ZSt8_DestroyIPP12ModContainerSaIS1_EEvT_S4_T0_
000000000000283c	jmp	0x2841
0000000000002841	leaq	-0x10(%rbp), %rdi
0000000000002845	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
000000000000284a	movq	-0x28(%rbp), %rdi
000000000000284e	callq	0x27546 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev
0000000000002853	addq	$0x40, %rsp
0000000000002857	popq	%rbp
0000000000002858	retq
0000000000002859	movl	%edx, %ecx
000000000000285b	movq	%rax, -0x18(%rbp)
000000000000285f	movl	%ecx, -0x1c(%rbp)
0000000000002862	jmp	0x2879
0000000000002867	movl	%edx, %ecx
0000000000002869	movq	%rax, -0x18(%rbp)
000000000000286d	movl	%ecx, -0x1c(%rbp)
0000000000002870	leaq	-0x10(%rbp), %rdi
0000000000002874	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000002879	movq	-0x28(%rbp), %rax
000000000000287d	movq	%rax, %rdi
0000000000002880	callq	0x27546 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev
0000000000002885	movq	-0x18(%rbp), %rdi
0000000000002889	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
000000000000288e	nop
__ZSt8_DestroyIPP12ModContainerSaIS1_EEvT_S4_T0_:
0000000000002890	pushq	%rbp
0000000000002891	movq	%rsp, %rbp
0000000000002894	subq	$0x20, %rsp
0000000000002898	movq	%rdi, -0x8(%rbp)
000000000000289c	movq	%rsi, -0x10(%rbp)
00000000000028a0	movq	%rdx, -0x18(%rbp)
00000000000028a4	movq	-0x8(%rbp), %rax
00000000000028a8	cmpq	-0x10(%rbp), %rax
00000000000028ac	je	0x28d3
00000000000028b2	movq	-0x18(%rbp), %rax
00000000000028b6	movq	-0x8(%rbp), %rsi
00000000000028ba	movq	%rax, %rdi
00000000000028bd	callq	0x27246 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_
00000000000028c2	movq	-0x8(%rbp), %rax
00000000000028c6	addq	$0x8, %rax
00000000000028ca	movq	%rax, -0x8(%rbp)
00000000000028ce	jmp	0x28a4
00000000000028d3	addq	$0x20, %rsp
00000000000028d7	popq	%rbp
00000000000028d8	retq
00000000000028d9	nopl	(%rax)
__ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv:
00000000000028e0	pushq	%rbp
00000000000028e1	movq	%rsp, %rbp
00000000000028e4	subq	$0x10, %rsp
00000000000028e8	movq	%rdi, %rax
00000000000028eb	movq	%rsi, -0x8(%rbp)
00000000000028ef	movq	-0x8(%rbp), %rsi
00000000000028f3	movq	%rax, -0x10(%rbp)
00000000000028f7	callq	0x274aa ## symbol stub for: __ZNSaIP12ModContainerEC1ERKS1_
00000000000028fc	movq	-0x10(%rbp), %rax
0000000000002900	addq	$0x10, %rsp
0000000000002904	popq	%rbp
0000000000002905	retq
0000000000002906	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EED2Ev:
0000000000002910	pushq	%rbp
0000000000002911	movq	%rsp, %rbp
0000000000002914	subq	$0x20, %rsp
0000000000002918	movq	%rdi, -0x8(%rbp)
000000000000291c	movq	-0x8(%rbp), %rdi
0000000000002920	movq	(%rdi), %rax
0000000000002923	movq	0x10(%rdi), %rcx
0000000000002927	subq	%rax, %rcx
000000000000292a	sarq	$0x3, %rcx
000000000000292e	movq	%rdi, -0x20(%rbp)
0000000000002932	movq	%rax, %rsi
0000000000002935	movq	%rcx, %rdx
0000000000002938	callq	0x2753a ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
000000000000293d	jmp	0x2942
0000000000002942	movq	-0x20(%rbp), %rdi
0000000000002946	callq	0x2752e ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev
000000000000294b	addq	$0x20, %rsp
000000000000294f	popq	%rbp
0000000000002950	retq
0000000000002951	movl	%edx, %ecx
0000000000002953	movq	%rax, -0x10(%rbp)
0000000000002957	movl	%ecx, -0x14(%rbp)
000000000000295a	movq	-0x20(%rbp), %rdi
000000000000295e	callq	0x2752e ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev
0000000000002963	movq	-0x10(%rbp), %rdi
0000000000002967	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
000000000000296c	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_:
0000000000002970	pushq	%rbp
0000000000002971	movq	%rsp, %rbp
0000000000002974	movq	%rdi, -0x8(%rbp)
0000000000002978	movq	%rsi, -0x10(%rbp)
000000000000297c	popq	%rbp
000000000000297d	retq
000000000000297e	nop
__ZNSaIP12ModContainerEC1ERKS1_:
0000000000002980	pushq	%rbp
0000000000002981	movq	%rsp, %rbp
0000000000002984	subq	$0x10, %rsp
0000000000002988	movq	%rdi, -0x8(%rbp)
000000000000298c	movq	%rsi, -0x10(%rbp)
0000000000002990	movq	-0x8(%rbp), %rdi
0000000000002994	movq	-0x10(%rbp), %rsi
0000000000002998	callq	0x274b6 ## symbol stub for: __ZNSaIP12ModContainerEC2ERKS1_
000000000000299d	addq	$0x10, %rsp
00000000000029a1	popq	%rbp
00000000000029a2	retq
00000000000029a3	nopw	%cs:(%rax,%rax)
00000000000029ad	nopl	(%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m:
00000000000029b0	pushq	%rbp
00000000000029b1	movq	%rsp, %rbp
00000000000029b4	subq	$0x20, %rsp
00000000000029b8	movq	%rdi, -0x8(%rbp)
00000000000029bc	movq	%rsi, -0x10(%rbp)
00000000000029c0	movq	%rdx, -0x18(%rbp)
00000000000029c4	movq	-0x8(%rbp), %rdx
00000000000029c8	cmpq	$0x0, -0x10(%rbp)
00000000000029cd	movq	%rdx, -0x20(%rbp)
00000000000029d1	je	0x29eb
00000000000029d7	movq	-0x20(%rbp), %rax
00000000000029db	movq	-0x10(%rbp), %rsi
00000000000029df	movq	-0x18(%rbp), %rdx
00000000000029e3	movq	%rax, %rdi
00000000000029e6	callq	0x27240 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE10deallocateEPS2_m
00000000000029eb	addq	$0x20, %rsp
00000000000029ef	popq	%rbp
00000000000029f0	retq
00000000000029f1	nopw	%cs:(%rax,%rax)
00000000000029fb	nopl	(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD1Ev:
0000000000002a00	pushq	%rbp
0000000000002a01	movq	%rsp, %rbp
0000000000002a04	subq	$0x10, %rsp
0000000000002a08	movq	%rdi, -0x8(%rbp)
0000000000002a0c	movq	-0x8(%rbp), %rdi
0000000000002a10	callq	0x27534 ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD2Ev
0000000000002a15	addq	$0x10, %rsp
0000000000002a19	popq	%rbp
0000000000002a1a	retq
0000000000002a1b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE10deallocateEPS2_m:
0000000000002a20	pushq	%rbp
0000000000002a21	movq	%rsp, %rbp
0000000000002a24	subq	$0x20, %rsp
0000000000002a28	movq	%rdi, -0x8(%rbp)
0000000000002a2c	movq	%rsi, -0x10(%rbp)
0000000000002a30	movq	%rdx, -0x18(%rbp)
0000000000002a34	movq	-0x10(%rbp), %rdx
0000000000002a38	movq	%rdx, %rdi
0000000000002a3b	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000002a40	addq	$0x20, %rsp
0000000000002a44	popq	%rbp
0000000000002a45	retq
0000000000002a46	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE12_Vector_implD2Ev:
0000000000002a50	pushq	%rbp
0000000000002a51	movq	%rsp, %rbp
0000000000002a54	subq	$0x10, %rsp
0000000000002a58	movq	%rdi, -0x8(%rbp)
0000000000002a5c	movq	-0x8(%rbp), %rdi
0000000000002a60	callq	0x274c8 ## symbol stub for: __ZNSaIP12ModContainerED2Ev
0000000000002a65	addq	$0x10, %rsp
0000000000002a69	popq	%rbp
0000000000002a6a	retq
0000000000002a6b	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_:
0000000000002a70	pushq	%rbp
0000000000002a71	movq	%rsp, %rbp
0000000000002a74	subq	$0x10, %rsp
0000000000002a78	movq	%rdi, -0x8(%rbp)
0000000000002a7c	movq	%rsi, -0x10(%rbp)
0000000000002a80	movq	-0x8(%rbp), %rdi
0000000000002a84	movq	-0x10(%rbp), %rsi
0000000000002a88	callq	0x27312 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_
0000000000002a8d	addq	$0x10, %rsp
0000000000002a91	popq	%rbp
0000000000002a92	retq
0000000000002a93	nopw	%cs:(%rax,%rax)
0000000000002a9d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_:
0000000000002aa0	pushq	%rbp
0000000000002aa1	movq	%rsp, %rbp
0000000000002aa4	movq	%rdi, -0x8(%rbp)
0000000000002aa8	movq	%rsi, -0x10(%rbp)
0000000000002aac	movq	-0x8(%rbp), %rsi
0000000000002ab0	movq	-0x10(%rbp), %rdi
0000000000002ab4	movq	(%rdi), %rdi
0000000000002ab7	movq	%rdi, (%rsi)
0000000000002aba	popq	%rbp
0000000000002abb	retq
0000000000002abc	nopl	(%rax)
__ZNSaIP13BaseContainerEC2Ev:
0000000000002ac0	pushq	%rbp
0000000000002ac1	movq	%rsp, %rbp
0000000000002ac4	subq	$0x10, %rsp
0000000000002ac8	movq	%rdi, -0x8(%rbp)
0000000000002acc	movq	-0x8(%rbp), %rdi
0000000000002ad0	callq	0x27288 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2Ev
0000000000002ad5	addq	$0x10, %rsp
0000000000002ad9	popq	%rbp
0000000000002ada	retq
0000000000002adb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2Ev:
0000000000002ae0	pushq	%rbp
0000000000002ae1	movq	%rsp, %rbp
0000000000002ae4	movq	%rdi, -0x8(%rbp)
0000000000002ae8	popq	%rbp
0000000000002ae9	retq
0000000000002aea	nopw	(%rax,%rax)
__ZNSaIP13BaseContainerED2Ev:
0000000000002af0	pushq	%rbp
0000000000002af1	movq	%rsp, %rbp
0000000000002af4	subq	$0x10, %rsp
0000000000002af8	movq	%rdi, -0x8(%rbp)
0000000000002afc	movq	-0x8(%rbp), %rdi
0000000000002b00	callq	0x2728e ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerED2Ev
0000000000002b05	addq	$0x10, %rsp
0000000000002b09	popq	%rbp
0000000000002b0a	retq
0000000000002b0b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerED2Ev:
0000000000002b10	pushq	%rbp
0000000000002b11	movq	%rsp, %rbp
0000000000002b14	movq	%rdi, -0x8(%rbp)
0000000000002b18	popq	%rbp
0000000000002b19	retq
0000000000002b1a	nopw	(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EEC2ERKS2_:
0000000000002b20	pushq	%rbp
0000000000002b21	movq	%rsp, %rbp
0000000000002b24	subq	$0x20, %rsp
0000000000002b28	movq	%rdi, -0x8(%rbp)
0000000000002b2c	movq	%rsi, -0x10(%rbp)
0000000000002b30	movq	-0x8(%rbp), %rsi
0000000000002b34	movq	-0x10(%rbp), %rdi
0000000000002b38	movq	%rdi, -0x18(%rbp)
0000000000002b3c	movq	%rsi, %rdi
0000000000002b3f	movq	-0x18(%rbp), %rsi
0000000000002b43	callq	0x27576 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EEC2ERKS2_
0000000000002b48	addq	$0x20, %rsp
0000000000002b4c	popq	%rbp
0000000000002b4d	retq
0000000000002b4e	nop
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EEC2ERKS2_:
0000000000002b50	pushq	%rbp
0000000000002b51	movq	%rsp, %rbp
0000000000002b54	subq	$0x10, %rsp
0000000000002b58	movq	%rdi, -0x8(%rbp)
0000000000002b5c	movq	%rsi, -0x10(%rbp)
0000000000002b60	movq	-0x8(%rbp), %rdi
0000000000002b64	movq	-0x10(%rbp), %rsi
0000000000002b68	callq	0x27552 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC1ERKS2_
0000000000002b6d	addq	$0x10, %rsp
0000000000002b71	popq	%rbp
0000000000002b72	retq
0000000000002b73	nopw	%cs:(%rax,%rax)
0000000000002b7d	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC1ERKS2_:
0000000000002b80	pushq	%rbp
0000000000002b81	movq	%rsp, %rbp
0000000000002b84	subq	$0x10, %rsp
0000000000002b88	movq	%rdi, -0x8(%rbp)
0000000000002b8c	movq	%rsi, -0x10(%rbp)
0000000000002b90	movq	-0x8(%rbp), %rdi
0000000000002b94	movq	-0x10(%rbp), %rsi
0000000000002b98	callq	0x27558 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC2ERKS2_
0000000000002b9d	addq	$0x10, %rsp
0000000000002ba1	popq	%rbp
0000000000002ba2	retq
0000000000002ba3	nopw	%cs:(%rax,%rax)
0000000000002bad	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implC2ERKS2_:
0000000000002bb0	pushq	%rbp
0000000000002bb1	movq	%rsp, %rbp
0000000000002bb4	subq	$0x20, %rsp
0000000000002bb8	movq	%rdi, -0x8(%rbp)
0000000000002bbc	movq	%rsi, -0x10(%rbp)
0000000000002bc0	movq	-0x8(%rbp), %rsi
0000000000002bc4	movq	%rsi, %rdi
0000000000002bc7	movq	-0x10(%rbp), %rax
0000000000002bcb	movq	%rsi, -0x18(%rbp)
0000000000002bcf	movq	%rax, %rsi
0000000000002bd2	callq	0x274da ## symbol stub for: __ZNSaIP13BaseContainerEC2ERKS1_
0000000000002bd7	movq	-0x18(%rbp), %rax
0000000000002bdb	movq	$0x0, (%rax)
0000000000002be2	movq	$0x0, 0x8(%rax)
0000000000002bea	movq	$0x0, 0x10(%rax)
0000000000002bf2	addq	$0x20, %rsp
0000000000002bf6	popq	%rbp
0000000000002bf7	retq
0000000000002bf8	nopl	(%rax,%rax)
__ZNSaIP13BaseContainerEC2ERKS1_:
0000000000002c00	pushq	%rbp
0000000000002c01	movq	%rsp, %rbp
0000000000002c04	subq	$0x20, %rsp
0000000000002c08	movq	%rdi, -0x8(%rbp)
0000000000002c0c	movq	%rsi, -0x10(%rbp)
0000000000002c10	movq	-0x8(%rbp), %rsi
0000000000002c14	movq	-0x10(%rbp), %rdi
0000000000002c18	movq	%rdi, -0x18(%rbp)
0000000000002c1c	movq	%rsi, %rdi
0000000000002c1f	movq	-0x18(%rbp), %rsi
0000000000002c23	callq	0x27282 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2ERKS3_
0000000000002c28	addq	$0x20, %rsp
0000000000002c2c	popq	%rbp
0000000000002c2d	retq
0000000000002c2e	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerEC2ERKS3_:
0000000000002c30	pushq	%rbp
0000000000002c31	movq	%rsp, %rbp
0000000000002c34	movq	%rdi, -0x8(%rbp)
0000000000002c38	movq	%rsi, -0x10(%rbp)
0000000000002c3c	popq	%rbp
0000000000002c3d	retq
0000000000002c3e	nop
__ZNSt6vectorIP13BaseContainerSaIS1_EED2Ev:
0000000000002c40	pushq	%rbp
0000000000002c41	movq	%rsp, %rbp
0000000000002c44	subq	$0x40, %rsp
0000000000002c48	movq	%rdi, -0x8(%rbp)
0000000000002c4c	movq	-0x8(%rbp), %rdi
0000000000002c50	movq	(%rdi), %rax
0000000000002c53	movq	0x8(%rdi), %rsi
0000000000002c57	leaq	-0x10(%rbp), %rcx
0000000000002c5b	movq	%rdi, -0x28(%rbp)
0000000000002c5f	movq	%rcx, %rdi
0000000000002c62	movq	-0x28(%rbp), %rcx
0000000000002c66	movq	%rsi, -0x30(%rbp)
0000000000002c6a	movq	%rcx, %rsi
0000000000002c6d	movq	%rax, -0x38(%rbp)
0000000000002c71	callq	0x273d8 ## symbol stub for: __ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE13get_allocatorEv
0000000000002c76	jmp	0x2c7b
0000000000002c7b	leaq	-0x10(%rbp), %rdx
0000000000002c7f	movq	-0x38(%rbp), %rdi
0000000000002c83	movq	-0x30(%rbp), %rsi
0000000000002c87	callq	0x278ee ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerSaIS1_EEvT_S4_T0_
0000000000002c8c	jmp	0x2c91
0000000000002c91	leaq	-0x10(%rbp), %rdi
0000000000002c95	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000002c9a	movq	-0x28(%rbp), %rdi
0000000000002c9e	callq	0x2757c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev
0000000000002ca3	addq	$0x40, %rsp
0000000000002ca7	popq	%rbp
0000000000002ca8	retq
0000000000002ca9	movl	%edx, %ecx
0000000000002cab	movq	%rax, -0x18(%rbp)
0000000000002caf	movl	%ecx, -0x1c(%rbp)
0000000000002cb2	jmp	0x2cc9
0000000000002cb7	movl	%edx, %ecx
0000000000002cb9	movq	%rax, -0x18(%rbp)
0000000000002cbd	movl	%ecx, -0x1c(%rbp)
0000000000002cc0	leaq	-0x10(%rbp), %rdi
0000000000002cc4	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000002cc9	movq	-0x28(%rbp), %rax
0000000000002ccd	movq	%rax, %rdi
0000000000002cd0	callq	0x2757c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev
0000000000002cd5	movq	-0x18(%rbp), %rdi
0000000000002cd9	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
0000000000002cde	nop
__ZSt8_DestroyIPP13BaseContainerSaIS1_EEvT_S4_T0_:
0000000000002ce0	pushq	%rbp
0000000000002ce1	movq	%rsp, %rbp
0000000000002ce4	subq	$0x20, %rsp
0000000000002ce8	movq	%rdi, -0x8(%rbp)
0000000000002cec	movq	%rsi, -0x10(%rbp)
0000000000002cf0	movq	%rdx, -0x18(%rbp)
0000000000002cf4	movq	-0x8(%rbp), %rax
0000000000002cf8	cmpq	-0x10(%rbp), %rax
0000000000002cfc	je	0x2d23
0000000000002d02	movq	-0x18(%rbp), %rax
0000000000002d06	movq	-0x8(%rbp), %rsi
0000000000002d0a	movq	%rax, %rdi
0000000000002d0d	callq	0x27270 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_
0000000000002d12	movq	-0x8(%rbp), %rax
0000000000002d16	addq	$0x8, %rax
0000000000002d1a	movq	%rax, -0x8(%rbp)
0000000000002d1e	jmp	0x2cf4
0000000000002d23	addq	$0x20, %rsp
0000000000002d27	popq	%rbp
0000000000002d28	retq
0000000000002d29	nopl	(%rax)
__ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE13get_allocatorEv:
0000000000002d30	pushq	%rbp
0000000000002d31	movq	%rsp, %rbp
0000000000002d34	subq	$0x10, %rsp
0000000000002d38	movq	%rdi, %rax
0000000000002d3b	movq	%rsi, -0x8(%rbp)
0000000000002d3f	movq	-0x8(%rbp), %rsi
0000000000002d43	movq	%rax, -0x10(%rbp)
0000000000002d47	callq	0x274ce ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
0000000000002d4c	movq	-0x10(%rbp), %rax
0000000000002d50	addq	$0x10, %rsp
0000000000002d54	popq	%rbp
0000000000002d55	retq
0000000000002d56	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EED2Ev:
0000000000002d60	pushq	%rbp
0000000000002d61	movq	%rsp, %rbp
0000000000002d64	subq	$0x20, %rsp
0000000000002d68	movq	%rdi, -0x8(%rbp)
0000000000002d6c	movq	-0x8(%rbp), %rdi
0000000000002d70	movq	(%rdi), %rax
0000000000002d73	movq	0x10(%rdi), %rcx
0000000000002d77	subq	%rax, %rcx
0000000000002d7a	sarq	$0x3, %rcx
0000000000002d7e	movq	%rdi, -0x20(%rbp)
0000000000002d82	movq	%rax, %rsi
0000000000002d85	movq	%rcx, %rdx
0000000000002d88	callq	0x2756a ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000002d8d	jmp	0x2d92
0000000000002d92	movq	-0x20(%rbp), %rdi
0000000000002d96	callq	0x2755e ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev
0000000000002d9b	addq	$0x20, %rsp
0000000000002d9f	popq	%rbp
0000000000002da0	retq
0000000000002da1	movl	%edx, %ecx
0000000000002da3	movq	%rax, -0x10(%rbp)
0000000000002da7	movl	%ecx, -0x14(%rbp)
0000000000002daa	movq	-0x20(%rbp), %rdi
0000000000002dae	callq	0x2755e ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev
0000000000002db3	movq	-0x10(%rbp), %rdi
0000000000002db7	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
0000000000002dbc	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_:
0000000000002dc0	pushq	%rbp
0000000000002dc1	movq	%rsp, %rbp
0000000000002dc4	movq	%rdi, -0x8(%rbp)
0000000000002dc8	movq	%rsi, -0x10(%rbp)
0000000000002dcc	popq	%rbp
0000000000002dcd	retq
0000000000002dce	nop
__ZNSaIP13BaseContainerEC1ERKS1_:
0000000000002dd0	pushq	%rbp
0000000000002dd1	movq	%rsp, %rbp
0000000000002dd4	subq	$0x10, %rsp
0000000000002dd8	movq	%rdi, -0x8(%rbp)
0000000000002ddc	movq	%rsi, -0x10(%rbp)
0000000000002de0	movq	-0x8(%rbp), %rdi
0000000000002de4	movq	-0x10(%rbp), %rsi
0000000000002de8	callq	0x274da ## symbol stub for: __ZNSaIP13BaseContainerEC2ERKS1_
0000000000002ded	addq	$0x10, %rsp
0000000000002df1	popq	%rbp
0000000000002df2	retq
0000000000002df3	nopw	%cs:(%rax,%rax)
0000000000002dfd	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD1Ev:
0000000000002e00	pushq	%rbp
0000000000002e01	movq	%rsp, %rbp
0000000000002e04	subq	$0x10, %rsp
0000000000002e08	movq	%rdi, -0x8(%rbp)
0000000000002e0c	movq	-0x8(%rbp), %rdi
0000000000002e10	callq	0x27564 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD2Ev
0000000000002e15	addq	$0x10, %rsp
0000000000002e19	popq	%rbp
0000000000002e1a	retq
0000000000002e1b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE12_Vector_implD2Ev:
0000000000002e20	pushq	%rbp
0000000000002e21	movq	%rsp, %rbp
0000000000002e24	subq	$0x10, %rsp
0000000000002e28	movq	%rdi, -0x8(%rbp)
0000000000002e2c	movq	-0x8(%rbp), %rdi
0000000000002e30	callq	0x274ec ## symbol stub for: __ZNSaIP13BaseContainerED2Ev
0000000000002e35	addq	$0x10, %rsp
0000000000002e39	popq	%rbp
0000000000002e3a	retq
0000000000002e3b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_:
0000000000002e40	pushq	%rbp
0000000000002e41	movq	%rsp, %rbp
0000000000002e44	movq	%rdi, -0x8(%rbp)
0000000000002e48	movq	%rsi, -0x10(%rbp)
0000000000002e4c	movq	%rdx, -0x18(%rbp)
0000000000002e50	movq	-0x10(%rbp), %rdx
0000000000002e54	movq	-0x18(%rbp), %rsi
0000000000002e58	movq	(%rsi), %rsi
0000000000002e5b	movq	%rsi, (%rdx)
0000000000002e5e	popq	%rbp
0000000000002e5f	retq
__ZNSt6vectorIP12ModContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
0000000000002e60	pushq	%rbp
0000000000002e61	movq	%rsp, %rbp
0000000000002e64	subq	$0x180, %rsp
0000000000002e6b	movq	%rsi, -0x8(%rbp)
0000000000002e6f	movq	%rdi, -0x10(%rbp)
0000000000002e73	movq	%rdx, -0x18(%rbp)
0000000000002e77	movq	-0x10(%rbp), %rdx
0000000000002e7b	movq	0x8(%rdx), %rsi
0000000000002e7f	cmpq	0x10(%rdx), %rsi
0000000000002e83	movq	%rdx, -0x110(%rbp)
0000000000002e8a	je	0x2f49
0000000000002e90	movq	-0x110(%rbp), %rax
0000000000002e97	movq	-0x110(%rbp), %rcx
0000000000002e9e	movq	0x8(%rcx), %rsi
0000000000002ea2	movq	0x8(%rcx), %rdx
0000000000002ea6	addq	$-0x8, %rdx
0000000000002eaa	movq	%rax, %rdi
0000000000002ead	callq	0x27252 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
0000000000002eb2	movq	-0x110(%rbp), %rax
0000000000002eb9	movq	0x8(%rax), %rcx
0000000000002ebd	addq	$0x8, %rcx
0000000000002ec1	movq	%rcx, 0x8(%rax)
0000000000002ec5	movq	-0x18(%rbp), %rcx
0000000000002ec9	movq	(%rcx), %rcx
0000000000002ecc	movq	%rcx, -0x20(%rbp)
0000000000002ed0	movq	-0x8(%rbp), %rcx
0000000000002ed4	movq	%rcx, -0x28(%rbp)
0000000000002ed8	movq	0x8(%rax), %rcx
0000000000002edc	addq	$-0x10, %rcx
0000000000002ee0	movq	%rcx, -0x38(%rbp)
0000000000002ee4	leaq	-0x30(%rbp), %rdi
0000000000002ee8	leaq	-0x38(%rbp), %rsi
0000000000002eec	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002ef1	movq	-0x110(%rbp), %rax
0000000000002ef8	movq	0x8(%rax), %rcx
0000000000002efc	addq	$-0x8, %rcx
0000000000002f00	movq	%rcx, -0x48(%rbp)
0000000000002f04	leaq	-0x40(%rbp), %rdi
0000000000002f08	leaq	-0x48(%rbp), %rsi
0000000000002f0c	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000002f11	movq	-0x28(%rbp), %rdi
0000000000002f15	movq	-0x30(%rbp), %rsi
0000000000002f19	movq	-0x40(%rbp), %rdx
0000000000002f1d	callq	0x27804 ## symbol stub for: __ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000002f22	movq	%rax, -0x50(%rbp)
0000000000002f26	movq	-0x20(%rbp), %rax
0000000000002f2a	leaq	-0x8(%rbp), %rdi
0000000000002f2e	movq	%rax, -0x118(%rbp)
0000000000002f35	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000002f3a	movq	-0x118(%rbp), %rcx
0000000000002f41	movq	%rcx, (%rax)
0000000000002f44	jmp	0x33ec
0000000000002f49	movq	-0x110(%rbp), %rdi
0000000000002f50	callq	0x2742c ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE4sizeEv
0000000000002f55	movq	%rax, -0x58(%rbp)
0000000000002f59	movq	-0x58(%rbp), %rax
0000000000002f5d	movq	-0x110(%rbp), %rdi
0000000000002f64	movq	%rax, -0x120(%rbp)
0000000000002f6b	callq	0x27438 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv
0000000000002f70	movq	-0x120(%rbp), %rdi
0000000000002f77	cmpq	%rax, %rdi
0000000000002f7a	jne	0x2f8c
0000000000002f80	leaq	0x685e6(%rip), %rdi ## literal pool for: "vector::_M_insert_aux"
0000000000002f87	callq	0x27864 ## symbol stub for: __ZSt20__throw_length_errorPKc
0000000000002f8c	cmpq	$0x0, -0x58(%rbp)
0000000000002f91	je	0x2fab
0000000000002f97	movq	-0x58(%rbp), %rax
0000000000002f9b	shlq	$0x1, %rax
0000000000002f9f	movq	%rax, -0x128(%rbp)
0000000000002fa6	jmp	0x2fbc
0000000000002fab	movl	$0x1, %eax
0000000000002fb0	movq	%rax, -0x128(%rbp)
0000000000002fb7	jmp	0x2fbc
0000000000002fbc	movq	-0x128(%rbp), %rax
0000000000002fc3	movq	%rax, -0x60(%rbp)
0000000000002fc7	movq	-0x60(%rbp), %rax
0000000000002fcb	cmpq	-0x58(%rbp), %rax
0000000000002fcf	jae	0x2fe5
0000000000002fd5	movq	-0x110(%rbp), %rdi
0000000000002fdc	callq	0x27438 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv
0000000000002fe1	movq	%rax, -0x60(%rbp)
0000000000002fe5	movq	-0x60(%rbp), %rsi
0000000000002fe9	movq	-0x110(%rbp), %rdi
0000000000002ff0	callq	0x2751c ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE11_M_allocateEm
0000000000002ff5	movq	%rax, -0x70(%rbp)
0000000000002ff9	leaq	-0x68(%rbp), %rdi
0000000000002ffd	leaq	-0x70(%rbp), %rsi
0000000000003001	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003006	movq	-0x68(%rbp), %rax
000000000000300a	movq	%rax, -0x78(%rbp)
000000000000300e	leaq	-0x88(%rbp), %rdi
0000000000003015	movq	-0x110(%rbp), %rsi
000000000000301c	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003021	jmp	0x3026
0000000000003026	movq	-0x8(%rbp), %rax
000000000000302a	movq	%rax, -0xa0(%rbp)
0000000000003031	movq	-0x68(%rbp), %rax
0000000000003035	movq	%rax, -0xa8(%rbp)
000000000000303c	leaq	-0xb0(%rbp), %rdi
0000000000003043	movq	-0x110(%rbp), %rsi
000000000000304a	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
000000000000304f	jmp	0x3054
0000000000003054	movq	-0x88(%rbp), %rdi
000000000000305b	movq	-0xa0(%rbp), %rsi
0000000000003062	movq	-0xa8(%rbp), %rdx
0000000000003069	leaq	-0xb0(%rbp), %rcx
0000000000003070	callq	0x27870 ## symbol stub for: __ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
0000000000003075	movq	%rax, -0x130(%rbp)
000000000000307c	jmp	0x3081
0000000000003081	movq	-0x130(%rbp), %rax
0000000000003088	movq	%rax, -0x80(%rbp)
000000000000308c	movq	-0x80(%rbp), %rcx
0000000000003090	movq	%rcx, -0x78(%rbp)
0000000000003094	leaq	-0xb0(%rbp), %rdi
000000000000309b	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000030a0	movq	-0x110(%rbp), %rax
00000000000030a7	leaq	-0x78(%rbp), %rdi
00000000000030ab	movq	%rax, -0x138(%rbp)
00000000000030b2	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000030b7	movq	%rax, -0x140(%rbp)
00000000000030be	jmp	0x30c3
00000000000030c3	movq	-0x140(%rbp), %rax
00000000000030ca	movq	(%rax), %rsi
00000000000030cd	movq	-0x18(%rbp), %rdx
00000000000030d1	movq	-0x138(%rbp), %rdi
00000000000030d8	callq	0x27252 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE9constructEPS2_RKS2_
00000000000030dd	jmp	0x30e2
00000000000030e2	leaq	-0x78(%rbp), %rdi
00000000000030e6	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
00000000000030eb	movq	%rax, -0x148(%rbp)
00000000000030f2	jmp	0x30f7
00000000000030f7	movq	-0x8(%rbp), %rax
00000000000030fb	movq	%rax, -0xc0(%rbp)
0000000000003102	movq	-0x110(%rbp), %rax
0000000000003109	addq	$0x8, %rax
000000000000310d	leaq	-0xc8(%rbp), %rdi
0000000000003114	movq	%rax, %rsi
0000000000003117	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
000000000000311c	jmp	0x3121
0000000000003121	movq	-0x78(%rbp), %rax
0000000000003125	movq	%rax, -0xd0(%rbp)
000000000000312c	leaq	-0xd8(%rbp), %rdi
0000000000003133	movq	-0x110(%rbp), %rsi
000000000000313a	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
000000000000313f	jmp	0x3144
0000000000003144	movq	-0xc0(%rbp), %rdi
000000000000314b	movq	-0xc8(%rbp), %rsi
0000000000003152	movq	-0xd0(%rbp), %rdx
0000000000003159	leaq	-0xd8(%rbp), %rcx
0000000000003160	callq	0x27870 ## symbol stub for: __ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E
0000000000003165	movq	%rax, -0x150(%rbp)
000000000000316c	jmp	0x3171
0000000000003171	movq	-0x150(%rbp), %rax
0000000000003178	movq	%rax, -0xb8(%rbp)
000000000000317f	movq	-0xb8(%rbp), %rcx
0000000000003186	movq	%rcx, -0x78(%rbp)
000000000000318a	leaq	-0xd8(%rbp), %rdi
0000000000003191	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000003196	jmp	0x32e3
000000000000319b	movl	%edx, %ecx
000000000000319d	movq	%rax, -0x90(%rbp)
00000000000031a4	movl	%ecx, -0x94(%rbp)
00000000000031aa	jmp	0x31ea
00000000000031af	movl	%edx, %ecx
00000000000031b1	movq	%rax, -0x90(%rbp)
00000000000031b8	movl	%ecx, -0x94(%rbp)
00000000000031be	leaq	-0xb0(%rbp), %rdi
00000000000031c5	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000031ca	jmp	0x31ea
00000000000031cf	movl	%edx, %ecx
00000000000031d1	movq	%rax, -0x90(%rbp)
00000000000031d8	movl	%ecx, -0x94(%rbp)
00000000000031de	leaq	-0xd8(%rbp), %rdi
00000000000031e5	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000031ea	movq	-0x90(%rbp), %rdi
00000000000031f1	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
00000000000031f6	movq	-0x68(%rbp), %rdi
00000000000031fa	movq	%rdi, -0xe0(%rbp)
0000000000003201	movq	-0x78(%rbp), %rdi
0000000000003205	movq	%rdi, -0xe8(%rbp)
000000000000320c	leaq	-0xf0(%rbp), %rdi
0000000000003213	movq	-0x110(%rbp), %rsi
000000000000321a	movq	%rax, -0x158(%rbp)
0000000000003221	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000003226	jmp	0x322b
000000000000322b	movq	-0xe0(%rbp), %rdi
0000000000003232	movq	-0xe8(%rbp), %rsi
0000000000003239	leaq	-0xf0(%rbp), %rdx
0000000000003240	callq	0x278d6 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
0000000000003245	jmp	0x324a
000000000000324a	leaq	-0xf0(%rbp), %rdi
0000000000003251	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000003256	movq	-0x110(%rbp), %rdi
000000000000325d	leaq	-0x68(%rbp), %rax
0000000000003261	movq	%rdi, -0x160(%rbp)
0000000000003268	movq	%rax, %rdi
000000000000326b	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003270	movq	%rax, -0x168(%rbp)
0000000000003277	jmp	0x327c
000000000000327c	movq	-0x168(%rbp), %rax
0000000000003283	movq	(%rax), %rsi
0000000000003286	movq	-0x60(%rbp), %rdx
000000000000328a	movq	-0x160(%rbp), %rdi
0000000000003291	callq	0x2753a ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000003296	jmp	0x329b
000000000000329b	callq	0x2795a ## symbol stub for: ___cxa_rethrow
00000000000032a0	jmp	0x3412
00000000000032a5	movl	%edx, %ecx
00000000000032a7	movq	%rax, -0x90(%rbp)
00000000000032ae	movl	%ecx, -0x94(%rbp)
00000000000032b4	jmp	0x32d4
00000000000032b9	movl	%edx, %ecx
00000000000032bb	movq	%rax, -0x90(%rbp)
00000000000032c2	movl	%ecx, -0x94(%rbp)
00000000000032c8	leaq	-0xf0(%rbp), %rdi
00000000000032cf	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000032d4	callq	0x2794e ## symbol stub for: ___cxa_end_catch
00000000000032d9	jmp	0x32de
00000000000032de	jmp	0x33f5
00000000000032e3	movq	-0x110(%rbp), %rdi
00000000000032ea	callq	0x2764e ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE5beginEv
00000000000032ef	movq	%rax, -0xf8(%rbp)
00000000000032f6	movq	-0x110(%rbp), %rdi
00000000000032fd	callq	0x27648 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EE3endEv
0000000000003302	movq	%rax, -0x100(%rbp)
0000000000003309	leaq	-0x108(%rbp), %rax
0000000000003310	movq	%rax, %rdi
0000000000003313	movq	-0x110(%rbp), %rsi
000000000000331a	movq	%rax, -0x170(%rbp)
0000000000003321	callq	0x273d2 ## symbol stub for: __ZNKSt12_Vector_baseIP12ModContainerSaIS1_EE13get_allocatorEv
0000000000003326	movq	-0xf8(%rbp), %rdi
000000000000332d	movq	-0x100(%rbp), %rsi
0000000000003334	movq	-0x170(%rbp), %rdx
000000000000333b	callq	0x278d6 ## symbol stub for: __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_
0000000000003340	jmp	0x3345
0000000000003345	leaq	-0x108(%rbp), %rdi
000000000000334c	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000003351	movq	-0x110(%rbp), %rdi
0000000000003358	movq	-0x110(%rbp), %rax
000000000000335f	movq	(%rax), %rsi
0000000000003362	movq	0x10(%rax), %rcx
0000000000003366	movq	(%rax), %rdx
0000000000003369	subq	%rdx, %rcx
000000000000336c	sarq	$0x3, %rcx
0000000000003370	movq	%rcx, %rdx
0000000000003373	callq	0x2753a ## symbol stub for: __ZNSt12_Vector_baseIP12ModContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000003378	leaq	-0x68(%rbp), %rdi
000000000000337c	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003381	movq	(%rax), %rax
0000000000003384	movq	-0x110(%rbp), %rcx
000000000000338b	movq	%rax, (%rcx)
000000000000338e	leaq	-0x78(%rbp), %rdi
0000000000003392	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003397	movq	(%rax), %rax
000000000000339a	movq	-0x110(%rbp), %rcx
00000000000033a1	movq	%rax, 0x8(%rcx)
00000000000033a5	leaq	-0x68(%rbp), %rdi
00000000000033a9	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000033ae	movq	(%rax), %rax
00000000000033b1	movq	-0x60(%rbp), %rcx
00000000000033b5	shlq	$0x3, %rcx
00000000000033b9	addq	%rcx, %rax
00000000000033bc	movq	-0x110(%rbp), %rcx
00000000000033c3	movq	%rax, 0x10(%rcx)
00000000000033c7	jmp	0x33ec
00000000000033cc	movl	%edx, %ecx
00000000000033ce	movq	%rax, -0x90(%rbp)
00000000000033d5	movl	%ecx, -0x94(%rbp)
00000000000033db	leaq	-0x108(%rbp), %rdi
00000000000033e2	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
00000000000033e7	jmp	0x33f5
00000000000033ec	addq	$0x180, %rsp
00000000000033f3	popq	%rbp
00000000000033f4	retq
00000000000033f5	movq	-0x90(%rbp), %rdi
00000000000033fc	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000003401	ud2
0000000000003403	movq	%rax, %rdi
0000000000003406	movq	%rdx, -0x178(%rbp)
000000000000340d	callq	___clang_call_terminate
0000000000003412	ud2
0000000000003414	nopw	%cs:(%rax,%rax)
000000000000341e	nop
__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003420	pushq	%rbp
0000000000003421	movq	%rsp, %rbp
0000000000003424	subq	$0x40, %rsp
0000000000003428	movq	%rdi, -0x10(%rbp)
000000000000342c	movq	%rsi, -0x18(%rbp)
0000000000003430	movq	%rdx, -0x20(%rbp)
0000000000003434	movb	$0x1, -0x21(%rbp)
0000000000003438	movb	$0x1, -0x22(%rbp)
000000000000343c	movq	-0x10(%rbp), %rdx
0000000000003440	movq	%rdx, -0x30(%rbp)
0000000000003444	movq	-0x18(%rbp), %rdx
0000000000003448	movq	%rdx, -0x38(%rbp)
000000000000344c	movq	-0x20(%rbp), %rdx
0000000000003450	movq	%rdx, -0x40(%rbp)
0000000000003454	movq	-0x30(%rbp), %rdi
0000000000003458	movq	-0x38(%rbp), %rsi
000000000000345c	movq	-0x40(%rbp), %rdx
0000000000003460	callq	0x275ee ## symbol stub for: __ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000003465	movq	%rax, -0x8(%rbp)
0000000000003469	movq	-0x8(%rbp), %rax
000000000000346d	addq	$0x40, %rsp
0000000000003471	popq	%rbp
0000000000003472	retq
0000000000003473	nopw	%cs:(%rax,%rax)
000000000000347d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_:
0000000000003480	pushq	%rbp
0000000000003481	movq	%rsp, %rbp
0000000000003484	subq	$0x10, %rsp
0000000000003488	movq	%rdi, -0x8(%rbp)
000000000000348c	movq	%rsi, -0x10(%rbp)
0000000000003490	movq	-0x8(%rbp), %rdi
0000000000003494	movq	-0x10(%rbp), %rsi
0000000000003498	callq	0x27300 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_
000000000000349d	addq	$0x10, %rsp
00000000000034a1	popq	%rbp
00000000000034a2	retq
00000000000034a3	nopw	%cs:(%rax,%rax)
00000000000034ad	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv:
00000000000034b0	pushq	%rbp
00000000000034b1	movq	%rsp, %rbp
00000000000034b4	movq	%rdi, -0x8(%rbp)
00000000000034b8	movq	-0x8(%rbp), %rdi
00000000000034bc	movq	(%rdi), %rax
00000000000034bf	popq	%rbp
00000000000034c0	retq
00000000000034c1	nopw	%cs:(%rax,%rax)
00000000000034cb	nopl	(%rax,%rax)
__ZNKSt6vectorIP12ModContainerSaIS1_EE4sizeEv:
00000000000034d0	pushq	%rbp
00000000000034d1	movq	%rsp, %rbp
00000000000034d4	subq	$0x20, %rsp
00000000000034d8	movq	%rdi, -0x8(%rbp)
00000000000034dc	movq	-0x8(%rbp), %rdi
00000000000034e0	movq	%rdi, -0x20(%rbp)
00000000000034e4	callq	0x27426 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE3endEv
00000000000034e9	movq	%rax, -0x10(%rbp)
00000000000034ed	movq	-0x20(%rbp), %rdi
00000000000034f1	callq	0x27432 ## symbol stub for: __ZNKSt6vectorIP12ModContainerSaIS1_EE5beginEv
00000000000034f6	movq	%rax, -0x18(%rbp)
00000000000034fa	leaq	-0x10(%rbp), %rdi
00000000000034fe	leaq	-0x18(%rbp), %rsi
0000000000003502	callq	0x2732a ## symbol stub for: __ZN9__gnu_cxxmiIPKP12ModContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE
0000000000003507	addq	$0x20, %rsp
000000000000350b	popq	%rbp
000000000000350c	retq
000000000000350d	nopl	(%rax)
__ZNKSt6vectorIP12ModContainerSaIS1_EE8max_sizeEv:
0000000000003510	pushq	%rbp
0000000000003511	movq	%rsp, %rbp
0000000000003514	movq	%rdi, -0x8(%rbp)
0000000000003518	movabsq	$0x1fffffffffffffff, %rax
0000000000003522	popq	%rbp
0000000000003523	retq
0000000000003524	nopw	%cs:(%rax,%rax)
000000000000352e	nop
__ZNSt12_Vector_baseIP12ModContainerSaIS1_EE11_M_allocateEm:
0000000000003530	pushq	%rbp
0000000000003531	movq	%rsp, %rbp
0000000000003534	subq	$0x20, %rsp
0000000000003538	xorl	%eax, %eax
000000000000353a	movl	%eax, %edx
000000000000353c	movq	%rdi, -0x8(%rbp)
0000000000003540	movq	%rsi, -0x10(%rbp)
0000000000003544	movq	-0x8(%rbp), %rsi
0000000000003548	movq	-0x10(%rbp), %rdi
000000000000354c	movq	%rdi, -0x18(%rbp)
0000000000003550	movq	%rsi, %rdi
0000000000003553	movq	-0x18(%rbp), %rsi
0000000000003557	callq	0x2724c ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE8allocateEmPKv
000000000000355c	addq	$0x20, %rsp
0000000000003560	popq	%rbp
0000000000003561	retq
0000000000003562	nopw	%cs:(%rax,%rax)
000000000000356c	nopl	(%rax)
__ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E:
0000000000003570	pushq	%rbp
0000000000003571	movq	%rsp, %rbp
0000000000003574	subq	$0x40, %rsp
0000000000003578	movq	%rdi, -0x10(%rbp)
000000000000357c	movq	%rsi, -0x18(%rbp)
0000000000003580	movq	%rdx, -0x20(%rbp)
0000000000003584	movq	-0x10(%rbp), %rdx
0000000000003588	movq	%rdx, -0x28(%rbp)
000000000000358c	movq	-0x18(%rbp), %rdx
0000000000003590	movq	%rdx, -0x30(%rbp)
0000000000003594	movq	-0x20(%rbp), %rdx
0000000000003598	movq	%rdx, -0x38(%rbp)
000000000000359c	movq	-0x28(%rbp), %rdi
00000000000035a0	movq	-0x30(%rbp), %rsi
00000000000035a4	movq	-0x38(%rbp), %rdx
00000000000035a8	movq	%rcx, -0x40(%rbp)
00000000000035ac	callq	0x2782e ## symbol stub for: __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
00000000000035b1	movq	%rax, -0x8(%rbp)
00000000000035b5	movq	-0x8(%rbp), %rax
00000000000035b9	addq	$0x40, %rsp
00000000000035bd	popq	%rbp
00000000000035be	retq
00000000000035bf	nop
__ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv:
00000000000035c0	pushq	%rbp
00000000000035c1	movq	%rsp, %rbp
00000000000035c4	movq	%rdi, -0x8(%rbp)
00000000000035c8	movq	-0x8(%rbp), %rax
00000000000035cc	popq	%rbp
00000000000035cd	retq
00000000000035ce	nop
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv:
00000000000035d0	pushq	%rbp
00000000000035d1	movq	%rsp, %rbp
00000000000035d4	movq	%rdi, -0x8(%rbp)
00000000000035d8	movq	-0x8(%rbp), %rdi
00000000000035dc	movq	(%rdi), %rax
00000000000035df	addq	$0x8, %rax
00000000000035e3	movq	%rax, (%rdi)
00000000000035e6	movq	%rdi, %rax
00000000000035e9	popq	%rbp
00000000000035ea	retq
00000000000035eb	nopl	(%rax,%rax)
__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_:
00000000000035f0	pushq	%rbp
00000000000035f1	movq	%rsp, %rbp
00000000000035f4	subq	$0x30, %rsp
00000000000035f8	movq	%rdi, -0x8(%rbp)
00000000000035fc	movq	%rsi, -0x10(%rbp)
0000000000003600	movq	%rdx, -0x18(%rbp)
0000000000003604	leaq	-0x8(%rbp), %rdi
0000000000003608	leaq	-0x10(%rbp), %rsi
000000000000360c	callq	0x27342 ## symbol stub for: __ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003611	testb	$0x1, %al
0000000000003613	jne	0x361e
0000000000003619	jmp	0x364d
000000000000361e	movq	-0x18(%rbp), %rax
0000000000003622	leaq	-0x8(%rbp), %rdi
0000000000003626	movq	%rax, -0x20(%rbp)
000000000000362a	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
000000000000362f	movq	-0x20(%rbp), %rdi
0000000000003633	movq	%rax, %rsi
0000000000003636	callq	0x27246 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP12ModContainerE7destroyEPS2_
000000000000363b	leaq	-0x8(%rbp), %rdi
000000000000363f	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003644	movq	%rax, -0x28(%rbp)
0000000000003648	jmp	0x3604
000000000000364d	addq	$0x30, %rsp
0000000000003651	popq	%rbp
0000000000003652	retq
0000000000003653	nopw	%cs:(%rax,%rax)
000000000000365d	nopl	(%rax)
__ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003660	pushq	%rbp
0000000000003661	movq	%rsp, %rbp
0000000000003664	subq	$0x40, %rsp
0000000000003668	movq	%rdi, -0x10(%rbp)
000000000000366c	movq	%rsi, -0x18(%rbp)
0000000000003670	movq	%rdx, -0x20(%rbp)
0000000000003674	leaq	-0x10(%rbp), %rdi
0000000000003678	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000000367d	movq	(%rax), %rdi
0000000000003680	leaq	-0x18(%rbp), %rax
0000000000003684	movq	%rdi, -0x30(%rbp)
0000000000003688	movq	%rax, %rdi
000000000000368b	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003690	movq	(%rax), %rsi
0000000000003693	leaq	-0x20(%rbp), %rdi
0000000000003697	movq	%rsi, -0x38(%rbp)
000000000000369b	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000036a0	movq	(%rax), %rdx
00000000000036a3	movq	-0x30(%rbp), %rdi
00000000000036a7	movq	-0x38(%rbp), %rsi
00000000000036ab	callq	0x27846 ## symbol stub for: __ZSt19__copy_backward_auxIPP12ModContainerS2_ET0_T_S4_S3_
00000000000036b0	movq	%rax, -0x28(%rbp)
00000000000036b4	leaq	-0x8(%rbp), %rdi
00000000000036b8	leaq	-0x28(%rbp), %rsi
00000000000036bc	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
00000000000036c1	movq	-0x8(%rbp), %rax
00000000000036c5	addq	$0x40, %rsp
00000000000036c9	popq	%rbp
00000000000036ca	retq
00000000000036cb	nopl	(%rax,%rax)
__ZSt19__copy_backward_auxIPP12ModContainerS2_ET0_T_S4_S3_:
00000000000036d0	pushq	%rbp
00000000000036d1	movq	%rsp, %rbp
00000000000036d4	subq	$0x20, %rsp
00000000000036d8	movq	%rdi, -0x8(%rbp)
00000000000036dc	movq	%rsi, -0x10(%rbp)
00000000000036e0	movq	%rdx, -0x18(%rbp)
00000000000036e4	movb	$0x1, -0x19(%rbp)
00000000000036e8	movq	-0x8(%rbp), %rdi
00000000000036ec	movq	-0x10(%rbp), %rsi
00000000000036f0	movq	-0x18(%rbp), %rdx
00000000000036f4	callq	0x275be ## symbol stub for: __ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP12ModContainerEEPT_PKS5_S8_S6_
00000000000036f9	addq	$0x20, %rsp
00000000000036fd	popq	%rbp
00000000000036fe	retq
00000000000036ff	nop
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP12ModContainerEEPT_PKS5_S8_S6_:
0000000000003700	pushq	%rbp
0000000000003701	movq	%rsp, %rbp
0000000000003704	subq	$0x40, %rsp
0000000000003708	xorl	%eax, %eax
000000000000370a	movl	%eax, %ecx
000000000000370c	movq	%rdi, -0x8(%rbp)
0000000000003710	movq	%rsi, -0x10(%rbp)
0000000000003714	movq	%rdx, -0x18(%rbp)
0000000000003718	movq	-0x10(%rbp), %rdx
000000000000371c	movq	-0x8(%rbp), %rsi
0000000000003720	subq	%rsi, %rdx
0000000000003723	sarq	$0x3, %rdx
0000000000003727	movq	%rdx, -0x20(%rbp)
000000000000372b	movq	-0x18(%rbp), %rdx
000000000000372f	movq	%rcx, %rsi
0000000000003732	subq	-0x20(%rbp), %rsi
0000000000003736	shlq	$0x3, %rsi
000000000000373a	addq	%rsi, %rdx
000000000000373d	movq	-0x8(%rbp), %rsi
0000000000003741	movq	-0x20(%rbp), %rdi
0000000000003745	shlq	$0x3, %rdi
0000000000003749	movq	%rdi, -0x28(%rbp)
000000000000374d	movq	%rdx, %rdi
0000000000003750	movq	-0x28(%rbp), %rdx
0000000000003754	movq	%rcx, -0x30(%rbp)
0000000000003758	callq	0x279c6 ## symbol stub for: _memmove
000000000000375d	movq	-0x18(%rbp), %rcx
0000000000003761	movq	-0x30(%rbp), %rdx
0000000000003765	subq	-0x20(%rbp), %rdx
0000000000003769	shlq	$0x3, %rdx
000000000000376d	addq	%rdx, %rcx
0000000000003770	movq	%rax, -0x38(%rbp)
0000000000003774	movq	%rcx, %rax
0000000000003777	addq	$0x40, %rsp
000000000000377b	popq	%rbp
000000000000377c	retq
000000000000377d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS3_:
0000000000003780	pushq	%rbp
0000000000003781	movq	%rsp, %rbp
0000000000003784	movq	%rdi, -0x8(%rbp)
0000000000003788	movq	%rsi, -0x10(%rbp)
000000000000378c	movq	-0x8(%rbp), %rsi
0000000000003790	movq	-0x10(%rbp), %rdi
0000000000003794	movq	(%rdi), %rdi
0000000000003797	movq	%rdi, (%rsi)
000000000000379a	popq	%rbp
000000000000379b	retq
000000000000379c	nopl	(%rax)
__ZN9__gnu_cxxmiIPKP12ModContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE:
00000000000037a0	pushq	%rbp
00000000000037a1	movq	%rsp, %rbp
00000000000037a4	subq	$0x20, %rsp
00000000000037a8	movq	%rdi, -0x8(%rbp)
00000000000037ac	movq	%rsi, -0x10(%rbp)
00000000000037b0	movq	-0x8(%rbp), %rdi
00000000000037b4	callq	0x2737e ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000037b9	movq	(%rax), %rax
00000000000037bc	movq	-0x10(%rbp), %rdi
00000000000037c0	movq	%rax, -0x18(%rbp)
00000000000037c4	callq	0x2737e ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
00000000000037c9	movq	(%rax), %rax
00000000000037cc	movq	-0x18(%rbp), %rsi
00000000000037d0	subq	%rax, %rsi
00000000000037d3	sarq	$0x3, %rsi
00000000000037d7	movq	%rsi, %rax
00000000000037da	addq	$0x20, %rsp
00000000000037de	popq	%rbp
00000000000037df	retq
__ZNKSt6vectorIP12ModContainerSaIS1_EE3endEv:
00000000000037e0	pushq	%rbp
00000000000037e1	movq	%rsp, %rbp
00000000000037e4	subq	$0x20, %rsp
00000000000037e8	movq	%rdi, -0x10(%rbp)
00000000000037ec	movq	-0x10(%rbp), %rdi
00000000000037f0	movq	0x8(%rdi), %rdi
00000000000037f4	movq	%rdi, -0x18(%rbp)
00000000000037f8	leaq	-0x8(%rbp), %rdi
00000000000037fc	leaq	-0x18(%rbp), %rsi
0000000000003800	callq	0x272dc ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003805	movq	-0x8(%rbp), %rax
0000000000003809	addq	$0x20, %rsp
000000000000380d	popq	%rbp
000000000000380e	retq
000000000000380f	nop
__ZNKSt6vectorIP12ModContainerSaIS1_EE5beginEv:
0000000000003810	pushq	%rbp
0000000000003811	movq	%rsp, %rbp
0000000000003814	subq	$0x20, %rsp
0000000000003818	movq	%rdi, -0x10(%rbp)
000000000000381c	movq	-0x10(%rbp), %rdi
0000000000003820	movq	(%rdi), %rdi
0000000000003823	movq	%rdi, -0x18(%rbp)
0000000000003827	leaq	-0x8(%rbp), %rdi
000000000000382b	leaq	-0x18(%rbp), %rsi
000000000000382f	callq	0x272dc ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000003834	movq	-0x8(%rbp), %rax
0000000000003838	addq	$0x20, %rsp
000000000000383c	popq	%rbp
000000000000383d	retq
000000000000383e	nop
__ZNK9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv:
0000000000003840	pushq	%rbp
0000000000003841	movq	%rsp, %rbp
0000000000003844	movq	%rdi, -0x8(%rbp)
0000000000003848	movq	-0x8(%rbp), %rax
000000000000384c	popq	%rbp
000000000000384d	retq
000000000000384e	nop
__ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_:
0000000000003850	pushq	%rbp
0000000000003851	movq	%rsp, %rbp
0000000000003854	subq	$0x10, %rsp
0000000000003858	movq	%rdi, -0x8(%rbp)
000000000000385c	movq	%rsi, -0x10(%rbp)
0000000000003860	movq	-0x8(%rbp), %rdi
0000000000003864	movq	-0x10(%rbp), %rsi
0000000000003868	callq	0x272e2 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_
000000000000386d	addq	$0x10, %rsp
0000000000003871	popq	%rbp
0000000000003872	retq
0000000000003873	nopw	%cs:(%rax,%rax)
000000000000387d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKP12ModContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_:
0000000000003880	pushq	%rbp
0000000000003881	movq	%rsp, %rbp
0000000000003884	movq	%rdi, -0x8(%rbp)
0000000000003888	movq	%rsi, -0x10(%rbp)
000000000000388c	movq	-0x8(%rbp), %rsi
0000000000003890	movq	-0x10(%rbp), %rdi
0000000000003894	movq	(%rdi), %rdi
0000000000003897	movq	%rdi, (%rsi)
000000000000389a	popq	%rbp
000000000000389b	retq
000000000000389c	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorIP12ModContainerE8allocateEmPKv:
00000000000038a0	pushq	%rbp
00000000000038a1	movq	%rsp, %rbp
00000000000038a4	subq	$0x20, %rsp
00000000000038a8	movq	%rdi, -0x8(%rbp)
00000000000038ac	movq	%rsi, -0x10(%rbp)
00000000000038b0	movq	%rdx, -0x18(%rbp)
00000000000038b4	movq	-0x8(%rbp), %rdi
00000000000038b8	movq	-0x10(%rbp), %rdx
00000000000038bc	movq	%rdx, -0x20(%rbp)
00000000000038c0	callq	0x27360 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP12ModContainerE8max_sizeEv
00000000000038c5	movq	-0x20(%rbp), %rdx
00000000000038c9	cmpq	%rax, %rdx
00000000000038cc	jbe	0x38d7
00000000000038d2	callq	0x27816 ## symbol stub for: __ZSt17__throw_bad_allocv
00000000000038d7	movq	-0x10(%rbp), %rax
00000000000038db	shlq	$0x3, %rax
00000000000038df	movq	%rax, %rdi
00000000000038e2	callq	0x27924 ## symbol stub for: __Znwm
00000000000038e7	addq	$0x20, %rsp
00000000000038eb	popq	%rbp
00000000000038ec	retq
00000000000038ed	nopl	(%rax)
__ZNK9__gnu_cxx13new_allocatorIP12ModContainerE8max_sizeEv:
00000000000038f0	pushq	%rbp
00000000000038f1	movq	%rsp, %rbp
00000000000038f4	movq	%rdi, -0x8(%rbp)
00000000000038f8	movabsq	$0x1fffffffffffffff, %rax
0000000000003902	popq	%rbp
0000000000003903	retq
0000000000003904	nopw	%cs:(%rax,%rax)
000000000000390e	nop
__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003910	pushq	%rbp
0000000000003911	movq	%rsp, %rbp
0000000000003914	subq	$0x40, %rsp
0000000000003918	movq	%rdi, -0x10(%rbp)
000000000000391c	movq	%rsi, -0x18(%rbp)
0000000000003920	movq	%rdx, -0x20(%rbp)
0000000000003924	movq	-0x10(%rbp), %rdx
0000000000003928	movq	%rdx, -0x28(%rbp)
000000000000392c	movq	-0x18(%rbp), %rdx
0000000000003930	movq	%rdx, -0x30(%rbp)
0000000000003934	movq	-0x20(%rbp), %rdx
0000000000003938	movq	%rdx, -0x38(%rbp)
000000000000393c	movq	-0x28(%rbp), %rdi
0000000000003940	movq	-0x30(%rbp), %rsi
0000000000003944	movq	-0x38(%rbp), %rdx
0000000000003948	callq	0x27888 ## symbol stub for: __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
000000000000394d	movq	%rax, -0x8(%rbp)
0000000000003951	movq	-0x8(%rbp), %rax
0000000000003955	addq	$0x40, %rsp
0000000000003959	popq	%rbp
000000000000395a	retq
000000000000395b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:
0000000000003960	pushq	%rbp
0000000000003961	movq	%rsp, %rbp
0000000000003964	subq	$0x40, %rsp
0000000000003968	movq	%rdi, -0x10(%rbp)
000000000000396c	movq	%rsi, -0x18(%rbp)
0000000000003970	movq	%rdx, -0x20(%rbp)
0000000000003974	movq	-0x10(%rbp), %rdx
0000000000003978	movq	%rdx, -0x30(%rbp)
000000000000397c	movq	-0x18(%rbp), %rdx
0000000000003980	movq	%rdx, -0x38(%rbp)
0000000000003984	movq	-0x20(%rbp), %rdx
0000000000003988	movq	%rdx, -0x40(%rbp)
000000000000398c	movq	-0x30(%rbp), %rdi
0000000000003990	movq	-0x38(%rbp), %rsi
0000000000003994	movq	-0x40(%rbp), %rdx
0000000000003998	callq	0x278a6 ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
000000000000399d	movq	%rax, -0x8(%rbp)
00000000000039a1	movq	-0x8(%rbp), %rax
00000000000039a5	addq	$0x40, %rsp
00000000000039a9	popq	%rbp
00000000000039aa	retq
00000000000039ab	nopl	(%rax,%rax)
__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
00000000000039b0	pushq	%rbp
00000000000039b1	movq	%rsp, %rbp
00000000000039b4	subq	$0x40, %rsp
00000000000039b8	movq	%rdi, -0x10(%rbp)
00000000000039bc	movq	%rsi, -0x18(%rbp)
00000000000039c0	movq	%rdx, -0x20(%rbp)
00000000000039c4	movb	$0x1, -0x21(%rbp)
00000000000039c8	movb	$0x1, -0x22(%rbp)
00000000000039cc	movq	-0x10(%rbp), %rdx
00000000000039d0	movq	%rdx, -0x30(%rbp)
00000000000039d4	movq	-0x18(%rbp), %rdx
00000000000039d8	movq	%rdx, -0x38(%rbp)
00000000000039dc	movq	-0x20(%rbp), %rdx
00000000000039e0	movq	%rdx, -0x40(%rbp)
00000000000039e4	movq	-0x30(%rbp), %rdi
00000000000039e8	movq	-0x38(%rbp), %rsi
00000000000039ec	movq	-0x40(%rbp), %rdx
00000000000039f0	callq	0x275a6 ## symbol stub for: __ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
00000000000039f5	movq	%rax, -0x8(%rbp)
00000000000039f9	movq	-0x8(%rbp), %rax
00000000000039fd	addq	$0x40, %rsp
0000000000003a01	popq	%rbp
0000000000003a02	retq
0000000000003a03	nopw	%cs:(%rax,%rax)
0000000000003a0d	nopl	(%rax)
__ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000003a10	pushq	%rbp
0000000000003a11	movq	%rsp, %rbp
0000000000003a14	subq	$0x40, %rsp
0000000000003a18	movq	%rdi, -0x10(%rbp)
0000000000003a1c	movq	%rsi, -0x18(%rbp)
0000000000003a20	movq	%rdx, -0x20(%rbp)
0000000000003a24	leaq	-0x10(%rbp), %rdi
0000000000003a28	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003a2d	movq	(%rax), %rdi
0000000000003a30	leaq	-0x18(%rbp), %rax
0000000000003a34	movq	%rdi, -0x30(%rbp)
0000000000003a38	movq	%rax, %rdi
0000000000003a3b	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003a40	movq	(%rax), %rsi
0000000000003a43	leaq	-0x20(%rbp), %rdi
0000000000003a47	movq	%rsi, -0x38(%rbp)
0000000000003a4b	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003a50	movq	(%rax), %rdx
0000000000003a53	movq	-0x30(%rbp), %rdi
0000000000003a57	movq	-0x38(%rbp), %rsi
0000000000003a5b	callq	0x277e0 ## symbol stub for: __ZSt10__copy_auxIPP12ModContainerS2_ET0_T_S4_S3_
0000000000003a60	movq	%rax, -0x28(%rbp)
0000000000003a64	leaq	-0x8(%rbp), %rdi
0000000000003a68	leaq	-0x28(%rbp), %rsi
0000000000003a6c	callq	0x272fa ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000003a71	movq	-0x8(%rbp), %rax
0000000000003a75	addq	$0x40, %rsp
0000000000003a79	popq	%rbp
0000000000003a7a	retq
0000000000003a7b	nopl	(%rax,%rax)
__ZSt10__copy_auxIPP12ModContainerS2_ET0_T_S4_S3_:
0000000000003a80	pushq	%rbp
0000000000003a81	movq	%rsp, %rbp
0000000000003a84	subq	$0x20, %rsp
0000000000003a88	movq	%rdi, -0x8(%rbp)
0000000000003a8c	movq	%rsi, -0x10(%rbp)
0000000000003a90	movq	%rdx, -0x18(%rbp)
0000000000003a94	movb	$0x1, -0x19(%rbp)
0000000000003a98	movq	-0x8(%rbp), %rdi
0000000000003a9c	movq	-0x10(%rbp), %rsi
0000000000003aa0	movq	-0x18(%rbp), %rdx
0000000000003aa4	callq	0x27636 ## symbol stub for: __ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP12ModContainerEEPT_PKS5_S8_S6_
0000000000003aa9	addq	$0x20, %rsp
0000000000003aad	popq	%rbp
0000000000003aae	retq
0000000000003aaf	nop
__ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP12ModContainerEEPT_PKS5_S8_S6_:
0000000000003ab0	pushq	%rbp
0000000000003ab1	movq	%rsp, %rbp
0000000000003ab4	subq	$0x30, %rsp
0000000000003ab8	movq	%rdi, -0x8(%rbp)
0000000000003abc	movq	%rsi, -0x10(%rbp)
0000000000003ac0	movq	%rdx, -0x18(%rbp)
0000000000003ac4	movq	-0x18(%rbp), %rdx
0000000000003ac8	movq	-0x8(%rbp), %rsi
0000000000003acc	movq	-0x10(%rbp), %rdi
0000000000003ad0	movq	-0x8(%rbp), %rax
0000000000003ad4	subq	%rax, %rdi
0000000000003ad7	sarq	$0x3, %rdi
0000000000003adb	shlq	$0x3, %rdi
0000000000003adf	movq	%rdi, -0x20(%rbp)
0000000000003ae3	movq	%rdx, %rdi
0000000000003ae6	movq	-0x20(%rbp), %rdx
0000000000003aea	callq	0x279c6 ## symbol stub for: _memmove
0000000000003aef	movq	-0x18(%rbp), %rdx
0000000000003af3	movq	-0x10(%rbp), %rsi
0000000000003af7	movq	-0x8(%rbp), %rdi
0000000000003afb	subq	%rdi, %rsi
0000000000003afe	sarq	$0x3, %rsi
0000000000003b02	shlq	$0x3, %rsi
0000000000003b06	addq	%rsi, %rdx
0000000000003b09	movq	%rax, -0x28(%rbp)
0000000000003b0d	movq	%rdx, %rax
0000000000003b10	addq	$0x30, %rsp
0000000000003b14	popq	%rbp
0000000000003b15	retq
0000000000003b16	nopw	%cs:(%rax,%rax)
__ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
0000000000003b20	pushq	%rbp
0000000000003b21	movq	%rsp, %rbp
0000000000003b24	subq	$0x20, %rsp
0000000000003b28	movq	%rdi, -0x8(%rbp)
0000000000003b2c	movq	%rsi, -0x10(%rbp)
0000000000003b30	movq	-0x8(%rbp), %rdi
0000000000003b34	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003b39	movq	(%rax), %rax
0000000000003b3c	movq	-0x10(%rbp), %rdi
0000000000003b40	movq	%rax, -0x18(%rbp)
0000000000003b44	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003b49	movq	-0x18(%rbp), %rsi
0000000000003b4d	cmpq	(%rax), %rsi
0000000000003b50	setne	%cl
0000000000003b53	andb	$0x1, %cl
0000000000003b56	movzbl	%cl, %eax
0000000000003b59	addq	$0x20, %rsp
0000000000003b5d	popq	%rbp
0000000000003b5e	retq
0000000000003b5f	nop
__ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_:
0000000000003b60	pushq	%rbp
0000000000003b61	movq	%rsp, %rbp
0000000000003b64	subq	$0x50, %rsp
0000000000003b68	movq	%rdi, -0x10(%rbp)
0000000000003b6c	movq	%rsi, -0x18(%rbp)
0000000000003b70	movq	%rdx, -0x20(%rbp)
0000000000003b74	movq	-0x10(%rbp), %rdx
0000000000003b78	movq	%rdx, -0x28(%rbp)
0000000000003b7c	movq	-0x18(%rbp), %rdx
0000000000003b80	movq	%rdx, -0x30(%rbp)
0000000000003b84	movq	-0x20(%rbp), %rdx
0000000000003b88	leaq	-0x10(%rbp), %rdi
0000000000003b8c	movq	%rdx, -0x48(%rbp)
0000000000003b90	callq	0x27858 ## symbol stub for: __ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_
0000000000003b95	movq	-0x28(%rbp), %rdi
0000000000003b99	movq	-0x30(%rbp), %rsi
0000000000003b9d	movq	-0x48(%rbp), %rdx
0000000000003ba1	callq	0x278be ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_St26random_access_iterator_tag
0000000000003ba6	movq	%rax, -0x8(%rbp)
0000000000003baa	movq	-0x8(%rbp), %rax
0000000000003bae	addq	$0x50, %rsp
0000000000003bb2	popq	%rbp
0000000000003bb3	retq
0000000000003bb4	nopw	%cs:(%rax,%rax)
0000000000003bbe	nop
__ZN9__gnu_cxxeqIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
0000000000003bc0	pushq	%rbp
0000000000003bc1	movq	%rsp, %rbp
0000000000003bc4	subq	$0x20, %rsp
0000000000003bc8	movq	%rdi, -0x8(%rbp)
0000000000003bcc	movq	%rsi, -0x10(%rbp)
0000000000003bd0	movq	-0x8(%rbp), %rdi
0000000000003bd4	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003bd9	movq	(%rax), %rax
0000000000003bdc	movq	-0x10(%rbp), %rdi
0000000000003be0	movq	%rax, -0x18(%rbp)
0000000000003be4	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003be9	movq	-0x18(%rbp), %rsi
0000000000003bed	cmpq	(%rax), %rsi
0000000000003bf0	sete	%cl
0000000000003bf3	andb	$0x1, %cl
0000000000003bf6	movzbl	%cl, %eax
0000000000003bf9	addq	$0x20, %rsp
0000000000003bfd	popq	%rbp
0000000000003bfe	retq
0000000000003bff	nop
__ZSt11remove_copyIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_RKT1_:
0000000000003c00	pushq	%rbp
0000000000003c01	movq	%rsp, %rbp
0000000000003c04	subq	$0x40, %rsp
0000000000003c08	movq	%rdi, -0x10(%rbp)
0000000000003c0c	movq	%rsi, -0x18(%rbp)
0000000000003c10	movq	%rdx, -0x20(%rbp)
0000000000003c14	movq	%rcx, -0x28(%rbp)
0000000000003c18	leaq	-0x10(%rbp), %rdi
0000000000003c1c	leaq	-0x18(%rbp), %rsi
0000000000003c20	callq	0x27342 ## symbol stub for: __ZN9__gnu_cxxneIPP12ModContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003c25	testb	$0x1, %al
0000000000003c27	jne	0x3c32
0000000000003c2d	jmp	0x3c8f
0000000000003c32	leaq	-0x10(%rbp), %rdi
0000000000003c36	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003c3b	movq	(%rax), %rax
0000000000003c3e	movq	-0x28(%rbp), %rdi
0000000000003c42	cmpq	(%rdi), %rax
0000000000003c45	je	0x3c78
0000000000003c4b	leaq	-0x10(%rbp), %rdi
0000000000003c4f	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003c54	movq	(%rax), %rax
0000000000003c57	leaq	-0x20(%rbp), %rdi
0000000000003c5b	movq	%rax, -0x30(%rbp)
0000000000003c5f	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003c64	movq	-0x30(%rbp), %rdi
0000000000003c68	movq	%rdi, (%rax)
0000000000003c6b	leaq	-0x20(%rbp), %rdi
0000000000003c6f	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003c74	movq	%rax, -0x38(%rbp)
0000000000003c78	jmp	0x3c7d
0000000000003c7d	leaq	-0x10(%rbp), %rdi
0000000000003c81	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003c86	movq	%rax, -0x40(%rbp)
0000000000003c8a	jmp	0x3c18
0000000000003c8f	movq	-0x20(%rbp), %rax
0000000000003c93	movq	%rax, -0x8(%rbp)
0000000000003c97	movq	-0x8(%rbp), %rax
0000000000003c9b	addq	$0x40, %rsp
0000000000003c9f	popq	%rbp
0000000000003ca0	retq
0000000000003ca1	nopw	%cs:(%rax,%rax)
0000000000003cab	nopl	(%rax,%rax)
__ZSt4findIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_St26random_access_iterator_tag:
0000000000003cb0	pushq	%rbp
0000000000003cb1	movq	%rsp, %rbp
0000000000003cb4	subq	$0x80, %rsp
0000000000003cbb	movq	%rdi, -0x10(%rbp)
0000000000003cbf	movq	%rsi, -0x18(%rbp)
0000000000003cc3	movq	%rdx, -0x28(%rbp)
0000000000003cc7	leaq	-0x18(%rbp), %rdi
0000000000003ccb	leaq	-0x10(%rbp), %rsi
0000000000003ccf	callq	0x27330 ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
0000000000003cd4	sarq	$0x2, %rax
0000000000003cd8	movq	%rax, -0x30(%rbp)
0000000000003cdc	cmpq	$0x0, -0x30(%rbp)
0000000000003ce1	jle	0x3dc4
0000000000003ce7	leaq	-0x10(%rbp), %rdi
0000000000003ceb	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003cf0	movq	(%rax), %rax
0000000000003cf3	movq	-0x28(%rbp), %rdi
0000000000003cf7	cmpq	(%rdi), %rax
0000000000003cfa	jne	0x3d0d
0000000000003d00	movq	-0x10(%rbp), %rax
0000000000003d04	movq	%rax, -0x8(%rbp)
0000000000003d08	jmp	0x3ea0
0000000000003d0d	leaq	-0x10(%rbp), %rdi
0000000000003d11	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003d16	leaq	-0x10(%rbp), %rdi
0000000000003d1a	movq	%rax, -0x38(%rbp)
0000000000003d1e	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003d23	movq	(%rax), %rax
0000000000003d26	movq	-0x28(%rbp), %rdi
0000000000003d2a	cmpq	(%rdi), %rax
0000000000003d2d	jne	0x3d40
0000000000003d33	movq	-0x10(%rbp), %rax
0000000000003d37	movq	%rax, -0x8(%rbp)
0000000000003d3b	jmp	0x3ea0
0000000000003d40	leaq	-0x10(%rbp), %rdi
0000000000003d44	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003d49	leaq	-0x10(%rbp), %rdi
0000000000003d4d	movq	%rax, -0x40(%rbp)
0000000000003d51	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003d56	movq	(%rax), %rax
0000000000003d59	movq	-0x28(%rbp), %rdi
0000000000003d5d	cmpq	(%rdi), %rax
0000000000003d60	jne	0x3d73
0000000000003d66	movq	-0x10(%rbp), %rax
0000000000003d6a	movq	%rax, -0x8(%rbp)
0000000000003d6e	jmp	0x3ea0
0000000000003d73	leaq	-0x10(%rbp), %rdi
0000000000003d77	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003d7c	leaq	-0x10(%rbp), %rdi
0000000000003d80	movq	%rax, -0x48(%rbp)
0000000000003d84	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003d89	movq	(%rax), %rax
0000000000003d8c	movq	-0x28(%rbp), %rdi
0000000000003d90	cmpq	(%rdi), %rax
0000000000003d93	jne	0x3da6
0000000000003d99	movq	-0x10(%rbp), %rax
0000000000003d9d	movq	%rax, -0x8(%rbp)
0000000000003da1	jmp	0x3ea0
0000000000003da6	leaq	-0x10(%rbp), %rdi
0000000000003daa	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003daf	movq	%rax, -0x50(%rbp)
0000000000003db3	movq	-0x30(%rbp), %rax
0000000000003db7	addq	$-0x1, %rax
0000000000003dbb	movq	%rax, -0x30(%rbp)
0000000000003dbf	jmp	0x3cdc
0000000000003dc4	leaq	-0x18(%rbp), %rdi
0000000000003dc8	leaq	-0x10(%rbp), %rsi
0000000000003dcc	callq	0x27330 ## symbol stub for: __ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
0000000000003dd1	movq	%rax, %rsi
0000000000003dd4	subq	$0x3, %rax
0000000000003dd8	movq	%rsi, -0x58(%rbp)
0000000000003ddc	movq	%rax, -0x60(%rbp)
0000000000003de0	ja	0x3e98
0000000000003de6	leaq	0xc3(%rip), %rax
0000000000003ded	movq	-0x58(%rbp), %rcx
0000000000003df1	movslq	(%rax,%rcx,4), %rdx
0000000000003df5	addq	%rax, %rdx
0000000000003df8	jmpq	*%rdx
0000000000003dfa	leaq	-0x10(%rbp), %rdi
0000000000003dfe	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003e03	movq	(%rax), %rax
0000000000003e06	movq	-0x28(%rbp), %rdi
0000000000003e0a	cmpq	(%rdi), %rax
0000000000003e0d	jne	0x3e20
0000000000003e13	movq	-0x10(%rbp), %rax
0000000000003e17	movq	%rax, -0x8(%rbp)
0000000000003e1b	jmp	0x3ea0
0000000000003e20	leaq	-0x10(%rbp), %rdi
0000000000003e24	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003e29	movq	%rax, -0x68(%rbp)
0000000000003e2d	leaq	-0x10(%rbp), %rdi
0000000000003e31	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003e36	movq	(%rax), %rax
0000000000003e39	movq	-0x28(%rbp), %rdi
0000000000003e3d	cmpq	(%rdi), %rax
0000000000003e40	jne	0x3e53
0000000000003e46	movq	-0x10(%rbp), %rax
0000000000003e4a	movq	%rax, -0x8(%rbp)
0000000000003e4e	jmp	0x3ea0
0000000000003e53	leaq	-0x10(%rbp), %rdi
0000000000003e57	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003e5c	movq	%rax, -0x70(%rbp)
0000000000003e60	leaq	-0x10(%rbp), %rdi
0000000000003e64	callq	0x2739c ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003e69	movq	(%rax), %rax
0000000000003e6c	movq	-0x28(%rbp), %rdi
0000000000003e70	cmpq	(%rdi), %rax
0000000000003e73	jne	0x3e86
0000000000003e79	movq	-0x10(%rbp), %rax
0000000000003e7d	movq	%rax, -0x8(%rbp)
0000000000003e81	jmp	0x3ea0
0000000000003e86	leaq	-0x10(%rbp), %rdi
0000000000003e8a	callq	0x27306 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000003e8f	movq	%rax, -0x78(%rbp)
0000000000003e93	jmp	0x3e98
0000000000003e98	movq	-0x18(%rbp), %rax
0000000000003e9c	movq	%rax, -0x8(%rbp)
0000000000003ea0	movq	-0x8(%rbp), %rax
0000000000003ea4	addq	$0x80, %rsp
0000000000003eab	popq	%rbp
0000000000003eac	retq
0000000000003ead	nopl	(%rax)
0000000000003eb0	jrcxz	0x3eb1
0000000000003eb2	.byte 0xff #bad opcode
0000000000003eb3	pushq	0x7dffffff(%rax)
0000000000003eb9	.byte 0xff #bad opcode
0000000000003eba	.byte 0xff #bad opcode
0000000000003ebb	decl	-0x1(%rdx)
0000000000003ebe	.byte 0xff #bad opcode
0000000000003ebf	callq	*0x48(%rbp)
__ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_:
0000000000003ec0	pushq	%rbp
0000000000003ec1	movq	%rsp, %rbp
0000000000003ec4	movq	%rdi, -0x10(%rbp)
0000000000003ec8	popq	%rbp
0000000000003ec9	retq
0000000000003eca	nopw	(%rax,%rax)
__ZN9__gnu_cxxmiIPP12ModContainerS3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE:
0000000000003ed0	pushq	%rbp
0000000000003ed1	movq	%rsp, %rbp
0000000000003ed4	subq	$0x20, %rsp
0000000000003ed8	movq	%rdi, -0x8(%rbp)
0000000000003edc	movq	%rsi, -0x10(%rbp)
0000000000003ee0	movq	-0x8(%rbp), %rdi
0000000000003ee4	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003ee9	movq	(%rax), %rax
0000000000003eec	movq	-0x10(%rbp), %rdi
0000000000003ef0	movq	%rax, -0x18(%rbp)
0000000000003ef4	callq	0x27396 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP12ModContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000003ef9	movq	(%rax), %rax
0000000000003efc	movq	-0x18(%rbp), %rsi
0000000000003f00	subq	%rax, %rsi
0000000000003f03	sarq	$0x3, %rsi
0000000000003f07	movq	%rsi, %rax
0000000000003f0a	addq	$0x20, %rsp
0000000000003f0e	popq	%rbp
0000000000003f0f	retq
__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000003f10	pushq	%rbp
0000000000003f11	movq	%rsp, %rbp
0000000000003f14	subq	$0x40, %rsp
0000000000003f18	movq	%rdi, -0x10(%rbp)
0000000000003f1c	movq	%rsi, -0x18(%rbp)
0000000000003f20	movq	%rdx, -0x20(%rbp)
0000000000003f24	movb	$0x1, -0x21(%rbp)
0000000000003f28	movb	$0x1, -0x22(%rbp)
0000000000003f2c	movq	-0x10(%rbp), %rdx
0000000000003f30	movq	%rdx, -0x30(%rbp)
0000000000003f34	movq	-0x18(%rbp), %rdx
0000000000003f38	movq	%rdx, -0x38(%rbp)
0000000000003f3c	movq	-0x20(%rbp), %rdx
0000000000003f40	movq	%rdx, -0x40(%rbp)
0000000000003f44	movq	-0x30(%rbp), %rdi
0000000000003f48	movq	-0x38(%rbp), %rsi
0000000000003f4c	movq	-0x40(%rbp), %rdx
0000000000003f50	callq	0x275f4 ## symbol stub for: __ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000003f55	movq	%rax, -0x8(%rbp)
0000000000003f59	movq	-0x8(%rbp), %rax
0000000000003f5d	addq	$0x40, %rsp
0000000000003f61	popq	%rbp
0000000000003f62	retq
0000000000003f63	nopw	%cs:(%rax,%rax)
0000000000003f6d	nopl	(%rax)
__ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_S3_ET0_T_SA_S9_SaIT1_E:
0000000000003f70	pushq	%rbp
0000000000003f71	movq	%rsp, %rbp
0000000000003f74	subq	$0x40, %rsp
0000000000003f78	movq	%rdi, -0x10(%rbp)
0000000000003f7c	movq	%rsi, -0x18(%rbp)
0000000000003f80	movq	%rdx, -0x20(%rbp)
0000000000003f84	movq	-0x10(%rbp), %rdx
0000000000003f88	movq	%rdx, -0x28(%rbp)
0000000000003f8c	movq	-0x18(%rbp), %rdx
0000000000003f90	movq	%rdx, -0x30(%rbp)
0000000000003f94	movq	-0x20(%rbp), %rdx
0000000000003f98	movq	%rdx, -0x38(%rbp)
0000000000003f9c	movq	-0x28(%rbp), %rdi
0000000000003fa0	movq	-0x30(%rbp), %rsi
0000000000003fa4	movq	-0x38(%rbp), %rdx
0000000000003fa8	movq	%rcx, -0x40(%rbp)
0000000000003fac	callq	0x27834 ## symbol stub for: __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
0000000000003fb1	movq	%rax, -0x8(%rbp)
0000000000003fb5	movq	-0x8(%rbp), %rax
0000000000003fb9	addq	$0x40, %rsp
0000000000003fbd	popq	%rbp
0000000000003fbe	retq
0000000000003fbf	nop
__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES6_EvT_S9_T0_:
0000000000003fc0	pushq	%rbp
0000000000003fc1	movq	%rsp, %rbp
0000000000003fc4	subq	$0x30, %rsp
0000000000003fc8	movq	%rdi, -0x8(%rbp)
0000000000003fcc	movq	%rsi, -0x10(%rbp)
0000000000003fd0	movq	%rdx, -0x18(%rbp)
0000000000003fd4	leaq	-0x8(%rbp), %rdi
0000000000003fd8	leaq	-0x10(%rbp), %rsi
0000000000003fdc	callq	0x27348 ## symbol stub for: __ZN9__gnu_cxxneIPP13BaseContainerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0000000000003fe1	testb	$0x1, %al
0000000000003fe3	jne	0x3fee
0000000000003fe9	jmp	0x401d
0000000000003fee	movq	-0x18(%rbp), %rax
0000000000003ff2	leaq	-0x8(%rbp), %rdi
0000000000003ff6	movq	%rax, -0x20(%rbp)
0000000000003ffa	callq	0x273a8 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000003fff	movq	-0x20(%rbp), %rdi
0000000000004003	movq	%rax, %rsi
0000000000004006	callq	0x27270 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE7destroyEPS2_
000000000000400b	leaq	-0x8(%rbp), %rdi
000000000000400f	callq	0x27318 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEppEv
0000000000004014	movq	%rax, -0x28(%rbp)
0000000000004018	jmp	0x3fd4
000000000000401d	addq	$0x30, %rsp
0000000000004021	popq	%rbp
0000000000004022	retq
0000000000004023	nopw	%cs:(%rax,%rax)
000000000000402d	nopl	(%rax)
__ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000004030	pushq	%rbp
0000000000004031	movq	%rsp, %rbp
0000000000004034	subq	$0x40, %rsp
0000000000004038	movq	%rdi, -0x10(%rbp)
000000000000403c	movq	%rsi, -0x18(%rbp)
0000000000004040	movq	%rdx, -0x20(%rbp)
0000000000004044	leaq	-0x10(%rbp), %rdi
0000000000004048	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000000404d	movq	(%rax), %rdi
0000000000004050	leaq	-0x18(%rbp), %rax
0000000000004054	movq	%rdi, -0x30(%rbp)
0000000000004058	movq	%rax, %rdi
000000000000405b	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004060	movq	(%rax), %rsi
0000000000004063	leaq	-0x20(%rbp), %rdi
0000000000004067	movq	%rsi, -0x38(%rbp)
000000000000406b	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004070	movq	(%rax), %rdx
0000000000004073	movq	-0x30(%rbp), %rdi
0000000000004077	movq	-0x38(%rbp), %rsi
000000000000407b	callq	0x2784c ## symbol stub for: __ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000004080	movq	%rax, -0x28(%rbp)
0000000000004084	leaq	-0x8(%rbp), %rdi
0000000000004088	leaq	-0x28(%rbp), %rsi
000000000000408c	callq	0x2730c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000004091	movq	-0x8(%rbp), %rax
0000000000004095	addq	$0x40, %rsp
0000000000004099	popq	%rbp
000000000000409a	retq
000000000000409b	nopl	(%rax,%rax)
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIP13BaseContainerEEPT_PKS5_S8_S6_:
00000000000040a0	pushq	%rbp
00000000000040a1	movq	%rsp, %rbp
00000000000040a4	subq	$0x40, %rsp
00000000000040a8	xorl	%eax, %eax
00000000000040aa	movl	%eax, %ecx
00000000000040ac	movq	%rdi, -0x8(%rbp)
00000000000040b0	movq	%rsi, -0x10(%rbp)
00000000000040b4	movq	%rdx, -0x18(%rbp)
00000000000040b8	movq	-0x10(%rbp), %rdx
00000000000040bc	movq	-0x8(%rbp), %rsi
00000000000040c0	subq	%rsi, %rdx
00000000000040c3	sarq	$0x3, %rdx
00000000000040c7	movq	%rdx, -0x20(%rbp)
00000000000040cb	movq	-0x18(%rbp), %rdx
00000000000040cf	movq	%rcx, %rsi
00000000000040d2	subq	-0x20(%rbp), %rsi
00000000000040d6	shlq	$0x3, %rsi
00000000000040da	addq	%rsi, %rdx
00000000000040dd	movq	-0x8(%rbp), %rsi
00000000000040e1	movq	-0x20(%rbp), %rdi
00000000000040e5	shlq	$0x3, %rdi
00000000000040e9	movq	%rdi, -0x28(%rbp)
00000000000040ed	movq	%rdx, %rdi
00000000000040f0	movq	-0x28(%rbp), %rdx
00000000000040f4	movq	%rcx, -0x30(%rbp)
00000000000040f8	callq	0x279c6 ## symbol stub for: _memmove
00000000000040fd	movq	-0x18(%rbp), %rcx
0000000000004101	movq	-0x30(%rbp), %rdx
0000000000004105	subq	-0x20(%rbp), %rdx
0000000000004109	shlq	$0x3, %rdx
000000000000410d	addq	%rdx, %rcx
0000000000004110	movq	%rax, -0x38(%rbp)
0000000000004114	movq	%rcx, %rax
0000000000004117	addq	$0x40, %rsp
000000000000411b	popq	%rbp
000000000000411c	retq
000000000000411d	nopl	(%rax)
__ZN9__gnu_cxxmiIPKP13BaseContainerS4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE:
0000000000004120	pushq	%rbp
0000000000004121	movq	%rsp, %rbp
0000000000004124	subq	$0x20, %rsp
0000000000004128	movq	%rdi, -0x8(%rbp)
000000000000412c	movq	%rsi, -0x10(%rbp)
0000000000004130	movq	-0x8(%rbp), %rdi
0000000000004134	callq	0x27384 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004139	movq	(%rax), %rax
000000000000413c	movq	-0x10(%rbp), %rdi
0000000000004140	movq	%rax, -0x18(%rbp)
0000000000004144	callq	0x27384 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004149	movq	(%rax), %rax
000000000000414c	movq	-0x18(%rbp), %rsi
0000000000004150	subq	%rax, %rsi
0000000000004153	sarq	$0x3, %rsi
0000000000004157	movq	%rsi, %rax
000000000000415a	addq	$0x20, %rsp
000000000000415e	popq	%rbp
000000000000415f	retq
__ZNKSt6vectorIP13BaseContainerSaIS1_EE3endEv:
0000000000004160	pushq	%rbp
0000000000004161	movq	%rsp, %rbp
0000000000004164	subq	$0x20, %rsp
0000000000004168	movq	%rdi, -0x10(%rbp)
000000000000416c	movq	-0x10(%rbp), %rdi
0000000000004170	movq	0x8(%rdi), %rdi
0000000000004174	movq	%rdi, -0x18(%rbp)
0000000000004178	leaq	-0x8(%rbp), %rdi
000000000000417c	leaq	-0x18(%rbp), %rsi
0000000000004180	callq	0x272e8 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
0000000000004185	movq	-0x8(%rbp), %rax
0000000000004189	addq	$0x20, %rsp
000000000000418d	popq	%rbp
000000000000418e	retq
000000000000418f	nop
__ZNKSt6vectorIP13BaseContainerSaIS1_EE5beginEv:
0000000000004190	pushq	%rbp
0000000000004191	movq	%rsp, %rbp
0000000000004194	subq	$0x20, %rsp
0000000000004198	movq	%rdi, -0x10(%rbp)
000000000000419c	movq	-0x10(%rbp), %rdi
00000000000041a0	movq	(%rdi), %rdi
00000000000041a3	movq	%rdi, -0x18(%rbp)
00000000000041a7	leaq	-0x8(%rbp), %rdi
00000000000041ab	leaq	-0x18(%rbp), %rsi
00000000000041af	callq	0x272e8 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_
00000000000041b4	movq	-0x8(%rbp), %rax
00000000000041b8	addq	$0x20, %rsp
00000000000041bc	popq	%rbp
00000000000041bd	retq
00000000000041be	nop
__ZNK9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv:
00000000000041c0	pushq	%rbp
00000000000041c1	movq	%rsp, %rbp
00000000000041c4	movq	%rdi, -0x8(%rbp)
00000000000041c8	movq	-0x8(%rbp), %rax
00000000000041cc	popq	%rbp
00000000000041cd	retq
00000000000041ce	nop
__ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS4_:
00000000000041d0	pushq	%rbp
00000000000041d1	movq	%rsp, %rbp
00000000000041d4	subq	$0x10, %rsp
00000000000041d8	movq	%rdi, -0x8(%rbp)
00000000000041dc	movq	%rsi, -0x10(%rbp)
00000000000041e0	movq	-0x8(%rbp), %rdi
00000000000041e4	movq	-0x10(%rbp), %rsi
00000000000041e8	callq	0x272ee ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_
00000000000041ed	addq	$0x10, %rsp
00000000000041f1	popq	%rbp
00000000000041f2	retq
00000000000041f3	nopw	%cs:(%rax,%rax)
00000000000041fd	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKP13BaseContainerSt6vectorIS2_SaIS2_EEEC2ERKS4_:
0000000000004200	pushq	%rbp
0000000000004201	movq	%rsp, %rbp
0000000000004204	movq	%rdi, -0x8(%rbp)
0000000000004208	movq	%rsi, -0x10(%rbp)
000000000000420c	movq	-0x8(%rbp), %rsi
0000000000004210	movq	-0x10(%rbp), %rdi
0000000000004214	movq	(%rdi), %rdi
0000000000004217	movq	%rdi, (%rsi)
000000000000421a	popq	%rbp
000000000000421b	retq
000000000000421c	nopl	(%rax)
__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
0000000000004220	pushq	%rbp
0000000000004221	movq	%rsp, %rbp
0000000000004224	subq	$0x40, %rsp
0000000000004228	movq	%rdi, -0x10(%rbp)
000000000000422c	movq	%rsi, -0x18(%rbp)
0000000000004230	movq	%rdx, -0x20(%rbp)
0000000000004234	movq	-0x10(%rbp), %rdx
0000000000004238	movq	%rdx, -0x28(%rbp)
000000000000423c	movq	-0x18(%rbp), %rdx
0000000000004240	movq	%rdx, -0x30(%rbp)
0000000000004244	movq	-0x20(%rbp), %rdx
0000000000004248	movq	%rdx, -0x38(%rbp)
000000000000424c	movq	-0x28(%rbp), %rdi
0000000000004250	movq	-0x30(%rbp), %rsi
0000000000004254	movq	-0x38(%rbp), %rdx
0000000000004258	callq	0x2788e ## symbol stub for: __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
000000000000425d	movq	%rax, -0x8(%rbp)
0000000000004261	movq	-0x8(%rbp), %rax
0000000000004265	addq	$0x40, %rsp
0000000000004269	popq	%rbp
000000000000426a	retq
000000000000426b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:
0000000000004270	pushq	%rbp
0000000000004271	movq	%rsp, %rbp
0000000000004274	subq	$0x40, %rsp
0000000000004278	movq	%rdi, -0x10(%rbp)
000000000000427c	movq	%rsi, -0x18(%rbp)
0000000000004280	movq	%rdx, -0x20(%rbp)
0000000000004284	movq	-0x10(%rbp), %rdx
0000000000004288	movq	%rdx, -0x30(%rbp)
000000000000428c	movq	-0x18(%rbp), %rdx
0000000000004290	movq	%rdx, -0x38(%rbp)
0000000000004294	movq	-0x20(%rbp), %rdx
0000000000004298	movq	%rdx, -0x40(%rbp)
000000000000429c	movq	-0x30(%rbp), %rdi
00000000000042a0	movq	-0x38(%rbp), %rsi
00000000000042a4	movq	-0x40(%rbp), %rdx
00000000000042a8	callq	0x278ac ## symbol stub for: __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
00000000000042ad	movq	%rax, -0x8(%rbp)
00000000000042b1	movq	-0x8(%rbp), %rax
00000000000042b5	addq	$0x40, %rsp
00000000000042b9	popq	%rbp
00000000000042ba	retq
00000000000042bb	nopl	(%rax,%rax)
__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:
00000000000042c0	pushq	%rbp
00000000000042c1	movq	%rsp, %rbp
00000000000042c4	subq	$0x40, %rsp
00000000000042c8	movq	%rdi, -0x10(%rbp)
00000000000042cc	movq	%rsi, -0x18(%rbp)
00000000000042d0	movq	%rdx, -0x20(%rbp)
00000000000042d4	movb	$0x1, -0x21(%rbp)
00000000000042d8	movb	$0x1, -0x22(%rbp)
00000000000042dc	movq	-0x10(%rbp), %rdx
00000000000042e0	movq	%rdx, -0x30(%rbp)
00000000000042e4	movq	-0x18(%rbp), %rdx
00000000000042e8	movq	%rdx, -0x38(%rbp)
00000000000042ec	movq	-0x20(%rbp), %rdx
00000000000042f0	movq	%rdx, -0x40(%rbp)
00000000000042f4	movq	-0x30(%rbp), %rdi
00000000000042f8	movq	-0x38(%rbp), %rsi
00000000000042fc	movq	-0x40(%rbp), %rdx
0000000000004300	callq	0x275ac ## symbol stub for: __ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_
0000000000004305	movq	%rax, -0x8(%rbp)
0000000000004309	movq	-0x8(%rbp), %rax
000000000000430d	addq	$0x40, %rsp
0000000000004311	popq	%rbp
0000000000004312	retq
0000000000004313	nopw	%cs:(%rax,%rax)
000000000000431d	nopl	(%rax)
__ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS5_SaIS5_EEEESA_EET0_T_SC_SB_:
0000000000004320	pushq	%rbp
0000000000004321	movq	%rsp, %rbp
0000000000004324	subq	$0x40, %rsp
0000000000004328	movq	%rdi, -0x10(%rbp)
000000000000432c	movq	%rsi, -0x18(%rbp)
0000000000004330	movq	%rdx, -0x20(%rbp)
0000000000004334	leaq	-0x10(%rbp), %rdi
0000000000004338	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000000433d	movq	(%rax), %rdi
0000000000004340	leaq	-0x18(%rbp), %rax
0000000000004344	movq	%rdi, -0x30(%rbp)
0000000000004348	movq	%rax, %rdi
000000000000434b	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004350	movq	(%rax), %rsi
0000000000004353	leaq	-0x20(%rbp), %rdi
0000000000004357	movq	%rsi, -0x38(%rbp)
000000000000435b	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000004360	movq	(%rax), %rdx
0000000000004363	movq	-0x30(%rbp), %rdi
0000000000004367	movq	-0x38(%rbp), %rsi
000000000000436b	callq	0x277e6 ## symbol stub for: __ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000004370	movq	%rax, -0x28(%rbp)
0000000000004374	leaq	-0x8(%rbp), %rdi
0000000000004378	leaq	-0x28(%rbp), %rsi
000000000000437c	callq	0x2730c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
0000000000004381	movq	-0x8(%rbp), %rax
0000000000004385	addq	$0x40, %rsp
0000000000004389	popq	%rbp
000000000000438a	retq
000000000000438b	nopl	(%rax,%rax)
___cxx_global_var_init:
0000000000004390	pushq	%rbp
0000000000004391	movq	%rsp, %rbp
0000000000004394	subq	$0x10, %rsp
0000000000004398	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
000000000000439f	callq	0x277c8 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
00000000000043a4	movq	0x6dc75(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
00000000000043ab	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
00000000000043b2	leaq	-0x43b9(%rip), %rdx
00000000000043b9	callq	0x2793c ## symbol stub for: ___cxa_atexit
00000000000043be	movl	%eax, -0x4(%rbp)
00000000000043c1	addq	$0x10, %rsp
00000000000043c5	popq	%rbp
00000000000043c6	retq
00000000000043c7	nopw	(%rax,%rax)
___cxx_global_var_init.1:
00000000000043d0	pushq	%rbp
00000000000043d1	movq	%rsp, %rbp
00000000000043d4	subq	$0x30, %rsp
00000000000043d8	leaq	-0x8(%rbp), %rax
00000000000043dc	movq	%rax, %rdi
00000000000043df	movq	%rax, -0x20(%rbp)
00000000000043e3	callq	0x274b0 ## symbol stub for: __ZNSaIP12ModContainerEC1Ev
00000000000043e8	leaq	__ZN12ModContainer10containersE(%rip), %rdi ## ModContainer::containers
00000000000043ef	movq	-0x20(%rbp), %rsi
00000000000043f3	callq	0x27660 ## symbol stub for: __ZNSt6vectorIP12ModContainerSaIS1_EEC1ERKS2_
00000000000043f8	jmp	0x43fd
00000000000043fd	leaq	-0x8(%rbp), %rdi
0000000000004401	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
0000000000004406	movq	0x6dc0b(%rip), %rdi ## literal pool symbol address: __ZNSt6vectorIP12ModContainerSaIS1_EED1Ev
000000000000440d	leaq	__ZN12ModContainer10containersE(%rip), %rax ## ModContainer::containers
0000000000004414	movq	%rax, %rsi
0000000000004417	leaq	-0x441e(%rip), %rdx
000000000000441e	callq	0x2793c ## symbol stub for: ___cxa_atexit
0000000000004423	movl	%eax, -0x24(%rbp)
0000000000004426	addq	$0x30, %rsp
000000000000442a	popq	%rbp
000000000000442b	retq
000000000000442c	movl	%edx, %ecx
000000000000442e	movq	%rax, -0x10(%rbp)
0000000000004432	movl	%ecx, -0x14(%rbp)
0000000000004435	leaq	-0x8(%rbp), %rdi
0000000000004439	callq	0x274c2 ## symbol stub for: __ZNSaIP12ModContainerED1Ev
000000000000443e	movq	-0x10(%rbp), %rdi
0000000000004442	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000004447	ud2
0000000000004449	nopl	(%rax)
__GLOBAL__sub_I_GDML.cpp:
0000000000004450	pushq	%rbp
0000000000004451	movq	%rsp, %rbp
0000000000004454	callq	___cxx_global_var_init
0000000000004459	callq	___cxx_global_var_init.1
000000000000445e	popq	%rbp
000000000000445f	retq
__Z4dupePvPS_:
0000000000004460	pushq	%rbp
0000000000004461	movq	%rsp, %rbp
0000000000004464	subq	$0x90, %rsp
000000000000446b	movq	%rdi, -0x10(%rbp)
000000000000446f	movq	%rsi, -0x18(%rbp)
0000000000004473	cmpq	$0x0, -0x10(%rbp)
0000000000004478	je	0x4489
000000000000447e	cmpq	$0x0, -0x18(%rbp)
0000000000004483	jne	0x4495
0000000000004489	movl	$0x4, -0x4(%rbp)
0000000000004490	jmp	0x473c
0000000000004495	xorl	%esi, %esi
0000000000004497	movq	$0x0, -0x20(%rbp)
000000000000449f	movq	$0x0, -0x28(%rbp)
00000000000044a7	leaq	-0x48(%rbp), %rax
00000000000044ab	movq	%rax, %rcx
00000000000044ae	movq	%rcx, %rdi
00000000000044b1	movl	$0x20, %edx
00000000000044b6	movq	%rax, -0x78(%rbp)
00000000000044ba	callq	0x279cc ## symbol stub for: _memset
00000000000044bf	movq	-0x10(%rbp), %rdi
00000000000044c3	movq	-0x78(%rbp), %rsi
00000000000044c7	callq	0x27990 ## symbol stub for: _dladdr
00000000000044cc	cmpl	$0x0, %eax
00000000000044cf	je	0x44dd
00000000000044d5	movq	-0x40(%rbp), %rax
00000000000044d9	movq	%rax, -0x20(%rbp)
00000000000044dd	cmpq	$0x0, -0x20(%rbp)
00000000000044e2	jne	0x451b
00000000000044e8	movq	0x6db89(%rip), %rax ## literal pool symbol address: ___stderrp
00000000000044ef	movq	(%rax), %rdi
00000000000044f2	leaq	0x64b47(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Could not found a loaded mach-o image containing the given function.\n"
00000000000044f9	leaq	0x64b95(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
0000000000004500	movl	$0x1a, %ecx
0000000000004505	movb	$0x0, %al
0000000000004507	callq	0x27996 ## symbol stub for: _fprintf
000000000000450c	movl	$0x5, -0x4(%rbp)
0000000000004513	movl	%eax, -0x7c(%rbp)
0000000000004516	jmp	0x473c
000000000000451b	movl	$0x0, -0x4c(%rbp)
0000000000004522	movl	-0x4c(%rbp), %eax
0000000000004525	movl	%eax, -0x80(%rbp)
0000000000004528	callq	0x2798a ## symbol stub for: __dyld_image_count
000000000000452d	movl	-0x80(%rbp), %ecx
0000000000004530	cmpl	%eax, %ecx
0000000000004532	jae	0x457f
0000000000004538	movq	-0x20(%rbp), %rax
000000000000453c	movl	-0x4c(%rbp), %edi
000000000000453f	movq	%rax, -0x88(%rbp)
0000000000004546	callq	0x2797e ## symbol stub for: __dyld_get_image_header
000000000000454b	movq	-0x88(%rbp), %rcx
0000000000004552	cmpq	%rax, %rcx
0000000000004555	jne	0x456c
000000000000455b	movl	-0x4c(%rbp), %edi
000000000000455e	callq	0x27984 ## symbol stub for: __dyld_get_image_vmaddr_slide
0000000000004563	movq	%rax, -0x28(%rbp)
0000000000004567	jmp	0x457f
000000000000456c	jmp	0x4571
0000000000004571	movl	-0x4c(%rbp), %eax
0000000000004574	addl	$0x1, %eax
0000000000004577	movl	%eax, -0x4c(%rbp)
000000000000457a	jmp	0x4522
000000000000457f	movw	$0x0, -0x4e(%rbp)
0000000000004585	movzwl	-0x4e(%rbp), %eax
0000000000004589	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %ecx ## dupe(void*, void**)::history_size
0000000000004590	cmpl	%ecx, %eax
0000000000004592	jge	0x4616
0000000000004598	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rax ## dupe(void*, void**)::injection_history
000000000000459f	movzwl	-0x4e(%rbp), %ecx
00000000000045a3	movl	%ecx, %edx
00000000000045a5	shlq	$0x4, %rdx
00000000000045a9	addq	%rdx, %rax
00000000000045ac	movq	(%rax), %rax
00000000000045af	movq	-0x20(%rbp), %rdx
00000000000045b3	cmpq	%rdx, %rax
00000000000045b6	jne	0x4600
00000000000045bc	cmpq	$0x0, -0x18(%rbp)
00000000000045c1	je	0x45f4
00000000000045c7	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rax ## dupe(void*, void**)::injection_history
00000000000045ce	movzwl	-0x4e(%rbp), %ecx
00000000000045d2	movl	%ecx, %edx
00000000000045d4	shlq	$0x4, %rdx
00000000000045d8	addq	%rdx, %rax
00000000000045db	movq	0x8(%rax), %rax
00000000000045df	movq	-0x10(%rbp), %rdx
00000000000045e3	movq	-0x20(%rbp), %rsi
00000000000045e7	subq	%rsi, %rdx
00000000000045ea	addq	%rdx, %rax
00000000000045ed	movq	-0x18(%rbp), %rdx
00000000000045f1	movq	%rax, (%rdx)
00000000000045f4	movl	$0x0, -0x4(%rbp)
00000000000045fb	jmp	0x473c
0000000000004600	jmp	0x4605
0000000000004605	movw	-0x4e(%rbp), %ax
0000000000004609	addw	$0x1, %ax
000000000000460d	movw	%ax, -0x4e(%rbp)
0000000000004611	jmp	0x4585
0000000000004616	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %eax ## dupe(void*, void**)::history_size
000000000000461d	addl	$0x1, %eax
0000000000004620	movslq	%eax, %rcx
0000000000004623	movq	%rcx, -0x58(%rbp)
0000000000004627	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
000000000000462e	movq	-0x58(%rbp), %rdx
0000000000004632	shlq	$0x4, %rdx
0000000000004636	movq	%rcx, %rdi
0000000000004639	movq	%rdx, %rsi
000000000000463c	callq	0x279d8 ## symbol stub for: _realloc
0000000000004641	movq	%rax, __ZZ4dupePvPS_E17injection_history(%rip) ## dupe(void*, void**)::injection_history
0000000000004648	movq	-0x20(%rbp), %rax
000000000000464c	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
0000000000004653	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %r8d ## dupe(void*, void**)::history_size
000000000000465b	movl	%r8d, %edx
000000000000465e	shlq	$0x4, %rdx
0000000000004662	addq	%rdx, %rcx
0000000000004665	movq	%rax, (%rcx)
0000000000004668	movq	$0x0, -0x60(%rbp)
0000000000004670	movq	-0x20(%rbp), %rdi
0000000000004674	movq	-0x28(%rbp), %rsi
0000000000004678	leaq	-0x60(%rbp), %rdx
000000000000467c	callq	__Z12_remap_imagePvyPy ## _remap_image(void*, unsigned long long, unsigned long long*)
0000000000004681	xorl	%r8d, %r8d
0000000000004684	movl	%eax, -0x64(%rbp)
0000000000004687	cmpl	-0x64(%rbp), %r8d
000000000000468b	je	0x46c6
0000000000004691	movq	0x6d9e0(%rip), %rax ## literal pool symbol address: ___stderrp
0000000000004698	movq	(%rax), %rdi
000000000000469b	leaq	0x64a05(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to remap segements of the image. See error messages above.\n"
00000000000046a2	leaq	0x649ec(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
00000000000046a9	movl	$0x3c, %ecx
00000000000046ae	movb	$0x0, %al
00000000000046b0	callq	0x27996 ## symbol stub for: _fprintf
00000000000046b5	movl	-0x64(%rbp), %ecx
00000000000046b8	movl	%ecx, -0x4(%rbp)
00000000000046bb	movl	%eax, -0x8c(%rbp)
00000000000046c1	jmp	0x473c
00000000000046c6	cmpq	$0x0, -0x18(%rbp)
00000000000046cb	je	0x4700
00000000000046d1	movq	-0x60(%rbp), %rax
00000000000046d5	movq	-0x10(%rbp), %rcx
00000000000046d9	movq	-0x20(%rbp), %rdx
00000000000046dd	subq	%rdx, %rcx
00000000000046e0	addq	%rcx, %rax
00000000000046e3	movq	-0x18(%rbp), %rcx
00000000000046e7	movq	%rax, (%rcx)
00000000000046ea	movq	-0x10(%rbp), %rdi
00000000000046ee	movq	-0x18(%rbp), %rax
00000000000046f2	movq	(%rax), %rsi
00000000000046f5	callq	__Z17_island_jump_backPvS_ ## _island_jump_back(void*, void*)
00000000000046fa	movl	%eax, -0x90(%rbp)
0000000000004700	movq	-0x60(%rbp), %rax
0000000000004704	movq	%rax, -0x70(%rbp)
0000000000004708	movq	-0x70(%rbp), %rax
000000000000470c	movq	__ZZ4dupePvPS_E17injection_history(%rip), %rcx ## dupe(void*, void**)::injection_history
0000000000004713	movzwl	__ZZ4dupePvPS_E12history_size(%rip), %edx ## dupe(void*, void**)::history_size
000000000000471a	movl	%edx, %esi
000000000000471c	shlq	$0x4, %rsi
0000000000004720	addq	%rsi, %rcx
0000000000004723	movq	%rax, 0x8(%rcx)
0000000000004727	movq	-0x58(%rbp), %rax
000000000000472b	movw	%ax, %di
000000000000472e	movw	%di, 0x6f60b(%rip)
0000000000004735	movl	$0x0, -0x4(%rbp)
000000000000473c	movl	-0x4(%rbp), %eax
000000000000473f	addq	$0x90, %rsp
0000000000004746	popq	%rbp
0000000000004747	retq
0000000000004748	nopl	(%rax,%rax)
__Z12_remap_imagePvyPy:
0000000000004750	pushq	%rbp
0000000000004751	movq	%rsp, %rbp
0000000000004754	subq	$0xd0, %rsp
000000000000475b	movq	%rdi, -0x10(%rbp)
000000000000475f	movq	%rsi, -0x18(%rbp)
0000000000004763	movq	%rdx, -0x20(%rbp)
0000000000004767	cmpq	$0x0, -0x10(%rbp)
000000000000476c	setne	%al
000000000000476f	xorb	$-0x1, %al
0000000000004771	testb	$0x1, %al
0000000000004773	jne	0x477e
0000000000004779	jmp	0x479d
000000000000477e	leaq	0x64974(%rip), %rdi ## literal pool for: "_remap_image"
0000000000004785	leaq	0x64909(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
000000000000478c	leaq	0x64973(%rip), %rcx ## literal pool for: "image"
0000000000004793	movl	$0x4f, %edx
0000000000004798	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000479d	jmp	0x47a2
00000000000047a2	cmpq	$0x0, -0x20(%rbp)
00000000000047a7	setne	%al
00000000000047aa	xorb	$-0x1, %al
00000000000047ac	testb	$0x1, %al
00000000000047ae	jne	0x47b9
00000000000047b4	jmp	0x47d8
00000000000047b9	leaq	0x64939(%rip), %rdi ## literal pool for: "_remap_image"
00000000000047c0	leaq	0x648ce(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
00000000000047c7	leaq	0x6493e(%rip), %rcx ## literal pool for: "new_location"
00000000000047ce	movl	$0x50, %edx
00000000000047d3	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000047d8	jmp	0x47dd
00000000000047dd	movq	$0x0, -0x28(%rbp)
00000000000047e5	movq	-0x10(%rbp), %rdi
00000000000047e9	movq	-0x18(%rbp), %rsi
00000000000047ed	leaq	-0x28(%rbp), %rdx
00000000000047f1	callq	__Z11_image_sizePvyPy ## _image_size(void*, unsigned long long, unsigned long long*)
00000000000047f6	movq	0x6d883(%rip), %rdx ## literal pool symbol address: _mach_task_self_
00000000000047fd	movq	%rax, -0x30(%rbp)
0000000000004801	movl	$0x5, -0x34(%rbp)
0000000000004808	movq	-0x20(%rbp), %rax
000000000000480c	movq	$0x0, (%rax)
0000000000004813	movl	(%rdx), %edi
0000000000004815	movq	-0x20(%rbp), %rsi
0000000000004819	movq	-0x30(%rbp), %rax
000000000000481d	addq	-0x28(%rbp), %rax
0000000000004821	movq	%rax, %rdx
0000000000004824	movl	$0x1, %ecx
0000000000004829	callq	0x2799c ## symbol stub for: _mach_vm_allocate
000000000000482e	xorl	%ecx, %ecx
0000000000004830	movl	%eax, -0x34(%rbp)
0000000000004833	movq	-0x28(%rbp), %rdx
0000000000004837	movq	-0x20(%rbp), %rsi
000000000000483b	addq	(%rsi), %rdx
000000000000483e	movq	%rdx, (%rsi)
0000000000004841	cmpl	-0x34(%rbp), %ecx
0000000000004844	je	0x4883
000000000000484a	movq	0x6d827(%rip), %rax ## literal pool symbol address: ___stderrp
0000000000004851	movq	(%rax), %rdi
0000000000004854	movl	-0x34(%rbp), %r8d
0000000000004858	leaq	0x648ba(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to allocate a memory region for the function copy - mach_vm_allocate() returned 0x%x\n\n"
000000000000485f	leaq	0x6482f(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
0000000000004866	movl	$0x75, %ecx
000000000000486b	movb	$0x0, %al
000000000000486d	callq	0x27996 ## symbol stub for: _fprintf
0000000000004872	movl	-0x34(%rbp), %ecx
0000000000004875	movl	%ecx, -0x4(%rbp)
0000000000004878	movl	%eax, -0x84(%rbp)
000000000000487e	jmp	0x49f3
0000000000004883	movq	-0x10(%rbp), %rax
0000000000004887	movq	%rax, -0x40(%rbp)
000000000000488b	movq	-0x40(%rbp), %rax
000000000000488f	addq	$0x20, %rax
0000000000004893	movq	%rax, -0x48(%rbp)
0000000000004897	movl	$0x0, -0x4c(%rbp)
000000000000489e	movl	-0x4c(%rbp), %eax
00000000000048a1	movq	-0x40(%rbp), %rcx
00000000000048a5	cmpl	0x10(%rcx), %eax
00000000000048a8	jae	0x49b4
00000000000048ae	movq	-0x48(%rbp), %rax
00000000000048b2	cmpl	$0x19, (%rax)
00000000000048b5	je	0x48c0
00000000000048bb	jmp	0x4992
00000000000048c0	movq	-0x48(%rbp), %rax
00000000000048c4	movq	%rax, -0x58(%rbp)
00000000000048c8	movq	-0x58(%rbp), %rax
00000000000048cc	movq	0x18(%rax), %rax
00000000000048d0	movq	%rax, -0x60(%rbp)
00000000000048d4	movq	-0x58(%rbp), %rax
00000000000048d8	movq	0x20(%rax), %rax
00000000000048dc	movq	%rax, -0x68(%rbp)
00000000000048e0	cmpq	$0x0, -0x68(%rbp)
00000000000048e5	jne	0x48f0
00000000000048eb	jmp	0x4992
00000000000048f0	xorl	%eax, %eax
00000000000048f2	movl	%eax, %ecx
00000000000048f4	xorl	%eax, %eax
00000000000048f6	movq	0x6d783(%rip), %rdx ## literal pool symbol address: _mach_task_self_
00000000000048fd	movq	-0x60(%rbp), %rsi
0000000000004901	addq	-0x18(%rbp), %rsi
0000000000004905	movq	%rsi, -0x70(%rbp)
0000000000004909	movq	-0x20(%rbp), %rsi
000000000000490d	movq	(%rsi), %rsi
0000000000004910	movq	-0x70(%rbp), %rdi
0000000000004914	movq	-0x40(%rbp), %r8
0000000000004918	subq	%r8, %rdi
000000000000491b	addq	%rdi, %rsi
000000000000491e	movq	%rsi, -0x78(%rbp)
0000000000004922	movl	(%rdx), %edi
0000000000004924	movq	-0x68(%rbp), %rsi
0000000000004928	movl	(%rdx), %r9d
000000000000492b	movq	-0x70(%rbp), %rdx
000000000000492f	leaq	-0x78(%rbp), %r8
0000000000004933	movq	%rsi, -0x90(%rbp)
000000000000493a	movq	%r8, %rsi
000000000000493d	movq	-0x90(%rbp), %r8
0000000000004944	movq	%rdx, -0x98(%rbp)
000000000000494b	movq	%r8, %rdx
000000000000494e	movl	$0x4000, %r10d
0000000000004954	movl	%r10d, %r8d
0000000000004957	movq	-0x98(%rbp), %r11
000000000000495e	movq	%r11, (%rsp)
0000000000004962	movl	$0x1, 0x8(%rsp)
000000000000496a	leaq	-0x7c(%rbp), %r11
000000000000496e	movq	%r11, 0x10(%rsp)
0000000000004973	leaq	-0x80(%rbp), %r11
0000000000004977	movq	%r11, 0x18(%rsp)
000000000000497c	movl	$0x0, 0x20(%rsp)
0000000000004984	movl	%eax, -0x9c(%rbp)
000000000000498a	callq	0x279ae ## symbol stub for: _mach_vm_remap
000000000000498f	movl	%eax, -0x34(%rbp)
0000000000004992	movl	-0x4c(%rbp), %eax
0000000000004995	addl	$0x1, %eax
0000000000004998	movl	%eax, -0x4c(%rbp)
000000000000499b	movq	-0x48(%rbp), %rcx
000000000000499f	movq	-0x48(%rbp), %rdx
00000000000049a3	movl	0x4(%rdx), %eax
00000000000049a6	movl	%eax, %edx
00000000000049a8	addq	%rdx, %rcx
00000000000049ab	movq	%rcx, -0x48(%rbp)
00000000000049af	jmp	0x489e
00000000000049b4	xorl	%eax, %eax
00000000000049b6	cmpl	-0x34(%rbp), %eax
00000000000049b9	je	0x49ed
00000000000049bf	movq	0x6d6b2(%rip), %rax ## literal pool symbol address: ___stderrp
00000000000049c6	movq	(%rax), %rdi
00000000000049c9	movl	-0x34(%rbp), %r8d
00000000000049cd	leaq	0x647b2(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Failed to remap the function implementation to the new address - mach_vm_remap() returned 0x%x\n\n"
00000000000049d4	leaq	0x646ba(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
00000000000049db	movl	$0x9f, %ecx
00000000000049e0	movb	$0x0, %al
00000000000049e2	callq	0x27996 ## symbol stub for: _fprintf
00000000000049e7	movl	%eax, -0xa0(%rbp)
00000000000049ed	movl	-0x34(%rbp), %eax
00000000000049f0	movl	%eax, -0x4(%rbp)
00000000000049f3	movl	-0x4(%rbp), %eax
00000000000049f6	addq	$0xd0, %rsp
00000000000049fd	popq	%rbp
00000000000049fe	retq
00000000000049ff	nop
__Z17_island_jump_backPvS_:
0000000000004a00	pushq	%rbp
0000000000004a01	movq	%rsp, %rbp
0000000000004a04	subq	$0x670, %rsp
0000000000004a0b	xorl	%eax, %eax
0000000000004a0d	movq	0x6d65c(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
0000000000004a14	movq	(%rcx), %rcx
0000000000004a17	movq	%rcx, -0x8(%rbp)
0000000000004a1b	movq	%rdi, -0x70(%rbp)
0000000000004a1f	movq	%rsi, -0x78(%rbp)
0000000000004a23	movl	$0x1e, -0x7c(%rbp)
0000000000004a2a	leaq	-0x20(%rbp), %rdi
0000000000004a2e	movl	%eax, %esi
0000000000004a30	movl	$0x2, %edx
0000000000004a35	callq	_ZydisDecoderInit
0000000000004a3a	movl	$0x0, -0x80(%rbp)
0000000000004a41	leaq	-0x60(%rbp), %rcx
0000000000004a45	movq	-0x78(%rbp), %rsi
0000000000004a49	movq	%rcx, %rdi
0000000000004a4c	movl	$0x40, %edx
0000000000004a51	movl	%eax, -0x650(%rbp)
0000000000004a57	callq	0x279c0 ## symbol stub for: _memcpy
0000000000004a5c	movb	$0x0, -0x81(%rbp)
0000000000004a63	leaq	-0x60(%rbp), %rax
0000000000004a67	movslq	-0x80(%rbp), %rcx
0000000000004a6b	addq	%rcx, %rax
0000000000004a6e	movl	-0x7c(%rbp), %edx
0000000000004a71	addl	$0xf, %edx
0000000000004a74	subl	-0x80(%rbp), %edx
0000000000004a77	movslq	%edx, %rdx
0000000000004a7a	leaq	-0x20(%rbp), %rdi
0000000000004a7e	movq	%rax, %rsi
0000000000004a81	leaq	-0x648(%rbp), %rcx
0000000000004a88	callq	_ZydisDecoderDecodeBuffer
0000000000004a8d	andl	$0x80000000, %eax
0000000000004a92	cmpl	$0x0, %eax
0000000000004a95	setne	%r8b
0000000000004a99	xorb	$-0x1, %r8b
0000000000004a9d	testb	$0x1, %r8b
0000000000004aa1	jne	0x4aac
0000000000004aa7	jmp	0x4adc
0000000000004aac	movzbl	-0x640(%rbp), %eax
0000000000004ab3	addl	-0x80(%rbp), %eax
0000000000004ab6	movl	%eax, -0x80(%rbp)
0000000000004ab9	movl	-0x80(%rbp), %eax
0000000000004abc	cmpl	-0x7c(%rbp), %eax
0000000000004abf	jl	0x4ad7
0000000000004ac5	movb	$0x1, -0x81(%rbp)
0000000000004acc	movl	-0x80(%rbp), %eax
0000000000004acf	movl	%eax, -0x7c(%rbp)
0000000000004ad2	jmp	0x4adc
0000000000004ad7	jmp	0x4a63
0000000000004adc	testb	$0x1, -0x81(%rbp)
0000000000004ae3	je	0x4b94
0000000000004ae9	movq	-0x70(%rbp), %rax
0000000000004aed	movslq	-0x7c(%rbp), %rcx
0000000000004af1	addq	%rcx, %rax
0000000000004af4	movslq	-0x80(%rbp), %rcx
0000000000004af8	leaq	-0x60(%rbp), %rdx
0000000000004afc	addq	%rcx, %rdx
0000000000004aff	movq	%rax, %rdi
0000000000004b02	movq	%rdx, %rsi
0000000000004b05	callq	__Z14_get_jmp_bytesPvPc ## _get_jmp_bytes(void*, char*)
0000000000004b0a	movl	%eax, -0x64c(%rbp)
0000000000004b10	cmpl	$0x0, -0x64c(%rbp)
0000000000004b17	jne	0x4b8f
0000000000004b1d	movq	-0x78(%rbp), %rdi
0000000000004b21	movl	$0x40, %esi
0000000000004b26	movl	$0x7, %edx
0000000000004b2b	callq	__Z21_protectProcessMemoryymi ## _protectProcessMemory(unsigned long long, unsigned long, int)
0000000000004b30	movq	-0x78(%rbp), %rdi
0000000000004b34	leaq	-0x60(%rbp), %rsi
0000000000004b38	movl	$0x40, %edx
0000000000004b3d	movl	%eax, -0x654(%rbp)
0000000000004b43	callq	0x279c0 ## symbol stub for: _memcpy
0000000000004b48	movq	-0x78(%rbp), %rsi
0000000000004b4c	movl	-0x7c(%rbp), %edx
0000000000004b4f	movq	-0x70(%rbp), %rdi
0000000000004b53	movslq	-0x7c(%rbp), %rcx
0000000000004b57	addq	%rcx, %rdi
0000000000004b5a	addq	$0x4, %rdi
0000000000004b5e	leaq	0x646ab(%rip), %rcx ## literal pool for: "Patched %p + %d with a jump to %p\n"
0000000000004b65	movq	%rdi, -0x660(%rbp)
0000000000004b6c	movq	%rcx, %rdi
0000000000004b6f	movq	-0x660(%rbp), %rcx
0000000000004b76	movb	$0x0, %al
0000000000004b78	callq	0x279d2 ## symbol stub for: _printf
0000000000004b7d	movl	$0x0, -0x64(%rbp)
0000000000004b84	movl	%eax, -0x664(%rbp)
0000000000004b8a	jmp	0x4bc5
0000000000004b8f	jmp	0x4bc5
0000000000004b94	movq	0x6d4dd(%rip), %rax ## literal pool symbol address: ___stderrp
0000000000004b9b	movq	(%rax), %rdi
0000000000004b9e	leaq	0x6468e(%rip), %rsi ## literal pool for: "%s:%d:\n\terror: Could not parse assembly, this really shouldnt happen wtf\n"
0000000000004ba5	leaq	0x644e9(%rip), %rdx ## literal pool for: "GDML/lowLevel.cpp"
0000000000004bac	movl	$0xeb, %ecx
0000000000004bb1	movb	$0x0, %al
0000000000004bb3	callq	0x27996 ## symbol stub for: _fprintf
0000000000004bb8	movl	$0x3, -0x64(%rbp)
0000000000004bbf	movl	%eax, -0x668(%rbp)
0000000000004bc5	movl	-0x64(%rbp), %eax
0000000000004bc8	movq	0x6d4a1(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
0000000000004bcf	movq	(%rcx), %rcx
0000000000004bd2	movq	-0x8(%rbp), %rdx
0000000000004bd6	cmpq	%rdx, %rcx
0000000000004bd9	movl	%eax, -0x66c(%rbp)
0000000000004bdf	jne	0x4bf4
0000000000004be5	movl	-0x66c(%rbp), %eax
0000000000004beb	addq	$0x670, %rsp
0000000000004bf2	popq	%rbp
0000000000004bf3	retq
0000000000004bf4	callq	0x27978 ## symbol stub for: ___stack_chk_fail
0000000000004bf9	ud2
0000000000004bfb	nopl	(%rax,%rax)
__Z11_image_sizePvyPy:
0000000000004c00	pushq	%rbp
0000000000004c01	movq	%rsp, %rbp
0000000000004c04	subq	$0x60, %rsp
0000000000004c08	movq	%rdi, -0x8(%rbp)
0000000000004c0c	movq	%rsi, -0x10(%rbp)
0000000000004c10	movq	%rdx, -0x18(%rbp)
0000000000004c14	cmpq	$0x0, -0x8(%rbp)
0000000000004c19	setne	%al
0000000000004c1c	xorb	$-0x1, %al
0000000000004c1e	testb	$0x1, %al
0000000000004c20	jne	0x4c2b
0000000000004c26	jmp	0x4c4a
0000000000004c2b	leaq	0x645c4(%rip), %rdi ## literal pool for: "_image_size"
0000000000004c32	leaq	0x6445c(%rip), %rsi ## literal pool for: "GDML/lowLevel.cpp"
0000000000004c39	leaq	0x644c6(%rip), %rcx ## literal pool for: "image"
0000000000004c40	movl	$0xa7, %edx
0000000000004c45	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000004c4a	jmp	0x4c4f
0000000000004c4f	movq	-0x8(%rbp), %rax
0000000000004c53	movq	%rax, -0x20(%rbp)
0000000000004c57	movq	-0x20(%rbp), %rax
0000000000004c5b	addq	$0x20, %rax
0000000000004c5f	movq	%rax, -0x28(%rbp)
0000000000004c63	movq	-0x8(%rbp), %rax
0000000000004c67	subq	-0x10(%rbp), %rax
0000000000004c6b	movq	%rax, -0x30(%rbp)
0000000000004c6f	movq	-0x30(%rbp), %rax
0000000000004c73	movq	%rax, -0x38(%rbp)
0000000000004c77	movq	$0x0, -0x40(%rbp)
0000000000004c7f	movq	$0x0, -0x48(%rbp)
0000000000004c87	movl	$0x0, -0x4c(%rbp)
0000000000004c8e	movl	-0x4c(%rbp), %eax
0000000000004c91	movq	-0x20(%rbp), %rcx
0000000000004c95	cmpl	0x10(%rcx), %eax
0000000000004c98	jae	0x4d7d
0000000000004c9e	movq	-0x28(%rbp), %rax
0000000000004ca2	cmpl	$0x19, (%rax)
0000000000004ca5	je	0x4cb0
0000000000004cab	jmp	0x4d5b
0000000000004cb0	xorl	%eax, %eax
0000000000004cb2	movq	-0x28(%rbp), %rcx
0000000000004cb6	movq	%rcx, -0x58(%rbp)
0000000000004cba	movq	-0x58(%rbp), %rcx
0000000000004cbe	addq	$0x8, %rcx
0000000000004cc2	leaq	0x64539(%rip), %rdi ## literal pool for: "__DATA"
0000000000004cc9	movq	%rcx, %rsi
0000000000004ccc	movl	%eax, -0x5c(%rbp)
0000000000004ccf	callq	0x279de ## symbol stub for: _strcmp
0000000000004cd4	movl	-0x5c(%rbp), %edx
0000000000004cd7	cmpl	%eax, %edx
0000000000004cd9	jne	0x4cf0
0000000000004cdf	movq	-0x58(%rbp), %rax
0000000000004ce3	movq	0x18(%rax), %rax
0000000000004ce7	movq	%rax, -0x40(%rbp)
0000000000004ceb	jmp	0x4d28
0000000000004cf0	xorl	%eax, %eax
0000000000004cf2	movq	-0x58(%rbp), %rcx
0000000000004cf6	addq	$0x8, %rcx
0000000000004cfa	leaq	0x64508(%rip), %rdi ## literal pool for: "__TEXT"
0000000000004d01	movq	%rcx, %rsi
0000000000004d04	movl	%eax, -0x60(%rbp)
0000000000004d07	callq	0x279de ## symbol stub for: _strcmp
0000000000004d0c	movl	-0x60(%rbp), %edx
0000000000004d0f	cmpl	%eax, %edx
0000000000004d11	jne	0x4d23
0000000000004d17	movq	-0x58(%rbp), %rax
0000000000004d1b	movq	0x18(%rax), %rax
0000000000004d1f	movq	%rax, -0x48(%rbp)
0000000000004d23	jmp	0x4d28
0000000000004d28	movq	-0x58(%rbp), %rax
0000000000004d2c	movq	0x18(%rax), %rax
0000000000004d30	movq	-0x58(%rbp), %rcx
0000000000004d34	addq	0x20(%rcx), %rax
0000000000004d38	cmpq	-0x38(%rbp), %rax
0000000000004d3c	jbe	0x4d56
0000000000004d42	movq	-0x58(%rbp), %rax
0000000000004d46	movq	0x18(%rax), %rax
0000000000004d4a	movq	-0x58(%rbp), %rcx
0000000000004d4e	addq	0x20(%rcx), %rax
0000000000004d52	movq	%rax, -0x38(%rbp)
0000000000004d56	jmp	0x4d5b
0000000000004d5b	movl	-0x4c(%rbp), %eax
0000000000004d5e	addl	$0x1, %eax
0000000000004d61	movl	%eax, -0x4c(%rbp)
0000000000004d64	movq	-0x28(%rbp), %rcx
0000000000004d68	movq	-0x28(%rbp), %rdx
0000000000004d6c	movl	0x4(%rdx), %eax
0000000000004d6f	movl	%eax, %edx
0000000000004d71	addq	%rdx, %rcx
0000000000004d74	movq	%rcx, -0x28(%rbp)
0000000000004d78	jmp	0x4c8e
0000000000004d7d	movq	-0x40(%rbp), %rax
0000000000004d81	cmpq	-0x48(%rbp), %rax
0000000000004d85	jae	0x4d9a
0000000000004d8b	movq	-0x48(%rbp), %rax
0000000000004d8f	subq	-0x40(%rbp), %rax
0000000000004d93	movq	-0x18(%rbp), %rcx
0000000000004d97	movq	%rax, (%rcx)
0000000000004d9a	movq	-0x38(%rbp), %rax
0000000000004d9e	subq	-0x30(%rbp), %rax
0000000000004da2	addq	$0x60, %rsp
0000000000004da6	popq	%rbp
0000000000004da7	retq
0000000000004da8	nopl	(%rax,%rax)
__Z14_get_jmp_bytesPvPc:
0000000000004db0	pushq	%rbp
0000000000004db1	movq	%rsp, %rbp
0000000000004db4	subq	$0x40, %rsp
0000000000004db8	movq	0x6d2b1(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
0000000000004dbf	movq	(%rax), %rax
0000000000004dc2	movq	%rax, -0x8(%rbp)
0000000000004dc6	movq	%rdi, -0x10(%rbp)
0000000000004dca	movq	%rsi, -0x18(%rbp)
0000000000004dce	movl	$0x10, -0x1c(%rbp)
0000000000004dd5	movl	$0x0, -0x20(%rbp)
0000000000004ddc	movl	-0x1c(%rbp), %ecx
0000000000004ddf	movl	%ecx, %eax
0000000000004de1	movq	%rsp, %rsi
0000000000004de4	movq	%rsi, -0x28(%rbp)
0000000000004de8	movq	%rax, %rsi
0000000000004deb	addq	$0xf, %rsi
0000000000004def	andq	$-0x10, %rsi
0000000000004df3	movq	%rsp, %rdi
0000000000004df6	subq	%rsi, %rdi
0000000000004df9	movq	%rdi, %rsp
0000000000004dfc	movq	%rax, -0x30(%rbp)
0000000000004e00	movb	$-0x1, (%rdi)
0000000000004e03	movb	$0x25, 0x1(%rdi)
0000000000004e07	movl	$0x0, 0x2(%rdi)
0000000000004e0e	movq	-0x10(%rbp), %rax
0000000000004e12	movq	%rax, 0x6(%rdi)
0000000000004e16	movq	-0x18(%rbp), %rax
0000000000004e1a	movl	-0x1c(%rbp), %ecx
0000000000004e1d	movl	%ecx, %edx
0000000000004e1f	movq	%rdi, -0x38(%rbp)
0000000000004e23	movq	%rax, %rdi
0000000000004e26	movq	-0x38(%rbp), %rsi
0000000000004e2a	callq	0x279c0 ## symbol stub for: _memcpy
0000000000004e2f	movl	-0x20(%rbp), %eax
0000000000004e32	movq	-0x28(%rbp), %rdx
0000000000004e36	movq	%rdx, %rsp
0000000000004e39	movq	0x6d230(%rip), %rdx ## literal pool symbol address: ___stack_chk_guard
0000000000004e40	movq	(%rdx), %rdx
0000000000004e43	movq	-0x8(%rbp), %rsi
0000000000004e47	cmpq	%rsi, %rdx
0000000000004e4a	movl	%eax, -0x3c(%rbp)
0000000000004e4d	jne	0x4e5b
0000000000004e53	movl	-0x3c(%rbp), %eax
0000000000004e56	movq	%rbp, %rsp
0000000000004e59	popq	%rbp
0000000000004e5a	retq
0000000000004e5b	callq	0x27978 ## symbol stub for: ___stack_chk_fail
0000000000004e60	ud2
0000000000004e62	nopw	%cs:(%rax,%rax)
0000000000004e6c	nopl	(%rax)
__Z21_protectProcessMemoryymi:
0000000000004e70	pushq	%rbp
0000000000004e71	movq	%rsp, %rbp
0000000000004e74	subq	$0x20, %rsp
0000000000004e78	xorl	%ecx, %ecx
0000000000004e7a	movq	0x6d1ff(%rip), %rax ## literal pool symbol address: _mach_task_self_
0000000000004e81	movq	%rdi, -0x8(%rbp)
0000000000004e85	movq	%rsi, -0x10(%rbp)
0000000000004e89	movl	%edx, -0x14(%rbp)
0000000000004e8c	movl	(%rax), %edi
0000000000004e8e	movq	-0x8(%rbp), %rsi
0000000000004e92	movq	-0x10(%rbp), %rdx
0000000000004e96	movl	-0x14(%rbp), %r8d
0000000000004e9a	callq	0x279a2 ## symbol stub for: _mach_vm_protect
0000000000004e9f	addq	$0x20, %rsp
0000000000004ea3	popq	%rbp
0000000000004ea4	retq
0000000000004ea5	nopw	%cs:(%rax,%rax)
0000000000004eaf	nop
__Z6readPMymPc:
0000000000004eb0	pushq	%rbp
0000000000004eb1	movq	%rsp, %rbp
0000000000004eb4	subq	$0x20, %rsp
0000000000004eb8	movq	0x6d1c1(%rip), %rax ## literal pool symbol address: _mach_task_self_
0000000000004ebf	movq	%rdi, -0x8(%rbp)
0000000000004ec3	movq	%rsi, -0x10(%rbp)
0000000000004ec7	movq	%rdx, -0x18(%rbp)
0000000000004ecb	movl	(%rax), %edi
0000000000004ecd	movq	-0x8(%rbp), %rsi
0000000000004ed1	movq	-0x10(%rbp), %rdx
0000000000004ed5	movq	-0x18(%rbp), %rax
0000000000004ed9	movq	%rax, %rcx
0000000000004edc	leaq	-0x1c(%rbp), %r8
0000000000004ee0	callq	0x279a8 ## symbol stub for: _mach_vm_read
0000000000004ee5	addq	$0x20, %rsp
0000000000004ee9	popq	%rbp
0000000000004eea	retq
0000000000004eeb	nopl	(%rax,%rax)
__Z7writePMymPc:
0000000000004ef0	pushq	%rbp
0000000000004ef1	movq	%rsp, %rbp
0000000000004ef4	subq	$0x30, %rsp
0000000000004ef8	movq	%rdi, -0x10(%rbp)
0000000000004efc	movq	%rsi, -0x18(%rbp)
0000000000004f00	movq	%rdx, -0x20(%rbp)
0000000000004f04	movq	-0x10(%rbp), %rdi
0000000000004f08	movq	-0x18(%rbp), %rsi
0000000000004f0c	movl	$0x7, %edx
0000000000004f11	callq	__Z21_protectProcessMemoryymi ## _protectProcessMemory(unsigned long long, unsigned long, int)
0000000000004f16	movl	%eax, -0x24(%rbp)
0000000000004f19	cmpl	$0x0, -0x24(%rbp)
0000000000004f1d	je	0x4f2e
0000000000004f23	movl	-0x24(%rbp), %eax
0000000000004f26	movl	%eax, -0x4(%rbp)
0000000000004f29	jmp	0x4f4d
0000000000004f2e	movq	0x6d14b(%rip), %rax ## literal pool symbol address: _mach_task_self_
0000000000004f35	movl	(%rax), %edi
0000000000004f37	movq	-0x10(%rbp), %rsi
0000000000004f3b	movq	-0x20(%rbp), %rdx
0000000000004f3f	movq	-0x18(%rbp), %rax
0000000000004f43	movl	%eax, %ecx
0000000000004f45	callq	0x279b4 ## symbol stub for: _mach_vm_write
0000000000004f4a	movl	%eax, -0x4(%rbp)
0000000000004f4d	movl	-0x4(%rbp), %eax
0000000000004f50	addq	$0x30, %rsp
0000000000004f54	popq	%rbp
0000000000004f55	retq
0000000000004f56	nop
0000000000004f57	nop
0000000000004f58	nop
0000000000004f59	nop
0000000000004f5a	nop
0000000000004f5b	nop
0000000000004f5c	nop
0000000000004f5d	nop
0000000000004f5e	nop
0000000000004f5f	nop
_ZydisRegisterEncode:
0000000000004f60	pushq	%rbp
0000000000004f61	movq	%rsp, %rbp
0000000000004f64	movb	%sil, %al
0000000000004f67	movl	%edi, -0x8(%rbp)
0000000000004f6a	movb	%al, -0x9(%rbp)
0000000000004f6d	movl	-0x8(%rbp), %esi
0000000000004f70	testl	%esi, %esi
0000000000004f72	movl	%esi, -0x10(%rbp)
0000000000004f75	je	0x4f97
0000000000004f7b	jmp	0x4f80
0000000000004f80	movl	-0x10(%rbp), %eax
0000000000004f83	addl	$-0xb, %eax
0000000000004f86	subl	$0x1, %eax
0000000000004f89	movl	%eax, -0x14(%rbp)
0000000000004f8c	ja	0x4f9c
0000000000004f92	jmp	0x4f97
0000000000004f97	jmp	0x500a
0000000000004f9c	movl	-0x8(%rbp), %eax
0000000000004f9f	movl	%eax, %ecx
0000000000004fa1	cmpq	$0x13, %rcx
0000000000004fa5	jae	0x5005
0000000000004fab	movzbl	-0x9(%rbp), %eax
0000000000004faf	movl	-0x8(%rbp), %ecx
0000000000004fb2	movl	%ecx, %edx
0000000000004fb4	shlq	$0x4, %rdx
0000000000004fb8	leaq	_REGISTER_MAP(%rip), %rsi
0000000000004fbf	movq	%rsi, %rdi
0000000000004fc2	addq	%rdx, %rdi
0000000000004fc5	movl	0x8(%rdi), %ecx
0000000000004fc8	movl	-0x8(%rbp), %r8d
0000000000004fcc	movl	%r8d, %edx
0000000000004fcf	shlq	$0x4, %rdx
0000000000004fd3	addq	%rdx, %rsi
0000000000004fd6	subl	0x4(%rsi), %ecx
0000000000004fd9	cmpl	%ecx, %eax
0000000000004fdb	ja	0x5005
0000000000004fe1	movl	-0x8(%rbp), %eax
0000000000004fe4	movl	%eax, %ecx
0000000000004fe6	shlq	$0x4, %rcx
0000000000004fea	leaq	_REGISTER_MAP(%rip), %rdx
0000000000004ff1	addq	%rcx, %rdx
0000000000004ff4	movl	0x4(%rdx), %eax
0000000000004ff7	movzbl	-0x9(%rbp), %esi
0000000000004ffb	addl	%esi, %eax
0000000000004ffd	movl	%eax, -0x4(%rbp)
0000000000005000	jmp	0x5011
0000000000005005	jmp	0x500a
000000000000500a	movl	$0x0, -0x4(%rbp)
0000000000005011	movl	-0x4(%rbp), %eax
0000000000005014	popq	%rbp
0000000000005015	retq
0000000000005016	nopw	%cs:(%rax,%rax)
_ZydisRegisterGetId:
0000000000005020	pushq	%rbp
0000000000005021	movq	%rsp, %rbp
0000000000005024	movl	%edi, -0x8(%rbp)
0000000000005027	movq	$0x0, -0x10(%rbp)
000000000000502f	cmpq	$0x13, -0x10(%rbp)
0000000000005034	jae	0x50f3
000000000000503a	movq	-0x10(%rbp), %rax
000000000000503e	shlq	$0x4, %rax
0000000000005042	leaq	_REGISTER_MAP(%rip), %rcx
0000000000005049	movl	(%rax,%rcx), %edx
000000000000504c	testl	%edx, %edx
000000000000504e	movl	%edx, -0x14(%rbp)
0000000000005051	je	0x5073
0000000000005057	jmp	0x505c
000000000000505c	movl	-0x14(%rbp), %eax
000000000000505f	addl	$-0xb, %eax
0000000000005062	subl	$0x1, %eax
0000000000005065	movl	%eax, -0x18(%rbp)
0000000000005068	ja	0x5078
000000000000506e	jmp	0x5073
0000000000005073	jmp	0x50dd
0000000000005078	movl	-0x8(%rbp), %eax
000000000000507b	movq	-0x10(%rbp), %rcx
000000000000507f	shlq	$0x4, %rcx
0000000000005083	leaq	_REGISTER_MAP(%rip), %rdx
000000000000508a	addq	%rcx, %rdx
000000000000508d	cmpl	0x4(%rdx), %eax
0000000000005090	jb	0x50d8
0000000000005096	movl	-0x8(%rbp), %eax
0000000000005099	movq	-0x10(%rbp), %rcx
000000000000509d	shlq	$0x4, %rcx
00000000000050a1	leaq	_REGISTER_MAP(%rip), %rdx
00000000000050a8	addq	%rcx, %rdx
00000000000050ab	cmpl	0x8(%rdx), %eax
00000000000050ae	ja	0x50d8
00000000000050b4	movl	-0x8(%rbp), %eax
00000000000050b7	movq	-0x10(%rbp), %rcx
00000000000050bb	shlq	$0x4, %rcx
00000000000050bf	leaq	_REGISTER_MAP(%rip), %rdx
00000000000050c6	addq	%rcx, %rdx
00000000000050c9	subl	0x4(%rdx), %eax
00000000000050cc	movb	%al, %sil
00000000000050cf	movb	%sil, -0x1(%rbp)
00000000000050d3	jmp	0x50f7
00000000000050d8	jmp	0x50dd
00000000000050dd	jmp	0x50e2
00000000000050e2	movq	-0x10(%rbp), %rax
00000000000050e6	addq	$0x1, %rax
00000000000050ea	movq	%rax, -0x10(%rbp)
00000000000050ee	jmp	0x502f
00000000000050f3	movb	$-0x1, -0x1(%rbp)
00000000000050f7	movsbl	-0x1(%rbp), %eax
00000000000050fb	popq	%rbp
00000000000050fc	retq
00000000000050fd	nopl	(%rax)
_ZydisRegisterGetClass:
0000000000005100	pushq	%rbp
0000000000005101	movq	%rsp, %rbp
0000000000005104	movl	%edi, -0x8(%rbp)
0000000000005107	movq	$0x0, -0x10(%rbp)
000000000000510f	cmpq	$0x13, -0x10(%rbp)
0000000000005114	jae	0x5188
000000000000511a	movl	-0x8(%rbp), %eax
000000000000511d	movq	-0x10(%rbp), %rcx
0000000000005121	shlq	$0x4, %rcx
0000000000005125	leaq	_REGISTER_MAP(%rip), %rdx
000000000000512c	addq	%rcx, %rdx
000000000000512f	cmpl	0x4(%rdx), %eax
0000000000005132	jb	0x5172
0000000000005138	movl	-0x8(%rbp), %eax
000000000000513b	movq	-0x10(%rbp), %rcx
000000000000513f	shlq	$0x4, %rcx
0000000000005143	leaq	_REGISTER_MAP(%rip), %rdx
000000000000514a	addq	%rcx, %rdx
000000000000514d	cmpl	0x8(%rdx), %eax
0000000000005150	ja	0x5172
0000000000005156	movq	-0x10(%rbp), %rax
000000000000515a	shlq	$0x4, %rax
000000000000515e	leaq	_REGISTER_MAP(%rip), %rcx
0000000000005165	addq	%rax, %rcx
0000000000005168	movl	(%rcx), %edx
000000000000516a	movl	%edx, -0x4(%rbp)
000000000000516d	jmp	0x518f
0000000000005172	jmp	0x5177
0000000000005177	movq	-0x10(%rbp), %rax
000000000000517b	addq	$0x1, %rax
000000000000517f	movq	%rax, -0x10(%rbp)
0000000000005183	jmp	0x510f
0000000000005188	movl	$0x0, -0x4(%rbp)
000000000000518f	movl	-0x4(%rbp), %eax
0000000000005192	popq	%rbp
0000000000005193	retq
0000000000005194	nopw	%cs:(%rax,%rax)
000000000000519e	nop
_ZydisRegisterGetWidth:
00000000000051a0	pushq	%rbp
00000000000051a1	movq	%rsp, %rbp
00000000000051a4	movl	%edi, -0x8(%rbp)
00000000000051a7	movl	%esi, -0xc(%rbp)
00000000000051aa	movl	-0xc(%rbp), %esi
00000000000051ad	movl	%esi, %edi
00000000000051af	addl	$-0x4d, %edi
00000000000051b2	subl	$0x3, %edi
00000000000051b5	movl	%esi, -0x1c(%rbp)
00000000000051b8	movl	%edi, -0x20(%rbp)
00000000000051bb	jb	0x5292
00000000000051c1	jmp	0x51c6
00000000000051c6	movl	-0x1c(%rbp), %eax
00000000000051c9	subl	$0xc0, %eax
00000000000051ce	movl	%eax, -0x24(%rbp)
00000000000051d1	je	0x529d
00000000000051d7	jmp	0x51dc
00000000000051dc	movl	-0x1c(%rbp), %eax
00000000000051df	subl	$0xc1, %eax
00000000000051e4	movl	%eax, -0x28(%rbp)
00000000000051e7	je	0x52a8
00000000000051ed	jmp	0x51f2
00000000000051f2	movl	-0x1c(%rbp), %eax
00000000000051f5	subl	$0xc2, %eax
00000000000051fa	movl	%eax, -0x2c(%rbp)
00000000000051fd	je	0x52b3
0000000000005203	jmp	0x5208
0000000000005208	movl	-0x1c(%rbp), %eax
000000000000520b	subl	$0xc3, %eax
0000000000005210	movl	%eax, -0x30(%rbp)
0000000000005213	je	0x529d
0000000000005219	jmp	0x521e
000000000000521e	movl	-0x1c(%rbp), %eax
0000000000005221	subl	$0xc4, %eax
0000000000005226	movl	%eax, -0x34(%rbp)
0000000000005229	je	0x52a8
000000000000522f	jmp	0x5234
0000000000005234	movl	-0x1c(%rbp), %eax
0000000000005237	subl	$0xc5, %eax
000000000000523c	movl	%eax, -0x38(%rbp)
000000000000523f	je	0x52b3
0000000000005245	jmp	0x524a
000000000000524a	movl	-0x1c(%rbp), %eax
000000000000524d	addl	$0xfffffefc, %eax
0000000000005252	subl	$0x2, %eax
0000000000005255	movl	%eax, -0x3c(%rbp)
0000000000005258	jb	0x52cf
000000000000525e	jmp	0x5263
0000000000005263	movl	-0x1c(%rbp), %eax
0000000000005266	addl	$0xfffffefa, %eax
000000000000526b	subl	$0x2, %eax
000000000000526e	movl	%eax, -0x40(%rbp)
0000000000005271	jb	0x52e5
0000000000005277	jmp	0x527c
000000000000527c	movl	-0x1c(%rbp), %eax
000000000000527f	subl	$0x108, %eax
0000000000005284	movl	%eax, -0x44(%rbp)
0000000000005287	je	0x52da
000000000000528d	jmp	0x52f0
0000000000005292	movw	$0x10, -0x2(%rbp)
0000000000005298	jmp	0x53b0
000000000000529d	movw	$0x10, -0x2(%rbp)
00000000000052a3	jmp	0x53b0
00000000000052a8	movw	$0x20, -0x2(%rbp)
00000000000052ae	jmp	0x53b0
00000000000052b3	xorl	%eax, %eax
00000000000052b5	movl	-0x8(%rbp), %ecx
00000000000052b8	cmpl	$0x0, %ecx
00000000000052bb	movl	$0x40, %ecx
00000000000052c0	cmovel	%ecx, %eax
00000000000052c3	movw	%ax, %dx
00000000000052c6	movw	%dx, -0x2(%rbp)
00000000000052ca	jmp	0x53b0
00000000000052cf	movw	$0x40, -0x2(%rbp)
00000000000052d5	jmp	0x53b0
00000000000052da	movw	$0x40, -0x2(%rbp)
00000000000052e0	jmp	0x53b0
00000000000052e5	movw	$0x20, -0x2(%rbp)
00000000000052eb	jmp	0x53b0
00000000000052f0	jmp	0x52f5
00000000000052f5	movq	$0x0, -0x18(%rbp)
00000000000052fd	cmpq	$0x13, -0x18(%rbp)
0000000000005302	jae	0x53aa
0000000000005308	movl	-0xc(%rbp), %eax
000000000000530b	movq	-0x18(%rbp), %rcx
000000000000530f	shlq	$0x4, %rcx
0000000000005313	leaq	_REGISTER_MAP(%rip), %rdx
000000000000531a	addq	%rcx, %rdx
000000000000531d	cmpl	0x4(%rdx), %eax
0000000000005320	jb	0x5394
0000000000005326	movl	-0xc(%rbp), %eax
0000000000005329	movq	-0x18(%rbp), %rcx
000000000000532d	shlq	$0x4, %rcx
0000000000005331	leaq	_REGISTER_MAP(%rip), %rdx
0000000000005338	addq	%rcx, %rdx
000000000000533b	cmpl	0x8(%rdx), %eax
000000000000533e	ja	0x5394
0000000000005344	cmpl	$0x0, -0x8(%rbp)
0000000000005348	jne	0x536c
000000000000534e	movq	-0x18(%rbp), %rax
0000000000005352	shlq	$0x4, %rax
0000000000005356	leaq	_REGISTER_MAP(%rip), %rcx
000000000000535d	addq	%rax, %rcx
0000000000005360	movzwl	0xe(%rcx), %edx
0000000000005364	movl	%edx, -0x48(%rbp)
0000000000005367	jmp	0x5385
000000000000536c	movq	-0x18(%rbp), %rax
0000000000005370	shlq	$0x4, %rax
0000000000005374	leaq	_REGISTER_MAP(%rip), %rcx
000000000000537b	addq	%rax, %rcx
000000000000537e	movzwl	0xc(%rcx), %edx
0000000000005382	movl	%edx, -0x48(%rbp)
0000000000005385	movl	-0x48(%rbp), %eax
0000000000005388	movw	%ax, %cx
000000000000538b	movw	%cx, -0x2(%rbp)
000000000000538f	jmp	0x53b0
0000000000005394	jmp	0x5399
0000000000005399	movq	-0x18(%rbp), %rax
000000000000539d	addq	$0x1, %rax
00000000000053a1	movq	%rax, -0x18(%rbp)
00000000000053a5	jmp	0x52fd
00000000000053aa	movw	$0x0, -0x2(%rbp)
00000000000053b0	movzwl	-0x2(%rbp), %eax
00000000000053b4	popq	%rbp
00000000000053b5	retq
00000000000053b6	nopw	%cs:(%rax,%rax)
_ZydisRegisterGetLargestEnclosing:
00000000000053c0	pushq	%rbp
00000000000053c1	movq	%rsp, %rbp
00000000000053c4	movl	%edi, -0x8(%rbp)
00000000000053c7	movl	%esi, -0xc(%rbp)
00000000000053ca	movq	$0x0, -0x18(%rbp)
00000000000053d2	cmpq	$0x13, -0x18(%rbp)
00000000000053d7	jae	0x55b0
00000000000053dd	movl	-0xc(%rbp), %eax
00000000000053e0	movq	-0x18(%rbp), %rcx
00000000000053e4	shlq	$0x4, %rcx
00000000000053e8	leaq	_REGISTER_MAP(%rip), %rdx
00000000000053ef	addq	%rcx, %rdx
00000000000053f2	cmpl	0x4(%rdx), %eax
00000000000053f5	jb	0x559a
00000000000053fb	movl	-0xc(%rbp), %eax
00000000000053fe	movq	-0x18(%rbp), %rcx
0000000000005402	shlq	$0x4, %rcx
0000000000005406	leaq	_REGISTER_MAP(%rip), %rdx
000000000000540d	addq	%rcx, %rdx
0000000000005410	cmpl	0x8(%rdx), %eax
0000000000005413	ja	0x559a
0000000000005419	movq	-0x18(%rbp), %rax
000000000000541d	shlq	$0x4, %rax
0000000000005421	leaq	_REGISTER_MAP(%rip), %rcx
0000000000005428	addq	%rax, %rcx
000000000000542b	movl	(%rcx), %edx
000000000000542d	movl	%edx, -0x1c(%rbp)
0000000000005430	cmpl	$0x4, -0x1c(%rbp)
0000000000005434	jne	0x5450
000000000000543a	cmpl	$0x0, -0x8(%rbp)
000000000000543e	je	0x5450
0000000000005444	movl	$0x0, -0x4(%rbp)
000000000000544b	jmp	0x55b7
0000000000005450	movl	-0xc(%rbp), %eax
0000000000005453	movl	-0x1c(%rbp), %ecx
0000000000005456	movl	%ecx, %edx
0000000000005458	shlq	$0x4, %rdx
000000000000545c	leaq	_REGISTER_MAP(%rip), %rsi
0000000000005463	movl	0x4(%rdx,%rsi), %ecx
0000000000005467	subl	%ecx, %eax
0000000000005469	movb	%al, %dil
000000000000546c	movb	%dil, -0x1d(%rbp)
0000000000005470	movl	-0x1c(%rbp), %eax
0000000000005473	movl	%eax, %ecx
0000000000005475	subl	$0x1, %ecx
0000000000005478	movl	%eax, -0x24(%rbp)
000000000000547b	movl	%ecx, -0x28(%rbp)
000000000000547e	je	0x54b7
0000000000005484	jmp	0x5489
0000000000005489	movl	-0x24(%rbp), %eax
000000000000548c	addl	$-0x2, %eax
000000000000548f	subl	$0x3, %eax
0000000000005492	movl	%eax, -0x2c(%rbp)
0000000000005495	jb	0x54cc
000000000000549b	jmp	0x54a0
00000000000054a0	movl	-0x24(%rbp), %eax
00000000000054a3	addl	$-0x7, %eax
00000000000054a6	subl	$0x3, %eax
00000000000054a9	movl	%eax, -0x30(%rbp)
00000000000054ac	jb	0x557a
00000000000054b2	jmp	0x558e
00000000000054b7	movzbl	-0x1d(%rbp), %eax
00000000000054bb	movl	%eax, %ecx
00000000000054bd	leaq	_ZydisRegisterGetLargestEnclosing.GPR8_MAPPING(%rip), %rdx
00000000000054c4	movb	(%rdx,%rcx), %sil
00000000000054c8	movb	%sil, -0x1d(%rbp)
00000000000054cc	movl	-0x8(%rbp), %eax
00000000000054cf	testl	%eax, %eax
00000000000054d1	movl	%eax, -0x34(%rbp)
00000000000054d4	je	0x5532
00000000000054da	jmp	0x54df
00000000000054df	movl	-0x34(%rbp), %eax
00000000000054e2	subl	$0x1, %eax
00000000000054e5	movl	%eax, -0x38(%rbp)
00000000000054e8	je	0x5546
00000000000054ee	jmp	0x54f3
00000000000054f3	movl	-0x34(%rbp), %eax
00000000000054f6	subl	$0x2, %eax
00000000000054f9	movl	%eax, -0x3c(%rbp)
00000000000054fc	je	0x555a
0000000000005502	jmp	0x5507
0000000000005507	movl	-0x34(%rbp), %eax
000000000000550a	subl	$0x3, %eax
000000000000550d	movl	%eax, -0x40(%rbp)
0000000000005510	je	0x5546
0000000000005516	jmp	0x551b
000000000000551b	movl	-0x34(%rbp), %eax
000000000000551e	addl	$-0x4, %eax
0000000000005521	subl	$0x2, %eax
0000000000005524	movl	%eax, -0x44(%rbp)
0000000000005527	jb	0x555a
000000000000552d	jmp	0x556e
0000000000005532	movl	0x2273c(%rip), %eax
0000000000005538	movzbl	-0x1d(%rbp), %ecx
000000000000553c	addl	%ecx, %eax
000000000000553e	movl	%eax, -0x4(%rbp)
0000000000005541	jmp	0x55b7
0000000000005546	movl	0x22718(%rip), %eax
000000000000554c	movzbl	-0x1d(%rbp), %ecx
0000000000005550	addl	%ecx, %eax
0000000000005552	movl	%eax, -0x4(%rbp)
0000000000005555	jmp	0x55b7
000000000000555a	movl	0x226f4(%rip), %eax
0000000000005560	movzbl	-0x1d(%rbp), %ecx
0000000000005564	addl	%ecx, %eax
0000000000005566	movl	%eax, -0x4(%rbp)
0000000000005569	jmp	0x55b7
000000000000556e	movl	$0x0, -0x4(%rbp)
0000000000005575	jmp	0x55b7
000000000000557a	movl	0x22744(%rip), %eax
0000000000005580	movzbl	-0x1d(%rbp), %ecx
0000000000005584	addl	%ecx, %eax
0000000000005586	movl	%eax, -0x4(%rbp)
0000000000005589	jmp	0x55b7
000000000000558e	movl	$0x0, -0x4(%rbp)
0000000000005595	jmp	0x55b7
000000000000559a	jmp	0x559f
000000000000559f	movq	-0x18(%rbp), %rax
00000000000055a3	addq	$0x1, %rax
00000000000055a7	movq	%rax, -0x18(%rbp)
00000000000055ab	jmp	0x53d2
00000000000055b0	movl	$0x0, -0x4(%rbp)
00000000000055b7	movl	-0x4(%rbp), %eax
00000000000055ba	popq	%rbp
00000000000055bb	retq
00000000000055bc	nopl	(%rax)
_ZydisRegisterGetString:
00000000000055c0	pushq	%rbp
00000000000055c1	movq	%rsp, %rbp
00000000000055c4	movl	%edi, -0xc(%rbp)
00000000000055c7	movl	-0xc(%rbp), %edi
00000000000055ca	movl	%edi, %eax
00000000000055cc	cmpq	$0x109, %rax
00000000000055d2	jb	0x55e5
00000000000055d8	movq	$0x0, -0x8(%rbp)
00000000000055e0	jmp	0x55ff
00000000000055e5	movl	-0xc(%rbp), %eax
00000000000055e8	movl	%eax, %ecx
00000000000055ea	imulq	$0x9, %rcx, %rcx
00000000000055ee	leaq	_STR_REGISTER(%rip), %rdx
00000000000055f5	addq	%rcx, %rdx
00000000000055f8	movq	(%rdx), %rcx
00000000000055fb	movq	%rcx, -0x8(%rbp)
00000000000055ff	movq	-0x8(%rbp), %rax
0000000000005603	popq	%rbp
0000000000005604	retq
0000000000005605	nopw	%cs:(%rax,%rax)
000000000000560f	nop
_ZydisRegisterGetStringWrapped:
0000000000005610	pushq	%rbp
0000000000005611	movq	%rsp, %rbp
0000000000005614	movl	%edi, -0xc(%rbp)
0000000000005617	movl	-0xc(%rbp), %edi
000000000000561a	movl	%edi, %eax
000000000000561c	cmpq	$0x109, %rax
0000000000005622	jb	0x5635
0000000000005628	movq	$0x0, -0x8(%rbp)
0000000000005630	jmp	0x564c
0000000000005635	movl	-0xc(%rbp), %eax
0000000000005638	movl	%eax, %ecx
000000000000563a	imulq	$0x9, %rcx, %rcx
000000000000563e	leaq	_STR_REGISTER(%rip), %rdx
0000000000005645	addq	%rcx, %rdx
0000000000005648	movq	%rdx, -0x8(%rbp)
000000000000564c	movq	-0x8(%rbp), %rax
0000000000005650	popq	%rbp
0000000000005651	retq
0000000000005652	nopw	%cs:(%rax,%rax)
000000000000565c	nopl	(%rax)
_ZydisRegisterClassGetWidth:
0000000000005660	pushq	%rbp
0000000000005661	movq	%rsp, %rbp
0000000000005664	movl	%edi, -0x8(%rbp)
0000000000005667	movl	%esi, -0xc(%rbp)
000000000000566a	movl	-0xc(%rbp), %esi
000000000000566d	movl	%esi, %eax
000000000000566f	cmpq	$0x13, %rax
0000000000005673	jae	0x56cb
0000000000005679	cmpl	$0x0, -0x8(%rbp)
000000000000567d	jne	0x56a2
0000000000005683	movl	-0xc(%rbp), %eax
0000000000005686	movl	%eax, %ecx
0000000000005688	shlq	$0x4, %rcx
000000000000568c	leaq	_REGISTER_MAP(%rip), %rdx
0000000000005693	addq	%rcx, %rdx
0000000000005696	movzwl	0xe(%rdx), %eax
000000000000569a	movl	%eax, -0x10(%rbp)
000000000000569d	jmp	0x56bc
00000000000056a2	movl	-0xc(%rbp), %eax
00000000000056a5	movl	%eax, %ecx
00000000000056a7	shlq	$0x4, %rcx
00000000000056ab	leaq	_REGISTER_MAP(%rip), %rdx
00000000000056b2	addq	%rcx, %rdx
00000000000056b5	movzwl	0xc(%rdx), %eax
00000000000056b9	movl	%eax, -0x10(%rbp)
00000000000056bc	movl	-0x10(%rbp), %eax
00000000000056bf	movw	%ax, %cx
00000000000056c2	movw	%cx, -0x2(%rbp)
00000000000056c6	jmp	0x56d1
00000000000056cb	movw	$0x0, -0x2(%rbp)
00000000000056d1	movzwl	-0x2(%rbp), %eax
00000000000056d5	popq	%rbp
00000000000056d6	retq
00000000000056d7	nop
00000000000056d8	nop
00000000000056d9	nop
00000000000056da	nop
00000000000056db	nop
00000000000056dc	nop
00000000000056dd	nop
00000000000056de	nop
00000000000056df	nop
_ZydisGetInstructionDefinition:
00000000000056e0	pushq	%rbp
00000000000056e1	movq	%rsp, %rbp
00000000000056e4	subq	$0x20, %rsp
00000000000056e8	movw	%si, %ax
00000000000056eb	movl	%edi, -0x4(%rbp)
00000000000056ee	movw	%ax, -0x6(%rbp)
00000000000056f2	movq	%rdx, -0x10(%rbp)
00000000000056f6	movl	-0x4(%rbp), %esi
00000000000056f9	movl	%esi, %edx
00000000000056fb	movq	%rdx, %rcx
00000000000056fe	subq	$0x5, %rcx
0000000000005702	movq	%rdx, -0x18(%rbp)
0000000000005706	movq	%rcx, -0x20(%rbp)
000000000000570a	ja	0x57e4
0000000000005710	leaq	0xf5(%rip), %rax
0000000000005717	movq	-0x18(%rbp), %rcx
000000000000571b	movslq	(%rax,%rcx,4), %rdx
000000000000571f	addq	%rax, %rdx
0000000000005722	jmpq	*%rdx
0000000000005724	leaq	_ISTR_DEFINITIONS_LEGACY(%rip), %rax
000000000000572b	movzwl	-0x6(%rbp), %ecx
000000000000572f	movl	%ecx, %edx
0000000000005731	imulq	$0xd, %rdx, %rdx
0000000000005735	addq	%rdx, %rax
0000000000005738	movq	-0x10(%rbp), %rdx
000000000000573c	movq	%rax, (%rdx)
000000000000573f	jmp	0x5803
0000000000005744	leaq	_ISTR_DEFINITIONS_3DNOW(%rip), %rax
000000000000574b	movzwl	-0x6(%rbp), %ecx
000000000000574f	movl	%ecx, %edx
0000000000005751	imulq	$0xb, %rdx, %rdx
0000000000005755	addq	%rdx, %rax
0000000000005758	movq	-0x10(%rbp), %rdx
000000000000575c	movq	%rax, (%rdx)
000000000000575f	jmp	0x5803
0000000000005764	leaq	_ISTR_DEFINITIONS_XOP(%rip), %rax
000000000000576b	movzwl	-0x6(%rbp), %ecx
000000000000576f	movl	%ecx, %edx
0000000000005771	imulq	$0xc, %rdx, %rdx
0000000000005775	addq	%rdx, %rax
0000000000005778	movq	-0x10(%rbp), %rdx
000000000000577c	movq	%rax, (%rdx)
000000000000577f	jmp	0x5803
0000000000005784	leaq	_ISTR_DEFINITIONS_VEX(%rip), %rax
000000000000578b	movzwl	-0x6(%rbp), %ecx
000000000000578f	movl	%ecx, %edx
0000000000005791	imulq	$0xc, %rdx, %rdx
0000000000005795	addq	%rdx, %rax
0000000000005798	movq	-0x10(%rbp), %rdx
000000000000579c	movq	%rax, (%rdx)
000000000000579f	jmp	0x5803
00000000000057a4	leaq	_ISTR_DEFINITIONS_EVEX(%rip), %rax
00000000000057ab	movzwl	-0x6(%rbp), %ecx
00000000000057af	movl	%ecx, %edx
00000000000057b1	imulq	$0xe, %rdx, %rdx
00000000000057b5	addq	%rdx, %rax
00000000000057b8	movq	-0x10(%rbp), %rdx
00000000000057bc	movq	%rax, (%rdx)
00000000000057bf	jmp	0x5803
00000000000057c4	leaq	_ISTR_DEFINITIONS_MVEX(%rip), %rax
00000000000057cb	movzwl	-0x6(%rbp), %ecx
00000000000057cf	movl	%ecx, %edx
00000000000057d1	imulq	$0xd, %rdx, %rdx
00000000000057d5	addq	%rdx, %rax
00000000000057d8	movq	-0x10(%rbp), %rdx
00000000000057dc	movq	%rax, (%rdx)
00000000000057df	jmp	0x5803
00000000000057e4	leaq	0x63f89(%rip), %rdi ## literal pool for: "ZydisGetInstructionDefinition"
00000000000057eb	leaq	0x63fa0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000057f2	leaq	0x65dcb(%rip), %rcx ## literal pool for: "0"
00000000000057f9	movl	$0x66, %edx
00000000000057fe	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005803	addq	$0x20, %rsp
0000000000005807	popq	%rbp
0000000000005808	retq
0000000000005809	nopl	(%rax)
000000000000580c	sbbb	%bh, %bh
000000000000580e	.byte 0xff #bad opcode
000000000000580f	.byte 0xff #bad opcode
0000000000005810	cmpb	%bh, %bh
0000000000005812	.byte 0xff #bad opcode
0000000000005813	lcalll	*-0x1(%rax)
0000000000005816	.byte 0xff #bad opcode
0000000000005817	.byte 0xff #bad opcode
0000000000005818	js	0x5819
000000000000581a	.byte 0xff #bad opcode
000000000000581b	lcalll	*-0x47000001(%rax)
0000000000005821	.byte 0xff #bad opcode
0000000000005822	.byte 0xff #bad opcode
0000000000005823	jmpq	*0x2e(%rsi)
0000000000005826	nopl	(%rax,%rax)
000000000000582e	nop
_ZydisGetOperandDefinitions:
0000000000005830	pushq	%rbp
0000000000005831	movq	%rsp, %rbp
0000000000005834	subq	$0x20, %rsp
0000000000005838	movq	%rdi, -0x10(%rbp)
000000000000583c	movq	%rsi, -0x18(%rbp)
0000000000005840	movq	-0x10(%rbp), %rsi
0000000000005844	movq	(%rsi), %rsi
0000000000005847	shrq	$0xb, %rsi
000000000000584b	movb	%sil, %al
000000000000584e	andb	$0xf, %al
0000000000005850	movzbl	%al, %ecx
0000000000005853	cmpl	$0x0, %ecx
0000000000005856	jne	0x5870
000000000000585c	movq	-0x18(%rbp), %rax
0000000000005860	movq	$0x0, (%rax)
0000000000005867	movb	$0x0, -0x1(%rbp)
000000000000586b	jmp	0x590c
0000000000005870	movq	-0x10(%rbp), %rax
0000000000005874	movq	(%rax), %rax
0000000000005877	movl	%eax, %ecx
0000000000005879	shrl	$0xf, %ecx
000000000000587c	andl	$0x7fff, %ecx
0000000000005882	movw	%cx, %dx
0000000000005885	movzwl	%dx, %ecx
0000000000005888	cmpl	$0xffff, %ecx
000000000000588e	setne	%sil
0000000000005892	xorb	$-0x1, %sil
0000000000005896	andb	$0x1, %sil
000000000000589a	movzbl	%sil, %ecx
000000000000589e	movslq	%ecx, %rax
00000000000058a1	cmpq	$0x0, %rax
00000000000058a5	je	0x58ca
00000000000058ab	leaq	0x63f18(%rip), %rdi ## literal pool for: "ZydisGetOperandDefinitions"
00000000000058b2	leaq	0x63ed9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000058b9	leaq	0x63f25(%rip), %rcx ## literal pool for: "definition->operand_reference != 0xFFFF"
00000000000058c0	movl	$0x77, %edx
00000000000058c5	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000058ca	jmp	0x58cf
00000000000058cf	movq	-0x10(%rbp), %rax
00000000000058d3	movl	(%rax), %ecx
00000000000058d5	shrl	$0xf, %ecx
00000000000058d8	andl	$0x7fff, %ecx
00000000000058de	movl	%ecx, %eax
00000000000058e0	leaq	(%rax,%rax,2), %rax
00000000000058e4	leaq	_OPERAND_DEFINITIONS(%rip), %rdx
00000000000058eb	leaq	(%rdx,%rax,4), %rax
00000000000058ef	movq	-0x18(%rbp), %rdx
00000000000058f3	movq	%rax, (%rdx)
00000000000058f6	movq	-0x10(%rbp), %rax
00000000000058fa	movq	(%rax), %rax
00000000000058fd	shrq	$0xb, %rax
0000000000005901	movb	%al, %sil
0000000000005904	andb	$0xf, %sil
0000000000005908	movb	%sil, -0x1(%rbp)
000000000000590c	movzbl	-0x1(%rbp), %eax
0000000000005910	addq	$0x20, %rsp
0000000000005914	popq	%rbp
0000000000005915	retq
0000000000005916	nopw	%cs:(%rax,%rax)
_ZydisGetElementInfo:
0000000000005920	pushq	%rbp
0000000000005921	movq	%rsp, %rbp
0000000000005924	subq	$0x20, %rsp
0000000000005928	movl	%edi, -0x4(%rbp)
000000000000592b	movq	%rsi, -0x10(%rbp)
000000000000592f	movq	%rdx, -0x18(%rbp)
0000000000005933	movl	-0x4(%rbp), %edi
0000000000005936	movl	%edi, %edx
0000000000005938	cmpq	$0x17, %rdx
000000000000593c	setb	%al
000000000000593f	xorb	$-0x1, %al
0000000000005941	andb	$0x1, %al
0000000000005943	movzbl	%al, %edi
0000000000005946	movslq	%edi, %rdx
0000000000005949	cmpq	$0x0, %rdx
000000000000594d	je	0x5972
0000000000005953	leaq	0x63eb3(%rip), %rdi ## literal pool for: "ZydisGetElementInfo"
000000000000595a	leaq	0x63e31(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
0000000000005961	leaq	0x63eb9(%rip), %rcx ## literal pool for: "element < (sizeof(lookup) / sizeof((lookup)[0]))"
0000000000005968	movl	$0xa4, %edx
000000000000596d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005972	jmp	0x5977
0000000000005977	movl	-0x4(%rbp), %eax
000000000000597a	movl	%eax, %ecx
000000000000597c	leaq	_ZydisGetElementInfo.lookup(%rip), %rdx
0000000000005983	movl	(%rdx,%rcx,8), %eax
0000000000005986	movq	-0x10(%rbp), %rcx
000000000000598a	movl	%eax, (%rcx)
000000000000598c	movl	-0x4(%rbp), %eax
000000000000598f	movl	%eax, %ecx
0000000000005991	movw	0x4(%rdx,%rcx,8), %si
0000000000005996	movq	-0x18(%rbp), %rcx
000000000000599a	movw	%si, (%rcx)
000000000000599d	addq	$0x20, %rsp
00000000000059a1	popq	%rbp
00000000000059a2	retq
00000000000059a3	nopw	%cs:(%rax,%rax)
00000000000059ad	nopl	(%rax)
_ZydisGetAccessedFlags:
00000000000059b0	pushq	%rbp
00000000000059b1	movq	%rsp, %rbp
00000000000059b4	subq	$0x10, %rsp
00000000000059b8	movq	%rdi, -0x8(%rbp)
00000000000059bc	movq	%rsi, -0x10(%rbp)
00000000000059c0	movq	-0x8(%rbp), %rsi
00000000000059c4	movq	(%rsi), %rsi
00000000000059c7	shrq	$0x23, %rsi
00000000000059cb	movb	%sil, %al
00000000000059ce	andb	$0x7f, %al
00000000000059d0	movzbl	%al, %ecx
00000000000059d3	movl	%ecx, %esi
00000000000059d5	cmpq	$0x48, %rsi
00000000000059d9	setb	%al
00000000000059dc	xorb	$-0x1, %al
00000000000059de	andb	$0x1, %al
00000000000059e0	movzbl	%al, %ecx
00000000000059e3	movslq	%ecx, %rsi
00000000000059e6	cmpq	$0x0, %rsi
00000000000059ea	je	0x5a0f
00000000000059f0	leaq	0x63e5b(%rip), %rdi ## literal pool for: "ZydisGetAccessedFlags"
00000000000059f7	leaq	0x63d94(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/SharedData.c"
00000000000059fe	leaq	0x63e63(%rip), %rcx ## literal pool for: "definition->flags_reference < (sizeof(ACCESSED_FLAGS) / sizeof((ACCESSED_FLAGS)[0]))"
0000000000005a05	movl	$0xb3, %edx
0000000000005a0a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005a0f	jmp	0x5a14
0000000000005a14	movq	-0x8(%rbp), %rax
0000000000005a18	movq	(%rax), %rax
0000000000005a1b	shrq	$0x23, %rax
0000000000005a1f	movl	%eax, %ecx
0000000000005a21	andl	$0x7f, %ecx
0000000000005a24	movl	%ecx, %eax
0000000000005a26	imulq	$0x54, %rax, %rax
0000000000005a2a	leaq	_ACCESSED_FLAGS(%rip), %rdx
0000000000005a31	addq	%rax, %rdx
0000000000005a34	movq	-0x10(%rbp), %rax
0000000000005a38	movq	%rdx, (%rax)
0000000000005a3b	movq	-0x8(%rbp), %rax
0000000000005a3f	movq	(%rax), %rax
0000000000005a42	shrq	$0x23, %rax
0000000000005a46	movb	%al, %sil
0000000000005a49	andb	$0x7f, %sil
0000000000005a4d	movzbl	%sil, %ecx
0000000000005a51	cmpl	$0x0, %ecx
0000000000005a54	setne	%sil
0000000000005a58	andb	$0x1, %sil
0000000000005a5c	movzbl	%sil, %ecx
0000000000005a60	movb	%cl, %sil
0000000000005a63	movzbl	%sil, %eax
0000000000005a67	addq	$0x10, %rsp
0000000000005a6b	popq	%rbp
0000000000005a6c	retq
0000000000005a6d	nop
0000000000005a6e	nop
0000000000005a6f	nop
_ZydisDecoderInit:
0000000000005a70	pushq	%rbp
0000000000005a71	movq	%rsp, %rbp
0000000000005a74	subq	$0x30, %rsp
0000000000005a78	movq	%rdi, -0x10(%rbp)
0000000000005a7c	movl	%esi, -0x14(%rbp)
0000000000005a7f	movl	%edx, -0x18(%rbp)
0000000000005a82	cmpq	$0x0, -0x10(%rbp)
0000000000005a87	jne	0x5a99
0000000000005a8d	movl	$0x80100004, -0x4(%rbp)
0000000000005a94	jmp	0x5b4f
0000000000005a99	movl	-0x14(%rbp), %eax
0000000000005a9c	testl	%eax, %eax
0000000000005a9e	movl	%eax, -0x1c(%rbp)
0000000000005aa1	je	0x5ac2
0000000000005aa7	jmp	0x5aac
0000000000005aac	movl	-0x1c(%rbp), %eax
0000000000005aaf	decl	%eax
0000000000005ab1	subl	$0x5, %eax
0000000000005ab4	movl	%eax, -0x20(%rbp)
0000000000005ab7	jb	0x5add
0000000000005abd	jmp	0x5b02
0000000000005ac2	cmpl	$0x2, -0x18(%rbp)
0000000000005ac6	je	0x5ad8
0000000000005acc	movl	$0x80100004, -0x4(%rbp)
0000000000005ad3	jmp	0x5b4f
0000000000005ad8	jmp	0x5b0e
0000000000005add	cmpl	$0x0, -0x18(%rbp)
0000000000005ae1	je	0x5afd
0000000000005ae7	cmpl	$0x1, -0x18(%rbp)
0000000000005aeb	je	0x5afd
0000000000005af1	movl	$0x80100004, -0x4(%rbp)
0000000000005af8	jmp	0x5b4f
0000000000005afd	jmp	0x5b0e
0000000000005b02	movl	$0x80100004, -0x4(%rbp)
0000000000005b09	jmp	0x5b4f
0000000000005b0e	movq	$-0x1, %rcx
0000000000005b15	movl	-0x14(%rbp), %eax
0000000000005b18	movq	-0x10(%rbp), %rdx
0000000000005b1c	movl	%eax, (%rdx)
0000000000005b1e	movl	-0x18(%rbp), %eax
0000000000005b21	movq	-0x10(%rbp), %rdx
0000000000005b25	movl	%eax, 0x4(%rdx)
0000000000005b28	movq	-0x10(%rbp), %rdx
0000000000005b2c	addq	$0x8, %rdx
0000000000005b30	movq	%rdx, %rdi
0000000000005b33	leaq	_ZydisDecoderInit.decoderModes(%rip), %rsi
0000000000005b3a	movl	$0x9, %edx
0000000000005b3f	callq	0x2796c ## symbol stub for: ___memcpy_chk
0000000000005b44	movl	$0x100000, -0x4(%rbp)
0000000000005b4b	movq	%rax, -0x28(%rbp)
0000000000005b4f	movl	-0x4(%rbp), %eax
0000000000005b52	addq	$0x30, %rsp
0000000000005b56	popq	%rbp
0000000000005b57	retq
0000000000005b58	nopl	(%rax,%rax)
_ZydisDecoderEnableMode:
0000000000005b60	pushq	%rbp
0000000000005b61	movq	%rsp, %rbp
0000000000005b64	movb	%dl, %al
0000000000005b66	movq	%rdi, -0x10(%rbp)
0000000000005b6a	movl	%esi, -0x14(%rbp)
0000000000005b6d	movb	%al, -0x15(%rbp)
0000000000005b70	cmpq	$0x0, -0x10(%rbp)
0000000000005b75	je	0x5b85
0000000000005b7b	cmpl	$0x8, -0x14(%rbp)
0000000000005b7f	jbe	0x5b91
0000000000005b85	movl	$0x80100004, -0x4(%rbp)
0000000000005b8c	jmp	0x5ba8
0000000000005b91	movb	-0x15(%rbp), %al
0000000000005b94	movq	-0x10(%rbp), %rcx
0000000000005b98	movl	-0x14(%rbp), %edx
0000000000005b9b	movl	%edx, %esi
0000000000005b9d	movb	%al, 0x8(%rcx,%rsi)
0000000000005ba1	movl	$0x100000, -0x4(%rbp)
0000000000005ba8	movl	-0x4(%rbp), %eax
0000000000005bab	popq	%rbp
0000000000005bac	retq
0000000000005bad	nopl	(%rax)
_ZydisDecoderDecodeBuffer:
0000000000005bb0	pushq	%rbp
0000000000005bb1	movq	%rsp, %rbp
0000000000005bb4	subq	$0x90, %rsp
0000000000005bbb	movq	%rdi, -0x10(%rbp)
0000000000005bbf	movq	%rsi, -0x18(%rbp)
0000000000005bc3	movq	%rdx, -0x20(%rbp)
0000000000005bc7	movq	%rcx, -0x28(%rbp)
0000000000005bcb	cmpq	$0x0, -0x10(%rbp)
0000000000005bd0	je	0x5be1
0000000000005bd6	cmpq	$0x0, -0x28(%rbp)
0000000000005bdb	jne	0x5bed
0000000000005be1	movl	$0x80100004, -0x4(%rbp)
0000000000005be8	jmp	0x5cff
0000000000005bed	cmpq	$0x0, -0x18(%rbp)
0000000000005bf2	je	0x5c03
0000000000005bf8	cmpq	$0x0, -0x20(%rbp)
0000000000005bfd	jne	0x5c0f
0000000000005c03	movl	$0x80200000, -0x4(%rbp)
0000000000005c0a	jmp	0x5cff
0000000000005c0f	xorl	%eax, %eax
0000000000005c11	movq	$-0x1, %rcx
0000000000005c18	leaq	-0x68(%rbp), %rdx
0000000000005c1c	movq	%rdx, %rdi
0000000000005c1f	movl	%eax, %esi
0000000000005c21	movl	$0x40, %edx
0000000000005c26	movl	%eax, -0x74(%rbp)
0000000000005c29	movq	%rcx, -0x80(%rbp)
0000000000005c2d	callq	0x279cc ## symbol stub for: _memset
0000000000005c32	movq	-0x10(%rbp), %rcx
0000000000005c36	movq	%rcx, -0x68(%rbp)
0000000000005c3a	movq	-0x18(%rbp), %rcx
0000000000005c3e	movq	%rcx, -0x60(%rbp)
0000000000005c42	movq	-0x20(%rbp), %rcx
0000000000005c46	movq	%rcx, -0x58(%rbp)
0000000000005c4a	movq	-0x28(%rbp), %rcx
0000000000005c4e	movq	%rcx, %rdi
0000000000005c51	movl	-0x74(%rbp), %esi
0000000000005c54	movl	$0x5c0, %edx
0000000000005c59	movq	-0x80(%rbp), %rcx
0000000000005c5d	callq	0x27972 ## symbol stub for: ___memset_chk
0000000000005c62	movq	-0x10(%rbp), %rcx
0000000000005c66	movl	(%rcx), %esi
0000000000005c68	movq	-0x28(%rbp), %rcx
0000000000005c6c	movl	%esi, (%rcx)
0000000000005c6e	movq	-0x10(%rbp), %rcx
0000000000005c72	movl	0x4(%rcx), %esi
0000000000005c75	movl	%esi, %ecx
0000000000005c77	leaq	_ZydisDecoderDecodeBuffer.lookup(%rip), %rdx
0000000000005c7e	movb	(%rdx,%rcx), %r8b
0000000000005c82	movq	-0x28(%rbp), %rcx
0000000000005c86	movb	%r8b, 0x15(%rcx)
0000000000005c8a	movq	%rax, -0x88(%rbp)
0000000000005c91	movq	-0x28(%rbp), %rsi
0000000000005c95	leaq	-0x68(%rbp), %rdi
0000000000005c99	callq	_ZydisCollectOptionalPrefixes
0000000000005c9e	movl	%eax, -0x6c(%rbp)
0000000000005ca1	movl	-0x6c(%rbp), %eax
0000000000005ca4	andl	$0x80000000, %eax
0000000000005ca9	cmpl	$0x0, %eax
0000000000005cac	je	0x5cbd
0000000000005cb2	movl	-0x6c(%rbp), %eax
0000000000005cb5	movl	%eax, -0x4(%rbp)
0000000000005cb8	jmp	0x5cff
0000000000005cbd	jmp	0x5cc2
0000000000005cc2	jmp	0x5cc7
0000000000005cc7	movq	-0x28(%rbp), %rsi
0000000000005ccb	leaq	-0x68(%rbp), %rdi
0000000000005ccf	callq	_ZydisDecodeInstruction
0000000000005cd4	movl	%eax, -0x70(%rbp)
0000000000005cd7	movl	-0x70(%rbp), %eax
0000000000005cda	andl	$0x80000000, %eax
0000000000005cdf	cmpl	$0x0, %eax
0000000000005ce2	je	0x5cf3
0000000000005ce8	movl	-0x70(%rbp), %eax
0000000000005ceb	movl	%eax, -0x4(%rbp)
0000000000005cee	jmp	0x5cff
0000000000005cf3	jmp	0x5cf8
0000000000005cf8	movl	$0x100000, -0x4(%rbp)
0000000000005cff	movl	-0x4(%rbp), %eax
0000000000005d02	addq	$0x90, %rsp
0000000000005d09	popq	%rbp
0000000000005d0a	retq
0000000000005d0b	nopl	(%rax,%rax)
_ZydisCollectOptionalPrefixes:
0000000000005d10	pushq	%rbp
0000000000005d11	movq	%rsp, %rbp
0000000000005d14	subq	$0x50, %rsp
0000000000005d18	movq	%rdi, -0x10(%rbp)
0000000000005d1c	movq	%rsi, -0x18(%rbp)
0000000000005d20	cmpq	$0x0, -0x10(%rbp)
0000000000005d25	setne	%al
0000000000005d28	xorb	$-0x1, %al
0000000000005d2a	andb	$0x1, %al
0000000000005d2c	movzbl	%al, %ecx
0000000000005d2f	movslq	%ecx, %rsi
0000000000005d32	cmpq	$0x0, %rsi
0000000000005d36	je	0x5d5b
0000000000005d3c	leaq	0x63b7a(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
0000000000005d43	leaq	0x63b90(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000005d4a	leaq	0x63bbe(%rip), %rcx ## literal pool for: "context"
0000000000005d51	movl	$0xc3e, %edx
0000000000005d56	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005d5b	jmp	0x5d60
0000000000005d60	cmpq	$0x0, -0x18(%rbp)
0000000000005d65	setne	%al
0000000000005d68	xorb	$-0x1, %al
0000000000005d6a	andb	$0x1, %al
0000000000005d6c	movzbl	%al, %ecx
0000000000005d6f	movslq	%ecx, %rdx
0000000000005d72	cmpq	$0x0, %rdx
0000000000005d76	je	0x5d9b
0000000000005d7c	leaq	0x63b3a(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
0000000000005d83	leaq	0x63b50(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000005d8a	leaq	0x63b86(%rip), %rcx ## literal pool for: "instruction"
0000000000005d91	movl	$0xc3f, %edx
0000000000005d96	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005d9b	jmp	0x5da0
0000000000005da0	movq	-0x18(%rbp), %rax
0000000000005da4	movzbl	0x4c8(%rax), %ecx
0000000000005dab	cmpl	$0x0, %ecx
0000000000005dae	sete	%dl
0000000000005db1	xorb	$-0x1, %dl
0000000000005db4	andb	$0x1, %dl
0000000000005db7	movzbl	%dl, %ecx
0000000000005dba	movslq	%ecx, %rax
0000000000005dbd	cmpq	$0x0, %rax
0000000000005dc1	je	0x5de6
0000000000005dc7	leaq	0x63aef(%rip), %rdi ## literal pool for: "ZydisCollectOptionalPrefixes"
0000000000005dce	leaq	0x63b05(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000005dd5	leaq	0x63b47(%rip), %rcx ## literal pool for: "instruction->raw.prefix_count == 0"
0000000000005ddc	movl	$0xc40, %edx
0000000000005de1	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000005de6	jmp	0x5deb
0000000000005deb	movb	$0x0, -0x19(%rbp)
0000000000005def	movb	$0x0, -0x1a(%rbp)
0000000000005df3	movb	$0x0, -0x1b(%rbp)
0000000000005df7	jmp	0x5dfc
0000000000005dfc	movq	-0x10(%rbp), %rdi
0000000000005e00	movq	-0x18(%rbp), %rsi
0000000000005e04	leaq	-0x1c(%rbp), %rdx
0000000000005e08	callq	_ZydisInputPeek
0000000000005e0d	movl	%eax, -0x20(%rbp)
0000000000005e10	movl	-0x20(%rbp), %eax
0000000000005e13	andl	$0x80000000, %eax
0000000000005e18	cmpl	$0x0, %eax
0000000000005e1b	je	0x5e2c
0000000000005e21	movl	-0x20(%rbp), %eax
0000000000005e24	movl	%eax, -0x4(%rbp)
0000000000005e27	jmp	0x61f8
0000000000005e2c	jmp	0x5e31
0000000000005e31	movzbl	-0x1c(%rbp), %eax
0000000000005e35	movl	%eax, %ecx
0000000000005e37	subl	$0x26, %ecx
0000000000005e3a	movl	%eax, -0x24(%rbp)
0000000000005e3d	movl	%ecx, -0x28(%rbp)
0000000000005e40	je	0x5f71
0000000000005e46	jmp	0x5e4b
0000000000005e4b	movl	-0x24(%rbp), %eax
0000000000005e4e	subl	$0x2e, %eax
0000000000005e51	movl	%eax, -0x2c(%rbp)
0000000000005e54	je	0x5f62
0000000000005e5a	jmp	0x5e5f
0000000000005e5f	movl	-0x24(%rbp), %eax
0000000000005e62	subl	$0x36, %eax
0000000000005e65	movl	%eax, -0x30(%rbp)
0000000000005e68	je	0x5f67
0000000000005e6e	jmp	0x5e73
0000000000005e73	movl	-0x24(%rbp), %eax
0000000000005e76	subl	$0x3e, %eax
0000000000005e79	movl	%eax, -0x34(%rbp)
0000000000005e7c	je	0x5f6c
0000000000005e82	jmp	0x5e87
0000000000005e87	movl	-0x24(%rbp), %eax
0000000000005e8a	subl	$0x64, %eax
0000000000005e8d	movl	%eax, -0x38(%rbp)
0000000000005e90	je	0x5fd0
0000000000005e96	jmp	0x5e9b
0000000000005e9b	movl	-0x24(%rbp), %eax
0000000000005e9e	subl	$0x65, %eax
0000000000005ea1	movl	%eax, -0x3c(%rbp)
0000000000005ea4	je	0x5fd5
0000000000005eaa	jmp	0x5eaf
0000000000005eaf	movl	-0x24(%rbp), %eax
0000000000005eb2	subl	$0x66, %eax
0000000000005eb5	movl	%eax, -0x40(%rbp)
0000000000005eb8	je	0x6002
0000000000005ebe	jmp	0x5ec3
0000000000005ec3	movl	-0x24(%rbp), %eax
0000000000005ec6	subl	$0x67, %eax
0000000000005ec9	movl	%eax, -0x44(%rbp)
0000000000005ecc	je	0x604d
0000000000005ed2	jmp	0x5ed7
0000000000005ed7	movl	-0x24(%rbp), %eax
0000000000005eda	subl	$0xf0, %eax
0000000000005edf	movl	%eax, -0x48(%rbp)
0000000000005ee2	je	0x5f19
0000000000005ee8	jmp	0x5eed
0000000000005eed	movl	-0x24(%rbp), %eax
0000000000005ef0	subl	$0xf2, %eax
0000000000005ef5	movl	%eax, -0x4c(%rbp)
0000000000005ef8	je	0x5f30
0000000000005efe	jmp	0x5f03
0000000000005f03	movl	-0x24(%rbp), %eax
0000000000005f06	subl	$0xf3, %eax
0000000000005f0b	movl	%eax, -0x50(%rbp)
0000000000005f0e	je	0x5f35
0000000000005f14	jmp	0x6078
0000000000005f19	movq	-0x10(%rbp), %rax
0000000000005f1d	movb	$0x1, 0x18(%rax)
0000000000005f21	movb	-0x1a(%rbp), %cl
0000000000005f24	movq	-0x10(%rbp), %rax
0000000000005f28	movb	%cl, 0x1d(%rax)
0000000000005f2b	jmp	0x60bb
0000000000005f30	jmp	0x5f35
0000000000005f35	movb	-0x1c(%rbp), %al
0000000000005f38	movq	-0x10(%rbp), %rcx
0000000000005f3c	movb	%al, 0x19(%rcx)
0000000000005f3f	movb	-0x1c(%rbp), %al
0000000000005f42	movq	-0x10(%rbp), %rcx
0000000000005f46	movb	%al, 0x1c(%rcx)
0000000000005f49	movb	-0x1a(%rbp), %al
0000000000005f4c	movq	-0x10(%rbp), %rcx
0000000000005f50	movb	%al, 0x1e(%rcx)
0000000000005f53	movb	-0x1a(%rbp), %al
0000000000005f56	movq	-0x10(%rbp), %rcx
0000000000005f5a	movb	%al, 0x23(%rcx)
0000000000005f5d	jmp	0x60bb
0000000000005f62	jmp	0x5f67
0000000000005f67	jmp	0x5f6c
0000000000005f6c	jmp	0x5f71
0000000000005f71	movb	-0x1c(%rbp), %al
0000000000005f74	movq	-0x10(%rbp), %rcx
0000000000005f78	movb	%al, 0x1a(%rcx)
0000000000005f7b	movb	-0x1a(%rbp), %al
0000000000005f7e	movq	-0x10(%rbp), %rcx
0000000000005f82	movb	%al, 0x1f(%rcx)
0000000000005f85	movq	-0x10(%rbp), %rcx
0000000000005f89	movq	(%rcx), %rcx
0000000000005f8c	cmpl	$0x0, (%rcx)
0000000000005f8f	jne	0x5fb7
0000000000005f95	movq	-0x10(%rbp), %rax
0000000000005f99	movzbl	0x1b(%rax), %ecx
0000000000005f9d	cmpl	$0x64, %ecx
0000000000005fa0	je	0x5fcb
0000000000005fa6	movq	-0x10(%rbp), %rax
0000000000005faa	movzbl	0x1b(%rax), %ecx
0000000000005fae	cmpl	$0x65, %ecx
0000000000005fb1	je	0x5fcb
0000000000005fb7	movb	-0x1c(%rbp), %al
0000000000005fba	movq	-0x10(%rbp), %rcx
0000000000005fbe	movb	%al, 0x1b(%rcx)
0000000000005fc1	movb	-0x1a(%rbp), %al
0000000000005fc4	movq	-0x10(%rbp), %rcx
0000000000005fc8	movb	%al, 0x22(%rcx)
0000000000005fcb	jmp	0x60bb
0000000000005fd0	jmp	0x5fd5
0000000000005fd5	movb	-0x1c(%rbp), %al
0000000000005fd8	movq	-0x10(%rbp), %rcx
0000000000005fdc	movb	%al, 0x1a(%rcx)
0000000000005fdf	movb	-0x1a(%rbp), %al
0000000000005fe2	movq	-0x10(%rbp), %rcx
0000000000005fe6	movb	%al, 0x1f(%rcx)
0000000000005fe9	movb	-0x1c(%rbp), %al
0000000000005fec	movq	-0x10(%rbp), %rcx
0000000000005ff0	movb	%al, 0x1b(%rcx)
0000000000005ff3	movb	-0x1a(%rbp), %al
0000000000005ff6	movq	-0x10(%rbp), %rcx
0000000000005ffa	movb	%al, 0x22(%rcx)
0000000000005ffd	jmp	0x60bb
0000000000006002	movb	-0x1a(%rbp), %al
0000000000006005	movq	-0x10(%rbp), %rcx
0000000000006009	movb	%al, 0x20(%rcx)
000000000000600c	movq	-0x10(%rbp), %rcx
0000000000006010	cmpb	$0x0, 0x1c(%rcx)
0000000000006014	jne	0x602c
000000000000601a	movq	-0x10(%rbp), %rax
000000000000601e	movb	$0x66, 0x1c(%rax)
0000000000006022	movb	-0x1a(%rbp), %cl
0000000000006025	movq	-0x10(%rbp), %rax
0000000000006029	movb	%cl, 0x23(%rax)
000000000000602c	movq	-0x18(%rbp), %rax
0000000000006030	movabsq	$0x400000000, %rcx
000000000000603a	orq	0x430(%rax), %rcx
0000000000006041	movq	%rcx, 0x430(%rax)
0000000000006048	jmp	0x60bb
000000000000604d	movb	-0x1a(%rbp), %al
0000000000006050	movq	-0x10(%rbp), %rcx
0000000000006054	movb	%al, 0x21(%rcx)
0000000000006057	movq	-0x18(%rbp), %rcx
000000000000605b	movabsq	$0x800000000, %rdx
0000000000006065	orq	0x430(%rcx), %rdx
000000000000606c	movq	%rdx, 0x430(%rcx)
0000000000006073	jmp	0x60bb
0000000000006078	movq	-0x10(%rbp), %rax
000000000000607c	movq	(%rax), %rax
000000000000607f	cmpl	$0x0, (%rax)
0000000000006082	jne	0x60b2
0000000000006088	movzbl	-0x1c(%rbp), %eax
000000000000608c	andl	$0xf0, %eax
0000000000006091	cmpl	$0x40, %eax
0000000000006094	jne	0x60b2
000000000000609a	movb	-0x1c(%rbp), %al
000000000000609d	movb	%al, -0x19(%rbp)
00000000000060a0	movb	-0x1a(%rbp), %al
00000000000060a3	movq	-0x18(%rbp), %rcx
00000000000060a7	movb	%al, 0x548(%rcx)
00000000000060ad	jmp	0x60b6
00000000000060b2	movb	$0x1, -0x1b(%rbp)
00000000000060b6	jmp	0x60bb
00000000000060bb	cmpb	$0x0, -0x1b(%rbp)
00000000000060bf	jne	0x6134
00000000000060c5	movzbl	-0x19(%rbp), %eax
00000000000060c9	cmpl	$0x0, %eax
00000000000060cc	je	0x60f1
00000000000060d2	movzbl	-0x19(%rbp), %eax
00000000000060d6	movzbl	-0x1c(%rbp), %ecx
00000000000060da	cmpl	%ecx, %eax
00000000000060dc	je	0x60f1
00000000000060e2	movb	$0x0, -0x19(%rbp)
00000000000060e6	movq	-0x18(%rbp), %rax
00000000000060ea	movb	$0x0, 0x548(%rax)
00000000000060f1	movb	-0x1c(%rbp), %al
00000000000060f4	movq	-0x18(%rbp), %rcx
00000000000060f8	movq	-0x18(%rbp), %rdx
00000000000060fc	movb	0x4c8(%rdx), %sil
0000000000006103	movb	%sil, %dil
0000000000006106	addb	$0x1, %dil
000000000000610a	movb	%dil, 0x4c8(%rdx)
0000000000006111	movzbl	%sil, %r8d
0000000000006115	movl	%r8d, %edx
0000000000006118	movb	%al, 0x4d0(%rcx,%rdx,8)
000000000000611f	movq	-0x10(%rbp), %rdi
0000000000006123	movq	-0x18(%rbp), %rsi
0000000000006127	callq	_ZydisInputSkip
000000000000612c	movb	-0x1a(%rbp), %al
000000000000612f	addb	$0x1, %al
0000000000006131	movb	%al, -0x1a(%rbp)
0000000000006134	jmp	0x6139
0000000000006139	cmpb	$0x0, -0x1b(%rbp)
000000000000613d	setne	%al
0000000000006140	xorb	$-0x1, %al
0000000000006142	testb	$0x1, %al
0000000000006144	jne	0x5df7
000000000000614a	movq	-0x18(%rbp), %rax
000000000000614e	movabsq	$0x400000000, %rcx
0000000000006158	andq	0x430(%rax), %rcx
000000000000615f	cmpq	$0x0, %rcx
0000000000006163	je	0x6182
0000000000006169	movq	-0x18(%rbp), %rax
000000000000616d	movq	-0x10(%rbp), %rcx
0000000000006171	movzbl	0x20(%rcx), %edx
0000000000006175	movl	%edx, %ecx
0000000000006177	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000006182	movq	-0x18(%rbp), %rax
0000000000006186	movabsq	$0x800000000, %rcx
0000000000006190	andq	0x430(%rax), %rcx
0000000000006197	cmpq	$0x0, %rcx
000000000000619b	je	0x61ba
00000000000061a1	movq	-0x18(%rbp), %rax
00000000000061a5	movq	-0x10(%rbp), %rcx
00000000000061a9	movzbl	0x21(%rcx), %edx
00000000000061ad	movl	%edx, %ecx
00000000000061af	movl	$0x1, 0x4cc(%rax,%rcx,8)
00000000000061ba	cmpb	$0x0, -0x19(%rbp)
00000000000061be	je	0x61f1
00000000000061c4	movq	-0x18(%rbp), %rax
00000000000061c8	movq	-0x18(%rbp), %rcx
00000000000061cc	movzbl	0x548(%rcx), %edx
00000000000061d3	movl	%edx, %ecx
00000000000061d5	movl	$0x1, 0x4cc(%rax,%rcx,8)
00000000000061e0	movq	-0x10(%rbp), %rdi
00000000000061e4	movq	-0x18(%rbp), %rsi
00000000000061e8	movzbl	-0x19(%rbp), %edx
00000000000061ec	callq	_ZydisDecodeREX
00000000000061f1	movl	$0x100000, -0x4(%rbp)
00000000000061f8	movl	-0x4(%rbp), %eax
00000000000061fb	addq	$0x50, %rsp
00000000000061ff	popq	%rbp
0000000000006200	retq
0000000000006201	nopw	%cs:(%rax,%rax)
000000000000620b	nopl	(%rax,%rax)
_ZydisDecodeInstruction:
0000000000006210	pushq	%rbp
0000000000006211	movq	%rsp, %rbp
0000000000006214	subq	$0x90, %rsp
000000000000621b	movq	%rdi, -0x10(%rbp)
000000000000621f	movq	%rsi, -0x18(%rbp)
0000000000006223	cmpq	$0x0, -0x10(%rbp)
0000000000006228	setne	%al
000000000000622b	xorb	$-0x1, %al
000000000000622d	andb	$0x1, %al
000000000000622f	movzbl	%al, %ecx
0000000000006232	movslq	%ecx, %rsi
0000000000006235	cmpq	$0x0, %rsi
0000000000006239	je	0x625e
000000000000623f	leaq	0x63762(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000006246	leaq	0x6368d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000624d	leaq	0x636bb(%rip), %rcx ## literal pool for: "context"
0000000000006254	movl	$0x1201, %edx
0000000000006259	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000625e	jmp	0x6263
0000000000006263	cmpq	$0x0, -0x18(%rbp)
0000000000006268	setne	%al
000000000000626b	xorb	$-0x1, %al
000000000000626d	andb	$0x1, %al
000000000000626f	movzbl	%al, %ecx
0000000000006272	movslq	%ecx, %rdx
0000000000006275	cmpq	$0x0, %rdx
0000000000006279	je	0x629e
000000000000627f	leaq	0x63722(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000006286	leaq	0x6364d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000628d	leaq	0x63683(%rip), %rcx ## literal pool for: "instruction"
0000000000006294	movl	$0x1202, %edx
0000000000006299	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000629e	jmp	0x62a3
00000000000062a3	callq	_ZydisDecoderTreeGetRootNode
00000000000062a8	movq	%rax, -0x20(%rbp)
00000000000062ac	movq	$0x0, -0x28(%rbp)
00000000000062b4	movq	-0x20(%rbp), %rax
00000000000062b8	movb	(%rax), %cl
00000000000062ba	movb	%cl, -0x29(%rbp)
00000000000062bd	movw	$0x0, -0x2c(%rbp)
00000000000062c3	movl	$0x0, -0x30(%rbp)
00000000000062ca	movzbl	-0x29(%rbp), %edx
00000000000062ce	movl	%edx, %eax
00000000000062d0	movq	%rax, %rsi
00000000000062d3	subq	$0x1b, %rsi
00000000000062d7	movq	%rax, -0x68(%rbp)
00000000000062db	movq	%rsi, -0x70(%rbp)
00000000000062df	ja	0x66a7
00000000000062e5	leaq	0x90c(%rip), %rax
00000000000062ec	movq	-0x68(%rbp), %rcx
00000000000062f0	movslq	(%rax,%rcx,4), %rdx
00000000000062f4	addq	%rax, %rdx
00000000000062f7	jmpq	*%rdx
00000000000062f9	cmpq	$0x0, -0x28(%rbp)
00000000000062fe	je	0x63a5
0000000000006304	movq	-0x28(%rbp), %rax
0000000000006308	movq	%rax, -0x20(%rbp)
000000000000630c	movq	$0x0, -0x28(%rbp)
0000000000006314	movb	$0xc, -0x29(%rbp)
0000000000006318	movq	-0x10(%rbp), %rax
000000000000631c	movzbl	0x1c(%rax), %ecx
0000000000006320	cmpl	$0x0, %ecx
0000000000006323	je	0x6342
0000000000006329	movq	-0x18(%rbp), %rax
000000000000632d	movq	-0x10(%rbp), %rcx
0000000000006331	movzbl	0x23(%rcx), %edx
0000000000006335	movl	%edx, %ecx
0000000000006337	movl	$0x0, 0x4cc(%rax,%rcx,8)
0000000000006342	movq	-0x10(%rbp), %rax
0000000000006346	movzbl	0x1c(%rax), %ecx
000000000000634a	cmpl	$0x66, %ecx
000000000000634d	jne	0x63a0
0000000000006353	movq	-0x10(%rbp), %rax
0000000000006357	movzbl	0x20(%rax), %ecx
000000000000635b	movq	-0x10(%rbp), %rax
000000000000635f	movzbl	0x23(%rax), %edx
0000000000006363	cmpl	%edx, %ecx
0000000000006365	jne	0x6384
000000000000636b	movq	-0x18(%rbp), %rax
000000000000636f	movq	-0x10(%rbp), %rcx
0000000000006373	movzbl	0x23(%rcx), %edx
0000000000006377	movl	%edx, %ecx
0000000000006379	movl	$0x1, 0x4cc(%rax,%rcx,8)
0000000000006384	movq	-0x18(%rbp), %rax
0000000000006388	movabsq	$0x400000000, %rcx
0000000000006392	orq	0x430(%rax), %rcx
0000000000006399	movq	%rcx, 0x430(%rax)
00000000000063a0	jmp	0x6ba5
00000000000063a5	movl	$0x80200001, -0x4(%rbp)
00000000000063ac	jmp	0x6be9
00000000000063b1	movq	-0x18(%rbp), %rdi
00000000000063b5	leaq	-0x2c(%rbp), %rsi
00000000000063b9	callq	_ZydisNodeHandlerXOP
00000000000063be	movl	%eax, -0x30(%rbp)
00000000000063c1	jmp	0x6b68
00000000000063c6	movq	-0x18(%rbp), %rdi
00000000000063ca	leaq	-0x2c(%rbp), %rsi
00000000000063ce	callq	_ZydisNodeHandlerVEX
00000000000063d3	movl	%eax, -0x30(%rbp)
00000000000063d6	jmp	0x6b68
00000000000063db	movq	-0x18(%rbp), %rdi
00000000000063df	leaq	-0x2c(%rbp), %rsi
00000000000063e3	callq	_ZydisNodeHandlerEMVEX
00000000000063e8	movl	%eax, -0x30(%rbp)
00000000000063eb	jmp	0x6b68
00000000000063f0	movq	-0x10(%rbp), %rdi
00000000000063f4	movq	-0x18(%rbp), %rsi
00000000000063f8	leaq	-0x2c(%rbp), %rdx
00000000000063fc	callq	_ZydisNodeHandlerOpcode
0000000000006401	movl	%eax, -0x30(%rbp)
0000000000006404	jmp	0x6b68
0000000000006409	movq	-0x10(%rbp), %rdi
000000000000640d	leaq	-0x2c(%rbp), %rsi
0000000000006411	callq	_ZydisNodeHandlerMode
0000000000006416	movl	%eax, -0x30(%rbp)
0000000000006419	jmp	0x6b68
000000000000641e	movq	-0x10(%rbp), %rdi
0000000000006422	leaq	-0x2c(%rbp), %rsi
0000000000006426	callq	_ZydisNodeHandlerModeCompact
000000000000642b	movl	%eax, -0x30(%rbp)
000000000000642e	jmp	0x6b68
0000000000006433	movq	-0x10(%rbp), %rdi
0000000000006437	movq	-0x18(%rbp), %rsi
000000000000643b	leaq	-0x2c(%rbp), %rdx
000000000000643f	callq	_ZydisNodeHandlerModrmMod
0000000000006444	movl	%eax, -0x30(%rbp)
0000000000006447	jmp	0x6b68
000000000000644c	movq	-0x10(%rbp), %rdi
0000000000006450	movq	-0x18(%rbp), %rsi
0000000000006454	leaq	-0x2c(%rbp), %rdx
0000000000006458	callq	_ZydisNodeHandlerModrmModCompact
000000000000645d	movl	%eax, -0x30(%rbp)
0000000000006460	jmp	0x6b68
0000000000006465	movq	-0x10(%rbp), %rdi
0000000000006469	movq	-0x18(%rbp), %rsi
000000000000646d	leaq	-0x2c(%rbp), %rdx
0000000000006471	callq	_ZydisNodeHandlerModrmReg
0000000000006476	movl	%eax, -0x30(%rbp)
0000000000006479	jmp	0x6b68
000000000000647e	movq	-0x10(%rbp), %rdi
0000000000006482	movq	-0x18(%rbp), %rsi
0000000000006486	leaq	-0x2c(%rbp), %rdx
000000000000648a	callq	_ZydisNodeHandlerModrmRm
000000000000648f	movl	%eax, -0x30(%rbp)
0000000000006492	jmp	0x6b68
0000000000006497	xorl	%eax, %eax
0000000000006499	movq	-0x10(%rbp), %rcx
000000000000649d	movzbl	0x19(%rcx), %edx
00000000000064a1	cmpl	$0x0, %edx
00000000000064a4	movl	$0x1, %edx
00000000000064a9	cmovnel	%edx, %eax
00000000000064ac	movw	%ax, %si
00000000000064af	movw	%si, -0x2c(%rbp)
00000000000064b3	jmp	0x6b68
00000000000064b8	movq	-0x10(%rbp), %rdi
00000000000064bc	movq	-0x18(%rbp), %rsi
00000000000064c0	leaq	-0x2c(%rbp), %rdx
00000000000064c4	callq	_ZydisNodeHandlerMandatoryPrefix
00000000000064c9	xorl	%esi, %esi
00000000000064cb	movl	%eax, -0x30(%rbp)
00000000000064ce	movq	-0x20(%rbp), %rdi
00000000000064d2	callq	_ZydisDecoderTreeGetChildNode
00000000000064d7	movq	%rax, -0x28(%rbp)
00000000000064db	jmp	0x6b68
00000000000064e0	movq	-0x10(%rbp), %rdi
00000000000064e4	movq	-0x18(%rbp), %rsi
00000000000064e8	leaq	-0x2c(%rbp), %rdx
00000000000064ec	callq	_ZydisNodeHandlerOperandSize
00000000000064f1	movl	%eax, -0x30(%rbp)
00000000000064f4	jmp	0x6b68
00000000000064f9	movq	-0x10(%rbp), %rdi
00000000000064fd	movq	-0x18(%rbp), %rsi
0000000000006501	leaq	-0x2c(%rbp), %rdx
0000000000006505	callq	_ZydisNodeHandlerAddressSize
000000000000650a	movl	%eax, -0x30(%rbp)
000000000000650d	jmp	0x6b68
0000000000006512	movq	-0x10(%rbp), %rdi
0000000000006516	movq	-0x18(%rbp), %rsi
000000000000651a	leaq	-0x2c(%rbp), %rdx
000000000000651e	callq	_ZydisNodeHandlerVectorLength
0000000000006523	movl	%eax, -0x30(%rbp)
0000000000006526	jmp	0x6b68
000000000000652b	movq	-0x10(%rbp), %rdi
000000000000652f	movq	-0x18(%rbp), %rsi
0000000000006533	leaq	-0x2c(%rbp), %rdx
0000000000006537	callq	_ZydisNodeHandlerRexW
000000000000653c	movl	%eax, -0x30(%rbp)
000000000000653f	jmp	0x6b68
0000000000006544	movq	-0x10(%rbp), %rdi
0000000000006548	movq	-0x18(%rbp), %rsi
000000000000654c	leaq	-0x2c(%rbp), %rdx
0000000000006550	callq	_ZydisNodeHandlerRexB
0000000000006555	movl	%eax, -0x30(%rbp)
0000000000006558	jmp	0x6b68
000000000000655d	movq	-0x18(%rbp), %rdi
0000000000006561	leaq	-0x2c(%rbp), %rsi
0000000000006565	callq	_ZydisNodeHandlerEvexB
000000000000656a	movl	%eax, -0x30(%rbp)
000000000000656d	jmp	0x6b68
0000000000006572	movq	-0x18(%rbp), %rdi
0000000000006576	leaq	-0x2c(%rbp), %rsi
000000000000657a	callq	_ZydisNodeHandlerMvexE
000000000000657f	movl	%eax, -0x30(%rbp)
0000000000006582	jmp	0x6b68
0000000000006587	xorl	%eax, %eax
0000000000006589	movq	-0x10(%rbp), %rcx
000000000000658d	movq	(%rcx), %rcx
0000000000006590	movzbl	0x9(%rcx), %edx
0000000000006594	cmpl	$0x0, %edx
0000000000006597	movl	$0x1, %edx
000000000000659c	cmovnel	%edx, %eax
000000000000659f	movw	%ax, %si
00000000000065a2	movw	%si, -0x2c(%rbp)
00000000000065a6	jmp	0x6b68
00000000000065ab	xorl	%eax, %eax
00000000000065ad	movq	-0x10(%rbp), %rcx
00000000000065b1	movq	(%rcx), %rcx
00000000000065b4	movzbl	0xa(%rcx), %edx
00000000000065b8	cmpl	$0x0, %edx
00000000000065bb	movl	$0x1, %edx
00000000000065c0	cmovnel	%edx, %eax
00000000000065c3	movw	%ax, %si
00000000000065c6	movw	%si, -0x2c(%rbp)
00000000000065ca	jmp	0x6b68
00000000000065cf	xorl	%eax, %eax
00000000000065d1	movq	-0x10(%rbp), %rcx
00000000000065d5	movq	(%rcx), %rcx
00000000000065d8	movzbl	0xb(%rcx), %edx
00000000000065dc	cmpl	$0x0, %edx
00000000000065df	movl	$0x1, %edx
00000000000065e4	cmovnel	%edx, %eax
00000000000065e7	movw	%ax, %si
00000000000065ea	movw	%si, -0x2c(%rbp)
00000000000065ee	jmp	0x6b68
00000000000065f3	xorl	%eax, %eax
00000000000065f5	movq	-0x10(%rbp), %rcx
00000000000065f9	movq	(%rcx), %rcx
00000000000065fc	movzbl	0xc(%rcx), %edx
0000000000006600	cmpl	$0x0, %edx
0000000000006603	movl	$0x1, %edx
0000000000006608	cmovnel	%edx, %eax
000000000000660b	movw	%ax, %si
000000000000660e	movw	%si, -0x2c(%rbp)
0000000000006612	jmp	0x6b68
0000000000006617	xorl	%eax, %eax
0000000000006619	movq	-0x10(%rbp), %rcx
000000000000661d	movq	(%rcx), %rcx
0000000000006620	movzbl	0xd(%rcx), %edx
0000000000006624	cmpl	$0x0, %edx
0000000000006627	movl	$0x1, %edx
000000000000662c	cmovnel	%edx, %eax
000000000000662f	movw	%ax, %si
0000000000006632	movw	%si, -0x2c(%rbp)
0000000000006636	jmp	0x6b68
000000000000663b	xorl	%eax, %eax
000000000000663d	movq	-0x10(%rbp), %rcx
0000000000006641	movq	(%rcx), %rcx
0000000000006644	movzbl	0xe(%rcx), %edx
0000000000006648	cmpl	$0x0, %edx
000000000000664b	movl	$0x1, %edx
0000000000006650	cmovnel	%edx, %eax
0000000000006653	movw	%ax, %si
0000000000006656	movw	%si, -0x2c(%rbp)
000000000000665a	jmp	0x6b68
000000000000665f	xorl	%eax, %eax
0000000000006661	movq	-0x10(%rbp), %rcx
0000000000006665	movq	(%rcx), %rcx
0000000000006668	movzbl	0xf(%rcx), %edx
000000000000666c	cmpl	$0x0, %edx
000000000000666f	movl	$0x1, %edx
0000000000006674	cmovnel	%edx, %eax
0000000000006677	movw	%ax, %si
000000000000667a	movw	%si, -0x2c(%rbp)
000000000000667e	jmp	0x6b68
0000000000006683	xorl	%eax, %eax
0000000000006685	movq	-0x10(%rbp), %rcx
0000000000006689	movq	(%rcx), %rcx
000000000000668c	movzbl	0x10(%rcx), %edx
0000000000006690	cmpl	$0x0, %edx
0000000000006693	movl	$0x1, %edx
0000000000006698	cmovnel	%edx, %eax
000000000000669b	movw	%ax, %si
000000000000669e	movw	%si, -0x2c(%rbp)
00000000000066a2	jmp	0x6b68
00000000000066a7	movzbl	-0x29(%rbp), %eax
00000000000066ab	andl	$0x80, %eax
00000000000066b0	cmpl	$0x0, %eax
00000000000066b3	je	0x6b49
00000000000066b9	movq	-0x18(%rbp), %rax
00000000000066bd	movl	0xc(%rax), %edi
00000000000066c0	movq	-0x20(%rbp), %rax
00000000000066c4	movzwl	0x1(%rax), %esi
00000000000066c8	leaq	-0x38(%rbp), %rdx
00000000000066cc	callq	_ZydisGetInstructionDefinition
00000000000066d1	movq	-0x10(%rbp), %rdi
00000000000066d5	movq	-0x18(%rbp), %rsi
00000000000066d9	movq	-0x38(%rbp), %rdx
00000000000066dd	callq	_ZydisSetEffectiveOperandWidth
00000000000066e2	movq	-0x10(%rbp), %rdi
00000000000066e6	movq	-0x18(%rbp), %rsi
00000000000066ea	movq	-0x38(%rbp), %rdx
00000000000066ee	callq	_ZydisSetEffectiveAddressWidth
00000000000066f3	movq	-0x20(%rbp), %rdi
00000000000066f7	leaq	-0x40(%rbp), %rsi
00000000000066fb	callq	_ZydisGetInstructionEncodingInfo
0000000000006700	movq	-0x10(%rbp), %rdi
0000000000006704	movq	-0x18(%rbp), %rsi
0000000000006708	movq	-0x40(%rbp), %rdx
000000000000670c	callq	_ZydisDecodeOptionalInstructionParts
0000000000006711	movl	%eax, -0x44(%rbp)
0000000000006714	movl	-0x44(%rbp), %eax
0000000000006717	andl	$0x80000000, %eax
000000000000671c	cmpl	$0x0, %eax
000000000000671f	je	0x6730
0000000000006725	movl	-0x44(%rbp), %eax
0000000000006728	movl	%eax, -0x4(%rbp)
000000000000672b	jmp	0x6be9
0000000000006730	jmp	0x6735
0000000000006735	jmp	0x673a
000000000000673a	movq	-0x10(%rbp), %rdi
000000000000673e	movq	-0x18(%rbp), %rsi
0000000000006742	movq	-0x38(%rbp), %rdx
0000000000006746	callq	_ZydisCheckErrorConditions
000000000000674b	movl	%eax, -0x48(%rbp)
000000000000674e	movl	-0x48(%rbp), %eax
0000000000006751	andl	$0x80000000, %eax
0000000000006756	cmpl	$0x0, %eax
0000000000006759	je	0x676a
000000000000675f	movl	-0x48(%rbp), %eax
0000000000006762	movl	%eax, -0x4(%rbp)
0000000000006765	jmp	0x6be9
000000000000676a	jmp	0x676f
000000000000676f	movq	-0x18(%rbp), %rax
0000000000006773	cmpl	$0x1, 0xc(%rax)
0000000000006777	jne	0x68fd
000000000000677d	jmp	0x6782
0000000000006782	movq	-0x10(%rbp), %rdi
0000000000006786	movq	-0x18(%rbp), %rsi
000000000000678a	movq	-0x18(%rbp), %rax
000000000000678e	addq	$0x14, %rax
0000000000006792	movq	%rax, %rdx
0000000000006795	callq	_ZydisInputNext
000000000000679a	movl	%eax, -0x4c(%rbp)
000000000000679d	movl	-0x4c(%rbp), %eax
00000000000067a0	andl	$0x80000000, %eax
00000000000067a5	cmpl	$0x0, %eax
00000000000067a8	je	0x67b9
00000000000067ae	movl	-0x4c(%rbp), %eax
00000000000067b1	movl	%eax, -0x4(%rbp)
00000000000067b4	jmp	0x6be9
00000000000067b9	jmp	0x67be
00000000000067be	callq	_ZydisDecoderTreeGetRootNode
00000000000067c3	movq	%rax, -0x20(%rbp)
00000000000067c7	movq	-0x20(%rbp), %rdi
00000000000067cb	movl	$0xf, %esi
00000000000067d0	callq	_ZydisDecoderTreeGetChildNode
00000000000067d5	movq	%rax, -0x20(%rbp)
00000000000067d9	movq	-0x20(%rbp), %rdi
00000000000067dd	movl	$0xf, %esi
00000000000067e2	callq	_ZydisDecoderTreeGetChildNode
00000000000067e7	movq	%rax, -0x20(%rbp)
00000000000067eb	movq	-0x20(%rbp), %rdi
00000000000067ef	movq	-0x18(%rbp), %rax
00000000000067f3	movzbl	0x14(%rax), %esi
00000000000067f7	movw	%si, %cx
00000000000067fa	movzwl	%cx, %esi
00000000000067fd	callq	_ZydisDecoderTreeGetChildNode
0000000000006802	movq	%rax, -0x20(%rbp)
0000000000006806	movq	-0x20(%rbp), %rax
000000000000680a	movzbl	(%rax), %esi
000000000000680d	cmpl	$0x0, %esi
0000000000006810	jne	0x6822
0000000000006816	movl	$0x80200001, -0x4(%rbp)
000000000000681d	jmp	0x6be9
0000000000006822	movq	-0x20(%rbp), %rax
0000000000006826	movzbl	(%rax), %ecx
0000000000006829	cmpl	$0x8, %ecx
000000000000682c	sete	%dl
000000000000682f	xorb	$-0x1, %dl
0000000000006832	andb	$0x1, %dl
0000000000006835	movzbl	%dl, %ecx
0000000000006838	movslq	%ecx, %rax
000000000000683b	cmpq	$0x0, %rax
000000000000683f	je	0x6864
0000000000006845	leaq	0x6315c(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
000000000000684c	leaq	0x63087(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006853	leaq	0x63165(%rip), %rcx ## literal pool for: "node->type == ZYDIS_NODETYPE_FILTER_MODRM_MOD_COMPACT"
000000000000685a	movl	$0x1299, %edx
000000000000685f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006864	jmp	0x6869
0000000000006869	xorl	%eax, %eax
000000000000686b	movq	-0x20(%rbp), %rdi
000000000000686f	movq	-0x18(%rbp), %rcx
0000000000006873	movzbl	0x578(%rcx), %edx
000000000000687a	cmpl	$0x3, %edx
000000000000687d	movl	$0x1, %edx
0000000000006882	cmovel	%eax, %edx
0000000000006885	movw	%dx, %si
0000000000006888	movzwl	%si, %esi
000000000000688b	callq	_ZydisDecoderTreeGetChildNode
0000000000006890	movq	%rax, -0x20(%rbp)
0000000000006894	movq	-0x20(%rbp), %rax
0000000000006898	movzbl	(%rax), %edx
000000000000689b	andl	$0x80, %edx
00000000000068a1	cmpl	$0x0, %edx
00000000000068a4	setne	%r8b
00000000000068a8	xorb	$-0x1, %r8b
00000000000068ac	andb	$0x1, %r8b
00000000000068b0	movzbl	%r8b, %edx
00000000000068b4	movslq	%edx, %rax
00000000000068b7	cmpq	$0x0, %rax
00000000000068bb	je	0x68e0
00000000000068c1	leaq	0x630e0(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
00000000000068c8	leaq	0x6300b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000068cf	leaq	0x6311f(%rip), %rcx ## literal pool for: "node->type & ZYDIS_NODETYPE_DEFINITION_MASK"
00000000000068d6	movl	$0x129c, %edx
00000000000068db	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000068e0	jmp	0x68e5
00000000000068e5	movq	-0x18(%rbp), %rax
00000000000068e9	movl	0xc(%rax), %edi
00000000000068ec	movq	-0x20(%rbp), %rax
00000000000068f0	movzwl	0x1(%rax), %esi
00000000000068f4	leaq	-0x38(%rbp), %rdx
00000000000068f8	callq	_ZydisGetInstructionDefinition
00000000000068fd	movq	-0x38(%rbp), %rax
0000000000006901	movl	(%rax), %ecx
0000000000006903	andl	$0x7ff, %ecx
0000000000006909	movq	-0x18(%rbp), %rax
000000000000690d	movl	%ecx, 0x4(%rax)
0000000000006910	movq	-0x38(%rbp), %rax
0000000000006914	movq	(%rax), %rax
0000000000006917	shrq	$0x2b, %rax
000000000000691b	movl	%eax, %ecx
000000000000691d	andl	$0x7f, %ecx
0000000000006920	movq	-0x18(%rbp), %rax
0000000000006924	movl	%ecx, 0x4b0(%rax)
000000000000692a	movq	-0x38(%rbp), %rax
000000000000692e	movq	(%rax), %rax
0000000000006931	shrq	$0x32, %rax
0000000000006935	movl	%eax, %ecx
0000000000006937	movb	%cl, %dl
0000000000006939	movzbl	%dl, %ecx
000000000000693c	movq	-0x18(%rbp), %rax
0000000000006940	movl	%ecx, 0x4b4(%rax)
0000000000006946	movq	-0x38(%rbp), %rax
000000000000694a	movq	(%rax), %rsi
000000000000694d	movzwl	0x8(%rax), %ecx
0000000000006951	shll	$0x6, %ecx
0000000000006954	shrq	$0x3a, %rsi
0000000000006958	movl	%esi, %edi
000000000000695a	orl	%ecx, %edi
000000000000695c	andl	$0x7f, %edi
000000000000695f	movq	-0x18(%rbp), %rax
0000000000006963	movl	%edi, 0x4b8(%rax)
0000000000006969	movq	-0x38(%rbp), %rax
000000000000696d	movb	0x8(%rax), %dl
0000000000006970	shrb	%dl
0000000000006972	andb	$0x3, %dl
0000000000006975	movzbl	%dl, %ecx
0000000000006978	movq	-0x18(%rbp), %rax
000000000000697c	movl	%ecx, 0x4bc(%rax)
0000000000006982	movq	-0x18(%rbp), %rax
0000000000006986	cmpl	$0x0, 0x4bc(%rax)
000000000000698d	movb	$0x1, %dl
000000000000698f	movb	%dl, -0x71(%rbp)
0000000000006992	je	0x69f1
0000000000006998	movq	-0x18(%rbp), %rax
000000000000699c	cmpl	$0x14, 0x4b0(%rax)
00000000000069a3	movb	$0x1, %cl
00000000000069a5	movb	%cl, -0x72(%rbp)
00000000000069a8	je	0x69eb
00000000000069ae	movq	-0x18(%rbp), %rax
00000000000069b2	cmpl	$0x1c, 0x4b0(%rax)
00000000000069b9	movb	$0x1, %cl
00000000000069bb	movb	%cl, -0x72(%rbp)
00000000000069be	je	0x69eb
00000000000069c4	movq	-0x18(%rbp), %rax
00000000000069c8	cmpl	$0x5a, 0x4b0(%rax)
00000000000069cf	movb	$0x1, %cl
00000000000069d1	movb	%cl, -0x72(%rbp)
00000000000069d4	je	0x69eb
00000000000069da	movq	-0x18(%rbp), %rax
00000000000069de	cmpl	$0x46, 0x4b0(%rax)
00000000000069e5	sete	%cl
00000000000069e8	movb	%cl, -0x72(%rbp)
00000000000069eb	movb	-0x72(%rbp), %al
00000000000069ee	movb	%al, -0x71(%rbp)
00000000000069f1	movb	-0x71(%rbp), %al
00000000000069f4	xorb	$-0x1, %al
00000000000069f6	andb	$0x1, %al
00000000000069f8	movzbl	%al, %ecx
00000000000069fb	movslq	%ecx, %rdx
00000000000069fe	cmpq	$0x0, %rdx
0000000000006a02	je	0x6a27
0000000000006a08	leaq	0x62f99(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000006a0f	leaq	0x62ec4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006a16	leaq	0x63004(%rip), %rcx ## literal pool for: "(instruction->meta.branch_type == ZYDIS_BRANCH_TYPE_NONE) || ((instruction->meta.category == ZYDIS_CATEGORY_CALL) || (instruction->meta.category == ZYDIS_CATEGORY_COND_BR) || (instruction->meta.category == ZYDIS_CATEGORY_UNCOND_BR) || (instruction->meta.category == ZYDIS_CATEGORY_RET))"
0000000000006a1d	movl	$0x12aa, %edx
0000000000006a22	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006a27	jmp	0x6a2c
0000000000006a2c	movq	-0x38(%rbp), %rax
0000000000006a30	movzwl	0x8(%rax), %ecx
0000000000006a34	movl	%ecx, %eax
0000000000006a36	shrq	$0x3, %rax
0000000000006a3a	movb	%al, %dl
0000000000006a3c	andb	$0x3f, %dl
0000000000006a3f	movzbl	%dl, %ecx
0000000000006a42	movq	-0x18(%rbp), %rax
0000000000006a46	movl	%ecx, 0x4c0(%rax)
0000000000006a4c	movq	-0x10(%rbp), %rax
0000000000006a50	movq	(%rax), %rax
0000000000006a53	cmpb	$0x0, 0x8(%rax)
0000000000006a57	jne	0x6b3d
0000000000006a5d	movq	-0x10(%rbp), %rdi
0000000000006a61	movq	-0x18(%rbp), %rsi
0000000000006a65	movq	-0x38(%rbp), %rdx
0000000000006a69	callq	_ZydisSetAttributes
0000000000006a6e	movq	-0x18(%rbp), %rdx
0000000000006a72	movl	0xc(%rdx), %eax
0000000000006a75	addl	$-0x2, %eax
0000000000006a78	subl	$0x3, %eax
0000000000006a7b	movl	%eax, -0x78(%rbp)
0000000000006a7e	ja	0x6a9f
0000000000006a84	jmp	0x6a89
0000000000006a89	movq	-0x10(%rbp), %rdi
0000000000006a8d	movq	-0x18(%rbp), %rsi
0000000000006a91	movq	-0x38(%rbp), %rdx
0000000000006a95	callq	_ZydisSetAVXInformation
0000000000006a9a	jmp	0x6aa4
0000000000006a9f	jmp	0x6aa4
0000000000006aa4	jmp	0x6aa9
0000000000006aa9	movq	-0x10(%rbp), %rdi
0000000000006aad	movq	-0x18(%rbp), %rsi
0000000000006ab1	movq	-0x38(%rbp), %rdx
0000000000006ab5	callq	_ZydisDecodeOperands
0000000000006aba	movl	%eax, -0x50(%rbp)
0000000000006abd	movl	-0x50(%rbp), %eax
0000000000006ac0	andl	$0x80000000, %eax
0000000000006ac5	cmpl	$0x0, %eax
0000000000006ac8	je	0x6ad9
0000000000006ace	movl	-0x50(%rbp), %eax
0000000000006ad1	movl	%eax, -0x4(%rbp)
0000000000006ad4	jmp	0x6be9
0000000000006ad9	jmp	0x6ade
0000000000006ade	movq	-0x38(%rbp), %rdi
0000000000006ae2	leaq	-0x58(%rbp), %rsi
0000000000006ae6	callq	_ZydisGetAccessedFlags
0000000000006aeb	cmpb	$0x0, %al
0000000000006aed	je	0x6b38
0000000000006af3	movq	$-0x1, %rcx
0000000000006afa	movq	-0x18(%rbp), %rax
0000000000006afe	movabsq	$0x1000000000, %rdx
0000000000006b08	orq	0x430(%rax), %rdx
0000000000006b0f	movq	%rdx, 0x430(%rax)
0000000000006b16	movq	-0x18(%rbp), %rax
0000000000006b1a	addq	$0x438, %rax
0000000000006b20	movq	-0x58(%rbp), %rdx
0000000000006b24	movq	%rax, %rdi
0000000000006b27	movq	%rdx, %rsi
0000000000006b2a	movl	$0x54, %edx
0000000000006b2f	callq	0x2796c ## symbol stub for: ___memcpy_chk
0000000000006b34	movq	%rax, -0x80(%rbp)
0000000000006b38	jmp	0x6b3d
0000000000006b3d	movl	$0x100000, -0x4(%rbp)
0000000000006b44	jmp	0x6be9
0000000000006b49	leaq	0x62e58(%rip), %rdi ## literal pool for: "ZydisDecodeInstruction"
0000000000006b50	leaq	0x62d83(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006b57	leaq	0x64a66(%rip), %rcx ## literal pool for: "0"
0000000000006b5e	movl	$0x12cc, %edx
0000000000006b63	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006b68	jmp	0x6b6d
0000000000006b6d	movl	-0x30(%rbp), %eax
0000000000006b70	movl	%eax, -0x5c(%rbp)
0000000000006b73	movl	-0x5c(%rbp), %eax
0000000000006b76	andl	$0x80000000, %eax
0000000000006b7b	cmpl	$0x0, %eax
0000000000006b7e	je	0x6b8f
0000000000006b84	movl	-0x5c(%rbp), %eax
0000000000006b87	movl	%eax, -0x4(%rbp)
0000000000006b8a	jmp	0x6be9
0000000000006b8f	jmp	0x6b94
0000000000006b94	movq	-0x20(%rbp), %rdi
0000000000006b98	movzwl	-0x2c(%rbp), %esi
0000000000006b9c	callq	_ZydisDecoderTreeGetChildNode
0000000000006ba1	movq	%rax, -0x20(%rbp)
0000000000006ba5	xorl	%eax, %eax
0000000000006ba7	movb	%al, %cl
0000000000006ba9	movzbl	-0x29(%rbp), %eax
0000000000006bad	cmpl	$0x0, %eax
0000000000006bb0	movb	%cl, -0x81(%rbp)
0000000000006bb6	je	0x6bd4
0000000000006bbc	movzbl	-0x29(%rbp), %eax
0000000000006bc0	andl	$0x80, %eax
0000000000006bc5	cmpl	$0x0, %eax
0000000000006bc8	setne	%cl
0000000000006bcb	xorb	$-0x1, %cl
0000000000006bce	movb	%cl, -0x81(%rbp)
0000000000006bd4	movb	-0x81(%rbp), %al
0000000000006bda	testb	$0x1, %al
0000000000006bdc	jne	0x62b4
0000000000006be2	movl	$0x100000, -0x4(%rbp)
0000000000006be9	movl	-0x4(%rbp), %eax
0000000000006bec	addq	$0x90, %rsp
0000000000006bf3	popq	%rbp
0000000000006bf4	retq
0000000000006bf5	nopl	(%rax)
0000000000006bf8	addl	%esi, %edi
0000000000006bfa	.byte 0xff #bad opcode
0000000000006bfb	.byte 0xff #bad opcode
0000000000006bfc	movl	$0xcefffff7, %ecx
0000000000006c01	idivl	%edi
0000000000006c03	jmpq	*%rbx
0000000000006c05	idivl	%edi
0000000000006c07	.byte 0xff #bad opcode
0000000000006c08	clc
0000000000006c09	idivl	%edi
0000000000006c0b	callq	*(%rcx)
0000000000006c0d	clc
0000000000006c0e	.byte 0xff #bad opcode
0000000000006c0f	jmpq	*(%rsi)
0000000000006c11	clc
0000000000006c12	.byte 0xff #bad opcode
0000000000006c13	.byte 0xff #bad opcode
0000000000006c14	cmpl	%eax, %edi
0000000000006c16	.byte 0xff #bad opcode
0000000000006c17	callq	*-0x1(%rax,%rdi,8)
0000000000006c1b	ljmpl	*-0x8(%rbp)
0000000000006c1e	.byte 0xff #bad opcode
0000000000006c1f	incl	-0x60000008(%rsi)
0000000000006c25	clc
0000000000006c26	.byte 0xff #bad opcode
0000000000006c27	incl	%eax
0000000000006c29	clc
0000000000006c2a	.byte 0xff #bad opcode
0000000000006c2b	.byte 0xff #bad opcode
0000000000006c2c	callq	0x2006c29
0000000000006c31	stc
0000000000006c32	.byte 0xff #bad opcode
0000000000006c33	lcalll	*(%rdx)
0000000000006c35	stc
0000000000006c36	.byte 0xff #bad opcode
0000000000006c37	pushq	(%rbx)
0000000000006c39	stc
0000000000006c3a	.byte 0xff #bad opcode
0000000000006c3b	decl	-0x1(%rcx,%rdi,8)
0000000000006c3f	jmpq	*-0x7(%rbp)
0000000000006c42	.byte 0xff #bad opcode
0000000000006c43	.byte 0xff #bad opcode
0000000000006c44	jp	0x6c3f
0000000000006c46	.byte 0xff #bad opcode
0000000000006c47	decl	-0x4c000007(%rdi)
0000000000006c4d	stc
0000000000006c4e	.byte 0xff #bad opcode
0000000000006c4f	callq	*%rdi
0000000000006c51	stc
0000000000006c52	.byte 0xff #bad opcode
0000000000006c53	.byte 0xff #bad opcode
0000000000006c54	sti
0000000000006c55	stc
0000000000006c56	.byte 0xff #bad opcode
0000000000006c57	lcalll	*(%rdi)
0000000000006c59	cli
0000000000006c5a	.byte 0xff #bad opcode
0000000000006c5b	incl	-0x6(%rbx)
0000000000006c5e	.byte 0xff #bad opcode
0000000000006c5f	jmpq	*-0x6(%rdi)
0000000000006c62	.byte 0xff #bad opcode
0000000000006c63	decl	0xffffffa(%rbx)
0000000000006c69	.byte 0x1f #bad opcode
0000000000006c6a	testb	%al, (%rax)
0000000000006c6c	addb	%al, (%rax)
0000000000006c6e	addb	%al, (%rax)
_ZydisInputPeek:
0000000000006c70	pushq	%rbp
0000000000006c71	movq	%rsp, %rbp
0000000000006c74	subq	$0x20, %rsp
0000000000006c78	movq	%rdi, -0x10(%rbp)
0000000000006c7c	movq	%rsi, -0x18(%rbp)
0000000000006c80	movq	%rdx, -0x20(%rbp)
0000000000006c84	cmpq	$0x0, -0x10(%rbp)
0000000000006c89	setne	%al
0000000000006c8c	xorb	$-0x1, %al
0000000000006c8e	andb	$0x1, %al
0000000000006c90	movzbl	%al, %ecx
0000000000006c93	movslq	%ecx, %rdx
0000000000006c96	cmpq	$0x0, %rdx
0000000000006c9a	je	0x6cbf
0000000000006ca0	leaq	0x62c9f(%rip), %rdi ## literal pool for: "ZydisInputPeek"
0000000000006ca7	leaq	0x62c2c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006cae	leaq	0x62c5a(%rip), %rcx ## literal pool for: "context"
0000000000006cb5	movl	$0x127, %edx
0000000000006cba	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006cbf	jmp	0x6cc4
0000000000006cc4	cmpq	$0x0, -0x18(%rbp)
0000000000006cc9	setne	%al
0000000000006ccc	xorb	$-0x1, %al
0000000000006cce	andb	$0x1, %al
0000000000006cd0	movzbl	%al, %ecx
0000000000006cd3	movslq	%ecx, %rdx
0000000000006cd6	cmpq	$0x0, %rdx
0000000000006cda	je	0x6cff
0000000000006ce0	leaq	0x62c5f(%rip), %rdi ## literal pool for: "ZydisInputPeek"
0000000000006ce7	leaq	0x62bec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006cee	leaq	0x62c22(%rip), %rcx ## literal pool for: "instruction"
0000000000006cf5	movl	$0x128, %edx
0000000000006cfa	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006cff	jmp	0x6d04
0000000000006d04	cmpq	$0x0, -0x20(%rbp)
0000000000006d09	setne	%al
0000000000006d0c	xorb	$-0x1, %al
0000000000006d0e	andb	$0x1, %al
0000000000006d10	movzbl	%al, %ecx
0000000000006d13	movslq	%ecx, %rdx
0000000000006d16	cmpq	$0x0, %rdx
0000000000006d1a	je	0x6d3f
0000000000006d20	leaq	0x62c1f(%rip), %rdi ## literal pool for: "ZydisInputPeek"
0000000000006d27	leaq	0x62bac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006d2e	leaq	0x62c20(%rip), %rcx ## literal pool for: "value"
0000000000006d35	movl	$0x129, %edx
0000000000006d3a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006d3f	jmp	0x6d44
0000000000006d44	movq	-0x18(%rbp), %rax
0000000000006d48	movzbl	0x8(%rax), %ecx
0000000000006d4c	cmpl	$0xf, %ecx
0000000000006d4f	jl	0x6d61
0000000000006d55	movl	$0x80200002, -0x4(%rbp)
0000000000006d5c	jmp	0x6d93
0000000000006d61	movq	-0x10(%rbp), %rax
0000000000006d65	cmpq	$0x0, 0x10(%rax)
0000000000006d6a	jbe	0x6d8c
0000000000006d70	movq	-0x10(%rbp), %rax
0000000000006d74	movq	0x8(%rax), %rax
0000000000006d78	movb	(%rax), %cl
0000000000006d7a	movq	-0x20(%rbp), %rax
0000000000006d7e	movb	%cl, (%rax)
0000000000006d80	movl	$0x100000, -0x4(%rbp)
0000000000006d87	jmp	0x6d93
0000000000006d8c	movl	$0x80200000, -0x4(%rbp)
0000000000006d93	movl	-0x4(%rbp), %eax
0000000000006d96	addq	$0x20, %rsp
0000000000006d9a	popq	%rbp
0000000000006d9b	retq
0000000000006d9c	nopl	(%rax)
_ZydisInputSkip:
0000000000006da0	pushq	%rbp
0000000000006da1	movq	%rsp, %rbp
0000000000006da4	subq	$0x10, %rsp
0000000000006da8	movq	%rdi, -0x8(%rbp)
0000000000006dac	movq	%rsi, -0x10(%rbp)
0000000000006db0	cmpq	$0x0, -0x8(%rbp)
0000000000006db5	setne	%al
0000000000006db8	xorb	$-0x1, %al
0000000000006dba	andb	$0x1, %al
0000000000006dbc	movzbl	%al, %ecx
0000000000006dbf	movslq	%ecx, %rsi
0000000000006dc2	cmpq	$0x0, %rsi
0000000000006dc6	je	0x6deb
0000000000006dcc	leaq	0x62b88(%rip), %rdi ## literal pool for: "ZydisInputSkip"
0000000000006dd3	leaq	0x62b00(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006dda	leaq	0x62b2e(%rip), %rcx ## literal pool for: "context"
0000000000006de1	movl	$0x145, %edx
0000000000006de6	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006deb	jmp	0x6df0
0000000000006df0	cmpq	$0x0, -0x10(%rbp)
0000000000006df5	setne	%al
0000000000006df8	xorb	$-0x1, %al
0000000000006dfa	andb	$0x1, %al
0000000000006dfc	movzbl	%al, %ecx
0000000000006dff	movslq	%ecx, %rdx
0000000000006e02	cmpq	$0x0, %rdx
0000000000006e06	je	0x6e2b
0000000000006e0c	leaq	0x62b48(%rip), %rdi ## literal pool for: "ZydisInputSkip"
0000000000006e13	leaq	0x62ac0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006e1a	leaq	0x62af6(%rip), %rcx ## literal pool for: "instruction"
0000000000006e21	movl	$0x146, %edx
0000000000006e26	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006e2b	jmp	0x6e30
0000000000006e30	movq	-0x10(%rbp), %rax
0000000000006e34	movzbl	0x8(%rax), %ecx
0000000000006e38	cmpl	$0xf, %ecx
0000000000006e3b	setl	%dl
0000000000006e3e	xorb	$-0x1, %dl
0000000000006e41	andb	$0x1, %dl
0000000000006e44	movzbl	%dl, %ecx
0000000000006e47	movslq	%ecx, %rax
0000000000006e4a	cmpq	$0x0, %rax
0000000000006e4e	je	0x6e73
0000000000006e54	leaq	0x62b00(%rip), %rdi ## literal pool for: "ZydisInputSkip"
0000000000006e5b	leaq	0x62a78(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006e62	leaq	0x62b01(%rip), %rcx ## literal pool for: "instruction->length < 15"
0000000000006e69	movl	$0x147, %edx
0000000000006e6e	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006e73	jmp	0x6e78
0000000000006e78	movq	-0x10(%rbp), %rax
0000000000006e7c	movb	0x8(%rax), %cl
0000000000006e7f	addb	$0x1, %cl
0000000000006e82	movb	%cl, 0x8(%rax)
0000000000006e85	movq	-0x8(%rbp), %rax
0000000000006e89	movq	0x8(%rax), %rdx
0000000000006e8d	addq	$0x1, %rdx
0000000000006e91	movq	%rdx, 0x8(%rax)
0000000000006e95	movq	-0x8(%rbp), %rax
0000000000006e99	movq	0x10(%rax), %rdx
0000000000006e9d	addq	$-0x1, %rdx
0000000000006ea1	movq	%rdx, 0x10(%rax)
0000000000006ea5	addq	$0x10, %rsp
0000000000006ea9	popq	%rbp
0000000000006eaa	retq
0000000000006eab	nopl	(%rax,%rax)
_ZydisDecodeREX:
0000000000006eb0	pushq	%rbp
0000000000006eb1	movq	%rsp, %rbp
0000000000006eb4	subq	$0x20, %rsp
0000000000006eb8	movb	%dl, %al
0000000000006eba	movq	%rdi, -0x8(%rbp)
0000000000006ebe	movq	%rsi, -0x10(%rbp)
0000000000006ec2	movb	%al, -0x11(%rbp)
0000000000006ec5	cmpq	$0x0, -0x10(%rbp)
0000000000006eca	setne	%al
0000000000006ecd	xorb	$-0x1, %al
0000000000006ecf	andb	$0x1, %al
0000000000006ed1	movzbl	%al, %edx
0000000000006ed4	movslq	%edx, %rsi
0000000000006ed7	cmpq	$0x0, %rsi
0000000000006edb	je	0x6f00
0000000000006ee1	leaq	0x62a9b(%rip), %rdi ## literal pool for: "ZydisDecodeREX"
0000000000006ee8	leaq	0x629eb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006eef	leaq	0x62a21(%rip), %rcx ## literal pool for: "instruction"
0000000000006ef6	movl	$0x1a7, %edx
0000000000006efb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006f00	jmp	0x6f05
0000000000006f05	movzbl	-0x11(%rbp), %eax
0000000000006f09	andl	$0xf0, %eax
0000000000006f0e	cmpl	$0x40, %eax
0000000000006f11	sete	%cl
0000000000006f14	xorb	$-0x1, %cl
0000000000006f17	andb	$0x1, %cl
0000000000006f1a	movzbl	%cl, %eax
0000000000006f1d	movslq	%eax, %rdx
0000000000006f20	cmpq	$0x0, %rdx
0000000000006f24	je	0x6f49
0000000000006f2a	leaq	0x62a52(%rip), %rdi ## literal pool for: "ZydisDecodeREX"
0000000000006f31	leaq	0x629a2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000006f38	leaq	0x62a53(%rip), %rcx ## literal pool for: "(data & 0xF0) == 0x40"
0000000000006f3f	movl	$0x1a8, %edx
0000000000006f44	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000006f49	jmp	0x6f4e
0000000000006f4e	movq	-0x10(%rbp), %rax
0000000000006f52	movq	0x430(%rax), %rcx
0000000000006f59	orq	$0x4, %rcx
0000000000006f5d	movq	%rcx, 0x430(%rax)
0000000000006f64	movzbl	-0x11(%rbp), %edx
0000000000006f68	sarl	$0x3, %edx
0000000000006f6b	andl	$0x1, %edx
0000000000006f6e	movb	%dl, %sil
0000000000006f71	movq	-0x10(%rbp), %rax
0000000000006f75	movb	%sil, 0x544(%rax)
0000000000006f7c	movzbl	-0x11(%rbp), %edx
0000000000006f80	sarl	$0x2, %edx
0000000000006f83	andl	$0x1, %edx
0000000000006f86	movb	%dl, %sil
0000000000006f89	movq	-0x10(%rbp), %rax
0000000000006f8d	movb	%sil, 0x545(%rax)
0000000000006f94	movzbl	-0x11(%rbp), %edx
0000000000006f98	sarl	$0x1, %edx
0000000000006f9b	andl	$0x1, %edx
0000000000006f9e	movb	%dl, %sil
0000000000006fa1	movq	-0x10(%rbp), %rax
0000000000006fa5	movb	%sil, 0x546(%rax)
0000000000006fac	movzbl	-0x11(%rbp), %edx
0000000000006fb0	sarl	$0x0, %edx
0000000000006fb3	andl	$0x1, %edx
0000000000006fb6	movb	%dl, %sil
0000000000006fb9	movq	-0x10(%rbp), %rax
0000000000006fbd	movb	%sil, 0x547(%rax)
0000000000006fc4	movq	-0x10(%rbp), %rax
0000000000006fc8	movb	0x544(%rax), %sil
0000000000006fcf	movq	-0x8(%rbp), %rax
0000000000006fd3	movb	%sil, 0x26(%rax)
0000000000006fd7	movq	-0x10(%rbp), %rax
0000000000006fdb	movb	0x545(%rax), %sil
0000000000006fe2	movq	-0x8(%rbp), %rax
0000000000006fe6	movb	%sil, 0x27(%rax)
0000000000006fea	movq	-0x10(%rbp), %rax
0000000000006fee	movb	0x546(%rax), %sil
0000000000006ff5	movq	-0x8(%rbp), %rax
0000000000006ff9	movb	%sil, 0x28(%rax)
0000000000006ffd	movq	-0x10(%rbp), %rax
0000000000007001	movb	0x547(%rax), %sil
0000000000007008	movq	-0x8(%rbp), %rax
000000000000700c	movb	%sil, 0x29(%rax)
0000000000007010	addq	$0x20, %rsp
0000000000007014	popq	%rbp
0000000000007015	retq
0000000000007016	nopw	%cs:(%rax,%rax)
_ZydisDecoderTreeGetRootNode:
0000000000007020	pushq	%rbp
0000000000007021	movq	%rsp, %rbp
0000000000007024	leaq	_zydis_decoder_tree_root(%rip), %rax
000000000000702b	popq	%rbp
000000000000702c	retq
000000000000702d	nopl	(%rax)
_ZydisNodeHandlerXOP:
0000000000007030	pushq	%rbp
0000000000007031	movq	%rsp, %rbp
0000000000007034	subq	$0x20, %rsp
0000000000007038	movq	%rdi, -0x8(%rbp)
000000000000703c	movq	%rsi, -0x10(%rbp)
0000000000007040	cmpq	$0x0, -0x8(%rbp)
0000000000007045	setne	%al
0000000000007048	xorb	$-0x1, %al
000000000000704a	andb	$0x1, %al
000000000000704c	movzbl	%al, %ecx
000000000000704f	movslq	%ecx, %rsi
0000000000007052	cmpq	$0x0, %rsi
0000000000007056	je	0x707b
000000000000705c	leaq	0x62add(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000007063	leaq	0x62870(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000706a	leaq	0x628a6(%rip), %rcx ## literal pool for: "instruction"
0000000000007071	movl	$0xe1f, %edx
0000000000007076	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000707b	jmp	0x7080
0000000000007080	cmpq	$0x0, -0x10(%rbp)
0000000000007085	setne	%al
0000000000007088	xorb	$-0x1, %al
000000000000708a	andb	$0x1, %al
000000000000708c	movzbl	%al, %ecx
000000000000708f	movslq	%ecx, %rdx
0000000000007092	cmpq	$0x0, %rdx
0000000000007096	je	0x70bb
000000000000709c	leaq	0x62a9d(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
00000000000070a3	leaq	0x62830(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000070aa	leaq	0x62aa3(%rip), %rcx ## literal pool for: "index"
00000000000070b1	movl	$0xe20, %edx
00000000000070b6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000070bb	jmp	0x70c0
00000000000070c0	movq	-0x8(%rbp), %rax
00000000000070c4	movl	0xc(%rax), %ecx
00000000000070c7	testl	%ecx, %ecx
00000000000070c9	movl	%ecx, -0x14(%rbp)
00000000000070cc	je	0x70eb
00000000000070d2	jmp	0x70d7
00000000000070d7	movl	-0x14(%rbp), %eax
00000000000070da	subl	$0x2, %eax
00000000000070dd	movl	%eax, -0x18(%rbp)
00000000000070e0	je	0x70f9
00000000000070e6	jmp	0x7179
00000000000070eb	movq	-0x10(%rbp), %rax
00000000000070ef	movw	$0x0, (%rax)
00000000000070f4	jmp	0x7198
00000000000070f9	movq	-0x8(%rbp), %rax
00000000000070fd	movq	0x430(%rax), %rax
0000000000007104	andq	$0x8, %rax
0000000000007108	cmpq	$0x0, %rax
000000000000710c	setne	%cl
000000000000710f	xorb	$-0x1, %cl
0000000000007112	andb	$0x1, %cl
0000000000007115	movzbl	%cl, %edx
0000000000007118	movslq	%edx, %rax
000000000000711b	cmpq	$0x0, %rax
000000000000711f	je	0x7144
0000000000007125	leaq	0x62a14(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
000000000000712c	leaq	0x627a7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007133	leaq	0x62a20(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
000000000000713a	movl	$0xe28, %edx
000000000000713f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007144	jmp	0x7149
0000000000007149	movq	-0x8(%rbp), %rax
000000000000714d	movzbl	0x54c(%rax), %ecx
0000000000007154	subl	$0x8, %ecx
0000000000007157	movq	-0x8(%rbp), %rax
000000000000715b	movzbl	0x550(%rax), %edx
0000000000007162	imull	$0x3, %edx, %edx
0000000000007165	addl	%edx, %ecx
0000000000007167	addl	$0x1, %ecx
000000000000716a	movw	%cx, %si
000000000000716d	movq	-0x10(%rbp), %rax
0000000000007171	movw	%si, (%rax)
0000000000007174	jmp	0x7198
0000000000007179	leaq	0x629c0(%rip), %rdi ## literal pool for: "ZydisNodeHandlerXOP"
0000000000007180	leaq	0x62753(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007187	leaq	0x64436(%rip), %rcx ## literal pool for: "0"
000000000000718e	movl	$0xe2c, %edx
0000000000007193	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007198	movl	$0x100000, %eax
000000000000719d	addq	$0x20, %rsp
00000000000071a1	popq	%rbp
00000000000071a2	retq
00000000000071a3	nopw	%cs:(%rax,%rax)
00000000000071ad	nopl	(%rax)
_ZydisNodeHandlerVEX:
00000000000071b0	pushq	%rbp
00000000000071b1	movq	%rsp, %rbp
00000000000071b4	subq	$0x20, %rsp
00000000000071b8	movq	%rdi, -0x8(%rbp)
00000000000071bc	movq	%rsi, -0x10(%rbp)
00000000000071c0	cmpq	$0x0, -0x8(%rbp)
00000000000071c5	setne	%al
00000000000071c8	xorb	$-0x1, %al
00000000000071ca	andb	$0x1, %al
00000000000071cc	movzbl	%al, %ecx
00000000000071cf	movslq	%ecx, %rsi
00000000000071d2	cmpq	$0x0, %rsi
00000000000071d6	je	0x71fb
00000000000071dc	leaq	0x629a4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
00000000000071e3	leaq	0x626f0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000071ea	leaq	0x62726(%rip), %rcx ## literal pool for: "instruction"
00000000000071f1	movl	$0xe33, %edx
00000000000071f6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000071fb	jmp	0x7200
0000000000007200	cmpq	$0x0, -0x10(%rbp)
0000000000007205	setne	%al
0000000000007208	xorb	$-0x1, %al
000000000000720a	andb	$0x1, %al
000000000000720c	movzbl	%al, %ecx
000000000000720f	movslq	%ecx, %rdx
0000000000007212	cmpq	$0x0, %rdx
0000000000007216	je	0x723b
000000000000721c	leaq	0x62964(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
0000000000007223	leaq	0x626b0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000722a	leaq	0x62923(%rip), %rcx ## literal pool for: "index"
0000000000007231	movl	$0xe34, %edx
0000000000007236	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000723b	jmp	0x7240
0000000000007240	movq	-0x8(%rbp), %rax
0000000000007244	movl	0xc(%rax), %ecx
0000000000007247	testl	%ecx, %ecx
0000000000007249	movl	%ecx, -0x14(%rbp)
000000000000724c	je	0x726b
0000000000007252	jmp	0x7257
0000000000007257	movl	-0x14(%rbp), %eax
000000000000725a	subl	$0x3, %eax
000000000000725d	movl	%eax, -0x18(%rbp)
0000000000007260	je	0x7279
0000000000007266	jmp	0x72f6
000000000000726b	movq	-0x10(%rbp), %rax
000000000000726f	movw	$0x0, (%rax)
0000000000007274	jmp	0x7315
0000000000007279	movq	-0x8(%rbp), %rax
000000000000727d	movq	0x430(%rax), %rax
0000000000007284	andq	$0x10, %rax
0000000000007288	cmpq	$0x0, %rax
000000000000728c	setne	%cl
000000000000728f	xorb	$-0x1, %cl
0000000000007292	andb	$0x1, %cl
0000000000007295	movzbl	%cl, %edx
0000000000007298	movslq	%edx, %rax
000000000000729b	cmpq	$0x0, %rax
000000000000729f	je	0x72c4
00000000000072a5	leaq	0x628db(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
00000000000072ac	leaq	0x62627(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000072b3	leaq	0x628e1(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
00000000000072ba	movl	$0xe3c, %edx
00000000000072bf	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000072c4	jmp	0x72c9
00000000000072c9	movq	-0x8(%rbp), %rax
00000000000072cd	movzbl	0x555(%rax), %ecx
00000000000072d4	movq	-0x8(%rbp), %rax
00000000000072d8	movzbl	0x559(%rax), %edx
00000000000072df	shll	$0x2, %edx
00000000000072e2	addl	%edx, %ecx
00000000000072e4	addl	$0x1, %ecx
00000000000072e7	movw	%cx, %si
00000000000072ea	movq	-0x10(%rbp), %rax
00000000000072ee	movw	%si, (%rax)
00000000000072f1	jmp	0x7315
00000000000072f6	leaq	0x6288a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVEX"
00000000000072fd	leaq	0x625d6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007304	leaq	0x642b9(%rip), %rcx ## literal pool for: "0"
000000000000730b	movl	$0xe40, %edx
0000000000007310	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007315	movl	$0x100000, %eax
000000000000731a	addq	$0x20, %rsp
000000000000731e	popq	%rbp
000000000000731f	retq
_ZydisNodeHandlerEMVEX:
0000000000007320	pushq	%rbp
0000000000007321	movq	%rsp, %rbp
0000000000007324	subq	$0x20, %rsp
0000000000007328	movq	%rdi, -0x8(%rbp)
000000000000732c	movq	%rsi, -0x10(%rbp)
0000000000007330	cmpq	$0x0, -0x8(%rbp)
0000000000007335	setne	%al
0000000000007338	xorb	$-0x1, %al
000000000000733a	andb	$0x1, %al
000000000000733c	movzbl	%al, %ecx
000000000000733f	movslq	%ecx, %rsi
0000000000007342	cmpq	$0x0, %rsi
0000000000007346	je	0x736b
000000000000734c	leaq	0x62875(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000007353	leaq	0x62580(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000735a	leaq	0x625b6(%rip), %rcx ## literal pool for: "instruction"
0000000000007361	movl	$0xe47, %edx
0000000000007366	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000736b	jmp	0x7370
0000000000007370	cmpq	$0x0, -0x10(%rbp)
0000000000007375	setne	%al
0000000000007378	xorb	$-0x1, %al
000000000000737a	andb	$0x1, %al
000000000000737c	movzbl	%al, %ecx
000000000000737f	movslq	%ecx, %rdx
0000000000007382	cmpq	$0x0, %rdx
0000000000007386	je	0x73ab
000000000000738c	leaq	0x62835(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000007393	leaq	0x62540(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000739a	leaq	0x627b3(%rip), %rcx ## literal pool for: "index"
00000000000073a1	movl	$0xe48, %edx
00000000000073a6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000073ab	jmp	0x73b0
00000000000073b0	movq	-0x8(%rbp), %rax
00000000000073b4	movl	0xc(%rax), %ecx
00000000000073b7	testl	%ecx, %ecx
00000000000073b9	movl	%ecx, -0x14(%rbp)
00000000000073bc	je	0x73ef
00000000000073c2	jmp	0x73c7
00000000000073c7	movl	-0x14(%rbp), %eax
00000000000073ca	subl	$0x4, %eax
00000000000073cd	movl	%eax, -0x18(%rbp)
00000000000073d0	je	0x73fd
00000000000073d6	jmp	0x73db
00000000000073db	movl	-0x14(%rbp), %eax
00000000000073de	subl	$0x5, %eax
00000000000073e1	movl	%eax, -0x1c(%rbp)
00000000000073e4	je	0x747a
00000000000073ea	jmp	0x74f7
00000000000073ef	movq	-0x10(%rbp), %rax
00000000000073f3	movw	$0x0, (%rax)
00000000000073f8	jmp	0x7516
00000000000073fd	movq	-0x8(%rbp), %rax
0000000000007401	movq	0x430(%rax), %rax
0000000000007408	andq	$0x20, %rax
000000000000740c	cmpq	$0x0, %rax
0000000000007410	setne	%cl
0000000000007413	xorb	$-0x1, %cl
0000000000007416	andb	$0x1, %cl
0000000000007419	movzbl	%cl, %edx
000000000000741c	movslq	%edx, %rax
000000000000741f	cmpq	$0x0, %rax
0000000000007423	je	0x7448
0000000000007429	leaq	0x62798(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
0000000000007430	leaq	0x624a3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007437	leaq	0x627a0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
000000000000743e	movl	$0xe50, %edx
0000000000007443	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007448	jmp	0x744d
000000000000744d	movq	-0x8(%rbp), %rax
0000000000007451	movzbl	0x560(%rax), %ecx
0000000000007458	movq	-0x8(%rbp), %rax
000000000000745c	movzbl	0x563(%rax), %edx
0000000000007463	shll	$0x2, %edx
0000000000007466	addl	%edx, %ecx
0000000000007468	addl	$0x1, %ecx
000000000000746b	movw	%cx, %si
000000000000746e	movq	-0x10(%rbp), %rax
0000000000007472	movw	%si, (%rax)
0000000000007475	jmp	0x7516
000000000000747a	movq	-0x8(%rbp), %rax
000000000000747e	movq	0x430(%rax), %rax
0000000000007485	andq	$0x40, %rax
0000000000007489	cmpq	$0x0, %rax
000000000000748d	setne	%cl
0000000000007490	xorb	$-0x1, %cl
0000000000007493	andb	$0x1, %cl
0000000000007496	movzbl	%cl, %edx
0000000000007499	movslq	%edx, %rax
000000000000749c	cmpq	$0x0, %rax
00000000000074a0	je	0x74c5
00000000000074a6	leaq	0x6271b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
00000000000074ad	leaq	0x62426(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000074b4	leaq	0x62750(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
00000000000074bb	movl	$0xe54, %edx
00000000000074c0	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000074c5	jmp	0x74ca
00000000000074ca	movq	-0x8(%rbp), %rax
00000000000074ce	movzbl	0x56f(%rax), %ecx
00000000000074d5	movq	-0x8(%rbp), %rax
00000000000074d9	movzbl	0x572(%rax), %edx
00000000000074e0	shll	$0x2, %edx
00000000000074e3	addl	%edx, %ecx
00000000000074e5	addl	$0x11, %ecx
00000000000074e8	movw	%cx, %si
00000000000074eb	movq	-0x10(%rbp), %rax
00000000000074ef	movw	%si, (%rax)
00000000000074f2	jmp	0x7516
00000000000074f7	leaq	0x626ca(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEMVEX"
00000000000074fe	leaq	0x623d5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007505	leaq	0x640b8(%rip), %rcx ## literal pool for: "0"
000000000000750c	movl	$0xe58, %edx
0000000000007511	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007516	movl	$0x100000, %eax
000000000000751b	addq	$0x20, %rsp
000000000000751f	popq	%rbp
0000000000007520	retq
0000000000007521	nopw	%cs:(%rax,%rax)
000000000000752b	nopl	(%rax,%rax)
_ZydisNodeHandlerOpcode:
0000000000007530	pushq	%rbp
0000000000007531	movq	%rsp, %rbp
0000000000007534	subq	$0xc0, %rsp
000000000000753b	movq	%rdi, -0x10(%rbp)
000000000000753f	movq	%rsi, -0x18(%rbp)
0000000000007543	movq	%rdx, -0x20(%rbp)
0000000000007547	cmpq	$0x0, -0x10(%rbp)
000000000000754c	setne	%al
000000000000754f	xorb	$-0x1, %al
0000000000007551	andb	$0x1, %al
0000000000007553	movzbl	%al, %ecx
0000000000007556	movslq	%ecx, %rdx
0000000000007559	cmpq	$0x0, %rdx
000000000000755d	je	0x7582
0000000000007563	leaq	0x626ce(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
000000000000756a	leaq	0x62369(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007571	leaq	0x62397(%rip), %rcx ## literal pool for: "context"
0000000000007578	movl	$0xe60, %edx
000000000000757d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007582	jmp	0x7587
0000000000007587	cmpq	$0x0, -0x18(%rbp)
000000000000758c	setne	%al
000000000000758f	xorb	$-0x1, %al
0000000000007591	andb	$0x1, %al
0000000000007593	movzbl	%al, %ecx
0000000000007596	movslq	%ecx, %rdx
0000000000007599	cmpq	$0x0, %rdx
000000000000759d	je	0x75c2
00000000000075a3	leaq	0x6268e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000075aa	leaq	0x62329(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000075b1	leaq	0x6235f(%rip), %rcx ## literal pool for: "instruction"
00000000000075b8	movl	$0xe61, %edx
00000000000075bd	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000075c2	jmp	0x75c7
00000000000075c7	cmpq	$0x0, -0x20(%rbp)
00000000000075cc	setne	%al
00000000000075cf	xorb	$-0x1, %al
00000000000075d1	andb	$0x1, %al
00000000000075d3	movzbl	%al, %ecx
00000000000075d6	movslq	%ecx, %rdx
00000000000075d9	cmpq	$0x0, %rdx
00000000000075dd	je	0x7602
00000000000075e3	leaq	0x6264e(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000075ea	leaq	0x622e9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000075f1	leaq	0x6255c(%rip), %rcx ## literal pool for: "index"
00000000000075f8	movl	$0xe62, %edx
00000000000075fd	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007602	jmp	0x7607
0000000000007607	movq	-0x18(%rbp), %rax
000000000000760b	movl	0xc(%rax), %ecx
000000000000760e	testl	%ecx, %ecx
0000000000007610	movl	%ecx, -0x64(%rbp)
0000000000007613	je	0x7632
0000000000007619	jmp	0x761e
000000000000761e	movl	-0x64(%rbp), %eax
0000000000007621	subl	$0x1, %eax
0000000000007624	movl	%eax, -0x68(%rbp)
0000000000007627	je	0x7f54
000000000000762d	jmp	0x7f69
0000000000007632	jmp	0x7637
0000000000007637	movq	-0x10(%rbp), %rdi
000000000000763b	movq	-0x18(%rbp), %rsi
000000000000763f	movq	-0x18(%rbp), %rax
0000000000007643	addq	$0x14, %rax
0000000000007647	movq	%rax, %rdx
000000000000764a	callq	_ZydisInputNext
000000000000764f	movl	%eax, -0x24(%rbp)
0000000000007652	movl	-0x24(%rbp), %eax
0000000000007655	andl	$0x80000000, %eax
000000000000765a	cmpl	$0x0, %eax
000000000000765d	je	0x766e
0000000000007663	movl	-0x24(%rbp), %eax
0000000000007666	movl	%eax, -0x4(%rbp)
0000000000007669	jmp	0x7fc8
000000000000766e	jmp	0x7673
0000000000007673	movq	-0x18(%rbp), %rax
0000000000007677	movl	0x10(%rax), %ecx
000000000000767a	testl	%ecx, %ecx
000000000000767c	movl	%ecx, -0x6c(%rbp)
000000000000767f	je	0x76cc
0000000000007685	jmp	0x768a
000000000000768a	movl	-0x6c(%rbp), %eax
000000000000768d	subl	$0x1, %eax
0000000000007690	movl	%eax, -0x70(%rbp)
0000000000007693	je	0x7e74
0000000000007699	jmp	0x769e
000000000000769e	movl	-0x6c(%rbp), %eax
00000000000076a1	addl	$-0x2, %eax
00000000000076a4	subl	$0x2, %eax
00000000000076a7	movl	%eax, -0x74(%rbp)
00000000000076aa	jb	0x7f2b
00000000000076b0	jmp	0x76b5
00000000000076b5	movl	-0x6c(%rbp), %eax
00000000000076b8	addl	$-0x5, %eax
00000000000076bb	subl	$0x3, %eax
00000000000076be	movl	%eax, -0x78(%rbp)
00000000000076c1	jb	0x7f2b
00000000000076c7	jmp	0x7f30
00000000000076cc	movq	-0x18(%rbp), %rax
00000000000076d0	movzbl	0x14(%rax), %ecx
00000000000076d4	movl	%ecx, %edx
00000000000076d6	subl	$0xf, %edx
00000000000076d9	movl	%ecx, -0x7c(%rbp)
00000000000076dc	movl	%edx, -0x80(%rbp)
00000000000076df	je	0x7736
00000000000076e5	jmp	0x76ea
00000000000076ea	movl	-0x7c(%rbp), %eax
00000000000076ed	subl	$0x62, %eax
00000000000076f0	movl	%eax, -0x84(%rbp)
00000000000076f6	je	0x7746
00000000000076fc	jmp	0x7701
0000000000007701	movl	-0x7c(%rbp), %eax
0000000000007704	subl	$0x8f, %eax
0000000000007709	movl	%eax, -0x88(%rbp)
000000000000770f	je	0x7cfe
0000000000007715	jmp	0x771a
000000000000771a	movl	-0x7c(%rbp), %eax
000000000000771d	addl	$0xffffff3c, %eax
0000000000007722	subl	$0x2, %eax
0000000000007725	movl	%eax, -0x8c(%rbp)
000000000000772b	jb	0x7746
0000000000007731	jmp	0x7e6a
0000000000007736	movq	-0x18(%rbp), %rax
000000000000773a	movl	$0x1, 0x10(%rax)
0000000000007741	jmp	0x7e6f
0000000000007746	jmp	0x774b
000000000000774b	movq	-0x10(%rbp), %rdi
000000000000774f	movq	-0x18(%rbp), %rsi
0000000000007753	leaq	-0x25(%rbp), %rdx
0000000000007757	callq	_ZydisInputPeek
000000000000775c	movl	%eax, -0x2c(%rbp)
000000000000775f	movl	-0x2c(%rbp), %eax
0000000000007762	andl	$0x80000000, %eax
0000000000007767	cmpl	$0x0, %eax
000000000000776a	je	0x777b
0000000000007770	movl	-0x2c(%rbp), %eax
0000000000007773	movl	%eax, -0x4(%rbp)
0000000000007776	jmp	0x7fc8
000000000000777b	jmp	0x7780
0000000000007780	movzbl	-0x25(%rbp), %eax
0000000000007784	andl	$0xf0, %eax
0000000000007789	cmpl	$0xc0, %eax
000000000000778e	jge	0x77a4
0000000000007794	movq	-0x10(%rbp), %rax
0000000000007798	movq	(%rax), %rax
000000000000779b	cmpl	$0x0, (%rax)
000000000000779e	jne	0x7cf9
00000000000077a4	movq	-0x18(%rbp), %rax
00000000000077a8	movq	0x430(%rax), %rax
00000000000077af	andq	$0x4, %rax
00000000000077b3	cmpq	$0x0, %rax
00000000000077b7	je	0x77c9
00000000000077bd	movl	$0x80200006, -0x4(%rbp)
00000000000077c4	jmp	0x7fc8
00000000000077c9	movq	-0x10(%rbp), %rax
00000000000077cd	cmpb	$0x0, 0x18(%rax)
00000000000077d1	je	0x77e3
00000000000077d7	movl	$0x80200004, -0x4(%rbp)
00000000000077de	jmp	0x7fc8
00000000000077e3	movq	-0x10(%rbp), %rax
00000000000077e7	cmpb	$0x0, 0x1c(%rax)
00000000000077eb	je	0x77fd
00000000000077f1	movl	$0x80200005, -0x4(%rbp)
00000000000077f8	jmp	0x7fc8
00000000000077fd	movl	$0x0, -0x30(%rbp)
0000000000007804	movq	-0x18(%rbp), %rax
0000000000007808	movb	0x14(%rax), %cl
000000000000780b	movb	%cl, -0x30(%rbp)
000000000000780e	movq	-0x18(%rbp), %rax
0000000000007812	movzbl	0x14(%rax), %edx
0000000000007816	movl	%edx, %esi
0000000000007818	subl	$0x62, %esi
000000000000781b	movl	%edx, -0x90(%rbp)
0000000000007821	movl	%esi, -0x94(%rbp)
0000000000007827	je	0x79cf
000000000000782d	jmp	0x7832
0000000000007832	movl	-0x90(%rbp), %eax
0000000000007838	subl	$0xc4, %eax
000000000000783d	movl	%eax, -0x98(%rbp)
0000000000007843	je	0x786a
0000000000007849	jmp	0x784e
000000000000784e	movl	-0x90(%rbp), %eax
0000000000007854	subl	$0xc5, %eax
0000000000007859	movl	%eax, -0x9c(%rbp)
000000000000785f	je	0x791f
0000000000007865	jmp	0x7ac0
000000000000786a	movq	-0x18(%rbp), %rax
000000000000786e	movzbl	0x8(%rax), %ecx
0000000000007872	subl	$0x1, %ecx
0000000000007875	movb	%cl, %dl
0000000000007877	movq	-0x18(%rbp), %rax
000000000000787b	movb	%dl, 0x55a(%rax)
0000000000007881	movq	-0x18(%rbp), %rax
0000000000007885	movq	0x430(%rax), %rax
000000000000788c	andq	$0x10, %rax
0000000000007890	cmpq	$0x0, %rax
0000000000007894	setne	%dl
0000000000007897	xorb	$-0x1, %dl
000000000000789a	xorb	$-0x1, %dl
000000000000789d	andb	$0x1, %dl
00000000000078a0	movzbl	%dl, %ecx
00000000000078a3	movslq	%ecx, %rax
00000000000078a6	cmpq	$0x0, %rax
00000000000078aa	je	0x78cf
00000000000078b0	leaq	0x62381(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
00000000000078b7	leaq	0x6201c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000078be	leaq	0x6238a(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000010)"
00000000000078c5	movl	$0xe8d, %edx
00000000000078ca	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000078cf	jmp	0x78d4
00000000000078d4	jmp	0x78d9
00000000000078d9	movq	-0x10(%rbp), %rdi
00000000000078dd	movq	-0x18(%rbp), %rsi
00000000000078e1	leaq	-0x30(%rbp), %rax
00000000000078e5	addq	$0x1, %rax
00000000000078e9	movq	%rax, %rdx
00000000000078ec	movl	$0x2, %ecx
00000000000078f1	callq	_ZydisInputNextBytes
00000000000078f6	movl	%eax, -0x34(%rbp)
00000000000078f9	movl	-0x34(%rbp), %eax
00000000000078fc	andl	$0x80000000, %eax
0000000000007901	cmpl	$0x0, %eax
0000000000007904	je	0x7915
000000000000790a	movl	-0x34(%rbp), %eax
000000000000790d	movl	%eax, -0x4(%rbp)
0000000000007910	jmp	0x7fc8
0000000000007915	jmp	0x791a
000000000000791a	jmp	0x7adf
000000000000791f	movq	-0x18(%rbp), %rax
0000000000007923	movzbl	0x8(%rax), %ecx
0000000000007927	subl	$0x1, %ecx
000000000000792a	movb	%cl, %dl
000000000000792c	movq	-0x18(%rbp), %rax
0000000000007930	movb	%dl, 0x55a(%rax)
0000000000007936	movq	-0x18(%rbp), %rax
000000000000793a	movq	0x430(%rax), %rax
0000000000007941	andq	$0x10, %rax
0000000000007945	cmpq	$0x0, %rax
0000000000007949	setne	%dl
000000000000794c	xorb	$-0x1, %dl
000000000000794f	xorb	$-0x1, %dl
0000000000007952	andb	$0x1, %dl
0000000000007955	movzbl	%dl, %ecx
0000000000007958	movslq	%ecx, %rax
000000000000795b	cmpq	$0x0, %rax
000000000000795f	je	0x7984
0000000000007965	leaq	0x622cc(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
000000000000796c	leaq	0x61f67(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007973	leaq	0x622d5(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000010)"
000000000000797a	movl	$0xe93, %edx
000000000000797f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007984	jmp	0x7989
0000000000007989	jmp	0x798e
000000000000798e	movq	-0x10(%rbp), %rdi
0000000000007992	movq	-0x18(%rbp), %rsi
0000000000007996	leaq	-0x30(%rbp), %rax
000000000000799a	addq	$0x1, %rax
000000000000799e	movq	%rax, %rdx
00000000000079a1	callq	_ZydisInputNext
00000000000079a6	movl	%eax, -0x38(%rbp)
00000000000079a9	movl	-0x38(%rbp), %eax
00000000000079ac	andl	$0x80000000, %eax
00000000000079b1	cmpl	$0x0, %eax
00000000000079b4	je	0x79c5
00000000000079ba	movl	-0x38(%rbp), %eax
00000000000079bd	movl	%eax, -0x4(%rbp)
00000000000079c0	jmp	0x7fc8
00000000000079c5	jmp	0x79ca
00000000000079ca	jmp	0x7adf
00000000000079cf	movq	-0x18(%rbp), %rax
00000000000079d3	movq	0x430(%rax), %rax
00000000000079da	andq	$0x20, %rax
00000000000079de	cmpq	$0x0, %rax
00000000000079e2	setne	%cl
00000000000079e5	xorb	$-0x1, %cl
00000000000079e8	xorb	$-0x1, %cl
00000000000079eb	andb	$0x1, %cl
00000000000079ee	movzbl	%cl, %edx
00000000000079f1	movslq	%edx, %rax
00000000000079f4	cmpq	$0x0, %rax
00000000000079f8	je	0x7a1d
00000000000079fe	leaq	0x62233(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007a05	leaq	0x61ece(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007a0c	leaq	0x6226c(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000020)"
0000000000007a13	movl	$0xe99, %edx
0000000000007a18	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007a1d	jmp	0x7a22
0000000000007a22	movq	-0x18(%rbp), %rax
0000000000007a26	movq	0x430(%rax), %rax
0000000000007a2d	andq	$0x40, %rax
0000000000007a31	cmpq	$0x0, %rax
0000000000007a35	setne	%cl
0000000000007a38	xorb	$-0x1, %cl
0000000000007a3b	xorb	$-0x1, %cl
0000000000007a3e	andb	$0x1, %cl
0000000000007a41	movzbl	%cl, %edx
0000000000007a44	movslq	%edx, %rax
0000000000007a47	cmpq	$0x0, %rax
0000000000007a4b	je	0x7a70
0000000000007a51	leaq	0x621e0(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007a58	leaq	0x61e7b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007a5f	leaq	0x62249(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000040)"
0000000000007a66	movl	$0xe9a, %edx
0000000000007a6b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007a70	jmp	0x7a75
0000000000007a75	jmp	0x7a7a
0000000000007a7a	movq	-0x10(%rbp), %rdi
0000000000007a7e	movq	-0x18(%rbp), %rsi
0000000000007a82	leaq	-0x30(%rbp), %rax
0000000000007a86	addq	$0x1, %rax
0000000000007a8a	movq	%rax, %rdx
0000000000007a8d	movl	$0x3, %ecx
0000000000007a92	callq	_ZydisInputNextBytes
0000000000007a97	movl	%eax, -0x3c(%rbp)
0000000000007a9a	movl	-0x3c(%rbp), %eax
0000000000007a9d	andl	$0x80000000, %eax
0000000000007aa2	cmpl	$0x0, %eax
0000000000007aa5	je	0x7ab6
0000000000007aab	movl	-0x3c(%rbp), %eax
0000000000007aae	movl	%eax, -0x4(%rbp)
0000000000007ab1	jmp	0x7fc8
0000000000007ab6	jmp	0x7abb
0000000000007abb	jmp	0x7adf
0000000000007ac0	leaq	0x62171(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007ac7	leaq	0x61e0c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007ace	leaq	0x63aef(%rip), %rcx ## literal pool for: "0"
0000000000007ad5	movl	$0xea1, %edx
0000000000007ada	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007adf	movq	-0x18(%rbp), %rax
0000000000007ae3	movzbl	0x14(%rax), %ecx
0000000000007ae7	movl	%ecx, %edx
0000000000007ae9	subl	$0x62, %edx
0000000000007aec	movl	%ecx, -0xa0(%rbp)
0000000000007af2	movl	%edx, -0xa4(%rbp)
0000000000007af8	je	0x7b7c
0000000000007afe	jmp	0x7b03
0000000000007b03	movl	-0xa0(%rbp), %eax
0000000000007b09	addl	$0xffffff3c, %eax
0000000000007b0e	subl	$0x1, %eax
0000000000007b11	movl	%eax, -0xa8(%rbp)
0000000000007b17	ja	0x7cd5
0000000000007b1d	jmp	0x7b22
0000000000007b22	movq	-0x18(%rbp), %rax
0000000000007b26	movl	$0x3, 0xc(%rax)
0000000000007b2d	leaq	-0x30(%rbp), %rdx
0000000000007b31	movq	-0x10(%rbp), %rdi
0000000000007b35	movq	-0x18(%rbp), %rsi
0000000000007b39	callq	_ZydisDecodeVEX
0000000000007b3e	movl	%eax, -0x40(%rbp)
0000000000007b41	movl	-0x40(%rbp), %eax
0000000000007b44	andl	$0x80000000, %eax
0000000000007b49	cmpl	$0x0, %eax
0000000000007b4c	je	0x7b5d
0000000000007b52	movl	-0x40(%rbp), %eax
0000000000007b55	movl	%eax, -0x4(%rbp)
0000000000007b58	jmp	0x7fc8
0000000000007b5d	jmp	0x7b62
0000000000007b62	movq	-0x18(%rbp), %rax
0000000000007b66	movzbl	0x555(%rax), %ecx
0000000000007b6d	addl	$0x0, %ecx
0000000000007b70	movq	-0x18(%rbp), %rax
0000000000007b74	movl	%ecx, 0x10(%rax)
0000000000007b77	jmp	0x7cf4
0000000000007b7c	movb	-0x2e(%rbp), %al
0000000000007b7f	shrb	$0x2, %al
0000000000007b82	movzbl	%al, %ecx
0000000000007b85	andl	$0x1, %ecx
0000000000007b88	movl	%ecx, -0xac(%rbp)
0000000000007b8e	je	0x7bb3
0000000000007b94	jmp	0x7b99
0000000000007b99	movl	-0xac(%rbp), %eax
0000000000007b9f	subl	$0x1, %eax
0000000000007ba2	movl	%eax, -0xb0(%rbp)
0000000000007ba8	je	0x7c40
0000000000007bae	jmp	0x7cb1
0000000000007bb3	movq	-0x18(%rbp), %rax
0000000000007bb7	movzbl	0x8(%rax), %ecx
0000000000007bbb	subl	$0x4, %ecx
0000000000007bbe	movb	%cl, %dl
0000000000007bc0	movq	-0x18(%rbp), %rax
0000000000007bc4	movb	%dl, 0x577(%rax)
0000000000007bca	movq	-0x10(%rbp), %rax
0000000000007bce	movq	(%rax), %rax
0000000000007bd1	cmpl	$0x0, (%rax)
0000000000007bd4	je	0x7be6
0000000000007bda	movl	$0x80200001, -0x4(%rbp)
0000000000007be1	jmp	0x7fc8
0000000000007be6	movq	-0x18(%rbp), %rax
0000000000007bea	movl	$0x5, 0xc(%rax)
0000000000007bf1	leaq	-0x30(%rbp), %rdx
0000000000007bf5	movq	-0x10(%rbp), %rdi
0000000000007bf9	movq	-0x18(%rbp), %rsi
0000000000007bfd	callq	_ZydisDecodeMVEX
0000000000007c02	movl	%eax, -0x44(%rbp)
0000000000007c05	movl	-0x44(%rbp), %eax
0000000000007c08	andl	$0x80000000, %eax
0000000000007c0d	cmpl	$0x0, %eax
0000000000007c10	je	0x7c21
0000000000007c16	movl	-0x44(%rbp), %eax
0000000000007c19	movl	%eax, -0x4(%rbp)
0000000000007c1c	jmp	0x7fc8
0000000000007c21	jmp	0x7c26
0000000000007c26	movq	-0x18(%rbp), %rax
0000000000007c2a	movzbl	0x56f(%rax), %ecx
0000000000007c31	addl	$0x0, %ecx
0000000000007c34	movq	-0x18(%rbp), %rax
0000000000007c38	movl	%ecx, 0x10(%rax)
0000000000007c3b	jmp	0x7cd0
0000000000007c40	movq	-0x18(%rbp), %rax
0000000000007c44	movzbl	0x8(%rax), %ecx
0000000000007c48	subl	$0x4, %ecx
0000000000007c4b	movb	%cl, %dl
0000000000007c4d	movq	-0x18(%rbp), %rax
0000000000007c51	movb	%dl, 0x56a(%rax)
0000000000007c57	movq	-0x18(%rbp), %rax
0000000000007c5b	movl	$0x4, 0xc(%rax)
0000000000007c62	leaq	-0x30(%rbp), %rdx
0000000000007c66	movq	-0x10(%rbp), %rdi
0000000000007c6a	movq	-0x18(%rbp), %rsi
0000000000007c6e	callq	_ZydisDecodeEVEX
0000000000007c73	movl	%eax, -0x48(%rbp)
0000000000007c76	movl	-0x48(%rbp), %eax
0000000000007c79	andl	$0x80000000, %eax
0000000000007c7e	cmpl	$0x0, %eax
0000000000007c81	je	0x7c92
0000000000007c87	movl	-0x48(%rbp), %eax
0000000000007c8a	movl	%eax, -0x4(%rbp)
0000000000007c8d	jmp	0x7fc8
0000000000007c92	jmp	0x7c97
0000000000007c97	movq	-0x18(%rbp), %rax
0000000000007c9b	movzbl	0x560(%rax), %ecx
0000000000007ca2	addl	$0x0, %ecx
0000000000007ca5	movq	-0x18(%rbp), %rax
0000000000007ca9	movl	%ecx, 0x10(%rax)
0000000000007cac	jmp	0x7cd0
0000000000007cb1	leaq	0x61f80(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007cb8	leaq	0x61c1b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007cbf	leaq	0x638fe(%rip), %rcx ## literal pool for: "0"
0000000000007cc6	movl	$0xed4, %edx
0000000000007ccb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007cd0	jmp	0x7cf4
0000000000007cd5	leaq	0x61f5c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007cdc	leaq	0x61bf7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007ce3	leaq	0x638da(%rip), %rcx ## literal pool for: "0"
0000000000007cea	movl	$0xed9, %edx
0000000000007cef	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007cf4	jmp	0x7cf9
0000000000007cf9	jmp	0x7e6f
0000000000007cfe	jmp	0x7d03
0000000000007d03	movq	-0x10(%rbp), %rdi
0000000000007d07	movq	-0x18(%rbp), %rsi
0000000000007d0b	leaq	-0x49(%rbp), %rdx
0000000000007d0f	callq	_ZydisInputPeek
0000000000007d14	movl	%eax, -0x50(%rbp)
0000000000007d17	movl	-0x50(%rbp), %eax
0000000000007d1a	andl	$0x80000000, %eax
0000000000007d1f	cmpl	$0x0, %eax
0000000000007d22	je	0x7d33
0000000000007d28	movl	-0x50(%rbp), %eax
0000000000007d2b	movl	%eax, -0x4(%rbp)
0000000000007d2e	jmp	0x7fc8
0000000000007d33	jmp	0x7d38
0000000000007d38	movzbl	-0x49(%rbp), %eax
0000000000007d3c	andl	$0x1f, %eax
0000000000007d3f	cmpl	$0x8, %eax
0000000000007d42	jl	0x7e65
0000000000007d48	movq	-0x18(%rbp), %rax
0000000000007d4c	movq	0x430(%rax), %rax
0000000000007d53	andq	$0x4, %rax
0000000000007d57	cmpq	$0x0, %rax
0000000000007d5b	je	0x7d6d
0000000000007d61	movl	$0x80200006, -0x4(%rbp)
0000000000007d68	jmp	0x7fc8
0000000000007d6d	movq	-0x10(%rbp), %rax
0000000000007d71	cmpb	$0x0, 0x18(%rax)
0000000000007d75	je	0x7d87
0000000000007d7b	movl	$0x80200004, -0x4(%rbp)
0000000000007d82	jmp	0x7fc8
0000000000007d87	movq	-0x10(%rbp), %rax
0000000000007d8b	cmpb	$0x0, 0x1c(%rax)
0000000000007d8f	je	0x7da1
0000000000007d95	movl	$0x80200005, -0x4(%rbp)
0000000000007d9c	jmp	0x7fc8
0000000000007da1	movq	-0x18(%rbp), %rax
0000000000007da5	movzbl	0x8(%rax), %ecx
0000000000007da9	subl	$0x1, %ecx
0000000000007dac	movb	%cl, %dl
0000000000007dae	movq	-0x18(%rbp), %rax
0000000000007db2	movb	%dl, 0x551(%rax)
0000000000007db8	movw	0x4ccad(%rip), %si
0000000000007dbf	movw	%si, -0x53(%rbp)
0000000000007dc3	movb	0x4cca5(%rip), %dl
0000000000007dc9	movb	%dl, -0x51(%rbp)
0000000000007dcc	movq	-0x10(%rbp), %rdi
0000000000007dd0	movq	-0x18(%rbp), %rsi
0000000000007dd4	leaq	-0x53(%rbp), %rax
0000000000007dd8	addq	$0x1, %rax
0000000000007ddc	movq	%rax, %rdx
0000000000007ddf	movl	$0x2, %ecx
0000000000007de4	callq	_ZydisInputNextBytes
0000000000007de9	movl	%eax, -0x58(%rbp)
0000000000007dec	movl	-0x58(%rbp), %eax
0000000000007def	andl	$0x80000000, %eax
0000000000007df4	cmpl	$0x0, %eax
0000000000007df7	je	0x7e08
0000000000007dfd	movl	-0x58(%rbp), %eax
0000000000007e00	movl	%eax, -0x4(%rbp)
0000000000007e03	jmp	0x7fc8
0000000000007e08	jmp	0x7e0d
0000000000007e0d	movq	-0x18(%rbp), %rax
0000000000007e11	movl	$0x2, 0xc(%rax)
0000000000007e18	leaq	-0x53(%rbp), %rdx
0000000000007e1c	movq	-0x10(%rbp), %rdi
0000000000007e20	movq	-0x18(%rbp), %rsi
0000000000007e24	callq	_ZydisDecodeXOP
0000000000007e29	movl	%eax, -0x5c(%rbp)
0000000000007e2c	movl	-0x5c(%rbp), %eax
0000000000007e2f	andl	$0x80000000, %eax
0000000000007e34	cmpl	$0x0, %eax
0000000000007e37	je	0x7e48
0000000000007e3d	movl	-0x5c(%rbp), %eax
0000000000007e40	movl	%eax, -0x4(%rbp)
0000000000007e43	jmp	0x7fc8
0000000000007e48	jmp	0x7e4d
0000000000007e4d	movq	-0x18(%rbp), %rax
0000000000007e51	movzbl	0x54c(%rax), %ecx
0000000000007e58	addl	$0x5, %ecx
0000000000007e5b	subl	$0x8, %ecx
0000000000007e5e	movq	-0x18(%rbp), %rax
0000000000007e62	movl	%ecx, 0x10(%rax)
0000000000007e65	jmp	0x7e6f
0000000000007e6a	jmp	0x7e6f
0000000000007e6f	jmp	0x7f4f
0000000000007e74	movq	-0x18(%rbp), %rax
0000000000007e78	movzbl	0x14(%rax), %ecx
0000000000007e7c	movl	%ecx, %edx
0000000000007e7e	subl	$0xf, %edx
0000000000007e81	movl	%ecx, -0xb4(%rbp)
0000000000007e87	movl	%edx, -0xb8(%rbp)
0000000000007e8d	je	0x7ecc
0000000000007e93	jmp	0x7e98
0000000000007e98	movl	-0xb4(%rbp), %eax
0000000000007e9e	subl	$0x38, %eax
0000000000007ea1	movl	%eax, -0xbc(%rbp)
0000000000007ea7	je	0x7f01
0000000000007ead	jmp	0x7eb2
0000000000007eb2	movl	-0xb4(%rbp), %eax
0000000000007eb8	subl	$0x3a, %eax
0000000000007ebb	movl	%eax, -0xc0(%rbp)
0000000000007ec1	je	0x7f11
0000000000007ec7	jmp	0x7f21
0000000000007ecc	movq	-0x10(%rbp), %rax
0000000000007ed0	cmpb	$0x0, 0x18(%rax)
0000000000007ed4	je	0x7ee6
0000000000007eda	movl	$0x80200004, -0x4(%rbp)
0000000000007ee1	jmp	0x7fc8
0000000000007ee6	movq	-0x18(%rbp), %rax
0000000000007eea	movl	$0x1, 0xc(%rax)
0000000000007ef1	movq	-0x18(%rbp), %rax
0000000000007ef5	movl	$0x4, 0x10(%rax)
0000000000007efc	jmp	0x7f26
0000000000007f01	movq	-0x18(%rbp), %rax
0000000000007f05	movl	$0x2, 0x10(%rax)
0000000000007f0c	jmp	0x7f26
0000000000007f11	movq	-0x18(%rbp), %rax
0000000000007f15	movl	$0x3, 0x10(%rax)
0000000000007f1c	jmp	0x7f26
0000000000007f21	jmp	0x7f26
0000000000007f26	jmp	0x7f4f
0000000000007f2b	jmp	0x7f4f
0000000000007f30	leaq	0x61d01(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOpcode"
0000000000007f37	leaq	0x6199c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000007f3e	leaq	0x6367f(%rip), %rcx ## literal pool for: "0"
0000000000007f45	movl	$0xf1d, %edx
0000000000007f4a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000007f4f	jmp	0x7faf
0000000000007f54	movq	-0x20(%rbp), %rax
0000000000007f58	movw	$0xc, (%rax)
0000000000007f5d	movl	$0x100000, -0x4(%rbp)
0000000000007f64	jmp	0x7fc8
0000000000007f69	jmp	0x7f6e
0000000000007f6e	movq	-0x10(%rbp), %rdi
0000000000007f72	movq	-0x18(%rbp), %rsi
0000000000007f76	movq	-0x18(%rbp), %rax
0000000000007f7a	addq	$0x14, %rax
0000000000007f7e	movq	%rax, %rdx
0000000000007f81	callq	_ZydisInputNext
0000000000007f86	movl	%eax, -0x60(%rbp)
0000000000007f89	movl	-0x60(%rbp), %eax
0000000000007f8c	andl	$0x80000000, %eax
0000000000007f91	cmpl	$0x0, %eax
0000000000007f94	je	0x7fa5
0000000000007f9a	movl	-0x60(%rbp), %eax
0000000000007f9d	movl	%eax, -0x4(%rbp)
0000000000007fa0	jmp	0x7fc8
0000000000007fa5	jmp	0x7faa
0000000000007faa	jmp	0x7faf
0000000000007faf	movq	-0x18(%rbp), %rax
0000000000007fb3	movzbl	0x14(%rax), %ecx
0000000000007fb7	movw	%cx, %dx
0000000000007fba	movq	-0x20(%rbp), %rax
0000000000007fbe	movw	%dx, (%rax)
0000000000007fc1	movl	$0x100000, -0x4(%rbp)
0000000000007fc8	movl	-0x4(%rbp), %eax
0000000000007fcb	addq	$0xc0, %rsp
0000000000007fd2	popq	%rbp
0000000000007fd3	retq
0000000000007fd4	nopw	%cs:(%rax,%rax)
0000000000007fde	nop
_ZydisNodeHandlerMode:
0000000000007fe0	pushq	%rbp
0000000000007fe1	movq	%rsp, %rbp
0000000000007fe4	subq	$0x30, %rsp
0000000000007fe8	movq	%rdi, -0x8(%rbp)
0000000000007fec	movq	%rsi, -0x10(%rbp)
0000000000007ff0	cmpq	$0x0, -0x8(%rbp)
0000000000007ff5	setne	%al
0000000000007ff8	xorb	$-0x1, %al
0000000000007ffa	andb	$0x1, %al
0000000000007ffc	movzbl	%al, %ecx
0000000000007fff	movslq	%ecx, %rsi
0000000000008002	cmpq	$0x0, %rsi
0000000000008006	je	0x802b
000000000000800c	leaq	0x61ed7(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
0000000000008013	leaq	0x618c0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000801a	leaq	0x618ee(%rip), %rcx ## literal pool for: "context"
0000000000008021	movl	$0xf30, %edx
0000000000008026	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000802b	jmp	0x8030
0000000000008030	cmpq	$0x0, -0x10(%rbp)
0000000000008035	setne	%al
0000000000008038	xorb	$-0x1, %al
000000000000803a	andb	$0x1, %al
000000000000803c	movzbl	%al, %ecx
000000000000803f	movslq	%ecx, %rdx
0000000000008042	cmpq	$0x0, %rdx
0000000000008046	je	0x806b
000000000000804c	leaq	0x61e97(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
0000000000008053	leaq	0x61880(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000805a	leaq	0x61af3(%rip), %rcx ## literal pool for: "index"
0000000000008061	movl	$0xf31, %edx
0000000000008066	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000806b	jmp	0x8070
0000000000008070	movq	-0x8(%rbp), %rax
0000000000008074	movq	(%rax), %rax
0000000000008077	movl	(%rax), %ecx
0000000000008079	testl	%ecx, %ecx
000000000000807b	movl	%ecx, -0x14(%rbp)
000000000000807e	je	0x80f8
0000000000008084	jmp	0x8089
0000000000008089	movl	-0x14(%rbp), %eax
000000000000808c	subl	$0x1, %eax
000000000000808f	movl	%eax, -0x18(%rbp)
0000000000008092	je	0x80ea
0000000000008098	jmp	0x809d
000000000000809d	movl	-0x14(%rbp), %eax
00000000000080a0	subl	$0x2, %eax
00000000000080a3	movl	%eax, -0x1c(%rbp)
00000000000080a6	je	0x80dc
00000000000080ac	jmp	0x80b1
00000000000080b1	movl	-0x14(%rbp), %eax
00000000000080b4	subl	$0x3, %eax
00000000000080b7	movl	%eax, -0x20(%rbp)
00000000000080ba	je	0x80ea
00000000000080c0	jmp	0x80c5
00000000000080c5	movl	-0x14(%rbp), %eax
00000000000080c8	addl	$-0x4, %eax
00000000000080cb	subl	$0x1, %eax
00000000000080ce	movl	%eax, -0x24(%rbp)
00000000000080d1	ja	0x8106
00000000000080d7	jmp	0x80dc
00000000000080dc	movq	-0x10(%rbp), %rax
00000000000080e0	movw	$0x0, (%rax)
00000000000080e5	jmp	0x8125
00000000000080ea	movq	-0x10(%rbp), %rax
00000000000080ee	movw	$0x1, (%rax)
00000000000080f3	jmp	0x8125
00000000000080f8	movq	-0x10(%rbp), %rax
00000000000080fc	movw	$0x2, (%rax)
0000000000008101	jmp	0x8125
0000000000008106	leaq	0x61ddd(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMode"
000000000000810d	leaq	0x617c6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008114	leaq	0x634a9(%rip), %rcx ## literal pool for: "0"
000000000000811b	movl	$0xf42, %edx
0000000000008120	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008125	movl	$0x100000, %eax
000000000000812a	addq	$0x30, %rsp
000000000000812e	popq	%rbp
000000000000812f	retq
_ZydisNodeHandlerModeCompact:
0000000000008130	pushq	%rbp
0000000000008131	movq	%rsp, %rbp
0000000000008134	subq	$0x10, %rsp
0000000000008138	movq	%rdi, -0x8(%rbp)
000000000000813c	movq	%rsi, -0x10(%rbp)
0000000000008140	cmpq	$0x0, -0x8(%rbp)
0000000000008145	setne	%al
0000000000008148	xorb	$-0x1, %al
000000000000814a	andb	$0x1, %al
000000000000814c	movzbl	%al, %ecx
000000000000814f	movslq	%ecx, %rsi
0000000000008152	cmpq	$0x0, %rsi
0000000000008156	je	0x817b
000000000000815c	leaq	0x61d9c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModeCompact"
0000000000008163	leaq	0x61770(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000816a	leaq	0x6179e(%rip), %rcx ## literal pool for: "context"
0000000000008171	movl	$0xf49, %edx
0000000000008176	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000817b	jmp	0x8180
0000000000008180	cmpq	$0x0, -0x10(%rbp)
0000000000008185	setne	%al
0000000000008188	xorb	$-0x1, %al
000000000000818a	andb	$0x1, %al
000000000000818c	movzbl	%al, %ecx
000000000000818f	movslq	%ecx, %rdx
0000000000008192	cmpq	$0x0, %rdx
0000000000008196	je	0x81bb
000000000000819c	leaq	0x61d5c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModeCompact"
00000000000081a3	leaq	0x61730(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000081aa	leaq	0x619a3(%rip), %rcx ## literal pool for: "index"
00000000000081b1	movl	$0xf4a, %edx
00000000000081b6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000081bb	jmp	0x81c0
00000000000081c0	xorl	%eax, %eax
00000000000081c2	movq	-0x8(%rbp), %rcx
00000000000081c6	movq	(%rcx), %rcx
00000000000081c9	movl	(%rcx), %edx
00000000000081cb	cmpl	$0x0, %edx
00000000000081ce	movl	$0x1, %edx
00000000000081d3	cmovel	%eax, %edx
00000000000081d6	movw	%dx, %si
00000000000081d9	movq	-0x10(%rbp), %rcx
00000000000081dd	movw	%si, (%rcx)
00000000000081e0	movl	$0x100000, %eax
00000000000081e5	addq	$0x10, %rsp
00000000000081e9	popq	%rbp
00000000000081ea	retq
00000000000081eb	nopl	(%rax,%rax)
_ZydisNodeHandlerModrmMod:
00000000000081f0	pushq	%rbp
00000000000081f1	movq	%rsp, %rbp
00000000000081f4	subq	$0x30, %rsp
00000000000081f8	movq	%rdi, -0x10(%rbp)
00000000000081fc	movq	%rsi, -0x18(%rbp)
0000000000008200	movq	%rdx, -0x20(%rbp)
0000000000008204	cmpq	$0x0, -0x10(%rbp)
0000000000008209	setne	%al
000000000000820c	xorb	$-0x1, %al
000000000000820e	andb	$0x1, %al
0000000000008210	movzbl	%al, %ecx
0000000000008213	movslq	%ecx, %rdx
0000000000008216	cmpq	$0x0, %rdx
000000000000821a	je	0x823f
0000000000008220	leaq	0x61cf4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
0000000000008227	leaq	0x616ac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000822e	leaq	0x616da(%rip), %rcx ## literal pool for: "context"
0000000000008235	movl	$0xf53, %edx
000000000000823a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000823f	jmp	0x8244
0000000000008244	cmpq	$0x0, -0x18(%rbp)
0000000000008249	setne	%al
000000000000824c	xorb	$-0x1, %al
000000000000824e	andb	$0x1, %al
0000000000008250	movzbl	%al, %ecx
0000000000008253	movslq	%ecx, %rdx
0000000000008256	cmpq	$0x0, %rdx
000000000000825a	je	0x827f
0000000000008260	leaq	0x61cb4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
0000000000008267	leaq	0x6166c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000826e	leaq	0x616a2(%rip), %rcx ## literal pool for: "instruction"
0000000000008275	movl	$0xf54, %edx
000000000000827a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000827f	jmp	0x8284
0000000000008284	cmpq	$0x0, -0x20(%rbp)
0000000000008289	setne	%al
000000000000828c	xorb	$-0x1, %al
000000000000828e	andb	$0x1, %al
0000000000008290	movzbl	%al, %ecx
0000000000008293	movslq	%ecx, %rdx
0000000000008296	cmpq	$0x0, %rdx
000000000000829a	je	0x82bf
00000000000082a0	leaq	0x61c74(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmMod"
00000000000082a7	leaq	0x6162c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000082ae	leaq	0x6189f(%rip), %rcx ## literal pool for: "index"
00000000000082b5	movl	$0xf55, %edx
00000000000082ba	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000082bf	jmp	0x82c4
00000000000082c4	movq	-0x18(%rbp), %rax
00000000000082c8	cmpb	$0x0, 0x57b(%rax)
00000000000082cf	jne	0x8328
00000000000082d5	movq	-0x18(%rbp), %rax
00000000000082d9	movb	0x8(%rax), %cl
00000000000082dc	movq	-0x18(%rbp), %rax
00000000000082e0	movb	%cl, 0x57b(%rax)
00000000000082e6	movq	-0x10(%rbp), %rdi
00000000000082ea	movq	-0x18(%rbp), %rsi
00000000000082ee	leaq	-0x21(%rbp), %rdx
00000000000082f2	callq	_ZydisInputNext
00000000000082f7	movl	%eax, -0x28(%rbp)
00000000000082fa	movl	-0x28(%rbp), %eax
00000000000082fd	andl	$0x80000000, %eax
0000000000008302	cmpl	$0x0, %eax
0000000000008305	je	0x8316
000000000000830b	movl	-0x28(%rbp), %eax
000000000000830e	movl	%eax, -0x4(%rbp)
0000000000008311	jmp	0x8344
0000000000008316	jmp	0x831b
000000000000831b	movq	-0x18(%rbp), %rdi
000000000000831f	movzbl	-0x21(%rbp), %esi
0000000000008323	callq	_ZydisDecodeModRM
0000000000008328	movq	-0x18(%rbp), %rax
000000000000832c	movzbl	0x578(%rax), %ecx
0000000000008333	movw	%cx, %dx
0000000000008336	movq	-0x20(%rbp), %rax
000000000000833a	movw	%dx, (%rax)
000000000000833d	movl	$0x100000, -0x4(%rbp)
0000000000008344	movl	-0x4(%rbp), %eax
0000000000008347	addq	$0x30, %rsp
000000000000834b	popq	%rbp
000000000000834c	retq
000000000000834d	nopl	(%rax)
_ZydisNodeHandlerModrmModCompact:
0000000000008350	pushq	%rbp
0000000000008351	movq	%rsp, %rbp
0000000000008354	subq	$0x30, %rsp
0000000000008358	movq	%rdi, -0x10(%rbp)
000000000000835c	movq	%rsi, -0x18(%rbp)
0000000000008360	movq	%rdx, -0x20(%rbp)
0000000000008364	movq	-0x10(%rbp), %rdi
0000000000008368	movq	-0x18(%rbp), %rsi
000000000000836c	movq	-0x20(%rbp), %rdx
0000000000008370	callq	_ZydisNodeHandlerModrmMod
0000000000008375	movl	%eax, -0x24(%rbp)
0000000000008378	movl	-0x24(%rbp), %eax
000000000000837b	andl	$0x80000000, %eax
0000000000008380	cmpl	$0x0, %eax
0000000000008383	je	0x8394
0000000000008389	movl	-0x24(%rbp), %eax
000000000000838c	movl	%eax, -0x4(%rbp)
000000000000838f	jmp	0x83be
0000000000008394	jmp	0x8399
0000000000008399	xorl	%eax, %eax
000000000000839b	movq	-0x20(%rbp), %rcx
000000000000839f	movzwl	(%rcx), %edx
00000000000083a2	cmpl	$0x3, %edx
00000000000083a5	movl	$0x1, %edx
00000000000083aa	cmovel	%eax, %edx
00000000000083ad	movw	%dx, %si
00000000000083b0	movq	-0x20(%rbp), %rcx
00000000000083b4	movw	%si, (%rcx)
00000000000083b7	movl	$0x100000, -0x4(%rbp)
00000000000083be	movl	-0x4(%rbp), %eax
00000000000083c1	addq	$0x30, %rsp
00000000000083c5	popq	%rbp
00000000000083c6	retq
00000000000083c7	nopw	(%rax,%rax)
_ZydisNodeHandlerModrmReg:
00000000000083d0	pushq	%rbp
00000000000083d1	movq	%rsp, %rbp
00000000000083d4	subq	$0x30, %rsp
00000000000083d8	movq	%rdi, -0x10(%rbp)
00000000000083dc	movq	%rsi, -0x18(%rbp)
00000000000083e0	movq	%rdx, -0x20(%rbp)
00000000000083e4	cmpq	$0x0, -0x10(%rbp)
00000000000083e9	setne	%al
00000000000083ec	xorb	$-0x1, %al
00000000000083ee	andb	$0x1, %al
00000000000083f0	movzbl	%al, %ecx
00000000000083f3	movslq	%ecx, %rdx
00000000000083f6	cmpq	$0x0, %rdx
00000000000083fa	je	0x841f
0000000000008400	leaq	0x61ba7(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000008407	leaq	0x614cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000840e	leaq	0x614fa(%rip), %rcx ## literal pool for: "context"
0000000000008415	movl	$0xf6d, %edx
000000000000841a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000841f	jmp	0x8424
0000000000008424	cmpq	$0x0, -0x18(%rbp)
0000000000008429	setne	%al
000000000000842c	xorb	$-0x1, %al
000000000000842e	andb	$0x1, %al
0000000000008430	movzbl	%al, %ecx
0000000000008433	movslq	%ecx, %rdx
0000000000008436	cmpq	$0x0, %rdx
000000000000843a	je	0x845f
0000000000008440	leaq	0x61b67(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000008447	leaq	0x6148c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000844e	leaq	0x614c2(%rip), %rcx ## literal pool for: "instruction"
0000000000008455	movl	$0xf6e, %edx
000000000000845a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000845f	jmp	0x8464
0000000000008464	cmpq	$0x0, -0x20(%rbp)
0000000000008469	setne	%al
000000000000846c	xorb	$-0x1, %al
000000000000846e	andb	$0x1, %al
0000000000008470	movzbl	%al, %ecx
0000000000008473	movslq	%ecx, %rdx
0000000000008476	cmpq	$0x0, %rdx
000000000000847a	je	0x849f
0000000000008480	leaq	0x61b27(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmReg"
0000000000008487	leaq	0x6144c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000848e	leaq	0x616bf(%rip), %rcx ## literal pool for: "index"
0000000000008495	movl	$0xf6f, %edx
000000000000849a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000849f	jmp	0x84a4
00000000000084a4	movq	-0x18(%rbp), %rax
00000000000084a8	cmpb	$0x0, 0x57b(%rax)
00000000000084af	jne	0x8508
00000000000084b5	movq	-0x18(%rbp), %rax
00000000000084b9	movb	0x8(%rax), %cl
00000000000084bc	movq	-0x18(%rbp), %rax
00000000000084c0	movb	%cl, 0x57b(%rax)
00000000000084c6	movq	-0x10(%rbp), %rdi
00000000000084ca	movq	-0x18(%rbp), %rsi
00000000000084ce	leaq	-0x21(%rbp), %rdx
00000000000084d2	callq	_ZydisInputNext
00000000000084d7	movl	%eax, -0x28(%rbp)
00000000000084da	movl	-0x28(%rbp), %eax
00000000000084dd	andl	$0x80000000, %eax
00000000000084e2	cmpl	$0x0, %eax
00000000000084e5	je	0x84f6
00000000000084eb	movl	-0x28(%rbp), %eax
00000000000084ee	movl	%eax, -0x4(%rbp)
00000000000084f1	jmp	0x8524
00000000000084f6	jmp	0x84fb
00000000000084fb	movq	-0x18(%rbp), %rdi
00000000000084ff	movzbl	-0x21(%rbp), %esi
0000000000008503	callq	_ZydisDecodeModRM
0000000000008508	movq	-0x18(%rbp), %rax
000000000000850c	movzbl	0x579(%rax), %ecx
0000000000008513	movw	%cx, %dx
0000000000008516	movq	-0x20(%rbp), %rax
000000000000851a	movw	%dx, (%rax)
000000000000851d	movl	$0x100000, -0x4(%rbp)
0000000000008524	movl	-0x4(%rbp), %eax
0000000000008527	addq	$0x30, %rsp
000000000000852b	popq	%rbp
000000000000852c	retq
000000000000852d	nopl	(%rax)
_ZydisNodeHandlerModrmRm:
0000000000008530	pushq	%rbp
0000000000008531	movq	%rsp, %rbp
0000000000008534	subq	$0x30, %rsp
0000000000008538	movq	%rdi, -0x10(%rbp)
000000000000853c	movq	%rsi, -0x18(%rbp)
0000000000008540	movq	%rdx, -0x20(%rbp)
0000000000008544	cmpq	$0x0, -0x10(%rbp)
0000000000008549	setne	%al
000000000000854c	xorb	$-0x1, %al
000000000000854e	andb	$0x1, %al
0000000000008550	movzbl	%al, %ecx
0000000000008553	movslq	%ecx, %rdx
0000000000008556	cmpq	$0x0, %rdx
000000000000855a	je	0x857f
0000000000008560	leaq	0x61a60(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
0000000000008567	leaq	0x6136c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000856e	leaq	0x6139a(%rip), %rcx ## literal pool for: "context"
0000000000008575	movl	$0xf7f, %edx
000000000000857a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000857f	jmp	0x8584
0000000000008584	cmpq	$0x0, -0x18(%rbp)
0000000000008589	setne	%al
000000000000858c	xorb	$-0x1, %al
000000000000858e	andb	$0x1, %al
0000000000008590	movzbl	%al, %ecx
0000000000008593	movslq	%ecx, %rdx
0000000000008596	cmpq	$0x0, %rdx
000000000000859a	je	0x85bf
00000000000085a0	leaq	0x61a20(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
00000000000085a7	leaq	0x6132c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000085ae	leaq	0x61362(%rip), %rcx ## literal pool for: "instruction"
00000000000085b5	movl	$0xf80, %edx
00000000000085ba	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000085bf	jmp	0x85c4
00000000000085c4	cmpq	$0x0, -0x20(%rbp)
00000000000085c9	setne	%al
00000000000085cc	xorb	$-0x1, %al
00000000000085ce	andb	$0x1, %al
00000000000085d0	movzbl	%al, %ecx
00000000000085d3	movslq	%ecx, %rdx
00000000000085d6	cmpq	$0x0, %rdx
00000000000085da	je	0x85ff
00000000000085e0	leaq	0x619e0(%rip), %rdi ## literal pool for: "ZydisNodeHandlerModrmRm"
00000000000085e7	leaq	0x612ec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000085ee	leaq	0x6155f(%rip), %rcx ## literal pool for: "index"
00000000000085f5	movl	$0xf81, %edx
00000000000085fa	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000085ff	jmp	0x8604
0000000000008604	movq	-0x18(%rbp), %rax
0000000000008608	cmpb	$0x0, 0x57b(%rax)
000000000000860f	jne	0x8668
0000000000008615	movq	-0x18(%rbp), %rax
0000000000008619	movb	0x8(%rax), %cl
000000000000861c	movq	-0x18(%rbp), %rax
0000000000008620	movb	%cl, 0x57b(%rax)
0000000000008626	movq	-0x10(%rbp), %rdi
000000000000862a	movq	-0x18(%rbp), %rsi
000000000000862e	leaq	-0x21(%rbp), %rdx
0000000000008632	callq	_ZydisInputNext
0000000000008637	movl	%eax, -0x28(%rbp)
000000000000863a	movl	-0x28(%rbp), %eax
000000000000863d	andl	$0x80000000, %eax
0000000000008642	cmpl	$0x0, %eax
0000000000008645	je	0x8656
000000000000864b	movl	-0x28(%rbp), %eax
000000000000864e	movl	%eax, -0x4(%rbp)
0000000000008651	jmp	0x8684
0000000000008656	jmp	0x865b
000000000000865b	movq	-0x18(%rbp), %rdi
000000000000865f	movzbl	-0x21(%rbp), %esi
0000000000008663	callq	_ZydisDecodeModRM
0000000000008668	movq	-0x18(%rbp), %rax
000000000000866c	movzbl	0x57a(%rax), %ecx
0000000000008673	movw	%cx, %dx
0000000000008676	movq	-0x20(%rbp), %rax
000000000000867a	movw	%dx, (%rax)
000000000000867d	movl	$0x100000, -0x4(%rbp)
0000000000008684	movl	-0x4(%rbp), %eax
0000000000008687	addq	$0x30, %rsp
000000000000868b	popq	%rbp
000000000000868c	retq
000000000000868d	nopl	(%rax)
_ZydisNodeHandlerMandatoryPrefix:
0000000000008690	pushq	%rbp
0000000000008691	movq	%rsp, %rbp
0000000000008694	subq	$0x30, %rsp
0000000000008698	movq	%rdi, -0x8(%rbp)
000000000000869c	movq	%rsi, -0x10(%rbp)
00000000000086a0	movq	%rdx, -0x18(%rbp)
00000000000086a4	cmpq	$0x0, -0x8(%rbp)
00000000000086a9	setne	%al
00000000000086ac	xorb	$-0x1, %al
00000000000086ae	andb	$0x1, %al
00000000000086b0	movzbl	%al, %ecx
00000000000086b3	movslq	%ecx, %rdx
00000000000086b6	cmpq	$0x0, %rdx
00000000000086ba	je	0x86df
00000000000086c0	leaq	0x61918(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
00000000000086c7	leaq	0x6120c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000086ce	leaq	0x6123a(%rip), %rcx ## literal pool for: "context"
00000000000086d5	movl	$0xf91, %edx
00000000000086da	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000086df	jmp	0x86e4
00000000000086e4	cmpq	$0x0, -0x10(%rbp)
00000000000086e9	setne	%al
00000000000086ec	xorb	$-0x1, %al
00000000000086ee	andb	$0x1, %al
00000000000086f0	movzbl	%al, %ecx
00000000000086f3	movslq	%ecx, %rdx
00000000000086f6	cmpq	$0x0, %rdx
00000000000086fa	je	0x871f
0000000000008700	leaq	0x618d8(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
0000000000008707	leaq	0x611cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000870e	leaq	0x61202(%rip), %rcx ## literal pool for: "instruction"
0000000000008715	movl	$0xf92, %edx
000000000000871a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000871f	jmp	0x8724
0000000000008724	cmpq	$0x0, -0x18(%rbp)
0000000000008729	setne	%al
000000000000872c	xorb	$-0x1, %al
000000000000872e	andb	$0x1, %al
0000000000008730	movzbl	%al, %ecx
0000000000008733	movslq	%ecx, %rdx
0000000000008736	cmpq	$0x0, %rdx
000000000000873a	je	0x875f
0000000000008740	leaq	0x61898(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMandatoryPrefix"
0000000000008747	leaq	0x6118c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000874e	leaq	0x613ff(%rip), %rcx ## literal pool for: "index"
0000000000008755	movl	$0xf93, %edx
000000000000875a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000875f	jmp	0x8764
0000000000008764	movq	-0x8(%rbp), %rax
0000000000008768	movzbl	0x1c(%rax), %ecx
000000000000876c	movl	%ecx, %edx
000000000000876e	subl	$0x66, %edx
0000000000008771	movl	%ecx, -0x1c(%rbp)
0000000000008774	movl	%edx, -0x20(%rbp)
0000000000008777	je	0x87ae
000000000000877d	jmp	0x8782
0000000000008782	movl	-0x1c(%rbp), %eax
0000000000008785	subl	$0xf2, %eax
000000000000878a	movl	%eax, -0x24(%rbp)
000000000000878d	je	0x8818
0000000000008793	jmp	0x8798
0000000000008798	movl	-0x1c(%rbp), %eax
000000000000879b	subl	$0xf3, %eax
00000000000087a0	movl	%eax, -0x28(%rbp)
00000000000087a3	je	0x87f1
00000000000087a9	jmp	0x883f
00000000000087ae	movq	-0x10(%rbp), %rax
00000000000087b2	movq	-0x8(%rbp), %rcx
00000000000087b6	movzbl	0x23(%rcx), %edx
00000000000087ba	movl	%edx, %ecx
00000000000087bc	movl	$0x2, 0x4cc(%rax,%rcx,8)
00000000000087c7	movq	-0x10(%rbp), %rax
00000000000087cb	movabsq	$-0x400000001, %rcx
00000000000087d5	andq	0x430(%rax), %rcx
00000000000087dc	movq	%rcx, 0x430(%rax)
00000000000087e3	movq	-0x18(%rbp), %rax
00000000000087e7	movw	$0x2, (%rax)
00000000000087ec	jmp	0x8848
00000000000087f1	movq	-0x10(%rbp), %rax
00000000000087f5	movq	-0x8(%rbp), %rcx
00000000000087f9	movzbl	0x23(%rcx), %edx
00000000000087fd	movl	%edx, %ecx
00000000000087ff	movl	$0x2, 0x4cc(%rax,%rcx,8)
000000000000880a	movq	-0x18(%rbp), %rax
000000000000880e	movw	$0x3, (%rax)
0000000000008813	jmp	0x8848
0000000000008818	movq	-0x10(%rbp), %rax
000000000000881c	movq	-0x8(%rbp), %rcx
0000000000008820	movzbl	0x23(%rcx), %edx
0000000000008824	movl	%edx, %ecx
0000000000008826	movl	$0x2, 0x4cc(%rax,%rcx,8)
0000000000008831	movq	-0x18(%rbp), %rax
0000000000008835	movw	$0x4, (%rax)
000000000000883a	jmp	0x8848
000000000000883f	movq	-0x18(%rbp), %rax
0000000000008843	movw	$0x1, (%rax)
0000000000008848	movl	$0x100000, %eax
000000000000884d	addq	$0x30, %rsp
0000000000008851	popq	%rbp
0000000000008852	retq
0000000000008853	nopw	%cs:(%rax,%rax)
000000000000885d	nopl	(%rax)
_ZydisNodeHandlerOperandSize:
0000000000008860	pushq	%rbp
0000000000008861	movq	%rsp, %rbp
0000000000008864	subq	$0x30, %rsp
0000000000008868	movq	%rdi, -0x8(%rbp)
000000000000886c	movq	%rsi, -0x10(%rbp)
0000000000008870	movq	%rdx, -0x18(%rbp)
0000000000008874	cmpq	$0x0, -0x8(%rbp)
0000000000008879	setne	%al
000000000000887c	xorb	$-0x1, %al
000000000000887e	andb	$0x1, %al
0000000000008880	movzbl	%al, %ecx
0000000000008883	movslq	%ecx, %rdx
0000000000008886	cmpq	$0x0, %rdx
000000000000888a	je	0x88af
0000000000008890	leaq	0x61768(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008897	leaq	0x6103c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000889e	leaq	0x6106a(%rip), %rcx ## literal pool for: "context"
00000000000088a5	movl	$0xfb3, %edx
00000000000088aa	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000088af	jmp	0x88b4
00000000000088b4	cmpq	$0x0, -0x10(%rbp)
00000000000088b9	setne	%al
00000000000088bc	xorb	$-0x1, %al
00000000000088be	andb	$0x1, %al
00000000000088c0	movzbl	%al, %ecx
00000000000088c3	movslq	%ecx, %rdx
00000000000088c6	cmpq	$0x0, %rdx
00000000000088ca	je	0x88ef
00000000000088d0	leaq	0x61728(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
00000000000088d7	leaq	0x60ffc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000088de	leaq	0x61032(%rip), %rcx ## literal pool for: "instruction"
00000000000088e5	movl	$0xfb4, %edx
00000000000088ea	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000088ef	jmp	0x88f4
00000000000088f4	cmpq	$0x0, -0x18(%rbp)
00000000000088f9	setne	%al
00000000000088fc	xorb	$-0x1, %al
00000000000088fe	andb	$0x1, %al
0000000000008900	movzbl	%al, %ecx
0000000000008903	movslq	%ecx, %rdx
0000000000008906	cmpq	$0x0, %rdx
000000000000890a	je	0x892f
0000000000008910	leaq	0x616e8(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008917	leaq	0x60fbc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000891e	leaq	0x6122f(%rip), %rcx ## literal pool for: "index"
0000000000008925	movl	$0xfb5, %edx
000000000000892a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000892f	jmp	0x8934
0000000000008934	movq	-0x8(%rbp), %rax
0000000000008938	movq	(%rax), %rax
000000000000893b	cmpl	$0x0, (%rax)
000000000000893e	jne	0x8963
0000000000008944	movq	-0x8(%rbp), %rax
0000000000008948	movzbl	0x26(%rax), %ecx
000000000000894c	cmpl	$0x0, %ecx
000000000000894f	je	0x8963
0000000000008955	movq	-0x18(%rbp), %rax
0000000000008959	movw	$0x2, (%rax)
000000000000895e	jmp	0x8a81
0000000000008963	movq	-0x10(%rbp), %rax
0000000000008967	movabsq	$0x400000000, %rcx
0000000000008971	andq	0x430(%rax), %rcx
0000000000008978	cmpq	$0x0, %rcx
000000000000897c	je	0x899b
0000000000008982	movq	-0x10(%rbp), %rax
0000000000008986	movq	-0x8(%rbp), %rcx
000000000000898a	movzbl	0x20(%rcx), %edx
000000000000898e	movl	%edx, %ecx
0000000000008990	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000899b	movq	-0x8(%rbp), %rax
000000000000899f	movq	(%rax), %rax
00000000000089a2	movl	(%rax), %ecx
00000000000089a4	movl	%ecx, %edx
00000000000089a6	subl	$0x2, %edx
00000000000089a9	movl	%ecx, -0x1c(%rbp)
00000000000089ac	movl	%edx, -0x20(%rbp)
00000000000089af	jb	0x8a2b
00000000000089b5	jmp	0x89ba
00000000000089ba	movl	-0x1c(%rbp), %eax
00000000000089bd	subl	$0x2, %eax
00000000000089c0	movl	%eax, -0x24(%rbp)
00000000000089c3	je	0x89f9
00000000000089c9	jmp	0x89ce
00000000000089ce	movl	-0x1c(%rbp), %eax
00000000000089d1	subl	$0x3, %eax
00000000000089d4	movl	%eax, -0x28(%rbp)
00000000000089d7	je	0x8a2b
00000000000089dd	jmp	0x89e2
00000000000089e2	movl	-0x1c(%rbp), %eax
00000000000089e5	addl	$-0x4, %eax
00000000000089e8	subl	$0x1, %eax
00000000000089eb	movl	%eax, -0x2c(%rbp)
00000000000089ee	ja	0x8a5d
00000000000089f4	jmp	0x89f9
00000000000089f9	xorl	%eax, %eax
00000000000089fb	movq	-0x10(%rbp), %rcx
00000000000089ff	movabsq	$0x400000000, %rdx
0000000000008a09	andq	0x430(%rcx), %rdx
0000000000008a10	cmpq	$0x0, %rdx
0000000000008a14	movl	$0x1, %esi
0000000000008a19	cmovnel	%esi, %eax
0000000000008a1c	movw	%ax, %di
0000000000008a1f	movq	-0x18(%rbp), %rcx
0000000000008a23	movw	%di, (%rcx)
0000000000008a26	jmp	0x8a7c
0000000000008a2b	xorl	%eax, %eax
0000000000008a2d	movq	-0x10(%rbp), %rcx
0000000000008a31	movabsq	$0x400000000, %rdx
0000000000008a3b	andq	0x430(%rcx), %rdx
0000000000008a42	cmpq	$0x0, %rdx
0000000000008a46	movl	$0x1, %esi
0000000000008a4b	cmovnel	%eax, %esi
0000000000008a4e	movw	%si, %di
0000000000008a51	movq	-0x18(%rbp), %rcx
0000000000008a55	movw	%di, (%rcx)
0000000000008a58	jmp	0x8a7c
0000000000008a5d	leaq	0x6159b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerOperandSize"
0000000000008a64	leaq	0x60e6f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008a6b	leaq	0x62b52(%rip), %rcx ## literal pool for: "0"
0000000000008a72	movl	$0xfce, %edx
0000000000008a77	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008a7c	jmp	0x8a81
0000000000008a81	movl	$0x100000, %eax
0000000000008a86	addq	$0x30, %rsp
0000000000008a8a	popq	%rbp
0000000000008a8b	retq
0000000000008a8c	nopl	(%rax)
_ZydisNodeHandlerAddressSize:
0000000000008a90	pushq	%rbp
0000000000008a91	movq	%rsp, %rbp
0000000000008a94	subq	$0x30, %rsp
0000000000008a98	movq	%rdi, -0x8(%rbp)
0000000000008a9c	movq	%rsi, -0x10(%rbp)
0000000000008aa0	movq	%rdx, -0x18(%rbp)
0000000000008aa4	cmpq	$0x0, -0x8(%rbp)
0000000000008aa9	setne	%al
0000000000008aac	xorb	$-0x1, %al
0000000000008aae	andb	$0x1, %al
0000000000008ab0	movzbl	%al, %ecx
0000000000008ab3	movslq	%ecx, %rdx
0000000000008ab6	cmpq	$0x0, %rdx
0000000000008aba	je	0x8adf
0000000000008ac0	leaq	0x61554(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008ac7	leaq	0x60e0c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008ace	leaq	0x60e3a(%rip), %rcx ## literal pool for: "context"
0000000000008ad5	movl	$0xfd8, %edx
0000000000008ada	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008adf	jmp	0x8ae4
0000000000008ae4	cmpq	$0x0, -0x10(%rbp)
0000000000008ae9	setne	%al
0000000000008aec	xorb	$-0x1, %al
0000000000008aee	andb	$0x1, %al
0000000000008af0	movzbl	%al, %ecx
0000000000008af3	movslq	%ecx, %rdx
0000000000008af6	cmpq	$0x0, %rdx
0000000000008afa	je	0x8b1f
0000000000008b00	leaq	0x61514(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008b07	leaq	0x60dcc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008b0e	leaq	0x60e02(%rip), %rcx ## literal pool for: "instruction"
0000000000008b15	movl	$0xfd9, %edx
0000000000008b1a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008b1f	jmp	0x8b24
0000000000008b24	cmpq	$0x0, -0x18(%rbp)
0000000000008b29	setne	%al
0000000000008b2c	xorb	$-0x1, %al
0000000000008b2e	andb	$0x1, %al
0000000000008b30	movzbl	%al, %ecx
0000000000008b33	movslq	%ecx, %rdx
0000000000008b36	cmpq	$0x0, %rdx
0000000000008b3a	je	0x8b5f
0000000000008b40	leaq	0x614d4(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008b47	leaq	0x60d8c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008b4e	leaq	0x60fff(%rip), %rcx ## literal pool for: "index"
0000000000008b55	movl	$0xfda, %edx
0000000000008b5a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008b5f	jmp	0x8b64
0000000000008b64	movq	-0x8(%rbp), %rax
0000000000008b68	movq	(%rax), %rax
0000000000008b6b	movl	0x4(%rax), %ecx
0000000000008b6e	testl	%ecx, %ecx
0000000000008b70	movl	%ecx, -0x1c(%rbp)
0000000000008b73	je	0x8ba6
0000000000008b79	jmp	0x8b7e
0000000000008b7e	movl	-0x1c(%rbp), %eax
0000000000008b81	subl	$0x1, %eax
0000000000008b84	movl	%eax, -0x20(%rbp)
0000000000008b87	je	0x8bd8
0000000000008b8d	jmp	0x8b92
0000000000008b92	movl	-0x1c(%rbp), %eax
0000000000008b95	subl	$0x2, %eax
0000000000008b98	movl	%eax, -0x24(%rbp)
0000000000008b9b	je	0x8c0a
0000000000008ba1	jmp	0x8c3f
0000000000008ba6	xorl	%eax, %eax
0000000000008ba8	movq	-0x10(%rbp), %rcx
0000000000008bac	movabsq	$0x800000000, %rdx
0000000000008bb6	andq	0x430(%rcx), %rdx
0000000000008bbd	cmpq	$0x0, %rdx
0000000000008bc1	movl	$0x1, %esi
0000000000008bc6	cmovnel	%esi, %eax
0000000000008bc9	movw	%ax, %di
0000000000008bcc	movq	-0x18(%rbp), %rcx
0000000000008bd0	movw	%di, (%rcx)
0000000000008bd3	jmp	0x8c5e
0000000000008bd8	xorl	%eax, %eax
0000000000008bda	movq	-0x10(%rbp), %rcx
0000000000008bde	movabsq	$0x800000000, %rdx
0000000000008be8	andq	0x430(%rcx), %rdx
0000000000008bef	cmpq	$0x0, %rdx
0000000000008bf3	movl	$0x1, %esi
0000000000008bf8	cmovnel	%eax, %esi
0000000000008bfb	movw	%si, %di
0000000000008bfe	movq	-0x18(%rbp), %rcx
0000000000008c02	movw	%di, (%rcx)
0000000000008c05	jmp	0x8c5e
0000000000008c0a	movq	-0x10(%rbp), %rax
0000000000008c0e	movabsq	$0x800000000, %rcx
0000000000008c18	andq	0x430(%rax), %rcx
0000000000008c1f	cmpq	$0x0, %rcx
0000000000008c23	movl	$0x1, %edx
0000000000008c28	movl	$0x2, %esi
0000000000008c2d	cmovnel	%edx, %esi
0000000000008c30	movw	%si, %di
0000000000008c33	movq	-0x18(%rbp), %rax
0000000000008c37	movw	%di, (%rax)
0000000000008c3a	jmp	0x8c5e
0000000000008c3f	leaq	0x613d5(%rip), %rdi ## literal pool for: "ZydisNodeHandlerAddressSize"
0000000000008c46	leaq	0x60c8d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008c4d	leaq	0x62970(%rip), %rcx ## literal pool for: "0"
0000000000008c54	movl	$0xfed, %edx
0000000000008c59	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008c5e	movl	$0x100000, %eax
0000000000008c63	addq	$0x30, %rsp
0000000000008c67	popq	%rbp
0000000000008c68	retq
0000000000008c69	nopl	(%rax)
_ZydisNodeHandlerVectorLength:
0000000000008c70	pushq	%rbp
0000000000008c71	movq	%rsp, %rbp
0000000000008c74	subq	$0x30, %rsp
0000000000008c78	movq	%rdi, -0x10(%rbp)
0000000000008c7c	movq	%rsi, -0x18(%rbp)
0000000000008c80	movq	%rdx, -0x20(%rbp)
0000000000008c84	cmpq	$0x0, -0x10(%rbp)
0000000000008c89	setne	%al
0000000000008c8c	xorb	$-0x1, %al
0000000000008c8e	andb	$0x1, %al
0000000000008c90	movzbl	%al, %ecx
0000000000008c93	movslq	%ecx, %rdx
0000000000008c96	cmpq	$0x0, %rdx
0000000000008c9a	je	0x8cbf
0000000000008ca0	leaq	0x61390(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008ca7	leaq	0x60c2c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008cae	leaq	0x60c5a(%rip), %rcx ## literal pool for: "context"
0000000000008cb5	movl	$0xff5, %edx
0000000000008cba	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008cbf	jmp	0x8cc4
0000000000008cc4	cmpq	$0x0, -0x18(%rbp)
0000000000008cc9	setne	%al
0000000000008ccc	xorb	$-0x1, %al
0000000000008cce	andb	$0x1, %al
0000000000008cd0	movzbl	%al, %ecx
0000000000008cd3	movslq	%ecx, %rdx
0000000000008cd6	cmpq	$0x0, %rdx
0000000000008cda	je	0x8cff
0000000000008ce0	leaq	0x61350(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008ce7	leaq	0x60bec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008cee	leaq	0x60c22(%rip), %rcx ## literal pool for: "instruction"
0000000000008cf5	movl	$0xff6, %edx
0000000000008cfa	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008cff	jmp	0x8d04
0000000000008d04	cmpq	$0x0, -0x20(%rbp)
0000000000008d09	setne	%al
0000000000008d0c	xorb	$-0x1, %al
0000000000008d0e	andb	$0x1, %al
0000000000008d10	movzbl	%al, %ecx
0000000000008d13	movslq	%ecx, %rdx
0000000000008d16	cmpq	$0x0, %rdx
0000000000008d1a	je	0x8d3f
0000000000008d20	leaq	0x61310(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008d27	leaq	0x60bac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008d2e	leaq	0x60e1f(%rip), %rcx ## literal pool for: "index"
0000000000008d35	movl	$0xff7, %edx
0000000000008d3a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008d3f	jmp	0x8d44
0000000000008d44	movq	-0x18(%rbp), %rax
0000000000008d48	movl	0xc(%rax), %ecx
0000000000008d4b	addl	$-0x2, %ecx
0000000000008d4e	movl	%ecx, %eax
0000000000008d50	subl	$0x3, %ecx
0000000000008d53	movq	%rax, -0x28(%rbp)
0000000000008d57	movl	%ecx, -0x2c(%rbp)
0000000000008d5a	ja	0x8ec8
0000000000008d60	leaq	0x1c1(%rip), %rax
0000000000008d67	movq	-0x28(%rbp), %rcx
0000000000008d6b	movslq	(%rax,%rcx,4), %rdx
0000000000008d6f	addq	%rax, %rdx
0000000000008d72	jmpq	*%rdx
0000000000008d74	movq	-0x18(%rbp), %rax
0000000000008d78	movq	0x430(%rax), %rax
0000000000008d7f	andq	$0x8, %rax
0000000000008d83	cmpq	$0x0, %rax
0000000000008d87	setne	%cl
0000000000008d8a	xorb	$-0x1, %cl
0000000000008d8d	andb	$0x1, %cl
0000000000008d90	movzbl	%cl, %edx
0000000000008d93	movslq	%edx, %rax
0000000000008d96	cmpq	$0x0, %rax
0000000000008d9a	je	0x8dbf
0000000000008da0	leaq	0x61290(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008da7	leaq	0x60b2c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008dae	leaq	0x60da5(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
0000000000008db5	movl	$0xffc, %edx
0000000000008dba	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008dbf	jmp	0x8dc4
0000000000008dc4	jmp	0x8ee7
0000000000008dc9	movq	-0x18(%rbp), %rax
0000000000008dcd	movq	0x430(%rax), %rax
0000000000008dd4	andq	$0x10, %rax
0000000000008dd8	cmpq	$0x0, %rax
0000000000008ddc	setne	%cl
0000000000008ddf	xorb	$-0x1, %cl
0000000000008de2	andb	$0x1, %cl
0000000000008de5	movzbl	%cl, %edx
0000000000008de8	movslq	%edx, %rax
0000000000008deb	cmpq	$0x0, %rax
0000000000008def	je	0x8e14
0000000000008df5	leaq	0x6123b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008dfc	leaq	0x60ad7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008e03	leaq	0x60d91(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
0000000000008e0a	movl	$0xfff, %edx
0000000000008e0f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008e14	jmp	0x8e19
0000000000008e19	jmp	0x8ee7
0000000000008e1e	movq	-0x18(%rbp), %rax
0000000000008e22	movq	0x430(%rax), %rax
0000000000008e29	andq	$0x20, %rax
0000000000008e2d	cmpq	$0x0, %rax
0000000000008e31	setne	%cl
0000000000008e34	xorb	$-0x1, %cl
0000000000008e37	andb	$0x1, %cl
0000000000008e3a	movzbl	%cl, %edx
0000000000008e3d	movslq	%edx, %rax
0000000000008e40	cmpq	$0x0, %rax
0000000000008e44	je	0x8e69
0000000000008e4a	leaq	0x611e6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008e51	leaq	0x60a82(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008e58	leaq	0x60d7f(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
0000000000008e5f	movl	$0x1002, %edx
0000000000008e64	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008e69	jmp	0x8e6e
0000000000008e6e	jmp	0x8ee7
0000000000008e73	movq	-0x18(%rbp), %rax
0000000000008e77	movq	0x430(%rax), %rax
0000000000008e7e	andq	$0x40, %rax
0000000000008e82	cmpq	$0x0, %rax
0000000000008e86	setne	%cl
0000000000008e89	xorb	$-0x1, %cl
0000000000008e8c	andb	$0x1, %cl
0000000000008e8f	movzbl	%cl, %edx
0000000000008e92	movslq	%edx, %rax
0000000000008e95	cmpq	$0x0, %rax
0000000000008e99	je	0x8ebe
0000000000008e9f	leaq	0x61191(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008ea6	leaq	0x60a2d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008ead	leaq	0x60d57(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000008eb4	movl	$0x1005, %edx
0000000000008eb9	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008ebe	jmp	0x8ec3
0000000000008ec3	jmp	0x8ee7
0000000000008ec8	leaq	0x61168(%rip), %rdi ## literal pool for: "ZydisNodeHandlerVectorLength"
0000000000008ecf	leaq	0x60a04(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008ed6	leaq	0x626e7(%rip), %rcx ## literal pool for: "0"
0000000000008edd	movl	$0x1008, %edx
0000000000008ee2	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008ee7	movq	-0x10(%rbp), %rax
0000000000008eeb	movzbl	0x2b(%rax), %ecx
0000000000008eef	movw	%cx, %dx
0000000000008ef2	movq	-0x20(%rbp), %rax
0000000000008ef6	movw	%dx, (%rax)
0000000000008ef9	movq	-0x20(%rbp), %rax
0000000000008efd	movzwl	(%rax), %ecx
0000000000008f00	cmpl	$0x3, %ecx
0000000000008f03	jne	0x8f15
0000000000008f09	movl	$0x80200001, -0x4(%rbp)
0000000000008f10	jmp	0x8f1c
0000000000008f15	movl	$0x100000, -0x4(%rbp)
0000000000008f1c	movl	-0x4(%rbp), %eax
0000000000008f1f	addq	$0x30, %rsp
0000000000008f23	popq	%rbp
0000000000008f24	retq
0000000000008f25	nopl	(%rax)
0000000000008f28	.byte 0x4c #bad opcode
0000000000008f29	.byte 0xfe #bad opcode
0000000000008f2a	.byte 0xff #bad opcode
0000000000008f2b	jmpq	*-0x9000002(%rcx)
0000000000008f31	.byte 0xfe #bad opcode
0000000000008f32	.byte 0xff #bad opcode
0000000000008f33	decl	-0x1(%rbx)
0000000000008f36	.byte 0xff #bad opcode
0000000000008f37	decl	(%rdi)
0000000000008f39	.byte 0x1f #bad opcode
0000000000008f3a	testb	%al, (%rax)
0000000000008f3c	addb	%al, (%rax)
0000000000008f3e	addb	%al, (%rax)
_ZydisNodeHandlerRexW:
0000000000008f40	pushq	%rbp
0000000000008f41	movq	%rsp, %rbp
0000000000008f44	subq	$0x30, %rsp
0000000000008f48	movq	%rdi, -0x8(%rbp)
0000000000008f4c	movq	%rsi, -0x10(%rbp)
0000000000008f50	movq	%rdx, -0x18(%rbp)
0000000000008f54	cmpq	$0x0, -0x8(%rbp)
0000000000008f59	setne	%al
0000000000008f5c	xorb	$-0x1, %al
0000000000008f5e	andb	$0x1, %al
0000000000008f60	movzbl	%al, %ecx
0000000000008f63	movslq	%ecx, %rdx
0000000000008f66	cmpq	$0x0, %rdx
0000000000008f6a	je	0x8f8f
0000000000008f70	leaq	0x610dd(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008f77	leaq	0x6095c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008f7e	leaq	0x6098a(%rip), %rcx ## literal pool for: "context"
0000000000008f85	movl	$0x1015, %edx
0000000000008f8a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008f8f	jmp	0x8f94
0000000000008f94	cmpq	$0x0, -0x10(%rbp)
0000000000008f99	setne	%al
0000000000008f9c	xorb	$-0x1, %al
0000000000008f9e	andb	$0x1, %al
0000000000008fa0	movzbl	%al, %ecx
0000000000008fa3	movslq	%ecx, %rdx
0000000000008fa6	cmpq	$0x0, %rdx
0000000000008faa	je	0x8fcf
0000000000008fb0	leaq	0x6109d(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008fb7	leaq	0x6091c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008fbe	leaq	0x60952(%rip), %rcx ## literal pool for: "instruction"
0000000000008fc5	movl	$0x1016, %edx
0000000000008fca	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000008fcf	jmp	0x8fd4
0000000000008fd4	cmpq	$0x0, -0x18(%rbp)
0000000000008fd9	setne	%al
0000000000008fdc	xorb	$-0x1, %al
0000000000008fde	andb	$0x1, %al
0000000000008fe0	movzbl	%al, %ecx
0000000000008fe3	movslq	%ecx, %rdx
0000000000008fe6	cmpq	$0x0, %rdx
0000000000008fea	je	0x900f
0000000000008ff0	leaq	0x6105d(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000008ff7	leaq	0x608dc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000008ffe	leaq	0x60b4f(%rip), %rcx ## literal pool for: "index"
0000000000009005	movl	$0x1017, %edx
000000000000900a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000900f	jmp	0x9014
0000000000009014	movq	-0x10(%rbp), %rax
0000000000009018	movl	0xc(%rax), %ecx
000000000000901b	movl	%ecx, %eax
000000000000901d	movq	%rax, %rdx
0000000000009020	subq	$0x5, %rdx
0000000000009024	movq	%rax, -0x20(%rbp)
0000000000009028	movq	%rdx, -0x28(%rbp)
000000000000902c	ja	0x919f
0000000000009032	leaq	0x1a3(%rip), %rax
0000000000009039	movq	-0x20(%rbp), %rcx
000000000000903d	movslq	(%rax,%rcx,4), %rdx
0000000000009041	addq	%rax, %rdx
0000000000009044	jmpq	*%rdx
0000000000009046	jmp	0x91be
000000000000904b	movq	-0x10(%rbp), %rax
000000000000904f	movq	0x430(%rax), %rax
0000000000009056	andq	$0x8, %rax
000000000000905a	cmpq	$0x0, %rax
000000000000905e	setne	%cl
0000000000009061	xorb	$-0x1, %cl
0000000000009064	andb	$0x1, %cl
0000000000009067	movzbl	%cl, %edx
000000000000906a	movslq	%edx, %rax
000000000000906d	cmpq	$0x0, %rax
0000000000009071	je	0x9096
0000000000009077	leaq	0x60fd6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
000000000000907e	leaq	0x60855(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009085	leaq	0x60ace(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
000000000000908c	movl	$0x101f, %edx
0000000000009091	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009096	jmp	0x909b
000000000000909b	jmp	0x91be
00000000000090a0	movq	-0x10(%rbp), %rax
00000000000090a4	movq	0x430(%rax), %rax
00000000000090ab	andq	$0x10, %rax
00000000000090af	cmpq	$0x0, %rax
00000000000090b3	setne	%cl
00000000000090b6	xorb	$-0x1, %cl
00000000000090b9	andb	$0x1, %cl
00000000000090bc	movzbl	%cl, %edx
00000000000090bf	movslq	%edx, %rax
00000000000090c2	cmpq	$0x0, %rax
00000000000090c6	je	0x90eb
00000000000090cc	leaq	0x60f81(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
00000000000090d3	leaq	0x60800(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000090da	leaq	0x60aba(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
00000000000090e1	movl	$0x1022, %edx
00000000000090e6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000090eb	jmp	0x90f0
00000000000090f0	jmp	0x91be
00000000000090f5	movq	-0x10(%rbp), %rax
00000000000090f9	movq	0x430(%rax), %rax
0000000000009100	andq	$0x20, %rax
0000000000009104	cmpq	$0x0, %rax
0000000000009108	setne	%cl
000000000000910b	xorb	$-0x1, %cl
000000000000910e	andb	$0x1, %cl
0000000000009111	movzbl	%cl, %edx
0000000000009114	movslq	%edx, %rax
0000000000009117	cmpq	$0x0, %rax
000000000000911b	je	0x9140
0000000000009121	leaq	0x60f2c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
0000000000009128	leaq	0x607ab(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000912f	leaq	0x60aa8(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
0000000000009136	movl	$0x1025, %edx
000000000000913b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009140	jmp	0x9145
0000000000009145	jmp	0x91be
000000000000914a	movq	-0x10(%rbp), %rax
000000000000914e	movq	0x430(%rax), %rax
0000000000009155	andq	$0x40, %rax
0000000000009159	cmpq	$0x0, %rax
000000000000915d	setne	%cl
0000000000009160	xorb	$-0x1, %cl
0000000000009163	andb	$0x1, %cl
0000000000009166	movzbl	%cl, %edx
0000000000009169	movslq	%edx, %rax
000000000000916c	cmpq	$0x0, %rax
0000000000009170	je	0x9195
0000000000009176	leaq	0x60ed7(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
000000000000917d	leaq	0x60756(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009184	leaq	0x60a80(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
000000000000918b	movl	$0x1028, %edx
0000000000009190	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009195	jmp	0x919a
000000000000919a	jmp	0x91be
000000000000919f	leaq	0x60eae(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexW"
00000000000091a6	leaq	0x6072d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000091ad	leaq	0x62410(%rip), %rcx ## literal pool for: "0"
00000000000091b4	movl	$0x102b, %edx
00000000000091b9	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000091be	movq	-0x8(%rbp), %rax
00000000000091c2	movzbl	0x26(%rax), %ecx
00000000000091c6	movw	%cx, %dx
00000000000091c9	movq	-0x18(%rbp), %rax
00000000000091cd	movw	%dx, (%rax)
00000000000091d0	movl	$0x100000, %eax
00000000000091d5	addq	$0x30, %rsp
00000000000091d9	popq	%rbp
00000000000091da	retq
00000000000091db	nop
00000000000091dc	pushq	$-0x2
00000000000091de	.byte 0xff #bad opcode
00000000000091df	incl	%ebx
00000000000091e1	.byte 0xff #bad opcode
00000000000091e2	.byte 0xff #bad opcode
00000000000091e3	ljmpl	*-0x2(%rdi)
00000000000091e6	.byte 0xff #bad opcode
00000000000091e7	incl	%esp
00000000000091e9	.byte 0xfe #bad opcode
00000000000091ea	.byte 0xff #bad opcode
00000000000091eb	lcalll	*(%rcx)
00000000000091ed	.byte 0xff #bad opcode
00000000000091ee	.byte 0xff #bad opcode
00000000000091ef	ljmpl	*-0x1(%rsi)
00000000000091f2	.byte 0xff #bad opcode
00000000000091f3	jmpq	*0x2e(%rsi)
00000000000091f6	nopl	(%rax,%rax)
00000000000091fe	nop
_ZydisNodeHandlerRexB:
0000000000009200	pushq	%rbp
0000000000009201	movq	%rsp, %rbp
0000000000009204	subq	$0x30, %rsp
0000000000009208	movq	%rdi, -0x8(%rbp)
000000000000920c	movq	%rsi, -0x10(%rbp)
0000000000009210	movq	%rdx, -0x18(%rbp)
0000000000009214	cmpq	$0x0, -0x8(%rbp)
0000000000009219	setne	%al
000000000000921c	xorb	$-0x1, %al
000000000000921e	andb	$0x1, %al
0000000000009220	movzbl	%al, %ecx
0000000000009223	movslq	%ecx, %rdx
0000000000009226	cmpq	$0x0, %rdx
000000000000922a	je	0x924f
0000000000009230	leaq	0x60e32(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000009237	leaq	0x6069c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000923e	leaq	0x606ca(%rip), %rcx ## literal pool for: "context"
0000000000009245	movl	$0x1034, %edx
000000000000924a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000924f	jmp	0x9254
0000000000009254	cmpq	$0x0, -0x10(%rbp)
0000000000009259	setne	%al
000000000000925c	xorb	$-0x1, %al
000000000000925e	andb	$0x1, %al
0000000000009260	movzbl	%al, %ecx
0000000000009263	movslq	%ecx, %rdx
0000000000009266	cmpq	$0x0, %rdx
000000000000926a	je	0x928f
0000000000009270	leaq	0x60df2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000009277	leaq	0x6065c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000927e	leaq	0x60692(%rip), %rcx ## literal pool for: "instruction"
0000000000009285	movl	$0x1035, %edx
000000000000928a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000928f	jmp	0x9294
0000000000009294	cmpq	$0x0, -0x18(%rbp)
0000000000009299	setne	%al
000000000000929c	xorb	$-0x1, %al
000000000000929e	andb	$0x1, %al
00000000000092a0	movzbl	%al, %ecx
00000000000092a3	movslq	%ecx, %rdx
00000000000092a6	cmpq	$0x0, %rdx
00000000000092aa	je	0x92cf
00000000000092b0	leaq	0x60db2(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
00000000000092b7	leaq	0x6061c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000092be	leaq	0x6088f(%rip), %rcx ## literal pool for: "index"
00000000000092c5	movl	$0x1036, %edx
00000000000092ca	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000092cf	jmp	0x92d4
00000000000092d4	movq	-0x10(%rbp), %rax
00000000000092d8	movl	0xc(%rax), %ecx
00000000000092db	movl	%ecx, %eax
00000000000092dd	movq	%rax, %rdx
00000000000092e0	subq	$0x5, %rdx
00000000000092e4	movq	%rax, -0x20(%rbp)
00000000000092e8	movq	%rdx, -0x28(%rbp)
00000000000092ec	ja	0x945f
00000000000092f2	leaq	0x1a3(%rip), %rax
00000000000092f9	movq	-0x20(%rbp), %rcx
00000000000092fd	movslq	(%rax,%rcx,4), %rdx
0000000000009301	addq	%rax, %rdx
0000000000009304	jmpq	*%rdx
0000000000009306	jmp	0x947e
000000000000930b	movq	-0x10(%rbp), %rax
000000000000930f	movq	0x430(%rax), %rax
0000000000009316	andq	$0x8, %rax
000000000000931a	cmpq	$0x0, %rax
000000000000931e	setne	%cl
0000000000009321	xorb	$-0x1, %cl
0000000000009324	andb	$0x1, %cl
0000000000009327	movzbl	%cl, %edx
000000000000932a	movslq	%edx, %rax
000000000000932d	cmpq	$0x0, %rax
0000000000009331	je	0x9356
0000000000009337	leaq	0x60d2b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
000000000000933e	leaq	0x60595(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009345	leaq	0x6080e(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000008"
000000000000934c	movl	$0x103e, %edx
0000000000009351	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009356	jmp	0x935b
000000000000935b	jmp	0x947e
0000000000009360	movq	-0x10(%rbp), %rax
0000000000009364	movq	0x430(%rax), %rax
000000000000936b	andq	$0x10, %rax
000000000000936f	cmpq	$0x0, %rax
0000000000009373	setne	%cl
0000000000009376	xorb	$-0x1, %cl
0000000000009379	andb	$0x1, %cl
000000000000937c	movzbl	%cl, %edx
000000000000937f	movslq	%edx, %rax
0000000000009382	cmpq	$0x0, %rax
0000000000009386	je	0x93ab
000000000000938c	leaq	0x60cd6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000009393	leaq	0x60540(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000939a	leaq	0x607fa(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000010"
00000000000093a1	movl	$0x1041, %edx
00000000000093a6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000093ab	jmp	0x93b0
00000000000093b0	jmp	0x947e
00000000000093b5	movq	-0x10(%rbp), %rax
00000000000093b9	movq	0x430(%rax), %rax
00000000000093c0	andq	$0x20, %rax
00000000000093c4	cmpq	$0x0, %rax
00000000000093c8	setne	%cl
00000000000093cb	xorb	$-0x1, %cl
00000000000093ce	andb	$0x1, %cl
00000000000093d1	movzbl	%cl, %edx
00000000000093d4	movslq	%edx, %rax
00000000000093d7	cmpq	$0x0, %rax
00000000000093db	je	0x9400
00000000000093e1	leaq	0x60c81(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
00000000000093e8	leaq	0x604eb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000093ef	leaq	0x607e8(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
00000000000093f6	movl	$0x1044, %edx
00000000000093fb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009400	jmp	0x9405
0000000000009405	jmp	0x947e
000000000000940a	movq	-0x10(%rbp), %rax
000000000000940e	movq	0x430(%rax), %rax
0000000000009415	andq	$0x40, %rax
0000000000009419	cmpq	$0x0, %rax
000000000000941d	setne	%cl
0000000000009420	xorb	$-0x1, %cl
0000000000009423	andb	$0x1, %cl
0000000000009426	movzbl	%cl, %edx
0000000000009429	movslq	%edx, %rax
000000000000942c	cmpq	$0x0, %rax
0000000000009430	je	0x9455
0000000000009436	leaq	0x60c2c(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
000000000000943d	leaq	0x60496(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009444	leaq	0x607c0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
000000000000944b	movl	$0x1047, %edx
0000000000009450	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009455	jmp	0x945a
000000000000945a	jmp	0x947e
000000000000945f	leaq	0x60c03(%rip), %rdi ## literal pool for: "ZydisNodeHandlerRexB"
0000000000009466	leaq	0x6046d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000946d	leaq	0x62150(%rip), %rcx ## literal pool for: "0"
0000000000009474	movl	$0x104a, %edx
0000000000009479	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000947e	movq	-0x8(%rbp), %rax
0000000000009482	movzbl	0x29(%rax), %ecx
0000000000009486	movw	%cx, %dx
0000000000009489	movq	-0x18(%rbp), %rax
000000000000948d	movw	%dx, (%rax)
0000000000009490	movl	$0x100000, %eax
0000000000009495	addq	$0x30, %rsp
0000000000009499	popq	%rbp
000000000000949a	retq
000000000000949b	nop
000000000000949c	pushq	$-0x2
000000000000949e	.byte 0xff #bad opcode
000000000000949f	incl	%ebx
00000000000094a1	.byte 0xff #bad opcode
00000000000094a2	.byte 0xff #bad opcode
00000000000094a3	ljmpl	*-0x2(%rdi)
00000000000094a6	.byte 0xff #bad opcode
00000000000094a7	incl	%esp
00000000000094a9	.byte 0xfe #bad opcode
00000000000094aa	.byte 0xff #bad opcode
00000000000094ab	lcalll	*(%rcx)
00000000000094ad	.byte 0xff #bad opcode
00000000000094ae	.byte 0xff #bad opcode
00000000000094af	ljmpl	*-0x1(%rsi)
00000000000094b2	.byte 0xff #bad opcode
00000000000094b3	jmpq	*0x2e(%rsi)
00000000000094b6	nopl	(%rax,%rax)
00000000000094be	nop
_ZydisNodeHandlerEvexB:
00000000000094c0	pushq	%rbp
00000000000094c1	movq	%rsp, %rbp
00000000000094c4	subq	$0x10, %rsp
00000000000094c8	movq	%rdi, -0x8(%rbp)
00000000000094cc	movq	%rsi, -0x10(%rbp)
00000000000094d0	cmpq	$0x0, -0x8(%rbp)
00000000000094d5	setne	%al
00000000000094d8	xorb	$-0x1, %al
00000000000094da	andb	$0x1, %al
00000000000094dc	movzbl	%al, %ecx
00000000000094df	movslq	%ecx, %rsi
00000000000094e2	cmpq	$0x0, %rsi
00000000000094e6	je	0x950b
00000000000094ec	leaq	0x60b8b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
00000000000094f3	leaq	0x603e0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000094fa	leaq	0x60416(%rip), %rcx ## literal pool for: "instruction"
0000000000009501	movl	$0x1053, %edx
0000000000009506	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000950b	jmp	0x9510
0000000000009510	cmpq	$0x0, -0x10(%rbp)
0000000000009515	setne	%al
0000000000009518	xorb	$-0x1, %al
000000000000951a	andb	$0x1, %al
000000000000951c	movzbl	%al, %ecx
000000000000951f	movslq	%ecx, %rdx
0000000000009522	cmpq	$0x0, %rdx
0000000000009526	je	0x954b
000000000000952c	leaq	0x60b4b(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
0000000000009533	leaq	0x603a0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000953a	leaq	0x60613(%rip), %rcx ## literal pool for: "index"
0000000000009541	movl	$0x1054, %edx
0000000000009546	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000954b	jmp	0x9550
0000000000009550	movq	-0x8(%rbp), %rax
0000000000009554	cmpl	$0x4, 0xc(%rax)
0000000000009558	sete	%cl
000000000000955b	xorb	$-0x1, %cl
000000000000955e	andb	$0x1, %cl
0000000000009561	movzbl	%cl, %edx
0000000000009564	movslq	%edx, %rax
0000000000009567	cmpq	$0x0, %rax
000000000000956b	je	0x9590
0000000000009571	leaq	0x60b06(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
0000000000009578	leaq	0x6035b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000957f	leaq	0x60b0e(%rip), %rcx ## literal pool for: "instruction->encoding == ZYDIS_INSTRUCTION_ENCODING_EVEX"
0000000000009586	movl	$0x1056, %edx
000000000000958b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009590	jmp	0x9595
0000000000009595	movq	-0x8(%rbp), %rax
0000000000009599	movq	0x430(%rax), %rax
00000000000095a0	andq	$0x20, %rax
00000000000095a4	cmpq	$0x0, %rax
00000000000095a8	setne	%cl
00000000000095ab	xorb	$-0x1, %cl
00000000000095ae	andb	$0x1, %cl
00000000000095b1	movzbl	%cl, %edx
00000000000095b4	movslq	%edx, %rax
00000000000095b7	cmpq	$0x0, %rax
00000000000095bb	je	0x95e0
00000000000095c1	leaq	0x60ab6(%rip), %rdi ## literal pool for: "ZydisNodeHandlerEvexB"
00000000000095c8	leaq	0x6030b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000095cf	leaq	0x60608(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000020"
00000000000095d6	movl	$0x1057, %edx
00000000000095db	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000095e0	jmp	0x95e5
00000000000095e5	movq	-0x8(%rbp), %rax
00000000000095e9	movzbl	0x567(%rax), %ecx
00000000000095f0	movw	%cx, %dx
00000000000095f3	movq	-0x10(%rbp), %rax
00000000000095f7	movw	%dx, (%rax)
00000000000095fa	movl	$0x100000, %eax
00000000000095ff	addq	$0x10, %rsp
0000000000009603	popq	%rbp
0000000000009604	retq
0000000000009605	nopw	%cs:(%rax,%rax)
000000000000960f	nop
_ZydisNodeHandlerMvexE:
0000000000009610	pushq	%rbp
0000000000009611	movq	%rsp, %rbp
0000000000009614	subq	$0x10, %rsp
0000000000009618	movq	%rdi, -0x8(%rbp)
000000000000961c	movq	%rsi, -0x10(%rbp)
0000000000009620	cmpq	$0x0, -0x8(%rbp)
0000000000009625	setne	%al
0000000000009628	xorb	$-0x1, %al
000000000000962a	andb	$0x1, %al
000000000000962c	movzbl	%al, %ecx
000000000000962f	movslq	%ecx, %rsi
0000000000009632	cmpq	$0x0, %rsi
0000000000009636	je	0x965b
000000000000963c	leaq	0x60a8a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009643	leaq	0x60290(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000964a	leaq	0x602c6(%rip), %rcx ## literal pool for: "instruction"
0000000000009651	movl	$0x1060, %edx
0000000000009656	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000965b	jmp	0x9660
0000000000009660	cmpq	$0x0, -0x10(%rbp)
0000000000009665	setne	%al
0000000000009668	xorb	$-0x1, %al
000000000000966a	andb	$0x1, %al
000000000000966c	movzbl	%al, %ecx
000000000000966f	movslq	%ecx, %rdx
0000000000009672	cmpq	$0x0, %rdx
0000000000009676	je	0x969b
000000000000967c	leaq	0x60a4a(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009683	leaq	0x60250(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000968a	leaq	0x604c3(%rip), %rcx ## literal pool for: "index"
0000000000009691	movl	$0x1061, %edx
0000000000009696	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000969b	jmp	0x96a0
00000000000096a0	movq	-0x8(%rbp), %rax
00000000000096a4	cmpl	$0x5, 0xc(%rax)
00000000000096a8	sete	%cl
00000000000096ab	xorb	$-0x1, %cl
00000000000096ae	andb	$0x1, %cl
00000000000096b1	movzbl	%cl, %edx
00000000000096b4	movslq	%edx, %rax
00000000000096b7	cmpq	$0x0, %rax
00000000000096bb	je	0x96e0
00000000000096c1	leaq	0x60a05(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
00000000000096c8	leaq	0x6020b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000096cf	leaq	0x60a0d(%rip), %rcx ## literal pool for: "instruction->encoding == ZYDIS_INSTRUCTION_ENCODING_MVEX"
00000000000096d6	movl	$0x1063, %edx
00000000000096db	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000096e0	jmp	0x96e5
00000000000096e5	movq	-0x8(%rbp), %rax
00000000000096e9	movq	0x430(%rax), %rax
00000000000096f0	andq	$0x40, %rax
00000000000096f4	cmpq	$0x0, %rax
00000000000096f8	setne	%cl
00000000000096fb	xorb	$-0x1, %cl
00000000000096fe	andb	$0x1, %cl
0000000000009701	movzbl	%cl, %edx
0000000000009704	movslq	%edx, %rax
0000000000009707	cmpq	$0x0, %rax
000000000000970b	je	0x9730
0000000000009711	leaq	0x609b5(%rip), %rdi ## literal pool for: "ZydisNodeHandlerMvexE"
0000000000009718	leaq	0x601bb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000971f	leaq	0x604e5(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000040"
0000000000009726	movl	$0x1064, %edx
000000000000972b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009730	jmp	0x9735
0000000000009735	movq	-0x8(%rbp), %rax
0000000000009739	movzbl	0x573(%rax), %ecx
0000000000009740	movw	%cx, %dx
0000000000009743	movq	-0x10(%rbp), %rax
0000000000009747	movw	%dx, (%rax)
000000000000974a	movl	$0x100000, %eax
000000000000974f	addq	$0x10, %rsp
0000000000009753	popq	%rbp
0000000000009754	retq
0000000000009755	nopw	%cs:(%rax,%rax)
000000000000975f	nop
_ZydisSetEffectiveOperandWidth:
0000000000009760	pushq	%rbp
0000000000009761	movq	%rsp, %rbp
0000000000009764	subq	$0x40, %rsp
0000000000009768	movq	%rdi, -0x8(%rbp)
000000000000976c	movq	%rsi, -0x10(%rbp)
0000000000009770	movq	%rdx, -0x18(%rbp)
0000000000009774	cmpq	$0x0, -0x8(%rbp)
0000000000009779	setne	%al
000000000000977c	xorb	$-0x1, %al
000000000000977e	andb	$0x1, %al
0000000000009780	movzbl	%al, %ecx
0000000000009783	movslq	%ecx, %rdx
0000000000009786	cmpq	$0x0, %rdx
000000000000978a	je	0x97af
0000000000009790	leaq	0x60985(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009797	leaq	0x6013c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000979e	leaq	0x6016a(%rip), %rcx ## literal pool for: "context"
00000000000097a5	movl	$0xd3a, %edx
00000000000097aa	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000097af	jmp	0x97b4
00000000000097b4	cmpq	$0x0, -0x10(%rbp)
00000000000097b9	setne	%al
00000000000097bc	xorb	$-0x1, %al
00000000000097be	andb	$0x1, %al
00000000000097c0	movzbl	%al, %ecx
00000000000097c3	movslq	%ecx, %rdx
00000000000097c6	cmpq	$0x0, %rdx
00000000000097ca	je	0x97ef
00000000000097d0	leaq	0x60945(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
00000000000097d7	leaq	0x600fc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000097de	leaq	0x60132(%rip), %rcx ## literal pool for: "instruction"
00000000000097e5	movl	$0xd3b, %edx
00000000000097ea	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000097ef	jmp	0x97f4
00000000000097f4	cmpq	$0x0, -0x18(%rbp)
00000000000097f9	setne	%al
00000000000097fc	xorb	$-0x1, %al
00000000000097fe	andb	$0x1, %al
0000000000009800	movzbl	%al, %ecx
0000000000009803	movslq	%ecx, %rdx
0000000000009806	cmpq	$0x0, %rdx
000000000000980a	je	0x982f
0000000000009810	leaq	0x60905(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009817	leaq	0x600bc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000981e	leaq	0x60915(%rip), %rcx ## literal pool for: "definition"
0000000000009825	movl	$0xd3c, %edx
000000000000982a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000982f	jmp	0x9834
0000000000009834	movq	-0x10(%rbp), %rax
0000000000009838	movq	0x430(%rax), %rax
000000000000983f	shrq	$0x22, %rax
0000000000009843	movl	%eax, %ecx
0000000000009845	andl	$0x1, %ecx
0000000000009848	movb	%cl, %dl
000000000000984a	movb	%dl, -0x19(%rbp)
000000000000984d	movq	-0x8(%rbp), %rax
0000000000009851	movq	(%rax), %rax
0000000000009854	movl	(%rax), %ecx
0000000000009856	testl	%ecx, %ecx
0000000000009858	movl	%ecx, -0x20(%rbp)
000000000000985b	je	0x98db
0000000000009861	jmp	0x9866
0000000000009866	movl	-0x20(%rbp), %eax
0000000000009869	subl	$0x1, %eax
000000000000986c	movl	%eax, -0x24(%rbp)
000000000000986f	je	0x98ca
0000000000009875	jmp	0x987a
000000000000987a	movl	-0x20(%rbp), %eax
000000000000987d	subl	$0x2, %eax
0000000000009880	movl	%eax, -0x28(%rbp)
0000000000009883	je	0x98b9
0000000000009889	jmp	0x988e
000000000000988e	movl	-0x20(%rbp), %eax
0000000000009891	subl	$0x3, %eax
0000000000009894	movl	%eax, -0x2c(%rbp)
0000000000009897	je	0x98ca
000000000000989d	jmp	0x98a2
00000000000098a2	movl	-0x20(%rbp), %eax
00000000000098a5	addl	$-0x4, %eax
00000000000098a8	subl	$0x1, %eax
00000000000098ab	movl	%eax, -0x30(%rbp)
00000000000098ae	ja	0x9906
00000000000098b4	jmp	0x98b9
00000000000098b9	movzbl	-0x19(%rbp), %eax
00000000000098bd	addl	$0x0, %eax
00000000000098c0	movb	%al, %cl
00000000000098c2	movb	%cl, -0x19(%rbp)
00000000000098c5	jmp	0x9925
00000000000098ca	movzbl	-0x19(%rbp), %eax
00000000000098ce	addl	$0x2, %eax
00000000000098d1	movb	%al, %cl
00000000000098d3	movb	%cl, -0x19(%rbp)
00000000000098d6	jmp	0x9925
00000000000098db	movzbl	-0x19(%rbp), %eax
00000000000098df	addl	$0x4, %eax
00000000000098e2	movb	%al, %cl
00000000000098e4	movb	%cl, -0x19(%rbp)
00000000000098e7	movq	-0x8(%rbp), %rdx
00000000000098eb	movzbl	0x26(%rdx), %eax
00000000000098ef	andl	$0x1, %eax
00000000000098f2	shll	$0x1, %eax
00000000000098f5	movzbl	-0x19(%rbp), %esi
00000000000098f9	addl	%eax, %esi
00000000000098fb	movb	%sil, %cl
00000000000098fe	movb	%cl, -0x19(%rbp)
0000000000009901	jmp	0x9925
0000000000009906	leaq	0x6080f(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
000000000000990d	leaq	0x5ffc6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009914	leaq	0x61ca9(%rip), %rcx ## literal pool for: "0"
000000000000991b	movl	$0xdac, %edx
0000000000009920	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009925	movq	-0x18(%rbp), %rax
0000000000009929	movq	(%rax), %rax
000000000000992c	shrq	$0x1e, %rax
0000000000009930	movb	%al, %cl
0000000000009932	andb	$0x7, %cl
0000000000009935	movzbl	%cl, %edx
0000000000009938	movl	%edx, %eax
000000000000993a	cmpq	$0x8, %rax
000000000000993e	setb	%cl
0000000000009941	xorb	$-0x1, %cl
0000000000009944	andb	$0x1, %cl
0000000000009947	movzbl	%cl, %edx
000000000000994a	movslq	%edx, %rax
000000000000994d	cmpq	$0x0, %rax
0000000000009951	je	0x9976
0000000000009957	leaq	0x607be(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
000000000000995e	leaq	0x5ff75(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009965	leaq	0x607d9(%rip), %rcx ## literal pool for: "definition->operand_size_map < (sizeof(operand_size_map) / sizeof((operand_size_map)[0]))"
000000000000996c	movl	$0xdaf, %edx
0000000000009971	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009976	jmp	0x997b
000000000000997b	movzbl	-0x19(%rbp), %eax
000000000000997f	movl	%eax, %ecx
0000000000009981	cmpq	$0x8, %rcx
0000000000009985	setb	%dl
0000000000009988	xorb	$-0x1, %dl
000000000000998b	andb	$0x1, %dl
000000000000998e	movzbl	%dl, %eax
0000000000009991	movslq	%eax, %rcx
0000000000009994	cmpq	$0x0, %rcx
0000000000009998	je	0x99bd
000000000000999e	leaq	0x60777(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
00000000000099a5	leaq	0x5ff2e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000099ac	leaq	0x607ec(%rip), %rcx ## literal pool for: "index < (sizeof(operand_size_map[definition->operand_size_map]) / sizeof((operand_size_map[definition->operand_size_map])[0]))"
00000000000099b3	movl	$0xdb0, %edx
00000000000099b8	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000099bd	jmp	0x99c2
00000000000099c2	movq	-0x18(%rbp), %rax
00000000000099c6	movq	(%rax), %rax
00000000000099c9	shrq	$0x1b, %rax
00000000000099cd	movl	%eax, %ecx
00000000000099cf	andl	$0x38, %ecx
00000000000099d2	movl	%ecx, %eax
00000000000099d4	leaq	_ZydisSetEffectiveOperandWidth.operand_size_map(%rip), %rdx
00000000000099db	addq	%rax, %rdx
00000000000099de	movzbl	-0x19(%rbp), %ecx
00000000000099e2	movl	%ecx, %eax
00000000000099e4	movb	(%rax,%rdx), %sil
00000000000099e8	movq	-0x10(%rbp), %rax
00000000000099ec	movb	%sil, 0x16(%rax)
00000000000099f0	movq	-0x10(%rbp), %rax
00000000000099f4	movzbl	0x16(%rax), %ecx
00000000000099f8	movl	%ecx, %edi
00000000000099fa	subl	$0x10, %edi
00000000000099fd	movl	%ecx, -0x34(%rbp)
0000000000009a00	movl	%edi, -0x38(%rbp)
0000000000009a03	je	0x9a36
0000000000009a09	jmp	0x9a0e
0000000000009a0e	movl	-0x34(%rbp), %eax
0000000000009a11	subl	$0x20, %eax
0000000000009a14	movl	%eax, -0x3c(%rbp)
0000000000009a17	je	0x9a43
0000000000009a1d	jmp	0x9a22
0000000000009a22	movl	-0x34(%rbp), %eax
0000000000009a25	subl	$0x40, %eax
0000000000009a28	movl	%eax, -0x40(%rbp)
0000000000009a2b	je	0x9a50
0000000000009a31	jmp	0x9a5d
0000000000009a36	movq	-0x8(%rbp), %rax
0000000000009a3a	movb	$0x0, 0x24(%rax)
0000000000009a3e	jmp	0x9a7c
0000000000009a43	movq	-0x8(%rbp), %rax
0000000000009a47	movb	$0x1, 0x24(%rax)
0000000000009a4b	jmp	0x9a7c
0000000000009a50	movq	-0x8(%rbp), %rax
0000000000009a54	movb	$0x2, 0x24(%rax)
0000000000009a58	jmp	0x9a7c
0000000000009a5d	leaq	0x606b8(%rip), %rdi ## literal pool for: "ZydisSetEffectiveOperandWidth"
0000000000009a64	leaq	0x5fe6f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009a6b	leaq	0x61b52(%rip), %rcx ## literal pool for: "0"
0000000000009a72	movl	$0xdc0, %edx
0000000000009a77	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009a7c	movq	-0x18(%rbp), %rax
0000000000009a80	movq	(%rax), %rax
0000000000009a83	shrq	$0x1e, %rax
0000000000009a87	movb	%al, %cl
0000000000009a89	andb	$0x7, %cl
0000000000009a8c	movzbl	%cl, %edx
0000000000009a8f	cmpl	$0x1, %edx
0000000000009a92	jne	0x9aa0
0000000000009a98	movq	-0x10(%rbp), %rax
0000000000009a9c	movb	$0x8, 0x16(%rax)
0000000000009aa0	addq	$0x40, %rsp
0000000000009aa4	popq	%rbp
0000000000009aa5	retq
0000000000009aa6	nopw	%cs:(%rax,%rax)
_ZydisSetEffectiveAddressWidth:
0000000000009ab0	pushq	%rbp
0000000000009ab1	movq	%rsp, %rbp
0000000000009ab4	subq	$0x40, %rsp
0000000000009ab8	movq	%rdi, -0x8(%rbp)
0000000000009abc	movq	%rsi, -0x10(%rbp)
0000000000009ac0	movq	%rdx, -0x18(%rbp)
0000000000009ac4	cmpq	$0x0, -0x8(%rbp)
0000000000009ac9	setne	%al
0000000000009acc	xorb	$-0x1, %al
0000000000009ace	andb	$0x1, %al
0000000000009ad0	movzbl	%al, %ecx
0000000000009ad3	movslq	%ecx, %rdx
0000000000009ad6	cmpq	$0x0, %rdx
0000000000009ada	je	0x9aff
0000000000009ae0	leaq	0x60737(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009ae7	leaq	0x5fdec(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009aee	leaq	0x5fe1a(%rip), %rcx ## literal pool for: "context"
0000000000009af5	movl	$0xdd4, %edx
0000000000009afa	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009aff	jmp	0x9b04
0000000000009b04	cmpq	$0x0, -0x10(%rbp)
0000000000009b09	setne	%al
0000000000009b0c	xorb	$-0x1, %al
0000000000009b0e	andb	$0x1, %al
0000000000009b10	movzbl	%al, %ecx
0000000000009b13	movslq	%ecx, %rdx
0000000000009b16	cmpq	$0x0, %rdx
0000000000009b1a	je	0x9b3f
0000000000009b20	leaq	0x606f7(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009b27	leaq	0x5fdac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009b2e	leaq	0x5fde2(%rip), %rcx ## literal pool for: "instruction"
0000000000009b35	movl	$0xdd5, %edx
0000000000009b3a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009b3f	jmp	0x9b44
0000000000009b44	movq	-0x10(%rbp), %rax
0000000000009b48	movq	0x430(%rax), %rax
0000000000009b4f	shrq	$0x23, %rax
0000000000009b53	movl	%eax, %ecx
0000000000009b55	andl	$0x1, %ecx
0000000000009b58	movb	%cl, %dl
0000000000009b5a	movb	%dl, -0x19(%rbp)
0000000000009b5d	movq	-0x8(%rbp), %rax
0000000000009b61	movq	(%rax), %rax
0000000000009b64	movl	0x4(%rax), %ecx
0000000000009b67	testl	%ecx, %ecx
0000000000009b69	movl	%ecx, -0x20(%rbp)
0000000000009b6c	je	0x9b9f
0000000000009b72	jmp	0x9b77
0000000000009b77	movl	-0x20(%rbp), %eax
0000000000009b7a	subl	$0x1, %eax
0000000000009b7d	movl	%eax, -0x24(%rbp)
0000000000009b80	je	0x9bb0
0000000000009b86	jmp	0x9b8b
0000000000009b8b	movl	-0x20(%rbp), %eax
0000000000009b8e	subl	$0x2, %eax
0000000000009b91	movl	%eax, -0x28(%rbp)
0000000000009b94	je	0x9bc1
0000000000009b9a	jmp	0x9bd2
0000000000009b9f	movzbl	-0x19(%rbp), %eax
0000000000009ba3	addl	$0x0, %eax
0000000000009ba6	movb	%al, %cl
0000000000009ba8	movb	%cl, -0x19(%rbp)
0000000000009bab	jmp	0x9bf1
0000000000009bb0	movzbl	-0x19(%rbp), %eax
0000000000009bb4	addl	$0x2, %eax
0000000000009bb7	movb	%al, %cl
0000000000009bb9	movb	%cl, -0x19(%rbp)
0000000000009bbc	jmp	0x9bf1
0000000000009bc1	movzbl	-0x19(%rbp), %eax
0000000000009bc5	addl	$0x4, %eax
0000000000009bc8	movb	%al, %cl
0000000000009bca	movb	%cl, -0x19(%rbp)
0000000000009bcd	jmp	0x9bf1
0000000000009bd2	leaq	0x60645(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009bd9	leaq	0x5fcfa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009be0	leaq	0x619dd(%rip), %rcx ## literal pool for: "0"
0000000000009be7	movl	$0xe04, %edx
0000000000009bec	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009bf1	movq	-0x18(%rbp), %rax
0000000000009bf5	movq	(%rax), %rax
0000000000009bf8	shrq	$0x21, %rax
0000000000009bfc	movb	%al, %cl
0000000000009bfe	andb	$0x3, %cl
0000000000009c01	movzbl	%cl, %edx
0000000000009c04	movl	%edx, %eax
0000000000009c06	cmpq	$0x3, %rax
0000000000009c0a	setb	%cl
0000000000009c0d	xorb	$-0x1, %cl
0000000000009c10	andb	$0x1, %cl
0000000000009c13	movzbl	%cl, %edx
0000000000009c16	movslq	%edx, %rax
0000000000009c19	cmpq	$0x0, %rax
0000000000009c1d	je	0x9c42
0000000000009c23	leaq	0x605f4(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009c2a	leaq	0x5fca9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009c31	leaq	0x60604(%rip), %rcx ## literal pool for: "definition->address_size_map < (sizeof(address_size_map) / sizeof((address_size_map)[0]))"
0000000000009c38	movl	$0xe06, %edx
0000000000009c3d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009c42	jmp	0x9c47
0000000000009c47	movzbl	-0x19(%rbp), %eax
0000000000009c4b	movl	%eax, %ecx
0000000000009c4d	cmpq	$0x8, %rcx
0000000000009c51	setb	%dl
0000000000009c54	xorb	$-0x1, %dl
0000000000009c57	andb	$0x1, %dl
0000000000009c5a	movzbl	%dl, %eax
0000000000009c5d	movslq	%eax, %rcx
0000000000009c60	cmpq	$0x0, %rcx
0000000000009c64	je	0x9c89
0000000000009c6a	leaq	0x605ad(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009c71	leaq	0x5fc62(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009c78	leaq	0x60617(%rip), %rcx ## literal pool for: "index < (sizeof(address_size_map[definition->address_size_map]) / sizeof((address_size_map[definition->address_size_map])[0]))"
0000000000009c7f	movl	$0xe07, %edx
0000000000009c84	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009c89	jmp	0x9c8e
0000000000009c8e	movq	-0x18(%rbp), %rax
0000000000009c92	movq	(%rax), %rax
0000000000009c95	shrq	$0x1e, %rax
0000000000009c99	movl	%eax, %ecx
0000000000009c9b	andl	$0x18, %ecx
0000000000009c9e	movl	%ecx, %eax
0000000000009ca0	leaq	_ZydisSetEffectiveAddressWidth.address_size_map(%rip), %rdx
0000000000009ca7	addq	%rax, %rdx
0000000000009caa	movzbl	-0x19(%rbp), %ecx
0000000000009cae	movl	%ecx, %eax
0000000000009cb0	movb	(%rax,%rdx), %sil
0000000000009cb4	movq	-0x10(%rbp), %rax
0000000000009cb8	movb	%sil, 0x17(%rax)
0000000000009cbc	movq	-0x10(%rbp), %rax
0000000000009cc0	movzbl	0x17(%rax), %ecx
0000000000009cc4	movl	%ecx, %edi
0000000000009cc6	subl	$0x10, %edi
0000000000009cc9	movl	%ecx, -0x2c(%rbp)
0000000000009ccc	movl	%edi, -0x30(%rbp)
0000000000009ccf	je	0x9d02
0000000000009cd5	jmp	0x9cda
0000000000009cda	movl	-0x2c(%rbp), %eax
0000000000009cdd	subl	$0x20, %eax
0000000000009ce0	movl	%eax, -0x34(%rbp)
0000000000009ce3	je	0x9d0f
0000000000009ce9	jmp	0x9cee
0000000000009cee	movl	-0x2c(%rbp), %eax
0000000000009cf1	subl	$0x40, %eax
0000000000009cf4	movl	%eax, -0x38(%rbp)
0000000000009cf7	je	0x9d1c
0000000000009cfd	jmp	0x9d29
0000000000009d02	movq	-0x8(%rbp), %rax
0000000000009d06	movb	$0x0, 0x25(%rax)
0000000000009d0a	jmp	0x9d48
0000000000009d0f	movq	-0x8(%rbp), %rax
0000000000009d13	movb	$0x1, 0x25(%rax)
0000000000009d17	jmp	0x9d48
0000000000009d1c	movq	-0x8(%rbp), %rax
0000000000009d20	movb	$0x2, 0x25(%rax)
0000000000009d24	jmp	0x9d48
0000000000009d29	leaq	0x604ee(%rip), %rdi ## literal pool for: "ZydisSetEffectiveAddressWidth"
0000000000009d30	leaq	0x5fba3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009d37	leaq	0x61886(%rip), %rcx ## literal pool for: "0"
0000000000009d3e	movl	$0xe17, %edx
0000000000009d43	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009d48	addq	$0x40, %rsp
0000000000009d4c	popq	%rbp
0000000000009d4d	retq
0000000000009d4e	nop
_ZydisDecodeOptionalInstructionParts:
0000000000009d50	pushq	%rbp
0000000000009d51	movq	%rsp, %rbp
0000000000009d54	subq	$0x80, %rsp
0000000000009d5b	movq	%rdi, -0x10(%rbp)
0000000000009d5f	movq	%rsi, -0x18(%rbp)
0000000000009d63	movq	%rdx, -0x20(%rbp)
0000000000009d67	cmpq	$0x0, -0x10(%rbp)
0000000000009d6c	setne	%al
0000000000009d6f	xorb	$-0x1, %al
0000000000009d71	andb	$0x1, %al
0000000000009d73	movzbl	%al, %ecx
0000000000009d76	movslq	%ecx, %rdx
0000000000009d79	cmpq	$0x0, %rdx
0000000000009d7d	je	0x9da2
0000000000009d83	leaq	0x6058b(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009d8a	leaq	0x5fb49(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009d91	leaq	0x5fb77(%rip), %rcx ## literal pool for: "context"
0000000000009d98	movl	$0xcb9, %edx
0000000000009d9d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009da2	jmp	0x9da7
0000000000009da7	cmpq	$0x0, -0x18(%rbp)
0000000000009dac	setne	%al
0000000000009daf	xorb	$-0x1, %al
0000000000009db1	andb	$0x1, %al
0000000000009db3	movzbl	%al, %ecx
0000000000009db6	movslq	%ecx, %rdx
0000000000009db9	cmpq	$0x0, %rdx
0000000000009dbd	je	0x9de2
0000000000009dc3	leaq	0x6054b(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009dca	leaq	0x5fb09(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009dd1	leaq	0x5fb3f(%rip), %rcx ## literal pool for: "instruction"
0000000000009dd8	movl	$0xcba, %edx
0000000000009ddd	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009de2	jmp	0x9de7
0000000000009de7	cmpq	$0x0, -0x20(%rbp)
0000000000009dec	setne	%al
0000000000009def	xorb	$-0x1, %al
0000000000009df1	andb	$0x1, %al
0000000000009df3	movzbl	%al, %ecx
0000000000009df6	movslq	%ecx, %rdx
0000000000009df9	cmpq	$0x0, %rdx
0000000000009dfd	je	0x9e22
0000000000009e03	leaq	0x6050b(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009e0a	leaq	0x5fac9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009e11	leaq	0x60521(%rip), %rcx ## literal pool for: "info"
0000000000009e18	movl	$0xcbb, %edx
0000000000009e1d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009e22	jmp	0x9e27
0000000000009e27	movq	-0x20(%rbp), %rax
0000000000009e2b	movzbl	(%rax), %ecx
0000000000009e2e	andl	$0x1, %ecx
0000000000009e31	cmpl	$0x0, %ecx
0000000000009e34	je	0xa185
0000000000009e3a	movq	-0x18(%rbp), %rax
0000000000009e3e	cmpb	$0x0, 0x57b(%rax)
0000000000009e45	jne	0x9e9e
0000000000009e4b	movq	-0x18(%rbp), %rax
0000000000009e4f	movb	0x8(%rax), %cl
0000000000009e52	movq	-0x18(%rbp), %rax
0000000000009e56	movb	%cl, 0x57b(%rax)
0000000000009e5c	movq	-0x10(%rbp), %rdi
0000000000009e60	movq	-0x18(%rbp), %rsi
0000000000009e64	leaq	-0x21(%rbp), %rdx
0000000000009e68	callq	_ZydisInputNext
0000000000009e6d	movl	%eax, -0x28(%rbp)
0000000000009e70	movl	-0x28(%rbp), %eax
0000000000009e73	andl	$0x80000000, %eax
0000000000009e78	cmpl	$0x0, %eax
0000000000009e7b	je	0x9e8c
0000000000009e81	movl	-0x28(%rbp), %eax
0000000000009e84	movl	%eax, -0x4(%rbp)
0000000000009e87	jmp	0xa35e
0000000000009e8c	jmp	0x9e91
0000000000009e91	movq	-0x18(%rbp), %rdi
0000000000009e95	movzbl	-0x21(%rbp), %esi
0000000000009e99	callq	_ZydisDecodeModRM
0000000000009e9e	movb	$0x0, -0x29(%rbp)
0000000000009ea2	movb	$0x0, -0x2a(%rbp)
0000000000009ea6	movq	-0x20(%rbp), %rax
0000000000009eaa	movzbl	(%rax), %ecx
0000000000009ead	andl	$0x10, %ecx
0000000000009eb0	cmpl	$0x0, %ecx
0000000000009eb3	jne	0xa180
0000000000009eb9	movq	-0x18(%rbp), %rax
0000000000009ebd	movzbl	0x17(%rax), %ecx
0000000000009ec1	movl	%ecx, %edx
0000000000009ec3	subl	$0x10, %edx
0000000000009ec6	movl	%ecx, -0x44(%rbp)
0000000000009ec9	movl	%edx, -0x48(%rbp)
0000000000009ecc	je	0x9eff
0000000000009ed2	jmp	0x9ed7
0000000000009ed7	movl	-0x44(%rbp), %eax
0000000000009eda	subl	$0x20, %eax
0000000000009edd	movl	%eax, -0x4c(%rbp)
0000000000009ee0	je	0x9f8d
0000000000009ee6	jmp	0x9eeb
0000000000009eeb	movl	-0x44(%rbp), %eax
0000000000009eee	subl	$0x40, %eax
0000000000009ef1	movl	%eax, -0x50(%rbp)
0000000000009ef4	je	0x9f8d
0000000000009efa	jmp	0xa07b
0000000000009eff	movq	-0x18(%rbp), %rax
0000000000009f03	movzbl	0x578(%rax), %ecx
0000000000009f0a	movl	%ecx, %eax
0000000000009f0c	movq	%rax, %rdx
0000000000009f0f	subq	$0x3, %rdx
0000000000009f13	movq	%rax, -0x58(%rbp)
0000000000009f17	movq	%rdx, -0x60(%rbp)
0000000000009f1b	ja	0x9f69
0000000000009f21	leaq	0x454(%rip), %rax
0000000000009f28	movq	-0x58(%rbp), %rcx
0000000000009f2c	movslq	(%rax,%rcx,4), %rdx
0000000000009f30	addq	%rax, %rdx
0000000000009f33	jmpq	*%rdx
0000000000009f35	movq	-0x18(%rbp), %rax
0000000000009f39	movzbl	0x57a(%rax), %ecx
0000000000009f40	cmpl	$0x6, %ecx
0000000000009f43	jne	0x9f4d
0000000000009f49	movb	$0x10, -0x2a(%rbp)
0000000000009f4d	jmp	0x9f88
0000000000009f52	movb	$0x8, -0x2a(%rbp)
0000000000009f56	jmp	0x9f88
0000000000009f5b	movb	$0x10, -0x2a(%rbp)
0000000000009f5f	jmp	0x9f88
0000000000009f64	jmp	0x9f88
0000000000009f69	leaq	0x603a5(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
0000000000009f70	leaq	0x5f963(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000009f77	leaq	0x61646(%rip), %rcx ## literal pool for: "0"
0000000000009f7e	movl	$0xcde, %edx
0000000000009f83	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000009f88	jmp	0xa09a
0000000000009f8d	xorl	%eax, %eax
0000000000009f8f	movb	%al, %cl
0000000000009f91	movq	-0x18(%rbp), %rdx
0000000000009f95	movzbl	0x578(%rdx), %eax
0000000000009f9c	cmpl	$0x3, %eax
0000000000009f9f	movb	%cl, -0x61(%rbp)
0000000000009fa2	je	0x9fbc
0000000000009fa8	movq	-0x18(%rbp), %rax
0000000000009fac	movzbl	0x57a(%rax), %ecx
0000000000009fb3	cmpl	$0x4, %ecx
0000000000009fb6	sete	%dl
0000000000009fb9	movb	%dl, -0x61(%rbp)
0000000000009fbc	movb	-0x61(%rbp), %al
0000000000009fbf	andb	$0x1, %al
0000000000009fc1	movb	%al, -0x29(%rbp)
0000000000009fc4	movq	-0x18(%rbp), %rcx
0000000000009fc8	movzbl	0x578(%rcx), %edx
0000000000009fcf	movl	%edx, %ecx
0000000000009fd1	movq	%rcx, %rsi
0000000000009fd4	subq	$0x3, %rsi
0000000000009fd8	movq	%rcx, -0x70(%rbp)
0000000000009fdc	movq	%rsi, -0x78(%rbp)
0000000000009fe0	ja	0xa057
0000000000009fe6	leaq	0x37f(%rip), %rax
0000000000009fed	movq	-0x70(%rbp), %rcx
0000000000009ff1	movslq	(%rax,%rcx,4), %rdx
0000000000009ff5	addq	%rax, %rdx
0000000000009ff8	jmpq	*%rdx
0000000000009ffa	movq	-0x18(%rbp), %rax
0000000000009ffe	movzbl	0x57a(%rax), %ecx
000000000000a005	cmpl	$0x5, %ecx
000000000000a008	jne	0xa03b
000000000000a00e	movq	-0x10(%rbp), %rax
000000000000a012	movq	(%rax), %rax
000000000000a015	cmpl	$0x0, (%rax)
000000000000a018	jne	0xa037
000000000000a01e	movq	-0x18(%rbp), %rax
000000000000a022	movq	0x430(%rax), %rcx
000000000000a029	orq	$0x80, %rcx
000000000000a030	movq	%rcx, 0x430(%rax)
000000000000a037	movb	$0x20, -0x2a(%rbp)
000000000000a03b	jmp	0xa076
000000000000a040	movb	$0x8, -0x2a(%rbp)
000000000000a044	jmp	0xa076
000000000000a049	movb	$0x20, -0x2a(%rbp)
000000000000a04d	jmp	0xa076
000000000000a052	jmp	0xa076
000000000000a057	leaq	0x602b7(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
000000000000a05e	leaq	0x5f875(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a065	leaq	0x61558(%rip), %rcx ## literal pool for: "0"
000000000000a06c	movl	$0xcfa, %edx
000000000000a071	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a076	jmp	0xa09a
000000000000a07b	leaq	0x60293(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
000000000000a082	leaq	0x5f851(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a089	leaq	0x61534(%rip), %rcx ## literal pool for: "0"
000000000000a090	movl	$0xcfe, %edx
000000000000a095	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a09a	cmpb	$0x0, -0x29(%rbp)
000000000000a09e	je	0xa132
000000000000a0a4	movq	-0x18(%rbp), %rax
000000000000a0a8	movb	0x8(%rax), %cl
000000000000a0ab	movq	-0x18(%rbp), %rax
000000000000a0af	movb	%cl, 0x57f(%rax)
000000000000a0b5	movq	-0x10(%rbp), %rdi
000000000000a0b9	movq	-0x18(%rbp), %rsi
000000000000a0bd	leaq	-0x2b(%rbp), %rdx
000000000000a0c1	callq	_ZydisInputNext
000000000000a0c6	movl	%eax, -0x30(%rbp)
000000000000a0c9	movl	-0x30(%rbp), %eax
000000000000a0cc	andl	$0x80000000, %eax
000000000000a0d1	cmpl	$0x0, %eax
000000000000a0d4	je	0xa0e5
000000000000a0da	movl	-0x30(%rbp), %eax
000000000000a0dd	movl	%eax, -0x4(%rbp)
000000000000a0e0	jmp	0xa35e
000000000000a0e5	jmp	0xa0ea
000000000000a0ea	movq	-0x18(%rbp), %rdi
000000000000a0ee	movzbl	-0x2b(%rbp), %esi
000000000000a0f2	callq	_ZydisDecodeSIB
000000000000a0f7	movq	-0x18(%rbp), %rdi
000000000000a0fb	movzbl	0x57e(%rdi), %esi
000000000000a102	cmpl	$0x5, %esi
000000000000a105	jne	0xa12d
000000000000a10b	movq	-0x18(%rbp), %rax
000000000000a10f	movzbl	0x578(%rax), %ecx
000000000000a116	cmpl	$0x1, %ecx
000000000000a119	movl	$0x8, %ecx
000000000000a11e	movl	$0x20, %edx
000000000000a123	cmovel	%ecx, %edx
000000000000a126	movb	%dl, %sil
000000000000a129	movb	%sil, -0x2a(%rbp)
000000000000a12d	jmp	0xa132
000000000000a132	cmpb	$0x0, -0x2a(%rbp)
000000000000a136	je	0xa17b
000000000000a13c	jmp	0xa141
000000000000a141	movq	-0x10(%rbp), %rdi
000000000000a145	movq	-0x18(%rbp), %rsi
000000000000a149	movzbl	-0x2a(%rbp), %edx
000000000000a14d	callq	_ZydisReadDisplacement
000000000000a152	movl	%eax, -0x34(%rbp)
000000000000a155	movl	-0x34(%rbp), %eax
000000000000a158	andl	$0x80000000, %eax
000000000000a15d	cmpl	$0x0, %eax
000000000000a160	je	0xa171
000000000000a166	movl	-0x34(%rbp), %eax
000000000000a169	movl	%eax, -0x4(%rbp)
000000000000a16c	jmp	0xa35e
000000000000a171	jmp	0xa176
000000000000a176	jmp	0xa17b
000000000000a17b	jmp	0xa180
000000000000a180	jmp	0xa185
000000000000a185	movq	-0x20(%rbp), %rax
000000000000a189	movzbl	(%rax), %ecx
000000000000a18c	andl	$0x2, %ecx
000000000000a18f	cmpl	$0x0, %ecx
000000000000a192	je	0xa1e6
000000000000a198	jmp	0xa19d
000000000000a19d	movq	-0x10(%rbp), %rdi
000000000000a1a1	movq	-0x18(%rbp), %rsi
000000000000a1a5	movq	-0x20(%rbp), %rax
000000000000a1a9	movq	-0x10(%rbp), %rcx
000000000000a1ad	movzbl	0x25(%rcx), %edx
000000000000a1b1	movl	%edx, %ecx
000000000000a1b3	movzbl	0x1(%rax,%rcx), %edx
000000000000a1b8	callq	_ZydisReadDisplacement
000000000000a1bd	movl	%eax, -0x38(%rbp)
000000000000a1c0	movl	-0x38(%rbp), %eax
000000000000a1c3	andl	$0x80000000, %eax
000000000000a1c8	cmpl	$0x0, %eax
000000000000a1cb	je	0xa1dc
000000000000a1d1	movl	-0x38(%rbp), %eax
000000000000a1d4	movl	%eax, -0x4(%rbp)
000000000000a1d7	jmp	0xa35e
000000000000a1dc	jmp	0xa1e1
000000000000a1e1	jmp	0xa1e6
000000000000a1e6	movq	-0x20(%rbp), %rax
000000000000a1ea	movzbl	(%rax), %ecx
000000000000a1ed	andl	$0x4, %ecx
000000000000a1f0	cmpl	$0x0, %ecx
000000000000a1f3	je	0xa28b
000000000000a1f9	movq	-0x20(%rbp), %rax
000000000000a1fd	cmpb	$0x0, 0x8(%rax)
000000000000a201	je	0xa220
000000000000a207	movq	-0x18(%rbp), %rax
000000000000a20b	movq	0x430(%rax), %rcx
000000000000a212	orq	$0x80, %rcx
000000000000a219	movq	%rcx, 0x430(%rax)
000000000000a220	jmp	0xa225
000000000000a225	xorl	%edx, %edx
000000000000a227	movq	-0x10(%rbp), %rdi
000000000000a22b	movq	-0x18(%rbp), %rsi
000000000000a22f	movq	-0x20(%rbp), %rax
000000000000a233	movq	-0x10(%rbp), %rcx
000000000000a237	movzbl	0x24(%rcx), %r8d
000000000000a23c	movl	%r8d, %ecx
000000000000a23f	movb	0x4(%rax,%rcx), %r9b
000000000000a244	movq	-0x20(%rbp), %rax
000000000000a248	movb	0x7(%rax), %r10b
000000000000a24c	movq	-0x20(%rbp), %rax
000000000000a250	movzbl	%r9b, %ecx
000000000000a254	movzbl	%r10b, %r8d
000000000000a258	movzbl	0x8(%rax), %r9d
000000000000a25d	callq	_ZydisReadImmediate
000000000000a262	movl	%eax, -0x3c(%rbp)
000000000000a265	movl	-0x3c(%rbp), %eax
000000000000a268	andl	$0x80000000, %eax
000000000000a26d	cmpl	$0x0, %eax
000000000000a270	je	0xa281
000000000000a276	movl	-0x3c(%rbp), %eax
000000000000a279	movl	%eax, -0x4(%rbp)
000000000000a27c	jmp	0xa35e
000000000000a281	jmp	0xa286
000000000000a286	jmp	0xa28b
000000000000a28b	movq	-0x20(%rbp), %rax
000000000000a28f	movzbl	(%rax), %ecx
000000000000a292	andl	$0x8, %ecx
000000000000a295	cmpl	$0x0, %ecx
000000000000a298	je	0xa357
000000000000a29e	movq	-0x20(%rbp), %rax
000000000000a2a2	movzbl	(%rax), %ecx
000000000000a2a5	andl	$0x2, %ecx
000000000000a2a8	cmpl	$0x0, %ecx
000000000000a2ab	setne	%dl
000000000000a2ae	xorb	$-0x1, %dl
000000000000a2b1	xorb	$-0x1, %dl
000000000000a2b4	andb	$0x1, %dl
000000000000a2b7	movzbl	%dl, %ecx
000000000000a2ba	movslq	%ecx, %rax
000000000000a2bd	cmpq	$0x0, %rax
000000000000a2c1	je	0xa2e6
000000000000a2c7	leaq	0x60047(%rip), %rdi ## literal pool for: "ZydisDecodeOptionalInstructionParts"
000000000000a2ce	leaq	0x5f605(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a2d5	leaq	0x60062(%rip), %rcx ## literal pool for: "!(info->flags & 0x02)"
000000000000a2dc	movl	$0xd25, %edx
000000000000a2e1	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a2e6	jmp	0xa2eb
000000000000a2eb	jmp	0xa2f0
000000000000a2f0	movq	-0x10(%rbp), %rdi
000000000000a2f4	movq	-0x18(%rbp), %rsi
000000000000a2f8	movq	-0x20(%rbp), %rax
000000000000a2fc	movq	-0x10(%rbp), %rcx
000000000000a300	movzbl	0x24(%rcx), %edx
000000000000a304	movl	%edx, %ecx
000000000000a306	movb	0x9(%rax,%rcx), %r8b
000000000000a30b	movq	-0x20(%rbp), %rax
000000000000a30f	movb	0xc(%rax), %r9b
000000000000a313	movq	-0x20(%rbp), %rax
000000000000a317	movl	$0x1, %edx
000000000000a31c	movzbl	%r8b, %ecx
000000000000a320	movzbl	%r9b, %r8d
000000000000a324	movzbl	0xd(%rax), %r9d
000000000000a329	callq	_ZydisReadImmediate
000000000000a32e	movl	%eax, -0x40(%rbp)
000000000000a331	movl	-0x40(%rbp), %eax
000000000000a334	andl	$0x80000000, %eax
000000000000a339	cmpl	$0x0, %eax
000000000000a33c	je	0xa34d
000000000000a342	movl	-0x40(%rbp), %eax
000000000000a345	movl	%eax, -0x4(%rbp)
000000000000a348	jmp	0xa35e
000000000000a34d	jmp	0xa352
000000000000a352	jmp	0xa357
000000000000a357	movl	$0x100000, -0x4(%rbp)
000000000000a35e	movl	-0x4(%rbp), %eax
000000000000a361	addq	$0x80, %rsp
000000000000a368	popq	%rbp
000000000000a369	retq
000000000000a36a	nop
000000000000a36c	.byte 0x8e #bad opcode
000000000000a36d	cld
000000000000a36e	.byte 0xff #bad opcode
000000000000a36f	callq	*%rsp
000000000000a371	cld
000000000000a372	.byte 0xff #bad opcode
000000000000a373	.byte 0xff #bad opcode
000000000000a374	.byte 0xdd #bad opcode
000000000000a375	cld
000000000000a376	.byte 0xff #bad opcode
000000000000a377	jmpq	*%rsi
000000000000a379	cld
000000000000a37a	.byte 0xff #bad opcode
000000000000a37b	.byte 0xff #bad opcode
000000000000a37c	movl	$0xd6fffffb, %ecx
000000000000a381	sti
000000000000a382	.byte 0xff #bad opcode
000000000000a383	.byte 0xff #bad opcode
000000000000a384	.byte 0xdf #bad opcode
000000000000a385	sti
000000000000a386	.byte 0xff #bad opcode
000000000000a387	.byte 0xff #bad opcode
000000000000a388	callq	0x1000a388
000000000000a38d	.byte 0x1f #bad opcode
000000000000a38e	addb	%dl, 0x48(%rbp)
_ZydisCheckErrorConditions:
000000000000a390	pushq	%rbp
000000000000a391	movq	%rsp, %rbp
000000000000a394	subq	$0xd0, %rsp
000000000000a39b	movq	%rdi, -0x10(%rbp)
000000000000a39f	movq	%rsi, -0x18(%rbp)
000000000000a3a3	movq	%rdx, -0x20(%rbp)
000000000000a3a7	movq	-0x20(%rbp), %rdx
000000000000a3ab	movzwl	0x8(%rdx), %eax
000000000000a3af	shrl	$0x9, %eax
000000000000a3b2	andl	$0xf, %eax
000000000000a3b5	movl	%eax, -0x24(%rbp)
000000000000a3b8	movq	-0x20(%rbp), %rdx
000000000000a3bc	movzwl	0x8(%rdx), %eax
000000000000a3c0	movzbl	0xa(%rdx), %ecx
000000000000a3c4	shll	$0x10, %ecx
000000000000a3c7	orl	%ecx, %eax
000000000000a3c9	shrl	$0xd, %eax
000000000000a3cc	andl	$0xf, %eax
000000000000a3cf	movl	%eax, -0x28(%rbp)
000000000000a3d2	movl	$0x1, -0x2c(%rbp)
000000000000a3d9	movb	$0x0, -0x2d(%rbp)
000000000000a3dd	movb	$0x0, -0x2e(%rbp)
000000000000a3e1	movl	$0x0, -0x34(%rbp)
000000000000a3e8	movq	-0x18(%rbp), %rdx
000000000000a3ec	movl	0xc(%rdx), %eax
000000000000a3ef	movl	%eax, %edx
000000000000a3f1	movq	%rdx, %rsi
000000000000a3f4	subq	$0x5, %rsi
000000000000a3f8	movq	%rdx, -0x70(%rbp)
000000000000a3fc	movq	%rsi, -0x78(%rbp)
000000000000a400	ja	0xa6bd
000000000000a406	leaq	0xbb7(%rip), %rax
000000000000a40d	movq	-0x70(%rbp), %rcx
000000000000a411	movslq	(%rax,%rcx,4), %rdx
000000000000a415	addq	%rax, %rdx
000000000000a418	jmpq	*%rdx
000000000000a41a	movq	-0x20(%rbp), %rax
000000000000a41e	movq	%rax, -0x40(%rbp)
000000000000a422	movq	-0x40(%rbp), %rax
000000000000a426	movq	(%rax), %rax
000000000000a429	shrq	$0x2a, %rax
000000000000a42d	movb	%al, %cl
000000000000a42f	andb	$0x1, %cl
000000000000a432	movzbl	%cl, %edx
000000000000a435	cmpl	$0x0, %edx
000000000000a438	je	0xa45a
000000000000a43e	movq	-0x10(%rbp), %rax
000000000000a442	movq	(%rax), %rax
000000000000a445	cmpl	$0x5, (%rax)
000000000000a448	jne	0xa45a
000000000000a44e	movl	$0x80200001, -0x4(%rbp)
000000000000a455	jmp	0xafb8
000000000000a45a	movq	-0x10(%rbp), %rax
000000000000a45e	movzbl	0x18(%rax), %ecx
000000000000a462	cmpl	$0x0, %ecx
000000000000a465	je	0xa48a
000000000000a46b	movq	-0x40(%rbp), %rax
000000000000a46f	movb	0xb(%rax), %cl
000000000000a472	andb	$0x1, %cl
000000000000a475	cmpb	$0x0, %cl
000000000000a478	jne	0xa48a
000000000000a47e	movl	$0x80200004, -0x4(%rbp)
000000000000a485	jmp	0xafb8
000000000000a48a	jmp	0xa6dc
000000000000a48f	jmp	0xa6dc
000000000000a494	movq	-0x20(%rbp), %rax
000000000000a498	movq	%rax, -0x48(%rbp)
000000000000a49c	movq	-0x48(%rbp), %rax
000000000000a4a0	movl	0x8(%rax), %ecx
000000000000a4a3	movl	%ecx, %eax
000000000000a4a5	shrq	$0x17, %rax
000000000000a4a9	movb	%al, %dl
000000000000a4ab	andb	$0xf, %dl
000000000000a4ae	movzbl	%dl, %ecx
000000000000a4b1	movl	%ecx, -0x2c(%rbp)
000000000000a4b4	jmp	0xa6dc
000000000000a4b9	movq	-0x20(%rbp), %rax
000000000000a4bd	movq	%rax, -0x50(%rbp)
000000000000a4c1	movq	-0x50(%rbp), %rax
000000000000a4c5	movl	0x8(%rax), %ecx
000000000000a4c8	shrl	$0x17, %ecx
000000000000a4cb	andl	$0xf, %ecx
000000000000a4ce	movl	%ecx, -0x2c(%rbp)
000000000000a4d1	movq	-0x50(%rbp), %rax
000000000000a4d5	movl	0x8(%rax), %ecx
000000000000a4d8	movl	%ecx, %eax
000000000000a4da	shrq	$0x1b, %rax
000000000000a4de	movb	%al, %dl
000000000000a4e0	andb	$0x1, %dl
000000000000a4e3	movb	%dl, -0x2e(%rbp)
000000000000a4e6	jmp	0xa6dc
000000000000a4eb	movq	-0x20(%rbp), %rax
000000000000a4ef	movq	%rax, -0x58(%rbp)
000000000000a4f3	movq	-0x58(%rbp), %rax
000000000000a4f7	movl	0x8(%rax), %ecx
000000000000a4fa	shrl	$0x17, %ecx
000000000000a4fd	andl	$0xf, %ecx
000000000000a500	movl	%ecx, -0x2c(%rbp)
000000000000a503	movq	-0x58(%rbp), %rax
000000000000a507	movl	0x8(%rax), %ecx
000000000000a50a	movl	%ecx, %eax
000000000000a50c	shrq	$0x1b, %rax
000000000000a510	movb	%al, %dl
000000000000a512	andb	$0x1, %dl
000000000000a515	movb	%dl, -0x2e(%rbp)
000000000000a518	movq	-0x58(%rbp), %rax
000000000000a51c	movzwl	0xc(%rax), %ecx
000000000000a520	movl	%ecx, %eax
000000000000a522	shrq	$0x7, %rax
000000000000a526	movb	%al, %dl
000000000000a528	andb	$0x3, %dl
000000000000a52b	movzbl	%dl, %ecx
000000000000a52e	movl	%ecx, -0x34(%rbp)
000000000000a531	movq	-0x18(%rbp), %rax
000000000000a535	movzbl	0x564(%rax), %ecx
000000000000a53c	cmpl	$0x0, %ecx
000000000000a53f	je	0xa56d
000000000000a545	movq	-0x58(%rbp), %rax
000000000000a549	movzwl	0xc(%rax), %ecx
000000000000a54d	movl	%ecx, %eax
000000000000a54f	shrq	$0x9, %rax
000000000000a553	movb	%al, %dl
000000000000a555	andb	$0x1, %dl
000000000000a558	cmpb	$0x0, %dl
000000000000a55b	jne	0xa56d
000000000000a561	movl	$0x8020000a, -0x4(%rbp)
000000000000a568	jmp	0xafb8
000000000000a56d	jmp	0xa6dc
000000000000a572	movq	-0x20(%rbp), %rax
000000000000a576	movq	%rax, -0x60(%rbp)
000000000000a57a	movq	-0x60(%rbp), %rax
000000000000a57e	movl	0x8(%rax), %ecx
000000000000a581	shrl	$0x17, %ecx
000000000000a584	andl	$0xf, %ecx
000000000000a587	movl	%ecx, -0x2c(%rbp)
000000000000a58a	movq	-0x60(%rbp), %rax
000000000000a58e	movl	0x8(%rax), %ecx
000000000000a591	movl	%ecx, %eax
000000000000a593	shrq	$0x1b, %rax
000000000000a597	movb	%al, %dl
000000000000a599	andb	$0x1, %dl
000000000000a59c	movb	%dl, -0x2e(%rbp)
000000000000a59f	movq	-0x60(%rbp), %rax
000000000000a5a3	movzbl	0xc(%rax), %ecx
000000000000a5a7	shrl	%ecx
000000000000a5a9	andl	$0x3, %ecx
000000000000a5ac	movl	%ecx, -0x34(%rbp)
000000000000a5af	movq	-0x60(%rbp), %rax
000000000000a5b3	movl	0x8(%rax), %ecx
000000000000a5b6	movl	%ecx, %esi
000000000000a5b8	movzbl	0xc(%rax), %ecx
000000000000a5bc	movl	%ecx, %eax
000000000000a5be	shlq	$0x20, %rax
000000000000a5c2	orq	%rax, %rsi
000000000000a5c5	shrq	$0x1c, %rsi
000000000000a5c9	movb	%sil, %dl
000000000000a5cc	andb	$0x1f, %dl
000000000000a5cf	movzbl	%dl, %ecx
000000000000a5d2	movl	%ecx, %eax
000000000000a5d4	cmpq	$0x1a, %rax
000000000000a5d8	setb	%dl
000000000000a5db	xorb	$-0x1, %dl
000000000000a5de	andb	$0x1, %dl
000000000000a5e1	movzbl	%dl, %ecx
000000000000a5e4	movslq	%ecx, %rax
000000000000a5e7	cmpq	$0x0, %rax
000000000000a5eb	je	0xa610
000000000000a5f1	leaq	0x5febb(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a5f8	leaq	0x5f2db(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a5ff	leaq	0x5fec7(%rip), %rcx ## literal pool for: "def->functionality < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000a606	movl	$0x10fe, %edx
000000000000a60b	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a610	jmp	0xa615
000000000000a615	movq	-0x18(%rbp), %rax
000000000000a619	movzbl	0x574(%rax), %ecx
000000000000a620	cmpl	$0x8, %ecx
000000000000a623	setl	%dl
000000000000a626	xorb	$-0x1, %dl
000000000000a629	andb	$0x1, %dl
000000000000a62c	movzbl	%dl, %ecx
000000000000a62f	movslq	%ecx, %rax
000000000000a632	cmpq	$0x0, %rax
000000000000a636	je	0xa65b
000000000000a63c	leaq	0x5fe70(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a643	leaq	0x5f290(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a64a	leaq	0x5feb8(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < 8"
000000000000a651	movl	$0x10ff, %edx
000000000000a656	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a65b	jmp	0xa660
000000000000a660	movq	-0x60(%rbp), %rax
000000000000a664	movl	0x8(%rax), %ecx
000000000000a667	movl	%ecx, %edx
000000000000a669	movzbl	0xc(%rax), %ecx
000000000000a66d	movl	%ecx, %eax
000000000000a66f	shlq	$0x20, %rax
000000000000a673	orq	%rax, %rdx
000000000000a676	shrq	$0x1c, %rdx
000000000000a67a	movb	%dl, %sil
000000000000a67d	andb	$0x1f, %sil
000000000000a681	movzbl	%sil, %ecx
000000000000a685	movl	%ecx, %eax
000000000000a687	shlq	$0x3, %rax
000000000000a68b	leaq	_ZydisCheckErrorConditions.lookup(%rip), %rdx
000000000000a692	addq	%rax, %rdx
000000000000a695	movq	-0x18(%rbp), %rax
000000000000a699	movzbl	0x574(%rax), %ecx
000000000000a6a0	movl	%ecx, %eax
000000000000a6a2	cmpb	$0x0, (%rdx,%rax)
000000000000a6a6	jne	0xa6b8
000000000000a6ac	movl	$0x80200001, -0x4(%rbp)
000000000000a6b3	jmp	0xafb8
000000000000a6b8	jmp	0xa6dc
000000000000a6bd	leaq	0x5fdef(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a6c4	leaq	0x5f20f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a6cb	leaq	0x60ef2(%rip), %rcx ## literal pool for: "0"
000000000000a6d2	movl	$0x110a, %edx
000000000000a6d7	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a6dc	movl	-0x24(%rbp), %eax
000000000000a6df	movl	%eax, %ecx
000000000000a6e1	movq	%rcx, %rdx
000000000000a6e4	subq	$0x8, %rdx
000000000000a6e8	movq	%rcx, -0x80(%rbp)
000000000000a6ec	movq	%rdx, -0x88(%rbp)
000000000000a6f3	ja	0xa900
000000000000a6f9	leaq	0x8dc(%rip), %rax
000000000000a700	movq	-0x80(%rbp), %rcx
000000000000a704	movslq	(%rax,%rcx,4), %rdx
000000000000a708	addq	%rax, %rdx
000000000000a70b	jmpq	*%rdx
000000000000a70d	jmp	0xa91f
000000000000a712	movq	-0x10(%rbp), %rax
000000000000a716	movq	(%rax), %rax
000000000000a719	cmpl	$0x0, (%rax)
000000000000a71c	jne	0xa73f
000000000000a722	movq	-0x10(%rbp), %rax
000000000000a726	movzbl	0x2c(%rax), %ecx
000000000000a72a	cmpl	$0x0, %ecx
000000000000a72d	je	0xa73f
000000000000a733	movl	$0x80200003, -0x4(%rbp)
000000000000a73a	jmp	0xafb8
000000000000a73f	jmp	0xa91f
000000000000a744	movq	-0x18(%rbp), %rax
000000000000a748	movzbl	0x579(%rax), %ecx
000000000000a74f	cmpl	$0x1, %ecx
000000000000a752	jne	0xa764
000000000000a758	movl	$0x80200003, -0x4(%rbp)
000000000000a75f	jmp	0xafb8
000000000000a764	jmp	0xa769
000000000000a769	movq	-0x18(%rbp), %rax
000000000000a76d	movzbl	0x579(%rax), %ecx
000000000000a774	cmpl	$0x5, %ecx
000000000000a777	jle	0xa789
000000000000a77d	movl	$0x80200003, -0x4(%rbp)
000000000000a784	jmp	0xafb8
000000000000a789	jmp	0xa91f
000000000000a78e	movq	-0x18(%rbp), %rax
000000000000a792	movzbl	0x579(%rax), %ecx
000000000000a799	movq	-0x10(%rbp), %rax
000000000000a79d	movzbl	0x27(%rax), %edx
000000000000a7a1	shll	$0x3, %edx
000000000000a7a4	orl	%edx, %ecx
000000000000a7a6	movb	%cl, %sil
000000000000a7a9	movb	%sil, -0x61(%rbp)
000000000000a7ad	movzbl	-0x61(%rbp), %ecx
000000000000a7b1	movl	%ecx, %eax
000000000000a7b3	cmpq	$0x10, %rax
000000000000a7b7	setb	%sil
000000000000a7bb	xorb	$-0x1, %sil
000000000000a7bf	andb	$0x1, %sil
000000000000a7c3	movzbl	%sil, %ecx
000000000000a7c7	movslq	%ecx, %rax
000000000000a7ca	cmpq	$0x0, %rax
000000000000a7ce	je	0xa7f3
000000000000a7d4	leaq	0x5fcd8(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a7db	leaq	0x5f0f8(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a7e2	leaq	0x5fd3e(%rip), %rcx ## literal pool for: "value < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000a7e9	movl	$0x1131, %edx
000000000000a7ee	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a7f3	jmp	0xa7f8
000000000000a7f8	movzbl	-0x61(%rbp), %eax
000000000000a7fc	movl	%eax, %ecx
000000000000a7fe	leaq	_ZydisCheckErrorConditions.lookup.51(%rip), %rdx
000000000000a805	cmpb	$0x0, (%rdx,%rcx)
000000000000a809	jne	0xa81b
000000000000a80f	movl	$0x80200003, -0x4(%rbp)
000000000000a816	jmp	0xafb8
000000000000a81b	jmp	0xa91f
000000000000a820	movq	-0x10(%rbp), %rax
000000000000a824	cmpb	$0x0, 0x27(%rax)
000000000000a828	je	0xa83a
000000000000a82e	movl	$0x80200003, -0x4(%rbp)
000000000000a835	jmp	0xafb8
000000000000a83a	jmp	0xa91f
000000000000a83f	movq	-0x10(%rbp), %rax
000000000000a843	movq	(%rax), %rax
000000000000a846	cmpl	$0x0, (%rax)
000000000000a849	jne	0xa87d
000000000000a84f	movq	-0x10(%rbp), %rax
000000000000a853	movzbl	0x27(%rax), %ecx
000000000000a857	cmpl	$0x0, %ecx
000000000000a85a	jne	0xa871
000000000000a860	movq	-0x10(%rbp), %rax
000000000000a864	movzbl	0x2c(%rax), %ecx
000000000000a868	cmpl	$0x0, %ecx
000000000000a86b	je	0xa87d
000000000000a871	movl	$0x80200003, -0x4(%rbp)
000000000000a878	jmp	0xafb8
000000000000a87d	jmp	0xa91f
000000000000a882	movq	-0x10(%rbp), %rax
000000000000a886	cmpb	$0x0, 0x2c(%rax)
000000000000a88a	setne	%cl
000000000000a88d	xorb	$-0x1, %cl
000000000000a890	xorb	$-0x1, %cl
000000000000a893	andb	$0x1, %cl
000000000000a896	movzbl	%cl, %edx
000000000000a899	movslq	%edx, %rax
000000000000a89c	cmpq	$0x0, %rax
000000000000a8a0	je	0xa8c5
000000000000a8a6	leaq	0x5fc06(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a8ad	leaq	0x5f026(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a8b4	leaq	0x5fc9b(%rip), %rcx ## literal pool for: "!context->cache.R2"
000000000000a8bb	movl	$0x1149, %edx
000000000000a8c0	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a8c5	jmp	0xa8ca
000000000000a8ca	movq	-0x10(%rbp), %rax
000000000000a8ce	movzbl	0x27(%rax), %ecx
000000000000a8d2	cmpl	$0x0, %ecx
000000000000a8d5	jne	0xa8ef
000000000000a8db	movq	-0x18(%rbp), %rax
000000000000a8df	movzbl	0x579(%rax), %ecx
000000000000a8e6	cmpl	$0x3, %ecx
000000000000a8e9	jle	0xa8fb
000000000000a8ef	movl	$0x80200003, -0x4(%rbp)
000000000000a8f6	jmp	0xafb8
000000000000a8fb	jmp	0xa91f
000000000000a900	leaq	0x5fbac(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000a907	leaq	0x5efcc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000a90e	leaq	0x60caf(%rip), %rcx ## literal pool for: "0"
000000000000a915	movl	$0x1150, %edx
000000000000a91a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000a91f	movl	-0x28(%rbp), %eax
000000000000a922	movl	%eax, %ecx
000000000000a924	movq	%rcx, %rdx
000000000000a927	subq	$0xa, %rdx
000000000000a92b	movq	%rcx, -0x90(%rbp)
000000000000a932	movq	%rdx, -0x98(%rbp)
000000000000a939	ja	0xaa32
000000000000a93f	leaq	0x6ba(%rip), %rax
000000000000a946	movq	-0x90(%rbp), %rcx
000000000000a94d	movslq	(%rax,%rcx,4), %rdx
000000000000a951	addq	%rax, %rdx
000000000000a954	jmpq	*%rdx
000000000000a956	jmp	0xaa51
000000000000a95b	movq	-0x18(%rbp), %rax
000000000000a95f	movzbl	0x57a(%rax), %ecx
000000000000a966	cmpl	$0x1, %ecx
000000000000a969	jne	0xa97b
000000000000a96f	movl	$0x80200003, -0x4(%rbp)
000000000000a976	jmp	0xafb8
000000000000a97b	jmp	0xa980
000000000000a980	movq	-0x18(%rbp), %rax
000000000000a984	movzbl	0x57a(%rax), %ecx
000000000000a98b	cmpl	$0x6, %ecx
000000000000a98e	jle	0xa9a0
000000000000a994	movl	$0x80200003, -0x4(%rbp)
000000000000a99b	jmp	0xafb8
000000000000a9a0	jmp	0xaa51
000000000000a9a5	jmp	0xaa51
000000000000a9aa	movq	-0x10(%rbp), %rax
000000000000a9ae	movzbl	0x29(%rax), %ecx
000000000000a9b2	cmpl	$0x0, %ecx
000000000000a9b5	jne	0xa9cf
000000000000a9bb	movq	-0x18(%rbp), %rax
000000000000a9bf	movzbl	0x57a(%rax), %ecx
000000000000a9c6	cmpl	$0x3, %ecx
000000000000a9c9	jle	0xa9db
000000000000a9cf	movl	$0x80200003, -0x4(%rbp)
000000000000a9d6	jmp	0xafb8
000000000000a9db	jmp	0xaa51
000000000000a9e0	movb	$0x1, -0x2d(%rbp)
000000000000a9e4	jmp	0xaa51
000000000000a9e9	movq	-0x10(%rbp), %rax
000000000000a9ed	movq	(%rax), %rax
000000000000a9f0	cmpl	$0x0, (%rax)
000000000000a9f3	jne	0xaa2d
000000000000a9f9	movq	-0x18(%rbp), %rax
000000000000a9fd	movzbl	0x578(%rax), %ecx
000000000000aa04	cmpl	$0x0, %ecx
000000000000aa07	jne	0xaa2d
000000000000aa0d	movq	-0x18(%rbp), %rax
000000000000aa11	movzbl	0x57a(%rax), %ecx
000000000000aa18	cmpl	$0x5, %ecx
000000000000aa1b	jne	0xaa2d
000000000000aa21	movl	$0x80200001, -0x4(%rbp)
000000000000aa28	jmp	0xafb8
000000000000aa2d	jmp	0xaa51
000000000000aa32	leaq	0x5fa7a(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000aa39	leaq	0x5ee9a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000aa40	leaq	0x60b7d(%rip), %rcx ## literal pool for: "0"
000000000000aa47	movl	$0x117a, %edx
000000000000aa4c	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000aa51	movl	-0x2c(%rbp), %eax
000000000000aa54	movl	%eax, %ecx
000000000000aa56	movq	%rcx, %rdx
000000000000aa59	subq	$0x7, %rdx
000000000000aa5d	movq	%rcx, -0xa0(%rbp)
000000000000aa64	movq	%rdx, -0xa8(%rbp)
000000000000aa6b	ja	0xabaf
000000000000aa71	leaq	0x5b4(%rip), %rax
000000000000aa78	movq	-0xa0(%rbp), %rcx
000000000000aa7f	movslq	(%rax,%rcx,4), %rdx
000000000000aa83	addq	%rax, %rdx
000000000000aa86	jmpq	*%rdx
000000000000aa88	movq	-0x10(%rbp), %rax
000000000000aa8c	movzbl	0x2e(%rax), %ecx
000000000000aa90	andl	$0xf, %ecx
000000000000aa93	cmpl	$0x0, %ecx
000000000000aa96	je	0xaaa8
000000000000aa9c	movl	$0x80200003, -0x4(%rbp)
000000000000aaa3	jmp	0xafb8
000000000000aaa8	cmpb	$0x0, -0x2d(%rbp)
000000000000aaac	jne	0xaacf
000000000000aab2	movq	-0x10(%rbp), %rax
000000000000aab6	movzbl	0x2d(%rax), %ecx
000000000000aaba	cmpl	$0x0, %ecx
000000000000aabd	je	0xaacf
000000000000aac3	movl	$0x80200003, -0x4(%rbp)
000000000000aaca	jmp	0xafb8
000000000000aacf	jmp	0xabce
000000000000aad4	cmpb	$0x0, -0x2d(%rbp)
000000000000aad8	movb	$0x1, %al
000000000000aada	movb	%al, -0xa9(%rbp)
000000000000aae0	je	0xab1b
000000000000aae6	xorl	%eax, %eax
000000000000aae8	movb	%al, %cl
000000000000aaea	movq	-0x18(%rbp), %rdx
000000000000aaee	cmpl	$0x4, 0xc(%rdx)
000000000000aaf2	movb	%cl, -0xaa(%rbp)
000000000000aaf8	je	0xab0f
000000000000aafe	movq	-0x18(%rbp), %rax
000000000000ab02	cmpl	$0x5, 0xc(%rax)
000000000000ab06	setne	%cl
000000000000ab09	movb	%cl, -0xaa(%rbp)
000000000000ab0f	movb	-0xaa(%rbp), %al
000000000000ab15	movb	%al, -0xa9(%rbp)
000000000000ab1b	movb	-0xa9(%rbp), %al
000000000000ab21	xorb	$-0x1, %al
000000000000ab23	andb	$0x1, %al
000000000000ab25	movzbl	%al, %ecx
000000000000ab28	movslq	%ecx, %rdx
000000000000ab2b	cmpq	$0x0, %rdx
000000000000ab2f	je	0xab54
000000000000ab35	leaq	0x5f977(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000ab3c	leaq	0x5ed97(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ab43	leaq	0x5fa1f(%rip), %rcx ## literal pool for: "!has_VSIB || ((instruction->encoding != ZYDIS_INSTRUCTION_ENCODING_EVEX) && (instruction->encoding != ZYDIS_INSTRUCTION_ENCODING_MVEX))"
000000000000ab4a	movl	$0x118c, %edx
000000000000ab4f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ab54	jmp	0xab59
000000000000ab59	jmp	0xabce
000000000000ab5e	movq	-0x10(%rbp), %rax
000000000000ab62	cmpb	$0x0, 0x2d(%rax)
000000000000ab66	je	0xab78
000000000000ab6c	movl	$0x80200003, -0x4(%rbp)
000000000000ab73	jmp	0xafb8
000000000000ab78	jmp	0xabce
000000000000ab7d	movq	-0x10(%rbp), %rax
000000000000ab81	movq	(%rax), %rax
000000000000ab84	cmpl	$0x0, (%rax)
000000000000ab87	jne	0xabaa
000000000000ab8d	movq	-0x10(%rbp), %rax
000000000000ab91	movzbl	0x2e(%rax), %ecx
000000000000ab95	cmpl	$0x7, %ecx
000000000000ab98	jle	0xabaa
000000000000ab9e	movl	$0x80200003, -0x4(%rbp)
000000000000aba5	jmp	0xafb8
000000000000abaa	jmp	0xabce
000000000000abaf	leaq	0x5f8fd(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000abb6	leaq	0x5ed1d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000abbd	leaq	0x60a00(%rip), %rcx ## literal pool for: "0"
000000000000abc4	movl	$0x119d, %edx
000000000000abc9	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000abce	cmpb	$0x0, -0x2e(%rbp)
000000000000abd2	je	0xaefc
000000000000abd8	cmpb	$0x0, -0x2d(%rbp)
000000000000abdc	setne	%al
000000000000abdf	xorb	$-0x1, %al
000000000000abe1	andb	$0x1, %al
000000000000abe3	movzbl	%al, %ecx
000000000000abe6	movslq	%ecx, %rdx
000000000000abe9	cmpq	$0x0, %rdx
000000000000abed	je	0xac12
000000000000abf3	leaq	0x5f8b9(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000abfa	leaq	0x5ecd9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ac01	leaq	0x5f9e9(%rip), %rcx ## literal pool for: "has_VSIB"
000000000000ac08	movl	$0x11a3, %edx
000000000000ac0d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ac12	jmp	0xac17
000000000000ac17	movq	-0x18(%rbp), %rax
000000000000ac1b	movzbl	0x578(%rax), %ecx
000000000000ac22	cmpl	$0x3, %ecx
000000000000ac25	setne	%dl
000000000000ac28	xorb	$-0x1, %dl
000000000000ac2b	andb	$0x1, %dl
000000000000ac2e	movzbl	%dl, %ecx
000000000000ac31	movslq	%ecx, %rax
000000000000ac34	cmpq	$0x0, %rax
000000000000ac38	je	0xac5d
000000000000ac3e	leaq	0x5f86e(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000ac45	leaq	0x5ec8e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ac4c	leaq	0x5f9a7(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
000000000000ac53	movl	$0x11a4, %edx
000000000000ac58	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ac5d	jmp	0xac62
000000000000ac62	movq	-0x18(%rbp), %rax
000000000000ac66	movzbl	0x57a(%rax), %ecx
000000000000ac6d	cmpl	$0x4, %ecx
000000000000ac70	sete	%dl
000000000000ac73	xorb	$-0x1, %dl
000000000000ac76	andb	$0x1, %dl
000000000000ac79	movzbl	%dl, %ecx
000000000000ac7c	movslq	%ecx, %rax
000000000000ac7f	cmpq	$0x0, %rax
000000000000ac83	je	0xaca8
000000000000ac89	leaq	0x5f823(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000ac90	leaq	0x5ec43(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ac97	leaq	0x5f6f2(%rip), %rcx ## literal pool for: "instruction->raw.modrm.rm == 4"
000000000000ac9e	movl	$0x11a5, %edx
000000000000aca3	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000aca8	jmp	0xacad
000000000000acad	movq	-0x18(%rbp), %rax
000000000000acb1	movb	0x579(%rax), %cl
000000000000acb7	movb	%cl, -0x62(%rbp)
000000000000acba	movq	-0x18(%rbp), %rax
000000000000acbe	movb	0x57d(%rax), %cl
000000000000acc4	movb	%cl, -0x63(%rbp)
000000000000acc7	movq	-0x10(%rbp), %rax
000000000000accb	movq	(%rax), %rax
000000000000acce	cmpl	$0x0, (%rax)
000000000000acd1	jne	0xad21
000000000000acd7	movzbl	-0x62(%rbp), %eax
000000000000acdb	movq	-0x10(%rbp), %rcx
000000000000acdf	movzbl	0x27(%rcx), %edx
000000000000ace3	shll	$0x3, %edx
000000000000ace6	orl	%edx, %eax
000000000000ace8	movq	-0x10(%rbp), %rcx
000000000000acec	movzbl	0x2c(%rcx), %edx
000000000000acf0	shll	$0x4, %edx
000000000000acf3	orl	%edx, %eax
000000000000acf5	movb	%al, %sil
000000000000acf8	movb	%sil, -0x62(%rbp)
000000000000acfc	movzbl	-0x63(%rbp), %eax
000000000000ad00	movq	-0x10(%rbp), %rcx
000000000000ad04	movzbl	0x28(%rcx), %edx
000000000000ad08	shll	$0x3, %edx
000000000000ad0b	orl	%edx, %eax
000000000000ad0d	movq	-0x10(%rbp), %rcx
000000000000ad11	movzbl	0x2d(%rcx), %edx
000000000000ad15	shll	$0x4, %edx
000000000000ad18	orl	%edx, %eax
000000000000ad1a	movb	%al, %sil
000000000000ad1d	movb	%sil, -0x63(%rbp)
000000000000ad21	movb	$-0x10, -0x64(%rbp)
000000000000ad25	movq	-0x18(%rbp), %rax
000000000000ad29	movl	0xc(%rax), %ecx
000000000000ad2c	movl	%ecx, %edx
000000000000ad2e	subl	$0x3, %edx
000000000000ad31	movl	%ecx, -0xb0(%rbp)
000000000000ad37	movl	%edx, -0xb4(%rbp)
000000000000ad3d	je	0xad65
000000000000ad43	jmp	0xad48
000000000000ad48	movl	-0xb0(%rbp), %eax
000000000000ad4e	addl	$-0x4, %eax
000000000000ad51	subl	$0x2, %eax
000000000000ad54	movl	%eax, -0xb8(%rbp)
000000000000ad5a	jb	0xae0c
000000000000ad60	jmp	0xae9c
000000000000ad65	xorl	%eax, %eax
000000000000ad67	movb	%al, %cl
000000000000ad69	cmpl	$0x1, -0x24(%rbp)
000000000000ad6d	movb	%cl, -0xb9(%rbp)
000000000000ad73	jne	0xad9a
000000000000ad79	xorl	%eax, %eax
000000000000ad7b	movb	%al, %cl
000000000000ad7d	cmpl	$0x9, -0x28(%rbp)
000000000000ad81	movb	%cl, -0xb9(%rbp)
000000000000ad87	jne	0xad9a
000000000000ad8d	cmpl	$0x1, -0x2c(%rbp)
000000000000ad91	sete	%al
000000000000ad94	movb	%al, -0xb9(%rbp)
000000000000ad9a	movb	-0xb9(%rbp), %al
000000000000ada0	xorb	$-0x1, %al
000000000000ada2	andb	$0x1, %al
000000000000ada4	movzbl	%al, %ecx
000000000000ada7	movslq	%ecx, %rdx
000000000000adaa	cmpq	$0x0, %rdx
000000000000adae	je	0xadd3
000000000000adb4	leaq	0x5f6f8(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000adbb	leaq	0x5eb18(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000adc2	leaq	0x5f851(%rip), %rcx ## literal pool for: "(constr_REG == ZYDIS_REG_CONSTRAINTS_NONE) && (constr_RM == ZYDIS_REG_CONSTRAINTS_VSIB) && (constr_NDSNDD == ZYDIS_REG_CONSTRAINTS_NONE)"
000000000000adc9	movl	$0x11b5, %edx
000000000000adce	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000add3	jmp	0xadd8
000000000000add8	movq	-0x10(%rbp), %rax
000000000000addc	movq	(%rax), %rax
000000000000addf	cmpl	$0x0, (%rax)
000000000000ade2	jne	0xadf7
000000000000ade8	movq	-0x10(%rbp), %rax
000000000000adec	movb	0x2e(%rax), %cl
000000000000adef	movb	%cl, -0x64(%rbp)
000000000000adf2	jmp	0xae07
000000000000adf7	movq	-0x10(%rbp), %rax
000000000000adfb	movzbl	0x2e(%rax), %ecx
000000000000adff	andl	$0x7, %ecx
000000000000ae02	movb	%cl, %dl
000000000000ae04	movb	%dl, -0x64(%rbp)
000000000000ae07	jmp	0xaebb
000000000000ae0c	cmpl	$0x0, -0x24(%rbp)
000000000000ae10	je	0xae2a
000000000000ae16	xorl	%eax, %eax
000000000000ae18	movb	%al, %cl
000000000000ae1a	cmpl	$0x1, -0x24(%rbp)
000000000000ae1e	movb	%cl, -0xba(%rbp)
000000000000ae24	jne	0xae4b
000000000000ae2a	xorl	%eax, %eax
000000000000ae2c	movb	%al, %cl
000000000000ae2e	cmpl	$0x9, -0x28(%rbp)
000000000000ae32	movb	%cl, -0xba(%rbp)
000000000000ae38	jne	0xae4b
000000000000ae3e	cmpl	$0x0, -0x2c(%rbp)
000000000000ae42	sete	%al
000000000000ae45	movb	%al, -0xba(%rbp)
000000000000ae4b	movb	-0xba(%rbp), %al
000000000000ae51	xorb	$-0x1, %al
000000000000ae53	andb	$0x1, %al
000000000000ae55	movzbl	%al, %ecx
000000000000ae58	movslq	%ecx, %rdx
000000000000ae5b	cmpq	$0x0, %rdx
000000000000ae5f	je	0xae84
000000000000ae65	leaq	0x5f647(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000ae6c	leaq	0x5ea67(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ae73	leaq	0x5f829(%rip), %rcx ## literal pool for: "((constr_REG == ZYDIS_REG_CONSTRAINTS_UNUSED) || (constr_REG == ZYDIS_REG_CONSTRAINTS_NONE)) && (constr_RM == ZYDIS_REG_CONSTRAINTS_VSIB) && (constr_NDSNDD == ZYDIS_REG_CONSTRAINTS_UNUSED)"
000000000000ae7a	movl	$0x11c4, %edx
000000000000ae7f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ae84	jmp	0xae89
000000000000ae89	cmpl	$0x0, -0x24(%rbp)
000000000000ae8d	jne	0xae97
000000000000ae93	movb	$-0xf, -0x62(%rbp)
000000000000ae97	jmp	0xaebb
000000000000ae9c	leaq	0x5f610(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000aea3	leaq	0x5ea30(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000aeaa	leaq	0x60713(%rip), %rcx ## literal pool for: "0"
000000000000aeb1	movl	$0x11ce, %edx
000000000000aeb6	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000aebb	movzbl	-0x62(%rbp), %eax
000000000000aebf	movzbl	-0x63(%rbp), %ecx
000000000000aec3	cmpl	%ecx, %eax
000000000000aec5	je	0xaeeb
000000000000aecb	movzbl	-0x62(%rbp), %eax
000000000000aecf	movzbl	-0x64(%rbp), %ecx
000000000000aed3	cmpl	%ecx, %eax
000000000000aed5	je	0xaeeb
000000000000aedb	movzbl	-0x63(%rbp), %eax
000000000000aedf	movzbl	-0x64(%rbp), %ecx
000000000000aee3	cmpl	%ecx, %eax
000000000000aee5	jne	0xaef7
000000000000aeeb	movl	$0x80200003, -0x4(%rbp)
000000000000aef2	jmp	0xafb8
000000000000aef7	jmp	0xaefc
000000000000aefc	movl	-0x34(%rbp), %eax
000000000000aeff	movl	%eax, %ecx
000000000000af01	subl	$0x2, %ecx
000000000000af04	movl	%eax, -0xc0(%rbp)
000000000000af0a	movl	%ecx, -0xc4(%rbp)
000000000000af10	jb	0xaf4f
000000000000af16	jmp	0xaf1b
000000000000af1b	movl	-0xc0(%rbp), %eax
000000000000af21	subl	$0x2, %eax
000000000000af24	movl	%eax, -0xc8(%rbp)
000000000000af2a	je	0xaf54
000000000000af30	jmp	0xaf35
000000000000af35	movl	-0xc0(%rbp), %eax
000000000000af3b	subl	$0x3, %eax
000000000000af3e	movl	%eax, -0xcc(%rbp)
000000000000af44	je	0xaf73
000000000000af4a	jmp	0xaf92
000000000000af4f	jmp	0xafb1
000000000000af54	movq	-0x10(%rbp), %rax
000000000000af58	cmpb	$0x0, 0x2f(%rax)
000000000000af5c	jne	0xaf6e
000000000000af62	movl	$0x8020000a, -0x4(%rbp)
000000000000af69	jmp	0xafb8
000000000000af6e	jmp	0xafb1
000000000000af73	movq	-0x10(%rbp), %rax
000000000000af77	cmpb	$0x0, 0x2f(%rax)
000000000000af7b	je	0xaf8d
000000000000af81	movl	$0x8020000a, -0x4(%rbp)
000000000000af88	jmp	0xafb8
000000000000af8d	jmp	0xafb1
000000000000af92	leaq	0x5f51a(%rip), %rdi ## literal pool for: "ZydisCheckErrorConditions"
000000000000af99	leaq	0x5e93a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000afa0	leaq	0x6061d(%rip), %rcx ## literal pool for: "0"
000000000000afa7	movl	$0x11ed, %edx
000000000000afac	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000afb1	movl	$0x100000, -0x4(%rbp)
000000000000afb8	movl	-0x4(%rbp), %eax
000000000000afbb	addq	$0xd0, %rsp
000000000000afc2	popq	%rbp
000000000000afc3	retq
000000000000afc4	pushq	%rsi
000000000000afc5	hlt
000000000000afc6	.byte 0xff #bad opcode
000000000000afc7	decl	%ebx
000000000000afc9	hlt
000000000000afca	.byte 0xff #bad opcode
000000000000afcb	callq	*%rax
000000000000afcd	hlt
000000000000afce	.byte 0xff #bad opcode
000000000000afcf	pushq	%rbp
000000000000afd1	hlt
000000000000afd2	.byte 0xff #bad opcode
000000000000afd3	jmpq	*(%rdi)
000000000000afd5	cmc
000000000000afd6	.byte 0xff #bad opcode
000000000000afd7	ljmpl	*0x31fffff5(%rsi)
000000000000afdd	idivl	%edi
000000000000afdf	pushq	(%rcx)
000000000000afe1	idivl	%edi
000000000000afe3	pushq	(%rsi)
000000000000afe5	idivl	%edi
000000000000afe7	ljmpl	*-0x9(%rax)
000000000000afea	.byte 0xff #bad opcode
000000000000afeb	decl	-0x4d000009(%rbp)
000000000000aff1	idivl	%edi
000000000000aff3	incl	-0x1(%rax,%rdi,8)
000000000000aff7	jmpq	*-0x8(%rbx)
000000000000affa	.byte 0xff #bad opcode
000000000000affb	jmpq	*0x56fffff8(%rsi)
000000000000b001	stc
000000000000b002	.byte 0xff #bad opcode
000000000000b003	callq	*-0x7(%rsi)
000000000000b006	.byte 0xff #bad opcode
000000000000b007	pushq	(%rdx)
000000000000b009	cli
000000000000b00a	.byte 0xff #bad opcode
000000000000b00b	lcalll	*-0x7(%rbx)
000000000000b00e	.byte 0xff #bad opcode
000000000000b00f	incl	0x32fffff9(%rax)
000000000000b015	cli
000000000000b016	.byte 0xff #bad opcode
000000000000b017	pushq	(%rdx)
000000000000b019	cli
000000000000b01a	.byte 0xff #bad opcode
000000000000b01b	jmpq	*-0x55000007(%rbp)
000000000000b021	stc
000000000000b022	.byte 0xff #bad opcode
000000000000b023	jmpq	*%rax
000000000000b025	stc
000000000000b026	.byte 0xff #bad opcode
000000000000b027	.byte 0xff #bad opcode
000000000000b028	jmp	0x5d00b026
000000000000b02d	cli
000000000000b02e	.byte 0xff #bad opcode
000000000000b02f	ljmpl	*0x32fffffa(%rax)
000000000000b035	sti
000000000000b036	.byte 0xff #bad opcode
000000000000b037	incl	-0x7c000005(%rbx)
000000000000b03d	sti
000000000000b03e	.byte 0xff #bad opcode
000000000000b03f	incl	-0x7c000005(%rbx)
000000000000b045	sti
000000000000b046	.byte 0xff #bad opcode
000000000000b047	callq	*-0x5(%rcx)
000000000000b04a	.byte 0xff #bad opcode
000000000000b04b	decl	(%rdi)
000000000000b04d	.byte 0x1f #bad opcode
000000000000b04e	addb	%dl, 0x48(%rbp)
_ZydisInputNext:
000000000000b050	pushq	%rbp
000000000000b051	movq	%rsp, %rbp
000000000000b054	subq	$0x20, %rsp
000000000000b058	movq	%rdi, -0x10(%rbp)
000000000000b05c	movq	%rsi, -0x18(%rbp)
000000000000b060	movq	%rdx, -0x20(%rbp)
000000000000b064	cmpq	$0x0, -0x10(%rbp)
000000000000b069	setne	%al
000000000000b06c	xorb	$-0x1, %al
000000000000b06e	andb	$0x1, %al
000000000000b070	movzbl	%al, %ecx
000000000000b073	movslq	%ecx, %rdx
000000000000b076	cmpq	$0x0, %rdx
000000000000b07a	je	0xb09f
000000000000b080	leaq	0x5f6d9(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000b087	leaq	0x5e84c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b08e	leaq	0x5e87a(%rip), %rcx ## literal pool for: "context"
000000000000b095	movl	$0x15d, %edx
000000000000b09a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b09f	jmp	0xb0a4
000000000000b0a4	cmpq	$0x0, -0x18(%rbp)
000000000000b0a9	setne	%al
000000000000b0ac	xorb	$-0x1, %al
000000000000b0ae	andb	$0x1, %al
000000000000b0b0	movzbl	%al, %ecx
000000000000b0b3	movslq	%ecx, %rdx
000000000000b0b6	cmpq	$0x0, %rdx
000000000000b0ba	je	0xb0df
000000000000b0c0	leaq	0x5f699(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000b0c7	leaq	0x5e80c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b0ce	leaq	0x5e842(%rip), %rcx ## literal pool for: "instruction"
000000000000b0d5	movl	$0x15e, %edx
000000000000b0da	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b0df	jmp	0xb0e4
000000000000b0e4	cmpq	$0x0, -0x20(%rbp)
000000000000b0e9	setne	%al
000000000000b0ec	xorb	$-0x1, %al
000000000000b0ee	andb	$0x1, %al
000000000000b0f0	movzbl	%al, %ecx
000000000000b0f3	movslq	%ecx, %rdx
000000000000b0f6	cmpq	$0x0, %rdx
000000000000b0fa	je	0xb11f
000000000000b100	leaq	0x5f659(%rip), %rdi ## literal pool for: "ZydisInputNext"
000000000000b107	leaq	0x5e7cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b10e	leaq	0x5e840(%rip), %rcx ## literal pool for: "value"
000000000000b115	movl	$0x15f, %edx
000000000000b11a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b11f	jmp	0xb124
000000000000b124	movq	-0x18(%rbp), %rax
000000000000b128	movzbl	0x8(%rax), %ecx
000000000000b12c	cmpl	$0xf, %ecx
000000000000b12f	jl	0xb141
000000000000b135	movl	$0x80200002, -0x4(%rbp)
000000000000b13c	jmp	0xb1a0
000000000000b141	movq	-0x10(%rbp), %rax
000000000000b145	cmpq	$0x0, 0x10(%rax)
000000000000b14a	jbe	0xb199
000000000000b150	movq	-0x10(%rbp), %rax
000000000000b154	movq	0x8(%rax), %rcx
000000000000b158	movq	%rcx, %rdx
000000000000b15b	addq	$0x1, %rdx
000000000000b15f	movq	%rdx, 0x8(%rax)
000000000000b163	movb	(%rcx), %sil
000000000000b166	movq	-0x20(%rbp), %rax
000000000000b16a	movb	%sil, (%rax)
000000000000b16d	movq	-0x18(%rbp), %rax
000000000000b171	movb	0x8(%rax), %sil
000000000000b175	addb	$0x1, %sil
000000000000b179	movb	%sil, 0x8(%rax)
000000000000b17d	movq	-0x10(%rbp), %rax
000000000000b181	movq	0x10(%rax), %rcx
000000000000b185	addq	$-0x1, %rcx
000000000000b189	movq	%rcx, 0x10(%rax)
000000000000b18d	movl	$0x100000, -0x4(%rbp)
000000000000b194	jmp	0xb1a0
000000000000b199	movl	$0x80200000, -0x4(%rbp)
000000000000b1a0	movl	-0x4(%rbp), %eax
000000000000b1a3	addq	$0x20, %rsp
000000000000b1a7	popq	%rbp
000000000000b1a8	retq
000000000000b1a9	nopl	(%rax)
_ZydisSetAttributes:
000000000000b1b0	pushq	%rbp
000000000000b1b1	movq	%rsp, %rbp
000000000000b1b4	subq	$0x80, %rsp
000000000000b1bb	movq	%rdi, -0x8(%rbp)
000000000000b1bf	movq	%rsi, -0x10(%rbp)
000000000000b1c3	movq	%rdx, -0x18(%rbp)
000000000000b1c7	cmpq	$0x0, -0x8(%rbp)
000000000000b1cc	setne	%al
000000000000b1cf	xorb	$-0x1, %al
000000000000b1d1	andb	$0x1, %al
000000000000b1d3	movzbl	%al, %ecx
000000000000b1d6	movslq	%ecx, %rdx
000000000000b1d9	cmpq	$0x0, %rdx
000000000000b1dd	je	0xb202
000000000000b1e3	leaq	0x5f585(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b1ea	leaq	0x5e6e9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b1f1	leaq	0x5e717(%rip), %rcx ## literal pool for: "context"
000000000000b1f8	movl	$0x857, %edx
000000000000b1fd	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b202	jmp	0xb207
000000000000b207	cmpq	$0x0, -0x10(%rbp)
000000000000b20c	setne	%al
000000000000b20f	xorb	$-0x1, %al
000000000000b211	andb	$0x1, %al
000000000000b213	movzbl	%al, %ecx
000000000000b216	movslq	%ecx, %rdx
000000000000b219	cmpq	$0x0, %rdx
000000000000b21d	je	0xb242
000000000000b223	leaq	0x5f545(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b22a	leaq	0x5e6a9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b231	leaq	0x5e6df(%rip), %rcx ## literal pool for: "instruction"
000000000000b238	movl	$0x858, %edx
000000000000b23d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b242	jmp	0xb247
000000000000b247	cmpq	$0x0, -0x18(%rbp)
000000000000b24c	setne	%al
000000000000b24f	xorb	$-0x1, %al
000000000000b251	andb	$0x1, %al
000000000000b253	movzbl	%al, %ecx
000000000000b256	movslq	%ecx, %rdx
000000000000b259	cmpq	$0x0, %rdx
000000000000b25d	je	0xb282
000000000000b263	leaq	0x5f505(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b26a	leaq	0x5e669(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b271	leaq	0x5eec2(%rip), %rcx ## literal pool for: "definition"
000000000000b278	movl	$0x859, %edx
000000000000b27d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b282	jmp	0xb287
000000000000b287	movq	-0x18(%rbp), %rax
000000000000b28b	movb	0xa(%rax), %cl
000000000000b28e	shrb	%cl
000000000000b290	andb	$0x3, %cl
000000000000b293	movzbl	%cl, %edx
000000000000b296	cmpl	$0x0, %edx
000000000000b299	je	0xb31f
000000000000b29f	movq	-0x18(%rbp), %rax
000000000000b2a3	movb	0xa(%rax), %cl
000000000000b2a6	shrb	%cl
000000000000b2a8	andb	$0x3, %cl
000000000000b2ab	movzbl	%cl, %edx
000000000000b2ae	movl	%edx, %eax
000000000000b2b0	cmpq	$0x4, %rax
000000000000b2b4	setb	%cl
000000000000b2b7	xorb	$-0x1, %cl
000000000000b2ba	andb	$0x1, %cl
000000000000b2bd	movzbl	%cl, %edx
000000000000b2c0	movslq	%edx, %rax
000000000000b2c3	cmpq	$0x0, %rax
000000000000b2c7	je	0xb2ec
000000000000b2cd	leaq	0x5f49b(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b2d4	leaq	0x5e5ff(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b2db	leaq	0x5f4a0(%rip), %rcx ## literal pool for: "definition->cpu_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000b2e2	movl	$0x864, %edx
000000000000b2e7	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b2ec	jmp	0xb2f1
000000000000b2f1	movq	-0x18(%rbp), %rax
000000000000b2f5	movb	0xa(%rax), %cl
000000000000b2f8	shrb	%cl
000000000000b2fa	andb	$0x3, %cl
000000000000b2fd	movzbl	%cl, %edx
000000000000b300	movl	%edx, %eax
000000000000b302	leaq	_ZydisSetAttributes.mapping(%rip), %rsi
000000000000b309	movq	(%rsi,%rax,8), %rax
000000000000b30d	movq	-0x10(%rbp), %rsi
000000000000b311	orq	0x430(%rsi), %rax
000000000000b318	movq	%rax, 0x430(%rsi)
000000000000b31f	movq	-0x18(%rbp), %rax
000000000000b323	movb	0xa(%rax), %cl
000000000000b326	shrb	$0x3, %cl
000000000000b329	andb	$0x3, %cl
000000000000b32c	movzbl	%cl, %edx
000000000000b32f	cmpl	$0x0, %edx
000000000000b332	je	0xb3ba
000000000000b338	movq	-0x18(%rbp), %rax
000000000000b33c	movb	0xa(%rax), %cl
000000000000b33f	shrb	$0x3, %cl
000000000000b342	andb	$0x3, %cl
000000000000b345	movzbl	%cl, %edx
000000000000b348	movl	%edx, %eax
000000000000b34a	cmpq	$0x4, %rax
000000000000b34e	setb	%cl
000000000000b351	xorb	$-0x1, %cl
000000000000b354	andb	$0x1, %cl
000000000000b357	movzbl	%cl, %edx
000000000000b35a	movslq	%edx, %rax
000000000000b35d	cmpq	$0x0, %rax
000000000000b361	je	0xb386
000000000000b367	leaq	0x5f401(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b36e	leaq	0x5e565(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b375	leaq	0x5f447(%rip), %rcx ## literal pool for: "definition->fpu_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000b37c	movl	$0x871, %edx
000000000000b381	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b386	jmp	0xb38b
000000000000b38b	movq	-0x18(%rbp), %rax
000000000000b38f	movb	0xa(%rax), %cl
000000000000b392	shrb	$0x3, %cl
000000000000b395	andb	$0x3, %cl
000000000000b398	movzbl	%cl, %edx
000000000000b39b	movl	%edx, %eax
000000000000b39d	leaq	_ZydisSetAttributes.mapping.60(%rip), %rsi
000000000000b3a4	movq	(%rsi,%rax,8), %rax
000000000000b3a8	movq	-0x10(%rbp), %rsi
000000000000b3ac	orq	0x430(%rsi), %rax
000000000000b3b3	movq	%rax, 0x430(%rsi)
000000000000b3ba	movq	-0x18(%rbp), %rax
000000000000b3be	movb	0xa(%rax), %cl
000000000000b3c1	shrb	$0x5, %cl
000000000000b3c4	andb	$0x3, %cl
000000000000b3c7	movzbl	%cl, %edx
000000000000b3ca	cmpl	$0x0, %edx
000000000000b3cd	je	0xb455
000000000000b3d3	movq	-0x18(%rbp), %rax
000000000000b3d7	movb	0xa(%rax), %cl
000000000000b3da	shrb	$0x5, %cl
000000000000b3dd	andb	$0x3, %cl
000000000000b3e0	movzbl	%cl, %edx
000000000000b3e3	movl	%edx, %eax
000000000000b3e5	cmpq	$0x4, %rax
000000000000b3e9	setb	%cl
000000000000b3ec	xorb	$-0x1, %cl
000000000000b3ef	andb	$0x1, %cl
000000000000b3f2	movzbl	%cl, %edx
000000000000b3f5	movslq	%edx, %rax
000000000000b3f8	cmpq	$0x0, %rax
000000000000b3fc	je	0xb421
000000000000b402	leaq	0x5f366(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000b409	leaq	0x5e4ca(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000b410	leaq	0x5f3ed(%rip), %rcx ## literal pool for: "definition->xmm_state < (sizeof(mapping) / sizeof((mapping)[0]))"
000000000000b417	movl	$0x87e, %edx
000000000000b41c	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000b421	jmp	0xb426
000000000000b426	movq	-0x18(%rbp), %rax
000000000000b42a	movb	0xa(%rax), %cl
000000000000b42d	shrb	$0x5, %cl
000000000000b430	andb	$0x3, %cl
000000000000b433	movzbl	%cl, %edx
000000000000b436	movl	%edx, %eax
000000000000b438	leaq	_ZydisSetAttributes.mapping.62(%rip), %rsi
000000000000b43f	movq	(%rsi,%rax,8), %rax
000000000000b443	movq	-0x10(%rbp), %rsi
000000000000b447	orq	0x430(%rsi), %rax
000000000000b44e	movq	%rax, 0x430(%rsi)
000000000000b455	movq	-0x10(%rbp), %rax
000000000000b459	movl	0xc(%rax), %ecx
000000000000b45c	testl	%ecx, %ecx
000000000000b45e	movl	%ecx, -0x24(%rbp)
000000000000b461	je	0xb482
000000000000b467	jmp	0xb46c
000000000000b46c	movl	-0x24(%rbp), %eax
000000000000b46f	decl	%eax
000000000000b471	subl	$0x5, %eax
000000000000b474	movl	%eax, -0x28(%rbp)
000000000000b477	jb	0xbbdb
000000000000b47d	jmp	0xbd84
000000000000b482	movq	-0x18(%rbp), %rax
000000000000b486	movq	%rax, -0x20(%rbp)
000000000000b48a	movq	-0x20(%rbp), %rax
000000000000b48e	movl	0x8(%rax), %ecx
000000000000b491	movl	%ecx, %eax
000000000000b493	shrq	$0x17, %rax
000000000000b497	movb	%al, %dl
000000000000b499	andb	$0x1, %dl
000000000000b49c	cmpb	$0x0, %dl
000000000000b49f	je	0xb4be
000000000000b4a5	movq	-0x10(%rbp), %rax
000000000000b4a9	movq	0x430(%rax), %rcx
000000000000b4b0	orq	$0x100, %rcx
000000000000b4b7	movq	%rcx, 0x430(%rax)
000000000000b4be	movq	-0x20(%rbp), %rax
000000000000b4c2	movb	0xb(%rax), %cl
000000000000b4c5	andb	$0x1, %cl
000000000000b4c8	cmpb	$0x0, %cl
000000000000b4cb	je	0xb52f
000000000000b4d1	movq	-0x10(%rbp), %rax
000000000000b4d5	movq	0x430(%rax), %rcx
000000000000b4dc	orq	$0x200, %rcx
000000000000b4e3	movq	%rcx, 0x430(%rax)
000000000000b4ea	movq	-0x8(%rbp), %rax
000000000000b4ee	cmpb	$0x0, 0x18(%rax)
000000000000b4f2	je	0xb52a
000000000000b4f8	movq	-0x10(%rbp), %rax
000000000000b4fc	movq	0x430(%rax), %rcx
000000000000b503	orq	$0x80000, %rcx
000000000000b50a	movq	%rcx, 0x430(%rax)
000000000000b511	movq	-0x10(%rbp), %rax
000000000000b515	movq	-0x8(%rbp), %rcx
000000000000b519	movzbl	0x1d(%rcx), %edx
000000000000b51d	movl	%edx, %ecx
000000000000b51f	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b52a	jmp	0xb52f
000000000000b52f	movq	-0x20(%rbp), %rax
000000000000b533	movl	0x8(%rax), %ecx
000000000000b536	movl	%ecx, %eax
000000000000b538	shrq	$0x19, %rax
000000000000b53c	movb	%al, %dl
000000000000b53e	andb	$0x1, %dl
000000000000b541	cmpb	$0x0, %dl
000000000000b544	je	0xb563
000000000000b54a	movq	-0x10(%rbp), %rax
000000000000b54e	movq	0x430(%rax), %rcx
000000000000b555	orq	$0x400, %rcx
000000000000b55c	movq	%rcx, 0x430(%rax)
000000000000b563	movq	-0x20(%rbp), %rax
000000000000b567	movl	0x8(%rax), %ecx
000000000000b56a	movl	%ecx, %eax
000000000000b56c	shrq	$0x1a, %rax
000000000000b570	movb	%al, %dl
000000000000b572	andb	$0x1, %dl
000000000000b575	cmpb	$0x0, %dl
000000000000b578	je	0xb597
000000000000b57e	movq	-0x10(%rbp), %rax
000000000000b582	movq	0x430(%rax), %rcx
000000000000b589	orq	$0x800, %rcx
000000000000b590	movq	%rcx, 0x430(%rax)
000000000000b597	movq	-0x20(%rbp), %rax
000000000000b59b	movl	0x8(%rax), %ecx
000000000000b59e	movl	%ecx, %eax
000000000000b5a0	shrq	$0x1b, %rax
000000000000b5a4	movb	%al, %dl
000000000000b5a6	andb	$0x1, %dl
000000000000b5a9	cmpb	$0x0, %dl
000000000000b5ac	je	0xb5cb
000000000000b5b2	movq	-0x10(%rbp), %rax
000000000000b5b6	movq	0x430(%rax), %rcx
000000000000b5bd	orq	$0x1000, %rcx
000000000000b5c4	movq	%rcx, 0x430(%rax)
000000000000b5cb	movq	-0x20(%rbp), %rax
000000000000b5cf	movl	0x8(%rax), %ecx
000000000000b5d2	movl	%ecx, %eax
000000000000b5d4	shrq	$0x1c, %rax
000000000000b5d8	movb	%al, %dl
000000000000b5da	andb	$0x1, %dl
000000000000b5dd	cmpb	$0x0, %dl
000000000000b5e0	je	0xb5ff
000000000000b5e6	movq	-0x10(%rbp), %rax
000000000000b5ea	movq	0x430(%rax), %rcx
000000000000b5f1	orq	$__ZN12ModContainerD2Ev, %rcx ## ModContainer::~ModContainer()
000000000000b5f8	movq	%rcx, 0x430(%rax)
000000000000b5ff	movq	-0x20(%rbp), %rax
000000000000b603	movl	0x8(%rax), %ecx
000000000000b606	movl	%ecx, %eax
000000000000b608	shrq	$0x1d, %rax
000000000000b60c	movb	%al, %dl
000000000000b60e	andb	$0x1, %dl
000000000000b611	cmpb	$0x0, %dl
000000000000b614	je	0xb633
000000000000b61a	movq	-0x10(%rbp), %rax
000000000000b61e	movq	0x430(%rax), %rcx
000000000000b625	orq	$0x4000, %rcx
000000000000b62c	movq	%rcx, 0x430(%rax)
000000000000b633	movq	-0x20(%rbp), %rax
000000000000b637	movl	0x8(%rax), %ecx
000000000000b63a	movl	%ecx, %eax
000000000000b63c	shrq	$0x1e, %rax
000000000000b640	movb	%al, %dl
000000000000b642	andb	$0x1, %dl
000000000000b645	cmpb	$0x0, %dl
000000000000b648	je	0xb667
000000000000b64e	movq	-0x10(%rbp), %rax
000000000000b652	movq	0x430(%rax), %rcx
000000000000b659	orq	$0x8000, %rcx
000000000000b660	movq	%rcx, 0x430(%rax)
000000000000b667	movq	-0x20(%rbp), %rax
000000000000b66b	movl	0x8(%rax), %ecx
000000000000b66e	movl	%ecx, %eax
000000000000b670	shrq	$0x1f, %rax
000000000000b674	movb	%al, %dl
000000000000b676	cmpb	$0x0, %dl
000000000000b679	je	0xb698
000000000000b67f	movq	-0x10(%rbp), %rax
000000000000b683	movq	0x430(%rax), %rcx
000000000000b68a	orq	$0x10000, %rcx
000000000000b691	movq	%rcx, 0x430(%rax)
000000000000b698	movq	-0x8(%rbp), %rax
000000000000b69c	movzbl	0x19(%rax), %ecx
000000000000b6a0	movl	%ecx, %edx
000000000000b6a2	subl	$0xf2, %edx
000000000000b6a8	movl	%ecx, -0x2c(%rbp)
000000000000b6ab	movl	%edx, -0x30(%rbp)
000000000000b6ae	je	0xb6cf
000000000000b6b4	jmp	0xb6b9
000000000000b6b9	movl	-0x2c(%rbp), %eax
000000000000b6bc	subl	$0xf3, %eax
000000000000b6c1	movl	%eax, -0x34(%rbp)
000000000000b6c4	je	0xb7ce
000000000000b6ca	jmp	0xb8b9
000000000000b6cf	movq	-0x10(%rbp), %rax
000000000000b6d3	movq	0x430(%rax), %rax
000000000000b6da	andq	$0x1000, %rax
000000000000b6e0	cmpq	$0x0, %rax
000000000000b6e4	je	0xb708
000000000000b6ea	movq	-0x10(%rbp), %rax
000000000000b6ee	movq	0x430(%rax), %rcx
000000000000b6f5	orq	$0x400000, %rcx
000000000000b6fc	movq	%rcx, 0x430(%rax)
000000000000b703	jmp	0xb8be
000000000000b708	movq	-0x10(%rbp), %rax
000000000000b70c	movq	0x430(%rax), %rax
000000000000b713	andq	$0x4000, %rax
000000000000b719	cmpq	$0x0, %rax
000000000000b71d	je	0xb77c
000000000000b723	movq	-0x10(%rbp), %rax
000000000000b727	movq	0x430(%rax), %rax
000000000000b72e	andq	$0x80000, %rax
000000000000b734	cmpq	$0x0, %rax
000000000000b738	jne	0xb759
000000000000b73e	movq	-0x20(%rbp), %rax
000000000000b742	movl	0x8(%rax), %ecx
000000000000b745	movl	%ecx, %eax
000000000000b747	shrq	$0x1f, %rax
000000000000b74b	movb	%al, %dl
000000000000b74d	movzbl	%dl, %ecx
000000000000b750	cmpl	$0x0, %ecx
000000000000b753	je	0xb777
000000000000b759	movq	-0x10(%rbp), %rax
000000000000b75d	movq	0x430(%rax), %rcx
000000000000b764	orq	$0x1000000, %rcx
000000000000b76b	movq	%rcx, 0x430(%rax)
000000000000b772	jmp	0xb8be
000000000000b777	jmp	0xb77c
000000000000b77c	movq	-0x8(%rbp), %rax
000000000000b780	movq	(%rax), %rax
000000000000b783	movzbl	0xb(%rax), %ecx
000000000000b787	cmpl	$0x0, %ecx
000000000000b78a	je	0xb7c9
000000000000b790	movq	-0x10(%rbp), %rax
000000000000b794	movq	0x430(%rax), %rax
000000000000b79b	andq	$__ZN12ModContainerD2Ev, %rax ## ModContainer::~ModContainer()
000000000000b7a1	cmpq	$0x0, %rax
000000000000b7a5	je	0xb7c9
000000000000b7ab	movq	-0x10(%rbp), %rax
000000000000b7af	movq	0x430(%rax), %rcx
000000000000b7b6	orq	$0x800000, %rcx
000000000000b7bd	movq	%rcx, 0x430(%rax)
000000000000b7c4	jmp	0xb8be
000000000000b7c9	jmp	0xb8be
000000000000b7ce	movq	-0x10(%rbp), %rax
000000000000b7d2	movq	0x430(%rax), %rax
000000000000b7d9	andq	$0x400, %rax
000000000000b7df	cmpq	$0x0, %rax
000000000000b7e3	je	0xb807
000000000000b7e9	movq	-0x10(%rbp), %rax
000000000000b7ed	movq	0x430(%rax), %rcx
000000000000b7f4	orq	$0x100000, %rcx
000000000000b7fb	movq	%rcx, 0x430(%rax)
000000000000b802	jmp	0xb8be
000000000000b807	movq	-0x10(%rbp), %rax
000000000000b80b	movq	0x430(%rax), %rax
000000000000b812	andq	$0x800, %rax
000000000000b818	cmpq	$0x0, %rax
000000000000b81c	je	0xb840
000000000000b822	movq	-0x10(%rbp), %rax
000000000000b826	movq	0x430(%rax), %rcx
000000000000b82d	orq	$0x200000, %rcx
000000000000b834	movq	%rcx, 0x430(%rax)
000000000000b83b	jmp	0xb8be
000000000000b840	movq	-0x10(%rbp), %rax
000000000000b844	movq	0x430(%rax), %rax
000000000000b84b	andq	$0x8000, %rax
000000000000b851	cmpq	$0x0, %rax
000000000000b855	je	0xb8b4
000000000000b85b	movq	-0x10(%rbp), %rax
000000000000b85f	movq	0x430(%rax), %rax
000000000000b866	andq	$0x80000, %rax
000000000000b86c	cmpq	$0x0, %rax
000000000000b870	jne	0xb891
000000000000b876	movq	-0x20(%rbp), %rax
000000000000b87a	movl	0x8(%rax), %ecx
000000000000b87d	movl	%ecx, %eax
000000000000b87f	shrq	$0x1f, %rax
000000000000b883	movb	%al, %dl
000000000000b885	movzbl	%dl, %ecx
000000000000b888	cmpl	$0x0, %ecx
000000000000b88b	je	0xb8af
000000000000b891	movq	-0x10(%rbp), %rax
000000000000b895	movq	0x430(%rax), %rcx
000000000000b89c	orq	$0x2000000, %rcx
000000000000b8a3	movq	%rcx, 0x430(%rax)
000000000000b8aa	jmp	0xb8be
000000000000b8af	jmp	0xb8b4
000000000000b8b4	jmp	0xb8be
000000000000b8b9	jmp	0xb8be
000000000000b8be	movq	-0x10(%rbp), %rax
000000000000b8c2	movq	-0x8(%rbp), %rcx
000000000000b8c6	movzbl	0x1e(%rcx), %edx
000000000000b8ca	movl	%edx, %ecx
000000000000b8cc	cmpl	$0x0, 0x4cc(%rax,%rcx,8)
000000000000b8d4	jne	0xb90e
000000000000b8da	movq	-0x10(%rbp), %rax
000000000000b8de	movq	0x430(%rax), %rax
000000000000b8e5	andq	$0x3f00000, %rax
000000000000b8eb	cmpq	$0x0, %rax
000000000000b8ef	je	0xb90e
000000000000b8f5	movq	-0x10(%rbp), %rax
000000000000b8f9	movq	-0x8(%rbp), %rcx
000000000000b8fd	movzbl	0x1e(%rcx), %edx
000000000000b901	movl	%edx, %ecx
000000000000b903	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b90e	movq	-0x20(%rbp), %rax
000000000000b912	movb	0xc(%rax), %cl
000000000000b915	andb	$0x1, %cl
000000000000b918	cmpb	$0x0, %cl
000000000000b91b	je	0xb9e4
000000000000b921	movq	-0x10(%rbp), %rax
000000000000b925	movq	0x430(%rax), %rcx
000000000000b92c	orq	$__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEED2Ev, %rcx ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~new_allocator()
000000000000b933	movq	%rcx, 0x430(%rax)
000000000000b93a	movq	-0x8(%rbp), %rax
000000000000b93e	movzbl	0x1a(%rax), %edx
000000000000b942	movl	%edx, %esi
000000000000b944	subl	$0x2e, %esi
000000000000b947	movl	%edx, -0x38(%rbp)
000000000000b94a	movl	%esi, -0x3c(%rbp)
000000000000b94d	je	0xb96c
000000000000b953	jmp	0xb958
000000000000b958	movl	-0x38(%rbp), %eax
000000000000b95b	subl	$0x3e, %eax
000000000000b95e	movl	%eax, -0x40(%rbp)
000000000000b961	je	0xb9a3
000000000000b967	jmp	0xb9da
000000000000b96c	movq	-0x10(%rbp), %rax
000000000000b970	movq	0x430(%rax), %rcx
000000000000b977	orq	$0x4000000, %rcx
000000000000b97e	movq	%rcx, 0x430(%rax)
000000000000b985	movq	-0x10(%rbp), %rax
000000000000b989	movq	-0x8(%rbp), %rcx
000000000000b98d	movzbl	0x1f(%rcx), %edx
000000000000b991	movl	%edx, %ecx
000000000000b993	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b99e	jmp	0xb9df
000000000000b9a3	movq	-0x10(%rbp), %rax
000000000000b9a7	movq	0x430(%rax), %rcx
000000000000b9ae	orq	$0x8000000, %rcx
000000000000b9b5	movq	%rcx, 0x430(%rax)
000000000000b9bc	movq	-0x10(%rbp), %rax
000000000000b9c0	movq	-0x8(%rbp), %rcx
000000000000b9c4	movzbl	0x1f(%rcx), %edx
000000000000b9c8	movl	%edx, %ecx
000000000000b9ca	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000b9d5	jmp	0xb9df
000000000000b9da	jmp	0xb9df
000000000000b9df	jmp	0xbbd6
000000000000b9e4	movq	-0x20(%rbp), %rax
000000000000b9e8	movb	0xc(%rax), %cl
000000000000b9eb	shrb	%cl
000000000000b9ed	andb	$0x1, %cl
000000000000b9f0	cmpb	$0x0, %cl
000000000000b9f3	je	0xba12
000000000000b9f9	movq	-0x10(%rbp), %rax
000000000000b9fd	movq	0x430(%rax), %rcx
000000000000ba04	orq	$0x40000, %rcx
000000000000ba0b	movq	%rcx, 0x430(%rax)
000000000000ba12	movq	-0x8(%rbp), %rax
000000000000ba16	movzbl	0x1b(%rax), %ecx
000000000000ba1a	cmpl	$0x0, %ecx
000000000000ba1d	je	0xbb99
000000000000ba23	movq	-0x20(%rbp), %rax
000000000000ba27	movb	0xc(%rax), %cl
000000000000ba2a	shrb	%cl
000000000000ba2c	andb	$0x1, %cl
000000000000ba2f	movzbl	%cl, %edx
000000000000ba32	cmpl	$0x0, %edx
000000000000ba35	je	0xbb99
000000000000ba3b	movq	-0x8(%rbp), %rax
000000000000ba3f	movzbl	0x1b(%rax), %ecx
000000000000ba43	movl	%ecx, %edx
000000000000ba45	subl	$0x26, %edx
000000000000ba48	movl	%ecx, -0x44(%rbp)
000000000000ba4b	movl	%edx, -0x48(%rbp)
000000000000ba4e	je	0xbb17
000000000000ba54	jmp	0xba59
000000000000ba59	movl	-0x44(%rbp), %eax
000000000000ba5c	subl	$0x2e, %eax
000000000000ba5f	movl	%eax, -0x4c(%rbp)
000000000000ba62	je	0xbabd
000000000000ba68	jmp	0xba6d
000000000000ba6d	movl	-0x44(%rbp), %eax
000000000000ba70	subl	$0x36, %eax
000000000000ba73	movl	%eax, -0x50(%rbp)
000000000000ba76	je	0xbadb
000000000000ba7c	jmp	0xba81
000000000000ba81	movl	-0x44(%rbp), %eax
000000000000ba84	subl	$0x3e, %eax
000000000000ba87	movl	%eax, -0x54(%rbp)
000000000000ba8a	je	0xbaf9
000000000000ba90	jmp	0xba95
000000000000ba95	movl	-0x44(%rbp), %eax
000000000000ba98	subl	$0x64, %eax
000000000000ba9b	movl	%eax, -0x58(%rbp)
000000000000ba9e	je	0xbb33
000000000000baa4	jmp	0xbaa9
000000000000baa9	movl	-0x44(%rbp), %eax
000000000000baac	subl	$0x65, %eax
000000000000baaf	movl	%eax, -0x5c(%rbp)
000000000000bab2	je	0xbb54
000000000000bab8	jmp	0xbb75
000000000000babd	movq	-0x10(%rbp), %rax
000000000000bac1	movq	0x430(%rax), %rcx
000000000000bac8	orq	$0x10000000, %rcx
000000000000bacf	movq	%rcx, 0x430(%rax)
000000000000bad6	jmp	0xbb94
000000000000badb	movq	-0x10(%rbp), %rax
000000000000badf	movq	0x430(%rax), %rcx
000000000000bae6	orq	$0x20000000, %rcx
000000000000baed	movq	%rcx, 0x430(%rax)
000000000000baf4	jmp	0xbb94
000000000000baf9	movq	-0x10(%rbp), %rax
000000000000bafd	movq	0x430(%rax), %rcx
000000000000bb04	orq	$0x40000000, %rcx
000000000000bb0b	movq	%rcx, 0x430(%rax)
000000000000bb12	jmp	0xbb94
000000000000bb17	movq	-0x10(%rbp), %rax
000000000000bb1b	movl	$0x80000000, %ecx
000000000000bb20	orq	0x430(%rax), %rcx
000000000000bb27	movq	%rcx, 0x430(%rax)
000000000000bb2e	jmp	0xbb94
000000000000bb33	movq	-0x10(%rbp), %rax
000000000000bb37	movabsq	$0x100000000, %rcx
000000000000bb41	orq	0x430(%rax), %rcx
000000000000bb48	movq	%rcx, 0x430(%rax)
000000000000bb4f	jmp	0xbb94
000000000000bb54	movq	-0x10(%rbp), %rax
000000000000bb58	movabsq	$0x200000000, %rcx
000000000000bb62	orq	0x430(%rax), %rcx
000000000000bb69	movq	%rcx, 0x430(%rax)
000000000000bb70	jmp	0xbb94
000000000000bb75	leaq	0x5ebf3(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000bb7c	leaq	0x5dd57(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bb83	leaq	0x5fa3a(%rip), %rcx ## literal pool for: "0"
000000000000bb8a	movl	$0x91d, %edx
000000000000bb8f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000bb94	jmp	0xbb99
000000000000bb99	movq	-0x10(%rbp), %rax
000000000000bb9d	movabsq	$0x3f0000000, %rcx
000000000000bba7	andq	0x430(%rax), %rcx
000000000000bbae	cmpq	$0x0, %rcx
000000000000bbb2	je	0xbbd1
000000000000bbb8	movq	-0x10(%rbp), %rax
000000000000bbbc	movq	-0x8(%rbp), %rcx
000000000000bbc0	movzbl	0x22(%rcx), %edx
000000000000bbc4	movl	%edx, %ecx
000000000000bbc6	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000bbd1	jmp	0xbbd6
000000000000bbd6	jmp	0xbda3
000000000000bbdb	movq	-0x8(%rbp), %rax
000000000000bbdf	cmpb	$0x0, 0x1b(%rax)
000000000000bbe3	je	0xbd7f
000000000000bbe9	movq	-0x8(%rbp), %rax
000000000000bbed	movzbl	0x1b(%rax), %ecx
000000000000bbf1	movl	%ecx, %edx
000000000000bbf3	subl	$0x26, %edx
000000000000bbf6	movl	%ecx, -0x60(%rbp)
000000000000bbf9	movl	%edx, -0x64(%rbp)
000000000000bbfc	je	0xbcc5
000000000000bc02	jmp	0xbc07
000000000000bc07	movl	-0x60(%rbp), %eax
000000000000bc0a	subl	$0x2e, %eax
000000000000bc0d	movl	%eax, -0x68(%rbp)
000000000000bc10	je	0xbc6b
000000000000bc16	jmp	0xbc1b
000000000000bc1b	movl	-0x60(%rbp), %eax
000000000000bc1e	subl	$0x36, %eax
000000000000bc21	movl	%eax, -0x6c(%rbp)
000000000000bc24	je	0xbc89
000000000000bc2a	jmp	0xbc2f
000000000000bc2f	movl	-0x60(%rbp), %eax
000000000000bc32	subl	$0x3e, %eax
000000000000bc35	movl	%eax, -0x70(%rbp)
000000000000bc38	je	0xbca7
000000000000bc3e	jmp	0xbc43
000000000000bc43	movl	-0x60(%rbp), %eax
000000000000bc46	subl	$0x64, %eax
000000000000bc49	movl	%eax, -0x74(%rbp)
000000000000bc4c	je	0xbce1
000000000000bc52	jmp	0xbc57
000000000000bc57	movl	-0x60(%rbp), %eax
000000000000bc5a	subl	$0x65, %eax
000000000000bc5d	movl	%eax, -0x78(%rbp)
000000000000bc60	je	0xbd02
000000000000bc66	jmp	0xbd23
000000000000bc6b	movq	-0x10(%rbp), %rax
000000000000bc6f	movq	0x430(%rax), %rcx
000000000000bc76	orq	$0x10000000, %rcx
000000000000bc7d	movq	%rcx, 0x430(%rax)
000000000000bc84	jmp	0xbd42
000000000000bc89	movq	-0x10(%rbp), %rax
000000000000bc8d	movq	0x430(%rax), %rcx
000000000000bc94	orq	$0x20000000, %rcx
000000000000bc9b	movq	%rcx, 0x430(%rax)
000000000000bca2	jmp	0xbd42
000000000000bca7	movq	-0x10(%rbp), %rax
000000000000bcab	movq	0x430(%rax), %rcx
000000000000bcb2	orq	$0x40000000, %rcx
000000000000bcb9	movq	%rcx, 0x430(%rax)
000000000000bcc0	jmp	0xbd42
000000000000bcc5	movq	-0x10(%rbp), %rax
000000000000bcc9	movl	$0x80000000, %ecx
000000000000bcce	orq	0x430(%rax), %rcx
000000000000bcd5	movq	%rcx, 0x430(%rax)
000000000000bcdc	jmp	0xbd42
000000000000bce1	movq	-0x10(%rbp), %rax
000000000000bce5	movabsq	$0x100000000, %rcx
000000000000bcef	orq	0x430(%rax), %rcx
000000000000bcf6	movq	%rcx, 0x430(%rax)
000000000000bcfd	jmp	0xbd42
000000000000bd02	movq	-0x10(%rbp), %rax
000000000000bd06	movabsq	$0x200000000, %rcx
000000000000bd10	orq	0x430(%rax), %rcx
000000000000bd17	movq	%rcx, 0x430(%rax)
000000000000bd1e	jmp	0xbd42
000000000000bd23	leaq	0x5ea45(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000bd2a	leaq	0x5dba9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bd31	leaq	0x5f88c(%rip), %rcx ## literal pool for: "0"
000000000000bd38	movl	$0x945, %edx
000000000000bd3d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000bd42	movq	-0x10(%rbp), %rax
000000000000bd46	movabsq	$0x3f0000000, %rcx
000000000000bd50	andq	0x430(%rax), %rcx
000000000000bd57	cmpq	$0x0, %rcx
000000000000bd5b	je	0xbd7a
000000000000bd61	movq	-0x10(%rbp), %rax
000000000000bd65	movq	-0x8(%rbp), %rcx
000000000000bd69	movzbl	0x22(%rcx), %edx
000000000000bd6d	movl	%edx, %ecx
000000000000bd6f	movl	$0x1, 0x4cc(%rax,%rcx,8)
000000000000bd7a	jmp	0xbd7f
000000000000bd7f	jmp	0xbda3
000000000000bd84	leaq	0x5e9e4(%rip), %rdi ## literal pool for: "ZydisSetAttributes"
000000000000bd8b	leaq	0x5db48(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bd92	leaq	0x5f82b(%rip), %rcx ## literal pool for: "0"
000000000000bd99	movl	$0x94f, %edx
000000000000bd9e	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000bda3	addq	$0x80, %rsp
000000000000bdaa	popq	%rbp
000000000000bdab	retq
000000000000bdac	nopl	(%rax)
_ZydisSetAVXInformation:
000000000000bdb0	pushq	%rbp
000000000000bdb1	movq	%rsp, %rbp
000000000000bdb4	subq	$0x130, %rsp
000000000000bdbb	movq	%rdi, -0x8(%rbp)
000000000000bdbf	movq	%rsi, -0x10(%rbp)
000000000000bdc3	movq	%rdx, -0x18(%rbp)
000000000000bdc7	cmpq	$0x0, -0x8(%rbp)
000000000000bdcc	setne	%al
000000000000bdcf	xorb	$-0x1, %al
000000000000bdd1	andb	$0x1, %al
000000000000bdd3	movzbl	%al, %ecx
000000000000bdd6	movslq	%ecx, %rdx
000000000000bdd9	cmpq	$0x0, %rdx
000000000000bddd	je	0xbe02
000000000000bde3	leaq	0x5ea5b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bdea	leaq	0x5dae9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bdf1	leaq	0x5db17(%rip), %rcx ## literal pool for: "context"
000000000000bdf8	movl	$0x976, %edx
000000000000bdfd	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000be02	jmp	0xbe07
000000000000be07	cmpq	$0x0, -0x10(%rbp)
000000000000be0c	setne	%al
000000000000be0f	xorb	$-0x1, %al
000000000000be11	andb	$0x1, %al
000000000000be13	movzbl	%al, %ecx
000000000000be16	movslq	%ecx, %rdx
000000000000be19	cmpq	$0x0, %rdx
000000000000be1d	je	0xbe42
000000000000be23	leaq	0x5ea1b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000be2a	leaq	0x5daa9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000be31	leaq	0x5dadf(%rip), %rcx ## literal pool for: "instruction"
000000000000be38	movl	$0x977, %edx
000000000000be3d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000be42	jmp	0xbe47
000000000000be47	cmpq	$0x0, -0x18(%rbp)
000000000000be4c	setne	%al
000000000000be4f	xorb	$-0x1, %al
000000000000be51	andb	$0x1, %al
000000000000be53	movzbl	%al, %ecx
000000000000be56	movslq	%ecx, %rdx
000000000000be59	cmpq	$0x0, %rdx
000000000000be5d	je	0xbe82
000000000000be63	leaq	0x5e9db(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000be6a	leaq	0x5da69(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000be71	leaq	0x5e2c2(%rip), %rcx ## literal pool for: "definition"
000000000000be78	movl	$0x978, %edx
000000000000be7d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000be82	jmp	0xbe87
000000000000be87	movq	-0x10(%rbp), %rax
000000000000be8b	movl	0xc(%rax), %ecx
000000000000be8e	addl	$-0x2, %ecx
000000000000be91	movl	%ecx, %eax
000000000000be93	subl	$0x3, %ecx
000000000000be96	movq	%rax, -0x48(%rbp)
000000000000be9a	movl	%ecx, -0x4c(%rbp)
000000000000be9d	ja	0xda8a
000000000000bea3	leaq	0x1bee(%rip), %rax
000000000000beaa	movq	-0x48(%rbp), %rcx
000000000000beae	movslq	(%rax,%rcx,4), %rdx
000000000000beb2	addq	%rax, %rdx
000000000000beb5	jmpq	*%rdx
000000000000beb7	movq	-0x8(%rbp), %rax
000000000000bebb	movzbl	0x2b(%rax), %ecx
000000000000bebf	movl	%ecx, %eax
000000000000bec1	cmpq	$0x2, %rax
000000000000bec5	setb	%dl
000000000000bec8	xorb	$-0x1, %dl
000000000000becb	andb	$0x1, %dl
000000000000bece	movzbl	%dl, %ecx
000000000000bed1	movslq	%ecx, %rax
000000000000bed4	cmpq	$0x0, %rax
000000000000bed8	je	0xbefd
000000000000bede	leaq	0x5e960(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bee5	leaq	0x5d9ee(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000beec	leaq	0x5e969(%rip), %rcx ## literal pool for: "context->cache.LL < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000bef3	movl	$0x984, %edx
000000000000bef8	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000befd	jmp	0xbf02
000000000000bf02	movq	-0x8(%rbp), %rax
000000000000bf06	movzbl	0x2b(%rax), %ecx
000000000000bf0a	movl	%ecx, %eax
000000000000bf0c	leaq	_ZydisSetAVXInformation.lookup(%rip), %rdx
000000000000bf13	movw	(%rdx,%rax,2), %si
000000000000bf17	movq	-0x10(%rbp), %rax
000000000000bf1b	movw	%si, 0x48c(%rax)
000000000000bf22	jmp	0xda8f
000000000000bf27	movq	-0x8(%rbp), %rax
000000000000bf2b	movzbl	0x2b(%rax), %ecx
000000000000bf2f	movl	%ecx, %eax
000000000000bf31	cmpq	$0x2, %rax
000000000000bf35	setb	%dl
000000000000bf38	xorb	$-0x1, %dl
000000000000bf3b	andb	$0x1, %dl
000000000000bf3e	movzbl	%dl, %ecx
000000000000bf41	movslq	%ecx, %rax
000000000000bf44	cmpq	$0x0, %rax
000000000000bf48	je	0xbf6d
000000000000bf4e	leaq	0x5e8f0(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000bf55	leaq	0x5d97e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000bf5c	leaq	0x5e8f9(%rip), %rcx ## literal pool for: "context->cache.LL < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000bf63	movl	$0x990, %edx
000000000000bf68	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000bf6d	jmp	0xbf72
000000000000bf72	movq	-0x8(%rbp), %rax
000000000000bf76	movzbl	0x2b(%rax), %ecx
000000000000bf7a	movl	%ecx, %eax
000000000000bf7c	leaq	_ZydisSetAVXInformation.lookup.65(%rip), %rdx
000000000000bf83	movw	(%rdx,%rax,2), %si
000000000000bf87	movq	-0x10(%rbp), %rax
000000000000bf8b	movw	%si, 0x48c(%rax)
000000000000bf92	movq	-0x18(%rbp), %rax
000000000000bf96	movq	%rax, -0x20(%rbp)
000000000000bf9a	movq	-0x20(%rbp), %rax
000000000000bf9e	movl	0x8(%rax), %ecx
000000000000bfa1	movl	%ecx, %eax
000000000000bfa3	shrq	$0x1c, %rax
000000000000bfa7	movb	%al, %dil
000000000000bfaa	andb	$0x7, %dil
000000000000bfae	cmpb	$0x0, %dil
000000000000bfb2	je	0xbfee
000000000000bfb8	movq	-0x10(%rbp), %rax
000000000000bfbc	movb	$0x1, 0x498(%rax)
000000000000bfc3	movq	-0x20(%rbp), %rax
000000000000bfc7	movl	0x8(%rax), %ecx
000000000000bfca	movl	%ecx, %eax
000000000000bfcc	shrq	$0x1c, %rax
000000000000bfd0	movb	%al, %dl
000000000000bfd2	andb	$0x7, %dl
000000000000bfd5	movzbl	%dl, %ecx
000000000000bfd8	movl	%ecx, %eax
000000000000bfda	leaq	_ZydisSetAVXInformation.broadcasts(%rip), %rsi
000000000000bfe1	movl	(%rsi,%rax,4), %ecx
000000000000bfe4	movq	-0x10(%rbp), %rax
000000000000bfe8	movl	%ecx, 0x49c(%rax)
000000000000bfee	jmp	0xda8f
000000000000bff3	movq	-0x18(%rbp), %rax
000000000000bff7	movq	%rax, -0x28(%rbp)
000000000000bffb	movq	-0x8(%rbp), %rax
000000000000bfff	movb	0x2b(%rax), %cl
000000000000c002	movb	%cl, -0x29(%rbp)
000000000000c005	movq	-0x28(%rbp), %rax
000000000000c009	movl	0x8(%rax), %edx
000000000000c00c	movl	%edx, %eax
000000000000c00e	shrq	$0x1c, %rax
000000000000c012	movb	%al, %cl
000000000000c014	andb	$0x3, %cl
000000000000c017	cmpb	$0x0, %cl
000000000000c01a	je	0xc03d
000000000000c020	movq	-0x28(%rbp), %rax
000000000000c024	movl	0x8(%rax), %ecx
000000000000c027	movl	%ecx, %eax
000000000000c029	shrq	$0x1c, %rax
000000000000c02d	movb	%al, %dl
000000000000c02f	andb	$0x3, %dl
000000000000c032	movzbl	%dl, %ecx
000000000000c035	subl	$0x1, %ecx
000000000000c038	movb	%cl, %dl
000000000000c03a	movb	%dl, -0x29(%rbp)
000000000000c03d	movzbl	-0x29(%rbp), %eax
000000000000c041	movl	%eax, %ecx
000000000000c043	cmpq	$0x3, %rcx
000000000000c047	setb	%dl
000000000000c04a	xorb	$-0x1, %dl
000000000000c04d	andb	$0x1, %dl
000000000000c050	movzbl	%dl, %eax
000000000000c053	movslq	%eax, %rcx
000000000000c056	cmpq	$0x0, %rcx
000000000000c05a	je	0xc07f
000000000000c060	leaq	0x5e7de(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c067	leaq	0x5d86c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c06e	leaq	0x5e822(%rip), %rcx ## literal pool for: "vector_length < (sizeof(lookup) / sizeof((lookup)[0]))"
000000000000c075	movl	$0x9b9, %edx
000000000000c07a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c07f	jmp	0xc084
000000000000c084	movzbl	-0x29(%rbp), %eax
000000000000c088	movl	%eax, %ecx
000000000000c08a	leaq	_ZydisSetAVXInformation.lookup.66(%rip), %rdx
000000000000c091	movw	(%rdx,%rcx,2), %si
000000000000c095	movq	-0x10(%rbp), %rcx
000000000000c099	movw	%si, 0x48c(%rcx)
000000000000c0a0	movq	-0x28(%rbp), %rcx
000000000000c0a4	movl	0x8(%rcx), %eax
000000000000c0a7	movl	%eax, %edx
000000000000c0a9	movzwl	0xc(%rcx), %eax
000000000000c0ad	movl	%eax, %ecx
000000000000c0af	shlq	$0x20, %rcx
000000000000c0b3	orq	%rcx, %rdx
000000000000c0b6	shrq	$0x1e, %rdx
000000000000c0ba	movl	%edx, %eax
000000000000c0bc	andl	$0xf, %eax
000000000000c0bf	movq	-0x8(%rbp), %rcx
000000000000c0c3	movl	%eax, 0x30(%rcx)
000000000000c0c6	movq	-0x28(%rbp), %rcx
000000000000c0ca	movl	0x8(%rcx), %eax
000000000000c0cd	movl	%eax, %edx
000000000000c0cf	movzwl	0xc(%rcx), %eax
000000000000c0d3	movl	%eax, %ecx
000000000000c0d5	shlq	$0x20, %rcx
000000000000c0d9	orq	%rcx, %rdx
000000000000c0dc	shrq	$0x1e, %rdx
000000000000c0e0	movb	%dl, %dil
000000000000c0e3	andb	$0xf, %dil
000000000000c0e7	cmpb	$0x0, %dil
000000000000c0eb	je	0xcd42
000000000000c0f1	movq	-0x10(%rbp), %rax
000000000000c0f5	movzbl	0x578(%rax), %ecx
000000000000c0fc	cmpl	$0x3, %ecx
000000000000c0ff	setne	%dl
000000000000c102	xorb	$-0x1, %dl
000000000000c105	andb	$0x1, %dl
000000000000c108	movzbl	%dl, %ecx
000000000000c10b	movslq	%ecx, %rax
000000000000c10e	cmpq	$0x0, %rax
000000000000c112	je	0xc137
000000000000c118	leaq	0x5e726(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c11f	leaq	0x5d7b4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c126	leaq	0x5e4cd(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
000000000000c12d	movl	$0x9bf, %edx
000000000000c132	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c137	jmp	0xc13c
000000000000c13c	movq	-0x28(%rbp), %rax
000000000000c140	movb	0xc(%rax), %cl
000000000000c143	shrb	$0x2, %cl
000000000000c146	andb	$0x7, %cl
000000000000c149	cmpb	$0x0, %cl
000000000000c14c	setne	%cl
000000000000c14f	xorb	$-0x1, %cl
000000000000c152	andb	$0x1, %cl
000000000000c155	movzbl	%cl, %edx
000000000000c158	movslq	%edx, %rax
000000000000c15b	cmpq	$0x0, %rax
000000000000c15f	je	0xc184
000000000000c165	leaq	0x5e6d9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c16c	leaq	0x5d767(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c173	leaq	0x5e754(%rip), %rcx ## literal pool for: "def->element_size"
000000000000c17a	movl	$0x9c0, %edx
000000000000c17f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c184	jmp	0xc189
000000000000c189	movq	-0x28(%rbp), %rax
000000000000c18d	movb	0xc(%rax), %cl
000000000000c190	shrb	$0x2, %cl
000000000000c193	andb	$0x7, %cl
000000000000c196	movzbl	%cl, %edx
000000000000c199	movl	%edx, %eax
000000000000c19b	cmpq	$0x6, %rax
000000000000c19f	setb	%cl
000000000000c1a2	xorb	$-0x1, %cl
000000000000c1a5	andb	$0x1, %cl
000000000000c1a8	movzbl	%cl, %edx
000000000000c1ab	movslq	%edx, %rax
000000000000c1ae	cmpq	$0x0, %rax
000000000000c1b2	je	0xc1d7
000000000000c1b8	leaq	0x5e686(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c1bf	leaq	0x5d714(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c1c6	leaq	0x5e713(%rip), %rcx ## literal pool for: "def->element_size < (sizeof(element_sizes) / sizeof((element_sizes)[0]))"
000000000000c1cd	movl	$0x9c7, %edx
000000000000c1d2	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c1d7	jmp	0xc1dc
000000000000c1dc	movq	-0x28(%rbp), %rax
000000000000c1e0	movzwl	0xc(%rax), %ecx
000000000000c1e4	shrl	$0x2, %ecx
000000000000c1e7	andl	$0x7, %ecx
000000000000c1ea	movl	%ecx, %eax
000000000000c1ec	leaq	_ZydisSetAVXInformation.element_sizes(%rip), %rdx
000000000000c1f3	movb	(%rax,%rdx), %sil
000000000000c1f7	movq	-0x8(%rbp), %rax
000000000000c1fb	movb	%sil, 0x34(%rax)
000000000000c1ff	movq	-0x28(%rbp), %rax
000000000000c203	movl	0x8(%rax), %ecx
000000000000c206	movl	%ecx, %edx
000000000000c208	movzwl	0xc(%rax), %ecx
000000000000c20c	movl	%ecx, %eax
000000000000c20e	shlq	$0x20, %rax
000000000000c212	orq	%rax, %rdx
000000000000c215	shrq	$0x1e, %rdx
000000000000c219	movl	%edx, %ecx
000000000000c21b	andl	$0xf, %ecx
000000000000c21e	decl	%ecx
000000000000c220	movl	%ecx, %eax
000000000000c222	subl	$0xe, %ecx
000000000000c225	movq	%rax, -0x58(%rbp)
000000000000c229	movl	%ecx, -0x5c(%rbp)
000000000000c22c	ja	0xcd1e
000000000000c232	leaq	0x19cf(%rip), %rax
000000000000c239	movq	-0x58(%rbp), %rcx
000000000000c23d	movslq	(%rax,%rcx,4), %rdx
000000000000c241	addq	%rax, %rdx
000000000000c244	jmpq	*%rdx
000000000000c246	movq	-0x10(%rbp), %rax
000000000000c24a	movb	0x567(%rax), %cl
000000000000c250	movb	%cl, -0x2a(%rbp)
000000000000c253	movq	-0x8(%rbp), %rax
000000000000c257	movb	0x26(%rax), %cl
000000000000c25a	movb	%cl, -0x2b(%rbp)
000000000000c25d	movzbl	-0x2a(%rbp), %edx
000000000000c261	cmpl	$0x2, %edx
000000000000c264	setl	%cl
000000000000c267	xorb	$-0x1, %cl
000000000000c26a	andb	$0x1, %cl
000000000000c26d	movzbl	%cl, %edx
000000000000c270	movslq	%edx, %rax
000000000000c273	cmpq	$0x0, %rax
000000000000c277	je	0xc29c
000000000000c27d	leaq	0x5e5c1(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c284	leaq	0x5d64f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c28b	leaq	0x5e697(%rip), %rcx ## literal pool for: "evex_b < 2"
000000000000c292	movl	$0x9d1, %edx
000000000000c297	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c29c	jmp	0xc2a1
000000000000c2a1	movzbl	-0x2b(%rbp), %eax
000000000000c2a5	cmpl	$0x2, %eax
000000000000c2a8	setl	%cl
000000000000c2ab	xorb	$-0x1, %cl
000000000000c2ae	andb	$0x1, %cl
000000000000c2b1	movzbl	%cl, %eax
000000000000c2b4	movslq	%eax, %rdx
000000000000c2b7	cmpq	$0x0, %rdx
000000000000c2bb	je	0xc2e0
000000000000c2c1	leaq	0x5e57d(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c2c8	leaq	0x5d60b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c2cf	leaq	0x5e65e(%rip), %rcx ## literal pool for: "evex_w < 2"
000000000000c2d6	movl	$0x9d2, %edx
000000000000c2db	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c2e0	jmp	0xc2e5
000000000000c2e5	cmpb	$0x0, -0x2a(%rbp)
000000000000c2e9	movb	$0x1, %al
000000000000c2eb	movb	%al, -0x5d(%rbp)
000000000000c2ee	je	0xc345
000000000000c2f4	cmpb	$0x0, -0x2b(%rbp)
000000000000c2f8	jne	0xc314
000000000000c2fe	movq	-0x8(%rbp), %rax
000000000000c302	movzbl	0x34(%rax), %ecx
000000000000c306	cmpl	$0x20, %ecx
000000000000c309	movb	$0x1, %dl
000000000000c30b	movb	%dl, -0x5e(%rbp)
000000000000c30e	je	0xc33f
000000000000c314	xorl	%eax, %eax
000000000000c316	movb	%al, %cl
000000000000c318	movzbl	-0x2b(%rbp), %eax
000000000000c31c	cmpl	$0x0, %eax
000000000000c31f	movb	%cl, -0x5f(%rbp)
000000000000c322	je	0xc339
000000000000c328	movq	-0x8(%rbp), %rax
000000000000c32c	movzbl	0x34(%rax), %ecx
000000000000c330	cmpl	$0x40, %ecx
000000000000c333	sete	%dl
000000000000c336	movb	%dl, -0x5f(%rbp)
000000000000c339	movb	-0x5f(%rbp), %al
000000000000c33c	movb	%al, -0x5e(%rbp)
000000000000c33f	movb	-0x5e(%rbp), %al
000000000000c342	movb	%al, -0x5d(%rbp)
000000000000c345	movb	-0x5d(%rbp), %al
000000000000c348	xorb	$-0x1, %al
000000000000c34a	andb	$0x1, %al
000000000000c34c	movzbl	%al, %ecx
000000000000c34f	movslq	%ecx, %rdx
000000000000c352	cmpq	$0x0, %rdx
000000000000c356	je	0xc37b
000000000000c35c	leaq	0x5e4e2(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c363	leaq	0x5d570(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c36a	leaq	0x5e5ce(%rip), %rcx ## literal pool for: "!evex_b || ((!evex_w && context->evex.element_size == 32) || ( evex_w && context->evex.element_size == 64))"
000000000000c371	movl	$0x9d4, %edx
000000000000c376	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c37b	jmp	0xc380
000000000000c380	cmpb	$0x0, -0x2a(%rbp)
000000000000c384	movb	$0x1, %al
000000000000c386	movb	%al, -0x60(%rbp)
000000000000c389	je	0xc3a8
000000000000c38f	movq	-0x28(%rbp), %rax
000000000000c393	movb	0xc(%rax), %cl
000000000000c396	shrb	$0x5, %cl
000000000000c399	andb	$0x3, %cl
000000000000c39c	movzbl	%cl, %edx
000000000000c39f	cmpl	$0x1, %edx
000000000000c3a2	sete	%cl
000000000000c3a5	movb	%cl, -0x60(%rbp)
000000000000c3a8	movb	-0x60(%rbp), %al
000000000000c3ab	xorb	$-0x1, %al
000000000000c3ad	andb	$0x1, %al
000000000000c3af	movzbl	%al, %ecx
000000000000c3b2	movslq	%ecx, %rdx
000000000000c3b5	cmpq	$0x0, %rdx
000000000000c3b9	je	0xc3de
000000000000c3bf	leaq	0x5e47f(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c3c6	leaq	0x5d50d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c3cd	leaq	0x5e5d7(%rip), %rcx ## literal pool for: "!evex_b || def->functionality == ZYDIS_EVEX_FUNC_BC"
000000000000c3d4	movl	$0x9d5, %edx
000000000000c3d9	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c3de	jmp	0xc3e3
000000000000c3e3	movzbl	-0x2a(%rbp), %eax
000000000000c3e7	movl	%eax, %ecx
000000000000c3e9	imulq	$0x6, %rcx, %rcx
000000000000c3ed	leaq	_ZydisSetAVXInformation.scales(%rip), %rdx
000000000000c3f4	addq	%rcx, %rdx
000000000000c3f7	movzbl	-0x2b(%rbp), %eax
000000000000c3fb	movl	%eax, %ecx
000000000000c3fd	imulq	$0x3, %rcx, %rcx
000000000000c401	addq	%rcx, %rdx
000000000000c404	movzbl	-0x29(%rbp), %eax
000000000000c408	movl	%eax, %ecx
000000000000c40a	movb	(%rdx,%rcx), %sil
000000000000c40e	movq	-0x8(%rbp), %rcx
000000000000c412	movb	%sil, 0x3c(%rcx)
000000000000c416	movzbl	-0x2a(%rbp), %eax
000000000000c41a	movl	%eax, %ecx
000000000000c41c	imulq	$0x18, %rcx, %rcx
000000000000c420	leaq	_ZydisSetAVXInformation.broadcasts.74(%rip), %rdx
000000000000c427	addq	%rcx, %rdx
000000000000c42a	movzbl	-0x2b(%rbp), %eax
000000000000c42e	movl	%eax, %ecx
000000000000c430	imulq	$0xc, %rcx, %rcx
000000000000c434	addq	%rcx, %rdx
000000000000c437	movzbl	-0x29(%rbp), %eax
000000000000c43b	movl	%eax, %ecx
000000000000c43d	movl	(%rdx,%rcx,4), %eax
000000000000c440	movq	-0x10(%rbp), %rcx
000000000000c444	movl	%eax, 0x49c(%rcx)
000000000000c44a	jmp	0xcd3d
000000000000c44f	movq	-0x10(%rbp), %rax
000000000000c453	movb	0x567(%rax), %cl
000000000000c459	movb	%cl, -0x2c(%rbp)
000000000000c45c	movzbl	-0x2c(%rbp), %edx
000000000000c460	cmpl	$0x2, %edx
000000000000c463	setl	%cl
000000000000c466	xorb	$-0x1, %cl
000000000000c469	andb	$0x1, %cl
000000000000c46c	movzbl	%cl, %edx
000000000000c46f	movslq	%edx, %rax
000000000000c472	cmpq	$0x0, %rax
000000000000c476	je	0xc49b
000000000000c47c	leaq	0x5e3c2(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c483	leaq	0x5d450(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c48a	leaq	0x5e498(%rip), %rcx ## literal pool for: "evex_b < 2"
000000000000c491	movl	$0xa04, %edx
000000000000c496	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c49b	jmp	0xc4a0
000000000000c4a0	movq	-0x8(%rbp), %rax
000000000000c4a4	cmpb	$0x0, 0x26(%rax)
000000000000c4a8	setne	%cl
000000000000c4ab	xorb	$-0x1, %cl
000000000000c4ae	xorb	$-0x1, %cl
000000000000c4b1	andb	$0x1, %cl
000000000000c4b4	movzbl	%cl, %edx
000000000000c4b7	movslq	%edx, %rax
000000000000c4ba	cmpq	$0x0, %rax
000000000000c4be	je	0xc4e3
000000000000c4c4	leaq	0x5e37a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c4cb	leaq	0x5d408(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c4d2	leaq	0x5e506(%rip), %rcx ## literal pool for: "!context->cache.W"
000000000000c4d9	movl	$0xa05, %edx
000000000000c4de	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c4e3	jmp	0xc4e8
000000000000c4e8	movq	-0x8(%rbp), %rax
000000000000c4ec	movzbl	0x34(%rax), %ecx
000000000000c4f0	cmpl	$0x20, %ecx
000000000000c4f3	sete	%dl
000000000000c4f6	xorb	$-0x1, %dl
000000000000c4f9	andb	$0x1, %dl
000000000000c4fc	movzbl	%dl, %ecx
000000000000c4ff	movslq	%ecx, %rax
000000000000c502	cmpq	$0x0, %rax
000000000000c506	je	0xc52b
000000000000c50c	leaq	0x5e332(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c513	leaq	0x5d3c0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c51a	leaq	0x5e4d0(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c521	movl	$0xa06, %edx
000000000000c526	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c52b	jmp	0xc530
000000000000c530	cmpb	$0x0, -0x2c(%rbp)
000000000000c534	movb	$0x1, %al
000000000000c536	movb	%al, -0x61(%rbp)
000000000000c539	je	0xc558
000000000000c53f	movq	-0x28(%rbp), %rax
000000000000c543	movb	0xc(%rax), %cl
000000000000c546	shrb	$0x5, %cl
000000000000c549	andb	$0x3, %cl
000000000000c54c	movzbl	%cl, %edx
000000000000c54f	cmpl	$0x1, %edx
000000000000c552	sete	%cl
000000000000c555	movb	%cl, -0x61(%rbp)
000000000000c558	movb	-0x61(%rbp), %al
000000000000c55b	xorb	$-0x1, %al
000000000000c55d	andb	$0x1, %al
000000000000c55f	movzbl	%al, %ecx
000000000000c562	movslq	%ecx, %rdx
000000000000c565	cmpq	$0x0, %rdx
000000000000c569	je	0xc58e
000000000000c56f	leaq	0x5e2cf(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c576	leaq	0x5d35d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c57d	leaq	0x5e427(%rip), %rcx ## literal pool for: "!evex_b || def->functionality == ZYDIS_EVEX_FUNC_BC"
000000000000c584	movl	$0xa07, %edx
000000000000c589	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c58e	jmp	0xc593
000000000000c593	movzbl	-0x2c(%rbp), %eax
000000000000c597	movl	%eax, %ecx
000000000000c599	imulq	$0x3, %rcx, %rcx
000000000000c59d	leaq	_ZydisSetAVXInformation.scales.77(%rip), %rdx
000000000000c5a4	addq	%rcx, %rdx
000000000000c5a7	movzbl	-0x29(%rbp), %eax
000000000000c5ab	movl	%eax, %ecx
000000000000c5ad	movb	(%rdx,%rcx), %sil
000000000000c5b1	movq	-0x8(%rbp), %rcx
000000000000c5b5	movb	%sil, 0x3c(%rcx)
000000000000c5b9	movzbl	-0x2c(%rbp), %eax
000000000000c5bd	movl	%eax, %ecx
000000000000c5bf	imulq	$0xc, %rcx, %rcx
000000000000c5c3	leaq	_ZydisSetAVXInformation.broadcasts.78(%rip), %rdx
000000000000c5ca	addq	%rcx, %rdx
000000000000c5cd	movzbl	-0x29(%rbp), %eax
000000000000c5d1	movl	%eax, %ecx
000000000000c5d3	movl	(%rdx,%rcx,4), %eax
000000000000c5d6	movq	-0x10(%rbp), %rcx
000000000000c5da	movl	%eax, 0x49c(%rcx)
000000000000c5e0	jmp	0xcd3d
000000000000c5e5	movzbl	-0x29(%rbp), %eax
000000000000c5e9	movl	%eax, %ecx
000000000000c5eb	leaq	_ZydisSetAVXInformation.scales.79(%rip), %rdx
000000000000c5f2	movb	(%rdx,%rcx), %sil
000000000000c5f6	movq	-0x8(%rbp), %rcx
000000000000c5fa	movb	%sil, 0x3c(%rcx)
000000000000c5fe	jmp	0xcd3d
000000000000c603	movq	-0x8(%rbp), %rax
000000000000c607	movzbl	0x26(%rax), %ecx
000000000000c60b	testl	%ecx, %ecx
000000000000c60d	movl	%ecx, -0x68(%rbp)
000000000000c610	je	0xc62f
000000000000c616	jmp	0xc61b
000000000000c61b	movl	-0x68(%rbp), %eax
000000000000c61e	subl	$0x1, %eax
000000000000c621	movl	%eax, -0x6c(%rbp)
000000000000c624	je	0xc67c
000000000000c62a	jmp	0xc6c9
000000000000c62f	movq	-0x8(%rbp), %rax
000000000000c633	movzbl	0x34(%rax), %ecx
000000000000c637	cmpl	$0x20, %ecx
000000000000c63a	sete	%dl
000000000000c63d	xorb	$-0x1, %dl
000000000000c640	andb	$0x1, %dl
000000000000c643	movzbl	%dl, %ecx
000000000000c646	movslq	%ecx, %rax
000000000000c649	cmpq	$0x0, %rax
000000000000c64d	je	0xc672
000000000000c653	leaq	0x5e1eb(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c65a	leaq	0x5d279(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c661	leaq	0x5e389(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c668	movl	$0xa2e, %edx
000000000000c66d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c672	jmp	0xc677
000000000000c677	jmp	0xc6e8
000000000000c67c	movq	-0x8(%rbp), %rax
000000000000c680	movzbl	0x34(%rax), %ecx
000000000000c684	cmpl	$0x40, %ecx
000000000000c687	sete	%dl
000000000000c68a	xorb	$-0x1, %dl
000000000000c68d	andb	$0x1, %dl
000000000000c690	movzbl	%dl, %ecx
000000000000c693	movslq	%ecx, %rax
000000000000c696	cmpq	$0x0, %rax
000000000000c69a	je	0xc6bf
000000000000c6a0	leaq	0x5e19e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c6a7	leaq	0x5d22c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c6ae	leaq	0x5e35d(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000c6b5	movl	$0xa31, %edx
000000000000c6ba	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c6bf	jmp	0xc6c4
000000000000c6c4	jmp	0xc6e8
000000000000c6c9	leaq	0x5e175(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c6d0	leaq	0x5d203(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c6d7	leaq	0x5eee6(%rip), %rcx ## literal pool for: "0"
000000000000c6de	movl	$0xa34, %edx
000000000000c6e3	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c6e8	jmp	0xc6ed
000000000000c6ed	movq	-0x28(%rbp), %rax
000000000000c6f1	movb	0xc(%rax), %cl
000000000000c6f4	shrb	$0x2, %cl
000000000000c6f7	andb	$0x7, %cl
000000000000c6fa	movzbl	%cl, %edx
000000000000c6fd	movl	%edx, %eax
000000000000c6ff	cmpq	$0x6, %rax
000000000000c703	setb	%cl
000000000000c706	xorb	$-0x1, %cl
000000000000c709	andb	$0x1, %cl
000000000000c70c	movzbl	%cl, %edx
000000000000c70f	movslq	%edx, %rax
000000000000c712	cmpq	$0x0, %rax
000000000000c716	je	0xc73b
000000000000c71c	leaq	0x5e122(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c723	leaq	0x5d1b0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c72a	leaq	0x5e302(%rip), %rcx ## literal pool for: "def->element_size < (sizeof(scales) / sizeof((scales)[0]))"
000000000000c731	movl	$0xa42, %edx
000000000000c736	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c73b	jmp	0xc740
000000000000c740	movq	-0x28(%rbp), %rax
000000000000c744	movb	0xc(%rax), %cl
000000000000c747	shrb	$0x2, %cl
000000000000c74a	andb	$0x7, %cl
000000000000c74d	movzbl	%cl, %edx
000000000000c750	movl	%edx, %eax
000000000000c752	leaq	_ZydisSetAVXInformation.scales.81(%rip), %rsi
000000000000c759	movb	(%rsi,%rax), %cl
000000000000c75c	movq	-0x8(%rbp), %rax
000000000000c760	movb	%cl, 0x3c(%rax)
000000000000c763	jmp	0xcd3d
000000000000c768	movq	-0x8(%rbp), %rax
000000000000c76c	movzbl	0x34(%rax), %ecx
000000000000c770	movl	%ecx, %edx
000000000000c772	subl	$0x20, %edx
000000000000c775	movl	%ecx, -0x70(%rbp)
000000000000c778	movl	%edx, -0x74(%rbp)
000000000000c77b	je	0xc79a
000000000000c781	jmp	0xc786
000000000000c786	movl	-0x70(%rbp), %eax
000000000000c789	subl	$0x40, %eax
000000000000c78c	movl	%eax, -0x78(%rbp)
000000000000c78f	je	0xc7a7
000000000000c795	jmp	0xc7b4
000000000000c79a	movq	-0x8(%rbp), %rax
000000000000c79e	movb	$0x4, 0x3c(%rax)
000000000000c7a2	jmp	0xc7d3
000000000000c7a7	movq	-0x8(%rbp), %rax
000000000000c7ab	movb	$0x8, 0x3c(%rax)
000000000000c7af	jmp	0xc7d3
000000000000c7b4	leaq	0x5e08a(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c7bb	leaq	0x5d118(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c7c2	leaq	0x5edfb(%rip), %rcx ## literal pool for: "0"
000000000000c7c9	movl	$0xa50, %edx
000000000000c7ce	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c7d3	jmp	0xcd3d
000000000000c7d8	movq	-0x8(%rbp), %rax
000000000000c7dc	movzbl	0x34(%rax), %ecx
000000000000c7e0	cmpl	$0x20, %ecx
000000000000c7e3	sete	%dl
000000000000c7e6	xorb	$-0x1, %dl
000000000000c7e9	andb	$0x1, %dl
000000000000c7ec	movzbl	%dl, %ecx
000000000000c7ef	movslq	%ecx, %rax
000000000000c7f2	cmpq	$0x0, %rax
000000000000c7f6	je	0xc81b
000000000000c7fc	leaq	0x5e042(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c803	leaq	0x5d0d0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c80a	leaq	0x5e1e0(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c811	movl	$0xa54, %edx
000000000000c816	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c81b	jmp	0xc820
000000000000c820	movq	-0x8(%rbp), %rax
000000000000c824	movzbl	0x26(%rax), %ecx
000000000000c828	cmpl	$0x0, %ecx
000000000000c82b	sete	%dl
000000000000c82e	xorb	$-0x1, %dl
000000000000c831	andb	$0x1, %dl
000000000000c834	movzbl	%dl, %ecx
000000000000c837	movslq	%ecx, %rax
000000000000c83a	cmpq	$0x0, %rax
000000000000c83e	je	0xc863
000000000000c844	leaq	0x5dffa(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c84b	leaq	0x5d088(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c852	leaq	0x5e215(%rip), %rcx ## literal pool for: "context->cache.W == 0"
000000000000c859	movl	$0xa55, %edx
000000000000c85e	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c863	jmp	0xc868
000000000000c868	movq	-0x8(%rbp), %rax
000000000000c86c	movb	$0x10, 0x3c(%rax)
000000000000c870	jmp	0xcd3d
000000000000c875	movq	-0x8(%rbp), %rax
000000000000c879	movzbl	0x26(%rax), %ecx
000000000000c87d	testl	%ecx, %ecx
000000000000c87f	movl	%ecx, -0x7c(%rbp)
000000000000c882	je	0xc8a1
000000000000c888	jmp	0xc88d
000000000000c88d	movl	-0x7c(%rbp), %eax
000000000000c890	subl	$0x1, %eax
000000000000c893	movl	%eax, -0x80(%rbp)
000000000000c896	je	0xc8f6
000000000000c89c	jmp	0xc9c2
000000000000c8a1	movq	-0x8(%rbp), %rax
000000000000c8a5	movzbl	0x34(%rax), %ecx
000000000000c8a9	cmpl	$0x20, %ecx
000000000000c8ac	sete	%dl
000000000000c8af	xorb	$-0x1, %dl
000000000000c8b2	andb	$0x1, %dl
000000000000c8b5	movzbl	%dl, %ecx
000000000000c8b8	movslq	%ecx, %rax
000000000000c8bb	cmpq	$0x0, %rax
000000000000c8bf	je	0xc8e4
000000000000c8c5	leaq	0x5df79(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c8cc	leaq	0x5d007(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c8d3	leaq	0x5e117(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000c8da	movl	$0xa5c, %edx
000000000000c8df	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c8e4	jmp	0xc8e9
000000000000c8e9	movq	-0x8(%rbp), %rax
000000000000c8ed	movb	$0x8, 0x3c(%rax)
000000000000c8f1	jmp	0xc9e1
000000000000c8f6	movq	-0x8(%rbp), %rax
000000000000c8fa	movzbl	0x34(%rax), %ecx
000000000000c8fe	cmpl	$0x40, %ecx
000000000000c901	sete	%dl
000000000000c904	xorb	$-0x1, %dl
000000000000c907	andb	$0x1, %dl
000000000000c90a	movzbl	%dl, %ecx
000000000000c90d	movslq	%ecx, %rax
000000000000c910	cmpq	$0x0, %rax
000000000000c914	je	0xc939
000000000000c91a	leaq	0x5df24(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c921	leaq	0x5cfb2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c928	leaq	0x5e0e3(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000c92f	movl	$0xa60, %edx
000000000000c934	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c939	jmp	0xc93e
000000000000c93e	movq	-0x10(%rbp), %rax
000000000000c942	movzwl	0x48c(%rax), %ecx
000000000000c949	cmpl	$0x100, %ecx
000000000000c94f	movb	$0x1, %dl
000000000000c951	movb	%dl, -0x81(%rbp)
000000000000c957	je	0xc977
000000000000c95d	movq	-0x10(%rbp), %rax
000000000000c961	movzwl	0x48c(%rax), %ecx
000000000000c968	cmpl	$0x200, %ecx
000000000000c96e	sete	%dl
000000000000c971	movb	%dl, -0x81(%rbp)
000000000000c977	movb	-0x81(%rbp), %al
000000000000c97d	xorb	$-0x1, %al
000000000000c97f	andb	$0x1, %al
000000000000c981	movzbl	%al, %ecx
000000000000c984	movslq	%ecx, %rdx
000000000000c987	cmpq	$0x0, %rdx
000000000000c98b	je	0xc9b0
000000000000c991	leaq	0x5dead(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c998	leaq	0x5cf3b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c99f	leaq	0x5e0de(%rip), %rcx ## literal pool for: "(instruction->avx.vector_length == 256) || (instruction->avx.vector_length == 512)"
000000000000c9a6	movl	$0xa62, %edx
000000000000c9ab	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c9b0	jmp	0xc9b5
000000000000c9b5	movq	-0x8(%rbp), %rax
000000000000c9b9	movb	$0x10, 0x3c(%rax)
000000000000c9bd	jmp	0xc9e1
000000000000c9c2	leaq	0x5de7c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000c9c9	leaq	0x5cf0a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000c9d0	leaq	0x5ebed(%rip), %rcx ## literal pool for: "0"
000000000000c9d7	movl	$0xa66, %edx
000000000000c9dc	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000c9e1	jmp	0xcd3d
000000000000c9e6	movq	-0x8(%rbp), %rax
000000000000c9ea	movzbl	0x26(%rax), %ecx
000000000000c9ee	testl	%ecx, %ecx
000000000000c9f0	movl	%ecx, -0x88(%rbp)
000000000000c9f6	je	0xca1b
000000000000c9fc	jmp	0xca01
000000000000ca01	movl	-0x88(%rbp), %eax
000000000000ca07	subl	$0x1, %eax
000000000000ca0a	movl	%eax, -0x8c(%rbp)
000000000000ca10	je	0xcae7
000000000000ca16	jmp	0xcb8a
000000000000ca1b	movq	-0x8(%rbp), %rax
000000000000ca1f	movzbl	0x34(%rax), %ecx
000000000000ca23	cmpl	$0x20, %ecx
000000000000ca26	sete	%dl
000000000000ca29	xorb	$-0x1, %dl
000000000000ca2c	andb	$0x1, %dl
000000000000ca2f	movzbl	%dl, %ecx
000000000000ca32	movslq	%ecx, %rax
000000000000ca35	cmpq	$0x0, %rax
000000000000ca39	je	0xca5e
000000000000ca3f	leaq	0x5ddff(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000ca46	leaq	0x5ce8d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ca4d	leaq	0x5df9d(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000ca54	movl	$0xa6d, %edx
000000000000ca59	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ca5e	jmp	0xca63
000000000000ca63	movq	-0x10(%rbp), %rax
000000000000ca67	movzwl	0x48c(%rax), %ecx
000000000000ca6e	cmpl	$0x100, %ecx
000000000000ca74	movb	$0x1, %dl
000000000000ca76	movb	%dl, -0x8d(%rbp)
000000000000ca7c	je	0xca9c
000000000000ca82	movq	-0x10(%rbp), %rax
000000000000ca86	movzwl	0x48c(%rax), %ecx
000000000000ca8d	cmpl	$0x200, %ecx
000000000000ca93	sete	%dl
000000000000ca96	movb	%dl, -0x8d(%rbp)
000000000000ca9c	movb	-0x8d(%rbp), %al
000000000000caa2	xorb	$-0x1, %al
000000000000caa4	andb	$0x1, %al
000000000000caa6	movzbl	%al, %ecx
000000000000caa9	movslq	%ecx, %rdx
000000000000caac	cmpq	$0x0, %rdx
000000000000cab0	je	0xcad5
000000000000cab6	leaq	0x5dd88(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cabd	leaq	0x5ce16(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cac4	leaq	0x5dfb9(%rip), %rcx ## literal pool for: "(instruction->avx.vector_length == 256) || (instruction->avx.vector_length == 512)"
000000000000cacb	movl	$0xa6f, %edx
000000000000cad0	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cad5	jmp	0xcada
000000000000cada	movq	-0x8(%rbp), %rax
000000000000cade	movb	$0x10, 0x3c(%rax)
000000000000cae2	jmp	0xcba9
000000000000cae7	movq	-0x8(%rbp), %rax
000000000000caeb	movzbl	0x34(%rax), %ecx
000000000000caef	cmpl	$0x40, %ecx
000000000000caf2	sete	%dl
000000000000caf5	xorb	$-0x1, %dl
000000000000caf8	andb	$0x1, %dl
000000000000cafb	movzbl	%dl, %ecx
000000000000cafe	movslq	%ecx, %rax
000000000000cb01	cmpq	$0x0, %rax
000000000000cb05	je	0xcb2a
000000000000cb0b	leaq	0x5dd33(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cb12	leaq	0x5cdc1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cb19	leaq	0x5def2(%rip), %rcx ## literal pool for: "context->evex.element_size == 64"
000000000000cb20	movl	$0xa73, %edx
000000000000cb25	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cb2a	jmp	0xcb2f
000000000000cb2f	movq	-0x10(%rbp), %rax
000000000000cb33	movzwl	0x48c(%rax), %ecx
000000000000cb3a	cmpl	$0x200, %ecx
000000000000cb40	sete	%dl
000000000000cb43	xorb	$-0x1, %dl
000000000000cb46	andb	$0x1, %dl
000000000000cb49	movzbl	%dl, %ecx
000000000000cb4c	movslq	%ecx, %rax
000000000000cb4f	cmpq	$0x0, %rax
000000000000cb53	je	0xcb78
000000000000cb59	leaq	0x5dce5(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cb60	leaq	0x5cd73(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cb67	leaq	0x5df69(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
000000000000cb6e	movl	$0xa74, %edx
000000000000cb73	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cb78	jmp	0xcb7d
000000000000cb7d	movq	-0x8(%rbp), %rax
000000000000cb81	movb	$0x20, 0x3c(%rax)
000000000000cb85	jmp	0xcba9
000000000000cb8a	leaq	0x5dcb4(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cb91	leaq	0x5cd42(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cb98	leaq	0x5ea25(%rip), %rcx ## literal pool for: "0"
000000000000cb9f	movl	$0xa78, %edx
000000000000cba4	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cba9	jmp	0xcd3d
000000000000cbae	movq	-0x8(%rbp), %rax
000000000000cbb2	cmpb	$0x0, 0x26(%rax)
000000000000cbb6	setne	%cl
000000000000cbb9	xorb	$-0x1, %cl
000000000000cbbc	xorb	$-0x1, %cl
000000000000cbbf	andb	$0x1, %cl
000000000000cbc2	movzbl	%cl, %edx
000000000000cbc5	movslq	%edx, %rax
000000000000cbc8	cmpq	$0x0, %rax
000000000000cbcc	je	0xcbf1
000000000000cbd2	leaq	0x5dc6c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cbd9	leaq	0x5ccfa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cbe0	leaq	0x5ddf8(%rip), %rcx ## literal pool for: "!context->cache.W"
000000000000cbe7	movl	$0xa7c, %edx
000000000000cbec	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cbf1	jmp	0xcbf6
000000000000cbf6	movq	-0x10(%rbp), %rax
000000000000cbfa	movzwl	0x48c(%rax), %ecx
000000000000cc01	cmpl	$0x200, %ecx
000000000000cc07	sete	%dl
000000000000cc0a	xorb	$-0x1, %dl
000000000000cc0d	andb	$0x1, %dl
000000000000cc10	movzbl	%dl, %ecx
000000000000cc13	movslq	%ecx, %rax
000000000000cc16	cmpq	$0x0, %rax
000000000000cc1a	je	0xcc3f
000000000000cc20	leaq	0x5dc1e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cc27	leaq	0x5ccac(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cc2e	leaq	0x5dea2(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
000000000000cc35	movl	$0xa7d, %edx
000000000000cc3a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cc3f	jmp	0xcc44
000000000000cc44	movq	-0x8(%rbp), %rax
000000000000cc48	movzbl	0x34(%rax), %ecx
000000000000cc4c	cmpl	$0x20, %ecx
000000000000cc4f	sete	%dl
000000000000cc52	xorb	$-0x1, %dl
000000000000cc55	andb	$0x1, %dl
000000000000cc58	movzbl	%dl, %ecx
000000000000cc5b	movslq	%ecx, %rax
000000000000cc5e	cmpq	$0x0, %rax
000000000000cc62	je	0xcc87
000000000000cc68	leaq	0x5dbd6(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cc6f	leaq	0x5cc64(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cc76	leaq	0x5dd74(%rip), %rcx ## literal pool for: "context->evex.element_size == 32"
000000000000cc7d	movl	$0xa7e, %edx
000000000000cc82	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cc87	jmp	0xcc8c
000000000000cc8c	movq	-0x8(%rbp), %rax
000000000000cc90	movb	$0x20, 0x3c(%rax)
000000000000cc94	jmp	0xcd3d
000000000000cc99	movzbl	-0x29(%rbp), %eax
000000000000cc9d	movl	%eax, %ecx
000000000000cc9f	leaq	_ZydisSetAVXInformation.scales.86(%rip), %rdx
000000000000cca6	movb	(%rdx,%rcx), %sil
000000000000ccaa	movq	-0x8(%rbp), %rcx
000000000000ccae	movb	%sil, 0x3c(%rcx)
000000000000ccb2	jmp	0xcd3d
000000000000ccb7	movzbl	-0x29(%rbp), %eax
000000000000ccbb	movl	%eax, %ecx
000000000000ccbd	leaq	_ZydisSetAVXInformation.scales.87(%rip), %rdx
000000000000ccc4	movb	(%rdx,%rcx), %sil
000000000000ccc8	movq	-0x8(%rbp), %rcx
000000000000cccc	movb	%sil, 0x3c(%rcx)
000000000000ccd0	jmp	0xcd3d
000000000000ccd5	movzbl	-0x29(%rbp), %eax
000000000000ccd9	movl	%eax, %ecx
000000000000ccdb	leaq	_ZydisSetAVXInformation.scales.88(%rip), %rdx
000000000000cce2	movb	(%rdx,%rcx), %sil
000000000000cce6	movq	-0x8(%rbp), %rcx
000000000000ccea	movb	%sil, 0x3c(%rcx)
000000000000ccee	jmp	0xcd3d
000000000000ccf3	movq	-0x8(%rbp), %rax
000000000000ccf7	movb	$0x10, 0x3c(%rax)
000000000000ccfb	jmp	0xcd3d
000000000000cd00	movzbl	-0x29(%rbp), %eax
000000000000cd04	movl	%eax, %ecx
000000000000cd06	leaq	_ZydisSetAVXInformation.scales.89(%rip), %rdx
000000000000cd0d	movb	(%rdx,%rcx), %sil
000000000000cd11	movq	-0x8(%rbp), %rcx
000000000000cd15	movb	%sil, 0x3c(%rcx)
000000000000cd19	jmp	0xcd3d
000000000000cd1e	leaq	0x5db20(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cd25	leaq	0x5cbae(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cd2c	leaq	0x5e891(%rip), %rcx ## literal pool for: "0"
000000000000cd33	movl	$0xaa9, %edx
000000000000cd38	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cd3d	jmp	0xcd92
000000000000cd42	movq	-0x10(%rbp), %rax
000000000000cd46	movzbl	0x578(%rax), %ecx
000000000000cd4d	cmpl	$0x3, %ecx
000000000000cd50	sete	%dl
000000000000cd53	xorb	$-0x1, %dl
000000000000cd56	andb	$0x1, %dl
000000000000cd59	movzbl	%dl, %ecx
000000000000cd5c	movslq	%ecx, %rax
000000000000cd5f	cmpq	$0x0, %rax
000000000000cd63	je	0xcd88
000000000000cd69	leaq	0x5dad5(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cd70	leaq	0x5cb63(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cd77	leaq	0x5dd7f(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod == 3"
000000000000cd7e	movl	$0xaad, %edx
000000000000cd83	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cd88	jmp	0xcd8d
000000000000cd8d	jmp	0xcd92
000000000000cd92	movq	-0x28(%rbp), %rax
000000000000cd96	movzwl	0xc(%rax), %ecx
000000000000cd9a	movl	%ecx, %eax
000000000000cd9c	shrq	$0xc, %rax
000000000000cda0	movb	%al, %dl
000000000000cda2	cmpb	$0x0, %dl
000000000000cda5	je	0xce80
000000000000cdab	movq	-0x10(%rbp), %rax
000000000000cdaf	cmpl	$0x0, 0x49c(%rax)
000000000000cdb6	setne	%cl
000000000000cdb9	xorb	$-0x1, %cl
000000000000cdbc	xorb	$-0x1, %cl
000000000000cdbf	andb	$0x1, %cl
000000000000cdc2	movzbl	%cl, %edx
000000000000cdc5	movslq	%edx, %rax
000000000000cdc8	cmpq	$0x0, %rax
000000000000cdcc	je	0xcdf1
000000000000cdd2	leaq	0x5da6c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cdd9	leaq	0x5cafa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cde0	leaq	0x5dd36(%rip), %rcx ## literal pool for: "!instruction->avx.broadcast.mode"
000000000000cde7	movl	$0xab3, %edx
000000000000cdec	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cdf1	jmp	0xcdf6
000000000000cdf6	movq	-0x10(%rbp), %rax
000000000000cdfa	movb	$0x1, 0x498(%rax)
000000000000ce01	movq	-0x28(%rbp), %rax
000000000000ce05	movzwl	0xc(%rax), %ecx
000000000000ce09	movl	%ecx, %eax
000000000000ce0b	shrq	$0xc, %rax
000000000000ce0f	movb	%al, %dl
000000000000ce11	movzbl	%dl, %ecx
000000000000ce14	movl	%ecx, %eax
000000000000ce16	cmpq	$0xd, %rax
000000000000ce1a	setb	%dl
000000000000ce1d	xorb	$-0x1, %dl
000000000000ce20	andb	$0x1, %dl
000000000000ce23	movzbl	%dl, %ecx
000000000000ce26	movslq	%ecx, %rax
000000000000ce29	cmpq	$0x0, %rax
000000000000ce2d	je	0xce52
000000000000ce33	leaq	0x5da0b(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000ce3a	leaq	0x5ca99(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ce41	leaq	0x5dcf6(%rip), %rcx ## literal pool for: "def->broadcast < (sizeof(broadcasts) / sizeof((broadcasts)[0]))"
000000000000ce48	movl	$0xac5, %edx
000000000000ce4d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ce52	jmp	0xce57
000000000000ce57	movq	-0x28(%rbp), %rax
000000000000ce5b	movzwl	0xc(%rax), %ecx
000000000000ce5f	movl	%ecx, %eax
000000000000ce61	shrq	$0xc, %rax
000000000000ce65	movb	%al, %dl
000000000000ce67	movzbl	%dl, %ecx
000000000000ce6a	movl	%ecx, %eax
000000000000ce6c	leaq	_ZydisSetAVXInformation.broadcasts.92(%rip), %rsi
000000000000ce73	movl	(%rsi,%rax,4), %ecx
000000000000ce76	movq	-0x10(%rbp), %rax
000000000000ce7a	movl	%ecx, 0x49c(%rax)
000000000000ce80	movq	-0x10(%rbp), %rax
000000000000ce84	cmpb	$0x0, 0x567(%rax)
000000000000ce8b	je	0xcf3d
000000000000ce91	movq	-0x28(%rbp), %rax
000000000000ce95	movzwl	0xc(%rax), %ecx
000000000000ce99	shrl	$0x5, %ecx
000000000000ce9c	andl	$0x3, %ecx
000000000000ce9f	movb	%cl, %dl
000000000000cea1	subb	$0x2, %dl
000000000000cea4	movl	%ecx, -0x94(%rbp)
000000000000ceaa	movb	%dl, -0x95(%rbp)
000000000000ceb0	jb	0xceef
000000000000ceb6	jmp	0xcebb
000000000000cebb	movl	-0x94(%rbp), %eax
000000000000cec1	subl	$0x2, %eax
000000000000cec4	movl	%eax, -0x9c(%rbp)
000000000000ceca	je	0xcef4
000000000000ced0	jmp	0xced5
000000000000ced5	movl	-0x94(%rbp), %eax
000000000000cedb	subl	$0x3, %eax
000000000000cede	movl	%eax, -0xa0(%rbp)
000000000000cee4	je	0xcf09
000000000000ceea	jmp	0xcf19
000000000000ceef	jmp	0xcf38
000000000000cef4	movq	-0x8(%rbp), %rax
000000000000cef8	movzbl	0x2b(%rax), %ecx
000000000000cefc	addl	$0x1, %ecx
000000000000ceff	movq	-0x10(%rbp), %rax
000000000000cf03	movl	%ecx, 0x4a0(%rax)
000000000000cf09	movq	-0x10(%rbp), %rax
000000000000cf0d	movb	$0x1, 0x4ac(%rax)
000000000000cf14	jmp	0xcf38
000000000000cf19	leaq	0x5d925(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cf20	leaq	0x5c9b3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000cf27	leaq	0x5e696(%rip), %rcx ## literal pool for: "0"
000000000000cf2e	movl	$0xad9, %edx
000000000000cf33	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000cf38	jmp	0xcf3d
000000000000cf3d	movq	-0x10(%rbp), %rax
000000000000cf41	movzbl	0x569(%rax), %ecx
000000000000cf48	addl	$0xf8, %ecx
000000000000cf4e	movl	%ecx, 0x494(%rax)
000000000000cf54	movq	-0x28(%rbp), %rax
000000000000cf58	movzwl	0xc(%rax), %ecx
000000000000cf5c	shrl	$0xa, %ecx
000000000000cf5f	andl	$0x3, %ecx
000000000000cf62	movb	%cl, %dl
000000000000cf64	testb	%dl, %dl
000000000000cf66	movl	%ecx, -0xa4(%rbp)
000000000000cf6c	je	0xcfab
000000000000cf72	jmp	0xcf77
000000000000cf77	movl	-0xa4(%rbp), %eax
000000000000cf7d	subl	$0x1, %eax
000000000000cf80	movl	%eax, -0xa8(%rbp)
000000000000cf86	je	0xcfc8
000000000000cf8c	jmp	0xcf91
000000000000cf91	movl	-0xa4(%rbp), %eax
000000000000cf97	subl	$0x2, %eax
000000000000cf9a	movl	%eax, -0xac(%rbp)
000000000000cfa0	je	0xcfdb
000000000000cfa6	jmp	0xcff8
000000000000cfab	movq	-0x10(%rbp), %rax
000000000000cfaf	movzbl	0x564(%rax), %ecx
000000000000cfb6	addl	$0x2, %ecx
000000000000cfb9	movq	-0x10(%rbp), %rax
000000000000cfbd	movl	%ecx, 0x490(%rax)
000000000000cfc3	jmp	0xd017
000000000000cfc8	movq	-0x10(%rbp), %rax
000000000000cfcc	movl	$0x3, 0x490(%rax)
000000000000cfd6	jmp	0xd017
000000000000cfdb	movq	-0x10(%rbp), %rax
000000000000cfdf	movzbl	0x564(%rax), %ecx
000000000000cfe6	addl	$0x4, %ecx
000000000000cfe9	movq	-0x10(%rbp), %rax
000000000000cfed	movl	%ecx, 0x490(%rax)
000000000000cff3	jmp	0xd017
000000000000cff8	leaq	0x5d846(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000cfff	leaq	0x5c8d4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d006	leaq	0x5e5b7(%rip), %rcx ## literal pool for: "0"
000000000000d00d	movl	$0xaeb, %edx
000000000000d012	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d017	movq	-0x10(%rbp), %rax
000000000000d01b	cmpb	$0x0, 0x569(%rax)
000000000000d022	jne	0xd036
000000000000d028	movq	-0x10(%rbp), %rax
000000000000d02c	movl	$0x1, 0x490(%rax)
000000000000d036	jmp	0xda8f
000000000000d03b	movq	-0x10(%rbp), %rax
000000000000d03f	movw	$0x200, 0x48c(%rax)
000000000000d048	movq	-0x18(%rbp), %rax
000000000000d04c	movq	%rax, -0x38(%rbp)
000000000000d050	movq	-0x38(%rbp), %rax
000000000000d054	movb	0xc(%rax), %cl
000000000000d057	shrb	$0x3, %cl
000000000000d05a	andb	$0x1, %cl
000000000000d05d	movb	%cl, -0x39(%rbp)
000000000000d060	cmpb	$0x0, -0x39(%rbp)
000000000000d064	movb	$0x1, %cl
000000000000d066	movb	%cl, -0xad(%rbp)
000000000000d06c	je	0xd08e
000000000000d072	movq	-0x38(%rbp), %rax
000000000000d076	movb	0xc(%rax), %cl
000000000000d079	shrb	$0x4, %cl
000000000000d07c	andb	$0x7, %cl
000000000000d07f	cmpb	$0x0, %cl
000000000000d082	setne	%cl
000000000000d085	xorb	$-0x1, %cl
000000000000d088	movb	%cl, -0xad(%rbp)
000000000000d08e	movb	-0xad(%rbp), %al
000000000000d094	xorb	$-0x1, %al
000000000000d096	andb	$0x1, %al
000000000000d098	movzbl	%al, %ecx
000000000000d09b	movslq	%ecx, %rdx
000000000000d09e	cmpq	$0x0, %rdx
000000000000d0a2	je	0xd0c7
000000000000d0a8	leaq	0x5d796(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d0af	leaq	0x5c824(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d0b6	leaq	0x5dac1(%rip), %rcx ## literal pool for: "!index || !def->broadcast"
000000000000d0bd	movl	$0xb01, %edx
000000000000d0c2	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d0c7	jmp	0xd0cc
000000000000d0cc	cmpb	$0x0, -0x39(%rbp)
000000000000d0d0	jne	0xd1b9
000000000000d0d6	movq	-0x38(%rbp), %rax
000000000000d0da	movb	0xc(%rax), %cl
000000000000d0dd	shrb	$0x4, %cl
000000000000d0e0	andb	$0x7, %cl
000000000000d0e3	movzbl	%cl, %edx
000000000000d0e6	cmpl	$0x0, %edx
000000000000d0e9	je	0xd1b9
000000000000d0ef	movq	-0x10(%rbp), %rax
000000000000d0f3	movb	$0x1, 0x498(%rax)
000000000000d0fa	movq	-0x38(%rbp), %rax
000000000000d0fe	movzbl	0xc(%rax), %ecx
000000000000d102	shrl	$0x4, %ecx
000000000000d105	andl	$0x7, %ecx
000000000000d108	decl	%ecx
000000000000d10a	movl	%ecx, %eax
000000000000d10c	subl	$0x3, %ecx
000000000000d10f	movq	%rax, -0xb8(%rbp)
000000000000d116	movl	%ecx, -0xbc(%rbp)
000000000000d11c	ja	0xd195
000000000000d122	leaq	0x97f(%rip), %rax
000000000000d129	movq	-0xb8(%rbp), %rcx
000000000000d130	movslq	(%rax,%rcx,4), %rdx
000000000000d134	addq	%rax, %rdx
000000000000d137	jmpq	*%rdx
000000000000d139	movq	-0x10(%rbp), %rax
000000000000d13d	movl	$0x3, 0x49c(%rax)
000000000000d147	movb	$0x1, -0x39(%rbp)
000000000000d14b	jmp	0xd1b4
000000000000d150	movq	-0x10(%rbp), %rax
000000000000d154	movl	$0x4, 0x49c(%rax)
000000000000d15e	movb	$0x1, -0x39(%rbp)
000000000000d162	jmp	0xd1b4
000000000000d167	movq	-0x10(%rbp), %rax
000000000000d16b	movl	$0xa, 0x49c(%rax)
000000000000d175	movb	$0x2, -0x39(%rbp)
000000000000d179	jmp	0xd1b4
000000000000d17e	movq	-0x10(%rbp), %rax
000000000000d182	movl	$0xb, 0x49c(%rax)
000000000000d18c	movb	$0x2, -0x39(%rbp)
000000000000d190	jmp	0xd1b4
000000000000d195	leaq	0x5d6a9(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d19c	leaq	0x5c737(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d1a3	leaq	0x5e41a(%rip), %rcx ## literal pool for: "0"
000000000000d1aa	movl	$0xb18, %edx
000000000000d1af	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d1b4	jmp	0xd1b9
000000000000d1b9	movq	-0x38(%rbp), %rax
000000000000d1bd	movl	0x8(%rax), %ecx
000000000000d1c0	movl	%ecx, %edx
000000000000d1c2	movzbl	0xc(%rax), %ecx
000000000000d1c6	movl	%ecx, %eax
000000000000d1c8	shlq	$0x20, %rax
000000000000d1cc	orq	%rax, %rdx
000000000000d1cf	shrq	$0x1c, %rdx
000000000000d1d3	movl	%edx, %ecx
000000000000d1d5	andl	$0x1f, %ecx
000000000000d1d8	movl	%ecx, %eax
000000000000d1da	movb	%al, %sil
000000000000d1dd	subb	$0x19, %sil
000000000000d1e1	movq	%rax, -0xc8(%rbp)
000000000000d1e8	movb	%sil, -0xc9(%rbp)
000000000000d1ef	ja	0xd522
000000000000d1f5	leaq	0x8bc(%rip), %rax
000000000000d1fc	movq	-0xc8(%rbp), %rcx
000000000000d203	movslq	(%rax,%rcx,4), %rdx
000000000000d207	addq	%rax, %rdx
000000000000d20a	jmpq	*%rdx
000000000000d20c	jmp	0xd541
000000000000d211	movq	-0x8(%rbp), %rax
000000000000d215	movb	$0x40, 0x3c(%rax)
000000000000d219	jmp	0xd541
000000000000d21e	movq	-0x10(%rbp), %rax
000000000000d222	movzbl	0x574(%rax), %ecx
000000000000d229	movl	%ecx, %eax
000000000000d22b	cmpq	$0x8, %rax
000000000000d22f	setb	%dl
000000000000d232	xorb	$-0x1, %dl
000000000000d235	andb	$0x1, %dl
000000000000d238	movzbl	%dl, %ecx
000000000000d23b	movslq	%ecx, %rax
000000000000d23e	cmpq	$0x0, %rax
000000000000d242	je	0xd267
000000000000d248	leaq	0x5d5f6(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d24f	leaq	0x5c684(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d256	leaq	0x5d93b(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000d25d	movl	$0xb38, %edx
000000000000d262	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d267	jmp	0xd26c
000000000000d26c	movzbl	-0x39(%rbp), %eax
000000000000d270	movl	%eax, %ecx
000000000000d272	shlq	$0x3, %rcx
000000000000d276	leaq	_ZydisSetAVXInformation.lookup.95(%rip), %rdx
000000000000d27d	addq	%rcx, %rdx
000000000000d280	movq	-0x10(%rbp), %rcx
000000000000d284	movzbl	0x574(%rcx), %eax
000000000000d28b	movl	%eax, %ecx
000000000000d28d	movb	(%rdx,%rcx), %sil
000000000000d291	movq	-0x8(%rbp), %rcx
000000000000d295	movb	%sil, 0x3c(%rcx)
000000000000d299	jmp	0xd541
000000000000d29e	movq	-0x10(%rbp), %rax
000000000000d2a2	movzbl	0x574(%rax), %ecx
000000000000d2a9	movl	%ecx, %eax
000000000000d2ab	cmpq	$0x8, %rax
000000000000d2af	setb	%dl
000000000000d2b2	xorb	$-0x1, %dl
000000000000d2b5	andb	$0x1, %dl
000000000000d2b8	movzbl	%dl, %ecx
000000000000d2bb	movslq	%ecx, %rax
000000000000d2be	cmpq	$0x0, %rax
000000000000d2c2	je	0xd2e7
000000000000d2c8	leaq	0x5d576(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d2cf	leaq	0x5c604(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d2d6	leaq	0x5d8bb(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000d2dd	movl	$0xb47, %edx
000000000000d2e2	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d2e7	jmp	0xd2ec
000000000000d2ec	movzbl	-0x39(%rbp), %eax
000000000000d2f0	movl	%eax, %ecx
000000000000d2f2	shlq	$0x3, %rcx
000000000000d2f6	leaq	_ZydisSetAVXInformation.lookup.97(%rip), %rdx
000000000000d2fd	addq	%rcx, %rdx
000000000000d300	movq	-0x10(%rbp), %rcx
000000000000d304	movzbl	0x574(%rcx), %eax
000000000000d30b	movl	%eax, %ecx
000000000000d30d	movb	(%rdx,%rcx), %sil
000000000000d311	movq	-0x8(%rbp), %rcx
000000000000d315	movb	%sil, 0x3c(%rcx)
000000000000d319	jmp	0xd541
000000000000d31e	movq	-0x10(%rbp), %rax
000000000000d322	movzbl	0x574(%rax), %ecx
000000000000d329	movl	%ecx, %eax
000000000000d32b	cmpq	$0x3, %rax
000000000000d32f	setb	%dl
000000000000d332	xorb	$-0x1, %dl
000000000000d335	andb	$0x1, %dl
000000000000d338	movzbl	%dl, %ecx
000000000000d33b	movslq	%ecx, %rax
000000000000d33e	cmpq	$0x0, %rax
000000000000d342	je	0xd367
000000000000d348	leaq	0x5d4f6(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d34f	leaq	0x5c584(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d356	leaq	0x5d83b(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000d35d	movl	$0xb56, %edx
000000000000d362	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d367	jmp	0xd36c
000000000000d36c	movzbl	-0x39(%rbp), %eax
000000000000d370	movl	%eax, %ecx
000000000000d372	imulq	$0x3, %rcx, %rcx
000000000000d376	leaq	_ZydisSetAVXInformation.lookup.98(%rip), %rdx
000000000000d37d	addq	%rcx, %rdx
000000000000d380	movq	-0x10(%rbp), %rcx
000000000000d384	movzbl	0x574(%rcx), %eax
000000000000d38b	movl	%eax, %ecx
000000000000d38d	movb	(%rdx,%rcx), %sil
000000000000d391	movq	-0x8(%rbp), %rcx
000000000000d395	movb	%sil, 0x3c(%rcx)
000000000000d399	jmp	0xd541
000000000000d39e	movzbl	-0x39(%rbp), %eax
000000000000d3a2	cmpl	$0x2, %eax
000000000000d3a5	setl	%cl
000000000000d3a8	xorb	$-0x1, %cl
000000000000d3ab	andb	$0x1, %cl
000000000000d3ae	movzbl	%cl, %eax
000000000000d3b1	movslq	%eax, %rdx
000000000000d3b4	cmpq	$0x0, %rdx
000000000000d3b8	je	0xd3dd
000000000000d3be	leaq	0x5d480(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d3c5	leaq	0x5c50e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d3cc	leaq	0x5d816(%rip), %rcx ## literal pool for: "index < 2"
000000000000d3d3	movl	$0xb62, %edx
000000000000d3d8	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d3dd	jmp	0xd3e2
000000000000d3e2	movq	-0x10(%rbp), %rax
000000000000d3e6	movzbl	0x574(%rax), %ecx
000000000000d3ed	movl	%ecx, %eax
000000000000d3ef	cmpq	$0x8, %rax
000000000000d3f3	setb	%dl
000000000000d3f6	xorb	$-0x1, %dl
000000000000d3f9	andb	$0x1, %dl
000000000000d3fc	movzbl	%dl, %ecx
000000000000d3ff	movslq	%ecx, %rax
000000000000d402	cmpq	$0x0, %rax
000000000000d406	je	0xd42b
000000000000d40c	leaq	0x5d432(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d413	leaq	0x5c4c0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d41a	leaq	0x5d777(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000d421	movl	$0xb63, %edx
000000000000d426	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d42b	jmp	0xd430
000000000000d430	movzbl	-0x39(%rbp), %eax
000000000000d434	movl	%eax, %ecx
000000000000d436	shlq	$0x3, %rcx
000000000000d43a	leaq	_ZydisSetAVXInformation.lookup.99(%rip), %rdx
000000000000d441	addq	%rcx, %rdx
000000000000d444	movq	-0x10(%rbp), %rcx
000000000000d448	movzbl	0x574(%rcx), %eax
000000000000d44f	movl	%eax, %ecx
000000000000d451	movb	(%rdx,%rcx), %sil
000000000000d455	movq	-0x8(%rbp), %rcx
000000000000d459	movb	%sil, 0x3c(%rcx)
000000000000d45d	jmp	0xd541
000000000000d462	movzbl	-0x39(%rbp), %eax
000000000000d466	cmpl	$0x2, %eax
000000000000d469	setl	%cl
000000000000d46c	xorb	$-0x1, %cl
000000000000d46f	andb	$0x1, %cl
000000000000d472	movzbl	%cl, %eax
000000000000d475	movslq	%eax, %rdx
000000000000d478	cmpq	$0x0, %rdx
000000000000d47c	je	0xd4a1
000000000000d482	leaq	0x5d3bc(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d489	leaq	0x5c44a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d490	leaq	0x5d752(%rip), %rcx ## literal pool for: "index < 2"
000000000000d497	movl	$0xb6f, %edx
000000000000d49c	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d4a1	jmp	0xd4a6
000000000000d4a6	movq	-0x10(%rbp), %rax
000000000000d4aa	movzbl	0x574(%rax), %ecx
000000000000d4b1	movl	%ecx, %eax
000000000000d4b3	cmpq	$0x1, %rax
000000000000d4b7	setb	%dl
000000000000d4ba	xorb	$-0x1, %dl
000000000000d4bd	andb	$0x1, %dl
000000000000d4c0	movzbl	%dl, %ecx
000000000000d4c3	movslq	%ecx, %rax
000000000000d4c6	cmpq	$0x0, %rax
000000000000d4ca	je	0xd4ef
000000000000d4d0	leaq	0x5d36e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d4d7	leaq	0x5c3fc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d4de	leaq	0x5d6b3(%rip), %rcx ## literal pool for: "instruction->raw.mvex.SSS < (sizeof(lookup[index]) / sizeof((lookup[index])[0]))"
000000000000d4e5	movl	$0xb70, %edx
000000000000d4ea	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d4ef	jmp	0xd4f4
000000000000d4f4	movzbl	-0x39(%rbp), %eax
000000000000d4f8	movl	%eax, %ecx
000000000000d4fa	leaq	_ZydisSetAVXInformation.lookup.101(%rip), %rdx
000000000000d501	addq	%rcx, %rdx
000000000000d504	movq	-0x10(%rbp), %rcx
000000000000d508	movzbl	0x574(%rcx), %eax
000000000000d50f	movl	%eax, %ecx
000000000000d511	movb	(%rdx,%rcx), %sil
000000000000d515	movq	-0x8(%rbp), %rcx
000000000000d519	movb	%sil, 0x3c(%rcx)
000000000000d51d	jmp	0xd541
000000000000d522	leaq	0x5d31c(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d529	leaq	0x5c3aa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d530	leaq	0x5e08d(%rip), %rcx ## literal pool for: "0"
000000000000d537	movl	$0xb75, %edx
000000000000d53c	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d541	movq	-0x38(%rbp), %rax
000000000000d545	movl	0x8(%rax), %ecx
000000000000d548	movl	%ecx, %edx
000000000000d54a	movzbl	0xc(%rax), %ecx
000000000000d54e	movl	%ecx, %eax
000000000000d550	shlq	$0x20, %rax
000000000000d554	orq	%rax, %rdx
000000000000d557	shrq	$0x1c, %rdx
000000000000d55b	movl	%edx, %ecx
000000000000d55d	andl	$0x1f, %ecx
000000000000d560	movq	-0x8(%rbp), %rax
000000000000d564	movl	%ecx, 0x38(%rax)
000000000000d567	movq	-0x38(%rbp), %rax
000000000000d56b	movl	0x8(%rax), %ecx
000000000000d56e	movl	%ecx, %edx
000000000000d570	movzbl	0xc(%rax), %ecx
000000000000d574	movl	%ecx, %eax
000000000000d576	shlq	$0x20, %rax
000000000000d57a	orq	%rax, %rdx
000000000000d57d	shrq	$0x1c, %rdx
000000000000d581	movl	%edx, %ecx
000000000000d583	andl	$0x1f, %ecx
000000000000d586	movl	%ecx, %eax
000000000000d588	movb	%al, %sil
000000000000d58b	subb	$0x19, %sil
000000000000d58f	movq	%rax, -0xd8(%rbp)
000000000000d596	movb	%sil, -0xd9(%rbp)
000000000000d59d	ja	0xda0a
000000000000d5a3	leaq	0x576(%rip), %rax
000000000000d5aa	movq	-0xd8(%rbp), %rcx
000000000000d5b1	movslq	(%rax,%rcx,4), %rdx
000000000000d5b5	addq	%rax, %rdx
000000000000d5b8	jmpq	*%rdx
000000000000d5ba	jmp	0xda29
000000000000d5bf	movq	-0x10(%rbp), %rax
000000000000d5c3	movzbl	0x574(%rax), %ecx
000000000000d5ca	addl	$0x1, %ecx
000000000000d5cd	movq	-0x10(%rbp), %rax
000000000000d5d1	movl	%ecx, 0x4a0(%rax)
000000000000d5d7	jmp	0xda29
000000000000d5dc	movq	-0x10(%rbp), %rax
000000000000d5e0	movzbl	0x574(%rax), %ecx
000000000000d5e7	cmpl	$0x4, %ecx
000000000000d5ea	jl	0xd5fb
000000000000d5f0	movq	-0x10(%rbp), %rax
000000000000d5f4	movb	$0x1, 0x4ac(%rax)
000000000000d5fb	jmp	0xda29
000000000000d600	movq	-0x10(%rbp), %rax
000000000000d604	movzbl	0x574(%rax), %ecx
000000000000d60b	addl	$0x1, %ecx
000000000000d60e	movq	-0x10(%rbp), %rax
000000000000d612	movl	%ecx, 0x4a4(%rax)
000000000000d618	jmp	0xda29
000000000000d61d	movq	-0x10(%rbp), %rax
000000000000d621	movzbl	0x574(%rax), %ecx
000000000000d628	movl	%ecx, %eax
000000000000d62a	movq	%rax, %rdx
000000000000d62d	subq	$0x7, %rdx
000000000000d631	movq	%rax, -0xe8(%rbp)
000000000000d638	movq	%rdx, -0xf0(%rbp)
000000000000d63f	ja	0xd6e6
000000000000d645	leaq	0x59c(%rip), %rax
000000000000d64c	movq	-0xe8(%rbp), %rcx
000000000000d653	movslq	(%rax,%rcx,4), %rdx
000000000000d657	addq	%rax, %rdx
000000000000d65a	jmpq	*%rdx
000000000000d65c	jmp	0xd705
000000000000d661	movq	-0x10(%rbp), %rax
000000000000d665	movl	$0x4, 0x49c(%rax)
000000000000d66f	jmp	0xd705
000000000000d674	movq	-0x10(%rbp), %rax
000000000000d678	movl	$0xb, 0x49c(%rax)
000000000000d682	jmp	0xd705
000000000000d687	movq	-0x10(%rbp), %rax
000000000000d68b	movl	$0x1, 0x4a8(%rax)
000000000000d695	jmp	0xd705
000000000000d69a	movq	-0x10(%rbp), %rax
000000000000d69e	movl	$0x3, 0x4a8(%rax)
000000000000d6a8	jmp	0xd705
000000000000d6ad	movq	-0x10(%rbp), %rax
000000000000d6b1	movl	$0x2, 0x4a8(%rax)
000000000000d6bb	jmp	0xd705
000000000000d6c0	movq	-0x10(%rbp), %rax
000000000000d6c4	movl	$0x5, 0x4a8(%rax)
000000000000d6ce	jmp	0xd705
000000000000d6d3	movq	-0x10(%rbp), %rax
000000000000d6d7	movl	$0x4, 0x4a8(%rax)
000000000000d6e1	jmp	0xd705
000000000000d6e6	leaq	0x5d158(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d6ed	leaq	0x5c1e6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d6f4	leaq	0x5dec9(%rip), %rcx ## literal pool for: "0"
000000000000d6fb	movl	$0xbae, %edx
000000000000d700	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d705	jmp	0xda29
000000000000d70a	movq	-0x10(%rbp), %rax
000000000000d70e	movzbl	0x574(%rax), %ecx
000000000000d715	movl	%ecx, %eax
000000000000d717	movq	%rax, %rdx
000000000000d71a	subq	$0x7, %rdx
000000000000d71e	movq	%rax, -0xf8(%rbp)
000000000000d725	movq	%rdx, -0x100(%rbp)
000000000000d72c	ja	0xd7c0
000000000000d732	leaq	0x48f(%rip), %rax
000000000000d739	movq	-0xf8(%rbp), %rcx
000000000000d740	movslq	(%rax,%rcx,4), %rdx
000000000000d744	addq	%rax, %rdx
000000000000d747	jmpq	*%rdx
000000000000d749	jmp	0xd7df
000000000000d74e	movq	-0x10(%rbp), %rax
000000000000d752	movl	$0x4, 0x49c(%rax)
000000000000d75c	jmp	0xd7df
000000000000d761	movq	-0x10(%rbp), %rax
000000000000d765	movl	$0xb, 0x49c(%rax)
000000000000d76f	jmp	0xd7df
000000000000d774	movq	-0x10(%rbp), %rax
000000000000d778	movl	$0x3, 0x4a8(%rax)
000000000000d782	jmp	0xd7df
000000000000d787	movq	-0x10(%rbp), %rax
000000000000d78b	movl	$0x2, 0x4a8(%rax)
000000000000d795	jmp	0xd7df
000000000000d79a	movq	-0x10(%rbp), %rax
000000000000d79e	movl	$0x5, 0x4a8(%rax)
000000000000d7a8	jmp	0xd7df
000000000000d7ad	movq	-0x10(%rbp), %rax
000000000000d7b1	movl	$0x4, 0x4a8(%rax)
000000000000d7bb	jmp	0xd7df
000000000000d7c0	leaq	0x5d07e(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d7c7	leaq	0x5c10c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d7ce	leaq	0x5ddef(%rip), %rcx ## literal pool for: "0"
000000000000d7d5	movl	$0xbcb, %edx
000000000000d7da	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d7df	jmp	0xda29
000000000000d7e4	movq	-0x10(%rbp), %rax
000000000000d7e8	movzbl	0x574(%rax), %ecx
000000000000d7ef	testl	%ecx, %ecx
000000000000d7f1	movl	%ecx, -0x104(%rbp)
000000000000d7f7	je	0xd836
000000000000d7fd	jmp	0xd802
000000000000d802	movl	-0x104(%rbp), %eax
000000000000d808	subl	$0x1, %eax
000000000000d80b	movl	%eax, -0x108(%rbp)
000000000000d811	je	0xd83b
000000000000d817	jmp	0xd81c
000000000000d81c	movl	-0x104(%rbp), %eax
000000000000d822	subl	$0x2, %eax
000000000000d825	movl	%eax, -0x10c(%rbp)
000000000000d82b	je	0xd84e
000000000000d831	jmp	0xd861
000000000000d836	jmp	0xd880
000000000000d83b	movq	-0x10(%rbp), %rax
000000000000d83f	movl	$0x3, 0x49c(%rax)
000000000000d849	jmp	0xd880
000000000000d84e	movq	-0x10(%rbp), %rax
000000000000d852	movl	$0xa, 0x49c(%rax)
000000000000d85c	jmp	0xd880
000000000000d861	leaq	0x5cfdd(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d868	leaq	0x5c06b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d86f	leaq	0x5dd4e(%rip), %rcx ## literal pool for: "0"
000000000000d876	movl	$0xbdb, %edx
000000000000d87b	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d880	jmp	0xda29
000000000000d885	movq	-0x10(%rbp), %rax
000000000000d889	movzbl	0x574(%rax), %ecx
000000000000d890	movl	%ecx, %eax
000000000000d892	movq	%rax, %rdx
000000000000d895	subq	$0x7, %rdx
000000000000d899	movq	%rax, -0x118(%rbp)
000000000000d8a0	movq	%rdx, -0x120(%rbp)
000000000000d8a7	ja	0xd928
000000000000d8ad	leaq	0x2f4(%rip), %rax
000000000000d8b4	movq	-0x118(%rbp), %rcx
000000000000d8bb	movslq	(%rax,%rcx,4), %rdx
000000000000d8bf	addq	%rax, %rdx
000000000000d8c2	jmpq	*%rdx
000000000000d8c4	jmp	0xd947
000000000000d8c9	movq	-0x10(%rbp), %rax
000000000000d8cd	movl	$0x1, 0x4a8(%rax)
000000000000d8d7	jmp	0xd947
000000000000d8dc	movq	-0x10(%rbp), %rax
000000000000d8e0	movl	$0x3, 0x4a8(%rax)
000000000000d8ea	jmp	0xd947
000000000000d8ef	movq	-0x10(%rbp), %rax
000000000000d8f3	movl	$0x2, 0x4a8(%rax)
000000000000d8fd	jmp	0xd947
000000000000d902	movq	-0x10(%rbp), %rax
000000000000d906	movl	$0x5, 0x4a8(%rax)
000000000000d910	jmp	0xd947
000000000000d915	movq	-0x10(%rbp), %rax
000000000000d919	movl	$0x4, 0x4a8(%rax)
000000000000d923	jmp	0xd947
000000000000d928	leaq	0x5cf16(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d92f	leaq	0x5bfa4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d936	leaq	0x5dc87(%rip), %rcx ## literal pool for: "0"
000000000000d93d	movl	$0xbf4, %edx
000000000000d942	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000d947	jmp	0xda29
000000000000d94c	jmp	0xda29
000000000000d951	movq	-0x10(%rbp), %rax
000000000000d955	movzbl	0x574(%rax), %ecx
000000000000d95c	movl	%ecx, %eax
000000000000d95e	movq	%rax, %rdx
000000000000d961	subq	$0x7, %rdx
000000000000d965	movq	%rax, -0x128(%rbp)
000000000000d96c	movq	%rdx, -0x130(%rbp)
000000000000d973	ja	0xd9e1
000000000000d979	leaq	0x208(%rip), %rax
000000000000d980	movq	-0x128(%rbp), %rcx
000000000000d987	movslq	(%rax,%rcx,4), %rdx
000000000000d98b	addq	%rax, %rdx
000000000000d98e	jmpq	*%rdx
000000000000d990	jmp	0xda00
000000000000d995	movq	-0x10(%rbp), %rax
000000000000d999	movl	$0x3, 0x4a8(%rax)
000000000000d9a3	jmp	0xda00
000000000000d9a8	movq	-0x10(%rbp), %rax
000000000000d9ac	movl	$0x2, 0x4a8(%rax)
000000000000d9b6	jmp	0xda00
000000000000d9bb	movq	-0x10(%rbp), %rax
000000000000d9bf	movl	$0x5, 0x4a8(%rax)
000000000000d9c9	jmp	0xda00
000000000000d9ce	movq	-0x10(%rbp), %rax
000000000000d9d2	movl	$0x4, 0x4a8(%rax)
000000000000d9dc	jmp	0xda00
000000000000d9e1	leaq	0x5ce5d(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000d9e8	leaq	0x5beeb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000d9ef	leaq	0x5dbce(%rip), %rcx ## literal pool for: "0"
000000000000d9f6	movl	$0xc0d, %edx
000000000000d9fb	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000da00	jmp	0xda29
000000000000da05	jmp	0xda29
000000000000da0a	leaq	0x5ce34(%rip), %rdi ## literal pool for: "ZydisSetAVXInformation"
000000000000da11	leaq	0x5bec2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000da18	leaq	0x5dba5(%rip), %rcx ## literal pool for: "0"
000000000000da1f	movl	$0xc14, %edx
000000000000da24	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000da29	movq	-0x10(%rbp), %rax
000000000000da2d	movzbl	0x578(%rax), %ecx
000000000000da34	cmpl	$0x3, %ecx
000000000000da37	je	0xda5c
000000000000da3d	movq	-0x10(%rbp), %rax
000000000000da41	movzbl	0x573(%rax), %ecx
000000000000da48	cmpl	$0x0, %ecx
000000000000da4b	je	0xda5c
000000000000da51	movq	-0x10(%rbp), %rax
000000000000da55	movb	$0x1, 0x4ad(%rax)
000000000000da5c	movq	-0x10(%rbp), %rax
000000000000da60	movl	$0x2, 0x490(%rax)
000000000000da6a	movq	-0x10(%rbp), %rax
000000000000da6e	movzbl	0x576(%rax), %ecx
000000000000da75	addl	$0xf8, %ecx
000000000000da7b	movq	-0x10(%rbp), %rax
000000000000da7f	movl	%ecx, 0x494(%rax)
000000000000da85	jmp	0xda8f
000000000000da8a	jmp	0xda8f
000000000000da8f	addq	$0x130, %rsp
000000000000da96	popq	%rbp
000000000000da97	retq
000000000000da98	.byte 0x1f #bad opcode
000000000000da99	inb	$0xff, %al
000000000000da9b	decl	0x5bffffe4(%rdi)
000000000000daa1	inl	$0xff, %eax
000000000000daa3	jmpq	*-0x6e00000b(%rbx)
000000000000daa9	idivb	%bh
000000000000daab	ljmpl	*-0x4000000a(%rax)
000000000000dab1	idivb	%bh
000000000000dab3	callq	*%rsi
000000000000dab5	idivb	%bh
000000000000dab7	callq	*-0x1(%rdi,%rsi,8)
000000000000dabb	callq	*-0x1(%rdi,%rsi,8)
000000000000dabf	callq	*-0x1(%rdi,%rsi,8)
000000000000dac3	callq	*-0x1(%rdi,%rsi,8)
000000000000dac7	lcalll	*-0x9(%rcx)
000000000000daca	.byte 0xff #bad opcode
000000000000dacb	lcalll	*-0x9(%rcx)
000000000000dace	.byte 0xff #bad opcode
000000000000dacf	lcalll	*-0x9(%rcx)
000000000000dad2	.byte 0xff #bad opcode
000000000000dad3	lcalll	*-0x9(%rcx)
000000000000dad6	.byte 0xff #bad opcode
000000000000dad7	callq	*-0x1(%rdi,%rsi,8)
000000000000dadb	callq	*-0x1(%rdi,%rsi,8)
000000000000dadf	jmpq	*-0x9(%rsi)
000000000000dae2	.byte 0xff #bad opcode
000000000000dae3	jmpq	*-0x9(%rsi)
000000000000dae6	.byte 0xff #bad opcode
000000000000dae7	jmpq	*-0x9(%rsi)
000000000000daea	.byte 0xff #bad opcode
000000000000daeb	jmpq	*-0x8(%rsi)
000000000000daee	.byte 0xff #bad opcode
000000000000daef	jmpq	*%rsi
000000000000daf1	idivl	%edi
000000000000daf3	jmpq	*%rsi
000000000000daf5	idivl	%edi
000000000000daf7	jmpq	*%rsi
000000000000daf9	idivl	%edi
000000000000dafb	jmpq	*-0x8(%rsi)
000000000000dafe	.byte 0xff #bad opcode
000000000000daff	jmpq	*-0x9(%rsi)
000000000000db02	.byte 0xff #bad opcode
000000000000db03	jmpq	*-0x8(%rsi)
000000000000db06	.byte 0xff #bad opcode
000000000000db07	jmpq	*%rsi
000000000000db09	idivl	%edi
000000000000db0b	jmpq	*-0x8(%rsi)
000000000000db0e	.byte 0xff #bad opcode
000000000000db0f	jmpq	*%rsi
000000000000db11	clc
000000000000db12	.byte 0xff #bad opcode
000000000000db13	ljmpl	*-0x19000007(%rdx)
000000000000db19	clc
000000000000db1a	.byte 0xff #bad opcode
000000000000db1b	ljmpl	*-0x65000007(%rdx)
000000000000db21	cli
000000000000db22	.byte 0xff #bad opcode
000000000000db23	lcalll	*-0x60000006(%rdx)
000000000000db29	cli
000000000000db2a	.byte 0xff #bad opcode
000000000000db2b	.byte 0xff #bad opcode
000000000000db2c	movl	$0x9afffffa, %esp
000000000000db31	cli
000000000000db32	.byte 0xff #bad opcode
000000000000db33	lcalll	*-0x65000006(%rdx)
000000000000db39	cli
000000000000db3a	.byte 0xff #bad opcode
000000000000db3b	lcalll	*-0x1f000006(%rdx)
000000000000db41	cli
000000000000db42	.byte 0xff #bad opcode
000000000000db43	jmpq	*%rax
000000000000db45	cli
000000000000db46	.byte 0xff #bad opcode
000000000000db47	.byte 0xff #bad opcode
000000000000db48	std
000000000000db49	cli
000000000000db4a	.byte 0xff #bad opcode
000000000000db4b	.byte 0xff #bad opcode
000000000000db4c	std
000000000000db4d	cli
000000000000db4e	.byte 0xff #bad opcode
000000000000db4f	.byte 0xff #bad opcode
000000000000db50	std
000000000000db51	cli
000000000000db52	.byte 0xff #bad opcode
000000000000db53	incl	%esp
000000000000db55	cld
000000000000db56	.byte 0xff #bad opcode
000000000000db57	.byte 0xff #bad opcode
000000000000db58	.byte 0xea #bad opcode
000000000000db59	sti
000000000000db5a	.byte 0xff #bad opcode
000000000000db5b	.byte 0xff #bad opcode
000000000000db5c	.byte 0xea #bad opcode
000000000000db5d	sti
000000000000db5e	.byte 0xff #bad opcode
000000000000db5f	.byte 0xff #bad opcode
000000000000db60	.byte 0xea #bad opcode
000000000000db61	sti
000000000000db62	.byte 0xff #bad opcode
000000000000db63	incl	%esp
000000000000db65	cld
000000000000db66	.byte 0xff #bad opcode
000000000000db67	jmpq	*-0x3(%rbp)
000000000000db6a	.byte 0xff #bad opcode
000000000000db6b	ljmpl	*(%rsi,%rdi,8)
000000000000db6e	.byte 0xff #bad opcode
000000000000db6f	pushq	(%rcx)
000000000000db71	.byte 0xfe #bad opcode
000000000000db72	.byte 0xff #bad opcode
000000000000db73	jmpq	*%rbp
000000000000db75	.byte 0xfe #bad opcode
000000000000db76	.byte 0xff #bad opcode
000000000000db77	jmpq	*-0x3(%rbp)
000000000000db7a	.byte 0xff #bad opcode
000000000000db7b	ljmpl	*(%rsi,%rdi,8)
000000000000db7e	.byte 0xff #bad opcode
000000000000db7f	pushq	(%rcx)
000000000000db81	.byte 0xfe #bad opcode
000000000000db82	.byte 0xff #bad opcode
000000000000db83	jmpq	*%rbp
000000000000db85	.byte 0xfe #bad opcode
000000000000db86	.byte 0xff #bad opcode
000000000000db87	decl	(%rax)
000000000000db89	.byte 0xfe #bad opcode
000000000000db8a	.byte 0xff #bad opcode
000000000000db8b	lcalll	*-0x2(%rcx)
000000000000db8e	.byte 0xff #bad opcode
000000000000db8f	lcalll	*-0x2(%rcx)
000000000000db92	.byte 0xff #bad opcode
000000000000db93	lcalll	*-0x2(%rcx)
000000000000db96	.byte 0xff #bad opcode
000000000000db97	decl	0x20fffffe(%rip)
000000000000db9d	.byte 0xfe #bad opcode
000000000000db9e	.byte 0xff #bad opcode
000000000000db9f	pushq	(%rbx)
000000000000dba1	.byte 0xfe #bad opcode
000000000000dba2	.byte 0xff #bad opcode
000000000000dba3	incl	-0x2(%rsi)
000000000000dba6	.byte 0xff #bad opcode
000000000000dba7	lcalll	*-0x27f0001(,%rdi,8)
000000000000dbae	.byte 0xff #bad opcode
000000000000dbaf	incl	0x21fffffd(%rax)
000000000000dbb5	std
000000000000dbb6	.byte 0xff #bad opcode
000000000000dbb7	pushq	-0x2b80001(,%rdi,8)
000000000000dbbe	.byte 0xff #bad opcode
000000000000dbbf	lcalll	*-0x3(%rdx)
000000000000dbc2	.byte 0xff #bad opcode
000000000000dbc3	ljmpl	*-0x3(%rbp)
000000000000dbc6	.byte 0xff #bad opcode
000000000000dbc7	incl	-0x79000005(%rcx)
000000000000dbcd	sti
000000000000dbce	.byte 0xff #bad opcode
000000000000dbcf	lcalll	*-0x7000005(%rcx)
000000000000dbd5	sti
000000000000dbd6	.byte 0xff #bad opcode
000000000000dbd7	ljmpl	*-0x4400001(%rbx,%rdi,8)
000000000000dbde	.byte 0xff #bad opcode
000000000000dbdf	callq	*%rdx
000000000000dbe1	sti
000000000000dbe2	.byte 0xff #bad opcode
000000000000dbe3	jmpq	*%rbp
000000000000dbe5	sti
000000000000dbe6	.byte 0xff #bad opcode
000000000000dbe7	pushq	-0x1(%rdx,%rdi,8)
000000000000dbeb	.byte 0xff #bad opcode
000000000000dbec	jns	0xdbe8
000000000000dbee	.byte 0xff #bad opcode
000000000000dbef	decl	-0x5600001(%rdx,%rdi,8)
000000000000dbf6	.byte 0xff #bad opcode
000000000000dbf7	pushq	-0x3a000006(%rdx)
000000000000dbfd	cli
000000000000dbfe	.byte 0xff #bad opcode
000000000000dbff	.byte 0xff #bad opcode
000000000000dc00	fdivr	%st(2)
000000000000dc02	.byte 0xff #bad opcode
000000000000dc03	.byte 0xff #bad opcode
000000000000dc04	jmp	0xdc00
000000000000dc06	.byte 0xff #bad opcode
000000000000dc07	.byte 0xff #bad opcode
000000000000dc08	outb	%al, $0xff
000000000000dc0b	incl	-0x18(%rdi)
000000000000dc0e	.byte 0xff #bad opcode
000000000000dc0f	.byte 0xff #bad opcode
000000000000dc10	fucomp	%st(1)
000000000000dc12	.byte 0xff #bad opcode
000000000000dc13	jmpq	*%rbp
000000000000dc15	.byte 0xea #bad opcode
000000000000dc16	.byte 0xff #bad opcode
000000000000dc17	jmpq	*-0x15(%rax)
000000000000dc1a	.byte 0xff #bad opcode
000000000000dc1b	callq	*%rax
000000000000dc1d	jmp	0xdc1e
000000000000dc1f	.byte 0xff #bad opcode
000000000000dc20	sti
000000000000dc21	jmp	0xffffffffec6edc25
000000000000dc26	.byte 0xff #bad opcode
000000000000dc27	.byte 0xff #bad opcode
000000000000dc28	fsubrp	%st(5)
000000000000dc2a	.byte 0xff #bad opcode
000000000000dc2b	jmpq	*-0x6e000011(%rsi)
000000000000dc31	lock
000000000000dc32	.byte 0xff #bad opcode
000000000000dc33	ljmpl	*-0x32000010(%rdi)
000000000000dc39	lock
000000000000dc3a	.byte 0xff #bad opcode
000000000000dc3b	.byte 0xff #bad opcode
000000000000dc3c	jmp	0xdc2e
000000000000dc3e	.byte 0xff #bad opcode
000000000000dc3f	.byte 0xff #bad opcode
000000000000dc40	clc
000000000000dc41	lock
000000000000dc42	.byte 0xff #bad opcode
000000000000dc43	jmpq	*0x2e(%rsi)
000000000000dc46	nopl	(%rax,%rax)
000000000000dc4e	nop
_ZydisDecodeOperands:
000000000000dc50	pushq	%rbp
000000000000dc51	movq	%rsp, %rbp
000000000000dc54	subq	$0x180, %rsp
000000000000dc5b	movq	%rdi, -0x10(%rbp)
000000000000dc5f	movq	%rsi, -0x18(%rbp)
000000000000dc63	movq	%rdx, -0x20(%rbp)
000000000000dc67	cmpq	$0x0, -0x10(%rbp)
000000000000dc6c	setne	%al
000000000000dc6f	xorb	$-0x1, %al
000000000000dc71	andb	$0x1, %al
000000000000dc73	movzbl	%al, %ecx
000000000000dc76	movslq	%ecx, %rdx
000000000000dc79	cmpq	$0x0, %rdx
000000000000dc7d	je	0xdca2
000000000000dc83	leaq	0x5cf69(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dc8a	leaq	0x5bc49(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dc91	leaq	0x5bc77(%rip), %rcx ## literal pool for: "context"
000000000000dc98	movl	$0x6e1, %edx
000000000000dc9d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000dca2	jmp	0xdca7
000000000000dca7	cmpq	$0x0, -0x18(%rbp)
000000000000dcac	setne	%al
000000000000dcaf	xorb	$-0x1, %al
000000000000dcb1	andb	$0x1, %al
000000000000dcb3	movzbl	%al, %ecx
000000000000dcb6	movslq	%ecx, %rdx
000000000000dcb9	cmpq	$0x0, %rdx
000000000000dcbd	je	0xdce2
000000000000dcc3	leaq	0x5cf29(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dcca	leaq	0x5bc09(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dcd1	leaq	0x5bc3f(%rip), %rcx ## literal pool for: "instruction"
000000000000dcd8	movl	$0x6e2, %edx
000000000000dcdd	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000dce2	jmp	0xdce7
000000000000dce7	cmpq	$0x0, -0x20(%rbp)
000000000000dcec	setne	%al
000000000000dcef	xorb	$-0x1, %al
000000000000dcf1	andb	$0x1, %al
000000000000dcf3	movzbl	%al, %ecx
000000000000dcf6	movslq	%ecx, %rdx
000000000000dcf9	cmpq	$0x0, %rdx
000000000000dcfd	je	0xdd22
000000000000dd03	leaq	0x5cee9(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dd0a	leaq	0x5bbc9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dd11	leaq	0x5c422(%rip), %rcx ## literal pool for: "definition"
000000000000dd18	movl	$0x6e3, %edx
000000000000dd1d	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000dd22	jmp	0xdd27
000000000000dd27	movb	$0x0, -0x21(%rbp)
000000000000dd2b	movq	-0x20(%rbp), %rdi
000000000000dd2f	leaq	-0x30(%rbp), %rsi
000000000000dd33	callq	_ZydisGetOperandDefinitions
000000000000dd38	movq	-0x18(%rbp), %rsi
000000000000dd3c	movb	%al, 0x18(%rsi)
000000000000dd3f	movq	-0x18(%rbp), %rsi
000000000000dd43	movzbl	0x18(%rsi), %ecx
000000000000dd47	movl	%ecx, %esi
000000000000dd49	cmpq	$0xa, %rsi
000000000000dd4d	setbe	%al
000000000000dd50	xorb	$-0x1, %al
000000000000dd52	andb	$0x1, %al
000000000000dd54	movzbl	%al, %ecx
000000000000dd57	movslq	%ecx, %rsi
000000000000dd5a	cmpq	$0x0, %rsi
000000000000dd5e	je	0xdd83
000000000000dd64	leaq	0x5ce88(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000dd6b	leaq	0x5bb68(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dd72	leaq	0x5ce8e(%rip), %rcx ## literal pool for: "instruction->operand_count <= (sizeof(instruction->operands) / sizeof((instruction->operands)[0]))"
000000000000dd79	movl	$0x6e9, %edx
000000000000dd7e	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000dd83	jmp	0xdd88
000000000000dd88	movb	$0x0, -0x31(%rbp)
000000000000dd8c	movzbl	-0x31(%rbp), %eax
000000000000dd90	movq	-0x18(%rbp), %rcx
000000000000dd94	movzbl	0x18(%rcx), %edx
000000000000dd98	cmpl	%edx, %eax
000000000000dd9a	jge	0xf438
000000000000dda0	movl	$0x0, -0x38(%rbp)
000000000000dda7	movb	-0x31(%rbp), %al
000000000000ddaa	movq	-0x18(%rbp), %rcx
000000000000ddae	addq	$0x20, %rcx
000000000000ddb2	movzbl	-0x31(%rbp), %edx
000000000000ddb6	movl	%edx, %esi
000000000000ddb8	imulq	$0x68, %rsi, %rsi
000000000000ddbc	addq	%rsi, %rcx
000000000000ddbf	movb	%al, (%rcx)
000000000000ddc1	movq	-0x30(%rbp), %rcx
000000000000ddc5	movw	(%rcx), %di
000000000000ddc8	shrw	$0x6, %di
000000000000ddcc	andw	$0x3, %di
000000000000ddd0	movb	%dil, %al
000000000000ddd3	movzbl	%al, %edx
000000000000ddd6	movq	-0x18(%rbp), %rcx
000000000000ddda	addq	$0x20, %rcx
000000000000ddde	movzbl	-0x31(%rbp), %r8d
000000000000dde3	movl	%r8d, %esi
000000000000dde6	imulq	$0x68, %rsi, %rsi
000000000000ddea	addq	%rsi, %rcx
000000000000dded	movl	%edx, 0x8(%rcx)
000000000000ddf0	movq	-0x30(%rbp), %rcx
000000000000ddf4	movw	(%rcx), %di
000000000000ddf7	shrw	$0x8, %di
000000000000ddfb	andw	$0xf, %di
000000000000ddff	movb	%dil, %al
000000000000de02	movq	-0x18(%rbp), %rcx
000000000000de06	addq	$0x20, %rcx
000000000000de0a	movzbl	-0x31(%rbp), %edx
000000000000de0e	movl	%edx, %esi
000000000000de10	imulq	$0x68, %rsi, %rsi
000000000000de14	addq	%rsi, %rcx
000000000000de17	movb	%al, 0xc(%rcx)
000000000000de1a	movq	-0x30(%rbp), %rcx
000000000000de1e	movw	(%rcx), %di
000000000000de21	shrw	$0x8, %di
000000000000de25	andw	$0xf, %di
000000000000de29	movb	%dil, %al
000000000000de2c	movzbl	%al, %edx
000000000000de2f	andl	$0x1, %edx
000000000000de32	andl	$0x4, %edx
000000000000de35	cmpl	$0x0, %edx
000000000000de38	movb	$0x1, %al
000000000000de3a	movb	%al, -0x69(%rbp)
000000000000de3d	je	0xde7c
000000000000de43	movq	-0x30(%rbp), %rax
000000000000de47	movw	(%rax), %cx
000000000000de4a	shrw	$0x8, %cx
000000000000de4e	andw	$0xf, %cx
000000000000de52	movb	%cl, %dl
000000000000de54	movzbl	%dl, %esi
000000000000de57	andl	$0x1, %esi
000000000000de5a	movq	-0x30(%rbp), %rax
000000000000de5e	movw	(%rax), %cx
000000000000de61	shrw	$0x8, %cx
000000000000de65	andw	$0xf, %cx
000000000000de69	movb	%cl, %dl
000000000000de6b	movzbl	%dl, %edi
000000000000de6e	andl	$0x4, %edi
000000000000de71	xorl	%edi, %esi
000000000000de73	cmpl	$0x0, %esi
000000000000de76	setne	%dl
000000000000de79	movb	%dl, -0x69(%rbp)
000000000000de7c	movb	-0x69(%rbp), %al
000000000000de7f	xorb	$-0x1, %al
000000000000de81	andb	$0x1, %al
000000000000de83	movzbl	%al, %ecx
000000000000de86	movslq	%ecx, %rdx
000000000000de89	cmpq	$0x0, %rdx
000000000000de8d	je	0xdeb2
000000000000de93	leaq	0x5cd59(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000de9a	leaq	0x5ba39(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000dea1	leaq	0x5cdc2(%rip), %rcx ## literal pool for: "!(operand->actions & ZYDIS_OPERAND_ACTION_READ & ZYDIS_OPERAND_ACTION_CONDREAD) || (operand->actions & ZYDIS_OPERAND_ACTION_READ) ^ (operand->actions & ZYDIS_OPERAND_ACTION_CONDREAD)"
000000000000dea8	movl	$0x6f5, %edx
000000000000dead	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000deb2	jmp	0xdeb7
000000000000deb7	movq	-0x30(%rbp), %rax
000000000000debb	movw	(%rax), %cx
000000000000debe	shrw	$0x8, %cx
000000000000dec2	andw	$0xf, %cx
000000000000dec6	movb	%cl, %dl
000000000000dec8	movzbl	%dl, %esi
000000000000decb	andl	$0x2, %esi
000000000000dece	andl	$0x8, %esi
000000000000ded1	cmpl	$0x0, %esi
000000000000ded4	movb	$0x1, %dl
000000000000ded6	movb	%dl, -0x6a(%rbp)
000000000000ded9	je	0xdf18
000000000000dedf	movq	-0x30(%rbp), %rax
000000000000dee3	movw	(%rax), %cx
000000000000dee6	shrw	$0x8, %cx
000000000000deea	andw	$0xf, %cx
000000000000deee	movb	%cl, %dl
000000000000def0	movzbl	%dl, %esi
000000000000def3	andl	$0x2, %esi
000000000000def6	movq	-0x30(%rbp), %rax
000000000000defa	movw	(%rax), %cx
000000000000defd	shrw	$0x8, %cx
000000000000df01	andw	$0xf, %cx
000000000000df05	movb	%cl, %dl
000000000000df07	movzbl	%dl, %edi
000000000000df0a	andl	$0x8, %edi
000000000000df0d	xorl	%edi, %esi
000000000000df0f	cmpl	$0x0, %esi
000000000000df12	setne	%dl
000000000000df15	movb	%dl, -0x6a(%rbp)
000000000000df18	movb	-0x6a(%rbp), %al
000000000000df1b	xorb	$-0x1, %al
000000000000df1d	andb	$0x1, %al
000000000000df1f	movzbl	%al, %ecx
000000000000df22	movslq	%ecx, %rdx
000000000000df25	cmpq	$0x0, %rdx
000000000000df29	je	0xdf4e
000000000000df2f	leaq	0x5ccbd(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000df36	leaq	0x5b99d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000df3d	leaq	0x5cddd(%rip), %rcx ## literal pool for: "!(operand->actions & ZYDIS_OPERAND_ACTION_WRITE & ZYDIS_OPERAND_ACTION_CONDWRITE) || (operand->actions & ZYDIS_OPERAND_ACTION_WRITE) ^ (operand->actions & ZYDIS_OPERAND_ACTION_CONDWRITE)"
000000000000df44	movl	$0x6f9, %edx
000000000000df49	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000df4e	jmp	0xdf53
000000000000df53	movq	-0x30(%rbp), %rax
000000000000df57	movzwl	(%rax), %ecx
000000000000df5a	andl	$0x3f, %ecx
000000000000df5d	movb	%cl, %dl
000000000000df5f	subb	$0x1, %dl
000000000000df62	movl	%ecx, -0x70(%rbp)
000000000000df65	movb	%dl, -0x71(%rbp)
000000000000df68	je	0xdf9b
000000000000df6e	jmp	0xdf73
000000000000df73	movl	-0x70(%rbp), %eax
000000000000df76	subl	$0x2, %eax
000000000000df79	movl	%eax, -0x78(%rbp)
000000000000df7c	je	0xdfc9
000000000000df82	jmp	0xdf87
000000000000df87	movl	-0x70(%rbp), %eax
000000000000df8a	subl	$0x3, %eax
000000000000df8d	movl	%eax, -0x7c(%rbp)
000000000000df90	je	0xdff7
000000000000df96	jmp	0xe082
000000000000df9b	movq	-0x10(%rbp), %rdi
000000000000df9f	movq	-0x18(%rbp), %rsi
000000000000dfa3	movq	-0x18(%rbp), %rax
000000000000dfa7	addq	$0x20, %rax
000000000000dfab	movzbl	-0x31(%rbp), %ecx
000000000000dfaf	movl	%ecx, %edx
000000000000dfb1	imulq	$0x68, %rdx, %rdx
000000000000dfb5	addq	%rdx, %rax
000000000000dfb8	movq	-0x30(%rbp), %rcx
000000000000dfbc	movq	%rax, %rdx
000000000000dfbf	callq	_ZydisDecodeOperandImplicitRegister
000000000000dfc4	jmp	0xe087
000000000000dfc9	movq	-0x10(%rbp), %rdi
000000000000dfcd	movq	-0x18(%rbp), %rsi
000000000000dfd1	movq	-0x18(%rbp), %rax
000000000000dfd5	addq	$0x20, %rax
000000000000dfd9	movzbl	-0x31(%rbp), %ecx
000000000000dfdd	movl	%ecx, %edx
000000000000dfdf	imulq	$0x68, %rdx, %rdx
000000000000dfe3	addq	%rdx, %rax
000000000000dfe6	movq	-0x30(%rbp), %rcx
000000000000dfea	movq	%rax, %rdx
000000000000dfed	callq	_ZydisDecodeOperandImplicitMemory
000000000000dff2	jmp	0xe087
000000000000dff7	movq	-0x18(%rbp), %rax
000000000000dffb	addq	$0x20, %rax
000000000000dfff	movzbl	-0x31(%rbp), %ecx
000000000000e003	movl	%ecx, %edx
000000000000e005	imulq	$0x68, %rdx, %rdx
000000000000e009	addq	%rdx, %rax
000000000000e00c	movl	$0x4, 0x4(%rax)
000000000000e013	movq	-0x18(%rbp), %rax
000000000000e017	addq	$0x20, %rax
000000000000e01b	movzbl	-0x31(%rbp), %ecx
000000000000e01f	movl	%ecx, %edx
000000000000e021	imulq	$0x68, %rdx, %rdx
000000000000e025	addq	%rdx, %rax
000000000000e028	movw	$0x8, 0x14(%rax)
000000000000e02e	movq	-0x18(%rbp), %rax
000000000000e032	addq	$0x20, %rax
000000000000e036	movzbl	-0x31(%rbp), %ecx
000000000000e03a	movl	%ecx, %edx
000000000000e03c	imulq	$0x68, %rdx, %rdx
000000000000e040	addq	%rdx, %rax
000000000000e043	movq	$0x1, 0x60(%rax)
000000000000e04b	movq	-0x18(%rbp), %rax
000000000000e04f	addq	$0x20, %rax
000000000000e053	movzbl	-0x31(%rbp), %ecx
000000000000e057	movl	%ecx, %edx
000000000000e059	imulq	$0x68, %rdx, %rdx
000000000000e05d	addq	%rdx, %rax
000000000000e060	movb	$0x0, 0x58(%rax)
000000000000e064	movq	-0x18(%rbp), %rax
000000000000e068	addq	$0x20, %rax
000000000000e06c	movzbl	-0x31(%rbp), %ecx
000000000000e070	movl	%ecx, %edx
000000000000e072	imulq	$0x68, %rdx, %rdx
000000000000e076	addq	%rdx, %rax
000000000000e079	movb	$0x0, 0x59(%rax)
000000000000e07d	jmp	0xe087
000000000000e082	jmp	0xe087
000000000000e087	movq	-0x18(%rbp), %rax
000000000000e08b	addq	$0x20, %rax
000000000000e08f	movzbl	-0x31(%rbp), %ecx
000000000000e093	movl	%ecx, %edx
000000000000e095	imulq	$0x68, %rdx, %rdx
000000000000e099	addq	%rdx, %rax
000000000000e09c	cmpl	$0x0, 0x4(%rax)
000000000000e0a0	je	0xe0ab
000000000000e0a6	jmp	0xf12a
000000000000e0ab	movq	-0x30(%rbp), %rax
000000000000e0af	movzbl	0x9(%rax), %ecx
000000000000e0b3	andl	$0x3f, %ecx
000000000000e0b6	movq	-0x18(%rbp), %rax
000000000000e0ba	movzbl	-0x31(%rbp), %edx
000000000000e0be	movl	%edx, %esi
000000000000e0c0	imulq	$0x68, %rsi, %rsi
000000000000e0c4	movl	%ecx, 0x30(%rax,%rsi)
000000000000e0c8	movq	-0x30(%rbp), %rax
000000000000e0cc	movzwl	(%rax), %ecx
000000000000e0cf	andl	$0x3f, %ecx
000000000000e0d2	addl	$-0x4, %ecx
000000000000e0d5	movl	%ecx, %eax
000000000000e0d7	subl	$0x12, %ecx
000000000000e0da	movq	%rax, -0x88(%rbp)
000000000000e0e1	movl	%ecx, -0x8c(%rbp)
000000000000e0e7	ja	0xe4cf
000000000000e0ed	leaq	0x1430(%rip), %rax
000000000000e0f4	movq	-0x88(%rbp), %rcx
000000000000e0fb	movslq	(%rax,%rcx,4), %rdx
000000000000e0ff	addq	%rax, %rdx
000000000000e102	jmpq	*%rdx
000000000000e104	movl	$0x1, -0x38(%rbp)
000000000000e10b	jmp	0xe4d4
000000000000e110	movl	$0x2, -0x38(%rbp)
000000000000e117	jmp	0xe4d4
000000000000e11c	movl	$0x3, -0x38(%rbp)
000000000000e123	jmp	0xe4d4
000000000000e128	movl	$0x4, -0x38(%rbp)
000000000000e12f	jmp	0xe4d4
000000000000e134	movq	-0x18(%rbp), %rax
000000000000e138	movzbl	0x16(%rax), %ecx
000000000000e13c	cmpl	$0x10, %ecx
000000000000e13f	movb	$0x1, %dl
000000000000e141	movb	%dl, -0x8d(%rbp)
000000000000e147	je	0xe17a
000000000000e14d	movq	-0x18(%rbp), %rax
000000000000e151	movzbl	0x16(%rax), %ecx
000000000000e155	cmpl	$0x20, %ecx
000000000000e158	movb	$0x1, %dl
000000000000e15a	movb	%dl, -0x8d(%rbp)
000000000000e160	je	0xe17a
000000000000e166	movq	-0x18(%rbp), %rax
000000000000e16a	movzbl	0x16(%rax), %ecx
000000000000e16e	cmpl	$0x40, %ecx
000000000000e171	sete	%dl
000000000000e174	movb	%dl, -0x8d(%rbp)
000000000000e17a	movb	-0x8d(%rbp), %al
000000000000e180	xorb	$-0x1, %al
000000000000e182	andb	$0x1, %al
000000000000e184	movzbl	%al, %ecx
000000000000e187	movslq	%ecx, %rdx
000000000000e18a	cmpq	$0x0, %rdx
000000000000e18e	je	0xe1b3
000000000000e194	leaq	0x5ca58(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e19b	leaq	0x5b738(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e1a2	leaq	0x5cc33(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000e1a9	movl	$0x728, %edx
000000000000e1ae	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000e1b3	jmp	0xe1b8
000000000000e1b8	movq	-0x18(%rbp), %rax
000000000000e1bc	movzbl	0x16(%rax), %ecx
000000000000e1c0	cmpl	$0x10, %ecx
000000000000e1c3	jne	0xe1d9
000000000000e1c9	movl	$0x2, %eax
000000000000e1ce	movl	%eax, -0x94(%rbp)
000000000000e1d4	jmp	0xe1f7
000000000000e1d9	movq	-0x18(%rbp), %rax
000000000000e1dd	movzbl	0x16(%rax), %ecx
000000000000e1e1	cmpl	$0x20, %ecx
000000000000e1e4	movl	$0x3, %ecx
000000000000e1e9	movl	$0x4, %edx
000000000000e1ee	cmovel	%ecx, %edx
000000000000e1f1	movl	%edx, -0x94(%rbp)
000000000000e1f7	movl	-0x94(%rbp), %eax
000000000000e1fd	movl	%eax, -0x38(%rbp)
000000000000e200	jmp	0xe4d4
000000000000e205	movq	-0x18(%rbp), %rax
000000000000e209	movzbl	0x16(%rax), %ecx
000000000000e20d	cmpl	$0x10, %ecx
000000000000e210	movb	$0x1, %dl
000000000000e212	movb	%dl, -0x95(%rbp)
000000000000e218	je	0xe24b
000000000000e21e	movq	-0x18(%rbp), %rax
000000000000e222	movzbl	0x16(%rax), %ecx
000000000000e226	cmpl	$0x20, %ecx
000000000000e229	movb	$0x1, %dl
000000000000e22b	movb	%dl, -0x95(%rbp)
000000000000e231	je	0xe24b
000000000000e237	movq	-0x18(%rbp), %rax
000000000000e23b	movzbl	0x16(%rax), %ecx
000000000000e23f	cmpl	$0x40, %ecx
000000000000e242	sete	%dl
000000000000e245	movb	%dl, -0x95(%rbp)
000000000000e24b	movb	-0x95(%rbp), %al
000000000000e251	xorb	$-0x1, %al
000000000000e253	andb	$0x1, %al
000000000000e255	movzbl	%al, %ecx
000000000000e258	movslq	%ecx, %rdx
000000000000e25b	cmpq	$0x0, %rdx
000000000000e25f	je	0xe284
000000000000e265	leaq	0x5c987(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e26c	leaq	0x5b667(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e273	leaq	0x5cb62(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000e27a	movl	$0x72f, %edx
000000000000e27f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000e284	jmp	0xe289
000000000000e289	movq	-0x18(%rbp), %rax
000000000000e28d	movzbl	0x16(%rax), %ecx
000000000000e291	cmpl	$0x10, %ecx
000000000000e294	jne	0xe2aa
000000000000e29a	movl	$0x3, %eax
000000000000e29f	movl	%eax, -0x9c(%rbp)
000000000000e2a5	jmp	0xe2c8
000000000000e2aa	movq	-0x18(%rbp), %rax
000000000000e2ae	movzbl	0x16(%rax), %ecx
000000000000e2b2	cmpl	$0x20, %ecx
000000000000e2b5	movl	$0x3, %ecx
000000000000e2ba	movl	$0x4, %edx
000000000000e2bf	cmovel	%ecx, %edx
000000000000e2c2	movl	%edx, -0x9c(%rbp)
000000000000e2c8	movl	-0x9c(%rbp), %eax
000000000000e2ce	movl	%eax, -0x38(%rbp)
000000000000e2d1	jmp	0xe4d4
000000000000e2d6	movq	-0x18(%rbp), %rax
000000000000e2da	movzbl	0x16(%rax), %ecx
000000000000e2de	cmpl	$0x10, %ecx
000000000000e2e1	movb	$0x1, %dl
000000000000e2e3	movb	%dl, -0x9d(%rbp)
000000000000e2e9	je	0xe31c
000000000000e2ef	movq	-0x18(%rbp), %rax
000000000000e2f3	movzbl	0x16(%rax), %ecx
000000000000e2f7	cmpl	$0x20, %ecx
000000000000e2fa	movb	$0x1, %dl
000000000000e2fc	movb	%dl, -0x9d(%rbp)
000000000000e302	je	0xe31c
000000000000e308	movq	-0x18(%rbp), %rax
000000000000e30c	movzbl	0x16(%rax), %ecx
000000000000e310	cmpl	$0x40, %ecx
000000000000e313	sete	%dl
000000000000e316	movb	%dl, -0x9d(%rbp)
000000000000e31c	movb	-0x9d(%rbp), %al
000000000000e322	xorb	$-0x1, %al
000000000000e324	andb	$0x1, %al
000000000000e326	movzbl	%al, %ecx
000000000000e329	movslq	%ecx, %rdx
000000000000e32c	cmpq	$0x0, %rdx
000000000000e330	je	0xe355
000000000000e336	leaq	0x5c8b6(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e33d	leaq	0x5b596(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e344	leaq	0x5ca91(%rip), %rcx ## literal pool for: "(instruction->operand_width == 16) || (instruction->operand_width == 32) || (instruction->operand_width == 64)"
000000000000e34b	movl	$0x736, %edx
000000000000e350	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000e355	jmp	0xe35a
000000000000e35a	movq	-0x18(%rbp), %rax
000000000000e35e	movzbl	0x16(%rax), %ecx
000000000000e362	cmpl	$0x10, %ecx
000000000000e365	movl	$0x2, %ecx
000000000000e36a	movl	$0x3, %edx
000000000000e36f	cmovel	%ecx, %edx
000000000000e372	movl	%edx, -0x38(%rbp)
000000000000e375	jmp	0xe4d4
000000000000e37a	movq	-0x18(%rbp), %rax
000000000000e37e	movzbl	0x17(%rax), %ecx
000000000000e382	cmpl	$0x10, %ecx
000000000000e385	movb	$0x1, %dl
000000000000e387	movb	%dl, -0x9e(%rbp)
000000000000e38d	je	0xe3c0
000000000000e393	movq	-0x18(%rbp), %rax
000000000000e397	movzbl	0x17(%rax), %ecx
000000000000e39b	cmpl	$0x20, %ecx
000000000000e39e	movb	$0x1, %dl
000000000000e3a0	movb	%dl, -0x9e(%rbp)
000000000000e3a6	je	0xe3c0
000000000000e3ac	movq	-0x18(%rbp), %rax
000000000000e3b0	movzbl	0x17(%rax), %ecx
000000000000e3b4	cmpl	$0x40, %ecx
000000000000e3b7	sete	%dl
000000000000e3ba	movb	%dl, -0x9e(%rbp)
000000000000e3c0	movb	-0x9e(%rbp), %al
000000000000e3c6	xorb	$-0x1, %al
000000000000e3c8	andb	$0x1, %al
000000000000e3ca	movzbl	%al, %ecx
000000000000e3cd	movslq	%ecx, %rdx
000000000000e3d0	cmpq	$0x0, %rdx
000000000000e3d4	je	0xe3f9
000000000000e3da	leaq	0x5c812(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e3e1	leaq	0x5b4f2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e3e8	leaq	0x5ca5c(%rip), %rcx ## literal pool for: "(instruction->address_width == 16) || (instruction->address_width == 32) || (instruction->address_width == 64)"
000000000000e3ef	movl	$0x73c, %edx
000000000000e3f4	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000e3f9	jmp	0xe3fe
000000000000e3fe	movq	-0x18(%rbp), %rax
000000000000e402	movzbl	0x17(%rax), %ecx
000000000000e406	cmpl	$0x10, %ecx
000000000000e409	jne	0xe41f
000000000000e40f	movl	$0x2, %eax
000000000000e414	movl	%eax, -0xa4(%rbp)
000000000000e41a	jmp	0xe43d
000000000000e41f	movq	-0x18(%rbp), %rax
000000000000e423	movzbl	0x17(%rax), %ecx
000000000000e427	cmpl	$0x20, %ecx
000000000000e42a	movl	$0x3, %ecx
000000000000e42f	movl	$0x4, %edx
000000000000e434	cmovel	%ecx, %edx
000000000000e437	movl	%edx, -0xa4(%rbp)
000000000000e43d	movl	-0xa4(%rbp), %eax
000000000000e443	movl	%eax, -0x38(%rbp)
000000000000e446	jmp	0xe4d4
000000000000e44b	movl	$0x5, -0x38(%rbp)
000000000000e452	jmp	0xe4d4
000000000000e457	movl	$0x6, -0x38(%rbp)
000000000000e45e	jmp	0xe4d4
000000000000e463	movl	$0x7, -0x38(%rbp)
000000000000e46a	jmp	0xe4d4
000000000000e46f	movl	$0x8, -0x38(%rbp)
000000000000e476	jmp	0xe4d4
000000000000e47b	movl	$0x9, -0x38(%rbp)
000000000000e482	jmp	0xe4d4
000000000000e487	movl	$0xa, -0x38(%rbp)
000000000000e48e	jmp	0xe4d4
000000000000e493	movl	$0x12, -0x38(%rbp)
000000000000e49a	jmp	0xe4d4
000000000000e49f	movl	$0xd, -0x38(%rbp)
000000000000e4a6	jmp	0xe4d4
000000000000e4ab	movl	$0xf, -0x38(%rbp)
000000000000e4b2	jmp	0xe4d4
000000000000e4b7	movl	$0x10, -0x38(%rbp)
000000000000e4be	jmp	0xe4d4
000000000000e4c3	movl	$0x11, -0x38(%rbp)
000000000000e4ca	jmp	0xe4d4
000000000000e4cf	jmp	0xe4d4
000000000000e4d4	cmpl	$0x0, -0x38(%rbp)
000000000000e4d8	je	0xe8d4
000000000000e4de	movq	-0x30(%rbp), %rax
000000000000e4e2	movzbl	0x9(%rax), %ecx
000000000000e4e6	andl	$0x3f, %ecx
000000000000e4e9	decl	%ecx
000000000000e4eb	movl	%ecx, %eax
000000000000e4ed	subl	$0x5, %ecx
000000000000e4f0	movq	%rax, -0xb0(%rbp)
000000000000e4f7	movl	%ecx, -0xb4(%rbp)
000000000000e4fd	ja	0xe8b0
000000000000e503	leaq	0x108e(%rip), %rax
000000000000e50a	movq	-0xb0(%rbp), %rcx
000000000000e511	movslq	(%rax,%rcx,4), %rdx
000000000000e515	addq	%rax, %rdx
000000000000e518	jmpq	*%rdx
000000000000e51a	jmp	0xe51f
000000000000e51f	movq	-0x18(%rbp), %rdi
000000000000e523	movq	-0x18(%rbp), %rax
000000000000e527	addq	$0x20, %rax
000000000000e52b	movzbl	-0x31(%rbp), %ecx
000000000000e52f	movl	%ecx, %edx
000000000000e531	imulq	$0x68, %rdx, %rdx
000000000000e535	addq	%rdx, %rax
000000000000e538	movl	-0x38(%rbp), %edx
000000000000e53b	movq	-0x10(%rbp), %rsi
000000000000e53f	movq	-0x18(%rbp), %r8
000000000000e543	movl	-0x38(%rbp), %ecx
000000000000e546	movq	%rdi, -0xc0(%rbp)
000000000000e54d	movq	%rsi, %rdi
000000000000e550	movq	%r8, %rsi
000000000000e553	movl	$0x2, %r9d
000000000000e559	movl	%edx, -0xc4(%rbp)
000000000000e55f	movl	%r9d, %edx
000000000000e562	movq	%rax, -0xd0(%rbp)
000000000000e569	callq	_ZydisCalcRegisterId
000000000000e56e	movq	-0xc0(%rbp), %rdi
000000000000e575	movq	-0xd0(%rbp), %rsi
000000000000e57c	movl	-0xc4(%rbp), %edx
000000000000e582	movzbl	%al, %ecx
000000000000e585	callq	_ZydisDecodeOperandRegister
000000000000e58a	movl	%eax, -0x3c(%rbp)
000000000000e58d	movl	-0x3c(%rbp), %eax
000000000000e590	andl	$0x80000000, %eax
000000000000e595	cmpl	$0x0, %eax
000000000000e598	je	0xe5a9
000000000000e59e	movl	-0x3c(%rbp), %eax
000000000000e5a1	movl	%eax, -0x4(%rbp)
000000000000e5a4	jmp	0xf515
000000000000e5a9	jmp	0xe5ae
000000000000e5ae	jmp	0xe8cf
000000000000e5b3	jmp	0xe5b8
000000000000e5b8	movq	-0x18(%rbp), %rdi
000000000000e5bc	movq	-0x18(%rbp), %rax
000000000000e5c0	addq	$0x20, %rax
000000000000e5c4	movzbl	-0x31(%rbp), %ecx
000000000000e5c8	movl	%ecx, %edx
000000000000e5ca	imulq	$0x68, %rdx, %rdx
000000000000e5ce	addq	%rdx, %rax
000000000000e5d1	movl	-0x38(%rbp), %edx
000000000000e5d4	movq	-0x10(%rbp), %rsi
000000000000e5d8	movq	-0x18(%rbp), %r8
000000000000e5dc	movl	-0x38(%rbp), %ecx
000000000000e5df	movq	%rdi, -0xd8(%rbp)
000000000000e5e6	movq	%rsi, %rdi
000000000000e5e9	movq	%r8, %rsi
000000000000e5ec	movl	$0x4, %r9d
000000000000e5f2	movl	%edx, -0xdc(%rbp)
000000000000e5f8	movl	%r9d, %edx
000000000000e5fb	movq	%rax, -0xe8(%rbp)
000000000000e602	callq	_ZydisCalcRegisterId
000000000000e607	movq	-0xd8(%rbp), %rdi
000000000000e60e	movq	-0xe8(%rbp), %rsi
000000000000e615	movl	-0xdc(%rbp), %edx
000000000000e61b	movzbl	%al, %ecx
000000000000e61e	callq	_ZydisDecodeOperandRegister
000000000000e623	movl	%eax, -0x40(%rbp)
000000000000e626	movl	-0x40(%rbp), %eax
000000000000e629	andl	$0x80000000, %eax
000000000000e62e	cmpl	$0x0, %eax
000000000000e631	je	0xe642
000000000000e637	movl	-0x40(%rbp), %eax
000000000000e63a	movl	%eax, -0x4(%rbp)
000000000000e63d	jmp	0xf515
000000000000e642	jmp	0xe647
000000000000e647	jmp	0xe8cf
000000000000e64c	jmp	0xe651
000000000000e651	movq	-0x18(%rbp), %rdi
000000000000e655	movq	-0x18(%rbp), %rax
000000000000e659	addq	$0x20, %rax
000000000000e65d	movzbl	-0x31(%rbp), %ecx
000000000000e661	movl	%ecx, %edx
000000000000e663	imulq	$0x68, %rdx, %rdx
000000000000e667	addq	%rdx, %rax
000000000000e66a	movl	-0x38(%rbp), %edx
000000000000e66d	movq	-0x10(%rbp), %rsi
000000000000e671	movq	-0x18(%rbp), %r8
000000000000e675	movl	-0x38(%rbp), %ecx
000000000000e678	movq	%rdi, -0xf0(%rbp)
000000000000e67f	movq	%rsi, %rdi
000000000000e682	movq	%r8, %rsi
000000000000e685	movl	$0x1, %r9d
000000000000e68b	movl	%edx, -0xf4(%rbp)
000000000000e691	movl	%r9d, %edx
000000000000e694	movq	%rax, -0x100(%rbp)
000000000000e69b	callq	_ZydisCalcRegisterId
000000000000e6a0	movq	-0xf0(%rbp), %rdi
000000000000e6a7	movq	-0x100(%rbp), %rsi
000000000000e6ae	movl	-0xf4(%rbp), %edx
000000000000e6b4	movzbl	%al, %ecx
000000000000e6b7	callq	_ZydisDecodeOperandRegister
000000000000e6bc	movl	%eax, -0x44(%rbp)
000000000000e6bf	movl	-0x44(%rbp), %eax
000000000000e6c2	andl	$0x80000000, %eax
000000000000e6c7	cmpl	$0x0, %eax
000000000000e6ca	je	0xe6db
000000000000e6d0	movl	-0x44(%rbp), %eax
000000000000e6d3	movl	%eax, -0x4(%rbp)
000000000000e6d6	jmp	0xf515
000000000000e6db	jmp	0xe6e0
000000000000e6e0	jmp	0xe8cf
000000000000e6e5	jmp	0xe6ea
000000000000e6ea	movq	-0x18(%rbp), %rdi
000000000000e6ee	movq	-0x18(%rbp), %rax
000000000000e6f2	addq	$0x20, %rax
000000000000e6f6	movzbl	-0x31(%rbp), %ecx
000000000000e6fa	movl	%ecx, %edx
000000000000e6fc	imulq	$0x68, %rdx, %rdx
000000000000e700	addq	%rdx, %rax
000000000000e703	movl	-0x38(%rbp), %edx
000000000000e706	movq	-0x10(%rbp), %rsi
000000000000e70a	movq	-0x18(%rbp), %r8
000000000000e70e	movl	-0x38(%rbp), %ecx
000000000000e711	movq	%rdi, -0x108(%rbp)
000000000000e718	movq	%rsi, %rdi
000000000000e71b	movq	%r8, %rsi
000000000000e71e	movl	$0x3, %r9d
000000000000e724	movl	%edx, -0x10c(%rbp)
000000000000e72a	movl	%r9d, %edx
000000000000e72d	movq	%rax, -0x118(%rbp)
000000000000e734	callq	_ZydisCalcRegisterId
000000000000e739	movq	-0x108(%rbp), %rdi
000000000000e740	movq	-0x118(%rbp), %rsi
000000000000e747	movl	-0x10c(%rbp), %edx
000000000000e74d	movzbl	%al, %ecx
000000000000e750	callq	_ZydisDecodeOperandRegister
000000000000e755	movl	%eax, -0x48(%rbp)
000000000000e758	movl	-0x48(%rbp), %eax
000000000000e75b	andl	$0x80000000, %eax
000000000000e760	cmpl	$0x0, %eax
000000000000e763	je	0xe774
000000000000e769	movl	-0x48(%rbp), %eax
000000000000e76c	movl	%eax, -0x4(%rbp)
000000000000e76f	jmp	0xf515
000000000000e774	jmp	0xe779
000000000000e779	jmp	0xe8cf
000000000000e77e	jmp	0xe783
000000000000e783	movq	-0x18(%rbp), %rdi
000000000000e787	movq	-0x18(%rbp), %rax
000000000000e78b	addq	$0x20, %rax
000000000000e78f	movzbl	-0x31(%rbp), %ecx
000000000000e793	movl	%ecx, %edx
000000000000e795	imulq	$0x68, %rdx, %rdx
000000000000e799	addq	%rdx, %rax
000000000000e79c	movl	-0x38(%rbp), %edx
000000000000e79f	movq	-0x10(%rbp), %rsi
000000000000e7a3	movq	-0x18(%rbp), %r8
000000000000e7a7	movl	-0x38(%rbp), %ecx
000000000000e7aa	movq	%rdi, -0x120(%rbp)
000000000000e7b1	movq	%rsi, %rdi
000000000000e7b4	movq	%r8, %rsi
000000000000e7b7	movl	$0x9, %r9d
000000000000e7bd	movl	%edx, -0x124(%rbp)
000000000000e7c3	movl	%r9d, %edx
000000000000e7c6	movq	%rax, -0x130(%rbp)
000000000000e7cd	callq	_ZydisCalcRegisterId
000000000000e7d2	movq	-0x120(%rbp), %rdi
000000000000e7d9	movq	-0x130(%rbp), %rsi
000000000000e7e0	movl	-0x124(%rbp), %edx
000000000000e7e6	movzbl	%al, %ecx
000000000000e7e9	callq	_ZydisDecodeOperandRegister
000000000000e7ee	movl	%eax, -0x4c(%rbp)
000000000000e7f1	movl	-0x4c(%rbp), %eax
000000000000e7f4	andl	$0x80000000, %eax
000000000000e7f9	cmpl	$0x0, %eax
000000000000e7fc	je	0xe80d
000000000000e802	movl	-0x4c(%rbp), %eax
000000000000e805	movl	%eax, -0x4(%rbp)
000000000000e808	jmp	0xf515
000000000000e80d	jmp	0xe812
000000000000e812	jmp	0xe8cf
000000000000e817	jmp	0xe81c
000000000000e81c	movq	-0x18(%rbp), %rdi
000000000000e820	movq	-0x18(%rbp), %rax
000000000000e824	addq	$0x20, %rax
000000000000e828	movzbl	-0x31(%rbp), %ecx
000000000000e82c	movl	%ecx, %edx
000000000000e82e	imulq	$0x68, %rdx, %rdx
000000000000e832	addq	%rdx, %rax
000000000000e835	movl	-0x38(%rbp), %edx
000000000000e838	movq	-0x10(%rbp), %rsi
000000000000e83c	movq	-0x18(%rbp), %r8
000000000000e840	movl	-0x38(%rbp), %ecx
000000000000e843	movq	%rdi, -0x138(%rbp)
000000000000e84a	movq	%rsi, %rdi
000000000000e84d	movq	%r8, %rsi
000000000000e850	movl	$0x8, %r9d
000000000000e856	movl	%edx, -0x13c(%rbp)
000000000000e85c	movl	%r9d, %edx
000000000000e85f	movq	%rax, -0x148(%rbp)
000000000000e866	callq	_ZydisCalcRegisterId
000000000000e86b	movq	-0x138(%rbp), %rdi
000000000000e872	movq	-0x148(%rbp), %rsi
000000000000e879	movl	-0x13c(%rbp), %edx
000000000000e87f	movzbl	%al, %ecx
000000000000e882	callq	_ZydisDecodeOperandRegister
000000000000e887	movl	%eax, -0x50(%rbp)
000000000000e88a	movl	-0x50(%rbp), %eax
000000000000e88d	andl	$0x80000000, %eax
000000000000e892	cmpl	$0x0, %eax
000000000000e895	je	0xe8a6
000000000000e89b	movl	-0x50(%rbp), %eax
000000000000e89e	movl	%eax, -0x4(%rbp)
000000000000e8a1	jmp	0xf515
000000000000e8a6	jmp	0xe8ab
000000000000e8ab	jmp	0xe8cf
000000000000e8b0	leaq	0x5c33c(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000e8b7	leaq	0x5b01c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000e8be	leaq	0x5ccff(%rip), %rcx ## literal pool for: "0"
000000000000e8c5	movl	$0x794, %edx
000000000000e8ca	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000e8cf	jmp	0xf12a
000000000000e8d4	movq	-0x30(%rbp), %rax
000000000000e8d8	movzwl	(%rax), %ecx
000000000000e8db	andl	$0x3f, %ecx
000000000000e8de	addl	$-0x17, %ecx
000000000000e8e1	movl	%ecx, %eax
000000000000e8e3	subl	$0x9, %ecx
000000000000e8e6	movq	%rax, -0x150(%rbp)
000000000000e8ed	movl	%ecx, -0x154(%rbp)
000000000000e8f3	ja	0xed65
000000000000e8f9	leaq	0xc70(%rip), %rax
000000000000e900	movq	-0x150(%rbp), %rcx
000000000000e907	movslq	(%rax,%rcx,4), %rdx
000000000000e90b	addq	%rax, %rdx
000000000000e90e	jmpq	*%rdx
000000000000e910	jmp	0xe915
000000000000e915	xorl	%ecx, %ecx
000000000000e917	movq	-0x10(%rbp), %rdi
000000000000e91b	movq	-0x18(%rbp), %rsi
000000000000e91f	movq	-0x18(%rbp), %rax
000000000000e923	addq	$0x20, %rax
000000000000e927	movzbl	-0x31(%rbp), %edx
000000000000e92b	movl	%edx, %r8d
000000000000e92e	imulq	$0x68, %r8, %r8
000000000000e932	addq	%r8, %rax
000000000000e935	movq	%rax, %rdx
000000000000e938	callq	_ZydisDecodeOperandMemory
000000000000e93d	movl	%eax, -0x54(%rbp)
000000000000e940	movl	-0x54(%rbp), %eax
000000000000e943	andl	$0x80000000, %eax
000000000000e948	cmpl	$0x0, %eax
000000000000e94b	je	0xe95c
000000000000e951	movl	-0x54(%rbp), %eax
000000000000e954	movl	%eax, -0x4(%rbp)
000000000000e957	jmp	0xf515
000000000000e95c	jmp	0xe961
000000000000e961	jmp	0xed6a
000000000000e966	jmp	0xe96b
000000000000e96b	movq	-0x10(%rbp), %rdi
000000000000e96f	movq	-0x18(%rbp), %rsi
000000000000e973	movq	-0x18(%rbp), %rax
000000000000e977	addq	$0x20, %rax
000000000000e97b	movzbl	-0x31(%rbp), %ecx
000000000000e97f	movl	%ecx, %edx
000000000000e981	imulq	$0x68, %rdx, %rdx
000000000000e985	addq	%rdx, %rax
000000000000e988	movq	%rax, %rdx
000000000000e98b	movl	$0x7, %ecx
000000000000e990	callq	_ZydisDecodeOperandMemory
000000000000e995	movl	%eax, -0x58(%rbp)
000000000000e998	movl	-0x58(%rbp), %eax
000000000000e99b	andl	$0x80000000, %eax
000000000000e9a0	cmpl	$0x0, %eax
000000000000e9a3	je	0xe9b4
000000000000e9a9	movl	-0x58(%rbp), %eax
000000000000e9ac	movl	%eax, -0x4(%rbp)
000000000000e9af	jmp	0xf515
000000000000e9b4	jmp	0xe9b9
000000000000e9b9	jmp	0xed6a
000000000000e9be	jmp	0xe9c3
000000000000e9c3	movq	-0x10(%rbp), %rdi
000000000000e9c7	movq	-0x18(%rbp), %rsi
000000000000e9cb	movq	-0x18(%rbp), %rax
000000000000e9cf	addq	$0x20, %rax
000000000000e9d3	movzbl	-0x31(%rbp), %ecx
000000000000e9d7	movl	%ecx, %edx
000000000000e9d9	imulq	$0x68, %rdx, %rdx
000000000000e9dd	addq	%rdx, %rax
000000000000e9e0	movq	%rax, %rdx
000000000000e9e3	movl	$0x8, %ecx
000000000000e9e8	callq	_ZydisDecodeOperandMemory
000000000000e9ed	movl	%eax, -0x5c(%rbp)
000000000000e9f0	movl	-0x5c(%rbp), %eax
000000000000e9f3	andl	$0x80000000, %eax
000000000000e9f8	cmpl	$0x0, %eax
000000000000e9fb	je	0xea0c
000000000000ea01	movl	-0x5c(%rbp), %eax
000000000000ea04	movl	%eax, -0x4(%rbp)
000000000000ea07	jmp	0xf515
000000000000ea0c	jmp	0xea11
000000000000ea11	jmp	0xed6a
000000000000ea16	jmp	0xea1b
000000000000ea1b	movq	-0x10(%rbp), %rdi
000000000000ea1f	movq	-0x18(%rbp), %rsi
000000000000ea23	movq	-0x18(%rbp), %rax
000000000000ea27	addq	$0x20, %rax
000000000000ea2b	movzbl	-0x31(%rbp), %ecx
000000000000ea2f	movl	%ecx, %edx
000000000000ea31	imulq	$0x68, %rdx, %rdx
000000000000ea35	addq	%rdx, %rax
000000000000ea38	movq	%rax, %rdx
000000000000ea3b	movl	$0x9, %ecx
000000000000ea40	callq	_ZydisDecodeOperandMemory
000000000000ea45	movl	%eax, -0x60(%rbp)
000000000000ea48	movl	-0x60(%rbp), %eax
000000000000ea4b	andl	$0x80000000, %eax
000000000000ea50	cmpl	$0x0, %eax
000000000000ea53	je	0xea64
000000000000ea59	movl	-0x60(%rbp), %eax
000000000000ea5c	movl	%eax, -0x4(%rbp)
000000000000ea5f	jmp	0xf515
000000000000ea64	jmp	0xea69
000000000000ea69	jmp	0xed6a
000000000000ea6e	movq	-0x18(%rbp), %rax
000000000000ea72	movzbl	0x5a0(%rax), %ecx
000000000000ea79	cmpl	$0x10, %ecx
000000000000ea7c	movb	$0x1, %dl
000000000000ea7e	movb	%dl, -0x155(%rbp)
000000000000ea84	je	0xeaa1
000000000000ea8a	movq	-0x18(%rbp), %rax
000000000000ea8e	movzbl	0x5a0(%rax), %ecx
000000000000ea95	cmpl	$0x20, %ecx
000000000000ea98	sete	%dl
000000000000ea9b	movb	%dl, -0x155(%rbp)
000000000000eaa1	movb	-0x155(%rbp), %al
000000000000eaa7	xorb	$-0x1, %al
000000000000eaa9	andb	$0x1, %al
000000000000eaab	movzbl	%al, %ecx
000000000000eaae	movslq	%ecx, %rdx
000000000000eab1	cmpq	$0x0, %rdx
000000000000eab5	je	0xeada
000000000000eabb	leaq	0x5c131(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000eac2	leaq	0x5ae11(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000eac9	leaq	0x5c3ea(%rip), %rcx ## literal pool for: "(instruction->raw.imm[0].size == 16) || (instruction->raw.imm[0].size == 32)"
000000000000ead0	movl	$0x7b3, %edx
000000000000ead5	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000eada	jmp	0xeadf
000000000000eadf	movq	-0x18(%rbp), %rax
000000000000eae3	movzbl	0x5b8(%rax), %ecx
000000000000eaea	cmpl	$0x10, %ecx
000000000000eaed	sete	%dl
000000000000eaf0	xorb	$-0x1, %dl
000000000000eaf3	andb	$0x1, %dl
000000000000eaf6	movzbl	%dl, %ecx
000000000000eaf9	movslq	%ecx, %rax
000000000000eafc	cmpq	$0x0, %rax
000000000000eb00	je	0xeb25
000000000000eb06	leaq	0x5c0e6(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000eb0d	leaq	0x5adc6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000eb14	leaq	0x5c3ec(%rip), %rcx ## literal pool for: "instruction->raw.imm[1].size == 16"
000000000000eb1b	movl	$0x7b4, %edx
000000000000eb20	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000eb25	jmp	0xeb2a
000000000000eb2a	movq	-0x18(%rbp), %rax
000000000000eb2e	addq	$0x20, %rax
000000000000eb32	movzbl	-0x31(%rbp), %ecx
000000000000eb36	movl	%ecx, %edx
000000000000eb38	imulq	$0x68, %rdx, %rdx
000000000000eb3c	addq	%rdx, %rax
000000000000eb3f	movl	$0x3, 0x4(%rax)
000000000000eb46	movq	-0x18(%rbp), %rax
000000000000eb4a	movq	0x598(%rax), %rax
000000000000eb51	movl	%eax, %ecx
000000000000eb53	movq	-0x18(%rbp), %rax
000000000000eb57	addq	$0x20, %rax
000000000000eb5b	movzbl	-0x31(%rbp), %esi
000000000000eb5f	movl	%esi, %edx
000000000000eb61	imulq	$0x68, %rdx, %rdx
000000000000eb65	addq	%rdx, %rax
000000000000eb68	movl	%ecx, 0x54(%rax)
000000000000eb6b	movq	-0x18(%rbp), %rax
000000000000eb6f	movq	0x5b0(%rax), %rax
000000000000eb76	movw	%ax, %di
000000000000eb79	movq	-0x18(%rbp), %rax
000000000000eb7d	addq	$0x20, %rax
000000000000eb81	movzbl	-0x31(%rbp), %ecx
000000000000eb85	movl	%ecx, %edx
000000000000eb87	imulq	$0x68, %rdx, %rdx
000000000000eb8b	addq	%rdx, %rax
000000000000eb8e	movw	%di, 0x50(%rax)
000000000000eb92	jmp	0xed6a
000000000000eb97	movq	-0x18(%rbp), %rax
000000000000eb9b	addq	$0x20, %rax
000000000000eb9f	movzbl	-0x31(%rbp), %ecx
000000000000eba3	movl	%ecx, %edx
000000000000eba5	imulq	$0x68, %rdx, %rdx
000000000000eba9	addq	%rdx, %rax
000000000000ebac	movb	$0x0, 0xc(%rax)
000000000000ebb0	xorl	%ecx, %ecx
000000000000ebb2	movq	-0x10(%rbp), %rdi
000000000000ebb6	movq	-0x18(%rbp), %rsi
000000000000ebba	movq	-0x18(%rbp), %rax
000000000000ebbe	addq	$0x20, %rax
000000000000ebc2	movzbl	-0x31(%rbp), %edx
000000000000ebc6	movl	%edx, %r8d
000000000000ebc9	imulq	$0x68, %r8, %r8
000000000000ebcd	addq	%r8, %rax
000000000000ebd0	movq	%rax, %rdx
000000000000ebd3	callq	_ZydisDecodeOperandMemory
000000000000ebd8	movl	%eax, -0x64(%rbp)
000000000000ebdb	movl	-0x64(%rbp), %eax
000000000000ebde	andl	$0x80000000, %eax
000000000000ebe3	cmpl	$0x0, %eax
000000000000ebe6	je	0xebf7
000000000000ebec	movl	-0x64(%rbp), %eax
000000000000ebef	movl	%eax, -0x4(%rbp)
000000000000ebf2	jmp	0xf515
000000000000ebf7	jmp	0xebfc
000000000000ebfc	movq	-0x18(%rbp), %rax
000000000000ec00	addq	$0x20, %rax
000000000000ec04	movzbl	-0x31(%rbp), %ecx
000000000000ec08	movl	%ecx, %edx
000000000000ec0a	imulq	$0x68, %rdx, %rdx
000000000000ec0e	addq	%rdx, %rax
000000000000ec11	movl	$0x2, 0x28(%rax)
000000000000ec18	jmp	0xed6a
000000000000ec1d	movq	-0x18(%rbp), %rax
000000000000ec21	cmpb	$0x0, 0x588(%rax)
000000000000ec28	setne	%cl
000000000000ec2b	xorb	$-0x1, %cl
000000000000ec2e	andb	$0x1, %cl
000000000000ec31	movzbl	%cl, %edx
000000000000ec34	movslq	%edx, %rax
000000000000ec37	cmpq	$0x0, %rax
000000000000ec3b	je	0xec60
000000000000ec41	leaq	0x5bfab(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ec48	leaq	0x5ac8b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ec4f	leaq	0x5c2d4(%rip), %rcx ## literal pool for: "instruction->raw.disp.size"
000000000000ec56	movl	$0x7c1, %edx
000000000000ec5b	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ec60	jmp	0xec65
000000000000ec65	movq	-0x18(%rbp), %rax
000000000000ec69	addq	$0x20, %rax
000000000000ec6d	movzbl	-0x31(%rbp), %ecx
000000000000ec71	movl	%ecx, %edx
000000000000ec73	imulq	$0x68, %rdx, %rdx
000000000000ec77	addq	%rdx, %rax
000000000000ec7a	movl	$0x2, 0x4(%rax)
000000000000ec81	movq	-0x18(%rbp), %rax
000000000000ec85	addq	$0x20, %rax
000000000000ec89	movzbl	-0x31(%rbp), %ecx
000000000000ec8d	movl	%ecx, %edx
000000000000ec8f	imulq	$0x68, %rdx, %rdx
000000000000ec93	addq	%rdx, %rax
000000000000ec96	movl	$0x1, 0x28(%rax)
000000000000ec9d	movq	-0x18(%rbp), %rax
000000000000eca1	addq	$0x20, %rax
000000000000eca5	movzbl	-0x31(%rbp), %ecx
000000000000eca9	movl	%ecx, %edx
000000000000ecab	imulq	$0x68, %rdx, %rdx
000000000000ecaf	addq	%rdx, %rax
000000000000ecb2	movb	$0x1, 0x40(%rax)
000000000000ecb6	movq	-0x18(%rbp), %rax
000000000000ecba	movq	0x580(%rax), %rax
000000000000ecc1	movq	-0x18(%rbp), %rdx
000000000000ecc5	addq	$0x20, %rdx
000000000000ecc9	movzbl	-0x31(%rbp), %ecx
000000000000eccd	movl	%ecx, %esi
000000000000eccf	imulq	$0x68, %rsi, %rsi
000000000000ecd3	addq	%rsi, %rdx
000000000000ecd6	movq	%rax, 0x48(%rdx)
000000000000ecda	jmp	0xed6a
000000000000ecdf	movq	-0x18(%rbp), %rax
000000000000ece3	addq	$0x20, %rax
000000000000ece7	movzbl	-0x31(%rbp), %ecx
000000000000eceb	movl	%ecx, %edx
000000000000eced	imulq	$0x68, %rdx, %rdx
000000000000ecf1	addq	%rdx, %rax
000000000000ecf4	movb	$0x0, 0xc(%rax)
000000000000ecf8	xorl	%ecx, %ecx
000000000000ecfa	movq	-0x10(%rbp), %rdi
000000000000ecfe	movq	-0x18(%rbp), %rsi
000000000000ed02	movq	-0x18(%rbp), %rax
000000000000ed06	addq	$0x20, %rax
000000000000ed0a	movzbl	-0x31(%rbp), %edx
000000000000ed0e	movl	%edx, %r8d
000000000000ed11	imulq	$0x68, %r8, %r8
000000000000ed15	addq	%r8, %rax
000000000000ed18	movq	%rax, %rdx
000000000000ed1b	callq	_ZydisDecodeOperandMemory
000000000000ed20	movl	%eax, -0x68(%rbp)
000000000000ed23	movl	-0x68(%rbp), %eax
000000000000ed26	andl	$0x80000000, %eax
000000000000ed2b	cmpl	$0x0, %eax
000000000000ed2e	je	0xed3f
000000000000ed34	movl	-0x68(%rbp), %eax
000000000000ed37	movl	%eax, -0x4(%rbp)
000000000000ed3a	jmp	0xf515
000000000000ed3f	jmp	0xed44
000000000000ed44	movq	-0x18(%rbp), %rax
000000000000ed48	addq	$0x20, %rax
000000000000ed4c	movzbl	-0x31(%rbp), %ecx
000000000000ed50	movl	%ecx, %edx
000000000000ed52	imulq	$0x68, %rdx, %rdx
000000000000ed56	addq	%rdx, %rax
000000000000ed59	movl	$0x3, 0x28(%rax)
000000000000ed60	jmp	0xed6a
000000000000ed65	jmp	0xed6a
000000000000ed6a	movq	-0x18(%rbp), %rax
000000000000ed6e	addq	$0x20, %rax
000000000000ed72	movzbl	-0x31(%rbp), %ecx
000000000000ed76	movl	%ecx, %edx
000000000000ed78	imulq	$0x68, %rdx, %rdx
000000000000ed7c	addq	%rdx, %rax
000000000000ed7f	cmpl	$0x0, 0x4(%rax)
000000000000ed83	je	0xede6
000000000000ed89	movq	-0x18(%rbp), %rax
000000000000ed8d	cmpl	$0x4, 0xc(%rax)
000000000000ed91	je	0xeda5
000000000000ed97	movq	-0x18(%rbp), %rax
000000000000ed9b	cmpl	$0x5, 0xc(%rax)
000000000000ed9f	jne	0xede1
000000000000eda5	movq	-0x18(%rbp), %rax
000000000000eda9	movzbl	0x588(%rax), %ecx
000000000000edb0	cmpl	$0x8, %ecx
000000000000edb3	jne	0xede1
000000000000edb9	movq	-0x10(%rbp), %rax
000000000000edbd	movzbl	0x3c(%rax), %ecx
000000000000edc1	movl	%ecx, %eax
000000000000edc3	movq	-0x18(%rbp), %rdx
000000000000edc7	addq	$0x20, %rdx
000000000000edcb	movzbl	-0x31(%rbp), %ecx
000000000000edcf	movl	%ecx, %esi
000000000000edd1	imulq	$0x68, %rsi, %rsi
000000000000edd5	addq	%rsi, %rdx
000000000000edd8	imulq	0x48(%rdx), %rax
000000000000eddd	movq	%rax, 0x48(%rdx)
000000000000ede1	jmp	0xf12a
000000000000ede6	movq	-0x30(%rbp), %rax
000000000000edea	movzwl	(%rax), %ecx
000000000000eded	andl	$0x3f, %ecx
000000000000edf0	movb	%cl, %dl
000000000000edf2	subb	$0x1b, %dl
000000000000edf5	movl	%ecx, -0x15c(%rbp)
000000000000edfb	movb	%dl, -0x15d(%rbp)
000000000000ee01	je	0xee8d
000000000000ee07	jmp	0xee0c
000000000000ee0c	movl	-0x15c(%rbp), %eax
000000000000ee12	subl	$0x1c, %eax
000000000000ee15	movl	%eax, -0x164(%rbp)
000000000000ee1b	jne	0xf0c6
000000000000ee21	jmp	0xee26
000000000000ee26	movq	-0x18(%rbp), %rax
000000000000ee2a	addq	$0x4c8, %rax
000000000000ee30	addq	$0xc8, %rax
000000000000ee36	movzbl	-0x21(%rbp), %ecx
000000000000ee3a	movl	%ecx, %edx
000000000000ee3c	imulq	$0x18, %rdx, %rdx
000000000000ee40	addq	%rdx, %rax
000000000000ee43	cmpb	$0x0, 0x1(%rax)
000000000000ee47	setne	%sil
000000000000ee4b	xorb	$-0x1, %sil
000000000000ee4f	andb	$0x1, %sil
000000000000ee53	movzbl	%sil, %ecx
000000000000ee57	movslq	%ecx, %rax
000000000000ee5a	cmpq	$0x0, %rax
000000000000ee5e	je	0xee83
000000000000ee64	leaq	0x5bd88(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ee6b	leaq	0x5aa68(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ee72	leaq	0x5c0cc(%rip), %rcx ## literal pool for: "instruction->raw.imm[imm_id].is_relative"
000000000000ee79	movl	$0x7e4, %edx
000000000000ee7e	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ee83	jmp	0xee88
000000000000ee88	jmp	0xee8d
000000000000ee8d	movzbl	-0x21(%rbp), %eax
000000000000ee91	cmpl	$0x0, %eax
000000000000ee94	movb	$0x1, %cl
000000000000ee96	movb	%cl, -0x165(%rbp)
000000000000ee9c	je	0xeeb2
000000000000eea2	movzbl	-0x21(%rbp), %eax
000000000000eea6	cmpl	$0x1, %eax
000000000000eea9	sete	%cl
000000000000eeac	movb	%cl, -0x165(%rbp)
000000000000eeb2	movb	-0x165(%rbp), %al
000000000000eeb8	xorb	$-0x1, %al
000000000000eeba	andb	$0x1, %al
000000000000eebc	movzbl	%al, %ecx
000000000000eebf	movslq	%ecx, %rdx
000000000000eec2	cmpq	$0x0, %rdx
000000000000eec6	je	0xeeeb
000000000000eecc	leaq	0x5bd20(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000eed3	leaq	0x5aa00(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000eeda	leaq	0x5c08d(%rip), %rcx ## literal pool for: "(imm_id == 0) || (imm_id == 1)"
000000000000eee1	movl	$0x7e6, %edx
000000000000eee6	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000eeeb	jmp	0xeef0
000000000000eef0	movq	-0x18(%rbp), %rax
000000000000eef4	addq	$0x20, %rax
000000000000eef8	movzbl	-0x31(%rbp), %ecx
000000000000eefc	movl	%ecx, %edx
000000000000eefe	imulq	$0x68, %rdx, %rdx
000000000000ef02	addq	%rdx, %rax
000000000000ef05	movl	$0x4, 0x4(%rax)
000000000000ef0c	movq	-0x30(%rbp), %rax
000000000000ef10	movq	-0x10(%rbp), %rdx
000000000000ef14	movzbl	0x24(%rdx), %ecx
000000000000ef18	movl	%ecx, %edx
000000000000ef1a	movzwl	0x2(%rax,%rdx,2), %ecx
000000000000ef1f	shll	$0x3, %ecx
000000000000ef22	movw	%cx, %si
000000000000ef25	movq	-0x18(%rbp), %rax
000000000000ef29	addq	$0x20, %rax
000000000000ef2d	movzbl	-0x31(%rbp), %ecx
000000000000ef31	movl	%ecx, %edx
000000000000ef33	imulq	$0x68, %rdx, %rdx
000000000000ef37	addq	%rdx, %rax
000000000000ef3a	movw	%si, 0x14(%rax)
000000000000ef3e	movq	-0x30(%rbp), %rax
000000000000ef42	movb	0x9(%rax), %dil
000000000000ef46	andb	$0x3f, %dil
000000000000ef4a	movzbl	%dil, %ecx
000000000000ef4e	cmpl	$0x5, %ecx
000000000000ef51	jne	0xf008
000000000000ef57	movq	-0x18(%rbp), %rax
000000000000ef5b	addq	$0x4c8, %rax
000000000000ef61	addq	$0xc8, %rax
000000000000ef67	movzbl	-0x21(%rbp), %ecx
000000000000ef6b	movl	%ecx, %edx
000000000000ef6d	imulq	$0x18, %rdx, %rdx
000000000000ef71	addq	%rdx, %rax
000000000000ef74	movzbl	0x10(%rax), %ecx
000000000000ef78	cmpl	$0x8, %ecx
000000000000ef7b	sete	%sil
000000000000ef7f	xorb	$-0x1, %sil
000000000000ef83	andb	$0x1, %sil
000000000000ef87	movzbl	%sil, %ecx
000000000000ef8b	movslq	%ecx, %rax
000000000000ef8e	cmpq	$0x0, %rax
000000000000ef92	je	0xefb7
000000000000ef98	leaq	0x5bc54(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000ef9f	leaq	0x5a934(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000efa6	leaq	0x5bfe0(%rip), %rcx ## literal pool for: "instruction->raw.imm[imm_id].size == 8"
000000000000efad	movl	$0x7ec, %edx
000000000000efb2	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000efb7	jmp	0xefbc
000000000000efbc	movq	-0x18(%rbp), %rax
000000000000efc0	addq	$0x4c8, %rax
000000000000efc6	addq	$0xc8, %rax
000000000000efcc	movzbl	-0x21(%rbp), %ecx
000000000000efd0	movl	%ecx, %edx
000000000000efd2	imulq	$0x18, %rdx, %rdx
000000000000efd6	addq	%rdx, %rax
000000000000efd9	movq	0x8(%rax), %rax
000000000000efdd	movb	%al, %sil
000000000000efe0	movzbl	%sil, %ecx
000000000000efe4	andl	$0xf, %ecx
000000000000efe7	movslq	%ecx, %rax
000000000000efea	movq	-0x18(%rbp), %rdx
000000000000efee	addq	$0x20, %rdx
000000000000eff2	movzbl	-0x31(%rbp), %ecx
000000000000eff6	movl	%ecx, %edi
000000000000eff8	imulq	$0x68, %rdi, %rdi
000000000000effc	addq	%rdi, %rdx
000000000000efff	movq	%rax, 0x60(%rdx)
000000000000f003	jmp	0xf042
000000000000f008	movq	-0x18(%rbp), %rax
000000000000f00c	addq	$0x4c8, %rax
000000000000f012	addq	$0xc8, %rax
000000000000f018	movzbl	-0x21(%rbp), %ecx
000000000000f01c	movl	%ecx, %edx
000000000000f01e	imulq	$0x18, %rdx, %rdx
000000000000f022	addq	%rdx, %rax
000000000000f025	movq	0x8(%rax), %rax
000000000000f029	movq	-0x18(%rbp), %rdx
000000000000f02d	addq	$0x20, %rdx
000000000000f031	movzbl	-0x31(%rbp), %ecx
000000000000f035	movl	%ecx, %esi
000000000000f037	imulq	$0x68, %rsi, %rsi
000000000000f03b	addq	%rsi, %rdx
000000000000f03e	movq	%rax, 0x60(%rdx)
000000000000f042	movq	-0x18(%rbp), %rax
000000000000f046	addq	$0x4c8, %rax
000000000000f04c	addq	$0xc8, %rax
000000000000f052	movzbl	-0x21(%rbp), %ecx
000000000000f056	movl	%ecx, %edx
000000000000f058	imulq	$0x18, %rdx, %rdx
000000000000f05c	addq	%rdx, %rax
000000000000f05f	movb	(%rax), %sil
000000000000f062	movq	-0x18(%rbp), %rax
000000000000f066	addq	$0x20, %rax
000000000000f06a	movzbl	-0x31(%rbp), %ecx
000000000000f06e	movl	%ecx, %edx
000000000000f070	imulq	$0x68, %rdx, %rdx
000000000000f074	addq	%rdx, %rax
000000000000f077	movb	%sil, 0x58(%rax)
000000000000f07b	movq	-0x18(%rbp), %rax
000000000000f07f	addq	$0x4c8, %rax
000000000000f085	addq	$0xc8, %rax
000000000000f08b	movzbl	-0x21(%rbp), %ecx
000000000000f08f	movl	%ecx, %edx
000000000000f091	imulq	$0x18, %rdx, %rdx
000000000000f095	addq	%rdx, %rax
000000000000f098	movb	0x1(%rax), %sil
000000000000f09c	movq	-0x18(%rbp), %rax
000000000000f0a0	addq	$0x20, %rax
000000000000f0a4	movzbl	-0x31(%rbp), %ecx
000000000000f0a8	movl	%ecx, %edx
000000000000f0aa	imulq	$0x68, %rdx, %rdx
000000000000f0ae	addq	%rdx, %rax
000000000000f0b1	movb	%sil, 0x59(%rax)
000000000000f0b5	movb	-0x21(%rbp), %sil
000000000000f0b9	addb	$0x1, %sil
000000000000f0bd	movb	%sil, -0x21(%rbp)
000000000000f0c1	jmp	0xf0cb
000000000000f0c6	jmp	0xf0cb
000000000000f0cb	movq	-0x18(%rbp), %rax
000000000000f0cf	addq	$0x20, %rax
000000000000f0d3	movzbl	-0x31(%rbp), %ecx
000000000000f0d7	movl	%ecx, %edx
000000000000f0d9	imulq	$0x68, %rdx, %rdx
000000000000f0dd	addq	%rdx, %rax
000000000000f0e0	cmpl	$0x4, 0x4(%rax)
000000000000f0e4	sete	%sil
000000000000f0e8	xorb	$-0x1, %sil
000000000000f0ec	andb	$0x1, %sil
000000000000f0f0	movzbl	%sil, %ecx
000000000000f0f4	movslq	%ecx, %rax
000000000000f0f7	cmpq	$0x0, %rax
000000000000f0fb	je	0xf120
000000000000f101	leaq	0x5baeb(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000f108	leaq	0x5a7cb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f10f	leaq	0x5be9e(%rip), %rcx ## literal pool for: "instruction->operands[i].type == ZYDIS_OPERAND_TYPE_IMMEDIATE"
000000000000f116	movl	$0x7fa, %edx
000000000000f11b	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f120	jmp	0xf125
000000000000f125	jmp	0xf12a
000000000000f12a	movq	-0x18(%rbp), %rax
000000000000f12e	addq	$0x20, %rax
000000000000f132	movzbl	-0x31(%rbp), %ecx
000000000000f136	movl	%ecx, %edx
000000000000f138	imulq	$0x68, %rdx, %rdx
000000000000f13c	addq	%rdx, %rax
000000000000f13f	cmpl	$0x2, 0x4(%rax)
000000000000f143	jne	0xf3f6
000000000000f149	movq	-0x18(%rbp), %rax
000000000000f14d	movq	0x430(%rax), %rax
000000000000f154	andq	$0x10000000, %rax
000000000000f15a	cmpq	$0x0, %rax
000000000000f15e	je	0xf185
000000000000f164	movq	-0x18(%rbp), %rax
000000000000f168	addq	$0x20, %rax
000000000000f16c	movzbl	-0x31(%rbp), %ecx
000000000000f170	movl	%ecx, %edx
000000000000f172	imulq	$0x68, %rdx, %rdx
000000000000f176	addq	%rdx, %rax
000000000000f179	movl	$0xc7, 0x2c(%rax)
000000000000f180	jmp	0xf3f1
000000000000f185	movq	-0x18(%rbp), %rax
000000000000f189	movq	0x430(%rax), %rax
000000000000f190	andq	$0x20000000, %rax
000000000000f196	cmpq	$0x0, %rax
000000000000f19a	je	0xf1c1
000000000000f1a0	movq	-0x18(%rbp), %rax
000000000000f1a4	addq	$0x20, %rax
000000000000f1a8	movzbl	-0x31(%rbp), %ecx
000000000000f1ac	movl	%ecx, %edx
000000000000f1ae	imulq	$0x68, %rdx, %rdx
000000000000f1b2	addq	%rdx, %rax
000000000000f1b5	movl	$0xc8, 0x2c(%rax)
000000000000f1bc	jmp	0xf3ec
000000000000f1c1	movq	-0x18(%rbp), %rax
000000000000f1c5	movq	0x430(%rax), %rax
000000000000f1cc	andq	$0x40000000, %rax
000000000000f1d2	cmpq	$0x0, %rax
000000000000f1d6	je	0xf1fd
000000000000f1dc	movq	-0x18(%rbp), %rax
000000000000f1e0	addq	$0x20, %rax
000000000000f1e4	movzbl	-0x31(%rbp), %ecx
000000000000f1e8	movl	%ecx, %edx
000000000000f1ea	imulq	$0x68, %rdx, %rdx
000000000000f1ee	addq	%rdx, %rax
000000000000f1f1	movl	$0xc9, 0x2c(%rax)
000000000000f1f8	jmp	0xf3e7
000000000000f1fd	movq	-0x18(%rbp), %rax
000000000000f201	movl	$0x80000000, %ecx
000000000000f206	andq	0x430(%rax), %rcx
000000000000f20d	cmpq	$0x0, %rcx
000000000000f211	je	0xf238
000000000000f217	movq	-0x18(%rbp), %rax
000000000000f21b	addq	$0x20, %rax
000000000000f21f	movzbl	-0x31(%rbp), %ecx
000000000000f223	movl	%ecx, %edx
000000000000f225	imulq	$0x68, %rdx, %rdx
000000000000f229	addq	%rdx, %rax
000000000000f22c	movl	$0xc6, 0x2c(%rax)
000000000000f233	jmp	0xf3e2
000000000000f238	movq	-0x18(%rbp), %rax
000000000000f23c	movabsq	$0x100000000, %rcx
000000000000f246	andq	0x430(%rax), %rcx
000000000000f24d	cmpq	$0x0, %rcx
000000000000f251	je	0xf278
000000000000f257	movq	-0x18(%rbp), %rax
000000000000f25b	addq	$0x20, %rax
000000000000f25f	movzbl	-0x31(%rbp), %ecx
000000000000f263	movl	%ecx, %edx
000000000000f265	imulq	$0x68, %rdx, %rdx
000000000000f269	addq	%rdx, %rax
000000000000f26c	movl	$0xca, 0x2c(%rax)
000000000000f273	jmp	0xf3dd
000000000000f278	movq	-0x18(%rbp), %rax
000000000000f27c	movabsq	$0x200000000, %rcx
000000000000f286	andq	0x430(%rax), %rcx
000000000000f28d	cmpq	$0x0, %rcx
000000000000f291	je	0xf2b8
000000000000f297	movq	-0x18(%rbp), %rax
000000000000f29b	addq	$0x20, %rax
000000000000f29f	movzbl	-0x31(%rbp), %ecx
000000000000f2a3	movl	%ecx, %edx
000000000000f2a5	imulq	$0x68, %rdx, %rdx
000000000000f2a9	addq	%rdx, %rax
000000000000f2ac	movl	$0xcb, 0x2c(%rax)
000000000000f2b3	jmp	0xf3d8
000000000000f2b8	movq	-0x18(%rbp), %rax
000000000000f2bc	addq	$0x20, %rax
000000000000f2c0	movzbl	-0x31(%rbp), %ecx
000000000000f2c4	movl	%ecx, %edx
000000000000f2c6	imulq	$0x68, %rdx, %rdx
000000000000f2ca	addq	%rdx, %rax
000000000000f2cd	cmpl	$0x0, 0x2c(%rax)
000000000000f2d1	jne	0xf3d3
000000000000f2d7	movq	-0x18(%rbp), %rax
000000000000f2db	addq	$0x20, %rax
000000000000f2df	movzbl	-0x31(%rbp), %ecx
000000000000f2e3	movl	%ecx, %edx
000000000000f2e5	imulq	$0x68, %rdx, %rdx
000000000000f2e9	addq	%rdx, %rax
000000000000f2ec	cmpl	$0x39, 0x30(%rax)
000000000000f2f0	je	0xf391
000000000000f2f6	movq	-0x18(%rbp), %rax
000000000000f2fa	addq	$0x20, %rax
000000000000f2fe	movzbl	-0x31(%rbp), %ecx
000000000000f302	movl	%ecx, %edx
000000000000f304	imulq	$0x68, %rdx, %rdx
000000000000f308	addq	%rdx, %rax
000000000000f30b	cmpl	$0x3a, 0x30(%rax)
000000000000f30f	je	0xf391
000000000000f315	movq	-0x18(%rbp), %rax
000000000000f319	addq	$0x20, %rax
000000000000f31d	movzbl	-0x31(%rbp), %ecx
000000000000f321	movl	%ecx, %edx
000000000000f323	imulq	$0x68, %rdx, %rdx
000000000000f327	addq	%rdx, %rax
000000000000f32a	cmpl	$0x29, 0x30(%rax)
000000000000f32e	je	0xf391
000000000000f334	movq	-0x18(%rbp), %rax
000000000000f338	addq	$0x20, %rax
000000000000f33c	movzbl	-0x31(%rbp), %ecx
000000000000f340	movl	%ecx, %edx
000000000000f342	imulq	$0x68, %rdx, %rdx
000000000000f346	addq	%rdx, %rax
000000000000f349	cmpl	$0x2a, 0x30(%rax)
000000000000f34d	je	0xf391
000000000000f353	movq	-0x18(%rbp), %rax
000000000000f357	addq	$0x20, %rax
000000000000f35b	movzbl	-0x31(%rbp), %ecx
000000000000f35f	movl	%ecx, %edx
000000000000f361	imulq	$0x68, %rdx, %rdx
000000000000f365	addq	%rdx, %rax
000000000000f368	cmpl	$0x19, 0x30(%rax)
000000000000f36c	je	0xf391
000000000000f372	movq	-0x18(%rbp), %rax
000000000000f376	addq	$0x20, %rax
000000000000f37a	movzbl	-0x31(%rbp), %ecx
000000000000f37e	movl	%ecx, %edx
000000000000f380	imulq	$0x68, %rdx, %rdx
000000000000f384	addq	%rdx, %rax
000000000000f387	cmpl	$0x1a, 0x30(%rax)
000000000000f38b	jne	0xf3b2
000000000000f391	movq	-0x18(%rbp), %rax
000000000000f395	addq	$0x20, %rax
000000000000f399	movzbl	-0x31(%rbp), %ecx
000000000000f39d	movl	%ecx, %edx
000000000000f39f	imulq	$0x68, %rdx, %rdx
000000000000f3a3	addq	%rdx, %rax
000000000000f3a6	movl	$0xc8, 0x2c(%rax)
000000000000f3ad	jmp	0xf3ce
000000000000f3b2	movq	-0x18(%rbp), %rax
000000000000f3b6	addq	$0x20, %rax
000000000000f3ba	movzbl	-0x31(%rbp), %ecx
000000000000f3be	movl	%ecx, %edx
000000000000f3c0	imulq	$0x68, %rdx, %rdx
000000000000f3c4	addq	%rdx, %rax
000000000000f3c7	movl	$0xc9, 0x2c(%rax)
000000000000f3ce	jmp	0xf3d3
000000000000f3d3	jmp	0xf3d8
000000000000f3d8	jmp	0xf3dd
000000000000f3dd	jmp	0xf3e2
000000000000f3e2	jmp	0xf3e7
000000000000f3e7	jmp	0xf3ec
000000000000f3ec	jmp	0xf3f1
000000000000f3f1	jmp	0xf3f6
000000000000f3f6	movq	-0x10(%rbp), %rdi
000000000000f3fa	movq	-0x18(%rbp), %rsi
000000000000f3fe	movq	-0x18(%rbp), %rax
000000000000f402	addq	$0x20, %rax
000000000000f406	movzbl	-0x31(%rbp), %ecx
000000000000f40a	movl	%ecx, %edx
000000000000f40c	imulq	$0x68, %rdx, %rdx
000000000000f410	addq	%rdx, %rax
000000000000f413	movq	-0x30(%rbp), %rcx
000000000000f417	movq	%rax, %rdx
000000000000f41a	callq	_ZydisSetOperandSizeAndElementInfo
000000000000f41f	movq	-0x30(%rbp), %rax
000000000000f423	addq	$0xc, %rax
000000000000f427	movq	%rax, -0x30(%rbp)
000000000000f42b	movb	-0x31(%rbp), %al
000000000000f42e	addb	$0x1, %al
000000000000f430	movb	%al, -0x31(%rbp)
000000000000f433	jmp	0xdd8c
000000000000f438	movq	-0x18(%rbp), %rax
000000000000f43c	cmpl	$0x2, 0x490(%rax)
000000000000f443	jne	0xf50e
000000000000f449	movq	-0x18(%rbp), %rax
000000000000f44d	movzbl	0x18(%rax), %ecx
000000000000f451	cmpl	$0x1, %ecx
000000000000f454	setge	%dl
000000000000f457	xorb	$-0x1, %dl
000000000000f45a	andb	$0x1, %dl
000000000000f45d	movzbl	%dl, %ecx
000000000000f460	movslq	%ecx, %rax
000000000000f463	cmpq	$0x0, %rax
000000000000f467	je	0xf48c
000000000000f46d	leaq	0x5b77f(%rip), %rdi ## literal pool for: "ZydisDecodeOperands"
000000000000f474	leaq	0x5a45f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f47b	leaq	0x5bb70(%rip), %rcx ## literal pool for: "instruction->operand_count >= 1"
000000000000f482	movl	$0x833, %edx
000000000000f487	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f48c	jmp	0xf491
000000000000f491	movq	-0x18(%rbp), %rax
000000000000f495	movzbl	0x2c(%rax), %ecx
000000000000f499	movl	%ecx, %edx
000000000000f49b	subl	$0x2, %edx
000000000000f49e	movl	%ecx, -0x16c(%rbp)
000000000000f4a4	movl	%edx, -0x170(%rbp)
000000000000f4aa	je	0xf4cf
000000000000f4b0	jmp	0xf4b5
000000000000f4b5	movl	-0x16c(%rbp), %eax
000000000000f4bb	subl	$0x3, %eax
000000000000f4be	movl	%eax, -0x174(%rbp)
000000000000f4c4	je	0xf4f7
000000000000f4ca	jmp	0xf504
000000000000f4cf	movq	-0x18(%rbp), %rax
000000000000f4d3	cmpl	$0x2, 0x24(%rax)
000000000000f4d7	jne	0xf4ea
000000000000f4dd	movq	-0x18(%rbp), %rax
000000000000f4e1	movb	$0x8, 0x2c(%rax)
000000000000f4e5	jmp	0xf4f2
000000000000f4ea	movq	-0x18(%rbp), %rax
000000000000f4ee	movb	$0x9, 0x2c(%rax)
000000000000f4f2	jmp	0xf509
000000000000f4f7	movq	-0x18(%rbp), %rax
000000000000f4fb	movb	$0x9, 0x2c(%rax)
000000000000f4ff	jmp	0xf509
000000000000f504	jmp	0xf509
000000000000f509	jmp	0xf50e
000000000000f50e	movl	$0x100000, -0x4(%rbp)
000000000000f515	movl	-0x4(%rbp), %eax
000000000000f518	addq	$0x180, %rsp
000000000000f51f	popq	%rbp
000000000000f520	retq
000000000000f521	nopl	(%rax)
000000000000f524	loopne	0xf511
000000000000f526	.byte 0xff #bad opcode
000000000000f527	.byte 0xff #bad opcode
000000000000f528	inb	%dx, %al
000000000000f529	jmp	0xf52a
000000000000f52b	.byte 0xff #bad opcode
000000000000f52c	clc
000000000000f52d	jmp	0xf52e
000000000000f52f	incl	(%rsp,%rbp,8)
000000000000f532	.byte 0xff #bad opcode
000000000000f533	callq	*(%rax)
000000000000f535	inb	%dx, %al
000000000000f536	.byte 0xff #bad opcode
000000000000f537	jmpq	*%rcx
000000000000f539	inb	%dx, %al
000000000000f53a	.byte 0xff #bad opcode
000000000000f53b	pushq	0x56ffffed(%rdx)
000000000000f541	outb	%al, %dx
000000000000f542	.byte 0xff #bad opcode
000000000000f543	jmpq	*(%rdi)
000000000000f545	outl	%eax, %dx
000000000000f546	.byte 0xff #bad opcode
000000000000f547	pushq	(%rbx)
000000000000f549	outl	%eax, %dx
000000000000f54a	.byte 0xff #bad opcode
000000000000f54b	.byte 0xff #bad opcode
000000000000f54c	.byte 0x3f #bad opcode
000000000000f54d	outl	%eax, %dx
000000000000f54e	.byte 0xff #bad opcode
000000000000f54f	decl	-0x11(%rbx)
000000000000f552	.byte 0xff #bad opcode
000000000000f553	callq	*-0x11(%rdi)
000000000000f556	.byte 0xff #bad opcode
000000000000f557	jmpq	*-0x11(%rbx)
000000000000f55a	.byte 0xff #bad opcode
000000000000f55b	ljmpl	*-0x11(%rdi)
000000000000f55e	.byte 0xff #bad opcode
000000000000f55f	.byte 0xff #bad opcode
000000000000f560	jnp	0xf551
000000000000f562	.byte 0xff #bad opcode
000000000000f563	incl	-0x6c000011(%rdi)
000000000000f569	outl	%eax, %dx
000000000000f56a	.byte 0xff #bad opcode
000000000000f56b	lcalll	*-0x5f000011(%rdi)
000000000000f571	.byte 0xf3 #bad opcode
000000000000f572	.byte 0xff #bad opcode
000000000000f573	pushq	%rsi
000000000000f575	.byte 0xf3 #bad opcode
000000000000f576	.byte 0xff #bad opcode
000000000000f577	decl	-0xc(%rsi)
000000000000f57a	.byte 0xff #bad opcode
000000000000f57b	jmpq	*-0xa00000c(%rsi)
000000000000f581	idivl	%edi
000000000000f583	pushq	%rbp
000000000000f585	idivl	%edi
000000000000f587	.byte 0xff #bad opcode
000000000000f588	.byte 0xfe #bad opcode
000000000000f589	hlt
000000000000f58a	.byte 0xff #bad opcode
000000000000f58b	jmpq	*(%rdi)
000000000000f58d	idivb	%bh
000000000000f58f	ljmpl	*0x6ffffff6(%rbp)
000000000000f595	idivl	%edi
000000000000f597	incl	0x1bffffef(%rdx)
000000000000f59d	lock
000000000000f59e	.byte 0xff #bad opcode
000000000000f59f	pushq	-0xeb20001(%rax,%rsi,8)
000000000000f5a6	.byte 0xff #bad opcode
000000000000f5a7	.byte 0xff #bad opcode
000000000000f5a8	jg	0xf59c
000000000000f5aa	.byte 0xff #bad opcode
000000000000f5ab	jmpq	*%rsi
000000000000f5ad	.byte 0xf1 #bad opcode
000000000000f5ae	.byte 0xff #bad opcode
000000000000f5af	callq	*0x48(%rbp)
_ZydisInputNextBytes:
000000000000f5b0	pushq	%rbp
000000000000f5b1	movq	%rsp, %rbp
000000000000f5b4	subq	$0x30, %rsp
000000000000f5b8	movb	%cl, %al
000000000000f5ba	movq	%rdi, -0x10(%rbp)
000000000000f5be	movq	%rsi, -0x18(%rbp)
000000000000f5c2	movq	%rdx, -0x20(%rbp)
000000000000f5c6	movb	%al, -0x21(%rbp)
000000000000f5c9	cmpq	$0x0, -0x10(%rbp)
000000000000f5ce	setne	%al
000000000000f5d1	xorb	$-0x1, %al
000000000000f5d3	andb	$0x1, %al
000000000000f5d5	movzbl	%al, %ecx
000000000000f5d8	movslq	%ecx, %rdx
000000000000f5db	cmpq	$0x0, %rdx
000000000000f5df	je	0xf604
000000000000f5e5	leaq	0x5a6f3(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f5ec	leaq	0x5a2e7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f5f3	leaq	0x5a315(%rip), %rcx ## literal pool for: "context"
000000000000f5fa	movl	$0x182, %edx
000000000000f5ff	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f604	jmp	0xf609
000000000000f609	cmpq	$0x0, -0x18(%rbp)
000000000000f60e	setne	%al
000000000000f611	xorb	$-0x1, %al
000000000000f613	andb	$0x1, %al
000000000000f615	movzbl	%al, %ecx
000000000000f618	movslq	%ecx, %rdx
000000000000f61b	cmpq	$0x0, %rdx
000000000000f61f	je	0xf644
000000000000f625	leaq	0x5a6b3(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f62c	leaq	0x5a2a7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f633	leaq	0x5a2dd(%rip), %rcx ## literal pool for: "instruction"
000000000000f63a	movl	$0x183, %edx
000000000000f63f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f644	jmp	0xf649
000000000000f649	cmpq	$0x0, -0x20(%rbp)
000000000000f64e	setne	%al
000000000000f651	xorb	$-0x1, %al
000000000000f653	andb	$0x1, %al
000000000000f655	movzbl	%al, %ecx
000000000000f658	movslq	%ecx, %rdx
000000000000f65b	cmpq	$0x0, %rdx
000000000000f65f	je	0xf684
000000000000f665	leaq	0x5a673(%rip), %rdi ## literal pool for: "ZydisInputNextBytes"
000000000000f66c	leaq	0x5a267(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f673	leaq	0x5a2db(%rip), %rcx ## literal pool for: "value"
000000000000f67a	movl	$0x184, %edx
000000000000f67f	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f684	jmp	0xf689
000000000000f689	movq	-0x18(%rbp), %rax
000000000000f68d	movzbl	0x8(%rax), %ecx
000000000000f691	movzbl	-0x21(%rbp), %edx
000000000000f695	addl	%edx, %ecx
000000000000f697	cmpl	$0xf, %ecx
000000000000f69a	jle	0xf6ac
000000000000f6a0	movl	$0x80200002, -0x4(%rbp)
000000000000f6a7	jmp	0xf73b
000000000000f6ac	movq	-0x10(%rbp), %rax
000000000000f6b0	movq	0x10(%rax), %rax
000000000000f6b4	movzbl	-0x21(%rbp), %ecx
000000000000f6b8	movl	%ecx, %edx
000000000000f6ba	cmpq	%rdx, %rax
000000000000f6bd	jb	0xf734
000000000000f6c3	movq	$-0x1, %rcx
000000000000f6ca	movzbl	-0x21(%rbp), %eax
000000000000f6ce	movq	-0x18(%rbp), %rdx
000000000000f6d2	movzbl	0x8(%rdx), %esi
000000000000f6d6	addl	%eax, %esi
000000000000f6d8	movb	%sil, %dil
000000000000f6db	movb	%dil, 0x8(%rdx)
000000000000f6df	movq	-0x20(%rbp), %rdi
000000000000f6e3	movq	-0x10(%rbp), %rdx
000000000000f6e7	movq	0x8(%rdx), %rsi
000000000000f6eb	movzbl	-0x21(%rbp), %eax
000000000000f6ef	movl	%eax, %edx
000000000000f6f1	callq	0x2796c ## symbol stub for: ___memcpy_chk
000000000000f6f6	movzbl	-0x21(%rbp), %r8d
000000000000f6fb	movq	-0x10(%rbp), %rcx
000000000000f6ff	movq	0x8(%rcx), %rdx
000000000000f703	movslq	%r8d, %rsi
000000000000f706	addq	%rsi, %rdx
000000000000f709	movq	%rdx, 0x8(%rcx)
000000000000f70d	movzbl	-0x21(%rbp), %r8d
000000000000f712	movl	%r8d, %ecx
000000000000f715	movq	-0x10(%rbp), %rdx
000000000000f719	movq	0x10(%rdx), %rsi
000000000000f71d	subq	%rcx, %rsi
000000000000f720	movq	%rsi, 0x10(%rdx)
000000000000f724	movl	$0x100000, -0x4(%rbp)
000000000000f72b	movq	%rax, -0x30(%rbp)
000000000000f72f	jmp	0xf73b
000000000000f734	movl	$0x80200000, -0x4(%rbp)
000000000000f73b	movl	-0x4(%rbp), %eax
000000000000f73e	addq	$0x30, %rsp
000000000000f742	popq	%rbp
000000000000f743	retq
000000000000f744	nopw	%cs:(%rax,%rax)
000000000000f74e	nop
_ZydisDecodeVEX:
000000000000f750	pushq	%rbp
000000000000f751	movq	%rsp, %rbp
000000000000f754	subq	$0x30, %rsp
000000000000f758	movq	%rdi, -0x10(%rbp)
000000000000f75c	movq	%rsi, -0x18(%rbp)
000000000000f760	movq	%rdx, -0x20(%rbp)
000000000000f764	cmpq	$0x0, -0x18(%rbp)
000000000000f769	setne	%al
000000000000f76c	xorb	$-0x1, %al
000000000000f76e	andb	$0x1, %al
000000000000f770	movzbl	%al, %ecx
000000000000f773	movslq	%ecx, %rdx
000000000000f776	cmpq	$0x0, %rdx
000000000000f77a	je	0xf79f
000000000000f780	leaq	0x5a56c(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f787	leaq	0x5a14c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f78e	leaq	0x5a182(%rip), %rcx ## literal pool for: "instruction"
000000000000f795	movl	$0x1f1, %edx
000000000000f79a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f79f	jmp	0xf7a4
000000000000f7a4	movq	-0x20(%rbp), %rax
000000000000f7a8	movzbl	(%rax), %ecx
000000000000f7ab	cmpl	$0xc4, %ecx
000000000000f7b1	movb	$0x1, %dl
000000000000f7b3	movb	%dl, -0x21(%rbp)
000000000000f7b6	je	0xf7cf
000000000000f7bc	movq	-0x20(%rbp), %rax
000000000000f7c0	movzbl	(%rax), %ecx
000000000000f7c3	cmpl	$0xc5, %ecx
000000000000f7c9	sete	%dl
000000000000f7cc	movb	%dl, -0x21(%rbp)
000000000000f7cf	movb	-0x21(%rbp), %al
000000000000f7d2	xorb	$-0x1, %al
000000000000f7d4	andb	$0x1, %al
000000000000f7d6	movzbl	%al, %ecx
000000000000f7d9	movslq	%ecx, %rdx
000000000000f7dc	cmpq	$0x0, %rdx
000000000000f7e0	je	0xf805
000000000000f7e6	leaq	0x5a506(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f7ed	leaq	0x5a0e6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f7f4	leaq	0x5a507(%rip), %rcx ## literal pool for: "(data[0] == 0xC4) || (data[0] == 0xC5)"
000000000000f7fb	movl	$0x1f2, %edx
000000000000f800	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f805	jmp	0xf80a
000000000000f80a	movq	-0x18(%rbp), %rax
000000000000f80e	movq	0x430(%rax), %rcx
000000000000f815	orq	$0x10, %rcx
000000000000f819	movq	%rcx, 0x430(%rax)
000000000000f820	movq	-0x20(%rbp), %rax
000000000000f824	movzbl	(%rax), %edx
000000000000f827	movl	%edx, %esi
000000000000f829	subl	$0xc4, %esi
000000000000f82f	movl	%edx, -0x28(%rbp)
000000000000f832	movl	%esi, -0x2c(%rbp)
000000000000f835	je	0xf856
000000000000f83b	jmp	0xf840
000000000000f840	movl	-0x28(%rbp), %eax
000000000000f843	subl	$0xc5, %eax
000000000000f848	movl	%eax, -0x30(%rbp)
000000000000f84b	je	0xf98f
000000000000f851	jmp	0xfa8c
000000000000f856	movq	-0x18(%rbp), %rax
000000000000f85a	movzbl	0x55a(%rax), %ecx
000000000000f861	movq	-0x18(%rbp), %rax
000000000000f865	movzbl	0x8(%rax), %edx
000000000000f869	subl	$0x3, %edx
000000000000f86c	cmpl	%edx, %ecx
000000000000f86e	sete	%sil
000000000000f872	xorb	$-0x1, %sil
000000000000f876	andb	$0x1, %sil
000000000000f87a	movzbl	%sil, %ecx
000000000000f87e	movslq	%ecx, %rax
000000000000f881	cmpq	$0x0, %rax
000000000000f885	je	0xf8aa
000000000000f88b	leaq	0x5a461(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f892	leaq	0x5a041(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f899	leaq	0x5a489(%rip), %rcx ## literal pool for: "instruction->raw.vex.offset == instruction->length - 3"
000000000000f8a0	movl	$0x1f8, %edx
000000000000f8a5	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f8aa	jmp	0xf8af
000000000000f8af	movq	-0x18(%rbp), %rax
000000000000f8b3	movb	$0x3, 0x55b(%rax)
000000000000f8ba	movq	-0x20(%rbp), %rax
000000000000f8be	movzbl	0x1(%rax), %ecx
000000000000f8c2	sarl	$0x7, %ecx
000000000000f8c5	andl	$0x1, %ecx
000000000000f8c8	movb	%cl, %dl
000000000000f8ca	movq	-0x18(%rbp), %rax
000000000000f8ce	movb	%dl, 0x552(%rax)
000000000000f8d4	movq	-0x20(%rbp), %rax
000000000000f8d8	movzbl	0x1(%rax), %ecx
000000000000f8dc	sarl	$0x6, %ecx
000000000000f8df	andl	$0x1, %ecx
000000000000f8e2	movb	%cl, %dl
000000000000f8e4	movq	-0x18(%rbp), %rax
000000000000f8e8	movb	%dl, 0x553(%rax)
000000000000f8ee	movq	-0x20(%rbp), %rax
000000000000f8f2	movzbl	0x1(%rax), %ecx
000000000000f8f6	sarl	$0x5, %ecx
000000000000f8f9	andl	$0x1, %ecx
000000000000f8fc	movb	%cl, %dl
000000000000f8fe	movq	-0x18(%rbp), %rax
000000000000f902	movb	%dl, 0x554(%rax)
000000000000f908	movq	-0x20(%rbp), %rax
000000000000f90c	movzbl	0x1(%rax), %ecx
000000000000f910	sarl	$0x0, %ecx
000000000000f913	andl	$0x1f, %ecx
000000000000f916	movb	%cl, %dl
000000000000f918	movq	-0x18(%rbp), %rax
000000000000f91c	movb	%dl, 0x555(%rax)
000000000000f922	movq	-0x20(%rbp), %rax
000000000000f926	movzbl	0x2(%rax), %ecx
000000000000f92a	sarl	$0x7, %ecx
000000000000f92d	andl	$0x1, %ecx
000000000000f930	movb	%cl, %dl
000000000000f932	movq	-0x18(%rbp), %rax
000000000000f936	movb	%dl, 0x556(%rax)
000000000000f93c	movq	-0x20(%rbp), %rax
000000000000f940	movzbl	0x2(%rax), %ecx
000000000000f944	sarl	$0x3, %ecx
000000000000f947	andl	$0xf, %ecx
000000000000f94a	movb	%cl, %dl
000000000000f94c	movq	-0x18(%rbp), %rax
000000000000f950	movb	%dl, 0x557(%rax)
000000000000f956	movq	-0x20(%rbp), %rax
000000000000f95a	movzbl	0x2(%rax), %ecx
000000000000f95e	sarl	$0x2, %ecx
000000000000f961	andl	$0x1, %ecx
000000000000f964	movb	%cl, %dl
000000000000f966	movq	-0x18(%rbp), %rax
000000000000f96a	movb	%dl, 0x558(%rax)
000000000000f970	movq	-0x20(%rbp), %rax
000000000000f974	movzbl	0x2(%rax), %ecx
000000000000f978	sarl	$0x0, %ecx
000000000000f97b	andl	$0x3, %ecx
000000000000f97e	movb	%cl, %dl
000000000000f980	movq	-0x18(%rbp), %rax
000000000000f984	movb	%dl, 0x559(%rax)
000000000000f98a	jmp	0xfaab
000000000000f98f	movq	-0x18(%rbp), %rax
000000000000f993	movzbl	0x55a(%rax), %ecx
000000000000f99a	movq	-0x18(%rbp), %rax
000000000000f99e	movzbl	0x8(%rax), %edx
000000000000f9a2	subl	$0x2, %edx
000000000000f9a5	cmpl	%edx, %ecx
000000000000f9a7	sete	%sil
000000000000f9ab	xorb	$-0x1, %sil
000000000000f9af	andb	$0x1, %sil
000000000000f9b3	movzbl	%sil, %ecx
000000000000f9b7	movslq	%ecx, %rax
000000000000f9ba	cmpq	$0x0, %rax
000000000000f9be	je	0xf9e3
000000000000f9c4	leaq	0x5a328(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000f9cb	leaq	0x59f08(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000f9d2	leaq	0x5a387(%rip), %rcx ## literal pool for: "instruction->raw.vex.offset == instruction->length - 2"
000000000000f9d9	movl	$0x204, %edx
000000000000f9de	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000f9e3	jmp	0xf9e8
000000000000f9e8	movq	-0x18(%rbp), %rax
000000000000f9ec	movb	$0x2, 0x55b(%rax)
000000000000f9f3	movq	-0x20(%rbp), %rax
000000000000f9f7	movzbl	0x1(%rax), %ecx
000000000000f9fb	sarl	$0x7, %ecx
000000000000f9fe	andl	$0x1, %ecx
000000000000fa01	movb	%cl, %dl
000000000000fa03	movq	-0x18(%rbp), %rax
000000000000fa07	movb	%dl, 0x552(%rax)
000000000000fa0d	movq	-0x18(%rbp), %rax
000000000000fa11	movb	$0x1, 0x553(%rax)
000000000000fa18	movq	-0x18(%rbp), %rax
000000000000fa1c	movb	$0x1, 0x554(%rax)
000000000000fa23	movq	-0x18(%rbp), %rax
000000000000fa27	movb	$0x1, 0x555(%rax)
000000000000fa2e	movq	-0x18(%rbp), %rax
000000000000fa32	movb	$0x0, 0x556(%rax)
000000000000fa39	movq	-0x20(%rbp), %rax
000000000000fa3d	movzbl	0x1(%rax), %ecx
000000000000fa41	sarl	$0x3, %ecx
000000000000fa44	andl	$0xf, %ecx
000000000000fa47	movb	%cl, %dl
000000000000fa49	movq	-0x18(%rbp), %rax
000000000000fa4d	movb	%dl, 0x557(%rax)
000000000000fa53	movq	-0x20(%rbp), %rax
000000000000fa57	movzbl	0x1(%rax), %ecx
000000000000fa5b	sarl	$0x2, %ecx
000000000000fa5e	andl	$0x1, %ecx
000000000000fa61	movb	%cl, %dl
000000000000fa63	movq	-0x18(%rbp), %rax
000000000000fa67	movb	%dl, 0x558(%rax)
000000000000fa6d	movq	-0x20(%rbp), %rax
000000000000fa71	movzbl	0x1(%rax), %ecx
000000000000fa75	sarl	$0x0, %ecx
000000000000fa78	andl	$0x3, %ecx
000000000000fa7b	movb	%cl, %dl
000000000000fa7d	movq	-0x18(%rbp), %rax
000000000000fa81	movb	%dl, 0x559(%rax)
000000000000fa87	jmp	0xfaab
000000000000fa8c	leaq	0x5a260(%rip), %rdi ## literal pool for: "ZydisDecodeVEX"
000000000000fa93	leaq	0x59e40(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fa9a	leaq	0x5bb23(%rip), %rcx ## literal pool for: "0"
000000000000faa1	movl	$0x210, %edx
000000000000faa6	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000faab	movq	-0x18(%rbp), %rax
000000000000faaf	movzbl	0x555(%rax), %ecx
000000000000fab6	cmpl	$0x3, %ecx
000000000000fab9	jle	0xfacb
000000000000fabf	movl	$0x80200007, -0x4(%rbp)
000000000000fac6	jmp	0xfb6d
000000000000facb	movq	-0x18(%rbp), %rax
000000000000facf	movb	0x556(%rax), %cl
000000000000fad5	movq	-0x10(%rbp), %rax
000000000000fad9	movb	%cl, 0x26(%rax)
000000000000fadc	movq	-0x18(%rbp), %rax
000000000000fae0	movzbl	0x552(%rax), %edx
000000000000fae7	xorl	$-0x1, %edx
000000000000faea	andl	$0x1, %edx
000000000000faed	movb	%dl, %cl
000000000000faef	movq	-0x10(%rbp), %rax
000000000000faf3	movb	%cl, 0x27(%rax)
000000000000faf6	movq	-0x18(%rbp), %rax
000000000000fafa	movzbl	0x553(%rax), %edx
000000000000fb01	xorl	$-0x1, %edx
000000000000fb04	andl	$0x1, %edx
000000000000fb07	movb	%dl, %cl
000000000000fb09	movq	-0x10(%rbp), %rax
000000000000fb0d	movb	%cl, 0x28(%rax)
000000000000fb10	movq	-0x18(%rbp), %rax
000000000000fb14	movzbl	0x554(%rax), %edx
000000000000fb1b	xorl	$-0x1, %edx
000000000000fb1e	andl	$0x1, %edx
000000000000fb21	movb	%dl, %cl
000000000000fb23	movq	-0x10(%rbp), %rax
000000000000fb27	movb	%cl, 0x29(%rax)
000000000000fb2a	movq	-0x18(%rbp), %rax
000000000000fb2e	movb	0x558(%rax), %cl
000000000000fb34	movq	-0x10(%rbp), %rax
000000000000fb38	movb	%cl, 0x2a(%rax)
000000000000fb3b	movq	-0x18(%rbp), %rax
000000000000fb3f	movb	0x558(%rax), %cl
000000000000fb45	movq	-0x10(%rbp), %rax
000000000000fb49	movb	%cl, 0x2b(%rax)
000000000000fb4c	movq	-0x18(%rbp), %rax
000000000000fb50	movzbl	0x557(%rax), %edx
000000000000fb57	xorl	$-0x1, %edx
000000000000fb5a	andl	$0xf, %edx
000000000000fb5d	movb	%dl, %cl
000000000000fb5f	movq	-0x10(%rbp), %rax
000000000000fb63	movb	%cl, 0x2e(%rax)
000000000000fb66	movl	$0x100000, -0x4(%rbp)
000000000000fb6d	movl	-0x4(%rbp), %eax
000000000000fb70	addq	$0x30, %rsp
000000000000fb74	popq	%rbp
000000000000fb75	retq
000000000000fb76	nopw	%cs:(%rax,%rax)
_ZydisDecodeMVEX:
000000000000fb80	pushq	%rbp
000000000000fb81	movq	%rsp, %rbp
000000000000fb84	subq	$0x20, %rsp
000000000000fb88	movq	%rdi, -0x10(%rbp)
000000000000fb8c	movq	%rsi, -0x18(%rbp)
000000000000fb90	movq	%rdx, -0x20(%rbp)
000000000000fb94	cmpq	$0x0, -0x18(%rbp)
000000000000fb99	setne	%al
000000000000fb9c	xorb	$-0x1, %al
000000000000fb9e	andb	$0x1, %al
000000000000fba0	movzbl	%al, %ecx
000000000000fba3	movslq	%ecx, %rdx
000000000000fba6	cmpq	$0x0, %rdx
000000000000fbaa	je	0xfbcf
000000000000fbb0	leaq	0x5a1e0(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000fbb7	leaq	0x59d1c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fbbe	leaq	0x59d52(%rip), %rcx ## literal pool for: "instruction"
000000000000fbc5	movl	$0x28f, %edx
000000000000fbca	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000fbcf	jmp	0xfbd4
000000000000fbd4	movq	-0x20(%rbp), %rax
000000000000fbd8	movzbl	(%rax), %ecx
000000000000fbdb	cmpl	$0x62, %ecx
000000000000fbde	sete	%dl
000000000000fbe1	xorb	$-0x1, %dl
000000000000fbe4	andb	$0x1, %dl
000000000000fbe7	movzbl	%dl, %ecx
000000000000fbea	movslq	%ecx, %rax
000000000000fbed	cmpq	$0x0, %rax
000000000000fbf1	je	0xfc16
000000000000fbf7	leaq	0x5a199(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000fbfe	leaq	0x59cd5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fc05	leaq	0x5a19b(%rip), %rcx ## literal pool for: "data[0] == 0x62"
000000000000fc0c	movl	$0x290, %edx
000000000000fc11	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000fc16	jmp	0xfc1b
000000000000fc1b	movq	-0x18(%rbp), %rax
000000000000fc1f	movzbl	0x577(%rax), %ecx
000000000000fc26	movq	-0x18(%rbp), %rax
000000000000fc2a	movzbl	0x8(%rax), %edx
000000000000fc2e	subl	$0x4, %edx
000000000000fc31	cmpl	%edx, %ecx
000000000000fc33	sete	%sil
000000000000fc37	xorb	$-0x1, %sil
000000000000fc3b	andb	$0x1, %sil
000000000000fc3f	movzbl	%sil, %ecx
000000000000fc43	movslq	%ecx, %rax
000000000000fc46	cmpq	$0x0, %rax
000000000000fc4a	je	0xfc6f
000000000000fc50	leaq	0x5a140(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000fc57	leaq	0x59c7c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fc5e	leaq	0x5a152(%rip), %rcx ## literal pool for: "instruction->raw.mvex.offset == instruction->length - 4"
000000000000fc65	movl	$0x291, %edx
000000000000fc6a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000fc6f	jmp	0xfc74
000000000000fc74	movq	-0x18(%rbp), %rax
000000000000fc78	movq	0x430(%rax), %rcx
000000000000fc7f	orq	$0x40, %rcx
000000000000fc83	movq	%rcx, 0x430(%rax)
000000000000fc8a	movq	-0x20(%rbp), %rax
000000000000fc8e	movzbl	0x1(%rax), %edx
000000000000fc92	sarl	$0x7, %edx
000000000000fc95	andl	$0x1, %edx
000000000000fc98	movb	%dl, %sil
000000000000fc9b	movq	-0x18(%rbp), %rax
000000000000fc9f	movb	%sil, 0x56b(%rax)
000000000000fca6	movq	-0x20(%rbp), %rax
000000000000fcaa	movzbl	0x1(%rax), %edx
000000000000fcae	sarl	$0x6, %edx
000000000000fcb1	andl	$0x1, %edx
000000000000fcb4	movb	%dl, %sil
000000000000fcb7	movq	-0x18(%rbp), %rax
000000000000fcbb	movb	%sil, 0x56c(%rax)
000000000000fcc2	movq	-0x20(%rbp), %rax
000000000000fcc6	movzbl	0x1(%rax), %edx
000000000000fcca	sarl	$0x5, %edx
000000000000fccd	andl	$0x1, %edx
000000000000fcd0	movb	%dl, %sil
000000000000fcd3	movq	-0x18(%rbp), %rax
000000000000fcd7	movb	%sil, 0x56d(%rax)
000000000000fcde	movq	-0x20(%rbp), %rax
000000000000fce2	movzbl	0x1(%rax), %edx
000000000000fce6	sarl	$0x4, %edx
000000000000fce9	andl	$0x1, %edx
000000000000fcec	movb	%dl, %sil
000000000000fcef	movq	-0x18(%rbp), %rax
000000000000fcf3	movb	%sil, 0x56e(%rax)
000000000000fcfa	movq	-0x20(%rbp), %rax
000000000000fcfe	movzbl	0x1(%rax), %edx
000000000000fd02	sarl	$0x0, %edx
000000000000fd05	andl	$0xf, %edx
000000000000fd08	movb	%dl, %sil
000000000000fd0b	movq	-0x18(%rbp), %rax
000000000000fd0f	movb	%sil, 0x56f(%rax)
000000000000fd16	movq	-0x18(%rbp), %rax
000000000000fd1a	movzbl	0x56f(%rax), %edx
000000000000fd21	cmpl	$0x3, %edx
000000000000fd24	jle	0xfd36
000000000000fd2a	movl	$0x80200007, -0x4(%rbp)
000000000000fd31	jmp	0xff1d
000000000000fd36	movq	-0x20(%rbp), %rax
000000000000fd3a	movzbl	0x2(%rax), %ecx
000000000000fd3e	sarl	$0x7, %ecx
000000000000fd41	andl	$0x1, %ecx
000000000000fd44	movb	%cl, %dl
000000000000fd46	movq	-0x18(%rbp), %rax
000000000000fd4a	movb	%dl, 0x570(%rax)
000000000000fd50	movq	-0x20(%rbp), %rax
000000000000fd54	movzbl	0x2(%rax), %ecx
000000000000fd58	sarl	$0x3, %ecx
000000000000fd5b	andl	$0xf, %ecx
000000000000fd5e	movb	%cl, %dl
000000000000fd60	movq	-0x18(%rbp), %rax
000000000000fd64	movb	%dl, 0x571(%rax)
000000000000fd6a	movq	-0x20(%rbp), %rax
000000000000fd6e	movzbl	0x2(%rax), %ecx
000000000000fd72	sarl	$0x2, %ecx
000000000000fd75	andl	$0x1, %ecx
000000000000fd78	cmpl	$0x0, %ecx
000000000000fd7b	sete	%dl
000000000000fd7e	xorb	$-0x1, %dl
000000000000fd81	andb	$0x1, %dl
000000000000fd84	movzbl	%dl, %ecx
000000000000fd87	movslq	%ecx, %rax
000000000000fd8a	cmpq	$0x0, %rax
000000000000fd8e	je	0xfdb3
000000000000fd94	leaq	0x59ffc(%rip), %rdi ## literal pool for: "ZydisDecodeMVEX"
000000000000fd9b	leaq	0x59b38(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000fda2	leaq	0x5a046(%rip), %rcx ## literal pool for: "((data[2] >> 2) & 0x01) == 0x00"
000000000000fda9	movl	$0x2a3, %edx
000000000000fdae	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000fdb3	jmp	0xfdb8
000000000000fdb8	movq	-0x20(%rbp), %rax
000000000000fdbc	movzbl	0x2(%rax), %ecx
000000000000fdc0	sarl	$0x0, %ecx
000000000000fdc3	andl	$0x3, %ecx
000000000000fdc6	movb	%cl, %dl
000000000000fdc8	movq	-0x18(%rbp), %rax
000000000000fdcc	movb	%dl, 0x572(%rax)
000000000000fdd2	movq	-0x20(%rbp), %rax
000000000000fdd6	movzbl	0x3(%rax), %ecx
000000000000fdda	sarl	$0x7, %ecx
000000000000fddd	andl	$0x1, %ecx
000000000000fde0	movb	%cl, %dl
000000000000fde2	movq	-0x18(%rbp), %rax
000000000000fde6	movb	%dl, 0x573(%rax)
000000000000fdec	movq	-0x20(%rbp), %rax
000000000000fdf0	movzbl	0x3(%rax), %ecx
000000000000fdf4	sarl	$0x4, %ecx
000000000000fdf7	andl	$0x7, %ecx
000000000000fdfa	movb	%cl, %dl
000000000000fdfc	movq	-0x18(%rbp), %rax
000000000000fe00	movb	%dl, 0x574(%rax)
000000000000fe06	movq	-0x20(%rbp), %rax
000000000000fe0a	movzbl	0x3(%rax), %ecx
000000000000fe0e	sarl	$0x3, %ecx
000000000000fe11	andl	$0x1, %ecx
000000000000fe14	movb	%cl, %dl
000000000000fe16	movq	-0x18(%rbp), %rax
000000000000fe1a	movb	%dl, 0x575(%rax)
000000000000fe20	movq	-0x20(%rbp), %rax
000000000000fe24	movzbl	0x3(%rax), %ecx
000000000000fe28	sarl	$0x0, %ecx
000000000000fe2b	andl	$0x7, %ecx
000000000000fe2e	movb	%cl, %dl
000000000000fe30	movq	-0x18(%rbp), %rax
000000000000fe34	movb	%dl, 0x576(%rax)
000000000000fe3a	movq	-0x18(%rbp), %rax
000000000000fe3e	movb	0x570(%rax), %dl
000000000000fe44	movq	-0x10(%rbp), %rax
000000000000fe48	movb	%dl, 0x26(%rax)
000000000000fe4b	movq	-0x18(%rbp), %rax
000000000000fe4f	movzbl	0x56b(%rax), %ecx
000000000000fe56	xorl	$-0x1, %ecx
000000000000fe59	andl	$0x1, %ecx
000000000000fe5c	movb	%cl, %dl
000000000000fe5e	movq	-0x10(%rbp), %rax
000000000000fe62	movb	%dl, 0x27(%rax)
000000000000fe65	movq	-0x18(%rbp), %rax
000000000000fe69	movzbl	0x56c(%rax), %ecx
000000000000fe70	xorl	$-0x1, %ecx
000000000000fe73	andl	$0x1, %ecx
000000000000fe76	movb	%cl, %dl
000000000000fe78	movq	-0x10(%rbp), %rax
000000000000fe7c	movb	%dl, 0x28(%rax)
000000000000fe7f	movq	-0x18(%rbp), %rax
000000000000fe83	movzbl	0x56d(%rax), %ecx
000000000000fe8a	xorl	$-0x1, %ecx
000000000000fe8d	andl	$0x1, %ecx
000000000000fe90	movb	%cl, %dl
000000000000fe92	movq	-0x10(%rbp), %rax
000000000000fe96	movb	%dl, 0x29(%rax)
000000000000fe99	movq	-0x18(%rbp), %rax
000000000000fe9d	movzbl	0x56e(%rax), %ecx
000000000000fea4	xorl	$-0x1, %ecx
000000000000fea7	andl	$0x1, %ecx
000000000000feaa	movb	%cl, %dl
000000000000feac	movq	-0x10(%rbp), %rax
000000000000feb0	movb	%dl, 0x2c(%rax)
000000000000feb3	movq	-0x18(%rbp), %rax
000000000000feb7	movzbl	0x575(%rax), %ecx
000000000000febe	xorl	$-0x1, %ecx
000000000000fec1	andl	$0x1, %ecx
000000000000fec4	movb	%cl, %dl
000000000000fec6	movq	-0x10(%rbp), %rax
000000000000feca	movb	%dl, 0x2d(%rax)
000000000000fecd	movq	-0x10(%rbp), %rax
000000000000fed1	movb	$0x2, 0x2b(%rax)
000000000000fed5	movq	-0x18(%rbp), %rax
000000000000fed9	movzbl	0x575(%rax), %ecx
000000000000fee0	xorl	$-0x1, %ecx
000000000000fee3	andl	$0x1, %ecx
000000000000fee6	shll	$0x4, %ecx
000000000000fee9	movq	-0x18(%rbp), %rax
000000000000feed	movzbl	0x571(%rax), %esi
000000000000fef4	xorl	$-0x1, %esi
000000000000fef7	andl	$0xf, %esi
000000000000fefa	orl	%esi, %ecx
000000000000fefc	movb	%cl, %dl
000000000000fefe	movq	-0x10(%rbp), %rax
000000000000ff02	movb	%dl, 0x2e(%rax)
000000000000ff05	movq	-0x18(%rbp), %rax
000000000000ff09	movb	0x576(%rax), %dl
000000000000ff0f	movq	-0x10(%rbp), %rax
000000000000ff13	movb	%dl, 0x2f(%rax)
000000000000ff16	movl	$0x100000, -0x4(%rbp)
000000000000ff1d	movl	-0x4(%rbp), %eax
000000000000ff20	addq	$0x20, %rsp
000000000000ff24	popq	%rbp
000000000000ff25	retq
000000000000ff26	nopw	%cs:(%rax,%rax)
_ZydisDecodeEVEX:
000000000000ff30	pushq	%rbp
000000000000ff31	movq	%rsp, %rbp
000000000000ff34	subq	$0x20, %rsp
000000000000ff38	movq	%rdi, -0x10(%rbp)
000000000000ff3c	movq	%rsi, -0x18(%rbp)
000000000000ff40	movq	%rdx, -0x20(%rbp)
000000000000ff44	cmpq	$0x0, -0x18(%rbp)
000000000000ff49	setne	%al
000000000000ff4c	xorb	$-0x1, %al
000000000000ff4e	andb	$0x1, %al
000000000000ff50	movzbl	%al, %ecx
000000000000ff53	movslq	%ecx, %rdx
000000000000ff56	cmpq	$0x0, %rdx
000000000000ff5a	je	0xff7f
000000000000ff60	leaq	0x59ea8(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000ff67	leaq	0x5996c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ff6e	leaq	0x599a2(%rip), %rcx ## literal pool for: "instruction"
000000000000ff75	movl	$0x237, %edx
000000000000ff7a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ff7f	jmp	0xff84
000000000000ff84	movq	-0x20(%rbp), %rax
000000000000ff88	movzbl	(%rax), %ecx
000000000000ff8b	cmpl	$0x62, %ecx
000000000000ff8e	sete	%dl
000000000000ff91	xorb	$-0x1, %dl
000000000000ff94	andb	$0x1, %dl
000000000000ff97	movzbl	%dl, %ecx
000000000000ff9a	movslq	%ecx, %rax
000000000000ff9d	cmpq	$0x0, %rax
000000000000ffa1	je	0xffc6
000000000000ffa7	leaq	0x59e61(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000000ffae	leaq	0x59925(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000000ffb5	leaq	0x59deb(%rip), %rcx ## literal pool for: "data[0] == 0x62"
000000000000ffbc	movl	$0x238, %edx
000000000000ffc1	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000000ffc6	jmp	0xffcb
000000000000ffcb	movq	-0x18(%rbp), %rax
000000000000ffcf	movzbl	0x56a(%rax), %ecx
000000000000ffd6	movq	-0x18(%rbp), %rax
000000000000ffda	movzbl	0x8(%rax), %edx
000000000000ffde	subl	$0x4, %edx
000000000000ffe1	cmpl	%edx, %ecx
000000000000ffe3	sete	%sil
000000000000ffe7	xorb	$-0x1, %sil
000000000000ffeb	andb	$0x1, %sil
000000000000ffef	movzbl	%sil, %ecx
000000000000fff3	movslq	%ecx, %rax
000000000000fff6	cmpq	$0x0, %rax
000000000000fffa	je	0x1001f
0000000000010000	leaq	0x59e08(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
0000000000010007	leaq	0x598cc(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001000e	leaq	0x59e0a(%rip), %rcx ## literal pool for: "instruction->raw.evex.offset == instruction->length - 4"
0000000000010015	movl	$0x239, %edx
000000000001001a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001001f	jmp	0x10024
0000000000010024	movq	-0x18(%rbp), %rax
0000000000010028	movq	0x430(%rax), %rcx
000000000001002f	orq	$0x20, %rcx
0000000000010033	movq	%rcx, 0x430(%rax)
000000000001003a	movq	-0x20(%rbp), %rax
000000000001003e	movzbl	0x1(%rax), %edx
0000000000010042	sarl	$0x7, %edx
0000000000010045	andl	$0x1, %edx
0000000000010048	movb	%dl, %sil
000000000001004b	movq	-0x18(%rbp), %rax
000000000001004f	movb	%sil, 0x55c(%rax)
0000000000010056	movq	-0x20(%rbp), %rax
000000000001005a	movzbl	0x1(%rax), %edx
000000000001005e	sarl	$0x6, %edx
0000000000010061	andl	$0x1, %edx
0000000000010064	movb	%dl, %sil
0000000000010067	movq	-0x18(%rbp), %rax
000000000001006b	movb	%sil, 0x55d(%rax)
0000000000010072	movq	-0x20(%rbp), %rax
0000000000010076	movzbl	0x1(%rax), %edx
000000000001007a	sarl	$0x5, %edx
000000000001007d	andl	$0x1, %edx
0000000000010080	movb	%dl, %sil
0000000000010083	movq	-0x18(%rbp), %rax
0000000000010087	movb	%sil, 0x55e(%rax)
000000000001008e	movq	-0x20(%rbp), %rax
0000000000010092	movzbl	0x1(%rax), %edx
0000000000010096	sarl	$0x4, %edx
0000000000010099	andl	$0x1, %edx
000000000001009c	movb	%dl, %sil
000000000001009f	movq	-0x18(%rbp), %rax
00000000000100a3	movb	%sil, 0x55f(%rax)
00000000000100aa	movq	-0x20(%rbp), %rax
00000000000100ae	movzbl	0x1(%rax), %edx
00000000000100b2	sarl	$0x2, %edx
00000000000100b5	andl	$0x3, %edx
00000000000100b8	cmpl	$0x0, %edx
00000000000100bb	je	0x100cd
00000000000100c1	movl	$0x80200008, -0x4(%rbp)
00000000000100c8	jmp	0x103ea
00000000000100cd	movq	-0x20(%rbp), %rax
00000000000100d1	movzbl	0x1(%rax), %ecx
00000000000100d5	sarl	$0x0, %ecx
00000000000100d8	andl	$0x3, %ecx
00000000000100db	movb	%cl, %dl
00000000000100dd	movq	-0x18(%rbp), %rax
00000000000100e1	movb	%dl, 0x560(%rax)
00000000000100e7	movq	-0x18(%rbp), %rax
00000000000100eb	movzbl	0x560(%rax), %ecx
00000000000100f2	cmpl	$0x0, %ecx
00000000000100f5	jne	0x10107
00000000000100fb	movl	$0x80200007, -0x4(%rbp)
0000000000010102	jmp	0x103ea
0000000000010107	movq	-0x20(%rbp), %rax
000000000001010b	movzbl	0x2(%rax), %ecx
000000000001010f	sarl	$0x7, %ecx
0000000000010112	andl	$0x1, %ecx
0000000000010115	movb	%cl, %dl
0000000000010117	movq	-0x18(%rbp), %rax
000000000001011b	movb	%dl, 0x561(%rax)
0000000000010121	movq	-0x20(%rbp), %rax
0000000000010125	movzbl	0x2(%rax), %ecx
0000000000010129	sarl	$0x3, %ecx
000000000001012c	andl	$0xf, %ecx
000000000001012f	movb	%cl, %dl
0000000000010131	movq	-0x18(%rbp), %rax
0000000000010135	movb	%dl, 0x562(%rax)
000000000001013b	movq	-0x20(%rbp), %rax
000000000001013f	movzbl	0x2(%rax), %ecx
0000000000010143	sarl	$0x2, %ecx
0000000000010146	andl	$0x1, %ecx
0000000000010149	cmpl	$0x1, %ecx
000000000001014c	sete	%dl
000000000001014f	xorb	$-0x1, %dl
0000000000010152	andb	$0x1, %dl
0000000000010155	movzbl	%dl, %ecx
0000000000010158	movslq	%ecx, %rax
000000000001015b	cmpq	$0x0, %rax
000000000001015f	je	0x10184
0000000000010165	leaq	0x59ca3(%rip), %rdi ## literal pool for: "ZydisDecodeEVEX"
000000000001016c	leaq	0x59767(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010173	leaq	0x59cdd(%rip), %rcx ## literal pool for: "((data[2] >> 2) & 0x01) == 0x01"
000000000001017a	movl	$0x252, %edx
000000000001017f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010184	jmp	0x10189
0000000000010189	movq	-0x20(%rbp), %rax
000000000001018d	movzbl	0x2(%rax), %ecx
0000000000010191	sarl	$0x0, %ecx
0000000000010194	andl	$0x3, %ecx
0000000000010197	movb	%cl, %dl
0000000000010199	movq	-0x18(%rbp), %rax
000000000001019d	movb	%dl, 0x563(%rax)
00000000000101a3	movq	-0x20(%rbp), %rax
00000000000101a7	movzbl	0x3(%rax), %ecx
00000000000101ab	sarl	$0x7, %ecx
00000000000101ae	andl	$0x1, %ecx
00000000000101b1	movb	%cl, %dl
00000000000101b3	movq	-0x18(%rbp), %rax
00000000000101b7	movb	%dl, 0x564(%rax)
00000000000101bd	movq	-0x20(%rbp), %rax
00000000000101c1	movzbl	0x3(%rax), %ecx
00000000000101c5	sarl	$0x6, %ecx
00000000000101c8	andl	$0x1, %ecx
00000000000101cb	movb	%cl, %dl
00000000000101cd	movq	-0x18(%rbp), %rax
00000000000101d1	movb	%dl, 0x565(%rax)
00000000000101d7	movq	-0x20(%rbp), %rax
00000000000101db	movzbl	0x3(%rax), %ecx
00000000000101df	sarl	$0x5, %ecx
00000000000101e2	andl	$0x1, %ecx
00000000000101e5	movb	%cl, %dl
00000000000101e7	movq	-0x18(%rbp), %rax
00000000000101eb	movb	%dl, 0x566(%rax)
00000000000101f1	movq	-0x20(%rbp), %rax
00000000000101f5	movzbl	0x3(%rax), %ecx
00000000000101f9	sarl	$0x4, %ecx
00000000000101fc	andl	$0x1, %ecx
00000000000101ff	movb	%cl, %dl
0000000000010201	movq	-0x18(%rbp), %rax
0000000000010205	movb	%dl, 0x567(%rax)
000000000001020b	movq	-0x20(%rbp), %rax
000000000001020f	movzbl	0x3(%rax), %ecx
0000000000010213	sarl	$0x3, %ecx
0000000000010216	andl	$0x1, %ecx
0000000000010219	movb	%cl, %dl
000000000001021b	movq	-0x18(%rbp), %rax
000000000001021f	movb	%dl, 0x568(%rax)
0000000000010225	movq	-0x18(%rbp), %rax
0000000000010229	cmpb	$0x0, 0x568(%rax)
0000000000010230	jne	0x10252
0000000000010236	movq	-0x10(%rbp), %rax
000000000001023a	movq	(%rax), %rax
000000000001023d	cmpl	$0x0, (%rax)
0000000000010240	je	0x10252
0000000000010246	movl	$0x80200008, -0x4(%rbp)
000000000001024d	jmp	0x103ea
0000000000010252	movq	-0x20(%rbp), %rax
0000000000010256	movzbl	0x3(%rax), %ecx
000000000001025a	sarl	$0x0, %ecx
000000000001025d	andl	$0x7, %ecx
0000000000010260	movb	%cl, %dl
0000000000010262	movq	-0x18(%rbp), %rax
0000000000010266	movb	%dl, 0x569(%rax)
000000000001026c	movq	-0x18(%rbp), %rax
0000000000010270	movzbl	0x564(%rax), %ecx
0000000000010277	cmpl	$0x0, %ecx
000000000001027a	je	0x1029d
0000000000010280	movq	-0x18(%rbp), %rax
0000000000010284	cmpb	$0x0, 0x569(%rax)
000000000001028b	jne	0x1029d
0000000000010291	movl	$0x8020000a, -0x4(%rbp)
0000000000010298	jmp	0x103ea
000000000001029d	movq	-0x18(%rbp), %rax
00000000000102a1	movb	0x561(%rax), %cl
00000000000102a7	movq	-0x10(%rbp), %rax
00000000000102ab	movb	%cl, 0x26(%rax)
00000000000102ae	movq	-0x18(%rbp), %rax
00000000000102b2	movzbl	0x55c(%rax), %edx
00000000000102b9	xorl	$-0x1, %edx
00000000000102bc	andl	$0x1, %edx
00000000000102bf	movb	%dl, %cl
00000000000102c1	movq	-0x10(%rbp), %rax
00000000000102c5	movb	%cl, 0x27(%rax)
00000000000102c8	movq	-0x18(%rbp), %rax
00000000000102cc	movzbl	0x55d(%rax), %edx
00000000000102d3	xorl	$-0x1, %edx
00000000000102d6	andl	$0x1, %edx
00000000000102d9	movb	%dl, %cl
00000000000102db	movq	-0x10(%rbp), %rax
00000000000102df	movb	%cl, 0x28(%rax)
00000000000102e2	movq	-0x18(%rbp), %rax
00000000000102e6	movzbl	0x55e(%rax), %edx
00000000000102ed	xorl	$-0x1, %edx
00000000000102f0	andl	$0x1, %edx
00000000000102f3	movb	%dl, %cl
00000000000102f5	movq	-0x10(%rbp), %rax
00000000000102f9	movb	%cl, 0x29(%rax)
00000000000102fc	movq	-0x20(%rbp), %rax
0000000000010300	movzbl	0x3(%rax), %edx
0000000000010304	sarl	$0x5, %edx
0000000000010307	andl	$0x3, %edx
000000000001030a	movb	%dl, %cl
000000000001030c	movq	-0x10(%rbp), %rax
0000000000010310	movb	%cl, 0x2b(%rax)
0000000000010313	movq	-0x18(%rbp), %rax
0000000000010317	movzbl	0x55f(%rax), %edx
000000000001031e	xorl	$-0x1, %edx
0000000000010321	andl	$0x1, %edx
0000000000010324	movb	%dl, %cl
0000000000010326	movq	-0x10(%rbp), %rax
000000000001032a	movb	%cl, 0x2c(%rax)
000000000001032d	movq	-0x18(%rbp), %rax
0000000000010331	movzbl	0x568(%rax), %edx
0000000000010338	xorl	$-0x1, %edx
000000000001033b	andl	$0x1, %edx
000000000001033e	movb	%dl, %cl
0000000000010340	movq	-0x10(%rbp), %rax
0000000000010344	movb	%cl, 0x2d(%rax)
0000000000010347	movq	-0x18(%rbp), %rax
000000000001034b	movzbl	0x568(%rax), %edx
0000000000010352	xorl	$-0x1, %edx
0000000000010355	andl	$0x1, %edx
0000000000010358	shll	$0x4, %edx
000000000001035b	movq	-0x18(%rbp), %rax
000000000001035f	movzbl	0x562(%rax), %esi
0000000000010366	xorl	$-0x1, %esi
0000000000010369	andl	$0xf, %esi
000000000001036c	orl	%esi, %edx
000000000001036e	movb	%dl, %cl
0000000000010370	movq	-0x10(%rbp), %rax
0000000000010374	movb	%cl, 0x2e(%rax)
0000000000010377	movq	-0x18(%rbp), %rax
000000000001037b	movb	0x569(%rax), %cl
0000000000010381	movq	-0x10(%rbp), %rax
0000000000010385	movb	%cl, 0x2f(%rax)
0000000000010388	movq	-0x18(%rbp), %rax
000000000001038c	cmpb	$0x0, 0x568(%rax)
0000000000010393	jne	0x103b5
0000000000010399	movq	-0x10(%rbp), %rax
000000000001039d	movq	(%rax), %rax
00000000000103a0	cmpl	$0x0, (%rax)
00000000000103a3	je	0x103b5
00000000000103a9	movl	$0x80200008, -0x4(%rbp)
00000000000103b0	jmp	0x103ea
00000000000103b5	movq	-0x18(%rbp), %rax
00000000000103b9	cmpb	$0x0, 0x567(%rax)
00000000000103c0	jne	0x103e3
00000000000103c6	movq	-0x10(%rbp), %rax
00000000000103ca	movzbl	0x2b(%rax), %ecx
00000000000103ce	cmpl	$0x3, %ecx
00000000000103d1	jne	0x103e3
00000000000103d7	movl	$0x80200008, -0x4(%rbp)
00000000000103de	jmp	0x103ea
00000000000103e3	movl	$0x100000, -0x4(%rbp)
00000000000103ea	movl	-0x4(%rbp), %eax
00000000000103ed	addq	$0x20, %rsp
00000000000103f1	popq	%rbp
00000000000103f2	retq
00000000000103f3	nopw	%cs:(%rax,%rax)
00000000000103fd	nopl	(%rax)
_ZydisDecodeXOP:
0000000000010400	pushq	%rbp
0000000000010401	movq	%rsp, %rbp
0000000000010404	subq	$0x20, %rsp
0000000000010408	movq	%rdi, -0x10(%rbp)
000000000001040c	movq	%rsi, -0x18(%rbp)
0000000000010410	movq	%rdx, -0x20(%rbp)
0000000000010414	cmpq	$0x0, -0x18(%rbp)
0000000000010419	setne	%al
000000000001041c	xorb	$-0x1, %al
000000000001041e	andb	$0x1, %al
0000000000010420	movzbl	%al, %ecx
0000000000010423	movslq	%ecx, %rdx
0000000000010426	cmpq	$0x0, %rdx
000000000001042a	je	0x1044f
0000000000010430	leaq	0x59a40(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
0000000000010437	leaq	0x5949c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001043e	leaq	0x594d2(%rip), %rcx ## literal pool for: "instruction"
0000000000010445	movl	$0x1c3, %edx
000000000001044a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001044f	jmp	0x10454
0000000000010454	movq	-0x20(%rbp), %rax
0000000000010458	movzbl	(%rax), %ecx
000000000001045b	cmpl	$0x8f, %ecx
0000000000010461	sete	%dl
0000000000010464	xorb	$-0x1, %dl
0000000000010467	andb	$0x1, %dl
000000000001046a	movzbl	%dl, %ecx
000000000001046d	movslq	%ecx, %rax
0000000000010470	cmpq	$0x0, %rax
0000000000010474	je	0x10499
000000000001047a	leaq	0x599f6(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
0000000000010481	leaq	0x59452(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010488	leaq	0x599f7(%rip), %rcx ## literal pool for: "data[0] == 0x8F"
000000000001048f	movl	$0x1c4, %edx
0000000000010494	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010499	jmp	0x1049e
000000000001049e	movq	-0x20(%rbp), %rax
00000000000104a2	movzbl	0x1(%rax), %ecx
00000000000104a6	sarl	$0x0, %ecx
00000000000104a9	andl	$0x1f, %ecx
00000000000104ac	cmpl	$0x8, %ecx
00000000000104af	setge	%dl
00000000000104b2	xorb	$-0x1, %dl
00000000000104b5	andb	$0x1, %dl
00000000000104b8	movzbl	%dl, %ecx
00000000000104bb	movslq	%ecx, %rax
00000000000104be	cmpq	$0x0, %rax
00000000000104c2	je	0x104e7
00000000000104c8	leaq	0x599a8(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
00000000000104cf	leaq	0x59404(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000104d6	leaq	0x599b9(%rip), %rcx ## literal pool for: "((data[1] >> 0) & 0x1F) >= 8"
00000000000104dd	movl	$0x1c5, %edx
00000000000104e2	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000104e7	jmp	0x104ec
00000000000104ec	movq	-0x18(%rbp), %rax
00000000000104f0	movzbl	0x551(%rax), %ecx
00000000000104f7	movq	-0x18(%rbp), %rax
00000000000104fb	movzbl	0x8(%rax), %edx
00000000000104ff	subl	$0x3, %edx
0000000000010502	cmpl	%edx, %ecx
0000000000010504	sete	%sil
0000000000010508	xorb	$-0x1, %sil
000000000001050c	andb	$0x1, %sil
0000000000010510	movzbl	%sil, %ecx
0000000000010514	movslq	%ecx, %rax
0000000000010517	cmpq	$0x0, %rax
000000000001051b	je	0x10540
0000000000010521	leaq	0x5994f(%rip), %rdi ## literal pool for: "ZydisDecodeXOP"
0000000000010528	leaq	0x593ab(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001052f	leaq	0x5997d(%rip), %rcx ## literal pool for: "instruction->raw.xop.offset == instruction->length - 3"
0000000000010536	movl	$0x1c6, %edx
000000000001053b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010540	jmp	0x10545
0000000000010545	movq	-0x18(%rbp), %rax
0000000000010549	movq	0x430(%rax), %rcx
0000000000010550	orq	$0x8, %rcx
0000000000010554	movq	%rcx, 0x430(%rax)
000000000001055b	movq	-0x20(%rbp), %rax
000000000001055f	movzbl	0x1(%rax), %edx
0000000000010563	sarl	$0x7, %edx
0000000000010566	andl	$0x1, %edx
0000000000010569	movb	%dl, %sil
000000000001056c	movq	-0x18(%rbp), %rax
0000000000010570	movb	%sil, 0x549(%rax)
0000000000010577	movq	-0x20(%rbp), %rax
000000000001057b	movzbl	0x1(%rax), %edx
000000000001057f	sarl	$0x6, %edx
0000000000010582	andl	$0x1, %edx
0000000000010585	movb	%dl, %sil
0000000000010588	movq	-0x18(%rbp), %rax
000000000001058c	movb	%sil, 0x54a(%rax)
0000000000010593	movq	-0x20(%rbp), %rax
0000000000010597	movzbl	0x1(%rax), %edx
000000000001059b	sarl	$0x5, %edx
000000000001059e	andl	$0x1, %edx
00000000000105a1	movb	%dl, %sil
00000000000105a4	movq	-0x18(%rbp), %rax
00000000000105a8	movb	%sil, 0x54b(%rax)
00000000000105af	movq	-0x20(%rbp), %rax
00000000000105b3	movzbl	0x1(%rax), %edx
00000000000105b7	sarl	$0x0, %edx
00000000000105ba	andl	$0x1f, %edx
00000000000105bd	movb	%dl, %sil
00000000000105c0	movq	-0x18(%rbp), %rax
00000000000105c4	movb	%sil, 0x54c(%rax)
00000000000105cb	movq	-0x18(%rbp), %rax
00000000000105cf	movzbl	0x54c(%rax), %edx
00000000000105d6	cmpl	$0x8, %edx
00000000000105d9	jl	0x105f3
00000000000105df	movq	-0x18(%rbp), %rax
00000000000105e3	movzbl	0x54c(%rax), %ecx
00000000000105ea	cmpl	$0xa, %ecx
00000000000105ed	jle	0x105ff
00000000000105f3	movl	$0x80200007, -0x4(%rbp)
00000000000105fa	jmp	0x10709
00000000000105ff	movq	-0x20(%rbp), %rax
0000000000010603	movzbl	0x2(%rax), %ecx
0000000000010607	sarl	$0x7, %ecx
000000000001060a	andl	$0x1, %ecx
000000000001060d	movb	%cl, %dl
000000000001060f	movq	-0x18(%rbp), %rax
0000000000010613	movb	%dl, 0x54d(%rax)
0000000000010619	movq	-0x20(%rbp), %rax
000000000001061d	movzbl	0x2(%rax), %ecx
0000000000010621	sarl	$0x3, %ecx
0000000000010624	andl	$0xf, %ecx
0000000000010627	movb	%cl, %dl
0000000000010629	movq	-0x18(%rbp), %rax
000000000001062d	movb	%dl, 0x54e(%rax)
0000000000010633	movq	-0x20(%rbp), %rax
0000000000010637	movzbl	0x2(%rax), %ecx
000000000001063b	sarl	$0x2, %ecx
000000000001063e	andl	$0x1, %ecx
0000000000010641	movb	%cl, %dl
0000000000010643	movq	-0x18(%rbp), %rax
0000000000010647	movb	%dl, 0x54f(%rax)
000000000001064d	movq	-0x20(%rbp), %rax
0000000000010651	movzbl	0x2(%rax), %ecx
0000000000010655	sarl	$0x0, %ecx
0000000000010658	andl	$0x3, %ecx
000000000001065b	movb	%cl, %dl
000000000001065d	movq	-0x18(%rbp), %rax
0000000000010661	movb	%dl, 0x550(%rax)
0000000000010667	movq	-0x18(%rbp), %rax
000000000001066b	movb	0x54d(%rax), %dl
0000000000010671	movq	-0x10(%rbp), %rax
0000000000010675	movb	%dl, 0x26(%rax)
0000000000010678	movq	-0x18(%rbp), %rax
000000000001067c	movzbl	0x549(%rax), %ecx
0000000000010683	xorl	$-0x1, %ecx
0000000000010686	andl	$0x1, %ecx
0000000000010689	movb	%cl, %dl
000000000001068b	movq	-0x10(%rbp), %rax
000000000001068f	movb	%dl, 0x27(%rax)
0000000000010692	movq	-0x18(%rbp), %rax
0000000000010696	movzbl	0x54a(%rax), %ecx
000000000001069d	xorl	$-0x1, %ecx
00000000000106a0	andl	$0x1, %ecx
00000000000106a3	movb	%cl, %dl
00000000000106a5	movq	-0x10(%rbp), %rax
00000000000106a9	movb	%dl, 0x28(%rax)
00000000000106ac	movq	-0x18(%rbp), %rax
00000000000106b0	movzbl	0x54b(%rax), %ecx
00000000000106b7	xorl	$-0x1, %ecx
00000000000106ba	andl	$0x1, %ecx
00000000000106bd	movb	%cl, %dl
00000000000106bf	movq	-0x10(%rbp), %rax
00000000000106c3	movb	%dl, 0x29(%rax)
00000000000106c6	movq	-0x18(%rbp), %rax
00000000000106ca	movb	0x54f(%rax), %dl
00000000000106d0	movq	-0x10(%rbp), %rax
00000000000106d4	movb	%dl, 0x2a(%rax)
00000000000106d7	movq	-0x18(%rbp), %rax
00000000000106db	movb	0x54f(%rax), %dl
00000000000106e1	movq	-0x10(%rbp), %rax
00000000000106e5	movb	%dl, 0x2b(%rax)
00000000000106e8	movq	-0x18(%rbp), %rax
00000000000106ec	movzbl	0x54e(%rax), %ecx
00000000000106f3	xorl	$-0x1, %ecx
00000000000106f6	andl	$0xf, %ecx
00000000000106f9	movb	%cl, %dl
00000000000106fb	movq	-0x10(%rbp), %rax
00000000000106ff	movb	%dl, 0x2e(%rax)
0000000000010702	movl	$0x100000, -0x4(%rbp)
0000000000010709	movl	-0x4(%rbp), %eax
000000000001070c	addq	$0x20, %rsp
0000000000010710	popq	%rbp
0000000000010711	retq
0000000000010712	nopw	%cs:(%rax,%rax)
000000000001071c	nopl	(%rax)
_ZydisDecodeModRM:
0000000000010720	pushq	%rbp
0000000000010721	movq	%rsp, %rbp
0000000000010724	subq	$0x10, %rsp
0000000000010728	movb	%sil, %al
000000000001072b	movq	%rdi, -0x8(%rbp)
000000000001072f	movb	%al, -0x9(%rbp)
0000000000010732	cmpq	$0x0, -0x8(%rbp)
0000000000010737	setne	%al
000000000001073a	xorb	$-0x1, %al
000000000001073c	andb	$0x1, %al
000000000001073e	movzbl	%al, %esi
0000000000010741	movslq	%esi, %rdi
0000000000010744	cmpq	$0x0, %rdi
0000000000010748	je	0x1076d
000000000001074e	leaq	0x597df(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
0000000000010755	leaq	0x5917e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001075c	leaq	0x591b4(%rip), %rcx ## literal pool for: "instruction"
0000000000010763	movl	$0x2c3, %edx
0000000000010768	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001076d	jmp	0x10772
0000000000010772	movq	-0x8(%rbp), %rax
0000000000010776	movq	0x430(%rax), %rax
000000000001077d	andq	$0x1, %rax
0000000000010781	cmpq	$0x0, %rax
0000000000010785	setne	%cl
0000000000010788	xorb	$-0x1, %cl
000000000001078b	xorb	$-0x1, %cl
000000000001078e	andb	$0x1, %cl
0000000000010791	movzbl	%cl, %edx
0000000000010794	movslq	%edx, %rax
0000000000010797	cmpq	$0x0, %rax
000000000001079b	je	0x107c0
00000000000107a1	leaq	0x5978c(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
00000000000107a8	leaq	0x5912b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000107af	leaq	0x5978f(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000001)"
00000000000107b6	movl	$0x2c4, %edx
00000000000107bb	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000107c0	jmp	0x107c5
00000000000107c5	movq	-0x8(%rbp), %rax
00000000000107c9	movzbl	0x57b(%rax), %ecx
00000000000107d0	movq	-0x8(%rbp), %rax
00000000000107d4	movzbl	0x8(%rax), %edx
00000000000107d8	subl	$0x1, %edx
00000000000107db	cmpl	%edx, %ecx
00000000000107dd	sete	%sil
00000000000107e1	xorb	$-0x1, %sil
00000000000107e5	andb	$0x1, %sil
00000000000107e9	movzbl	%sil, %ecx
00000000000107ed	movslq	%ecx, %rax
00000000000107f0	cmpq	$0x0, %rax
00000000000107f4	je	0x10819
00000000000107fa	leaq	0x59733(%rip), %rdi ## literal pool for: "ZydisDecodeModRM"
0000000000010801	leaq	0x590d2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010808	leaq	0x59766(%rip), %rcx ## literal pool for: "instruction->raw.modrm.offset == instruction->length - 1"
000000000001080f	movl	$0x2c5, %edx
0000000000010814	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010819	jmp	0x1081e
000000000001081e	movq	-0x8(%rbp), %rax
0000000000010822	movq	0x430(%rax), %rcx
0000000000010829	orq	$0x1, %rcx
000000000001082d	movq	%rcx, 0x430(%rax)
0000000000010834	movzbl	-0x9(%rbp), %edx
0000000000010838	sarl	$0x6, %edx
000000000001083b	andl	$0x3, %edx
000000000001083e	movb	%dl, %sil
0000000000010841	movq	-0x8(%rbp), %rax
0000000000010845	movb	%sil, 0x578(%rax)
000000000001084c	movzbl	-0x9(%rbp), %edx
0000000000010850	sarl	$0x3, %edx
0000000000010853	andl	$0x7, %edx
0000000000010856	movb	%dl, %sil
0000000000010859	movq	-0x8(%rbp), %rax
000000000001085d	movb	%sil, 0x579(%rax)
0000000000010864	movzbl	-0x9(%rbp), %edx
0000000000010868	sarl	$0x0, %edx
000000000001086b	andl	$0x7, %edx
000000000001086e	movb	%dl, %sil
0000000000010871	movq	-0x8(%rbp), %rax
0000000000010875	movb	%sil, 0x57a(%rax)
000000000001087c	addq	$0x10, %rsp
0000000000010880	popq	%rbp
0000000000010881	retq
0000000000010882	nopw	%cs:(%rax,%rax)
000000000001088c	nopl	(%rax)
_ZydisDecodeSIB:
0000000000010890	pushq	%rbp
0000000000010891	movq	%rsp, %rbp
0000000000010894	subq	$0x10, %rsp
0000000000010898	movb	%sil, %al
000000000001089b	movq	%rdi, -0x8(%rbp)
000000000001089f	movb	%al, -0x9(%rbp)
00000000000108a2	cmpq	$0x0, -0x8(%rbp)
00000000000108a7	setne	%al
00000000000108aa	xorb	$-0x1, %al
00000000000108ac	andb	$0x1, %al
00000000000108ae	movzbl	%al, %esi
00000000000108b1	movslq	%esi, %rdi
00000000000108b4	cmpq	$0x0, %rdi
00000000000108b8	je	0x108dd
00000000000108be	leaq	0x59a8f(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
00000000000108c5	leaq	0x5900e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000108cc	leaq	0x59044(%rip), %rcx ## literal pool for: "instruction"
00000000000108d3	movl	$0x2d5, %edx
00000000000108d8	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000108dd	jmp	0x108e2
00000000000108e2	movq	-0x8(%rbp), %rax
00000000000108e6	movq	0x430(%rax), %rax
00000000000108ed	andq	$0x1, %rax
00000000000108f1	cmpq	$0x0, %rax
00000000000108f5	setne	%cl
00000000000108f8	xorb	$-0x1, %cl
00000000000108fb	andb	$0x1, %cl
00000000000108fe	movzbl	%cl, %edx
0000000000010901	movslq	%edx, %rax
0000000000010904	cmpq	$0x0, %rax
0000000000010908	je	0x1092d
000000000001090e	leaq	0x59a3f(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
0000000000010915	leaq	0x58fbe(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001091c	leaq	0x59a40(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000010923	movl	$0x2d6, %edx
0000000000010928	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001092d	jmp	0x10932
0000000000010932	movq	-0x8(%rbp), %rax
0000000000010936	movzbl	0x57a(%rax), %ecx
000000000001093d	cmpl	$0x4, %ecx
0000000000010940	sete	%dl
0000000000010943	xorb	$-0x1, %dl
0000000000010946	andb	$0x1, %dl
0000000000010949	movzbl	%dl, %ecx
000000000001094c	movslq	%ecx, %rax
000000000001094f	cmpq	$0x0, %rax
0000000000010953	je	0x10978
0000000000010959	leaq	0x599f4(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
0000000000010960	leaq	0x58f73(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010967	leaq	0x59a22(%rip), %rcx ## literal pool for: "instruction->raw.modrm.rm == 4"
000000000001096e	movl	$0x2d7, %edx
0000000000010973	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010978	jmp	0x1097d
000000000001097d	movq	-0x8(%rbp), %rax
0000000000010981	movq	0x430(%rax), %rax
0000000000010988	andq	$0x2, %rax
000000000001098c	cmpq	$0x0, %rax
0000000000010990	setne	%cl
0000000000010993	xorb	$-0x1, %cl
0000000000010996	xorb	$-0x1, %cl
0000000000010999	andb	$0x1, %cl
000000000001099c	movzbl	%cl, %edx
000000000001099f	movslq	%edx, %rax
00000000000109a2	cmpq	$0x0, %rax
00000000000109a6	je	0x109cb
00000000000109ac	leaq	0x599a1(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
00000000000109b3	leaq	0x58f20(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000109ba	leaq	0x599ee(%rip), %rcx ## literal pool for: "!(instruction->attributes & 0x0000000000000002)"
00000000000109c1	movl	$0x2d8, %edx
00000000000109c6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000109cb	jmp	0x109d0
00000000000109d0	movq	-0x8(%rbp), %rax
00000000000109d4	movzbl	0x57f(%rax), %ecx
00000000000109db	movq	-0x8(%rbp), %rax
00000000000109df	movzbl	0x8(%rax), %edx
00000000000109e3	subl	$0x1, %edx
00000000000109e6	cmpl	%edx, %ecx
00000000000109e8	sete	%sil
00000000000109ec	xorb	$-0x1, %sil
00000000000109f0	andb	$0x1, %sil
00000000000109f4	movzbl	%sil, %ecx
00000000000109f8	movslq	%ecx, %rax
00000000000109fb	cmpq	$0x0, %rax
00000000000109ff	je	0x10a24
0000000000010a05	leaq	0x59948(%rip), %rdi ## literal pool for: "ZydisDecodeSIB"
0000000000010a0c	leaq	0x58ec7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010a13	leaq	0x599c5(%rip), %rcx ## literal pool for: "instruction->raw.sib.offset == instruction->length - 1"
0000000000010a1a	movl	$0x2d9, %edx
0000000000010a1f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010a24	jmp	0x10a29
0000000000010a29	movq	-0x8(%rbp), %rax
0000000000010a2d	movq	0x430(%rax), %rcx
0000000000010a34	orq	$0x2, %rcx
0000000000010a38	movq	%rcx, 0x430(%rax)
0000000000010a3f	movzbl	-0x9(%rbp), %edx
0000000000010a43	sarl	$0x6, %edx
0000000000010a46	andl	$0x3, %edx
0000000000010a49	movb	%dl, %sil
0000000000010a4c	movq	-0x8(%rbp), %rax
0000000000010a50	movb	%sil, 0x57c(%rax)
0000000000010a57	movzbl	-0x9(%rbp), %edx
0000000000010a5b	sarl	$0x3, %edx
0000000000010a5e	andl	$0x7, %edx
0000000000010a61	movb	%dl, %sil
0000000000010a64	movq	-0x8(%rbp), %rax
0000000000010a68	movb	%sil, 0x57d(%rax)
0000000000010a6f	movzbl	-0x9(%rbp), %edx
0000000000010a73	sarl	$0x0, %edx
0000000000010a76	andl	$0x7, %edx
0000000000010a79	movb	%dl, %sil
0000000000010a7c	movq	-0x8(%rbp), %rax
0000000000010a80	movb	%sil, 0x57e(%rax)
0000000000010a87	addq	$0x10, %rsp
0000000000010a8b	popq	%rbp
0000000000010a8c	retq
0000000000010a8d	nopl	(%rax)
_ZydisReadDisplacement:
0000000000010a90	pushq	%rbp
0000000000010a91	movq	%rsp, %rbp
0000000000010a94	subq	$0x50, %rsp
0000000000010a98	movb	%dl, %al
0000000000010a9a	movq	%rdi, -0x10(%rbp)
0000000000010a9e	movq	%rsi, -0x18(%rbp)
0000000000010aa2	movb	%al, -0x19(%rbp)
0000000000010aa5	cmpq	$0x0, -0x10(%rbp)
0000000000010aaa	setne	%al
0000000000010aad	xorb	$-0x1, %al
0000000000010aaf	andb	$0x1, %al
0000000000010ab1	movzbl	%al, %edx
0000000000010ab4	movslq	%edx, %rsi
0000000000010ab7	cmpq	$0x0, %rsi
0000000000010abb	je	0x10ae0
0000000000010ac1	leaq	0x5994e(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010ac8	leaq	0x58e0b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010acf	leaq	0x58e39(%rip), %rcx ## literal pool for: "context"
0000000000010ad6	movl	$0x2ef, %edx
0000000000010adb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010ae0	jmp	0x10ae5
0000000000010ae5	cmpq	$0x0, -0x18(%rbp)
0000000000010aea	setne	%al
0000000000010aed	xorb	$-0x1, %al
0000000000010aef	andb	$0x1, %al
0000000000010af1	movzbl	%al, %ecx
0000000000010af4	movslq	%ecx, %rdx
0000000000010af7	cmpq	$0x0, %rdx
0000000000010afb	je	0x10b20
0000000000010b01	leaq	0x5990e(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010b08	leaq	0x58dcb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010b0f	leaq	0x58e01(%rip), %rcx ## literal pool for: "instruction"
0000000000010b16	movl	$0x2f0, %edx
0000000000010b1b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010b20	jmp	0x10b25
0000000000010b25	movq	-0x18(%rbp), %rax
0000000000010b29	movzbl	0x588(%rax), %ecx
0000000000010b30	cmpl	$0x0, %ecx
0000000000010b33	sete	%dl
0000000000010b36	xorb	$-0x1, %dl
0000000000010b39	andb	$0x1, %dl
0000000000010b3c	movzbl	%dl, %ecx
0000000000010b3f	movslq	%ecx, %rax
0000000000010b42	cmpq	$0x0, %rax
0000000000010b46	je	0x10b6b
0000000000010b4c	leaq	0x598c3(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010b53	leaq	0x58d80(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010b5a	leaq	0x598cb(%rip), %rcx ## literal pool for: "instruction->raw.disp.size == 0"
0000000000010b61	movl	$0x2f1, %edx
0000000000010b66	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010b6b	jmp	0x10b70
0000000000010b70	movb	-0x19(%rbp), %al
0000000000010b73	movq	-0x18(%rbp), %rcx
0000000000010b77	movb	%al, 0x588(%rcx)
0000000000010b7d	movq	-0x18(%rbp), %rcx
0000000000010b81	movb	0x8(%rcx), %al
0000000000010b84	movb	%al, 0x589(%rcx)
0000000000010b8a	movzbl	-0x19(%rbp), %edx
0000000000010b8e	movl	%edx, %esi
0000000000010b90	subl	$0x8, %esi
0000000000010b93	movl	%edx, -0x40(%rbp)
0000000000010b96	movl	%esi, -0x44(%rbp)
0000000000010b99	je	0x10be0
0000000000010b9f	jmp	0x10ba4
0000000000010ba4	movl	-0x40(%rbp), %eax
0000000000010ba7	subl	$0x10, %eax
0000000000010baa	movl	%eax, -0x48(%rbp)
0000000000010bad	je	0x10c2f
0000000000010bb3	jmp	0x10bb8
0000000000010bb8	movl	-0x40(%rbp), %eax
0000000000010bbb	subl	$0x20, %eax
0000000000010bbe	movl	%eax, -0x4c(%rbp)
0000000000010bc1	je	0x10c86
0000000000010bc7	jmp	0x10bcc
0000000000010bcc	movl	-0x40(%rbp), %eax
0000000000010bcf	subl	$0x40, %eax
0000000000010bd2	movl	%eax, -0x50(%rbp)
0000000000010bd5	je	0x10cdc
0000000000010bdb	jmp	0x10d32
0000000000010be0	jmp	0x10be5
0000000000010be5	movq	-0x10(%rbp), %rdi
0000000000010be9	movq	-0x18(%rbp), %rsi
0000000000010bed	leaq	-0x1a(%rbp), %rdx
0000000000010bf1	callq	_ZydisInputNext
0000000000010bf6	movl	%eax, -0x20(%rbp)
0000000000010bf9	movl	-0x20(%rbp), %eax
0000000000010bfc	andl	$0x80000000, %eax
0000000000010c01	cmpl	$0x0, %eax
0000000000010c04	je	0x10c15
0000000000010c0a	movl	-0x20(%rbp), %eax
0000000000010c0d	movl	%eax, -0x4(%rbp)
0000000000010c10	jmp	0x10d58
0000000000010c15	jmp	0x10c1a
0000000000010c1a	movsbq	-0x1a(%rbp), %rax
0000000000010c1f	movq	-0x18(%rbp), %rcx
0000000000010c23	movq	%rax, 0x580(%rcx)
0000000000010c2a	jmp	0x10d51
0000000000010c2f	jmp	0x10c34
0000000000010c34	movq	-0x10(%rbp), %rdi
0000000000010c38	movq	-0x18(%rbp), %rsi
0000000000010c3c	leaq	-0x22(%rbp), %rax
0000000000010c40	movq	%rax, %rdx
0000000000010c43	movl	$0x2, %ecx
0000000000010c48	callq	_ZydisInputNextBytes
0000000000010c4d	movl	%eax, -0x28(%rbp)
0000000000010c50	movl	-0x28(%rbp), %eax
0000000000010c53	andl	$0x80000000, %eax
0000000000010c58	cmpl	$0x0, %eax
0000000000010c5b	je	0x10c6c
0000000000010c61	movl	-0x28(%rbp), %eax
0000000000010c64	movl	%eax, -0x4(%rbp)
0000000000010c67	jmp	0x10d58
0000000000010c6c	jmp	0x10c71
0000000000010c71	movswq	-0x22(%rbp), %rax
0000000000010c76	movq	-0x18(%rbp), %rcx
0000000000010c7a	movq	%rax, 0x580(%rcx)
0000000000010c81	jmp	0x10d51
0000000000010c86	jmp	0x10c8b
0000000000010c8b	movq	-0x10(%rbp), %rdi
0000000000010c8f	movq	-0x18(%rbp), %rsi
0000000000010c93	leaq	-0x2c(%rbp), %rax
0000000000010c97	movq	%rax, %rdx
0000000000010c9a	movl	$0x4, %ecx
0000000000010c9f	callq	_ZydisInputNextBytes
0000000000010ca4	movl	%eax, -0x30(%rbp)
0000000000010ca7	movl	-0x30(%rbp), %eax
0000000000010caa	andl	$0x80000000, %eax
0000000000010caf	cmpl	$0x0, %eax
0000000000010cb2	je	0x10cc3
0000000000010cb8	movl	-0x30(%rbp), %eax
0000000000010cbb	movl	%eax, -0x4(%rbp)
0000000000010cbe	jmp	0x10d58
0000000000010cc3	jmp	0x10cc8
0000000000010cc8	movslq	-0x2c(%rbp), %rax
0000000000010ccc	movq	-0x18(%rbp), %rcx
0000000000010cd0	movq	%rax, 0x580(%rcx)
0000000000010cd7	jmp	0x10d51
0000000000010cdc	jmp	0x10ce1
0000000000010ce1	movq	-0x10(%rbp), %rdi
0000000000010ce5	movq	-0x18(%rbp), %rsi
0000000000010ce9	leaq	-0x38(%rbp), %rax
0000000000010ced	movq	%rax, %rdx
0000000000010cf0	movl	$0x8, %ecx
0000000000010cf5	callq	_ZydisInputNextBytes
0000000000010cfa	movl	%eax, -0x3c(%rbp)
0000000000010cfd	movl	-0x3c(%rbp), %eax
0000000000010d00	andl	$0x80000000, %eax
0000000000010d05	cmpl	$0x0, %eax
0000000000010d08	je	0x10d19
0000000000010d0e	movl	-0x3c(%rbp), %eax
0000000000010d11	movl	%eax, -0x4(%rbp)
0000000000010d14	jmp	0x10d58
0000000000010d19	jmp	0x10d1e
0000000000010d1e	movq	-0x38(%rbp), %rax
0000000000010d22	movq	-0x18(%rbp), %rcx
0000000000010d26	movq	%rax, 0x580(%rcx)
0000000000010d2d	jmp	0x10d51
0000000000010d32	leaq	0x596dd(%rip), %rdi ## literal pool for: "ZydisReadDisplacement"
0000000000010d39	leaq	0x58b9a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010d40	leaq	0x5a87d(%rip), %rcx ## literal pool for: "0"
0000000000010d47	movl	$0x315, %edx
0000000000010d4c	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010d51	movl	$0x100000, -0x4(%rbp)
0000000000010d58	movl	-0x4(%rbp), %eax
0000000000010d5b	addq	$0x50, %rsp
0000000000010d5f	popq	%rbp
0000000000010d60	retq
0000000000010d61	nopw	%cs:(%rax,%rax)
0000000000010d6b	nopl	(%rax,%rax)
_ZydisReadImmediate:
0000000000010d70	pushq	%rbp
0000000000010d71	movq	%rsp, %rbp
0000000000010d74	pushq	%rbx
0000000000010d75	subq	$0x68, %rsp
0000000000010d79	movb	%r9b, %al
0000000000010d7c	movb	%r8b, %r10b
0000000000010d7f	movb	%cl, %r11b
0000000000010d82	movb	%dl, %bl
0000000000010d84	movq	%rdi, -0x18(%rbp)
0000000000010d88	movq	%rsi, -0x20(%rbp)
0000000000010d8c	movb	%bl, -0x21(%rbp)
0000000000010d8f	movb	%r11b, -0x22(%rbp)
0000000000010d93	movb	%r10b, -0x23(%rbp)
0000000000010d97	movb	%al, -0x24(%rbp)
0000000000010d9a	cmpq	$0x0, -0x18(%rbp)
0000000000010d9f	setne	%al
0000000000010da2	xorb	$-0x1, %al
0000000000010da4	andb	$0x1, %al
0000000000010da6	movzbl	%al, %ecx
0000000000010da9	movslq	%ecx, %rsi
0000000000010dac	cmpq	$0x0, %rsi
0000000000010db0	je	0x10dd5
0000000000010db6	leaq	0x5968f(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010dbd	leaq	0x58b16(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010dc4	leaq	0x58b44(%rip), %rcx ## literal pool for: "context"
0000000000010dcb	movl	$0x32d, %edx
0000000000010dd0	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010dd5	jmp	0x10dda
0000000000010dda	cmpq	$0x0, -0x20(%rbp)
0000000000010ddf	setne	%al
0000000000010de2	xorb	$-0x1, %al
0000000000010de4	andb	$0x1, %al
0000000000010de6	movzbl	%al, %ecx
0000000000010de9	movslq	%ecx, %rdx
0000000000010dec	cmpq	$0x0, %rdx
0000000000010df0	je	0x10e15
0000000000010df6	leaq	0x5964f(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010dfd	leaq	0x58ad6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010e04	leaq	0x58b0c(%rip), %rcx ## literal pool for: "instruction"
0000000000010e0b	movl	$0x32e, %edx
0000000000010e10	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010e15	jmp	0x10e1a
0000000000010e1a	movzbl	-0x21(%rbp), %eax
0000000000010e1e	cmpl	$0x0, %eax
0000000000010e21	movb	$0x1, %cl
0000000000010e23	movb	%cl, -0x4d(%rbp)
0000000000010e26	je	0x10e39
0000000000010e2c	movzbl	-0x21(%rbp), %eax
0000000000010e30	cmpl	$0x1, %eax
0000000000010e33	sete	%cl
0000000000010e36	movb	%cl, -0x4d(%rbp)
0000000000010e39	movb	-0x4d(%rbp), %al
0000000000010e3c	xorb	$-0x1, %al
0000000000010e3e	andb	$0x1, %al
0000000000010e40	movzbl	%al, %ecx
0000000000010e43	movslq	%ecx, %rdx
0000000000010e46	cmpq	$0x0, %rdx
0000000000010e4a	je	0x10e6f
0000000000010e50	leaq	0x595f5(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010e57	leaq	0x58a7c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010e5e	leaq	0x595fa(%rip), %rcx ## literal pool for: "(id == 0) || (id == 1)"
0000000000010e65	movl	$0x32f, %edx
0000000000010e6a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010e6f	jmp	0x10e74
0000000000010e74	movzbl	-0x23(%rbp), %eax
0000000000010e78	cmpl	$0x0, %eax
0000000000010e7b	movb	$0x1, %cl
0000000000010e7d	movb	%cl, -0x4e(%rbp)
0000000000010e80	jne	0x10e92
0000000000010e86	cmpb	$0x0, -0x24(%rbp)
0000000000010e8a	setne	%al
0000000000010e8d	xorb	$-0x1, %al
0000000000010e8f	movb	%al, -0x4e(%rbp)
0000000000010e92	movb	-0x4e(%rbp), %al
0000000000010e95	xorb	$-0x1, %al
0000000000010e97	andb	$0x1, %al
0000000000010e99	movzbl	%al, %ecx
0000000000010e9c	movslq	%ecx, %rdx
0000000000010e9f	cmpq	$0x0, %rdx
0000000000010ea3	je	0x10ec8
0000000000010ea9	leaq	0x5959c(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010eb0	leaq	0x58a23(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010eb7	leaq	0x595b8(%rip), %rcx ## literal pool for: "is_signed || !is_relative"
0000000000010ebe	movl	$0x330, %edx
0000000000010ec3	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010ec8	jmp	0x10ecd
0000000000010ecd	movq	-0x20(%rbp), %rax
0000000000010ed1	addq	$0x4c8, %rax
0000000000010ed7	addq	$0xc8, %rax
0000000000010edd	movzbl	-0x21(%rbp), %ecx
0000000000010ee1	movl	%ecx, %edx
0000000000010ee3	imulq	$0x18, %rdx, %rdx
0000000000010ee7	addq	%rdx, %rax
0000000000010eea	movzbl	0x10(%rax), %ecx
0000000000010eee	cmpl	$0x0, %ecx
0000000000010ef1	sete	%sil
0000000000010ef5	xorb	$-0x1, %sil
0000000000010ef9	andb	$0x1, %sil
0000000000010efd	movzbl	%sil, %ecx
0000000000010f01	movslq	%ecx, %rax
0000000000010f04	cmpq	$0x0, %rax
0000000000010f08	je	0x10f2d
0000000000010f0e	leaq	0x59537(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
0000000000010f15	leaq	0x589be(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000010f1c	leaq	0x5956d(%rip), %rcx ## literal pool for: "instruction->raw.imm[id].size == 0"
0000000000010f23	movl	$0x331, %edx
0000000000010f28	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000010f2d	jmp	0x10f32
0000000000010f32	movb	-0x22(%rbp), %al
0000000000010f35	movq	-0x20(%rbp), %rcx
0000000000010f39	movzbl	-0x21(%rbp), %edx
0000000000010f3d	movl	%edx, %esi
0000000000010f3f	leaq	(%rsi,%rsi,2), %rsi
0000000000010f43	movb	%al, 0x5a0(%rcx,%rsi,8)
0000000000010f4a	movq	-0x20(%rbp), %rcx
0000000000010f4e	movb	0x8(%rcx), %al
0000000000010f51	movzbl	-0x21(%rbp), %edx
0000000000010f55	movl	%edx, %esi
0000000000010f57	leaq	(%rsi,%rsi,2), %rsi
0000000000010f5b	movb	%al, 0x5a1(%rcx,%rsi,8)
0000000000010f62	movb	-0x23(%rbp), %al
0000000000010f65	movq	-0x20(%rbp), %rcx
0000000000010f69	movzbl	-0x21(%rbp), %edx
0000000000010f6d	movl	%edx, %esi
0000000000010f6f	leaq	(%rsi,%rsi,2), %rsi
0000000000010f73	movb	%al, 0x590(%rcx,%rsi,8)
0000000000010f7a	movb	-0x24(%rbp), %al
0000000000010f7d	movq	-0x20(%rbp), %rcx
0000000000010f81	movzbl	-0x21(%rbp), %edx
0000000000010f85	movl	%edx, %esi
0000000000010f87	leaq	(%rsi,%rsi,2), %rsi
0000000000010f8b	movb	%al, 0x591(%rcx,%rsi,8)
0000000000010f92	movzbl	-0x22(%rbp), %edx
0000000000010f96	movl	%edx, %edi
0000000000010f98	subl	$0x8, %edi
0000000000010f9b	movl	%edx, -0x54(%rbp)
0000000000010f9e	movl	%edi, -0x58(%rbp)
0000000000010fa1	je	0x10fe8
0000000000010fa7	jmp	0x10fac
0000000000010fac	movl	-0x54(%rbp), %eax
0000000000010faf	subl	$0x10, %eax
0000000000010fb2	movl	%eax, -0x5c(%rbp)
0000000000010fb5	je	0x11087
0000000000010fbb	jmp	0x10fc0
0000000000010fc0	movl	-0x54(%rbp), %eax
0000000000010fc3	subl	$0x20, %eax
0000000000010fc6	movl	%eax, -0x60(%rbp)
0000000000010fc9	je	0x1112e
0000000000010fcf	jmp	0x10fd4
0000000000010fd4	movl	-0x54(%rbp), %eax
0000000000010fd7	subl	$0x40, %eax
0000000000010fda	movl	%eax, -0x64(%rbp)
0000000000010fdd	je	0x111d3
0000000000010fe3	jmp	0x11277
0000000000010fe8	jmp	0x10fed
0000000000010fed	movq	-0x18(%rbp), %rdi
0000000000010ff1	movq	-0x20(%rbp), %rsi
0000000000010ff5	leaq	-0x25(%rbp), %rdx
0000000000010ff9	callq	_ZydisInputNext
0000000000010ffe	movl	%eax, -0x2c(%rbp)
0000000000011001	movl	-0x2c(%rbp), %eax
0000000000011004	andl	$0x80000000, %eax
0000000000011009	cmpl	$0x0, %eax
000000000001100c	je	0x1101d
0000000000011012	movl	-0x2c(%rbp), %eax
0000000000011015	movl	%eax, -0xc(%rbp)
0000000000011018	jmp	0x1129d
000000000001101d	jmp	0x11022
0000000000011022	cmpb	$0x0, -0x23(%rbp)
0000000000011026	je	0x11059
000000000001102c	movsbq	-0x25(%rbp), %rax
0000000000011031	movq	-0x20(%rbp), %rcx
0000000000011035	addq	$0x4c8, %rcx
000000000001103c	addq	$0xc8, %rcx
0000000000011043	movzbl	-0x21(%rbp), %edx
0000000000011047	movl	%edx, %esi
0000000000011049	imulq	$0x18, %rsi, %rsi
000000000001104d	addq	%rsi, %rcx
0000000000011050	movq	%rax, 0x8(%rcx)
0000000000011054	jmp	0x11082
0000000000011059	movzbl	-0x25(%rbp), %eax
000000000001105d	movl	%eax, %ecx
000000000001105f	movq	-0x20(%rbp), %rdx
0000000000011063	addq	$0x4c8, %rdx
000000000001106a	addq	$0xc8, %rdx
0000000000011071	movzbl	-0x21(%rbp), %eax
0000000000011075	movl	%eax, %esi
0000000000011077	imulq	$0x18, %rsi, %rsi
000000000001107b	addq	%rsi, %rdx
000000000001107e	movq	%rcx, 0x8(%rdx)
0000000000011082	jmp	0x11296
0000000000011087	jmp	0x1108c
000000000001108c	movq	-0x18(%rbp), %rdi
0000000000011090	movq	-0x20(%rbp), %rsi
0000000000011094	leaq	-0x2e(%rbp), %rax
0000000000011098	movq	%rax, %rdx
000000000001109b	movl	$0x2, %ecx
00000000000110a0	callq	_ZydisInputNextBytes
00000000000110a5	movl	%eax, -0x34(%rbp)
00000000000110a8	movl	-0x34(%rbp), %eax
00000000000110ab	andl	$0x80000000, %eax
00000000000110b0	cmpl	$0x0, %eax
00000000000110b3	je	0x110c4
00000000000110b9	movl	-0x34(%rbp), %eax
00000000000110bc	movl	%eax, -0xc(%rbp)
00000000000110bf	jmp	0x1129d
00000000000110c4	jmp	0x110c9
00000000000110c9	cmpb	$0x0, -0x23(%rbp)
00000000000110cd	je	0x11100
00000000000110d3	movswq	-0x2e(%rbp), %rax
00000000000110d8	movq	-0x20(%rbp), %rcx
00000000000110dc	addq	$0x4c8, %rcx
00000000000110e3	addq	$0xc8, %rcx
00000000000110ea	movzbl	-0x21(%rbp), %edx
00000000000110ee	movl	%edx, %esi
00000000000110f0	imulq	$0x18, %rsi, %rsi
00000000000110f4	addq	%rsi, %rcx
00000000000110f7	movq	%rax, 0x8(%rcx)
00000000000110fb	jmp	0x11129
0000000000011100	movzwl	-0x2e(%rbp), %eax
0000000000011104	movl	%eax, %ecx
0000000000011106	movq	-0x20(%rbp), %rdx
000000000001110a	addq	$0x4c8, %rdx
0000000000011111	addq	$0xc8, %rdx
0000000000011118	movzbl	-0x21(%rbp), %eax
000000000001111c	movl	%eax, %esi
000000000001111e	imulq	$0x18, %rsi, %rsi
0000000000011122	addq	%rsi, %rdx
0000000000011125	movq	%rcx, 0x8(%rdx)
0000000000011129	jmp	0x11296
000000000001112e	jmp	0x11133
0000000000011133	movq	-0x18(%rbp), %rdi
0000000000011137	movq	-0x20(%rbp), %rsi
000000000001113b	leaq	-0x38(%rbp), %rax
000000000001113f	movq	%rax, %rdx
0000000000011142	movl	$0x4, %ecx
0000000000011147	callq	_ZydisInputNextBytes
000000000001114c	movl	%eax, -0x3c(%rbp)
000000000001114f	movl	-0x3c(%rbp), %eax
0000000000011152	andl	$0x80000000, %eax
0000000000011157	cmpl	$0x0, %eax
000000000001115a	je	0x1116b
0000000000011160	movl	-0x3c(%rbp), %eax
0000000000011163	movl	%eax, -0xc(%rbp)
0000000000011166	jmp	0x1129d
000000000001116b	jmp	0x11170
0000000000011170	cmpb	$0x0, -0x23(%rbp)
0000000000011174	je	0x111a6
000000000001117a	movslq	-0x38(%rbp), %rax
000000000001117e	movq	-0x20(%rbp), %rcx
0000000000011182	addq	$0x4c8, %rcx
0000000000011189	addq	$0xc8, %rcx
0000000000011190	movzbl	-0x21(%rbp), %edx
0000000000011194	movl	%edx, %esi
0000000000011196	imulq	$0x18, %rsi, %rsi
000000000001119a	addq	%rsi, %rcx
000000000001119d	movq	%rax, 0x8(%rcx)
00000000000111a1	jmp	0x111ce
00000000000111a6	movl	-0x38(%rbp), %eax
00000000000111a9	movl	%eax, %ecx
00000000000111ab	movq	-0x20(%rbp), %rdx
00000000000111af	addq	$0x4c8, %rdx
00000000000111b6	addq	$0xc8, %rdx
00000000000111bd	movzbl	-0x21(%rbp), %eax
00000000000111c1	movl	%eax, %esi
00000000000111c3	imulq	$0x18, %rsi, %rsi
00000000000111c7	addq	%rsi, %rdx
00000000000111ca	movq	%rcx, 0x8(%rdx)
00000000000111ce	jmp	0x11296
00000000000111d3	jmp	0x111d8
00000000000111d8	movq	-0x18(%rbp), %rdi
00000000000111dc	movq	-0x20(%rbp), %rsi
00000000000111e0	leaq	-0x48(%rbp), %rax
00000000000111e4	movq	%rax, %rdx
00000000000111e7	movl	$0x8, %ecx
00000000000111ec	callq	_ZydisInputNextBytes
00000000000111f1	movl	%eax, -0x4c(%rbp)
00000000000111f4	movl	-0x4c(%rbp), %eax
00000000000111f7	andl	$0x80000000, %eax
00000000000111fc	cmpl	$0x0, %eax
00000000000111ff	je	0x11210
0000000000011205	movl	-0x4c(%rbp), %eax
0000000000011208	movl	%eax, -0xc(%rbp)
000000000001120b	jmp	0x1129d
0000000000011210	jmp	0x11215
0000000000011215	cmpb	$0x0, -0x23(%rbp)
0000000000011219	je	0x1124b
000000000001121f	movq	-0x48(%rbp), %rax
0000000000011223	movq	-0x20(%rbp), %rcx
0000000000011227	addq	$0x4c8, %rcx
000000000001122e	addq	$0xc8, %rcx
0000000000011235	movzbl	-0x21(%rbp), %edx
0000000000011239	movl	%edx, %esi
000000000001123b	imulq	$0x18, %rsi, %rsi
000000000001123f	addq	%rsi, %rcx
0000000000011242	movq	%rax, 0x8(%rcx)
0000000000011246	jmp	0x11272
000000000001124b	movq	-0x48(%rbp), %rax
000000000001124f	movq	-0x20(%rbp), %rcx
0000000000011253	addq	$0x4c8, %rcx
000000000001125a	addq	$0xc8, %rcx
0000000000011261	movzbl	-0x21(%rbp), %edx
0000000000011265	movl	%edx, %esi
0000000000011267	imulq	$0x18, %rsi, %rsi
000000000001126b	addq	%rsi, %rcx
000000000001126e	movq	%rax, 0x8(%rcx)
0000000000011272	jmp	0x11296
0000000000011277	leaq	0x591ce(%rip), %rdi ## literal pool for: "ZydisReadImmediate"
000000000001127e	leaq	0x58655(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011285	leaq	0x5a338(%rip), %rcx ## literal pool for: "0"
000000000001128c	movl	$0x36e, %edx
0000000000011291	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011296	movl	$0x100000, -0xc(%rbp)
000000000001129d	movl	-0xc(%rbp), %eax
00000000000112a0	addq	$0x68, %rsp
00000000000112a4	popq	%rbx
00000000000112a5	popq	%rbp
00000000000112a6	retq
00000000000112a7	nopw	(%rax,%rax)
_ZydisDecodeOperandImplicitRegister:
00000000000112b0	pushq	%rbp
00000000000112b1	movq	%rsp, %rbp
00000000000112b4	subq	$0x40, %rsp
00000000000112b8	movq	%rdi, -0x8(%rbp)
00000000000112bc	movq	%rsi, -0x10(%rbp)
00000000000112c0	movq	%rdx, -0x18(%rbp)
00000000000112c4	movq	%rcx, -0x20(%rbp)
00000000000112c8	cmpq	$0x0, -0x8(%rbp)
00000000000112cd	setne	%al
00000000000112d0	xorb	$-0x1, %al
00000000000112d2	andb	$0x1, %al
00000000000112d4	movzbl	%al, %r8d
00000000000112d8	movslq	%r8d, %rcx
00000000000112db	cmpq	$0x0, %rcx
00000000000112df	je	0x11304
00000000000112e5	leaq	0x59d26(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
00000000000112ec	leaq	0x585e7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000112f3	leaq	0x58615(%rip), %rcx ## literal pool for: "context"
00000000000112fa	movl	$0x64d, %edx
00000000000112ff	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011304	jmp	0x11309
0000000000011309	cmpq	$0x0, -0x10(%rbp)
000000000001130e	setne	%al
0000000000011311	xorb	$-0x1, %al
0000000000011313	andb	$0x1, %al
0000000000011315	movzbl	%al, %ecx
0000000000011318	movslq	%ecx, %rdx
000000000001131b	cmpq	$0x0, %rdx
000000000001131f	je	0x11344
0000000000011325	leaq	0x59ce6(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
000000000001132c	leaq	0x585a7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011333	leaq	0x585dd(%rip), %rcx ## literal pool for: "instruction"
000000000001133a	movl	$0x64e, %edx
000000000001133f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011344	jmp	0x11349
0000000000011349	cmpq	$0x0, -0x18(%rbp)
000000000001134e	setne	%al
0000000000011351	xorb	$-0x1, %al
0000000000011353	andb	$0x1, %al
0000000000011355	movzbl	%al, %ecx
0000000000011358	movslq	%ecx, %rdx
000000000001135b	cmpq	$0x0, %rdx
000000000001135f	je	0x11384
0000000000011365	leaq	0x59ca6(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
000000000001136c	leaq	0x58567(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011373	leaq	0x59cbb(%rip), %rcx ## literal pool for: "operand"
000000000001137a	movl	$0x64f, %edx
000000000001137f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011384	jmp	0x11389
0000000000011389	cmpq	$0x0, -0x20(%rbp)
000000000001138e	setne	%al
0000000000011391	xorb	$-0x1, %al
0000000000011393	andb	$0x1, %al
0000000000011395	movzbl	%al, %ecx
0000000000011398	movslq	%ecx, %rdx
000000000001139b	cmpq	$0x0, %rdx
000000000001139f	je	0x113c4
00000000000113a5	leaq	0x59c66(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
00000000000113ac	leaq	0x58527(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000113b3	leaq	0x58d80(%rip), %rcx ## literal pool for: "definition"
00000000000113ba	movl	$0x650, %edx
00000000000113bf	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000113c4	jmp	0x113c9
00000000000113c9	movq	-0x18(%rbp), %rax
00000000000113cd	movl	$0x1, 0x4(%rax)
00000000000113d4	movq	-0x20(%rbp), %rax
00000000000113d8	movzbl	0x9(%rax), %ecx
00000000000113dc	movl	%ecx, %eax
00000000000113de	movl	%eax, %ecx
00000000000113e0	andl	$0x7, %ecx
00000000000113e3	movl	%ecx, %eax
00000000000113e5	movb	%al, %dl
00000000000113e7	subb	$0x6, %dl
00000000000113ea	movq	%rax, -0x28(%rbp)
00000000000113ee	movb	%dl, -0x29(%rbp)
00000000000113f1	ja	0x115f2
00000000000113f7	leaq	0x21a(%rip), %rax
00000000000113fe	movq	-0x28(%rbp), %rcx
0000000000011402	movslq	(%rax,%rcx,4), %rdx
0000000000011406	addq	%rax, %rdx
0000000000011409	jmpq	*%rdx
000000000001140b	movq	-0x20(%rbp), %rax
000000000001140f	movw	0xa(%rax), %cx
0000000000011413	andw	$0x1ff, %cx
0000000000011418	movzwl	%cx, %edx
000000000001141b	movq	-0x18(%rbp), %rax
000000000001141f	movl	%edx, 0x20(%rax)
0000000000011422	jmp	0x11611
0000000000011427	movq	-0x8(%rbp), %rax
000000000001142b	movzbl	0x24(%rax), %ecx
000000000001142f	movl	%ecx, %eax
0000000000011431	leaq	_ZydisDecodeOperandImplicitRegister.lookup(%rip), %rdx
0000000000011438	movl	(%rdx,%rax,4), %edi
000000000001143b	movq	-0x20(%rbp), %rax
000000000001143f	movb	0xa(%rax), %sil
0000000000011443	andb	$0x3f, %sil
0000000000011447	movzbl	%sil, %esi
000000000001144b	callq	_ZydisRegisterEncode
0000000000011450	movq	-0x18(%rbp), %rdx
0000000000011454	movl	%eax, 0x20(%rdx)
0000000000011457	jmp	0x11611
000000000001145c	movq	-0x10(%rbp), %rax
0000000000011460	movzbl	0x17(%rax), %ecx
0000000000011464	cmpl	$0x10, %ecx
0000000000011467	jne	0x1147a
000000000001146d	movl	$0x2, %eax
0000000000011472	movl	%eax, -0x30(%rbp)
0000000000011475	jmp	0x11495
000000000001147a	movq	-0x10(%rbp), %rax
000000000001147e	movzbl	0x17(%rax), %ecx
0000000000011482	cmpl	$0x20, %ecx
0000000000011485	movl	$0x3, %ecx
000000000001148a	movl	$0x4, %edx
000000000001148f	cmovel	%ecx, %edx
0000000000011492	movl	%edx, -0x30(%rbp)
0000000000011495	movl	-0x30(%rbp), %eax
0000000000011498	movq	-0x20(%rbp), %rcx
000000000001149c	movb	0xa(%rcx), %dl
000000000001149f	andb	$0x3f, %dl
00000000000114a2	movl	%eax, %edi
00000000000114a4	movzbl	%dl, %esi
00000000000114a7	callq	_ZydisRegisterEncode
00000000000114ac	movq	-0x18(%rbp), %rcx
00000000000114b0	movl	%eax, 0x20(%rcx)
00000000000114b3	jmp	0x11611
00000000000114b8	movq	-0x8(%rbp), %rax
00000000000114bc	movq	(%rax), %rax
00000000000114bf	cmpl	$0x0, 0x4(%rax)
00000000000114c3	jne	0x114d6
00000000000114c9	movl	$0x2, %eax
00000000000114ce	movl	%eax, -0x34(%rbp)
00000000000114d1	jmp	0x114f3
00000000000114d6	movq	-0x8(%rbp), %rax
00000000000114da	movq	(%rax), %rax
00000000000114dd	movl	0x4(%rax), %ecx
00000000000114e0	cmpl	$0x1, %ecx
00000000000114e3	movl	$0x3, %ecx
00000000000114e8	movl	$0x4, %edx
00000000000114ed	cmovel	%ecx, %edx
00000000000114f0	movl	%edx, -0x34(%rbp)
00000000000114f3	movl	-0x34(%rbp), %eax
00000000000114f6	movq	-0x20(%rbp), %rcx
00000000000114fa	movb	0xa(%rcx), %dl
00000000000114fd	andb	$0x3f, %dl
0000000000011500	movl	%eax, %edi
0000000000011502	movzbl	%dl, %esi
0000000000011505	callq	_ZydisRegisterEncode
000000000001150a	movq	-0x18(%rbp), %rcx
000000000001150e	movl	%eax, 0x20(%rcx)
0000000000011511	jmp	0x11611
0000000000011516	movq	-0x10(%rbp), %rax
000000000001151a	movzbl	0x17(%rax), %ecx
000000000001151e	cmpl	$0x10, %ecx
0000000000011521	jne	0x11534
0000000000011527	movl	$0xc3, %eax
000000000001152c	movl	%eax, -0x38(%rbp)
000000000001152f	jmp	0x1154f
0000000000011534	movq	-0x10(%rbp), %rax
0000000000011538	movzbl	0x17(%rax), %ecx
000000000001153c	cmpl	$0x20, %ecx
000000000001153f	movl	$0xc4, %ecx
0000000000011544	movl	$0xc5, %edx
0000000000011549	cmovel	%ecx, %edx
000000000001154c	movl	%edx, -0x38(%rbp)
000000000001154f	movl	-0x38(%rbp), %eax
0000000000011552	movq	-0x18(%rbp), %rcx
0000000000011556	movl	%eax, 0x20(%rcx)
0000000000011559	jmp	0x11611
000000000001155e	movq	-0x8(%rbp), %rax
0000000000011562	movq	(%rax), %rax
0000000000011565	cmpl	$0x0, 0x4(%rax)
0000000000011569	jne	0x1157c
000000000001156f	movl	$0xc4, %eax
0000000000011574	movl	%eax, -0x3c(%rbp)
0000000000011577	jmp	0x11599
000000000001157c	movq	-0x8(%rbp), %rax
0000000000011580	movq	(%rax), %rax
0000000000011583	movl	0x4(%rax), %ecx
0000000000011586	cmpl	$0x1, %ecx
0000000000011589	movl	$0xc4, %ecx
000000000001158e	movl	$0xc5, %edx
0000000000011593	cmovel	%ecx, %edx
0000000000011596	movl	%edx, -0x3c(%rbp)
0000000000011599	movl	-0x3c(%rbp), %eax
000000000001159c	movq	-0x18(%rbp), %rcx
00000000000115a0	movl	%eax, 0x20(%rcx)
00000000000115a3	jmp	0x11611
00000000000115a8	movq	-0x8(%rbp), %rax
00000000000115ac	movq	(%rax), %rax
00000000000115af	cmpl	$0x0, 0x4(%rax)
00000000000115b3	jne	0x115c6
00000000000115b9	movl	$0xc0, %eax
00000000000115be	movl	%eax, -0x40(%rbp)
00000000000115c1	jmp	0x115e3
00000000000115c6	movq	-0x8(%rbp), %rax
00000000000115ca	movq	(%rax), %rax
00000000000115cd	movl	0x4(%rax), %ecx
00000000000115d0	cmpl	$0x1, %ecx
00000000000115d3	movl	$0xc1, %ecx
00000000000115d8	movl	$0xc2, %edx
00000000000115dd	cmovel	%ecx, %edx
00000000000115e0	movl	%edx, -0x40(%rbp)
00000000000115e3	movl	-0x40(%rbp), %eax
00000000000115e6	movq	-0x18(%rbp), %rcx
00000000000115ea	movl	%eax, 0x20(%rcx)
00000000000115ed	jmp	0x11611
00000000000115f2	leaq	0x59a19(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitRegister"
00000000000115f9	leaq	0x582da(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011600	leaq	0x59fbd(%rip), %rcx ## literal pool for: "0"
0000000000011607	movl	$0x684, %edx
000000000001160c	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011611	addq	$0x40, %rsp
0000000000011615	popq	%rbp
0000000000011616	retq
0000000000011617	nop
0000000000011618	rep		std
000000000001161a	.byte 0xff #bad opcode
000000000001161b	decl	(%rdi)
000000000001161d	.byte 0xfe #bad opcode
000000000001161e	.byte 0xff #bad opcode
000000000001161f	incl	-0x1(%rsi,%rdi,8)
0000000000011623	jmpq	*-0x1000002(%rax)
0000000000011629	.byte 0xfe #bad opcode
000000000001162a	.byte 0xff #bad opcode
000000000001162b	incl	-0x1(%rsi)
000000000001162e	.byte 0xff #bad opcode
000000000001162f	callq	*0x66ffffff(%rax)
0000000000011635	nopl	%cs:(%rax,%rax)
000000000001163e	nop
_ZydisDecodeOperandImplicitMemory:
0000000000011640	pushq	%rbp
0000000000011641	movq	%rsp, %rbp
0000000000011644	subq	$0x40, %rsp
0000000000011648	movq	%rdi, -0x8(%rbp)
000000000001164c	movq	%rsi, -0x10(%rbp)
0000000000011650	movq	%rdx, -0x18(%rbp)
0000000000011654	movq	%rcx, -0x20(%rbp)
0000000000011658	cmpq	$0x0, -0x8(%rbp)
000000000001165d	setne	%al
0000000000011660	xorb	$-0x1, %al
0000000000011662	andb	$0x1, %al
0000000000011664	movzbl	%al, %r8d
0000000000011668	movslq	%r8d, %rcx
000000000001166b	cmpq	$0x0, %rcx
000000000001166f	je	0x11694
0000000000011675	leaq	0x599c1(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
000000000001167c	leaq	0x58257(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011683	leaq	0x58285(%rip), %rcx ## literal pool for: "context"
000000000001168a	movl	$0x696, %edx
000000000001168f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011694	jmp	0x11699
0000000000011699	cmpq	$0x0, -0x18(%rbp)
000000000001169e	setne	%al
00000000000116a1	xorb	$-0x1, %al
00000000000116a3	andb	$0x1, %al
00000000000116a5	movzbl	%al, %ecx
00000000000116a8	movslq	%ecx, %rdx
00000000000116ab	cmpq	$0x0, %rdx
00000000000116af	je	0x116d4
00000000000116b5	leaq	0x59981(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000116bc	leaq	0x58217(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000116c3	leaq	0x5996b(%rip), %rcx ## literal pool for: "operand"
00000000000116ca	movl	$0x697, %edx
00000000000116cf	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000116d4	jmp	0x116d9
00000000000116d9	cmpq	$0x0, -0x20(%rbp)
00000000000116de	setne	%al
00000000000116e1	xorb	$-0x1, %al
00000000000116e3	andb	$0x1, %al
00000000000116e5	movzbl	%al, %ecx
00000000000116e8	movslq	%ecx, %rdx
00000000000116eb	cmpq	$0x0, %rdx
00000000000116ef	je	0x11714
00000000000116f5	leaq	0x59941(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000116fc	leaq	0x581d7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011703	leaq	0x58a30(%rip), %rcx ## literal pool for: "definition"
000000000001170a	movl	$0x698, %edx
000000000001170f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011714	jmp	0x11719
0000000000011719	movq	-0x18(%rbp), %rax
000000000001171d	movl	$0x2, 0x4(%rax)
0000000000011724	movq	-0x18(%rbp), %rax
0000000000011728	movl	$0x1, 0x28(%rax)
000000000001172f	movq	-0x20(%rbp), %rax
0000000000011733	movb	0x9(%rax), %cl
0000000000011736	shrb	$0x3, %cl
0000000000011739	andb	$0xf, %cl
000000000001173c	movzbl	%cl, %edx
000000000001173f	movl	%edx, %eax
0000000000011741	subb	$0x8, %cl
0000000000011744	movq	%rax, -0x28(%rbp)
0000000000011748	movb	%cl, -0x29(%rbp)
000000000001174b	ja	0x11930
0000000000011751	leaq	0x284(%rip), %rax
0000000000011758	movq	-0x28(%rbp), %rcx
000000000001175c	movslq	(%rax,%rcx,4), %rdx
0000000000011760	addq	%rax, %rdx
0000000000011763	jmpq	*%rdx
0000000000011765	movq	-0x8(%rbp), %rax
0000000000011769	movzbl	0x25(%rax), %ecx
000000000001176d	movl	%ecx, %eax
000000000001176f	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011776	movl	(%rdx,%rax,4), %edi
0000000000011779	movq	-0x8(%rbp), %rax
000000000001177d	movq	-0x10(%rbp), %rsi
0000000000011781	movq	-0x8(%rbp), %r8
0000000000011785	movzbl	0x25(%r8), %ecx
000000000001178a	movl	%ecx, %r8d
000000000001178d	movl	(%rdx,%r8,4), %ecx
0000000000011791	movl	%edi, -0x30(%rbp)
0000000000011794	movq	%rax, %rdi
0000000000011797	movl	$0x2, %edx
000000000001179c	callq	_ZydisCalcRegisterId
00000000000117a1	movl	-0x30(%rbp), %edi
00000000000117a4	movzbl	%al, %esi
00000000000117a7	callq	_ZydisRegisterEncode
00000000000117ac	movq	-0x18(%rbp), %r8
00000000000117b0	movl	%eax, 0x30(%r8)
00000000000117b4	jmp	0x1194f
00000000000117b9	movq	-0x8(%rbp), %rax
00000000000117bd	movzbl	0x25(%rax), %ecx
00000000000117c1	movl	%ecx, %eax
00000000000117c3	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000117ca	movl	(%rdx,%rax,4), %edi
00000000000117cd	movq	-0x8(%rbp), %rax
00000000000117d1	movq	-0x10(%rbp), %rsi
00000000000117d5	movq	-0x8(%rbp), %r8
00000000000117d9	movzbl	0x25(%r8), %ecx
00000000000117de	movl	%ecx, %r8d
00000000000117e1	movl	(%rdx,%r8,4), %ecx
00000000000117e5	movl	%edi, -0x34(%rbp)
00000000000117e8	movq	%rax, %rdi
00000000000117eb	movl	$0x4, %edx
00000000000117f0	callq	_ZydisCalcRegisterId
00000000000117f5	movl	-0x34(%rbp), %edi
00000000000117f8	movzbl	%al, %esi
00000000000117fb	callq	_ZydisRegisterEncode
0000000000011800	movq	-0x18(%rbp), %r8
0000000000011804	movl	%eax, 0x30(%r8)
0000000000011808	jmp	0x1194f
000000000001180d	xorl	%esi, %esi
000000000001180f	movq	-0x8(%rbp), %rax
0000000000011813	movzbl	0x25(%rax), %ecx
0000000000011817	movl	%ecx, %eax
0000000000011819	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011820	movl	(%rdx,%rax,4), %edi
0000000000011823	callq	_ZydisRegisterEncode
0000000000011828	movq	-0x18(%rbp), %rdx
000000000001182c	movl	%eax, 0x30(%rdx)
000000000001182f	jmp	0x1194f
0000000000011834	movq	-0x8(%rbp), %rax
0000000000011838	movzbl	0x25(%rax), %ecx
000000000001183c	movl	%ecx, %eax
000000000001183e	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011845	movl	(%rdx,%rax,4), %edi
0000000000011848	movl	$0x2, %esi
000000000001184d	callq	_ZydisRegisterEncode
0000000000011852	movq	-0x18(%rbp), %rdx
0000000000011856	movl	%eax, 0x30(%rdx)
0000000000011859	jmp	0x1194f
000000000001185e	movq	-0x8(%rbp), %rax
0000000000011862	movzbl	0x25(%rax), %ecx
0000000000011866	movl	%ecx, %eax
0000000000011868	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
000000000001186f	movl	(%rdx,%rax,4), %edi
0000000000011872	movl	$0x3, %esi
0000000000011877	callq	_ZydisRegisterEncode
000000000001187c	movq	-0x18(%rbp), %rdx
0000000000011880	movl	%eax, 0x30(%rdx)
0000000000011883	jmp	0x1194f
0000000000011888	movq	-0x8(%rbp), %rax
000000000001188c	movzbl	0x25(%rax), %ecx
0000000000011890	movl	%ecx, %eax
0000000000011892	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011899	movl	(%rdx,%rax,4), %edi
000000000001189c	movl	$0x4, %esi
00000000000118a1	callq	_ZydisRegisterEncode
00000000000118a6	movq	-0x18(%rbp), %rdx
00000000000118aa	movl	%eax, 0x30(%rdx)
00000000000118ad	jmp	0x1194f
00000000000118b2	movq	-0x8(%rbp), %rax
00000000000118b6	movzbl	0x25(%rax), %ecx
00000000000118ba	movl	%ecx, %eax
00000000000118bc	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000118c3	movl	(%rdx,%rax,4), %edi
00000000000118c6	movl	$0x5, %esi
00000000000118cb	callq	_ZydisRegisterEncode
00000000000118d0	movq	-0x18(%rbp), %rdx
00000000000118d4	movl	%eax, 0x30(%rdx)
00000000000118d7	jmp	0x1194f
00000000000118dc	movq	-0x8(%rbp), %rax
00000000000118e0	movzbl	0x25(%rax), %ecx
00000000000118e4	movl	%ecx, %eax
00000000000118e6	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
00000000000118ed	movl	(%rdx,%rax,4), %edi
00000000000118f0	movl	$0x6, %esi
00000000000118f5	callq	_ZydisRegisterEncode
00000000000118fa	movq	-0x18(%rbp), %rdx
00000000000118fe	movl	%eax, 0x30(%rdx)
0000000000011901	jmp	0x1194f
0000000000011906	movq	-0x8(%rbp), %rax
000000000001190a	movzbl	0x25(%rax), %ecx
000000000001190e	movl	%ecx, %eax
0000000000011910	leaq	_ZydisDecodeOperandImplicitMemory.lookup(%rip), %rdx
0000000000011917	movl	(%rdx,%rax,4), %edi
000000000001191a	movl	$0x7, %esi
000000000001191f	callq	_ZydisRegisterEncode
0000000000011924	movq	-0x18(%rbp), %rdx
0000000000011928	movl	%eax, 0x30(%rdx)
000000000001192b	jmp	0x1194f
0000000000011930	leaq	0x59706(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
0000000000011937	leaq	0x57f9c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001193e	leaq	0x59c7f(%rip), %rcx ## literal pool for: "0"
0000000000011945	movl	$0x6c6, %edx
000000000001194a	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001194f	movq	-0x20(%rbp), %rax
0000000000011953	movb	0x9(%rax), %cl
0000000000011956	andb	$0x7, %cl
0000000000011959	cmpb	$0x0, %cl
000000000001195c	je	0x119d4
0000000000011962	movq	-0x20(%rbp), %rax
0000000000011966	movb	0x9(%rax), %cl
0000000000011969	andb	$0x7, %cl
000000000001196c	movzbl	%cl, %edx
000000000001196f	subl	$0x1, %edx
0000000000011972	movb	%dl, %cl
0000000000011974	movl	$0xd, %edi
0000000000011979	movzbl	%cl, %esi
000000000001197c	callq	_ZydisRegisterEncode
0000000000011981	movq	-0x18(%rbp), %r8
0000000000011985	movl	%eax, 0x2c(%r8)
0000000000011989	movq	-0x18(%rbp), %r8
000000000001198d	cmpl	$0x0, 0x2c(%r8)
0000000000011992	setne	%cl
0000000000011995	xorb	$-0x1, %cl
0000000000011998	andb	$0x1, %cl
000000000001199b	movzbl	%cl, %eax
000000000001199e	movslq	%eax, %r8
00000000000119a1	cmpq	$0x0, %r8
00000000000119a5	je	0x119ca
00000000000119ab	leaq	0x5968b(%rip), %rdi ## literal pool for: "ZydisDecodeOperandImplicitMemory"
00000000000119b2	leaq	0x57f21(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000119b9	leaq	0x5969e(%rip), %rcx ## literal pool for: "operand->mem.segment"
00000000000119c0	movl	$0x6cd, %edx
00000000000119c5	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000119ca	jmp	0x119cf
00000000000119cf	jmp	0x119d4
00000000000119d4	addq	$0x40, %rsp
00000000000119d8	popq	%rbp
00000000000119d9	retq
00000000000119da	nop
00000000000119dc	movl	%edi, %ebp
00000000000119de	.byte 0xff #bad opcode
00000000000119df	.byte 0xff #bad opcode
00000000000119e0	.byte 0xdd #bad opcode
00000000000119e1	std
00000000000119e2	.byte 0xff #bad opcode
00000000000119e3	pushq	(%rcx)
00000000000119e5	.byte 0xfe #bad opcode
00000000000119e6	.byte 0xff #bad opcode
00000000000119e7	lcalll	*-0x2(%rax)
00000000000119ea	.byte 0xff #bad opcode
00000000000119eb	incl	-0x53000002(%rdx)
00000000000119f1	.byte 0xfe #bad opcode
00000000000119f2	.byte 0xff #bad opcode
00000000000119f3	callq	*%rsi
00000000000119f5	.byte 0xfe #bad opcode
00000000000119f6	.byte 0xff #bad opcode
00000000000119f7	incl	(%rax)
00000000000119f9	.byte 0xff #bad opcode
00000000000119fa	.byte 0xff #bad opcode
00000000000119fb	ljmpl	*(%rdx)
00000000000119fd	.byte 0xff #bad opcode
00000000000119fe	.byte 0xff #bad opcode
00000000000119ff	callq	*0x48(%rbp)
_ZydisDecodeOperandRegister:
0000000000011a00	pushq	%rbp
0000000000011a01	movq	%rsp, %rbp
0000000000011a04	subq	$0x20, %rsp
0000000000011a08	movb	%cl, %al
0000000000011a0a	movq	%rdi, -0x8(%rbp)
0000000000011a0e	movq	%rsi, -0x10(%rbp)
0000000000011a12	movl	%edx, -0x14(%rbp)
0000000000011a15	movb	%al, -0x15(%rbp)
0000000000011a18	cmpq	$0x0, -0x8(%rbp)
0000000000011a1d	setne	%al
0000000000011a20	xorb	$-0x1, %al
0000000000011a22	andb	$0x1, %al
0000000000011a24	movzbl	%al, %ecx
0000000000011a27	movslq	%ecx, %rsi
0000000000011a2a	cmpq	$0x0, %rsi
0000000000011a2e	je	0x11a53
0000000000011a34	leaq	0x59638(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
0000000000011a3b	leaq	0x57e98(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011a42	leaq	0x57ece(%rip), %rcx ## literal pool for: "instruction"
0000000000011a49	movl	$0x562, %edx
0000000000011a4e	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011a53	jmp	0x11a58
0000000000011a58	cmpq	$0x0, -0x10(%rbp)
0000000000011a5d	setne	%al
0000000000011a60	xorb	$-0x1, %al
0000000000011a62	andb	$0x1, %al
0000000000011a64	movzbl	%al, %ecx
0000000000011a67	movslq	%ecx, %rdx
0000000000011a6a	cmpq	$0x0, %rdx
0000000000011a6e	je	0x11a93
0000000000011a74	leaq	0x595f8(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
0000000000011a7b	leaq	0x57e58(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011a82	leaq	0x595ac(%rip), %rcx ## literal pool for: "operand"
0000000000011a89	movl	$0x563, %edx
0000000000011a8e	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011a93	jmp	0x11a98
0000000000011a98	movq	-0x10(%rbp), %rax
0000000000011a9c	movl	$0x1, 0x4(%rax)
0000000000011aa3	cmpl	$0x1, -0x14(%rbp)
0000000000011aa7	jne	0x11afc
0000000000011aad	movq	-0x8(%rbp), %rax
0000000000011ab1	movq	0x430(%rax), %rax
0000000000011ab8	andq	$0x4, %rax
0000000000011abc	cmpq	$0x0, %rax
0000000000011ac0	je	0x11ae9
0000000000011ac6	movzbl	-0x15(%rbp), %eax
0000000000011aca	cmpl	$0x4, %eax
0000000000011acd	jl	0x11ae9
0000000000011ad3	movzbl	-0x15(%rbp), %eax
0000000000011ad7	subl	$0x4, %eax
0000000000011ada	addl	$0x9, %eax
0000000000011add	movq	-0x10(%rbp), %rcx
0000000000011ae1	movl	%eax, 0x20(%rcx)
0000000000011ae4	jmp	0x11af7
0000000000011ae9	movzbl	-0x15(%rbp), %eax
0000000000011aed	addl	$0x1, %eax
0000000000011af0	movq	-0x10(%rbp), %rcx
0000000000011af4	movl	%eax, 0x20(%rcx)
0000000000011af7	jmp	0x11b59
0000000000011afc	movl	-0x14(%rbp), %edi
0000000000011aff	movzbl	-0x15(%rbp), %esi
0000000000011b03	callq	_ZydisRegisterEncode
0000000000011b08	movq	-0x10(%rbp), %rcx
0000000000011b0c	movl	%eax, 0x20(%rcx)
0000000000011b0f	movq	-0x10(%rbp), %rcx
0000000000011b13	cmpl	$0x0, 0x20(%rcx)
0000000000011b17	setne	%dl
0000000000011b1a	xorb	$-0x1, %dl
0000000000011b1d	andb	$0x1, %dl
0000000000011b20	movzbl	%dl, %eax
0000000000011b23	movslq	%eax, %rcx
0000000000011b26	cmpq	$0x0, %rcx
0000000000011b2a	je	0x11b4f
0000000000011b30	leaq	0x5953c(%rip), %rdi ## literal pool for: "ZydisDecodeOperandRegister"
0000000000011b37	leaq	0x57d9c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011b3e	leaq	0x59549(%rip), %rcx ## literal pool for: "operand->reg.value"
0000000000011b45	movl	$0x573, %edx
0000000000011b4a	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011b4f	jmp	0x11b54
0000000000011b54	jmp	0x11b59
0000000000011b59	movl	$0x100000, %eax
0000000000011b5e	addq	$0x20, %rsp
0000000000011b62	popq	%rbp
0000000000011b63	retq
0000000000011b64	nopw	%cs:(%rax,%rax)
0000000000011b6e	nop
_ZydisCalcRegisterId:
0000000000011b70	pushq	%rbp
0000000000011b71	movq	%rsp, %rbp
0000000000011b74	subq	$0x90, %rsp
0000000000011b7b	movq	%rdi, -0x10(%rbp)
0000000000011b7f	movq	%rsi, -0x18(%rbp)
0000000000011b83	movl	%edx, -0x1c(%rbp)
0000000000011b86	movl	%ecx, -0x20(%rbp)
0000000000011b89	movq	-0x10(%rbp), %rsi
0000000000011b8d	movq	(%rsi), %rsi
0000000000011b90	movl	(%rsi), %ecx
0000000000011b92	testl	%ecx, %ecx
0000000000011b94	movl	%ecx, -0x2c(%rbp)
0000000000011b97	je	0x1212d
0000000000011b9d	jmp	0x11ba2
0000000000011ba2	movl	-0x2c(%rbp), %eax
0000000000011ba5	decl	%eax
0000000000011ba7	subl	$0x4, %eax
0000000000011baa	movl	%eax, -0x30(%rbp)
0000000000011bad	ja	0x1294a
0000000000011bb3	jmp	0x11bb8
0000000000011bb8	movl	-0x1c(%rbp), %eax
0000000000011bbb	decl	%eax
0000000000011bbd	movl	%eax, %ecx
0000000000011bbf	subl	$0x8, %eax
0000000000011bc2	movq	%rcx, -0x38(%rbp)
0000000000011bc6	movl	%eax, -0x3c(%rbp)
0000000000011bc9	ja	0x1210e
0000000000011bcf	leaq	0xdc6(%rip), %rax
0000000000011bd6	movq	-0x38(%rbp), %rcx
0000000000011bda	movslq	(%rax,%rcx,4), %rdx
0000000000011bde	addq	%rax, %rdx
0000000000011be1	jmpq	*%rdx
0000000000011be3	cmpl	$0x1, -0x20(%rbp)
0000000000011be7	movb	$0x1, %al
0000000000011be9	movb	%al, -0x3d(%rbp)
0000000000011bec	je	0x11c1a
0000000000011bf2	cmpl	$0x2, -0x20(%rbp)
0000000000011bf6	movb	$0x1, %al
0000000000011bf8	movb	%al, -0x3d(%rbp)
0000000000011bfb	je	0x11c1a
0000000000011c01	cmpl	$0x3, -0x20(%rbp)
0000000000011c05	movb	$0x1, %al
0000000000011c07	movb	%al, -0x3d(%rbp)
0000000000011c0a	je	0x11c1a
0000000000011c10	cmpl	$0x4, -0x20(%rbp)
0000000000011c14	sete	%al
0000000000011c17	movb	%al, -0x3d(%rbp)
0000000000011c1a	movb	-0x3d(%rbp), %al
0000000000011c1d	xorb	$-0x1, %al
0000000000011c1f	andb	$0x1, %al
0000000000011c21	movzbl	%al, %ecx
0000000000011c24	movslq	%ecx, %rdx
0000000000011c27	cmpq	$0x0, %rdx
0000000000011c2b	je	0x11c50
0000000000011c31	leaq	0x59469(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011c38	leaq	0x57c9b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011c3f	leaq	0x5946f(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_GPR8) || (register_class == ZYDIS_REGCLASS_GPR16) || (register_class == ZYDIS_REGCLASS_GPR32) || (register_class == ZYDIS_REGCLASS_GPR64)"
0000000000011c46	movl	$0x39a, %edx
0000000000011c4b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011c50	jmp	0x11c55
0000000000011c55	movq	-0x18(%rbp), %rax
0000000000011c59	movzbl	0x14(%rax), %ecx
0000000000011c5d	andl	$0xf, %ecx
0000000000011c60	movb	%cl, %dl
0000000000011c62	movb	%dl, -0x21(%rbp)
0000000000011c65	movzbl	-0x21(%rbp), %ecx
0000000000011c69	cmpl	$0x7, %ecx
0000000000011c6c	jle	0x11c7e
0000000000011c72	movzbl	-0x21(%rbp), %eax
0000000000011c76	subl	$0x8, %eax
0000000000011c79	movb	%al, %cl
0000000000011c7b	movb	%cl, -0x21(%rbp)
0000000000011c7e	movb	-0x21(%rbp), %al
0000000000011c81	movb	%al, -0x1(%rbp)
0000000000011c84	jmp	0x12969
0000000000011c89	movq	-0x18(%rbp), %rax
0000000000011c8d	movq	0x430(%rax), %rax
0000000000011c94	andq	$0x1, %rax
0000000000011c98	cmpq	$0x0, %rax
0000000000011c9c	setne	%cl
0000000000011c9f	xorb	$-0x1, %cl
0000000000011ca2	andb	$0x1, %cl
0000000000011ca5	movzbl	%cl, %edx
0000000000011ca8	movslq	%edx, %rax
0000000000011cab	cmpq	$0x0, %rax
0000000000011caf	je	0x11cd4
0000000000011cb5	leaq	0x593e5(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011cbc	leaq	0x57c17(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011cc3	leaq	0x58699(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011cca	movl	$0x3a3, %edx
0000000000011ccf	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011cd4	jmp	0x11cd9
0000000000011cd9	movq	-0x18(%rbp), %rax
0000000000011cdd	movb	0x579(%rax), %cl
0000000000011ce3	movb	%cl, -0x1(%rbp)
0000000000011ce6	jmp	0x12969
0000000000011ceb	movq	-0x10(%rbp), %rax
0000000000011cef	movzbl	0x2e(%rax), %ecx
0000000000011cf3	andl	$0x7, %ecx
0000000000011cf6	movb	%cl, %dl
0000000000011cf8	movb	%dl, -0x1(%rbp)
0000000000011cfb	jmp	0x12969
0000000000011d00	movq	-0x18(%rbp), %rax
0000000000011d04	movq	0x430(%rax), %rax
0000000000011d0b	andq	$0x1, %rax
0000000000011d0f	cmpq	$0x0, %rax
0000000000011d13	setne	%cl
0000000000011d16	xorb	$-0x1, %cl
0000000000011d19	andb	$0x1, %cl
0000000000011d1c	movzbl	%cl, %edx
0000000000011d1f	movslq	%edx, %rax
0000000000011d22	cmpq	$0x0, %rax
0000000000011d26	je	0x11d4b
0000000000011d2c	leaq	0x5936e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011d33	leaq	0x57ba0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011d3a	leaq	0x58622(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011d41	movl	$0x3a8, %edx
0000000000011d46	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011d4b	jmp	0x11d50
0000000000011d50	movq	-0x18(%rbp), %rax
0000000000011d54	movb	0x57a(%rax), %cl
0000000000011d5a	movb	%cl, -0x1(%rbp)
0000000000011d5d	jmp	0x12969
0000000000011d62	movq	-0x18(%rbp), %rax
0000000000011d66	movq	0x430(%rax), %rax
0000000000011d6d	andq	$0x1, %rax
0000000000011d71	cmpq	$0x0, %rax
0000000000011d75	setne	%cl
0000000000011d78	xorb	$-0x1, %cl
0000000000011d7b	andb	$0x1, %cl
0000000000011d7e	movzbl	%cl, %edx
0000000000011d81	movslq	%edx, %rax
0000000000011d84	cmpq	$0x0, %rax
0000000000011d88	je	0x11dad
0000000000011d8e	leaq	0x5930c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011d95	leaq	0x57b3e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011d9c	leaq	0x585c0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011da3	movl	$0x3ab, %edx
0000000000011da8	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011dad	jmp	0x11db2
0000000000011db2	movq	-0x18(%rbp), %rax
0000000000011db6	movzbl	0x578(%rax), %ecx
0000000000011dbd	cmpl	$0x3, %ecx
0000000000011dc0	setne	%dl
0000000000011dc3	xorb	$-0x1, %dl
0000000000011dc6	andb	$0x1, %dl
0000000000011dc9	movzbl	%dl, %ecx
0000000000011dcc	movslq	%ecx, %rax
0000000000011dcf	cmpq	$0x0, %rax
0000000000011dd3	je	0x11df8
0000000000011dd9	leaq	0x592c1(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011de0	leaq	0x57af3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011de7	leaq	0x5880c(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000011dee	movl	$0x3ac, %edx
0000000000011df3	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011df8	jmp	0x11dfd
0000000000011dfd	movq	-0x18(%rbp), %rax
0000000000011e01	movzbl	0x57a(%rax), %ecx
0000000000011e08	cmpl	$0x4, %ecx
0000000000011e0b	jne	0x11e73
0000000000011e11	movq	-0x18(%rbp), %rax
0000000000011e15	movq	0x430(%rax), %rax
0000000000011e1c	andq	$0x2, %rax
0000000000011e20	cmpq	$0x0, %rax
0000000000011e24	setne	%cl
0000000000011e27	xorb	$-0x1, %cl
0000000000011e2a	andb	$0x1, %cl
0000000000011e2d	movzbl	%cl, %edx
0000000000011e30	movslq	%edx, %rax
0000000000011e33	cmpq	$0x0, %rax
0000000000011e37	je	0x11e5c
0000000000011e3d	leaq	0x5925d(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011e44	leaq	0x57a8f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011e4b	leaq	0x5930f(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000011e52	movl	$0x3af, %edx
0000000000011e57	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011e5c	jmp	0x11e61
0000000000011e61	movq	-0x18(%rbp), %rax
0000000000011e65	movb	0x57e(%rax), %cl
0000000000011e6b	movb	%cl, -0x1(%rbp)
0000000000011e6e	jmp	0x12969
0000000000011e73	movq	-0x18(%rbp), %rax
0000000000011e77	movb	0x57a(%rax), %cl
0000000000011e7d	movb	%cl, -0x1(%rbp)
0000000000011e80	jmp	0x12969
0000000000011e85	movq	-0x18(%rbp), %rax
0000000000011e89	movq	0x430(%rax), %rax
0000000000011e90	andq	$0x1, %rax
0000000000011e94	cmpq	$0x0, %rax
0000000000011e98	setne	%cl
0000000000011e9b	xorb	$-0x1, %cl
0000000000011e9e	andb	$0x1, %cl
0000000000011ea1	movzbl	%cl, %edx
0000000000011ea4	movslq	%edx, %rax
0000000000011ea7	cmpq	$0x0, %rax
0000000000011eab	je	0x11ed0
0000000000011eb1	leaq	0x591e9(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011eb8	leaq	0x57a1b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011ebf	leaq	0x5849d(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011ec6	movl	$0x3b4, %edx
0000000000011ecb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011ed0	jmp	0x11ed5
0000000000011ed5	movq	-0x18(%rbp), %rax
0000000000011ed9	movzbl	0x578(%rax), %ecx
0000000000011ee0	cmpl	$0x3, %ecx
0000000000011ee3	setne	%dl
0000000000011ee6	xorb	$-0x1, %dl
0000000000011ee9	andb	$0x1, %dl
0000000000011eec	movzbl	%dl, %ecx
0000000000011eef	movslq	%ecx, %rax
0000000000011ef2	cmpq	$0x0, %rax
0000000000011ef6	je	0x11f1b
0000000000011efc	leaq	0x5919e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011f03	leaq	0x579d0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011f0a	leaq	0x586e9(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000011f11	movl	$0x3b5, %edx
0000000000011f16	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011f1b	jmp	0x11f20
0000000000011f20	movq	-0x18(%rbp), %rax
0000000000011f24	movq	0x430(%rax), %rax
0000000000011f2b	andq	$0x2, %rax
0000000000011f2f	cmpq	$0x0, %rax
0000000000011f33	setne	%cl
0000000000011f36	xorb	$-0x1, %cl
0000000000011f39	andb	$0x1, %cl
0000000000011f3c	movzbl	%cl, %edx
0000000000011f3f	movslq	%edx, %rax
0000000000011f42	cmpq	$0x0, %rax
0000000000011f46	je	0x11f6b
0000000000011f4c	leaq	0x5914e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011f53	leaq	0x57980(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011f5a	leaq	0x59200(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000011f61	movl	$0x3b6, %edx
0000000000011f66	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011f6b	jmp	0x11f70
0000000000011f70	movq	-0x18(%rbp), %rax
0000000000011f74	movb	0x57d(%rax), %cl
0000000000011f7a	movb	%cl, -0x1(%rbp)
0000000000011f7d	jmp	0x12969
0000000000011f82	movq	-0x18(%rbp), %rax
0000000000011f86	movq	0x430(%rax), %rax
0000000000011f8d	andq	$0x1, %rax
0000000000011f91	cmpq	$0x0, %rax
0000000000011f95	setne	%cl
0000000000011f98	xorb	$-0x1, %cl
0000000000011f9b	andb	$0x1, %cl
0000000000011f9e	movzbl	%cl, %edx
0000000000011fa1	movslq	%edx, %rax
0000000000011fa4	cmpq	$0x0, %rax
0000000000011fa8	je	0x11fcd
0000000000011fae	leaq	0x590ec(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000011fb5	leaq	0x5791e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000011fbc	leaq	0x583a0(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000011fc3	movl	$0x3b9, %edx
0000000000011fc8	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000011fcd	jmp	0x11fd2
0000000000011fd2	movq	-0x18(%rbp), %rax
0000000000011fd6	movzbl	0x578(%rax), %ecx
0000000000011fdd	cmpl	$0x3, %ecx
0000000000011fe0	setne	%dl
0000000000011fe3	xorb	$-0x1, %dl
0000000000011fe6	andb	$0x1, %dl
0000000000011fe9	movzbl	%dl, %ecx
0000000000011fec	movslq	%ecx, %rax
0000000000011fef	cmpq	$0x0, %rax
0000000000011ff3	je	0x12018
0000000000011ff9	leaq	0x590a1(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012000	leaq	0x578d3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012007	leaq	0x585ec(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
000000000001200e	movl	$0x3ba, %edx
0000000000012013	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012018	jmp	0x1201d
000000000001201d	movq	-0x18(%rbp), %rax
0000000000012021	movq	0x430(%rax), %rax
0000000000012028	andq	$0x2, %rax
000000000001202c	cmpq	$0x0, %rax
0000000000012030	setne	%cl
0000000000012033	xorb	$-0x1, %cl
0000000000012036	andb	$0x1, %cl
0000000000012039	movzbl	%cl, %edx
000000000001203c	movslq	%edx, %rax
000000000001203f	cmpq	$0x0, %rax
0000000000012043	je	0x12068
0000000000012049	leaq	0x59051(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012050	leaq	0x57883(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012057	leaq	0x59103(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
000000000001205e	movl	$0x3bb, %edx
0000000000012063	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012068	jmp	0x1206d
000000000001206d	cmpl	$0x7, -0x20(%rbp)
0000000000012071	movb	$0x1, %al
0000000000012073	movb	%al, -0x3e(%rbp)
0000000000012076	je	0x12095
000000000001207c	cmpl	$0x8, -0x20(%rbp)
0000000000012080	movb	$0x1, %al
0000000000012082	movb	%al, -0x3e(%rbp)
0000000000012085	je	0x12095
000000000001208b	cmpl	$0x9, -0x20(%rbp)
000000000001208f	sete	%al
0000000000012092	movb	%al, -0x3e(%rbp)
0000000000012095	movb	-0x3e(%rbp), %al
0000000000012098	xorb	$-0x1, %al
000000000001209a	andb	$0x1, %al
000000000001209c	movzbl	%al, %ecx
000000000001209f	movslq	%ecx, %rdx
00000000000120a2	cmpq	$0x0, %rdx
00000000000120a6	je	0x120cb
00000000000120ac	leaq	0x58fee(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000120b3	leaq	0x57820(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000120ba	leaq	0x590cd(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_XMM) || (register_class == ZYDIS_REGCLASS_YMM) || (register_class == ZYDIS_REGCLASS_ZMM)"
00000000000120c1	movl	$0x3be, %edx
00000000000120c6	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000120cb	jmp	0x120d0
00000000000120d0	movq	-0x18(%rbp), %rax
00000000000120d4	movb	0x57d(%rax), %cl
00000000000120da	movb	%cl, -0x1(%rbp)
00000000000120dd	jmp	0x12969
00000000000120e2	movq	-0x18(%rbp), %rax
00000000000120e6	movq	0x598(%rax), %rax
00000000000120ed	shrq	$0x4, %rax
00000000000120f1	andq	$0x7, %rax
00000000000120f5	movb	%al, %cl
00000000000120f7	movb	%cl, -0x1(%rbp)
00000000000120fa	jmp	0x12969
00000000000120ff	movq	-0x10(%rbp), %rax
0000000000012103	movb	0x2f(%rax), %cl
0000000000012106	movb	%cl, -0x1(%rbp)
0000000000012109	jmp	0x12969
000000000001210e	leaq	0x58f8c(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012115	leaq	0x577be(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001211c	leaq	0x594a1(%rip), %rcx ## literal pool for: "0"
0000000000012123	movl	$0x3c5, %edx
0000000000012128	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001212d	movl	-0x1c(%rbp), %eax
0000000000012130	decl	%eax
0000000000012132	movl	%eax, %ecx
0000000000012134	subl	$0x8, %eax
0000000000012137	movq	%rcx, -0x48(%rbp)
000000000001213b	movl	%eax, -0x4c(%rbp)
000000000001213e	ja	0x1292b
0000000000012144	leaq	0x82d(%rip), %rax
000000000001214b	movq	-0x48(%rbp), %rcx
000000000001214f	movslq	(%rax,%rcx,4), %rdx
0000000000012153	addq	%rax, %rdx
0000000000012156	jmpq	*%rdx
0000000000012158	cmpl	$0x1, -0x20(%rbp)
000000000001215c	movb	$0x1, %al
000000000001215e	movb	%al, -0x4d(%rbp)
0000000000012161	je	0x1218f
0000000000012167	cmpl	$0x2, -0x20(%rbp)
000000000001216b	movb	$0x1, %al
000000000001216d	movb	%al, -0x4d(%rbp)
0000000000012170	je	0x1218f
0000000000012176	cmpl	$0x3, -0x20(%rbp)
000000000001217a	movb	$0x1, %al
000000000001217c	movb	%al, -0x4d(%rbp)
000000000001217f	je	0x1218f
0000000000012185	cmpl	$0x4, -0x20(%rbp)
0000000000012189	sete	%al
000000000001218c	movb	%al, -0x4d(%rbp)
000000000001218f	movb	-0x4d(%rbp), %al
0000000000012192	xorb	$-0x1, %al
0000000000012194	andb	$0x1, %al
0000000000012196	movzbl	%al, %ecx
0000000000012199	movslq	%ecx, %rdx
000000000001219c	cmpq	$0x0, %rdx
00000000000121a0	je	0x121c5
00000000000121a6	leaq	0x58ef4(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000121ad	leaq	0x57726(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000121b4	leaq	0x58efa(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_GPR8) || (register_class == ZYDIS_REGCLASS_GPR16) || (register_class == ZYDIS_REGCLASS_GPR32) || (register_class == ZYDIS_REGCLASS_GPR64)"
00000000000121bb	movl	$0x3cf, %edx
00000000000121c0	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000121c5	jmp	0x121ca
00000000000121ca	movq	-0x18(%rbp), %rax
00000000000121ce	movzbl	0x14(%rax), %ecx
00000000000121d2	andl	$0xf, %ecx
00000000000121d5	movb	%cl, %dl
00000000000121d7	movb	%dl, -0x22(%rbp)
00000000000121da	movzbl	-0x22(%rbp), %ecx
00000000000121de	cmpl	$0x7, %ecx
00000000000121e1	jle	0x121f3
00000000000121e7	movzbl	-0x22(%rbp), %eax
00000000000121eb	subl	$0x8, %eax
00000000000121ee	movb	%al, %cl
00000000000121f0	movb	%cl, -0x22(%rbp)
00000000000121f3	movzbl	-0x22(%rbp), %eax
00000000000121f7	movq	-0x10(%rbp), %rcx
00000000000121fb	movzbl	0x29(%rcx), %edx
00000000000121ff	shll	$0x3, %edx
0000000000012202	orl	%edx, %eax
0000000000012204	movb	%al, %sil
0000000000012207	movb	%sil, -0x1(%rbp)
000000000001220b	jmp	0x12969
0000000000012210	movq	-0x18(%rbp), %rax
0000000000012214	movq	0x430(%rax), %rax
000000000001221b	andq	$0x1, %rax
000000000001221f	cmpq	$0x0, %rax
0000000000012223	setne	%cl
0000000000012226	xorb	$-0x1, %cl
0000000000012229	andb	$0x1, %cl
000000000001222c	movzbl	%cl, %edx
000000000001222f	movslq	%edx, %rax
0000000000012232	cmpq	$0x0, %rax
0000000000012236	je	0x1225b
000000000001223c	leaq	0x58e5e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012243	leaq	0x57690(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001224a	leaq	0x58112(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000012251	movl	$0x3d9, %edx
0000000000012256	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001225b	jmp	0x12260
0000000000012260	movq	-0x18(%rbp), %rax
0000000000012264	movb	0x579(%rax), %cl
000000000001226a	movb	%cl, -0x23(%rbp)
000000000001226d	movl	-0x20(%rbp), %edx
0000000000012270	movl	%edx, %esi
0000000000012272	decl	%esi
0000000000012274	subl	$0x4, %esi
0000000000012277	movl	%edx, -0x54(%rbp)
000000000001227a	movl	%esi, -0x58(%rbp)
000000000001227d	jb	0x122b6
0000000000012283	jmp	0x12288
0000000000012288	movl	-0x54(%rbp), %eax
000000000001228b	addl	$-0x7, %eax
000000000001228e	subl	$0x3, %eax
0000000000012291	movl	%eax, -0x5c(%rbp)
0000000000012294	jb	0x122b6
000000000001229a	jmp	0x1229f
000000000001229f	movl	-0x54(%rbp), %eax
00000000000122a2	addl	$-0xf, %eax
00000000000122a5	subl	$0x1, %eax
00000000000122a8	movl	%eax, -0x60(%rbp)
00000000000122ab	ja	0x122d3
00000000000122b1	jmp	0x122b6
00000000000122b6	movq	-0x10(%rbp), %rax
00000000000122ba	movzbl	0x27(%rax), %ecx
00000000000122be	shll	$0x3, %ecx
00000000000122c1	movzbl	-0x23(%rbp), %edx
00000000000122c5	orl	%ecx, %edx
00000000000122c7	movb	%dl, %sil
00000000000122ca	movb	%sil, -0x23(%rbp)
00000000000122ce	jmp	0x122d8
00000000000122d3	jmp	0x122d8
00000000000122d8	movl	-0x20(%rbp), %eax
00000000000122db	addl	$-0x7, %eax
00000000000122de	subl	$0x2, %eax
00000000000122e1	movl	%eax, -0x64(%rbp)
00000000000122e4	ja	0x1230c
00000000000122ea	jmp	0x122ef
00000000000122ef	movq	-0x10(%rbp), %rax
00000000000122f3	movzbl	0x2c(%rax), %ecx
00000000000122f7	shll	$0x4, %ecx
00000000000122fa	movzbl	-0x23(%rbp), %edx
00000000000122fe	orl	%ecx, %edx
0000000000012300	movb	%dl, %sil
0000000000012303	movb	%sil, -0x23(%rbp)
0000000000012307	jmp	0x12311
000000000001230c	jmp	0x12311
0000000000012311	movb	-0x23(%rbp), %al
0000000000012314	movb	%al, -0x1(%rbp)
0000000000012317	jmp	0x12969
000000000001231c	movl	-0x20(%rbp), %eax
000000000001231f	movl	%eax, %ecx
0000000000012321	addl	$-0x7, %ecx
0000000000012324	subl	$0x3, %ecx
0000000000012327	movl	%eax, -0x68(%rbp)
000000000001232a	movl	%ecx, -0x6c(%rbp)
000000000001232d	jb	0x1234c
0000000000012333	jmp	0x12338
0000000000012338	movl	-0x68(%rbp), %eax
000000000001233b	subl	$0x11, %eax
000000000001233e	movl	%eax, -0x70(%rbp)
0000000000012341	je	0x1235b
0000000000012347	jmp	0x12370
000000000001234c	movq	-0x10(%rbp), %rax
0000000000012350	movb	0x2e(%rax), %cl
0000000000012353	movb	%cl, -0x1(%rbp)
0000000000012356	jmp	0x12969
000000000001235b	movq	-0x10(%rbp), %rax
000000000001235f	movzbl	0x2e(%rax), %ecx
0000000000012363	andl	$0x7, %ecx
0000000000012366	movb	%cl, %dl
0000000000012368	movb	%dl, -0x1(%rbp)
000000000001236b	jmp	0x12969
0000000000012370	movq	-0x10(%rbp), %rax
0000000000012374	movzbl	0x2e(%rax), %ecx
0000000000012378	andl	$0xf, %ecx
000000000001237b	movb	%cl, %dl
000000000001237d	movb	%dl, -0x1(%rbp)
0000000000012380	jmp	0x12969
0000000000012385	movq	-0x18(%rbp), %rax
0000000000012389	movq	0x430(%rax), %rax
0000000000012390	andq	$0x1, %rax
0000000000012394	cmpq	$0x0, %rax
0000000000012398	setne	%cl
000000000001239b	xorb	$-0x1, %cl
000000000001239e	andb	$0x1, %cl
00000000000123a1	movzbl	%cl, %edx
00000000000123a4	movslq	%edx, %rax
00000000000123a7	cmpq	$0x0, %rax
00000000000123ab	je	0x123d0
00000000000123b1	leaq	0x58ce9(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000123b8	leaq	0x5751b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000123bf	leaq	0x57f9d(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000123c6	movl	$0x407, %edx
00000000000123cb	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000123d0	jmp	0x123d5
00000000000123d5	movq	-0x18(%rbp), %rax
00000000000123d9	movb	0x57a(%rax), %cl
00000000000123df	movb	%cl, -0x24(%rbp)
00000000000123e2	movl	-0x20(%rbp), %edx
00000000000123e5	movl	%edx, %esi
00000000000123e7	decl	%esi
00000000000123e9	subl	$0x4, %esi
00000000000123ec	movl	%edx, -0x74(%rbp)
00000000000123ef	movl	%esi, -0x78(%rbp)
00000000000123f2	jb	0x1242b
00000000000123f8	jmp	0x123fd
00000000000123fd	movl	-0x74(%rbp), %eax
0000000000012400	addl	$-0x7, %eax
0000000000012403	subl	$0x3, %eax
0000000000012406	movl	%eax, -0x7c(%rbp)
0000000000012409	jb	0x1242b
000000000001240f	jmp	0x12414
0000000000012414	movl	-0x74(%rbp), %eax
0000000000012417	addl	$-0xf, %eax
000000000001241a	subl	$0x1, %eax
000000000001241d	movl	%eax, -0x80(%rbp)
0000000000012420	ja	0x12448
0000000000012426	jmp	0x1242b
000000000001242b	movq	-0x10(%rbp), %rax
000000000001242f	movzbl	0x29(%rax), %ecx
0000000000012433	shll	$0x3, %ecx
0000000000012436	movzbl	-0x24(%rbp), %edx
000000000001243a	orl	%ecx, %edx
000000000001243c	movb	%dl, %sil
000000000001243f	movb	%sil, -0x24(%rbp)
0000000000012443	jmp	0x1244d
0000000000012448	jmp	0x1244d
000000000001244d	movq	-0x18(%rbp), %rax
0000000000012451	cmpl	$0x4, 0xc(%rax)
0000000000012455	je	0x12469
000000000001245b	movq	-0x18(%rbp), %rax
000000000001245f	cmpl	$0x5, 0xc(%rax)
0000000000012463	jne	0x124aa
0000000000012469	movl	-0x20(%rbp), %eax
000000000001246c	addl	$-0x7, %eax
000000000001246f	subl	$0x2, %eax
0000000000012472	movl	%eax, -0x84(%rbp)
0000000000012478	ja	0x124a0
000000000001247e	jmp	0x12483
0000000000012483	movq	-0x10(%rbp), %rax
0000000000012487	movzbl	0x28(%rax), %ecx
000000000001248b	shll	$0x4, %ecx
000000000001248e	movzbl	-0x24(%rbp), %edx
0000000000012492	orl	%ecx, %edx
0000000000012494	movb	%dl, %sil
0000000000012497	movb	%sil, -0x24(%rbp)
000000000001249b	jmp	0x124a5
00000000000124a0	jmp	0x124a5
00000000000124a5	jmp	0x124aa
00000000000124aa	movb	-0x24(%rbp), %al
00000000000124ad	movb	%al, -0x1(%rbp)
00000000000124b0	jmp	0x12969
00000000000124b5	movq	-0x18(%rbp), %rax
00000000000124b9	movq	0x430(%rax), %rax
00000000000124c0	andq	$0x1, %rax
00000000000124c4	cmpq	$0x0, %rax
00000000000124c8	setne	%cl
00000000000124cb	xorb	$-0x1, %cl
00000000000124ce	andb	$0x1, %cl
00000000000124d1	movzbl	%cl, %edx
00000000000124d4	movslq	%edx, %rax
00000000000124d7	cmpq	$0x0, %rax
00000000000124db	je	0x12500
00000000000124e1	leaq	0x58bb9(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000124e8	leaq	0x573eb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000124ef	leaq	0x57e6d(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
00000000000124f6	movl	$0x42c, %edx
00000000000124fb	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012500	jmp	0x12505
0000000000012505	movq	-0x18(%rbp), %rax
0000000000012509	movzbl	0x578(%rax), %ecx
0000000000012510	cmpl	$0x3, %ecx
0000000000012513	setne	%dl
0000000000012516	xorb	$-0x1, %dl
0000000000012519	andb	$0x1, %dl
000000000001251c	movzbl	%dl, %ecx
000000000001251f	movslq	%ecx, %rax
0000000000012522	cmpq	$0x0, %rax
0000000000012526	je	0x1254b
000000000001252c	leaq	0x58b6e(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012533	leaq	0x573a0(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001253a	leaq	0x580b9(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012541	movl	$0x42d, %edx
0000000000012546	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001254b	jmp	0x12550
0000000000012550	movq	-0x18(%rbp), %rax
0000000000012554	movzbl	0x57a(%rax), %ecx
000000000001255b	cmpl	$0x4, %ecx
000000000001255e	jne	0x125d8
0000000000012564	movq	-0x18(%rbp), %rax
0000000000012568	movq	0x430(%rax), %rax
000000000001256f	andq	$0x2, %rax
0000000000012573	cmpq	$0x0, %rax
0000000000012577	setne	%cl
000000000001257a	xorb	$-0x1, %cl
000000000001257d	andb	$0x1, %cl
0000000000012580	movzbl	%cl, %edx
0000000000012583	movslq	%edx, %rax
0000000000012586	cmpq	$0x0, %rax
000000000001258a	je	0x125af
0000000000012590	leaq	0x58b0a(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012597	leaq	0x5733c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001259e	leaq	0x58bbc(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000125a5	movl	$0x430, %edx
00000000000125aa	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000125af	jmp	0x125b4
00000000000125b4	movq	-0x18(%rbp), %rax
00000000000125b8	movzbl	0x57e(%rax), %ecx
00000000000125bf	movq	-0x10(%rbp), %rax
00000000000125c3	movzbl	0x29(%rax), %edx
00000000000125c7	shll	$0x3, %edx
00000000000125ca	orl	%edx, %ecx
00000000000125cc	movb	%cl, %sil
00000000000125cf	movb	%sil, -0x1(%rbp)
00000000000125d3	jmp	0x12969
00000000000125d8	movq	-0x18(%rbp), %rax
00000000000125dc	movzbl	0x57a(%rax), %ecx
00000000000125e3	movq	-0x10(%rbp), %rax
00000000000125e7	movzbl	0x29(%rax), %edx
00000000000125eb	shll	$0x3, %edx
00000000000125ee	orl	%edx, %ecx
00000000000125f0	movb	%cl, %sil
00000000000125f3	movb	%sil, -0x1(%rbp)
00000000000125f7	jmp	0x12969
00000000000125fc	movq	-0x18(%rbp), %rax
0000000000012600	movq	0x430(%rax), %rax
0000000000012607	andq	$0x1, %rax
000000000001260b	cmpq	$0x0, %rax
000000000001260f	setne	%cl
0000000000012612	xorb	$-0x1, %cl
0000000000012615	andb	$0x1, %cl
0000000000012618	movzbl	%cl, %edx
000000000001261b	movslq	%edx, %rax
000000000001261e	cmpq	$0x0, %rax
0000000000012622	je	0x12647
0000000000012628	leaq	0x58a72(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001262f	leaq	0x572a4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012636	leaq	0x57d26(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
000000000001263d	movl	$0x435, %edx
0000000000012642	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012647	jmp	0x1264c
000000000001264c	movq	-0x18(%rbp), %rax
0000000000012650	movzbl	0x578(%rax), %ecx
0000000000012657	cmpl	$0x3, %ecx
000000000001265a	setne	%dl
000000000001265d	xorb	$-0x1, %dl
0000000000012660	andb	$0x1, %dl
0000000000012663	movzbl	%dl, %ecx
0000000000012666	movslq	%ecx, %rax
0000000000012669	cmpq	$0x0, %rax
000000000001266d	je	0x12692
0000000000012673	leaq	0x58a27(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001267a	leaq	0x57259(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012681	leaq	0x57f72(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012688	movl	$0x436, %edx
000000000001268d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012692	jmp	0x12697
0000000000012697	movq	-0x18(%rbp), %rax
000000000001269b	movq	0x430(%rax), %rax
00000000000126a2	andq	$0x2, %rax
00000000000126a6	cmpq	$0x0, %rax
00000000000126aa	setne	%cl
00000000000126ad	xorb	$-0x1, %cl
00000000000126b0	andb	$0x1, %cl
00000000000126b3	movzbl	%cl, %edx
00000000000126b6	movslq	%edx, %rax
00000000000126b9	cmpq	$0x0, %rax
00000000000126bd	je	0x126e2
00000000000126c3	leaq	0x589d7(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000126ca	leaq	0x57209(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000126d1	leaq	0x58a89(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000126d8	movl	$0x437, %edx
00000000000126dd	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000126e2	jmp	0x126e7
00000000000126e7	movq	-0x18(%rbp), %rax
00000000000126eb	movzbl	0x57d(%rax), %ecx
00000000000126f2	movq	-0x10(%rbp), %rax
00000000000126f6	movzbl	0x28(%rax), %edx
00000000000126fa	shll	$0x3, %edx
00000000000126fd	orl	%edx, %ecx
00000000000126ff	movb	%cl, %sil
0000000000012702	movb	%sil, -0x1(%rbp)
0000000000012706	jmp	0x12969
000000000001270b	movq	-0x18(%rbp), %rax
000000000001270f	movq	0x430(%rax), %rax
0000000000012716	andq	$0x1, %rax
000000000001271a	cmpq	$0x0, %rax
000000000001271e	setne	%cl
0000000000012721	xorb	$-0x1, %cl
0000000000012724	andb	$0x1, %cl
0000000000012727	movzbl	%cl, %edx
000000000001272a	movslq	%edx, %rax
000000000001272d	cmpq	$0x0, %rax
0000000000012731	je	0x12756
0000000000012737	leaq	0x58963(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
000000000001273e	leaq	0x57195(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012745	leaq	0x57c17(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
000000000001274c	movl	$0x43a, %edx
0000000000012751	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012756	jmp	0x1275b
000000000001275b	movq	-0x18(%rbp), %rax
000000000001275f	movzbl	0x578(%rax), %ecx
0000000000012766	cmpl	$0x3, %ecx
0000000000012769	setne	%dl
000000000001276c	xorb	$-0x1, %dl
000000000001276f	andb	$0x1, %dl
0000000000012772	movzbl	%dl, %ecx
0000000000012775	movslq	%ecx, %rax
0000000000012778	cmpq	$0x0, %rax
000000000001277c	je	0x127a1
0000000000012782	leaq	0x58918(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012789	leaq	0x5714a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012790	leaq	0x57e63(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012797	movl	$0x43b, %edx
000000000001279c	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000127a1	jmp	0x127a6
00000000000127a6	movq	-0x18(%rbp), %rax
00000000000127aa	movq	0x430(%rax), %rax
00000000000127b1	andq	$0x2, %rax
00000000000127b5	cmpq	$0x0, %rax
00000000000127b9	setne	%cl
00000000000127bc	xorb	$-0x1, %cl
00000000000127bf	andb	$0x1, %cl
00000000000127c2	movzbl	%cl, %edx
00000000000127c5	movslq	%edx, %rax
00000000000127c8	cmpq	$0x0, %rax
00000000000127cc	je	0x127f1
00000000000127d2	leaq	0x588c8(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
00000000000127d9	leaq	0x570fa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000127e0	leaq	0x5897a(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000127e7	movl	$0x43c, %edx
00000000000127ec	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000127f1	jmp	0x127f6
00000000000127f6	cmpl	$0x7, -0x20(%rbp)
00000000000127fa	movb	$0x1, %al
00000000000127fc	movb	%al, -0x85(%rbp)
0000000000012802	je	0x12827
0000000000012808	cmpl	$0x8, -0x20(%rbp)
000000000001280c	movb	$0x1, %al
000000000001280e	movb	%al, -0x85(%rbp)
0000000000012814	je	0x12827
000000000001281a	cmpl	$0x9, -0x20(%rbp)
000000000001281e	sete	%al
0000000000012821	movb	%al, -0x85(%rbp)
0000000000012827	movb	-0x85(%rbp), %al
000000000001282d	xorb	$-0x1, %al
000000000001282f	andb	$0x1, %al
0000000000012831	movzbl	%al, %ecx
0000000000012834	movslq	%ecx, %rdx
0000000000012837	cmpq	$0x0, %rdx
000000000001283b	je	0x12860
0000000000012841	leaq	0x58859(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012848	leaq	0x5708b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001284f	leaq	0x58938(%rip), %rcx ## literal pool for: "(register_class == ZYDIS_REGCLASS_XMM) || (register_class == ZYDIS_REGCLASS_YMM) || (register_class == ZYDIS_REGCLASS_ZMM)"
0000000000012856	movl	$0x43f, %edx
000000000001285b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012860	jmp	0x12865
0000000000012865	movq	-0x18(%rbp), %rax
0000000000012869	movzbl	0x57d(%rax), %ecx
0000000000012870	movq	-0x10(%rbp), %rax
0000000000012874	movzbl	0x28(%rax), %edx
0000000000012878	shll	$0x3, %edx
000000000001287b	orl	%edx, %ecx
000000000001287d	movq	-0x10(%rbp), %rax
0000000000012881	movzbl	0x2d(%rax), %edx
0000000000012885	shll	$0x4, %edx
0000000000012888	orl	%edx, %ecx
000000000001288a	movb	%cl, %sil
000000000001288d	movb	%sil, -0x1(%rbp)
0000000000012891	jmp	0x12969
0000000000012896	movq	-0x18(%rbp), %rax
000000000001289a	movq	0x598(%rax), %rax
00000000000128a1	shrq	$0x4, %rax
00000000000128a5	andq	$0xf, %rax
00000000000128a9	movb	%al, %cl
00000000000128ab	movb	%cl, -0x25(%rbp)
00000000000128ae	movq	-0x18(%rbp), %rax
00000000000128b2	cmpl	$0x4, 0xc(%rax)
00000000000128b6	je	0x128ca
00000000000128bc	movq	-0x18(%rbp), %rax
00000000000128c0	cmpl	$0x5, 0xc(%rax)
00000000000128c4	jne	0x12911
00000000000128ca	movl	-0x20(%rbp), %eax
00000000000128cd	addl	$-0x7, %eax
00000000000128d0	subl	$0x2, %eax
00000000000128d3	movl	%eax, -0x8c(%rbp)
00000000000128d9	ja	0x12907
00000000000128df	jmp	0x128e4
00000000000128e4	movq	-0x18(%rbp), %rax
00000000000128e8	movq	0x598(%rax), %rax
00000000000128ef	andq	$0x8, %rax
00000000000128f3	shlq	$0x1, %rax
00000000000128f7	movzbl	-0x25(%rbp), %ecx
00000000000128fb	movl	%ecx, %edx
00000000000128fd	orq	%rax, %rdx
0000000000012900	movb	%dl, %sil
0000000000012903	movb	%sil, -0x25(%rbp)
0000000000012907	jmp	0x1290c
000000000001290c	jmp	0x12911
0000000000012911	movb	-0x25(%rbp), %al
0000000000012914	movb	%al, -0x1(%rbp)
0000000000012917	jmp	0x12969
000000000001291c	movq	-0x10(%rbp), %rax
0000000000012920	movb	0x2f(%rax), %cl
0000000000012923	movb	%cl, -0x1(%rbp)
0000000000012926	jmp	0x12969
000000000001292b	leaq	0x5876f(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012932	leaq	0x56fa1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012939	leaq	0x58c84(%rip), %rcx ## literal pool for: "0"
0000000000012940	movl	$0x45a, %edx
0000000000012945	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001294a	leaq	0x58750(%rip), %rdi ## literal pool for: "ZydisCalcRegisterId"
0000000000012951	leaq	0x56f82(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012958	leaq	0x58c65(%rip), %rcx ## literal pool for: "0"
000000000001295f	movl	$0x45d, %edx
0000000000012964	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012969	movzbl	-0x1(%rbp), %eax
000000000001296d	addq	$0x90, %rsp
0000000000012974	popq	%rbp
0000000000012975	retq
0000000000012976	nop
0000000000012978	loopne	0x12971
000000000001297a	.byte 0xff #bad opcode
000000000001297b	lcalll	*-0x5b000008(%rax)
0000000000012981	stc
0000000000012982	.byte 0xff #bad opcode
0000000000012983	decl	0x3dfffffa(%rip)
0000000000012989	sti
000000000001298a	.byte 0xff #bad opcode
000000000001298b	incl	-0x26c0001(%rsp,%rdi,8)
0000000000012992	.byte 0xff #bad opcode
0000000000012993	lcalll	*(%rsi)
0000000000012995	.byte 0xff #bad opcode
0000000000012996	.byte 0xff #bad opcode
0000000000012997	jmpq	*-0xdb80001(%rdi,%rdi,8)
000000000001299e	.byte 0xff #bad opcode
000000000001299f	.byte 0xff #bad opcode
00000000000129a0	inl	%dx, %eax
00000000000129a1	.byte 0xf2 #bad opcode
00000000000129a2	.byte 0xff #bad opcode
00000000000129a3	decl	-0xd(%rdi)
00000000000129a6	.byte 0xff #bad opcode
00000000000129a7	jmpq	*-0x1(%rbx,%rsi,8)
00000000000129ab	incl	%esi
00000000000129ad	.byte 0xf3 #bad opcode
00000000000129ae	.byte 0xff #bad opcode
00000000000129af	.byte 0xff #bad opcode
00000000000129b0	jmp	0xffffffffe70129a9
00000000000129b5	cmc
00000000000129b6	.byte 0xff #bad opcode
00000000000129b7	incl	-0x9(%rsi)
00000000000129ba	.byte 0xff #bad opcode
00000000000129bb	jmpq	*-0x9(%rbx)
00000000000129be	.byte 0xff #bad opcode
00000000000129bf	callq	*0x48(%rbp)
_ZydisDecodeOperandMemory:
00000000000129c0	pushq	%rbp
00000000000129c1	movq	%rsp, %rbp
00000000000129c4	subq	$0xa0, %rsp
00000000000129cb	movq	%rdi, -0x8(%rbp)
00000000000129cf	movq	%rsi, -0x10(%rbp)
00000000000129d3	movq	%rdx, -0x18(%rbp)
00000000000129d7	movl	%ecx, -0x1c(%rbp)
00000000000129da	cmpq	$0x0, -0x8(%rbp)
00000000000129df	setne	%al
00000000000129e2	xorb	$-0x1, %al
00000000000129e4	andb	$0x1, %al
00000000000129e6	movzbl	%al, %ecx
00000000000129e9	movslq	%ecx, %rdx
00000000000129ec	cmpq	$0x0, %rdx
00000000000129f0	je	0x12a15
00000000000129f6	leaq	0x5880c(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000129fd	leaq	0x56ed6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012a04	leaq	0x56f04(%rip), %rcx ## literal pool for: "context"
0000000000012a0b	movl	$0x58e, %edx
0000000000012a10	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012a15	jmp	0x12a1a
0000000000012a1a	cmpq	$0x0, -0x10(%rbp)
0000000000012a1f	setne	%al
0000000000012a22	xorb	$-0x1, %al
0000000000012a24	andb	$0x1, %al
0000000000012a26	movzbl	%al, %ecx
0000000000012a29	movslq	%ecx, %rdx
0000000000012a2c	cmpq	$0x0, %rdx
0000000000012a30	je	0x12a55
0000000000012a36	leaq	0x587cc(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012a3d	leaq	0x56e96(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012a44	leaq	0x56ecc(%rip), %rcx ## literal pool for: "instruction"
0000000000012a4b	movl	$0x58f, %edx
0000000000012a50	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012a55	jmp	0x12a5a
0000000000012a5a	cmpq	$0x0, -0x18(%rbp)
0000000000012a5f	setne	%al
0000000000012a62	xorb	$-0x1, %al
0000000000012a64	andb	$0x1, %al
0000000000012a66	movzbl	%al, %ecx
0000000000012a69	movslq	%ecx, %rdx
0000000000012a6c	cmpq	$0x0, %rdx
0000000000012a70	je	0x12a95
0000000000012a76	leaq	0x5878c(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012a7d	leaq	0x56e56(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012a84	leaq	0x585aa(%rip), %rcx ## literal pool for: "operand"
0000000000012a8b	movl	$0x590, %edx
0000000000012a90	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012a95	jmp	0x12a9a
0000000000012a9a	movq	-0x10(%rbp), %rax
0000000000012a9e	movq	0x430(%rax), %rax
0000000000012aa5	andq	$0x1, %rax
0000000000012aa9	cmpq	$0x0, %rax
0000000000012aad	setne	%cl
0000000000012ab0	xorb	$-0x1, %cl
0000000000012ab3	andb	$0x1, %cl
0000000000012ab6	movzbl	%cl, %edx
0000000000012ab9	movslq	%edx, %rax
0000000000012abc	cmpq	$0x0, %rax
0000000000012ac0	je	0x12ae5
0000000000012ac6	leaq	0x5873c(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012acd	leaq	0x56e06(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012ad4	leaq	0x57888(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000001"
0000000000012adb	movl	$0x591, %edx
0000000000012ae0	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012ae5	jmp	0x12aea
0000000000012aea	movq	-0x10(%rbp), %rax
0000000000012aee	movzbl	0x578(%rax), %ecx
0000000000012af5	cmpl	$0x3, %ecx
0000000000012af8	setne	%dl
0000000000012afb	xorb	$-0x1, %dl
0000000000012afe	andb	$0x1, %dl
0000000000012b01	movzbl	%dl, %ecx
0000000000012b04	movslq	%ecx, %rax
0000000000012b07	cmpq	$0x0, %rax
0000000000012b0b	je	0x12b30
0000000000012b11	leaq	0x586f1(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012b18	leaq	0x56dbb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012b1f	leaq	0x57ad4(%rip), %rcx ## literal pool for: "instruction->raw.modrm.mod != 3"
0000000000012b26	movl	$0x592, %edx
0000000000012b2b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012b30	jmp	0x12b35
0000000000012b35	cmpl	$0x0, -0x1c(%rbp)
0000000000012b39	movb	$0x1, %al
0000000000012b3b	movb	%al, -0x1f(%rbp)
0000000000012b3e	je	0x12b92
0000000000012b44	xorl	%eax, %eax
0000000000012b46	movb	%al, %cl
0000000000012b48	movq	-0x10(%rbp), %rdx
0000000000012b4c	movzbl	0x57a(%rdx), %eax
0000000000012b53	cmpl	$0x4, %eax
0000000000012b56	movb	%cl, -0x20(%rbp)
0000000000012b59	jne	0x12b8c
0000000000012b5f	movq	-0x10(%rbp), %rax
0000000000012b63	movzbl	0x17(%rax), %ecx
0000000000012b67	cmpl	$0x20, %ecx
0000000000012b6a	movb	$0x1, %dl
0000000000012b6c	movb	%dl, -0x21(%rbp)
0000000000012b6f	je	0x12b86
0000000000012b75	movq	-0x10(%rbp), %rax
0000000000012b79	movzbl	0x17(%rax), %ecx
0000000000012b7d	cmpl	$0x40, %ecx
0000000000012b80	sete	%dl
0000000000012b83	movb	%dl, -0x21(%rbp)
0000000000012b86	movb	-0x21(%rbp), %al
0000000000012b89	movb	%al, -0x20(%rbp)
0000000000012b8c	movb	-0x20(%rbp), %al
0000000000012b8f	movb	%al, -0x1f(%rbp)
0000000000012b92	movb	-0x1f(%rbp), %al
0000000000012b95	xorb	$-0x1, %al
0000000000012b97	andb	$0x1, %al
0000000000012b99	movzbl	%al, %ecx
0000000000012b9c	movslq	%ecx, %rdx
0000000000012b9f	cmpq	$0x0, %rdx
0000000000012ba3	je	0x12bc8
0000000000012ba9	leaq	0x58659(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012bb0	leaq	0x56d23(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012bb7	leaq	0x58664(%rip), %rcx ## literal pool for: "!vidx_register_class || ((instruction->raw.modrm.rm == 4) && ((instruction->address_width == 32) || (instruction->address_width == 64)))"
0000000000012bbe	movl	$0x594, %edx
0000000000012bc3	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012bc8	jmp	0x12bcd
0000000000012bcd	movq	-0x18(%rbp), %rax
0000000000012bd1	movl	$0x2, 0x4(%rax)
0000000000012bd8	movq	-0x18(%rbp), %rax
0000000000012bdc	movl	$0x1, 0x28(%rax)
0000000000012be3	movq	-0x10(%rbp), %rax
0000000000012be7	movb	0x57a(%rax), %cl
0000000000012bed	movb	%cl, -0x1d(%rbp)
0000000000012bf0	movb	$0x0, -0x1e(%rbp)
0000000000012bf4	movq	-0x10(%rbp), %rax
0000000000012bf8	movzbl	0x17(%rax), %edx
0000000000012bfc	movl	%edx, %esi
0000000000012bfe	subl	$0x10, %esi
0000000000012c01	movl	%edx, -0x28(%rbp)
0000000000012c04	movl	%esi, -0x2c(%rbp)
0000000000012c07	je	0x12c3a
0000000000012c0d	jmp	0x12c12
0000000000012c12	movl	-0x28(%rbp), %eax
0000000000012c15	subl	$0x20, %eax
0000000000012c18	movl	%eax, -0x30(%rbp)
0000000000012c1b	je	0x12d0f
0000000000012c21	jmp	0x12c26
0000000000012c26	movl	-0x28(%rbp), %eax
0000000000012c29	subl	$0x40, %eax
0000000000012c2c	movl	%eax, -0x34(%rbp)
0000000000012c2f	je	0x12f88
0000000000012c35	jmp	0x13233
0000000000012c3a	movzbl	-0x1d(%rbp), %eax
0000000000012c3e	movl	%eax, %ecx
0000000000012c40	leaq	_ZydisDecodeOperandMemory.bases(%rip), %rdx
0000000000012c47	movl	(%rdx,%rcx,4), %eax
0000000000012c4a	movq	-0x18(%rbp), %rcx
0000000000012c4e	movl	%eax, 0x30(%rcx)
0000000000012c51	movzbl	-0x1d(%rbp), %eax
0000000000012c55	movl	%eax, %ecx
0000000000012c57	leaq	_ZydisDecodeOperandMemory.indices(%rip), %rdx
0000000000012c5e	movl	(%rdx,%rcx,4), %eax
0000000000012c61	movq	-0x18(%rbp), %rcx
0000000000012c65	movl	%eax, 0x34(%rcx)
0000000000012c68	movq	-0x18(%rbp), %rcx
0000000000012c6c	movl	0x34(%rcx), %eax
0000000000012c6f	testl	%eax, %eax
0000000000012c71	setne	0x38(%rcx)
0000000000012c75	movq	-0x10(%rbp), %rcx
0000000000012c79	movzbl	0x578(%rcx), %eax
0000000000012c80	testl	%eax, %eax
0000000000012c82	movl	%eax, -0x38(%rbp)
0000000000012c85	je	0x12cb8
0000000000012c8b	jmp	0x12c90
0000000000012c90	movl	-0x38(%rbp), %eax
0000000000012c93	subl	$0x1, %eax
0000000000012c96	movl	%eax, -0x3c(%rbp)
0000000000012c99	je	0x12cd9
0000000000012c9f	jmp	0x12ca4
0000000000012ca4	movl	-0x38(%rbp), %eax
0000000000012ca7	subl	$0x2, %eax
0000000000012caa	movl	%eax, -0x40(%rbp)
0000000000012cad	je	0x12ce2
0000000000012cb3	jmp	0x12ceb
0000000000012cb8	movzbl	-0x1d(%rbp), %eax
0000000000012cbc	cmpl	$0x6, %eax
0000000000012cbf	jne	0x12cd4
0000000000012cc5	movb	$0x10, -0x1e(%rbp)
0000000000012cc9	movq	-0x18(%rbp), %rax
0000000000012ccd	movl	$0x0, 0x30(%rax)
0000000000012cd4	jmp	0x12d0a
0000000000012cd9	movb	$0x8, -0x1e(%rbp)
0000000000012cdd	jmp	0x12d0a
0000000000012ce2	movb	$0x10, -0x1e(%rbp)
0000000000012ce6	jmp	0x12d0a
0000000000012ceb	leaq	0x58517(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012cf2	leaq	0x56be1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012cf9	leaq	0x588c4(%rip), %rcx ## literal pool for: "0"
0000000000012d00	movl	$0x5bc, %edx
0000000000012d05	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012d0a	jmp	0x13252
0000000000012d0f	movq	-0x8(%rbp), %rdi
0000000000012d13	movq	-0x10(%rbp), %rsi
0000000000012d17	movl	$0x5, %edx
0000000000012d1c	movl	$0x3, %ecx
0000000000012d21	callq	_ZydisCalcRegisterId
0000000000012d26	movzbl	%al, %ecx
0000000000012d29	addl	$0x25, %ecx
0000000000012d2c	movq	-0x18(%rbp), %rsi
0000000000012d30	movl	%ecx, 0x30(%rsi)
0000000000012d33	movq	-0x10(%rbp), %rsi
0000000000012d37	movzbl	0x578(%rsi), %ecx
0000000000012d3e	testl	%ecx, %ecx
0000000000012d40	movl	%ecx, -0x44(%rbp)
0000000000012d43	je	0x12d76
0000000000012d49	jmp	0x12d4e
0000000000012d4e	movl	-0x44(%rbp), %eax
0000000000012d51	subl	$0x1, %eax
0000000000012d54	movl	%eax, -0x48(%rbp)
0000000000012d57	je	0x12db7
0000000000012d5d	jmp	0x12d62
0000000000012d62	movl	-0x44(%rbp), %eax
0000000000012d65	subl	$0x2, %eax
0000000000012d68	movl	%eax, -0x4c(%rbp)
0000000000012d6b	je	0x12dc0
0000000000012d71	jmp	0x12dc9
0000000000012d76	movzbl	-0x1d(%rbp), %eax
0000000000012d7a	cmpl	$0x5, %eax
0000000000012d7d	jne	0x12db2
0000000000012d83	movq	-0x8(%rbp), %rax
0000000000012d87	movq	(%rax), %rax
0000000000012d8a	cmpl	$0x0, (%rax)
0000000000012d8d	jne	0x12da3
0000000000012d93	movq	-0x18(%rbp), %rax
0000000000012d97	movl	$0xc4, 0x30(%rax)
0000000000012d9e	jmp	0x12dae
0000000000012da3	movq	-0x18(%rbp), %rax
0000000000012da7	movl	$0x0, 0x30(%rax)
0000000000012dae	movb	$0x20, -0x1e(%rbp)
0000000000012db2	jmp	0x12de8
0000000000012db7	movb	$0x8, -0x1e(%rbp)
0000000000012dbb	jmp	0x12de8
0000000000012dc0	movb	$0x20, -0x1e(%rbp)
0000000000012dc4	jmp	0x12de8
0000000000012dc9	leaq	0x58439(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012dd0	leaq	0x56b03(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012dd7	leaq	0x587e6(%rip), %rcx ## literal pool for: "0"
0000000000012dde	movl	$0x5da, %edx
0000000000012de3	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012de8	movzbl	-0x1d(%rbp), %eax
0000000000012dec	cmpl	$0x4, %eax
0000000000012def	jne	0x12f70
0000000000012df5	movq	-0x10(%rbp), %rax
0000000000012df9	movq	0x430(%rax), %rax
0000000000012e00	andq	$0x2, %rax
0000000000012e04	cmpq	$0x0, %rax
0000000000012e08	setne	%cl
0000000000012e0b	xorb	$-0x1, %cl
0000000000012e0e	andb	$0x1, %cl
0000000000012e11	movzbl	%cl, %edx
0000000000012e14	movslq	%edx, %rax
0000000000012e17	cmpq	$0x0, %rax
0000000000012e1b	je	0x12e40
0000000000012e21	leaq	0x583e1(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000012e28	leaq	0x56aab(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000012e2f	leaq	0x5832b(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
0000000000012e36	movl	$0x5de, %edx
0000000000012e3b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000012e40	jmp	0x12e45
0000000000012e45	cmpl	$0x0, -0x1c(%rbp)
0000000000012e49	je	0x12e5a
0000000000012e4f	movl	-0x1c(%rbp), %eax
0000000000012e52	movl	%eax, -0x50(%rbp)
0000000000012e55	jmp	0x12e67
0000000000012e5a	movl	$0x3, %eax
0000000000012e5f	movl	%eax, -0x50(%rbp)
0000000000012e62	jmp	0x12e67
0000000000012e67	movl	-0x50(%rbp), %eax
0000000000012e6a	movq	-0x8(%rbp), %rdi
0000000000012e6e	movq	-0x10(%rbp), %rsi
0000000000012e72	movl	-0x1c(%rbp), %ecx
0000000000012e75	cmpl	$0x0, %ecx
0000000000012e78	movl	$0x7, %ecx
0000000000012e7d	movl	$0x6, %edx
0000000000012e82	cmovnel	%ecx, %edx
0000000000012e85	cmpl	$0x0, -0x1c(%rbp)
0000000000012e89	movl	%eax, -0x54(%rbp)
0000000000012e8c	movq	%rdi, -0x60(%rbp)
0000000000012e90	movq	%rsi, -0x68(%rbp)
0000000000012e94	movl	%edx, -0x6c(%rbp)
0000000000012e97	je	0x12ea8
0000000000012e9d	movl	-0x1c(%rbp), %eax
0000000000012ea0	movl	%eax, -0x70(%rbp)
0000000000012ea3	jmp	0x12eb5
0000000000012ea8	movl	$0x3, %eax
0000000000012ead	movl	%eax, -0x70(%rbp)
0000000000012eb0	jmp	0x12eb5
0000000000012eb5	movl	-0x70(%rbp), %eax
0000000000012eb8	movq	-0x60(%rbp), %rdi
0000000000012ebc	movq	-0x68(%rbp), %rsi
0000000000012ec0	movl	-0x6c(%rbp), %edx
0000000000012ec3	movl	%eax, %ecx
0000000000012ec5	callq	_ZydisCalcRegisterId
0000000000012eca	movl	-0x54(%rbp), %edi
0000000000012ecd	movzbl	%al, %esi
0000000000012ed0	callq	_ZydisRegisterEncode
0000000000012ed5	movq	-0x18(%rbp), %r8
0000000000012ed9	movl	%eax, 0x34(%r8)
0000000000012edd	movq	-0x10(%rbp), %r8
0000000000012ee1	movzbl	0x57c(%r8), %ecx
0000000000012ee9	movl	$0x1, %eax
0000000000012eee	shll	%cl, %eax
0000000000012ef0	movb	%al, %cl
0000000000012ef2	movq	-0x18(%rbp), %r8
0000000000012ef6	movb	%cl, 0x38(%r8)
0000000000012efa	movq	-0x18(%rbp), %r8
0000000000012efe	cmpl	$0x29, 0x34(%r8)
0000000000012f03	jne	0x12f1c
0000000000012f09	movq	-0x18(%rbp), %rax
0000000000012f0d	movl	$0x0, 0x34(%rax)
0000000000012f14	movq	-0x18(%rbp), %rax
0000000000012f18	movb	$0x0, 0x38(%rax)
0000000000012f1c	movq	-0x18(%rbp), %rax
0000000000012f20	cmpl	$0x2a, 0x30(%rax)
0000000000012f24	jne	0x12f6b
0000000000012f2a	movq	-0x10(%rbp), %rax
0000000000012f2e	movzbl	0x578(%rax), %ecx
0000000000012f35	cmpl	$0x0, %ecx
0000000000012f38	jne	0x12f49
0000000000012f3e	movq	-0x18(%rbp), %rax
0000000000012f42	movl	$0x0, 0x30(%rax)
0000000000012f49	movq	-0x10(%rbp), %rax
0000000000012f4d	movzbl	0x578(%rax), %ecx
0000000000012f54	cmpl	$0x1, %ecx
0000000000012f57	movl	$0x8, %ecx
0000000000012f5c	movl	$0x20, %edx
0000000000012f61	cmovel	%ecx, %edx
0000000000012f64	movb	%dl, %sil
0000000000012f67	movb	%sil, -0x1e(%rbp)
0000000000012f6b	jmp	0x12f83
0000000000012f70	movq	-0x18(%rbp), %rax
0000000000012f74	movl	$0x0, 0x34(%rax)
0000000000012f7b	movq	-0x18(%rbp), %rax
0000000000012f7f	movb	$0x0, 0x38(%rax)
0000000000012f83	jmp	0x13252
0000000000012f88	movq	-0x8(%rbp), %rdi
0000000000012f8c	movq	-0x10(%rbp), %rsi
0000000000012f90	movl	$0x5, %edx
0000000000012f95	movl	$0x4, %ecx
0000000000012f9a	callq	_ZydisCalcRegisterId
0000000000012f9f	movzbl	%al, %ecx
0000000000012fa2	addl	$0x35, %ecx
0000000000012fa5	movq	-0x18(%rbp), %rsi
0000000000012fa9	movl	%ecx, 0x30(%rsi)
0000000000012fac	movq	-0x10(%rbp), %rsi
0000000000012fb0	movzbl	0x578(%rsi), %ecx
0000000000012fb7	testl	%ecx, %ecx
0000000000012fb9	movl	%ecx, -0x74(%rbp)
0000000000012fbc	je	0x12fef
0000000000012fc2	jmp	0x12fc7
0000000000012fc7	movl	-0x74(%rbp), %eax
0000000000012fca	subl	$0x1, %eax
0000000000012fcd	movl	%eax, -0x78(%rbp)
0000000000012fd0	je	0x13030
0000000000012fd6	jmp	0x12fdb
0000000000012fdb	movl	-0x74(%rbp), %eax
0000000000012fde	subl	$0x2, %eax
0000000000012fe1	movl	%eax, -0x7c(%rbp)
0000000000012fe4	je	0x13039
0000000000012fea	jmp	0x13042
0000000000012fef	movzbl	-0x1d(%rbp), %eax
0000000000012ff3	cmpl	$0x5, %eax
0000000000012ff6	jne	0x1302b
0000000000012ffc	movq	-0x8(%rbp), %rax
0000000000013000	movq	(%rax), %rax
0000000000013003	cmpl	$0x0, (%rax)
0000000000013006	jne	0x1301c
000000000001300c	movq	-0x18(%rbp), %rax
0000000000013010	movl	$0xc5, 0x30(%rax)
0000000000013017	jmp	0x13027
000000000001301c	movq	-0x18(%rbp), %rax
0000000000013020	movl	$0x0, 0x30(%rax)
0000000000013027	movb	$0x20, -0x1e(%rbp)
000000000001302b	jmp	0x13061
0000000000013030	movb	$0x8, -0x1e(%rbp)
0000000000013034	jmp	0x13061
0000000000013039	movb	$0x20, -0x1e(%rbp)
000000000001303d	jmp	0x13061
0000000000013042	leaq	0x581c0(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000013049	leaq	0x5688a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013050	leaq	0x5856d(%rip), %rcx ## literal pool for: "0"
0000000000013057	movl	$0x613, %edx
000000000001305c	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013061	movzbl	-0x1d(%rbp), %eax
0000000000013065	andl	$0x7, %eax
0000000000013068	cmpl	$0x4, %eax
000000000001306b	jne	0x1321b
0000000000013071	movq	-0x10(%rbp), %rax
0000000000013075	movq	0x430(%rax), %rax
000000000001307c	andq	$0x2, %rax
0000000000013080	cmpq	$0x0, %rax
0000000000013084	setne	%cl
0000000000013087	xorb	$-0x1, %cl
000000000001308a	andb	$0x1, %cl
000000000001308d	movzbl	%cl, %edx
0000000000013090	movslq	%edx, %rax
0000000000013093	cmpq	$0x0, %rax
0000000000013097	je	0x130bc
000000000001309d	leaq	0x58165(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
00000000000130a4	leaq	0x5682f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000130ab	leaq	0x580af(%rip), %rcx ## literal pool for: "instruction->attributes & 0x0000000000000002"
00000000000130b2	movl	$0x617, %edx
00000000000130b7	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000130bc	jmp	0x130c1
00000000000130c1	cmpl	$0x0, -0x1c(%rbp)
00000000000130c5	je	0x130d6
00000000000130cb	movl	-0x1c(%rbp), %eax
00000000000130ce	movl	%eax, -0x80(%rbp)
00000000000130d1	jmp	0x130e3
00000000000130d6	movl	$0x4, %eax
00000000000130db	movl	%eax, -0x80(%rbp)
00000000000130de	jmp	0x130e3
00000000000130e3	movl	-0x80(%rbp), %eax
00000000000130e6	movq	-0x8(%rbp), %rdi
00000000000130ea	movq	-0x10(%rbp), %rsi
00000000000130ee	movl	-0x1c(%rbp), %ecx
00000000000130f1	cmpl	$0x0, %ecx
00000000000130f4	movl	$0x7, %ecx
00000000000130f9	movl	$0x6, %edx
00000000000130fe	cmovnel	%ecx, %edx
0000000000013101	cmpl	$0x0, -0x1c(%rbp)
0000000000013105	movl	%eax, -0x84(%rbp)
000000000001310b	movq	%rdi, -0x90(%rbp)
0000000000013112	movq	%rsi, -0x98(%rbp)
0000000000013119	movl	%edx, -0x9c(%rbp)
000000000001311f	je	0x13133
0000000000013125	movl	-0x1c(%rbp), %eax
0000000000013128	movl	%eax, -0xa0(%rbp)
000000000001312e	jmp	0x13143
0000000000013133	movl	$0x4, %eax
0000000000013138	movl	%eax, -0xa0(%rbp)
000000000001313e	jmp	0x13143
0000000000013143	movl	-0xa0(%rbp), %eax
0000000000013149	movq	-0x90(%rbp), %rdi
0000000000013150	movq	-0x98(%rbp), %rsi
0000000000013157	movl	-0x9c(%rbp), %edx
000000000001315d	movl	%eax, %ecx
000000000001315f	callq	_ZydisCalcRegisterId
0000000000013164	movl	-0x84(%rbp), %edi
000000000001316a	movzbl	%al, %esi
000000000001316d	callq	_ZydisRegisterEncode
0000000000013172	movq	-0x18(%rbp), %r8
0000000000013176	movl	%eax, 0x34(%r8)
000000000001317a	movq	-0x10(%rbp), %r8
000000000001317e	movzbl	0x57c(%r8), %ecx
0000000000013186	movl	$0x1, %eax
000000000001318b	shll	%cl, %eax
000000000001318d	movb	%al, %cl
000000000001318f	movq	-0x18(%rbp), %r8
0000000000013193	movb	%cl, 0x38(%r8)
0000000000013197	movq	-0x18(%rbp), %r8
000000000001319b	cmpl	$0x39, 0x34(%r8)
00000000000131a0	jne	0x131b9
00000000000131a6	movq	-0x18(%rbp), %rax
00000000000131aa	movl	$0x0, 0x34(%rax)
00000000000131b1	movq	-0x18(%rbp), %rax
00000000000131b5	movb	$0x0, 0x38(%rax)
00000000000131b9	movq	-0x18(%rbp), %rax
00000000000131bd	cmpl	$0x3a, 0x30(%rax)
00000000000131c1	je	0x131d5
00000000000131c7	movq	-0x18(%rbp), %rax
00000000000131cb	cmpl	$0x42, 0x30(%rax)
00000000000131cf	jne	0x13216
00000000000131d5	movq	-0x10(%rbp), %rax
00000000000131d9	movzbl	0x578(%rax), %ecx
00000000000131e0	cmpl	$0x0, %ecx
00000000000131e3	jne	0x131f4
00000000000131e9	movq	-0x18(%rbp), %rax
00000000000131ed	movl	$0x0, 0x30(%rax)
00000000000131f4	movq	-0x10(%rbp), %rax
00000000000131f8	movzbl	0x578(%rax), %ecx
00000000000131ff	cmpl	$0x1, %ecx
0000000000013202	movl	$0x8, %ecx
0000000000013207	movl	$0x20, %edx
000000000001320c	cmovel	%ecx, %edx
000000000001320f	movb	%dl, %sil
0000000000013212	movb	%sil, -0x1e(%rbp)
0000000000013216	jmp	0x1322e
000000000001321b	movq	-0x18(%rbp), %rax
000000000001321f	movl	$0x0, 0x34(%rax)
0000000000013226	movq	-0x18(%rbp), %rax
000000000001322a	movb	$0x0, 0x38(%rax)
000000000001322e	jmp	0x13252
0000000000013233	leaq	0x57fcf(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
000000000001323a	leaq	0x56699(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013241	leaq	0x5837c(%rip), %rcx ## literal pool for: "0"
0000000000013248	movl	$0x634, %edx
000000000001324d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013252	cmpb	$0x0, -0x1e(%rbp)
0000000000013256	je	0x132c9
000000000001325c	movq	-0x10(%rbp), %rax
0000000000013260	movzbl	0x588(%rax), %ecx
0000000000013267	movzbl	-0x1e(%rbp), %edx
000000000001326b	cmpl	%edx, %ecx
000000000001326d	sete	%sil
0000000000013271	xorb	$-0x1, %sil
0000000000013275	andb	$0x1, %sil
0000000000013279	movzbl	%sil, %ecx
000000000001327d	movslq	%ecx, %rax
0000000000013280	cmpq	$0x0, %rax
0000000000013284	je	0x132a9
000000000001328a	leaq	0x57f78(%rip), %rdi ## literal pool for: "ZydisDecodeOperandMemory"
0000000000013291	leaq	0x56642(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013298	leaq	0x5800c(%rip), %rcx ## literal pool for: "instruction->raw.disp.size == displacement_size"
000000000001329f	movl	$0x638, %edx
00000000000132a4	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000132a9	jmp	0x132ae
00000000000132ae	movq	-0x18(%rbp), %rax
00000000000132b2	movb	$0x1, 0x40(%rax)
00000000000132b6	movq	-0x10(%rbp), %rax
00000000000132ba	movq	0x580(%rax), %rax
00000000000132c1	movq	-0x18(%rbp), %rcx
00000000000132c5	movq	%rax, 0x48(%rcx)
00000000000132c9	movl	$0x100000, %eax
00000000000132ce	addq	$0xa0, %rsp
00000000000132d5	popq	%rbp
00000000000132d6	retq
00000000000132d7	nopw	(%rax,%rax)
_ZydisSetOperandSizeAndElementInfo:
00000000000132e0	pushq	%rbp
00000000000132e1	movq	%rsp, %rbp
00000000000132e4	subq	$0x80, %rsp
00000000000132eb	movq	%rdi, -0x8(%rbp)
00000000000132ef	movq	%rsi, -0x10(%rbp)
00000000000132f3	movq	%rdx, -0x18(%rbp)
00000000000132f7	movq	%rcx, -0x20(%rbp)
00000000000132fb	cmpq	$0x0, -0x8(%rbp)
0000000000013300	setne	%al
0000000000013303	xorb	$-0x1, %al
0000000000013305	andb	$0x1, %al
0000000000013307	movzbl	%al, %r8d
000000000001330b	movslq	%r8d, %rcx
000000000001330e	cmpq	$0x0, %rcx
0000000000013312	je	0x13337
0000000000013318	leaq	0x57fbc(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001331f	leaq	0x565b4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013326	leaq	0x565e2(%rip), %rcx ## literal pool for: "context"
000000000001332d	movl	$0x46f, %edx
0000000000013332	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013337	jmp	0x1333c
000000000001333c	cmpq	$0x0, -0x10(%rbp)
0000000000013341	setne	%al
0000000000013344	xorb	$-0x1, %al
0000000000013346	andb	$0x1, %al
0000000000013348	movzbl	%al, %ecx
000000000001334b	movslq	%ecx, %rdx
000000000001334e	cmpq	$0x0, %rdx
0000000000013352	je	0x13377
0000000000013358	leaq	0x57f7c(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001335f	leaq	0x56574(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013366	leaq	0x565aa(%rip), %rcx ## literal pool for: "instruction"
000000000001336d	movl	$0x470, %edx
0000000000013372	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013377	jmp	0x1337c
000000000001337c	cmpq	$0x0, -0x18(%rbp)
0000000000013381	setne	%al
0000000000013384	xorb	$-0x1, %al
0000000000013386	andb	$0x1, %al
0000000000013388	movzbl	%al, %ecx
000000000001338b	movslq	%ecx, %rdx
000000000001338e	cmpq	$0x0, %rdx
0000000000013392	je	0x133b7
0000000000013398	leaq	0x57f3c(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001339f	leaq	0x56534(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000133a6	leaq	0x57c88(%rip), %rcx ## literal pool for: "operand"
00000000000133ad	movl	$0x471, %edx
00000000000133b2	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000133b7	jmp	0x133bc
00000000000133bc	cmpq	$0x0, -0x20(%rbp)
00000000000133c1	setne	%al
00000000000133c4	xorb	$-0x1, %al
00000000000133c6	andb	$0x1, %al
00000000000133c8	movzbl	%al, %ecx
00000000000133cb	movslq	%ecx, %rdx
00000000000133ce	cmpq	$0x0, %rdx
00000000000133d2	je	0x133f7
00000000000133d8	leaq	0x57efc(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000133df	leaq	0x564f4(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000133e6	leaq	0x56d4d(%rip), %rcx ## literal pool for: "definition"
00000000000133ed	movl	$0x472, %edx
00000000000133f2	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000133f7	jmp	0x133fc
00000000000133fc	movq	-0x18(%rbp), %rax
0000000000013400	movl	0x4(%rax), %ecx
0000000000013403	decl	%ecx
0000000000013405	movl	%ecx, %eax
0000000000013407	subl	$0x3, %ecx
000000000001340a	movq	%rax, -0x28(%rbp)
000000000001340e	movl	%ecx, -0x2c(%rbp)
0000000000013411	ja	0x13ca7
0000000000013417	leaq	0x98a(%rip), %rax
000000000001341e	movq	-0x28(%rbp), %rcx
0000000000013422	movslq	(%rax,%rcx,4), %rdx
0000000000013426	addq	%rax, %rdx
0000000000013429	jmpq	*%rdx
000000000001342b	movq	-0x20(%rbp), %rax
000000000001342f	movq	-0x8(%rbp), %rcx
0000000000013433	movzbl	0x24(%rcx), %edx
0000000000013437	movl	%edx, %ecx
0000000000013439	cmpw	$0x0, 0x2(%rax,%rcx,2)
000000000001343f	je	0x1346b
0000000000013445	movq	-0x20(%rbp), %rax
0000000000013449	movq	-0x8(%rbp), %rcx
000000000001344d	movzbl	0x24(%rcx), %edx
0000000000013451	movl	%edx, %ecx
0000000000013453	movzwl	0x2(%rax,%rcx,2), %edx
0000000000013458	shll	$0x3, %edx
000000000001345b	movw	%dx, %si
000000000001345e	movq	-0x18(%rbp), %rax
0000000000013462	movw	%si, 0x14(%rax)
0000000000013466	jmp	0x13488
000000000001346b	movq	-0x8(%rbp), %rax
000000000001346f	movq	(%rax), %rax
0000000000013472	movl	(%rax), %edi
0000000000013474	movq	-0x18(%rbp), %rax
0000000000013478	movl	0x20(%rax), %esi
000000000001347b	callq	_ZydisRegisterGetWidth
0000000000013480	movq	-0x18(%rbp), %rcx
0000000000013484	movw	%ax, 0x14(%rcx)
0000000000013488	movq	-0x18(%rbp), %rax
000000000001348c	movl	$0x3, 0x18(%rax)
0000000000013493	movq	-0x18(%rbp), %rax
0000000000013497	movw	0x14(%rax), %cx
000000000001349b	movq	-0x18(%rbp), %rax
000000000001349f	movw	%cx, 0x1c(%rax)
00000000000134a3	jmp	0x13cc6
00000000000134a8	movq	-0x10(%rbp), %rax
00000000000134ac	movl	0xc(%rax), %ecx
00000000000134af	movl	%ecx, %edx
00000000000134b1	subl	$0x4, %edx
00000000000134b4	movl	%ecx, -0x30(%rbp)
00000000000134b7	movl	%edx, -0x34(%rbp)
00000000000134ba	jb	0x134ed
00000000000134c0	jmp	0x134c5
00000000000134c5	movl	-0x30(%rbp), %eax
00000000000134c8	subl	$0x4, %eax
00000000000134cb	movl	%eax, -0x38(%rbp)
00000000000134ce	je	0x135f0
00000000000134d4	jmp	0x134d9
00000000000134d9	movl	-0x30(%rbp), %eax
00000000000134dc	subl	$0x5, %eax
00000000000134df	movl	%eax, -0x3c(%rbp)
00000000000134e2	je	0x137eb
00000000000134e8	jmp	0x13b82
00000000000134ed	movq	-0x18(%rbp), %rax
00000000000134f1	cmpl	$0x2, 0x28(%rax)
00000000000134f5	jne	0x13575
00000000000134fb	movq	-0x20(%rbp), %rax
00000000000134ff	movq	-0x8(%rbp), %rcx
0000000000013503	movzbl	0x24(%rcx), %edx
0000000000013507	movl	%edx, %ecx
0000000000013509	movzwl	0x2(%rax,%rcx,2), %edx
000000000001350e	cmpl	$0x0, %edx
0000000000013511	sete	%sil
0000000000013515	xorb	$-0x1, %sil
0000000000013519	andb	$0x1, %sil
000000000001351d	movzbl	%sil, %edx
0000000000013521	movslq	%edx, %rax
0000000000013524	cmpq	$0x0, %rax
0000000000013528	je	0x1354d
000000000001352e	leaq	0x57da6(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013535	leaq	0x5639e(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001353c	leaq	0x57dba(%rip), %rcx ## literal pool for: "definition->size[context->eosz_index] == 0"
0000000000013543	movl	$0x48e, %edx
0000000000013548	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001354d	jmp	0x13552
0000000000013552	movq	-0x10(%rbp), %rax
0000000000013556	movzbl	0x17(%rax), %ecx
000000000001355a	movw	%cx, %dx
000000000001355d	movq	-0x18(%rbp), %rax
0000000000013561	movw	%dx, 0x14(%rax)
0000000000013565	movq	-0x18(%rbp), %rax
0000000000013569	movl	$0x3, 0x18(%rax)
0000000000013570	jmp	0x135eb
0000000000013575	movq	-0x20(%rbp), %rax
0000000000013579	movq	-0x8(%rbp), %rcx
000000000001357d	movzbl	0x24(%rcx), %edx
0000000000013581	movl	%edx, %ecx
0000000000013583	cmpw	$0x0, 0x2(%rax,%rcx,2)
0000000000013589	setne	%sil
000000000001358d	xorb	$-0x1, %sil
0000000000013591	andb	$0x1, %sil
0000000000013595	movzbl	%sil, %edx
0000000000013599	movslq	%edx, %rax
000000000001359c	cmpq	$0x0, %rax
00000000000135a0	je	0x135c5
00000000000135a6	leaq	0x57d2e(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000135ad	leaq	0x56326(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000135b4	leaq	0x57d6d(%rip), %rcx ## literal pool for: "definition->size[context->eosz_index]"
00000000000135bb	movl	$0x493, %edx
00000000000135c0	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000135c5	jmp	0x135ca
00000000000135ca	movq	-0x20(%rbp), %rax
00000000000135ce	movq	-0x8(%rbp), %rcx
00000000000135d2	movzbl	0x24(%rcx), %edx
00000000000135d6	movl	%edx, %ecx
00000000000135d8	movzwl	0x2(%rax,%rcx,2), %edx
00000000000135dd	shll	$0x3, %edx
00000000000135e0	movw	%dx, %si
00000000000135e3	movq	-0x18(%rbp), %rax
00000000000135e7	movw	%si, 0x14(%rax)
00000000000135eb	jmp	0x13ba1
00000000000135f0	movq	-0x20(%rbp), %rax
00000000000135f4	movq	-0x8(%rbp), %rcx
00000000000135f8	movzbl	0x24(%rcx), %edx
00000000000135fc	movl	%edx, %ecx
00000000000135fe	cmpw	$0x0, 0x2(%rax,%rcx,2)
0000000000013604	je	0x13630
000000000001360a	movq	-0x20(%rbp), %rax
000000000001360e	movq	-0x8(%rbp), %rcx
0000000000013612	movzbl	0x24(%rcx), %edx
0000000000013616	movl	%edx, %ecx
0000000000013618	movzwl	0x2(%rax,%rcx,2), %edx
000000000001361d	shll	$0x3, %edx
0000000000013620	movw	%dx, %si
0000000000013623	movq	-0x18(%rbp), %rax
0000000000013627	movw	%si, 0x14(%rax)
000000000001362b	jmp	0x137a0
0000000000013630	movq	-0x10(%rbp), %rax
0000000000013634	cmpw	$0x0, 0x48c(%rax)
000000000001363c	setne	%cl
000000000001363f	xorb	$-0x1, %cl
0000000000013642	andb	$0x1, %cl
0000000000013645	movzbl	%cl, %edx
0000000000013648	movslq	%edx, %rax
000000000001364b	cmpq	$0x0, %rax
000000000001364f	je	0x13674
0000000000013655	leaq	0x57c7f(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001365c	leaq	0x56277(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013663	leaq	0x57ce4(%rip), %rcx ## literal pool for: "instruction->avx.vector_length"
000000000001366a	movl	$0x4a1, %edx
000000000001366f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013674	jmp	0x13679
0000000000013679	movq	-0x8(%rbp), %rax
000000000001367d	cmpb	$0x0, 0x34(%rax)
0000000000013681	setne	%cl
0000000000013684	xorb	$-0x1, %cl
0000000000013687	andb	$0x1, %cl
000000000001368a	movzbl	%cl, %edx
000000000001368d	movslq	%edx, %rax
0000000000013690	cmpq	$0x0, %rax
0000000000013694	je	0x136b9
000000000001369a	leaq	0x57c3a(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000136a1	leaq	0x56232(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000136a8	leaq	0x57cbe(%rip), %rcx ## literal pool for: "context->evex.element_size"
00000000000136af	movl	$0x4a2, %edx
00000000000136b4	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000136b9	jmp	0x136be
00000000000136be	movq	-0x8(%rbp), %rax
00000000000136c2	movl	0x30(%rax), %ecx
00000000000136c5	movl	%ecx, %edx
00000000000136c7	subl	$0x1, %edx
00000000000136ca	movl	%ecx, -0x40(%rbp)
00000000000136cd	movl	%edx, -0x44(%rbp)
00000000000136d0	je	0x136ef
00000000000136d6	jmp	0x136db
00000000000136db	movl	-0x40(%rbp), %eax
00000000000136de	subl	$0x2, %eax
00000000000136e1	movl	%eax, -0x48(%rbp)
00000000000136e4	je	0x13730
00000000000136ea	jmp	0x1377c
00000000000136ef	movq	-0x10(%rbp), %rax
00000000000136f3	cmpl	$0x0, 0x49c(%rax)
00000000000136fa	je	0x13718
0000000000013700	movq	-0x8(%rbp), %rax
0000000000013704	movzbl	0x34(%rax), %ecx
0000000000013708	movw	%cx, %dx
000000000001370b	movq	-0x18(%rbp), %rax
000000000001370f	movw	%dx, 0x14(%rax)
0000000000013713	jmp	0x1372b
0000000000013718	movq	-0x10(%rbp), %rax
000000000001371c	movw	0x48c(%rax), %cx
0000000000013723	movq	-0x18(%rbp), %rax
0000000000013727	movw	%cx, 0x14(%rax)
000000000001372b	jmp	0x1379b
0000000000013730	movq	-0x10(%rbp), %rax
0000000000013734	cmpl	$0x0, 0x49c(%rax)
000000000001373b	je	0x13759
0000000000013741	movq	-0x8(%rbp), %rax
0000000000013745	movzbl	0x34(%rax), %ecx
0000000000013749	movw	%cx, %dx
000000000001374c	movq	-0x18(%rbp), %rax
0000000000013750	movw	%dx, 0x14(%rax)
0000000000013754	jmp	0x13777
0000000000013759	movq	-0x10(%rbp), %rax
000000000001375d	movzwl	0x48c(%rax), %eax
0000000000013764	cltd
0000000000013765	movl	$0x2, %ecx
000000000001376a	idivl	%ecx
000000000001376c	movw	%ax, %si
000000000001376f	movq	-0x18(%rbp), %rdi
0000000000013773	movw	%si, 0x14(%rdi)
0000000000013777	jmp	0x1379b
000000000001377c	leaq	0x57b58(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013783	leaq	0x56150(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
000000000001378a	leaq	0x57e33(%rip), %rcx ## literal pool for: "0"
0000000000013791	movl	$0x4b8, %edx
0000000000013796	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001379b	jmp	0x137a0
00000000000137a0	movq	-0x18(%rbp), %rax
00000000000137a4	cmpw	$0x0, 0x14(%rax)
00000000000137a9	setne	%cl
00000000000137ac	xorb	$-0x1, %cl
00000000000137af	andb	$0x1, %cl
00000000000137b2	movzbl	%cl, %edx
00000000000137b5	movslq	%edx, %rax
00000000000137b8	cmpq	$0x0, %rax
00000000000137bc	je	0x137e1
00000000000137c2	leaq	0x57b12(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000137c9	leaq	0x5610a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000137d0	leaq	0x57bb1(%rip), %rcx ## literal pool for: "operand->size"
00000000000137d7	movl	$0x4bb, %edx
00000000000137dc	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000137e1	jmp	0x137e6
00000000000137e6	jmp	0x13ba1
00000000000137eb	movq	-0x20(%rbp), %rax
00000000000137ef	movq	-0x8(%rbp), %rcx
00000000000137f3	movzbl	0x24(%rcx), %edx
00000000000137f7	movl	%edx, %ecx
00000000000137f9	cmpw	$0x0, 0x2(%rax,%rcx,2)
00000000000137ff	je	0x1382b
0000000000013805	movq	-0x20(%rbp), %rax
0000000000013809	movq	-0x8(%rbp), %rcx
000000000001380d	movzbl	0x24(%rcx), %edx
0000000000013811	movl	%edx, %ecx
0000000000013813	movzwl	0x2(%rax,%rcx,2), %edx
0000000000013818	shll	$0x3, %edx
000000000001381b	movw	%dx, %si
000000000001381e	movq	-0x18(%rbp), %rax
0000000000013822	movw	%si, 0x14(%rax)
0000000000013826	jmp	0x13b7d
000000000001382b	movq	-0x20(%rbp), %rax
000000000001382f	movb	0x8(%rax), %cl
0000000000013832	andb	$0x1f, %cl
0000000000013835	movzbl	%cl, %edx
0000000000013838	cmpl	$0x1, %edx
000000000001383b	sete	%cl
000000000001383e	xorb	$-0x1, %cl
0000000000013841	andb	$0x1, %cl
0000000000013844	movzbl	%cl, %edx
0000000000013847	movslq	%edx, %rax
000000000001384a	cmpq	$0x0, %rax
000000000001384e	je	0x13873
0000000000013854	leaq	0x57a80(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
000000000001385b	leaq	0x56078(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013862	leaq	0x57b2d(%rip), %rcx ## literal pool for: "definition->element_type == ZYDIS_IELEMENT_TYPE_VARIABLE"
0000000000013869	movl	$0x4c8, %edx
000000000001386e	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013873	jmp	0x13878
0000000000013878	movq	-0x10(%rbp), %rax
000000000001387c	movzwl	0x48c(%rax), %ecx
0000000000013883	cmpl	$0x200, %ecx
0000000000013889	sete	%dl
000000000001388c	xorb	$-0x1, %dl
000000000001388f	andb	$0x1, %dl
0000000000013892	movzbl	%dl, %ecx
0000000000013895	movslq	%ecx, %rax
0000000000013898	cmpq	$0x0, %rax
000000000001389c	je	0x138c1
00000000000138a2	leaq	0x57a32(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000138a9	leaq	0x5602a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000138b0	leaq	0x57220(%rip), %rcx ## literal pool for: "instruction->avx.vector_length == 512"
00000000000138b7	movl	$0x4c9, %edx
00000000000138bc	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000138c1	jmp	0x138c6
00000000000138c6	movq	-0x10(%rbp), %rax
00000000000138ca	movl	0x4a8(%rax), %ecx
00000000000138d0	movl	%ecx, %eax
00000000000138d2	movq	%rax, %rdx
00000000000138d5	subq	$0x5, %rdx
00000000000138d9	movq	%rax, -0x50(%rbp)
00000000000138dd	movq	%rdx, -0x58(%rbp)
00000000000138e1	ja	0x13abd
00000000000138e7	leaq	0x4ca(%rip), %rax
00000000000138ee	movq	-0x50(%rbp), %rcx
00000000000138f2	movslq	(%rax,%rcx,4), %rdx
00000000000138f6	addq	%rax, %rdx
00000000000138f9	jmpq	*%rdx
00000000000138fb	movq	-0x18(%rbp), %rax
00000000000138ff	movw	$0x200, 0x14(%rax)
0000000000013905	movq	-0x8(%rbp), %rax
0000000000013909	movl	0x38(%rax), %ecx
000000000001390c	addl	$-0xa, %ecx
000000000001390f	movl	%ecx, %eax
0000000000013911	subl	$0xf, %ecx
0000000000013914	movq	%rax, -0x60(%rbp)
0000000000013918	movl	%ecx, -0x64(%rbp)
000000000001391b	ja	0x139e5
0000000000013921	leaq	0x4a8(%rip), %rax
0000000000013928	movq	-0x60(%rbp), %rcx
000000000001392c	movslq	(%rax,%rcx,4), %rdx
0000000000013930	addq	%rax, %rdx
0000000000013933	jmpq	*%rdx
0000000000013935	movq	-0x18(%rbp), %rax
0000000000013939	movl	$0x5, 0x18(%rax)
0000000000013940	movq	-0x18(%rbp), %rax
0000000000013944	movw	$0x20, 0x1c(%rax)
000000000001394a	jmp	0x13a04
000000000001394f	movq	-0x18(%rbp), %rax
0000000000013953	movw	$0x100, 0x14(%rax)
0000000000013959	movq	-0x18(%rbp), %rax
000000000001395d	movl	$0x5, 0x18(%rax)
0000000000013964	movq	-0x18(%rbp), %rax
0000000000013968	movw	$0x20, 0x1c(%rax)
000000000001396e	jmp	0x13a04
0000000000013973	movq	-0x18(%rbp), %rax
0000000000013977	movl	$0x3, 0x18(%rax)
000000000001397e	movq	-0x18(%rbp), %rax
0000000000013982	movw	$0x20, 0x1c(%rax)
0000000000013988	jmp	0x13a04
000000000001398d	movq	-0x18(%rbp), %rax
0000000000013991	movw	$0x100, 0x14(%rax)
0000000000013997	movq	-0x18(%rbp), %rax
000000000001399b	movl	$0x3, 0x18(%rax)
00000000000139a2	movq	-0x18(%rbp), %rax
00000000000139a6	movw	$0x20, 0x1c(%rax)
00000000000139ac	jmp	0x13a04
00000000000139b1	movq	-0x18(%rbp), %rax
00000000000139b5	movl	$0x6, 0x18(%rax)
00000000000139bc	movq	-0x18(%rbp), %rax
00000000000139c0	movw	$0x40, 0x1c(%rax)
00000000000139c6	jmp	0x13a04
00000000000139cb	movq	-0x18(%rbp), %rax
00000000000139cf	movl	$0x3, 0x18(%rax)
00000000000139d6	movq	-0x18(%rbp), %rax
00000000000139da	movw	$0x40, 0x1c(%rax)
00000000000139e0	jmp	0x13a04
00000000000139e5	leaq	0x578ef(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
00000000000139ec	leaq	0x55ee7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
00000000000139f3	leaq	0x57bca(%rip), %rcx ## literal pool for: "0"
00000000000139fa	movl	$0x4f6, %edx
00000000000139ff	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013a04	jmp	0x13adc
0000000000013a09	movq	-0x18(%rbp), %rax
0000000000013a0d	movw	$0x100, 0x14(%rax)
0000000000013a13	movq	-0x18(%rbp), %rax
0000000000013a17	movl	$0x4, 0x18(%rax)
0000000000013a1e	movq	-0x18(%rbp), %rax
0000000000013a22	movw	$0x10, 0x1c(%rax)
0000000000013a28	jmp	0x13adc
0000000000013a2d	movq	-0x18(%rbp), %rax
0000000000013a31	movw	$0x100, 0x14(%rax)
0000000000013a37	movq	-0x18(%rbp), %rax
0000000000013a3b	movl	$0x3, 0x18(%rax)
0000000000013a42	movq	-0x18(%rbp), %rax
0000000000013a46	movw	$0x10, 0x1c(%rax)
0000000000013a4c	jmp	0x13adc
0000000000013a51	movq	-0x18(%rbp), %rax
0000000000013a55	movw	$0x100, 0x14(%rax)
0000000000013a5b	movq	-0x18(%rbp), %rax
0000000000013a5f	movl	$0x2, 0x18(%rax)
0000000000013a66	movq	-0x18(%rbp), %rax
0000000000013a6a	movw	$0x10, 0x1c(%rax)
0000000000013a70	jmp	0x13adc
0000000000013a75	movq	-0x18(%rbp), %rax
0000000000013a79	movw	$0x80, 0x14(%rax)
0000000000013a7f	movq	-0x18(%rbp), %rax
0000000000013a83	movl	$0x3, 0x18(%rax)
0000000000013a8a	movq	-0x18(%rbp), %rax
0000000000013a8e	movw	$0x8, 0x1c(%rax)
0000000000013a94	jmp	0x13adc
0000000000013a99	movq	-0x18(%rbp), %rax
0000000000013a9d	movw	$0x80, 0x14(%rax)
0000000000013aa3	movq	-0x18(%rbp), %rax
0000000000013aa7	movl	$0x2, 0x18(%rax)
0000000000013aae	movq	-0x18(%rbp), %rax
0000000000013ab2	movw	$0x8, 0x1c(%rax)
0000000000013ab8	jmp	0x13adc
0000000000013abd	leaq	0x57817(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013ac4	leaq	0x55e0f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013acb	leaq	0x57af2(%rip), %rcx ## literal pool for: "0"
0000000000013ad2	movl	$0x513, %edx
0000000000013ad7	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013adc	movq	-0x10(%rbp), %rax
0000000000013ae0	movl	0x49c(%rax), %ecx
0000000000013ae6	testl	%ecx, %ecx
0000000000013ae8	movl	%ecx, -0x68(%rbp)
0000000000013aeb	je	0x13b24
0000000000013af1	jmp	0x13af6
0000000000013af6	movl	-0x68(%rbp), %eax
0000000000013af9	addl	$-0x3, %eax
0000000000013afc	subl	$0x2, %eax
0000000000013aff	movl	%eax, -0x6c(%rbp)
0000000000013b02	jb	0x13b29
0000000000013b08	jmp	0x13b0d
0000000000013b0d	movl	-0x68(%rbp), %eax
0000000000013b10	addl	$-0xa, %eax
0000000000013b13	subl	$0x2, %eax
0000000000013b16	movl	%eax, -0x70(%rbp)
0000000000013b19	jb	0x13b3e
0000000000013b1f	jmp	0x13b59
0000000000013b24	jmp	0x13b78
0000000000013b29	movq	-0x18(%rbp), %rax
0000000000013b2d	movw	0x1c(%rax), %cx
0000000000013b31	movq	-0x18(%rbp), %rax
0000000000013b35	movw	%cx, 0x14(%rax)
0000000000013b39	jmp	0x13b78
0000000000013b3e	movq	-0x18(%rbp), %rax
0000000000013b42	movzwl	0x1c(%rax), %ecx
0000000000013b46	shll	$0x2, %ecx
0000000000013b49	movw	%cx, %dx
0000000000013b4c	movq	-0x18(%rbp), %rax
0000000000013b50	movw	%dx, 0x14(%rax)
0000000000013b54	jmp	0x13b78
0000000000013b59	leaq	0x5777b(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013b60	leaq	0x55d73(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013b67	leaq	0x57a56(%rip), %rcx ## literal pool for: "0"
0000000000013b6e	movl	$0x524, %edx
0000000000013b73	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013b78	jmp	0x13b7d
0000000000013b7d	jmp	0x13ba1
0000000000013b82	leaq	0x57752(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013b89	leaq	0x55d4a(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013b90	leaq	0x57a2d(%rip), %rcx ## literal pool for: "0"
0000000000013b97	movl	$0x52c, %edx
0000000000013b9c	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013ba1	jmp	0x13cc6
0000000000013ba6	movq	-0x10(%rbp), %rax
0000000000013baa	movzbl	0x5a0(%rax), %ecx
0000000000013bb1	cmpl	$0x10, %ecx
0000000000013bb4	movb	$0x1, %dl
0000000000013bb6	movb	%dl, -0x71(%rbp)
0000000000013bb9	je	0x13bd3
0000000000013bbf	movq	-0x10(%rbp), %rax
0000000000013bc3	movzbl	0x5a0(%rax), %ecx
0000000000013bca	cmpl	$0x20, %ecx
0000000000013bcd	sete	%dl
0000000000013bd0	movb	%dl, -0x71(%rbp)
0000000000013bd3	movb	-0x71(%rbp), %al
0000000000013bd6	xorb	$-0x1, %al
0000000000013bd8	andb	$0x1, %al
0000000000013bda	movzbl	%al, %ecx
0000000000013bdd	movslq	%ecx, %rdx
0000000000013be0	cmpq	$0x0, %rdx
0000000000013be4	je	0x13c09
0000000000013bea	leaq	0x576ea(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013bf1	leaq	0x55ce2(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013bf8	leaq	0x572bb(%rip), %rcx ## literal pool for: "(instruction->raw.imm[0].size == 16) || (instruction->raw.imm[0].size == 32)"
0000000000013bff	movl	$0x531, %edx
0000000000013c04	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013c09	jmp	0x13c0e
0000000000013c0e	movq	-0x10(%rbp), %rax
0000000000013c12	movzbl	0x5b8(%rax), %ecx
0000000000013c19	cmpl	$0x10, %ecx
0000000000013c1c	sete	%dl
0000000000013c1f	xorb	$-0x1, %dl
0000000000013c22	andb	$0x1, %dl
0000000000013c25	movzbl	%dl, %ecx
0000000000013c28	movslq	%ecx, %rax
0000000000013c2b	cmpq	$0x0, %rax
0000000000013c2f	je	0x13c54
0000000000013c35	leaq	0x5769f(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013c3c	leaq	0x55c97(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013c43	leaq	0x572bd(%rip), %rcx ## literal pool for: "instruction->raw.imm[1].size == 16"
0000000000013c4a	movl	$0x532, %edx
0000000000013c4f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013c54	jmp	0x13c59
0000000000013c59	movq	-0x10(%rbp), %rax
0000000000013c5d	movzbl	0x5a0(%rax), %ecx
0000000000013c64	movq	-0x10(%rbp), %rax
0000000000013c68	movzbl	0x5b8(%rax), %edx
0000000000013c6f	addl	%edx, %ecx
0000000000013c71	movw	%cx, %si
0000000000013c74	movq	-0x18(%rbp), %rax
0000000000013c78	movw	%si, 0x14(%rax)
0000000000013c7c	jmp	0x13cc6
0000000000013c81	movq	-0x20(%rbp), %rax
0000000000013c85	movq	-0x8(%rbp), %rcx
0000000000013c89	movzbl	0x24(%rcx), %edx
0000000000013c8d	movl	%edx, %ecx
0000000000013c8f	movzwl	0x2(%rax,%rcx,2), %edx
0000000000013c94	shll	$0x3, %edx
0000000000013c97	movw	%dx, %si
0000000000013c9a	movq	-0x18(%rbp), %rax
0000000000013c9e	movw	%si, 0x14(%rax)
0000000000013ca2	jmp	0x13cc6
0000000000013ca7	leaq	0x5762d(%rip), %rdi ## literal pool for: "ZydisSetOperandSizeAndElementInfo"
0000000000013cae	leaq	0x55c25(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/Decoder.c"
0000000000013cb5	leaq	0x57908(%rip), %rcx ## literal pool for: "0"
0000000000013cbc	movl	$0x539, %edx
0000000000013cc1	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013cc6	movq	-0x20(%rbp), %rax
0000000000013cca	movb	0x8(%rax), %cl
0000000000013ccd	andb	$0x1f, %cl
0000000000013cd0	movzbl	%cl, %edx
0000000000013cd3	cmpl	$0x0, %edx
0000000000013cd6	je	0x13d3b
0000000000013cdc	movq	-0x20(%rbp), %rax
0000000000013ce0	movb	0x8(%rax), %cl
0000000000013ce3	andb	$0x1f, %cl
0000000000013ce6	movzbl	%cl, %edx
0000000000013ce9	cmpl	$0x1, %edx
0000000000013cec	je	0x13d3b
0000000000013cf2	movq	-0x20(%rbp), %rax
0000000000013cf6	movb	0x8(%rax), %cl
0000000000013cf9	andb	$0x1f, %cl
0000000000013cfc	movzbl	%cl, %edi
0000000000013cff	movq	-0x18(%rbp), %rax
0000000000013d03	addq	$0x18, %rax
0000000000013d07	movq	-0x18(%rbp), %rdx
0000000000013d0b	addq	$0x1c, %rdx
0000000000013d0f	movq	%rax, %rsi
0000000000013d12	callq	_ZydisGetElementInfo
0000000000013d17	movq	-0x18(%rbp), %rax
0000000000013d1b	cmpw	$0x0, 0x1c(%rax)
0000000000013d20	jne	0x13d36
0000000000013d26	movq	-0x18(%rbp), %rax
0000000000013d2a	movw	0x14(%rax), %cx
0000000000013d2e	movq	-0x18(%rbp), %rax
0000000000013d32	movw	%cx, 0x1c(%rax)
0000000000013d36	jmp	0x13d3b
0000000000013d3b	movq	-0x18(%rbp), %rax
0000000000013d3f	movzwl	0x1c(%rax), %ecx
0000000000013d43	cmpl	$0x0, %ecx
0000000000013d46	je	0x13d94
0000000000013d4c	movq	-0x18(%rbp), %rax
0000000000013d50	movzwl	0x14(%rax), %ecx
0000000000013d54	cmpl	$0x0, %ecx
0000000000013d57	je	0x13d94
0000000000013d5d	movq	-0x18(%rbp), %rax
0000000000013d61	cmpl	$0x9, 0x18(%rax)
0000000000013d65	je	0x13d94
0000000000013d6b	movq	-0x18(%rbp), %rax
0000000000013d6f	movzwl	0x14(%rax), %eax
0000000000013d73	movq	-0x18(%rbp), %rcx
0000000000013d77	movzwl	0x1c(%rcx), %edx
0000000000013d7b	movl	%edx, -0x78(%rbp)
0000000000013d7e	cltd
0000000000013d7f	movl	-0x78(%rbp), %esi
0000000000013d82	idivl	%esi
0000000000013d84	movw	%ax, %di
0000000000013d87	movq	-0x18(%rbp), %rcx
0000000000013d8b	movw	%di, 0x1e(%rcx)
0000000000013d8f	jmp	0x13d9e
0000000000013d94	movq	-0x18(%rbp), %rax
0000000000013d98	movw	$0x1, 0x1e(%rax)
0000000000013d9e	addq	$0x80, %rsp
0000000000013da5	popq	%rbp
0000000000013da6	retq
0000000000013da7	nop
0000000000013da8	xorl	$-0x1, %esi
0000000000013dab	incl	(%rax)
0000000000013dad	idivl	%edi
0000000000013daf	.byte 0xff #bad opcode
0000000000013db0	.byte 0xfe #bad opcode
0000000000013db1	std
0000000000013db2	.byte 0xff #bad opcode
0000000000013db3	.byte 0xff #bad opcode
0000000000013db4	fsin
0000000000013db6	.byte 0xff #bad opcode
0000000000013db7	incl	-0x5(%rbx)
0000000000013dba	.byte 0xff #bad opcode
0000000000013dbb	callq	*-0x4(%rcx)
0000000000013dbe	.byte 0xff #bad opcode
0000000000013dbf	.byte 0xff #bad opcode
0000000000013dc0	movl	$0xe1fffffc, %ebp
0000000000013dc5	cld
0000000000013dc6	.byte 0xff #bad opcode
0000000000013dc7	pushq	-0x4(%rbp)
0000000000013dca	.byte 0xff #bad opcode
0000000000013dcb	lcalll	*0x65fffffc(%rcx)
0000000000013dd1	sti
0000000000013dd2	.byte 0xff #bad opcode
0000000000013dd3	.byte 0xff #bad opcode
0000000000013dd4	jg	0x13dd1
0000000000013dd6	.byte 0xff #bad opcode
0000000000013dd7	jmpq	*-0x5(%rbp)
0000000000013dda	.byte 0xff #bad opcode
0000000000013ddb	jmpq	*%rcx
0000000000013ddd	sti
0000000000013dde	.byte 0xff #bad opcode
0000000000013ddf	jmpq	*-0x42000005(%rbx)
0000000000013de5	sti
0000000000013de6	.byte 0xff #bad opcode
0000000000013de7	jmpq	*-0x4000005(%rbx)
0000000000013ded	sti
0000000000013dee	.byte 0xff #bad opcode
0000000000013def	jmpq	*-0x5(%rbp)
0000000000013df2	.byte 0xff #bad opcode
0000000000013df3	jmpq	*%rcx
0000000000013df5	sti
0000000000013df6	.byte 0xff #bad opcode
0000000000013df7	jmpq	*-0x4000005(%rbx)
0000000000013dfd	sti
0000000000013dfe	.byte 0xff #bad opcode
0000000000013dff	jmpq	*-0x5(%rbp)
0000000000013e02	.byte 0xff #bad opcode
0000000000013e03	jmpq	*%rcx
0000000000013e05	sti
0000000000013e06	.byte 0xff #bad opcode
0000000000013e07	jmpq	*-0x4000005(%rbx)
0000000000013e0d	sti
0000000000013e0e	.byte 0xff #bad opcode
0000000000013e0f	callq	*0x48(%rbp)
_ZydisDecoderTreeGetChildNode:
0000000000013e10	pushq	%rbp
0000000000013e11	movq	%rsp, %rbp
0000000000013e14	subq	$0x30, %rsp
0000000000013e18	movw	%si, %ax
0000000000013e1b	movq	%rdi, -0x10(%rbp)
0000000000013e1f	movw	%ax, -0x12(%rbp)
0000000000013e23	movq	-0x10(%rbp), %rdi
0000000000013e27	movzbl	(%rdi), %esi
0000000000013e2a	decl	%esi
0000000000013e2c	movl	%esi, %edi
0000000000013e2e	subl	$0x1a, %esi
0000000000013e31	movq	%rdi, -0x20(%rbp)
0000000000013e35	movl	%esi, -0x24(%rbp)
0000000000013e38	ja	0x14a5d
0000000000013e3e	leaq	0xc43(%rip), %rax
0000000000013e45	movq	-0x20(%rbp), %rcx
0000000000013e49	movslq	(%rax,%rcx,4), %rdx
0000000000013e4d	addq	%rax, %rdx
0000000000013e50	jmpq	*%rdx
0000000000013e52	movzwl	-0x12(%rbp), %eax
0000000000013e56	cmpl	$0xd, %eax
0000000000013e59	setl	%cl
0000000000013e5c	xorb	$-0x1, %cl
0000000000013e5f	andb	$0x1, %cl
0000000000013e62	movzbl	%cl, %eax
0000000000013e65	movslq	%eax, %rdx
0000000000013e68	cmpq	$0x0, %rdx
0000000000013e6c	je	0x13e91
0000000000013e72	leaq	0x57556(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013e79	leaq	0x5756c(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013e80	leaq	0x5759e(%rip), %rcx ## literal pool for: "index < 13"
0000000000013e87	movl	$0x4a, %edx
0000000000013e8c	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013e91	jmp	0x13e96
0000000000013e96	leaq	_FILTERS_XOP(%rip), %rax
0000000000013e9d	movq	-0x10(%rbp), %rcx
0000000000013ea1	movzwl	0x1(%rcx), %edx
0000000000013ea5	movl	%edx, %ecx
0000000000013ea7	imulq	$0x27, %rcx, %rcx
0000000000013eab	addq	%rcx, %rax
0000000000013eae	movzwl	-0x12(%rbp), %edx
0000000000013eb2	movl	%edx, %ecx
0000000000013eb4	imulq	$0x3, %rcx, %rcx
0000000000013eb8	addq	%rcx, %rax
0000000000013ebb	movq	%rax, -0x8(%rbp)
0000000000013ebf	jmp	0x14a7c
0000000000013ec4	movzwl	-0x12(%rbp), %eax
0000000000013ec8	cmpl	$0x11, %eax
0000000000013ecb	setl	%cl
0000000000013ece	xorb	$-0x1, %cl
0000000000013ed1	andb	$0x1, %cl
0000000000013ed4	movzbl	%cl, %eax
0000000000013ed7	movslq	%eax, %rdx
0000000000013eda	cmpq	$0x0, %rdx
0000000000013ede	je	0x13f03
0000000000013ee4	leaq	0x574e4(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013eeb	leaq	0x574fa(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013ef2	leaq	0x57537(%rip), %rcx ## literal pool for: "index < 17"
0000000000013ef9	movl	$0x4d, %edx
0000000000013efe	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013f03	jmp	0x13f08
0000000000013f08	movq	-0x10(%rbp), %rax
0000000000013f0c	movzwl	0x1(%rax), %ecx
0000000000013f10	movl	%ecx, %eax
0000000000013f12	imulq	$0x33, %rax, %rax
0000000000013f16	leaq	_FILTERS_VEX(%rip), %rdx
0000000000013f1d	addq	%rax, %rdx
0000000000013f20	movzwl	-0x12(%rbp), %ecx
0000000000013f24	movl	%ecx, %eax
0000000000013f26	imulq	$0x3, %rax, %rax
0000000000013f2a	addq	%rax, %rdx
0000000000013f2d	movq	%rdx, -0x8(%rbp)
0000000000013f31	jmp	0x14a7c
0000000000013f36	movzwl	-0x12(%rbp), %eax
0000000000013f3a	cmpl	$0x21, %eax
0000000000013f3d	setl	%cl
0000000000013f40	xorb	$-0x1, %cl
0000000000013f43	andb	$0x1, %cl
0000000000013f46	movzbl	%cl, %eax
0000000000013f49	movslq	%eax, %rdx
0000000000013f4c	cmpq	$0x0, %rdx
0000000000013f50	je	0x13f75
0000000000013f56	leaq	0x57472(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013f5d	leaq	0x57488(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013f64	leaq	0x574d0(%rip), %rcx ## literal pool for: "index < 33"
0000000000013f6b	movl	$0x50, %edx
0000000000013f70	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013f75	jmp	0x13f7a
0000000000013f7a	movq	-0x10(%rbp), %rax
0000000000013f7e	movzwl	0x1(%rax), %ecx
0000000000013f82	movl	%ecx, %eax
0000000000013f84	imulq	$0x63, %rax, %rax
0000000000013f88	leaq	_FILTERS_EMVEX(%rip), %rdx
0000000000013f8f	addq	%rax, %rdx
0000000000013f92	movzwl	-0x12(%rbp), %ecx
0000000000013f96	movl	%ecx, %eax
0000000000013f98	imulq	$0x3, %rax, %rax
0000000000013f9c	addq	%rax, %rdx
0000000000013f9f	movq	%rdx, -0x8(%rbp)
0000000000013fa3	jmp	0x14a7c
0000000000013fa8	movzwl	-0x12(%rbp), %eax
0000000000013fac	cmpl	$0x100, %eax
0000000000013fb1	setl	%cl
0000000000013fb4	xorb	$-0x1, %cl
0000000000013fb7	andb	$0x1, %cl
0000000000013fba	movzbl	%cl, %eax
0000000000013fbd	movslq	%eax, %rdx
0000000000013fc0	cmpq	$0x0, %rdx
0000000000013fc4	je	0x13fe9
0000000000013fca	leaq	0x573fe(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000013fd1	leaq	0x57414(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000013fd8	leaq	0x57467(%rip), %rcx ## literal pool for: "index < 256"
0000000000013fdf	movl	$0x53, %edx
0000000000013fe4	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000013fe9	jmp	0x13fee
0000000000013fee	leaq	_FILTERS_OPCODE(%rip), %rax
0000000000013ff5	movq	-0x10(%rbp), %rcx
0000000000013ff9	movzwl	0x1(%rcx), %edx
0000000000013ffd	movl	%edx, %ecx
0000000000013fff	imulq	$0x300, %rcx, %rcx
0000000000014006	addq	%rcx, %rax
0000000000014009	movzwl	-0x12(%rbp), %edx
000000000001400d	movl	%edx, %ecx
000000000001400f	imulq	$0x3, %rcx, %rcx
0000000000014013	addq	%rcx, %rax
0000000000014016	movq	%rax, -0x8(%rbp)
000000000001401a	jmp	0x14a7c
000000000001401f	movzwl	-0x12(%rbp), %eax
0000000000014023	cmpl	$0x4, %eax
0000000000014026	setl	%cl
0000000000014029	xorb	$-0x1, %cl
000000000001402c	andb	$0x1, %cl
000000000001402f	movzbl	%cl, %eax
0000000000014032	movslq	%eax, %rdx
0000000000014035	cmpq	$0x0, %rdx
0000000000014039	je	0x1405e
000000000001403f	leaq	0x57389(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014046	leaq	0x5739f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001404d	leaq	0x573fe(%rip), %rcx ## literal pool for: "index < 4"
0000000000014054	movl	$0x56, %edx
0000000000014059	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001405e	jmp	0x14063
0000000000014063	movq	-0x10(%rbp), %rax
0000000000014067	movzwl	0x1(%rax), %ecx
000000000001406b	movl	%ecx, %eax
000000000001406d	imulq	$0x9, %rax, %rax
0000000000014071	leaq	_FILTERS_MODE(%rip), %rdx
0000000000014078	addq	%rax, %rdx
000000000001407b	movzwl	-0x12(%rbp), %ecx
000000000001407f	movl	%ecx, %eax
0000000000014081	imulq	$0x3, %rax, %rax
0000000000014085	addq	%rax, %rdx
0000000000014088	movq	%rdx, -0x8(%rbp)
000000000001408c	jmp	0x14a7c
0000000000014091	movzwl	-0x12(%rbp), %eax
0000000000014095	cmpl	$0x3, %eax
0000000000014098	setl	%cl
000000000001409b	xorb	$-0x1, %cl
000000000001409e	andb	$0x1, %cl
00000000000140a1	movzbl	%cl, %eax
00000000000140a4	movslq	%eax, %rdx
00000000000140a7	cmpq	$0x0, %rdx
00000000000140ab	je	0x140d0
00000000000140b1	leaq	0x57317(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000140b8	leaq	0x5732d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000140bf	leaq	0x57396(%rip), %rcx ## literal pool for: "index < 3"
00000000000140c6	movl	$0x59, %edx
00000000000140cb	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000140d0	jmp	0x140d5
00000000000140d5	movq	-0x10(%rbp), %rax
00000000000140d9	movzwl	0x1(%rax), %ecx
00000000000140dd	movl	%ecx, %eax
00000000000140df	imulq	$0x6, %rax, %rax
00000000000140e3	leaq	_FILTERS_MODE_COMPACT(%rip), %rdx
00000000000140ea	addq	%rax, %rdx
00000000000140ed	movzwl	-0x12(%rbp), %ecx
00000000000140f1	movl	%ecx, %eax
00000000000140f3	imulq	$0x3, %rax, %rax
00000000000140f7	addq	%rax, %rdx
00000000000140fa	movq	%rdx, -0x8(%rbp)
00000000000140fe	jmp	0x14a7c
0000000000014103	movzwl	-0x12(%rbp), %eax
0000000000014107	cmpl	$0x4, %eax
000000000001410a	setl	%cl
000000000001410d	xorb	$-0x1, %cl
0000000000014110	andb	$0x1, %cl
0000000000014113	movzbl	%cl, %eax
0000000000014116	movslq	%eax, %rdx
0000000000014119	cmpq	$0x0, %rdx
000000000001411d	je	0x14142
0000000000014123	leaq	0x572a5(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001412a	leaq	0x572bb(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014131	leaq	0x5731a(%rip), %rcx ## literal pool for: "index < 4"
0000000000014138	movl	$0x5c, %edx
000000000001413d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014142	jmp	0x14147
0000000000014147	movq	-0x10(%rbp), %rax
000000000001414b	movzwl	0x1(%rax), %ecx
000000000001414f	movl	%ecx, %eax
0000000000014151	imulq	$0xc, %rax, %rax
0000000000014155	leaq	_FILTERS_MODRM_MOD(%rip), %rdx
000000000001415c	addq	%rax, %rdx
000000000001415f	movzwl	-0x12(%rbp), %ecx
0000000000014163	movl	%ecx, %eax
0000000000014165	imulq	$0x3, %rax, %rax
0000000000014169	addq	%rax, %rdx
000000000001416c	movq	%rdx, -0x8(%rbp)
0000000000014170	jmp	0x14a7c
0000000000014175	movzwl	-0x12(%rbp), %eax
0000000000014179	cmpl	$0x2, %eax
000000000001417c	setl	%cl
000000000001417f	xorb	$-0x1, %cl
0000000000014182	andb	$0x1, %cl
0000000000014185	movzbl	%cl, %eax
0000000000014188	movslq	%eax, %rdx
000000000001418b	cmpq	$0x0, %rdx
000000000001418f	je	0x141b4
0000000000014195	leaq	0x57233(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001419c	leaq	0x57249(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000141a3	leaq	0x56a3f(%rip), %rcx ## literal pool for: "index < 2"
00000000000141aa	movl	$0x5f, %edx
00000000000141af	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000141b4	jmp	0x141b9
00000000000141b9	movq	-0x10(%rbp), %rax
00000000000141bd	movzwl	0x1(%rax), %ecx
00000000000141c1	movl	%ecx, %eax
00000000000141c3	imulq	$0x6, %rax, %rax
00000000000141c7	leaq	_FILTERS_MODRM_MOD_COMPACT(%rip), %rdx
00000000000141ce	addq	%rax, %rdx
00000000000141d1	movzwl	-0x12(%rbp), %ecx
00000000000141d5	movl	%ecx, %eax
00000000000141d7	imulq	$0x3, %rax, %rax
00000000000141db	addq	%rax, %rdx
00000000000141de	movq	%rdx, -0x8(%rbp)
00000000000141e2	jmp	0x14a7c
00000000000141e7	movzwl	-0x12(%rbp), %eax
00000000000141eb	cmpl	$0x8, %eax
00000000000141ee	setl	%cl
00000000000141f1	xorb	$-0x1, %cl
00000000000141f4	andb	$0x1, %cl
00000000000141f7	movzbl	%cl, %eax
00000000000141fa	movslq	%eax, %rdx
00000000000141fd	cmpq	$0x0, %rdx
0000000000014201	je	0x14226
0000000000014207	leaq	0x571c1(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001420e	leaq	0x571d7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014215	leaq	0x5724a(%rip), %rcx ## literal pool for: "index < 8"
000000000001421c	movl	$0x62, %edx
0000000000014221	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014226	jmp	0x1422b
000000000001422b	movq	-0x10(%rbp), %rax
000000000001422f	movzwl	0x1(%rax), %ecx
0000000000014233	movl	%ecx, %eax
0000000000014235	imulq	$0x18, %rax, %rax
0000000000014239	leaq	_FILTERS_MODRM_REG(%rip), %rdx
0000000000014240	addq	%rax, %rdx
0000000000014243	movzwl	-0x12(%rbp), %ecx
0000000000014247	movl	%ecx, %eax
0000000000014249	imulq	$0x3, %rax, %rax
000000000001424d	addq	%rax, %rdx
0000000000014250	movq	%rdx, -0x8(%rbp)
0000000000014254	jmp	0x14a7c
0000000000014259	movzwl	-0x12(%rbp), %eax
000000000001425d	cmpl	$0x8, %eax
0000000000014260	setl	%cl
0000000000014263	xorb	$-0x1, %cl
0000000000014266	andb	$0x1, %cl
0000000000014269	movzbl	%cl, %eax
000000000001426c	movslq	%eax, %rdx
000000000001426f	cmpq	$0x0, %rdx
0000000000014273	je	0x14298
0000000000014279	leaq	0x5714f(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014280	leaq	0x57165(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014287	leaq	0x571d8(%rip), %rcx ## literal pool for: "index < 8"
000000000001428e	movl	$0x65, %edx
0000000000014293	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014298	jmp	0x1429d
000000000001429d	movq	-0x10(%rbp), %rax
00000000000142a1	movzwl	0x1(%rax), %ecx
00000000000142a5	movl	%ecx, %eax
00000000000142a7	imulq	$0x18, %rax, %rax
00000000000142ab	leaq	_FILTERS_MODRM_RM(%rip), %rdx
00000000000142b2	addq	%rax, %rdx
00000000000142b5	movzwl	-0x12(%rbp), %ecx
00000000000142b9	movl	%ecx, %eax
00000000000142bb	imulq	$0x3, %rax, %rax
00000000000142bf	addq	%rax, %rdx
00000000000142c2	movq	%rdx, -0x8(%rbp)
00000000000142c6	jmp	0x14a7c
00000000000142cb	movzwl	-0x12(%rbp), %eax
00000000000142cf	cmpl	$0x2, %eax
00000000000142d2	setl	%cl
00000000000142d5	xorb	$-0x1, %cl
00000000000142d8	andb	$0x1, %cl
00000000000142db	movzbl	%cl, %eax
00000000000142de	movslq	%eax, %rdx
00000000000142e1	cmpq	$0x0, %rdx
00000000000142e5	je	0x1430a
00000000000142eb	leaq	0x570dd(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000142f2	leaq	0x570f3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000142f9	leaq	0x568e9(%rip), %rcx ## literal pool for: "index < 2"
0000000000014300	movl	$0x68, %edx
0000000000014305	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001430a	jmp	0x1430f
000000000001430f	movq	-0x10(%rbp), %rax
0000000000014313	movzwl	0x1(%rax), %ecx
0000000000014317	movl	%ecx, %eax
0000000000014319	imulq	$0x6, %rax, %rax
000000000001431d	leaq	_FILTERS_PREFIX_GROUP1(%rip), %rdx
0000000000014324	addq	%rax, %rdx
0000000000014327	movzwl	-0x12(%rbp), %ecx
000000000001432b	movl	%ecx, %eax
000000000001432d	imulq	$0x3, %rax, %rax
0000000000014331	addq	%rax, %rdx
0000000000014334	movq	%rdx, -0x8(%rbp)
0000000000014338	jmp	0x14a7c
000000000001433d	movzwl	-0x12(%rbp), %eax
0000000000014341	cmpl	$0x5, %eax
0000000000014344	setl	%cl
0000000000014347	xorb	$-0x1, %cl
000000000001434a	andb	$0x1, %cl
000000000001434d	movzbl	%cl, %eax
0000000000014350	movslq	%eax, %rdx
0000000000014353	cmpq	$0x0, %rdx
0000000000014357	je	0x1437c
000000000001435d	leaq	0x5706b(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014364	leaq	0x57081(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001436b	leaq	0x570fe(%rip), %rcx ## literal pool for: "index < 5"
0000000000014372	movl	$0x6b, %edx
0000000000014377	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001437c	jmp	0x14381
0000000000014381	movq	-0x10(%rbp), %rax
0000000000014385	movzwl	0x1(%rax), %ecx
0000000000014389	movl	%ecx, %eax
000000000001438b	imulq	$0xf, %rax, %rax
000000000001438f	leaq	_FILTERS_MANDATORY_PREFIX(%rip), %rdx
0000000000014396	addq	%rax, %rdx
0000000000014399	movzwl	-0x12(%rbp), %ecx
000000000001439d	movl	%ecx, %eax
000000000001439f	imulq	$0x3, %rax, %rax
00000000000143a3	addq	%rax, %rdx
00000000000143a6	movq	%rdx, -0x8(%rbp)
00000000000143aa	jmp	0x14a7c
00000000000143af	movzwl	-0x12(%rbp), %eax
00000000000143b3	cmpl	$0x3, %eax
00000000000143b6	setl	%cl
00000000000143b9	xorb	$-0x1, %cl
00000000000143bc	andb	$0x1, %cl
00000000000143bf	movzbl	%cl, %eax
00000000000143c2	movslq	%eax, %rdx
00000000000143c5	cmpq	$0x0, %rdx
00000000000143c9	je	0x143ee
00000000000143cf	leaq	0x56ff9(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000143d6	leaq	0x5700f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000143dd	leaq	0x57078(%rip), %rcx ## literal pool for: "index < 3"
00000000000143e4	movl	$0x6e, %edx
00000000000143e9	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000143ee	jmp	0x143f3
00000000000143f3	movq	-0x10(%rbp), %rax
00000000000143f7	movzwl	0x1(%rax), %ecx
00000000000143fb	movl	%ecx, %eax
00000000000143fd	imulq	$0x9, %rax, %rax
0000000000014401	leaq	_FILTERS_OPERAND_SIZE(%rip), %rdx
0000000000014408	addq	%rax, %rdx
000000000001440b	movzwl	-0x12(%rbp), %ecx
000000000001440f	movl	%ecx, %eax
0000000000014411	imulq	$0x3, %rax, %rax
0000000000014415	addq	%rax, %rdx
0000000000014418	movq	%rdx, -0x8(%rbp)
000000000001441c	jmp	0x14a7c
0000000000014421	movzwl	-0x12(%rbp), %eax
0000000000014425	cmpl	$0x3, %eax
0000000000014428	setl	%cl
000000000001442b	xorb	$-0x1, %cl
000000000001442e	andb	$0x1, %cl
0000000000014431	movzbl	%cl, %eax
0000000000014434	movslq	%eax, %rdx
0000000000014437	cmpq	$0x0, %rdx
000000000001443b	je	0x14460
0000000000014441	leaq	0x56f87(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014448	leaq	0x56f9d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001444f	leaq	0x57006(%rip), %rcx ## literal pool for: "index < 3"
0000000000014456	movl	$0x71, %edx
000000000001445b	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014460	jmp	0x14465
0000000000014465	movq	-0x10(%rbp), %rax
0000000000014469	movzwl	0x1(%rax), %ecx
000000000001446d	movl	%ecx, %eax
000000000001446f	imulq	$0x9, %rax, %rax
0000000000014473	leaq	_FILTERS_ADDRESS_SIZE(%rip), %rdx
000000000001447a	addq	%rax, %rdx
000000000001447d	movzwl	-0x12(%rbp), %ecx
0000000000014481	movl	%ecx, %eax
0000000000014483	imulq	$0x3, %rax, %rax
0000000000014487	addq	%rax, %rdx
000000000001448a	movq	%rdx, -0x8(%rbp)
000000000001448e	jmp	0x14a7c
0000000000014493	movzwl	-0x12(%rbp), %eax
0000000000014497	cmpl	$0x3, %eax
000000000001449a	setl	%cl
000000000001449d	xorb	$-0x1, %cl
00000000000144a0	andb	$0x1, %cl
00000000000144a3	movzbl	%cl, %eax
00000000000144a6	movslq	%eax, %rdx
00000000000144a9	cmpq	$0x0, %rdx
00000000000144ad	je	0x144d2
00000000000144b3	leaq	0x56f15(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000144ba	leaq	0x56f2b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000144c1	leaq	0x56f94(%rip), %rcx ## literal pool for: "index < 3"
00000000000144c8	movl	$0x74, %edx
00000000000144cd	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000144d2	jmp	0x144d7
00000000000144d7	movq	-0x10(%rbp), %rax
00000000000144db	movzwl	0x1(%rax), %ecx
00000000000144df	movl	%ecx, %eax
00000000000144e1	imulq	$0x9, %rax, %rax
00000000000144e5	leaq	_FILTERS_VECTOR_LENGTH(%rip), %rdx
00000000000144ec	addq	%rax, %rdx
00000000000144ef	movzwl	-0x12(%rbp), %ecx
00000000000144f3	movl	%ecx, %eax
00000000000144f5	imulq	$0x3, %rax, %rax
00000000000144f9	addq	%rax, %rdx
00000000000144fc	movq	%rdx, -0x8(%rbp)
0000000000014500	jmp	0x14a7c
0000000000014505	movzwl	-0x12(%rbp), %eax
0000000000014509	cmpl	$0x2, %eax
000000000001450c	setl	%cl
000000000001450f	xorb	$-0x1, %cl
0000000000014512	andb	$0x1, %cl
0000000000014515	movzbl	%cl, %eax
0000000000014518	movslq	%eax, %rdx
000000000001451b	cmpq	$0x0, %rdx
000000000001451f	je	0x14544
0000000000014525	leaq	0x56ea3(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001452c	leaq	0x56eb9(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014533	leaq	0x566af(%rip), %rcx ## literal pool for: "index < 2"
000000000001453a	movl	$0x77, %edx
000000000001453f	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014544	jmp	0x14549
0000000000014549	movq	-0x10(%rbp), %rax
000000000001454d	movzwl	0x1(%rax), %ecx
0000000000014551	movl	%ecx, %eax
0000000000014553	imulq	$0x6, %rax, %rax
0000000000014557	leaq	_FILTERS_REX_W(%rip), %rdx
000000000001455e	addq	%rax, %rdx
0000000000014561	movzwl	-0x12(%rbp), %ecx
0000000000014565	movl	%ecx, %eax
0000000000014567	imulq	$0x3, %rax, %rax
000000000001456b	addq	%rax, %rdx
000000000001456e	movq	%rdx, -0x8(%rbp)
0000000000014572	jmp	0x14a7c
0000000000014577	movzwl	-0x12(%rbp), %eax
000000000001457b	cmpl	$0x2, %eax
000000000001457e	setl	%cl
0000000000014581	xorb	$-0x1, %cl
0000000000014584	andb	$0x1, %cl
0000000000014587	movzbl	%cl, %eax
000000000001458a	movslq	%eax, %rdx
000000000001458d	cmpq	$0x0, %rdx
0000000000014591	je	0x145b6
0000000000014597	leaq	0x56e31(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001459e	leaq	0x56e47(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000145a5	leaq	0x5663d(%rip), %rcx ## literal pool for: "index < 2"
00000000000145ac	movl	$0x7a, %edx
00000000000145b1	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000145b6	jmp	0x145bb
00000000000145bb	movq	-0x10(%rbp), %rax
00000000000145bf	movzwl	0x1(%rax), %ecx
00000000000145c3	movl	%ecx, %eax
00000000000145c5	imulq	$0x6, %rax, %rax
00000000000145c9	leaq	_FILTERS_REX_B(%rip), %rdx
00000000000145d0	addq	%rax, %rdx
00000000000145d3	movzwl	-0x12(%rbp), %ecx
00000000000145d7	movl	%ecx, %eax
00000000000145d9	imulq	$0x3, %rax, %rax
00000000000145dd	addq	%rax, %rdx
00000000000145e0	movq	%rdx, -0x8(%rbp)
00000000000145e4	jmp	0x14a7c
00000000000145e9	movzwl	-0x12(%rbp), %eax
00000000000145ed	cmpl	$0x2, %eax
00000000000145f0	setl	%cl
00000000000145f3	xorb	$-0x1, %cl
00000000000145f6	andb	$0x1, %cl
00000000000145f9	movzbl	%cl, %eax
00000000000145fc	movslq	%eax, %rdx
00000000000145ff	cmpq	$0x0, %rdx
0000000000014603	je	0x14628
0000000000014609	leaq	0x56dbf(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014610	leaq	0x56dd5(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014617	leaq	0x565cb(%rip), %rcx ## literal pool for: "index < 2"
000000000001461e	movl	$0x7e, %edx
0000000000014623	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014628	jmp	0x1462d
000000000001462d	movq	-0x10(%rbp), %rax
0000000000014631	movzwl	0x1(%rax), %ecx
0000000000014635	movl	%ecx, %eax
0000000000014637	imulq	$0x6, %rax, %rax
000000000001463b	leaq	_FILTERS_EVEX_B(%rip), %rdx
0000000000014642	addq	%rax, %rdx
0000000000014645	movzwl	-0x12(%rbp), %ecx
0000000000014649	movl	%ecx, %eax
000000000001464b	imulq	$0x3, %rax, %rax
000000000001464f	addq	%rax, %rdx
0000000000014652	movq	%rdx, -0x8(%rbp)
0000000000014656	jmp	0x14a7c
000000000001465b	movzwl	-0x12(%rbp), %eax
000000000001465f	cmpl	$0x2, %eax
0000000000014662	setl	%cl
0000000000014665	xorb	$-0x1, %cl
0000000000014668	andb	$0x1, %cl
000000000001466b	movzbl	%cl, %eax
000000000001466e	movslq	%eax, %rdx
0000000000014671	cmpq	$0x0, %rdx
0000000000014675	je	0x1469a
000000000001467b	leaq	0x56d4d(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014682	leaq	0x56d63(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014689	leaq	0x56559(%rip), %rcx ## literal pool for: "index < 2"
0000000000014690	movl	$0x83, %edx
0000000000014695	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001469a	jmp	0x1469f
000000000001469f	movq	-0x10(%rbp), %rax
00000000000146a3	movzwl	0x1(%rax), %ecx
00000000000146a7	movl	%ecx, %eax
00000000000146a9	imulq	$0x6, %rax, %rax
00000000000146ad	leaq	_FILTERS_MVEX_E(%rip), %rdx
00000000000146b4	addq	%rax, %rdx
00000000000146b7	movzwl	-0x12(%rbp), %ecx
00000000000146bb	movl	%ecx, %eax
00000000000146bd	imulq	$0x3, %rax, %rax
00000000000146c1	addq	%rax, %rdx
00000000000146c4	movq	%rdx, -0x8(%rbp)
00000000000146c8	jmp	0x14a7c
00000000000146cd	movzwl	-0x12(%rbp), %eax
00000000000146d1	cmpl	$0x2, %eax
00000000000146d4	setl	%cl
00000000000146d7	xorb	$-0x1, %cl
00000000000146da	andb	$0x1, %cl
00000000000146dd	movzbl	%cl, %eax
00000000000146e0	movslq	%eax, %rdx
00000000000146e3	cmpq	$0x0, %rdx
00000000000146e7	je	0x1470c
00000000000146ed	leaq	0x56cdb(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000146f4	leaq	0x56cf1(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000146fb	leaq	0x564e7(%rip), %rcx ## literal pool for: "index < 2"
0000000000014702	movl	$0x87, %edx
0000000000014707	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001470c	jmp	0x14711
0000000000014711	movq	-0x10(%rbp), %rax
0000000000014715	movzwl	0x1(%rax), %ecx
0000000000014719	movl	%ecx, %eax
000000000001471b	imulq	$0x6, %rax, %rax
000000000001471f	leaq	_FILTERS_MODE_AMD(%rip), %rdx
0000000000014726	addq	%rax, %rdx
0000000000014729	movzwl	-0x12(%rbp), %ecx
000000000001472d	movl	%ecx, %eax
000000000001472f	imulq	$0x3, %rax, %rax
0000000000014733	addq	%rax, %rdx
0000000000014736	movq	%rdx, -0x8(%rbp)
000000000001473a	jmp	0x14a7c
000000000001473f	movzwl	-0x12(%rbp), %eax
0000000000014743	cmpl	$0x2, %eax
0000000000014746	setl	%cl
0000000000014749	xorb	$-0x1, %cl
000000000001474c	andb	$0x1, %cl
000000000001474f	movzbl	%cl, %eax
0000000000014752	movslq	%eax, %rdx
0000000000014755	cmpq	$0x0, %rdx
0000000000014759	je	0x1477e
000000000001475f	leaq	0x56c69(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014766	leaq	0x56c7f(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
000000000001476d	leaq	0x56475(%rip), %rcx ## literal pool for: "index < 2"
0000000000014774	movl	$0x8a, %edx
0000000000014779	callq	0x2792a ## symbol stub for: ___assert_rtn
000000000001477e	jmp	0x14783
0000000000014783	movq	-0x10(%rbp), %rax
0000000000014787	movzwl	0x1(%rax), %ecx
000000000001478b	movl	%ecx, %eax
000000000001478d	imulq	$0x6, %rax, %rax
0000000000014791	leaq	_FILTERS_MODE_KNC(%rip), %rdx
0000000000014798	addq	%rax, %rdx
000000000001479b	movzwl	-0x12(%rbp), %ecx
000000000001479f	movl	%ecx, %eax
00000000000147a1	imulq	$0x3, %rax, %rax
00000000000147a5	addq	%rax, %rdx
00000000000147a8	movq	%rdx, -0x8(%rbp)
00000000000147ac	jmp	0x14a7c
00000000000147b1	movzwl	-0x12(%rbp), %eax
00000000000147b5	cmpl	$0x2, %eax
00000000000147b8	setl	%cl
00000000000147bb	xorb	$-0x1, %cl
00000000000147be	andb	$0x1, %cl
00000000000147c1	movzbl	%cl, %eax
00000000000147c4	movslq	%eax, %rdx
00000000000147c7	cmpq	$0x0, %rdx
00000000000147cb	je	0x147f0
00000000000147d1	leaq	0x56bf7(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000147d8	leaq	0x56c0d(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000147df	leaq	0x56403(%rip), %rcx ## literal pool for: "index < 2"
00000000000147e6	movl	$0x8d, %edx
00000000000147eb	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000147f0	jmp	0x147f5
00000000000147f5	movq	-0x10(%rbp), %rax
00000000000147f9	movzwl	0x1(%rax), %ecx
00000000000147fd	movl	%ecx, %eax
00000000000147ff	imulq	$0x6, %rax, %rax
0000000000014803	leaq	_FILTERS_MODE_MPX(%rip), %rdx
000000000001480a	addq	%rax, %rdx
000000000001480d	movzwl	-0x12(%rbp), %ecx
0000000000014811	movl	%ecx, %eax
0000000000014813	imulq	$0x3, %rax, %rax
0000000000014817	addq	%rax, %rdx
000000000001481a	movq	%rdx, -0x8(%rbp)
000000000001481e	jmp	0x14a7c
0000000000014823	movzwl	-0x12(%rbp), %eax
0000000000014827	cmpl	$0x2, %eax
000000000001482a	setl	%cl
000000000001482d	xorb	$-0x1, %cl
0000000000014830	andb	$0x1, %cl
0000000000014833	movzbl	%cl, %eax
0000000000014836	movslq	%eax, %rdx
0000000000014839	cmpq	$0x0, %rdx
000000000001483d	je	0x14862
0000000000014843	leaq	0x56b85(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001484a	leaq	0x56b9b(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014851	leaq	0x56391(%rip), %rcx ## literal pool for: "index < 2"
0000000000014858	movl	$0x90, %edx
000000000001485d	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014862	jmp	0x14867
0000000000014867	movq	-0x10(%rbp), %rax
000000000001486b	movzwl	0x1(%rax), %ecx
000000000001486f	movl	%ecx, %eax
0000000000014871	imulq	$0x6, %rax, %rax
0000000000014875	leaq	_FILTERS_MODE_CET(%rip), %rdx
000000000001487c	addq	%rax, %rdx
000000000001487f	movzwl	-0x12(%rbp), %ecx
0000000000014883	movl	%ecx, %eax
0000000000014885	imulq	$0x3, %rax, %rax
0000000000014889	addq	%rax, %rdx
000000000001488c	movq	%rdx, -0x8(%rbp)
0000000000014890	jmp	0x14a7c
0000000000014895	movzwl	-0x12(%rbp), %eax
0000000000014899	cmpl	$0x2, %eax
000000000001489c	setl	%cl
000000000001489f	xorb	$-0x1, %cl
00000000000148a2	andb	$0x1, %cl
00000000000148a5	movzbl	%cl, %eax
00000000000148a8	movslq	%eax, %rdx
00000000000148ab	cmpq	$0x0, %rdx
00000000000148af	je	0x148d4
00000000000148b5	leaq	0x56b13(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000148bc	leaq	0x56b29(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000148c3	leaq	0x5631f(%rip), %rcx ## literal pool for: "index < 2"
00000000000148ca	movl	$0x93, %edx
00000000000148cf	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000148d4	jmp	0x148d9
00000000000148d9	movq	-0x10(%rbp), %rax
00000000000148dd	movzwl	0x1(%rax), %ecx
00000000000148e1	movl	%ecx, %eax
00000000000148e3	imulq	$0x6, %rax, %rax
00000000000148e7	leaq	_FILTERS_MODE_LZCNT(%rip), %rdx
00000000000148ee	addq	%rax, %rdx
00000000000148f1	movzwl	-0x12(%rbp), %ecx
00000000000148f5	movl	%ecx, %eax
00000000000148f7	imulq	$0x3, %rax, %rax
00000000000148fb	addq	%rax, %rdx
00000000000148fe	movq	%rdx, -0x8(%rbp)
0000000000014902	jmp	0x14a7c
0000000000014907	movzwl	-0x12(%rbp), %eax
000000000001490b	cmpl	$0x2, %eax
000000000001490e	setl	%cl
0000000000014911	xorb	$-0x1, %cl
0000000000014914	andb	$0x1, %cl
0000000000014917	movzbl	%cl, %eax
000000000001491a	movslq	%eax, %rdx
000000000001491d	cmpq	$0x0, %rdx
0000000000014921	je	0x14946
0000000000014927	leaq	0x56aa1(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
000000000001492e	leaq	0x56ab7(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014935	leaq	0x562ad(%rip), %rcx ## literal pool for: "index < 2"
000000000001493c	movl	$0x96, %edx
0000000000014941	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014946	jmp	0x1494b
000000000001494b	movq	-0x10(%rbp), %rax
000000000001494f	movzwl	0x1(%rax), %ecx
0000000000014953	movl	%ecx, %eax
0000000000014955	imulq	$0x6, %rax, %rax
0000000000014959	leaq	_FILTERS_MODE_TZCNT(%rip), %rdx
0000000000014960	addq	%rax, %rdx
0000000000014963	movzwl	-0x12(%rbp), %ecx
0000000000014967	movl	%ecx, %eax
0000000000014969	imulq	$0x3, %rax, %rax
000000000001496d	addq	%rax, %rdx
0000000000014970	movq	%rdx, -0x8(%rbp)
0000000000014974	jmp	0x14a7c
0000000000014979	movzwl	-0x12(%rbp), %eax
000000000001497d	cmpl	$0x2, %eax
0000000000014980	setl	%cl
0000000000014983	xorb	$-0x1, %cl
0000000000014986	andb	$0x1, %cl
0000000000014989	movzbl	%cl, %eax
000000000001498c	movslq	%eax, %rdx
000000000001498f	cmpq	$0x0, %rdx
0000000000014993	je	0x149b8
0000000000014999	leaq	0x56a2f(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
00000000000149a0	leaq	0x56a45(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
00000000000149a7	leaq	0x5623b(%rip), %rcx ## literal pool for: "index < 2"
00000000000149ae	movl	$0x99, %edx
00000000000149b3	callq	0x2792a ## symbol stub for: ___assert_rtn
00000000000149b8	jmp	0x149bd
00000000000149bd	movq	-0x10(%rbp), %rax
00000000000149c1	movzwl	0x1(%rax), %ecx
00000000000149c5	movl	%ecx, %eax
00000000000149c7	imulq	$0x6, %rax, %rax
00000000000149cb	leaq	_FILTERS_MODE_WBNOINVD(%rip), %rdx
00000000000149d2	addq	%rax, %rdx
00000000000149d5	movzwl	-0x12(%rbp), %ecx
00000000000149d9	movl	%ecx, %eax
00000000000149db	imulq	$0x3, %rax, %rax
00000000000149df	addq	%rax, %rdx
00000000000149e2	movq	%rdx, -0x8(%rbp)
00000000000149e6	jmp	0x14a7c
00000000000149eb	movzwl	-0x12(%rbp), %eax
00000000000149ef	cmpl	$0x2, %eax
00000000000149f2	setl	%cl
00000000000149f5	xorb	$-0x1, %cl
00000000000149f8	andb	$0x1, %cl
00000000000149fb	movzbl	%cl, %eax
00000000000149fe	movslq	%eax, %rdx
0000000000014a01	cmpq	$0x0, %rdx
0000000000014a05	je	0x14a2a
0000000000014a0b	leaq	0x569bd(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014a12	leaq	0x569d3(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014a19	leaq	0x561c9(%rip), %rcx ## literal pool for: "index < 2"
0000000000014a20	movl	$0x9c, %edx
0000000000014a25	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014a2a	jmp	0x14a2f
0000000000014a2f	movq	-0x10(%rbp), %rax
0000000000014a33	movzwl	0x1(%rax), %ecx
0000000000014a37	movl	%ecx, %eax
0000000000014a39	imulq	$0x6, %rax, %rax
0000000000014a3d	leaq	_FILTERS_MODE_CLDEMOTE(%rip), %rdx
0000000000014a44	addq	%rax, %rdx
0000000000014a47	movzwl	-0x12(%rbp), %ecx
0000000000014a4b	movl	%ecx, %eax
0000000000014a4d	imulq	$0x3, %rax, %rax
0000000000014a51	addq	%rax, %rdx
0000000000014a54	movq	%rdx, -0x8(%rbp)
0000000000014a58	jmp	0x14a7c
0000000000014a5d	leaq	0x5696b(%rip), %rdi ## literal pool for: "ZydisDecoderTreeGetChildNode"
0000000000014a64	leaq	0x56981(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014a6b	leaq	0x56b52(%rip), %rcx ## literal pool for: "0"
0000000000014a72	movl	$0x9f, %edx
0000000000014a77	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014a7c	movq	-0x8(%rbp), %rax
0000000000014a80	addq	$0x30, %rsp
0000000000014a84	popq	%rbp
0000000000014a85	retq
0000000000014a86	nop
0000000000014a88	lretl	$-0xd
0000000000014a8b	.byte 0xff #bad opcode
0000000000014a8c	cmpb	$-0xc, %al
0000000000014a8e	.byte 0xff #bad opcode
0000000000014a8f	ljmpl	*0x20fffff4(%rsi)
0000000000014a95	cmc
0000000000014a96	.byte 0xff #bad opcode
0000000000014a97	callq	*0x9fffff5(%rdi)
0000000000014a9d	idivb	%bh
0000000000014a9f	.byte 0xff #bad opcode
0000000000014aa0	jnp	0x14a98
0000000000014aa2	.byte 0xff #bad opcode
0000000000014aa3	.byte 0xff #bad opcode
0000000000014aa4	inl	%dx, %eax
0000000000014aa5	idivb	%bh
0000000000014aa7	lcalll	*-0x9(%rdi)
0000000000014aaa	.byte 0xff #bad opcode
0000000000014aab	callq	*%rcx
0000000000014aad	idivl	%edi
0000000000014aaf	incl	-0x8(%rbx)
0000000000014ab2	.byte 0xff #bad opcode
0000000000014ab3	pushq	0x27fffff8(%rbp)
0000000000014ab9	stc
0000000000014aba	.byte 0xff #bad opcode
0000000000014abb	lcalll	*0xbfffff9(%rcx)
0000000000014ac1	cli
0000000000014ac2	.byte 0xff #bad opcode
0000000000014ac3	.byte 0xff #bad opcode
0000000000014ac4	jge	0x14ac0
0000000000014ac6	.byte 0xff #bad opcode
0000000000014ac7	.byte 0xff #bad opcode
0000000000014ac8	outl	%eax, %dx
0000000000014ac9	cli
0000000000014aca	.byte 0xff #bad opcode
0000000000014acb	jmpq	*-0x5(%rcx)
0000000000014ace	.byte 0xff #bad opcode
0000000000014acf	callq	*%rbx
0000000000014ad1	sti
0000000000014ad2	.byte 0xff #bad opcode
0000000000014ad3	incl	-0x4(%rbp)
0000000000014ad6	.byte 0xff #bad opcode
0000000000014ad7	pushq	0x29fffffc(%rdi)
0000000000014add	std
0000000000014ade	.byte 0xff #bad opcode
0000000000014adf	lcalll	*0xdfffffd(%rbx)
0000000000014ae5	.byte 0xfe #bad opcode
0000000000014ae6	.byte 0xff #bad opcode
0000000000014ae7	.byte 0xff #bad opcode
0000000000014ae8	jg	0x14ae8
0000000000014aea	.byte 0xff #bad opcode
0000000000014aeb	pushq	%rcx
0000000000014aed	.byte 0xfe #bad opcode
0000000000014aee	.byte 0xff #bad opcode
0000000000014aef	jmpq	*-0x1(%rbx)
0000000000014af2	.byte 0xff #bad opcode
0000000000014af3	jmpq	*0x2e(%rsi)
0000000000014af6	nopl	(%rax,%rax)
0000000000014afe	nop
_ZydisGetInstructionEncodingInfo:
0000000000014b00	pushq	%rbp
0000000000014b01	movq	%rsp, %rbp
0000000000014b04	subq	$0x20, %rsp
0000000000014b08	movq	%rdi, -0x8(%rbp)
0000000000014b0c	movq	%rsi, -0x10(%rbp)
0000000000014b10	movq	-0x8(%rbp), %rsi
0000000000014b14	movzbl	(%rsi), %eax
0000000000014b17	andl	$0x80, %eax
0000000000014b1c	cmpl	$0x0, %eax
0000000000014b1f	setne	%cl
0000000000014b22	xorb	$-0x1, %cl
0000000000014b25	andb	$0x1, %cl
0000000000014b28	movzbl	%cl, %eax
0000000000014b2b	movslq	%eax, %rsi
0000000000014b2e	cmpq	$0x0, %rsi
0000000000014b32	je	0x14b57
0000000000014b38	leaq	0x5693b(%rip), %rdi ## literal pool for: "ZydisGetInstructionEncodingInfo"
0000000000014b3f	leaq	0x568a6(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014b46	leaq	0x54ea8(%rip), %rcx ## literal pool for: "node->type & ZYDIS_NODETYPE_DEFINITION_MASK"
0000000000014b4d	movl	$0xa6, %edx
0000000000014b52	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014b57	jmp	0x14b5c
0000000000014b5c	movq	-0x8(%rbp), %rax
0000000000014b60	movzbl	(%rax), %ecx
0000000000014b63	andl	$0x7f, %ecx
0000000000014b66	movb	%cl, %dl
0000000000014b68	movb	%dl, -0x11(%rbp)
0000000000014b6b	movzbl	-0x11(%rbp), %ecx
0000000000014b6f	movl	%ecx, %eax
0000000000014b71	cmpq	$0x14, %rax
0000000000014b75	setb	%dl
0000000000014b78	xorb	$-0x1, %dl
0000000000014b7b	andb	$0x1, %dl
0000000000014b7e	movzbl	%dl, %ecx
0000000000014b81	movslq	%ecx, %rax
0000000000014b84	cmpq	$0x0, %rax
0000000000014b88	je	0x14bad
0000000000014b8e	leaq	0x568e5(%rip), %rdi ## literal pool for: "ZydisGetInstructionEncodingInfo"
0000000000014b95	leaq	0x56850(%rip), %rsi ## literal pool for: "/Users/jakrillis/projects/builds/zydis/src/DecoderData.c"
0000000000014b9c	leaq	0x568f7(%rip), %rcx ## literal pool for: "class < (sizeof(INSTR_ENCODINGS) / sizeof((INSTR_ENCODINGS)[0]))"
0000000000014ba3	movl	$0xa8, %edx
0000000000014ba8	callq	0x2792a ## symbol stub for: ___assert_rtn
0000000000014bad	jmp	0x14bb2
0000000000014bb2	movzbl	-0x11(%rbp), %eax
0000000000014bb6	movl	%eax, %ecx
0000000000014bb8	imulq	$0xe, %rcx, %rcx
0000000000014bbc	leaq	_INSTR_ENCODINGS(%rip), %rdx
0000000000014bc3	addq	%rcx, %rdx
0000000000014bc6	movq	-0x10(%rbp), %rcx
0000000000014bca	movq	%rdx, (%rcx)
0000000000014bcd	addq	$0x20, %rsp
0000000000014bd1	popq	%rbp
0000000000014bd2	retq
__ZN5GDObj9valOffsetEl:
0000000000014bd3	movq	(%rdi,%rsi), %rax
0000000000014bd7	retq
__ZN5GDObj12setValOffsetElPv:
0000000000014bd8	movq	%rdx, (%rdi,%rsi)
0000000000014bdc	retq
__ZN11GameManager7manFileEv:
0000000000014bdd	leaq	0x120(%rdi), %rax
0000000000014be4	retq
__ZN7cocos2d2ui6MarginC1Ev:
0000000000014be5	pushq	%rbp
0000000000014be6	movq	%rsp, %rbp
0000000000014be9	popq	%rbp
0000000000014bea	retq
__ZN11GameManager17setSecondColorIdxEi:
0000000000014beb	movl	%esi, 0x260(%rdi)
0000000000014bf1	movl	$0x0, 0x264(%rdi)
0000000000014bfb	retq
__ZN11GameManager16setFirstColorIdxEi:
0000000000014bfc	movl	%esi, 0x254(%rdi)
0000000000014c02	movl	$0x0, 0x258(%rdi)
0000000000014c0c	retq
__ZN10GameObject10getGroupIDEi:
0000000000014c0d	pushq	%rbp
0000000000014c0e	movq	%rsp, %rbp
0000000000014c11	pushq	%rbx
0000000000014c12	pushq	%rdi
0000000000014c13	pushq	%rsi
0000000000014c14	pushq	%rdx
0000000000014c15	pushq	%rcx
0000000000014c16	pushq	%r8
0000000000014c18	pushq	%r9
0000000000014c1a	pushq	%r10
0000000000014c1c	pushq	%r11
0000000000014c1e	pushq	%r12
0000000000014c20	pushq	%r13
0000000000014c22	pushq	%r14
0000000000014c24	pushq	%r15
0000000000014c26	subq	$0x10, %rsp
0000000000014c2a	movss	%xmm0, (%rsp)
0000000000014c2f	subq	$0x10, %rsp
0000000000014c33	movss	%xmm1, (%rsp)
0000000000014c38	pushq	%rsi
0000000000014c39	pushq	%rdi
0000000000014c3a	callq	__Z7getBasev ## getBase()
0000000000014c3f	addq	$0x33ae10, %rax
0000000000014c45	popq	%rdi
0000000000014c46	popq	%rsi
0000000000014c47	movss	(%rsp), %xmm1
0000000000014c4c	addq	$0x10, %rsp
0000000000014c50	movss	(%rsp), %xmm0
0000000000014c55	addq	$0x10, %rsp
0000000000014c59	popq	%r15
0000000000014c5b	popq	%r14
0000000000014c5d	popq	%r13
0000000000014c5f	popq	%r12
0000000000014c61	popq	%r11
0000000000014c63	popq	%r10
0000000000014c65	popq	%r9
0000000000014c67	popq	%r8
0000000000014c69	popq	%rcx
0000000000014c6a	popq	%rdx
0000000000014c6b	popq	%rsi
0000000000014c6c	popq	%rdi
0000000000014c6d	popq	%rbx
0000000000014c6e	popq	%rbp
0000000000014c6f	jmpq	*%rax
__ZN10GameObject11setPositionERKN7cocos2d7CCPointE:
0000000000014c71	pushq	%rbp
0000000000014c72	movq	%rsp, %rbp
0000000000014c75	pushq	%rbx
0000000000014c76	pushq	%rdi
0000000000014c77	pushq	%rsi
0000000000014c78	pushq	%rdx
0000000000014c79	pushq	%rcx
0000000000014c7a	pushq	%r8
0000000000014c7c	pushq	%r9
0000000000014c7e	pushq	%r10
0000000000014c80	pushq	%r11
0000000000014c82	pushq	%r12
0000000000014c84	pushq	%r13
0000000000014c86	pushq	%r14
0000000000014c88	pushq	%r15
0000000000014c8a	subq	$0x10, %rsp
0000000000014c8e	movss	%xmm0, (%rsp)
0000000000014c93	subq	$0x10, %rsp
0000000000014c97	movss	%xmm1, (%rsp)
0000000000014c9c	pushq	%rsi
0000000000014c9d	pushq	%rdi
0000000000014c9e	callq	__Z7getBasev ## getBase()
0000000000014ca3	addq	$0x335850, %rax
0000000000014ca9	popq	%rdi
0000000000014caa	popq	%rsi
0000000000014cab	movss	(%rsp), %xmm1
0000000000014cb0	addq	$0x10, %rsp
0000000000014cb4	movss	(%rsp), %xmm0
0000000000014cb9	addq	$0x10, %rsp
0000000000014cbd	popq	%r15
0000000000014cbf	popq	%r14
0000000000014cc1	popq	%r13
0000000000014cc3	popq	%r12
0000000000014cc5	popq	%r11
0000000000014cc7	popq	%r10
0000000000014cc9	popq	%r9
0000000000014ccb	popq	%r8
0000000000014ccd	popq	%rcx
0000000000014cce	popq	%rdx
0000000000014ccf	popq	%rsi
0000000000014cd0	popq	%rdi
0000000000014cd1	popq	%rbx
0000000000014cd2	popq	%rbp
0000000000014cd3	jmpq	*%rax
__ZN10GameObject13destroyObjectEv:
0000000000014cd5	pushq	%rbp
0000000000014cd6	movq	%rsp, %rbp
0000000000014cd9	pushq	%rbx
0000000000014cda	pushq	%rdi
0000000000014cdb	pushq	%rsi
0000000000014cdc	pushq	%rdx
0000000000014cdd	pushq	%rcx
0000000000014cde	pushq	%r8
0000000000014ce0	pushq	%r9
0000000000014ce2	pushq	%r10
0000000000014ce4	pushq	%r11
0000000000014ce6	pushq	%r12
0000000000014ce8	pushq	%r13
0000000000014cea	pushq	%r14
0000000000014cec	pushq	%r15
0000000000014cee	subq	$0x10, %rsp
0000000000014cf2	movss	%xmm0, (%rsp)
0000000000014cf7	subq	$0x10, %rsp
0000000000014cfb	movss	%xmm1, (%rsp)
0000000000014d00	pushq	%rsi
0000000000014d01	pushq	%rdi
0000000000014d02	callq	__Z7getBasev ## getBase()
0000000000014d07	addq	$0x336a00, %rax
0000000000014d0d	popq	%rdi
0000000000014d0e	popq	%rsi
0000000000014d0f	movss	(%rsp), %xmm1
0000000000014d14	addq	$0x10, %rsp
0000000000014d18	movss	(%rsp), %xmm0
0000000000014d1d	addq	$0x10, %rsp
0000000000014d21	popq	%r15
0000000000014d23	popq	%r14
0000000000014d25	popq	%r13
0000000000014d27	popq	%r12
0000000000014d29	popq	%r11
0000000000014d2b	popq	%r10
0000000000014d2d	popq	%r9
0000000000014d2f	popq	%r8
0000000000014d31	popq	%rcx
0000000000014d32	popq	%rdx
0000000000014d33	popq	%rsi
0000000000014d34	popq	%rdi
0000000000014d35	popq	%rbx
0000000000014d36	popq	%rbp
0000000000014d37	jmpq	*%rax
__ZN10GameObject4initEPKc:
0000000000014d39	pushq	%rbp
0000000000014d3a	movq	%rsp, %rbp
0000000000014d3d	pushq	%rbx
0000000000014d3e	pushq	%rdi
0000000000014d3f	pushq	%rsi
0000000000014d40	pushq	%rdx
0000000000014d41	pushq	%rcx
0000000000014d42	pushq	%r8
0000000000014d44	pushq	%r9
0000000000014d46	pushq	%r10
0000000000014d48	pushq	%r11
0000000000014d4a	pushq	%r12
0000000000014d4c	pushq	%r13
0000000000014d4e	pushq	%r14
0000000000014d50	pushq	%r15
0000000000014d52	subq	$0x10, %rsp
0000000000014d56	movss	%xmm0, (%rsp)
0000000000014d5b	subq	$0x10, %rsp
0000000000014d5f	movss	%xmm1, (%rsp)
0000000000014d64	pushq	%rsi
0000000000014d65	pushq	%rdi
0000000000014d66	callq	__Z7getBasev ## getBase()
0000000000014d6b	addq	$0x2f5520, %rax
0000000000014d71	popq	%rdi
0000000000014d72	popq	%rsi
0000000000014d73	movss	(%rsp), %xmm1
0000000000014d78	addq	$0x10, %rsp
0000000000014d7c	movss	(%rsp), %xmm0
0000000000014d81	addq	$0x10, %rsp
0000000000014d85	popq	%r15
0000000000014d87	popq	%r14
0000000000014d89	popq	%r13
0000000000014d8b	popq	%r12
0000000000014d8d	popq	%r11
0000000000014d8f	popq	%r10
0000000000014d91	popq	%r9
0000000000014d93	popq	%r8
0000000000014d95	popq	%rcx
0000000000014d96	popq	%rdx
0000000000014d97	popq	%rsi
0000000000014d98	popq	%rdi
0000000000014d99	popq	%rbx
0000000000014d9a	popq	%rbp
0000000000014d9b	jmpq	*%rax
__ZN10GameObjectC1Ev:
0000000000014d9d	pushq	%rbp
0000000000014d9e	movq	%rsp, %rbp
0000000000014da1	pushq	%rbx
0000000000014da2	pushq	%rdi
0000000000014da3	pushq	%rsi
0000000000014da4	pushq	%rdx
0000000000014da5	pushq	%rcx
0000000000014da6	pushq	%r8
0000000000014da8	pushq	%r9
0000000000014daa	pushq	%r10
0000000000014dac	pushq	%r11
0000000000014dae	pushq	%r12
0000000000014db0	pushq	%r13
0000000000014db2	pushq	%r14
0000000000014db4	pushq	%r15
0000000000014db6	subq	$0x10, %rsp
0000000000014dba	movss	%xmm0, (%rsp)
0000000000014dbf	subq	$0x10, %rsp
0000000000014dc3	movss	%xmm1, (%rsp)
0000000000014dc8	pushq	%rsi
0000000000014dc9	pushq	%rdi
0000000000014dca	callq	__Z7getBasev ## getBase()
0000000000014dcf	addq	$0xdc4c0, %rax
0000000000014dd5	popq	%rdi
0000000000014dd6	popq	%rsi
0000000000014dd7	movss	(%rsp), %xmm1
0000000000014ddc	addq	$0x10, %rsp
0000000000014de0	movss	(%rsp), %xmm0
0000000000014de5	addq	$0x10, %rsp
0000000000014de9	popq	%r15
0000000000014deb	popq	%r14
0000000000014ded	popq	%r13
0000000000014def	popq	%r12
0000000000014df1	popq	%r11
0000000000014df3	popq	%r10
0000000000014df5	popq	%r9
0000000000014df7	popq	%r8
0000000000014df9	popq	%rcx
0000000000014dfa	popq	%rdx
0000000000014dfb	popq	%rsi
0000000000014dfc	popq	%rdi
0000000000014dfd	popq	%rbx
0000000000014dfe	popq	%rbp
0000000000014dff	jmpq	*%rax
__ZN10GameObject12selectObjectEN7cocos2d10_ccColor3BE:
0000000000014e01	pushq	%rbp
0000000000014e02	movq	%rsp, %rbp
0000000000014e05	pushq	%rbx
0000000000014e06	pushq	%rdi
0000000000014e07	pushq	%rsi
0000000000014e08	pushq	%rdx
0000000000014e09	pushq	%rcx
0000000000014e0a	pushq	%r8
0000000000014e0c	pushq	%r9
0000000000014e0e	pushq	%r10
0000000000014e10	pushq	%r11
0000000000014e12	pushq	%r12
0000000000014e14	pushq	%r13
0000000000014e16	pushq	%r14
0000000000014e18	pushq	%r15
0000000000014e1a	subq	$0x10, %rsp
0000000000014e1e	movss	%xmm0, (%rsp)
0000000000014e23	subq	$0x10, %rsp
0000000000014e27	movss	%xmm1, (%rsp)
0000000000014e2c	pushq	%rsi
0000000000014e2d	pushq	%rdi
0000000000014e2e	callq	__Z7getBasev ## getBase()
0000000000014e33	addq	$0x341f90, %rax
0000000000014e39	popq	%rdi
0000000000014e3a	popq	%rsi
0000000000014e3b	movss	(%rsp), %xmm1
0000000000014e40	addq	$0x10, %rsp
0000000000014e44	movss	(%rsp), %xmm0
0000000000014e49	addq	$0x10, %rsp
0000000000014e4d	popq	%r15
0000000000014e4f	popq	%r14
0000000000014e51	popq	%r13
0000000000014e53	popq	%r12
0000000000014e55	popq	%r11
0000000000014e57	popq	%r10
0000000000014e59	popq	%r9
0000000000014e5b	popq	%r8
0000000000014e5d	popq	%rcx
0000000000014e5e	popq	%rdx
0000000000014e5f	popq	%rsi
0000000000014e60	popq	%rdi
0000000000014e61	popq	%rbx
0000000000014e62	popq	%rbp
0000000000014e63	jmpq	*%rax
__ZN10GameObject15playShineEffectEv:
0000000000014e65	pushq	%rbp
0000000000014e66	movq	%rsp, %rbp
0000000000014e69	pushq	%rbx
0000000000014e6a	pushq	%rdi
0000000000014e6b	pushq	%rsi
0000000000014e6c	pushq	%rdx
0000000000014e6d	pushq	%rcx
0000000000014e6e	pushq	%r8
0000000000014e70	pushq	%r9
0000000000014e72	pushq	%r10
0000000000014e74	pushq	%r11
0000000000014e76	pushq	%r12
0000000000014e78	pushq	%r13
0000000000014e7a	pushq	%r14
0000000000014e7c	pushq	%r15
0000000000014e7e	subq	$0x10, %rsp
0000000000014e82	movss	%xmm0, (%rsp)
0000000000014e87	subq	$0x10, %rsp
0000000000014e8b	movss	%xmm1, (%rsp)
0000000000014e90	pushq	%rsi
0000000000014e91	pushq	%rdi
0000000000014e92	callq	__Z7getBasev ## getBase()
0000000000014e97	addq	$0x2fa9d0, %rax
0000000000014e9d	popq	%rdi
0000000000014e9e	popq	%rsi
0000000000014e9f	movss	(%rsp), %xmm1
0000000000014ea4	addq	$0x10, %rsp
0000000000014ea8	movss	(%rsp), %xmm0
0000000000014ead	addq	$0x10, %rsp
0000000000014eb1	popq	%r15
0000000000014eb3	popq	%r14
0000000000014eb5	popq	%r13
0000000000014eb7	popq	%r12
0000000000014eb9	popq	%r11
0000000000014ebb	popq	%r10
0000000000014ebd	popq	%r9
0000000000014ebf	popq	%r8
0000000000014ec1	popq	%rcx
0000000000014ec2	popq	%rdx
0000000000014ec3	popq	%rsi
0000000000014ec4	popq	%rdi
0000000000014ec5	popq	%rbx
0000000000014ec6	popq	%rbp
0000000000014ec7	jmpq	*%rax
__ZN15LabelGameObject6createEPKc:
0000000000014ec9	pushq	%rbp
0000000000014eca	movq	%rsp, %rbp
0000000000014ecd	pushq	%rbx
0000000000014ece	pushq	%rdi
0000000000014ecf	pushq	%rsi
0000000000014ed0	pushq	%rdx
0000000000014ed1	pushq	%rcx
0000000000014ed2	pushq	%r8
0000000000014ed4	pushq	%r9
0000000000014ed6	pushq	%r10
0000000000014ed8	pushq	%r11
0000000000014eda	pushq	%r12
0000000000014edc	pushq	%r13
0000000000014ede	pushq	%r14
0000000000014ee0	pushq	%r15
0000000000014ee2	subq	$0x10, %rsp
0000000000014ee6	movss	%xmm0, (%rsp)
0000000000014eeb	subq	$0x10, %rsp
0000000000014eef	movss	%xmm1, (%rsp)
0000000000014ef4	pushq	%rsi
0000000000014ef5	pushq	%rdi
0000000000014ef6	callq	__Z7getBasev ## getBase()
0000000000014efb	addq	$0xc9790, %rax
0000000000014f01	popq	%rdi
0000000000014f02	popq	%rsi
0000000000014f03	movss	(%rsp), %xmm1
0000000000014f08	addq	$0x10, %rsp
0000000000014f0c	movss	(%rsp), %xmm0
0000000000014f11	addq	$0x10, %rsp
0000000000014f15	popq	%r15
0000000000014f17	popq	%r14
0000000000014f19	popq	%r13
0000000000014f1b	popq	%r12
0000000000014f1d	popq	%r11
0000000000014f1f	popq	%r10
0000000000014f21	popq	%r9
0000000000014f23	popq	%r8
0000000000014f25	popq	%rcx
0000000000014f26	popq	%rdx
0000000000014f27	popq	%rsi
0000000000014f28	popq	%rdi
0000000000014f29	popq	%rbx
0000000000014f2a	popq	%rbp
0000000000014f2b	jmpq	*%rax
__ZN11AppDelegate3getEv:
0000000000014f2d	pushq	%rbp
0000000000014f2e	movq	%rsp, %rbp
0000000000014f31	pushq	%rbx
0000000000014f32	pushq	%rdi
0000000000014f33	pushq	%rsi
0000000000014f34	pushq	%rdx
0000000000014f35	pushq	%rcx
0000000000014f36	pushq	%r8
0000000000014f38	pushq	%r9
0000000000014f3a	pushq	%r10
0000000000014f3c	pushq	%r11
0000000000014f3e	pushq	%r12
0000000000014f40	pushq	%r13
0000000000014f42	pushq	%r14
0000000000014f44	pushq	%r15
0000000000014f46	subq	$0x10, %rsp
0000000000014f4a	movss	%xmm0, (%rsp)
0000000000014f4f	subq	$0x10, %rsp
0000000000014f53	movss	%xmm1, (%rsp)
0000000000014f58	pushq	%rsi
0000000000014f59	pushq	%rdi
0000000000014f5a	callq	__Z7getBasev ## getBase()
0000000000014f5f	addq	$0x3aab10, %rax
0000000000014f65	popq	%rdi
0000000000014f66	popq	%rsi
0000000000014f67	movss	(%rsp), %xmm1
0000000000014f6c	addq	$0x10, %rsp
0000000000014f70	movss	(%rsp), %xmm0
0000000000014f75	addq	$0x10, %rsp
0000000000014f79	popq	%r15
0000000000014f7b	popq	%r14
0000000000014f7d	popq	%r13
0000000000014f7f	popq	%r12
0000000000014f81	popq	%r11
0000000000014f83	popq	%r10
0000000000014f85	popq	%r9
0000000000014f87	popq	%r8
0000000000014f89	popq	%rcx
0000000000014f8a	popq	%rdx
0000000000014f8b	popq	%rsi
0000000000014f8c	popq	%rdi
0000000000014f8d	popq	%rbx
0000000000014f8e	popq	%rbp
0000000000014f8f	jmpq	*%rax
__ZN11GameManager11colorForIdxEi:
0000000000014f91	pushq	%rbp
0000000000014f92	movq	%rsp, %rbp
0000000000014f95	pushq	%rbx
0000000000014f96	pushq	%rdi
0000000000014f97	pushq	%rsi
0000000000014f98	pushq	%rdx
0000000000014f99	pushq	%rcx
0000000000014f9a	pushq	%r8
0000000000014f9c	pushq	%r9
0000000000014f9e	pushq	%r10
0000000000014fa0	pushq	%r11
0000000000014fa2	pushq	%r12
0000000000014fa4	pushq	%r13
0000000000014fa6	pushq	%r14
0000000000014fa8	pushq	%r15
0000000000014faa	subq	$0x10, %rsp
0000000000014fae	movss	%xmm0, (%rsp)
0000000000014fb3	subq	$0x10, %rsp
0000000000014fb7	movss	%xmm1, (%rsp)
0000000000014fbc	pushq	%rsi
0000000000014fbd	pushq	%rdi
0000000000014fbe	callq	__Z7getBasev ## getBase()
0000000000014fc3	addq	$0x1cbc80, %rax
0000000000014fc9	popq	%rdi
0000000000014fca	popq	%rsi
0000000000014fcb	movss	(%rsp), %xmm1
0000000000014fd0	addq	$0x10, %rsp
0000000000014fd4	movss	(%rsp), %xmm0
0000000000014fd9	addq	$0x10, %rsp
0000000000014fdd	popq	%r15
0000000000014fdf	popq	%r14
0000000000014fe1	popq	%r13
0000000000014fe3	popq	%r12
0000000000014fe5	popq	%r11
0000000000014fe7	popq	%r10
0000000000014fe9	popq	%r9
0000000000014feb	popq	%r8
0000000000014fed	popq	%rcx
0000000000014fee	popq	%rdx
0000000000014fef	popq	%rsi
0000000000014ff0	popq	%rdi
0000000000014ff1	popq	%rbx
0000000000014ff2	popq	%rbp
0000000000014ff3	jmpq	*%rax
__ZN11GameManager11doQuickSaveEv:
0000000000014ff5	pushq	%rbp
0000000000014ff6	movq	%rsp, %rbp
0000000000014ff9	pushq	%rbx
0000000000014ffa	pushq	%rdi
0000000000014ffb	pushq	%rsi
0000000000014ffc	pushq	%rdx
0000000000014ffd	pushq	%rcx
0000000000014ffe	pushq	%r8
0000000000015000	pushq	%r9
0000000000015002	pushq	%r10
0000000000015004	pushq	%r11
0000000000015006	pushq	%r12
0000000000015008	pushq	%r13
000000000001500a	pushq	%r14
000000000001500c	pushq	%r15
000000000001500e	subq	$0x10, %rsp
0000000000015012	movss	%xmm0, (%rsp)
0000000000015017	subq	$0x10, %rsp
000000000001501b	movss	%xmm1, (%rsp)
0000000000015020	pushq	%rsi
0000000000015021	pushq	%rdi
0000000000015022	callq	__Z7getBasev ## getBase()
0000000000015027	addq	$0x1d0200, %rax
000000000001502d	popq	%rdi
000000000001502e	popq	%rsi
000000000001502f	movss	(%rsp), %xmm1
0000000000015034	addq	$0x10, %rsp
0000000000015038	movss	(%rsp), %xmm0
000000000001503d	addq	$0x10, %rsp
0000000000015041	popq	%r15
0000000000015043	popq	%r14
0000000000015045	popq	%r13
0000000000015047	popq	%r12
0000000000015049	popq	%r11
000000000001504b	popq	%r10
000000000001504d	popq	%r9
000000000001504f	popq	%r8
0000000000015051	popq	%rcx
0000000000015052	popq	%rdx
0000000000015053	popq	%rsi
0000000000015054	popq	%rdi
0000000000015055	popq	%rbx
0000000000015056	popq	%rbp
0000000000015057	jmpq	*%rax
__ZN11GameManager11fadeInMusicEPKc:
0000000000015059	pushq	%rbp
000000000001505a	movq	%rsp, %rbp
000000000001505d	pushq	%rbx
000000000001505e	pushq	%rdi
000000000001505f	pushq	%rsi
0000000000015060	pushq	%rdx
0000000000015061	pushq	%rcx
0000000000015062	pushq	%r8
0000000000015064	pushq	%r9
0000000000015066	pushq	%r10
0000000000015068	pushq	%r11
000000000001506a	pushq	%r12
000000000001506c	pushq	%r13
000000000001506e	pushq	%r14
0000000000015070	pushq	%r15
0000000000015072	subq	$0x10, %rsp
0000000000015076	movss	%xmm0, (%rsp)
000000000001507b	subq	$0x10, %rsp
000000000001507f	movss	%xmm1, (%rsp)
0000000000015084	pushq	%rsi
0000000000015085	pushq	%rdi
0000000000015086	callq	__Z7getBasev ## getBase()
000000000001508b	addq	$0x1c2ff0, %rax
0000000000015091	popq	%rdi
0000000000015092	popq	%rsi
0000000000015093	movss	(%rsp), %xmm1
0000000000015098	addq	$0x10, %rsp
000000000001509c	movss	(%rsp), %xmm0
00000000000150a1	addq	$0x10, %rsp
00000000000150a5	popq	%r15
00000000000150a7	popq	%r14
00000000000150a9	popq	%r13
00000000000150ab	popq	%r12
00000000000150ad	popq	%r11
00000000000150af	popq	%r10
00000000000150b1	popq	%r9
00000000000150b3	popq	%r8
00000000000150b5	popq	%rcx
00000000000150b6	popq	%rdx
00000000000150b7	popq	%rsi
00000000000150b8	popq	%rdi
00000000000150b9	popq	%rbx
00000000000150ba	popq	%rbp
00000000000150bb	jmpq	*%rax
__ZN11GameManager11sharedStateEv:
00000000000150bd	pushq	%rbp
00000000000150be	movq	%rsp, %rbp
00000000000150c1	pushq	%rbx
00000000000150c2	pushq	%rdi
00000000000150c3	pushq	%rsi
00000000000150c4	pushq	%rdx
00000000000150c5	pushq	%rcx
00000000000150c6	pushq	%r8
00000000000150c8	pushq	%r9
00000000000150ca	pushq	%r10
00000000000150cc	pushq	%r11
00000000000150ce	pushq	%r12
00000000000150d0	pushq	%r13
00000000000150d2	pushq	%r14
00000000000150d4	pushq	%r15
00000000000150d6	subq	$0x10, %rsp
00000000000150da	movss	%xmm0, (%rsp)
00000000000150df	subq	$0x10, %rsp
00000000000150e3	movss	%xmm1, (%rsp)
00000000000150e8	pushq	%rsi
00000000000150e9	pushq	%rdi
00000000000150ea	callq	__Z7getBasev ## getBase()
00000000000150ef	addq	$0x1c2b30, %rax
00000000000150f5	popq	%rdi
00000000000150f6	popq	%rsi
00000000000150f7	movss	(%rsp), %xmm1
00000000000150fc	addq	$0x10, %rsp
0000000000015100	movss	(%rsp), %xmm0
0000000000015105	addq	$0x10, %rsp
0000000000015109	popq	%r15
000000000001510b	popq	%r14
000000000001510d	popq	%r13
000000000001510f	popq	%r12
0000000000015111	popq	%r11
0000000000015113	popq	%r10
0000000000015115	popq	%r9
0000000000015117	popq	%r8
0000000000015119	popq	%rcx
000000000001511a	popq	%rdx
000000000001511b	popq	%rsi
000000000001511c	popq	%rdi
000000000001511d	popq	%rbx
000000000001511e	popq	%rbp
000000000001511f	jmpq	*%rax
__ZN11GameManager14reloadAllStep5Ev:
0000000000015121	pushq	%rbp
0000000000015122	movq	%rsp, %rbp
0000000000015125	pushq	%rbx
0000000000015126	pushq	%rdi
0000000000015127	pushq	%rsi
0000000000015128	pushq	%rdx
0000000000015129	pushq	%rcx
000000000001512a	pushq	%r8
000000000001512c	pushq	%r9
000000000001512e	pushq	%r10
0000000000015130	pushq	%r11
0000000000015132	pushq	%r12
0000000000015134	pushq	%r13
0000000000015136	pushq	%r14
0000000000015138	pushq	%r15
000000000001513a	subq	$0x10, %rsp
000000000001513e	movss	%xmm0, (%rsp)
0000000000015143	subq	$0x10, %rsp
0000000000015147	movss	%xmm1, (%rsp)
000000000001514c	pushq	%rsi
000000000001514d	pushq	%rdi
000000000001514e	callq	__Z7getBasev ## getBase()
0000000000015153	addq	$0x1d0b00, %rax
0000000000015159	popq	%rdi
000000000001515a	popq	%rsi
000000000001515b	movss	(%rsp), %xmm1
0000000000015160	addq	$0x10, %rsp
0000000000015164	movss	(%rsp), %xmm0
0000000000015169	addq	$0x10, %rsp
000000000001516d	popq	%r15
000000000001516f	popq	%r14
0000000000015171	popq	%r13
0000000000015173	popq	%r12
0000000000015175	popq	%r11
0000000000015177	popq	%r10
0000000000015179	popq	%r9
000000000001517b	popq	%r8
000000000001517d	popq	%rcx
000000000001517e	popq	%rdx
000000000001517f	popq	%rsi
0000000000015180	popq	%rdi
0000000000015181	popq	%rbx
0000000000015182	popq	%rbp
0000000000015183	jmpq	*%rax
__ZN11GameManager15getGameVariableEPKc:
0000000000015185	pushq	%rbp
0000000000015186	movq	%rsp, %rbp
0000000000015189	pushq	%rbx
000000000001518a	pushq	%rdi
000000000001518b	pushq	%rsi
000000000001518c	pushq	%rdx
000000000001518d	pushq	%rcx
000000000001518e	pushq	%r8
0000000000015190	pushq	%r9
0000000000015192	pushq	%r10
0000000000015194	pushq	%r11
0000000000015196	pushq	%r12
0000000000015198	pushq	%r13
000000000001519a	pushq	%r14
000000000001519c	pushq	%r15
000000000001519e	subq	$0x10, %rsp
00000000000151a2	movss	%xmm0, (%rsp)
00000000000151a7	subq	$0x10, %rsp
00000000000151ab	movss	%xmm1, (%rsp)
00000000000151b0	pushq	%rsi
00000000000151b1	pushq	%rdi
00000000000151b2	callq	__Z7getBasev ## getBase()
00000000000151b7	addq	$0x1cccd0, %rax
00000000000151bd	popq	%rdi
00000000000151be	popq	%rsi
00000000000151bf	movss	(%rsp), %xmm1
00000000000151c4	addq	$0x10, %rsp
00000000000151c8	movss	(%rsp), %xmm0
00000000000151cd	addq	$0x10, %rsp
00000000000151d1	popq	%r15
00000000000151d3	popq	%r14
00000000000151d5	popq	%r13
00000000000151d7	popq	%r12
00000000000151d9	popq	%r11
00000000000151db	popq	%r10
00000000000151dd	popq	%r9
00000000000151df	popq	%r8
00000000000151e1	popq	%rcx
00000000000151e2	popq	%rdx
00000000000151e3	popq	%rsi
00000000000151e4	popq	%rdi
00000000000151e5	popq	%rbx
00000000000151e6	popq	%rbp
00000000000151e7	jmpq	*%rax
__ZN11GameManager15setGameVariableEPKcb:
00000000000151e9	pushq	%rbp
00000000000151ea	movq	%rsp, %rbp
00000000000151ed	pushq	%rbx
00000000000151ee	pushq	%rdi
00000000000151ef	pushq	%rsi
00000000000151f0	pushq	%rdx
00000000000151f1	pushq	%rcx
00000000000151f2	pushq	%r8
00000000000151f4	pushq	%r9
00000000000151f6	pushq	%r10
00000000000151f8	pushq	%r11
00000000000151fa	pushq	%r12
00000000000151fc	pushq	%r13
00000000000151fe	pushq	%r14
0000000000015200	pushq	%r15
0000000000015202	subq	$0x10, %rsp
0000000000015206	movss	%xmm0, (%rsp)
000000000001520b	subq	$0x10, %rsp
000000000001520f	movss	%xmm1, (%rsp)
0000000000015214	pushq	%rsi
0000000000015215	pushq	%rdi
0000000000015216	callq	__Z7getBasev ## getBase()
000000000001521b	addq	$0x1cca80, %rax
0000000000015221	popq	%rdi
0000000000015222	popq	%rsi
0000000000015223	movss	(%rsp), %xmm1
0000000000015228	addq	$0x10, %rsp
000000000001522c	movss	(%rsp), %xmm0
0000000000015231	addq	$0x10, %rsp
0000000000015235	popq	%r15
0000000000015237	popq	%r14
0000000000015239	popq	%r13
000000000001523b	popq	%r12
000000000001523d	popq	%r11
000000000001523f	popq	%r10
0000000000015241	popq	%r9
0000000000015243	popq	%r8
0000000000015245	popq	%rcx
0000000000015246	popq	%rdx
0000000000015247	popq	%rsi
0000000000015248	popq	%rdi
0000000000015249	popq	%rbx
000000000001524a	popq	%rbp
000000000001524b	jmpq	*%rax
__ZN11GameManager20accountStatusChangedEv:
000000000001524d	pushq	%rbp
000000000001524e	movq	%rsp, %rbp
0000000000015251	pushq	%rbx
0000000000015252	pushq	%rdi
0000000000015253	pushq	%rsi
0000000000015254	pushq	%rdx
0000000000015255	pushq	%rcx
0000000000015256	pushq	%r8
0000000000015258	pushq	%r9
000000000001525a	pushq	%r10
000000000001525c	pushq	%r11
000000000001525e	pushq	%r12
0000000000015260	pushq	%r13
0000000000015262	pushq	%r14
0000000000015264	pushq	%r15
0000000000015266	subq	$0x10, %rsp
000000000001526a	movss	%xmm0, (%rsp)
000000000001526f	subq	$0x10, %rsp
0000000000015273	movss	%xmm1, (%rsp)
0000000000015278	pushq	%rsi
0000000000015279	pushq	%rdi
000000000001527a	callq	__Z7getBasev ## getBase()
000000000001527f	addq	$0x1cdad0, %rax
0000000000015285	popq	%rdi
0000000000015286	popq	%rsi
0000000000015287	movss	(%rsp), %xmm1
000000000001528c	addq	$0x10, %rsp
0000000000015290	movss	(%rsp), %xmm0
0000000000015295	addq	$0x10, %rsp
0000000000015299	popq	%r15
000000000001529b	popq	%r14
000000000001529d	popq	%r13
000000000001529f	popq	%r12
00000000000152a1	popq	%r11
00000000000152a3	popq	%r10
00000000000152a5	popq	%r9
00000000000152a7	popq	%r8
00000000000152a9	popq	%rcx
00000000000152aa	popq	%rdx
00000000000152ab	popq	%rsi
00000000000152ac	popq	%rdi
00000000000152ad	popq	%rbx
00000000000152ae	popq	%rbp
00000000000152af	jmpq	*%rax
__ZN11GameManager4loadEv:
00000000000152b1	pushq	%rbp
00000000000152b2	movq	%rsp, %rbp
00000000000152b5	pushq	%rbx
00000000000152b6	pushq	%rdi
00000000000152b7	pushq	%rsi
00000000000152b8	pushq	%rdx
00000000000152b9	pushq	%rcx
00000000000152ba	pushq	%r8
00000000000152bc	pushq	%r9
00000000000152be	pushq	%r10
00000000000152c0	pushq	%r11
00000000000152c2	pushq	%r12
00000000000152c4	pushq	%r13
00000000000152c6	pushq	%r14
00000000000152c8	pushq	%r15
00000000000152ca	subq	$0x10, %rsp
00000000000152ce	movss	%xmm0, (%rsp)
00000000000152d3	subq	$0x10, %rsp
00000000000152d7	movss	%xmm1, (%rsp)
00000000000152dc	pushq	%rsi
00000000000152dd	pushq	%rdi
00000000000152de	callq	__Z7getBasev ## getBase()
00000000000152e3	addq	$0x26ee20, %rax
00000000000152e9	popq	%rdi
00000000000152ea	popq	%rsi
00000000000152eb	movss	(%rsp), %xmm1
00000000000152f0	addq	$0x10, %rsp
00000000000152f4	movss	(%rsp), %xmm0
00000000000152f9	addq	$0x10, %rsp
00000000000152fd	popq	%r15
00000000000152ff	popq	%r14
0000000000015301	popq	%r13
0000000000015303	popq	%r12
0000000000015305	popq	%r11
0000000000015307	popq	%r10
0000000000015309	popq	%r9
000000000001530b	popq	%r8
000000000001530d	popq	%rcx
000000000001530e	popq	%rdx
000000000001530f	popq	%rsi
0000000000015310	popq	%rdi
0000000000015311	popq	%rbx
0000000000015312	popq	%rbp
0000000000015313	jmpq	*%rax
__ZN11GameManager9reloadAllEbbb:
0000000000015315	pushq	%rbp
0000000000015316	movq	%rsp, %rbp
0000000000015319	pushq	%rbx
000000000001531a	pushq	%rdi
000000000001531b	pushq	%rsi
000000000001531c	pushq	%rdx
000000000001531d	pushq	%rcx
000000000001531e	pushq	%r8
0000000000015320	pushq	%r9
0000000000015322	pushq	%r10
0000000000015324	pushq	%r11
0000000000015326	pushq	%r12
0000000000015328	pushq	%r13
000000000001532a	pushq	%r14
000000000001532c	pushq	%r15
000000000001532e	subq	$0x10, %rsp
0000000000015332	movss	%xmm0, (%rsp)
0000000000015337	subq	$0x10, %rsp
000000000001533b	movss	%xmm1, (%rsp)
0000000000015340	pushq	%rsi
0000000000015341	pushq	%rdi
0000000000015342	callq	__Z7getBasev ## getBase()
0000000000015347	addq	$0x1d08a0, %rax
000000000001534d	popq	%rdi
000000000001534e	popq	%rsi
000000000001534f	movss	(%rsp), %xmm1
0000000000015354	addq	$0x10, %rsp
0000000000015358	movss	(%rsp), %xmm0
000000000001535d	addq	$0x10, %rsp
0000000000015361	popq	%r15
0000000000015363	popq	%r14
0000000000015365	popq	%r13
0000000000015367	popq	%r12
0000000000015369	popq	%r11
000000000001536b	popq	%r10
000000000001536d	popq	%r9
000000000001536f	popq	%r8
0000000000015371	popq	%rcx
0000000000015372	popq	%rdx
0000000000015373	popq	%rsi
0000000000015374	popq	%rdi
0000000000015375	popq	%rbx
0000000000015376	popq	%rbp
0000000000015377	jmpq	*%rax
__ZN11GameManagerD0Ev:
0000000000015379	pushq	%rbp
000000000001537a	movq	%rsp, %rbp
000000000001537d	pushq	%rbx
000000000001537e	pushq	%rdi
000000000001537f	pushq	%rsi
0000000000015380	pushq	%rdx
0000000000015381	pushq	%rcx
0000000000015382	pushq	%r8
0000000000015384	pushq	%r9
0000000000015386	pushq	%r10
0000000000015388	pushq	%r11
000000000001538a	pushq	%r12
000000000001538c	pushq	%r13
000000000001538e	pushq	%r14
0000000000015390	pushq	%r15
0000000000015392	subq	$0x10, %rsp
0000000000015396	movss	%xmm0, (%rsp)
000000000001539b	subq	$0x10, %rsp
000000000001539f	movss	%xmm1, (%rsp)
00000000000153a4	pushq	%rsi
00000000000153a5	pushq	%rdi
00000000000153a6	callq	__Z7getBasev ## getBase()
00000000000153ab	addq	$0x1d0ff0, %rax
00000000000153b1	popq	%rdi
00000000000153b2	popq	%rsi
00000000000153b3	movss	(%rsp), %xmm1
00000000000153b8	addq	$0x10, %rsp
00000000000153bc	movss	(%rsp), %xmm0
00000000000153c1	addq	$0x10, %rsp
00000000000153c5	popq	%r15
00000000000153c7	popq	%r14
00000000000153c9	popq	%r13
00000000000153cb	popq	%r12
00000000000153cd	popq	%r11
00000000000153cf	popq	%r10
00000000000153d1	popq	%r9
00000000000153d3	popq	%r8
00000000000153d5	popq	%rcx
00000000000153d6	popq	%rdx
00000000000153d7	popq	%rsi
00000000000153d8	popq	%rdi
00000000000153d9	popq	%rbx
00000000000153da	popq	%rbp
00000000000153db	jmpq	*%rax
__ZN11GameManagerD1Ev:
00000000000153dd	pushq	%rbp
00000000000153de	movq	%rsp, %rbp
00000000000153e1	pushq	%rbx
00000000000153e2	pushq	%rdi
00000000000153e3	pushq	%rsi
00000000000153e4	pushq	%rdx
00000000000153e5	pushq	%rcx
00000000000153e6	pushq	%r8
00000000000153e8	pushq	%r9
00000000000153ea	pushq	%r10
00000000000153ec	pushq	%r11
00000000000153ee	pushq	%r12
00000000000153f0	pushq	%r13
00000000000153f2	pushq	%r14
00000000000153f4	pushq	%r15
00000000000153f6	subq	$0x10, %rsp
00000000000153fa	movss	%xmm0, (%rsp)
00000000000153ff	subq	$0x10, %rsp
0000000000015403	movss	%xmm1, (%rsp)
0000000000015408	pushq	%rsi
0000000000015409	pushq	%rdi
000000000001540a	callq	__Z7getBasev ## getBase()
000000000001540f	addq	$0x1d0fe0, %rax
0000000000015415	popq	%rdi
0000000000015416	popq	%rsi
0000000000015417	movss	(%rsp), %xmm1
000000000001541c	addq	$0x10, %rsp
0000000000015420	movss	(%rsp), %xmm0
0000000000015425	addq	$0x10, %rsp
0000000000015429	popq	%r15
000000000001542b	popq	%r14
000000000001542d	popq	%r13
000000000001542f	popq	%r12
0000000000015431	popq	%r11
0000000000015433	popq	%r10
0000000000015435	popq	%r9
0000000000015437	popq	%r8
0000000000015439	popq	%rcx
000000000001543a	popq	%rdx
000000000001543b	popq	%rsi
000000000001543c	popq	%rdi
000000000001543d	popq	%rbx
000000000001543e	popq	%rbp
000000000001543f	jmpq	*%rax
__ZN11GameToolbox18createToggleButtonESsMN7cocos2d8CCObjectEFvPS1_EbPNS0_6CCMenuENS0_7CCPointEPNS0_6CCNodeES9_fffS7_PKcbiPNS0_7CCArrayE:
0000000000015441	pushq	%rbp
0000000000015442	movq	%rsp, %rbp
0000000000015445	pushq	%rbx
0000000000015446	pushq	%rdi
0000000000015447	pushq	%rsi
0000000000015448	pushq	%rdx
0000000000015449	pushq	%rcx
000000000001544a	pushq	%r8
000000000001544c	pushq	%r9
000000000001544e	pushq	%r10
0000000000015450	pushq	%r11
0000000000015452	pushq	%r12
0000000000015454	pushq	%r13
0000000000015456	pushq	%r14
0000000000015458	pushq	%r15
000000000001545a	subq	$0x10, %rsp
000000000001545e	movss	%xmm0, (%rsp)
0000000000015463	subq	$0x10, %rsp
0000000000015467	movss	%xmm1, (%rsp)
000000000001546c	pushq	%rsi
000000000001546d	pushq	%rdi
000000000001546e	callq	__Z7getBasev ## getBase()
0000000000015473	addq	$0x28bdd0, %rax
0000000000015479	popq	%rdi
000000000001547a	popq	%rsi
000000000001547b	movss	(%rsp), %xmm1
0000000000015480	addq	$0x10, %rsp
0000000000015484	movss	(%rsp), %xmm0
0000000000015489	addq	$0x10, %rsp
000000000001548d	popq	%r15
000000000001548f	popq	%r14
0000000000015491	popq	%r13
0000000000015493	popq	%r12
0000000000015495	popq	%r11
0000000000015497	popq	%r10
0000000000015499	popq	%r9
000000000001549b	popq	%r8
000000000001549d	popq	%rcx
000000000001549e	popq	%rdx
000000000001549f	popq	%rsi
00000000000154a0	popq	%rdi
00000000000154a1	popq	%rbx
00000000000154a2	popq	%rbp
00000000000154a3	jmpq	*%rax
__ZN12ButtonSprite6createEPKciifb:
00000000000154a5	pushq	%rbp
00000000000154a6	movq	%rsp, %rbp
00000000000154a9	pushq	%rbx
00000000000154aa	pushq	%rdi
00000000000154ab	pushq	%rsi
00000000000154ac	pushq	%rdx
00000000000154ad	pushq	%rcx
00000000000154ae	pushq	%r8
00000000000154b0	pushq	%r9
00000000000154b2	pushq	%r10
00000000000154b4	pushq	%r11
00000000000154b6	pushq	%r12
00000000000154b8	pushq	%r13
00000000000154ba	pushq	%r14
00000000000154bc	pushq	%r15
00000000000154be	subq	$0x10, %rsp
00000000000154c2	movss	%xmm0, (%rsp)
00000000000154c7	subq	$0x10, %rsp
00000000000154cb	movss	%xmm1, (%rsp)
00000000000154d0	pushq	%rsi
00000000000154d1	pushq	%rdi
00000000000154d2	callq	__Z7getBasev ## getBase()
00000000000154d7	addq	$0x4fa40, %rax
00000000000154dd	popq	%rdi
00000000000154de	popq	%rsi
00000000000154df	movss	(%rsp), %xmm1
00000000000154e4	addq	$0x10, %rsp
00000000000154e8	movss	(%rsp), %xmm0
00000000000154ed	addq	$0x10, %rsp
00000000000154f1	popq	%r15
00000000000154f3	popq	%r14
00000000000154f5	popq	%r13
00000000000154f7	popq	%r12
00000000000154f9	popq	%r11
00000000000154fb	popq	%r10
00000000000154fd	popq	%r9
00000000000154ff	popq	%r8
0000000000015501	popq	%rcx
0000000000015502	popq	%rdx
0000000000015503	popq	%rsi
0000000000015504	popq	%rdi
0000000000015505	popq	%rbx
0000000000015506	popq	%rbp
0000000000015507	jmpq	*%rax
__ZN12ButtonSprite6createEPKc:
0000000000015509	pushq	%rbp
000000000001550a	movq	%rsp, %rbp
000000000001550d	pushq	%rbx
000000000001550e	pushq	%rdi
000000000001550f	pushq	%rsi
0000000000015510	pushq	%rdx
0000000000015511	pushq	%rcx
0000000000015512	pushq	%r8
0000000000015514	pushq	%r9
0000000000015516	pushq	%r10
0000000000015518	pushq	%r11
000000000001551a	pushq	%r12
000000000001551c	pushq	%r13
000000000001551e	pushq	%r14
0000000000015520	pushq	%r15
0000000000015522	subq	$0x10, %rsp
0000000000015526	movss	%xmm0, (%rsp)
000000000001552b	subq	$0x10, %rsp
000000000001552f	movss	%xmm1, (%rsp)
0000000000015534	pushq	%rsi
0000000000015535	pushq	%rdi
0000000000015536	callq	__Z7getBasev ## getBase()
000000000001553b	addq	$0x4fa10, %rax
0000000000015541	popq	%rdi
0000000000015542	popq	%rsi
0000000000015543	movss	(%rsp), %xmm1
0000000000015548	addq	$0x10, %rsp
000000000001554c	movss	(%rsp), %xmm0
0000000000015551	addq	$0x10, %rsp
0000000000015555	popq	%r15
0000000000015557	popq	%r14
0000000000015559	popq	%r13
000000000001555b	popq	%r12
000000000001555d	popq	%r11
000000000001555f	popq	%r10
0000000000015561	popq	%r9
0000000000015563	popq	%r8
0000000000015565	popq	%rcx
0000000000015566	popq	%rdx
0000000000015567	popq	%rsi
0000000000015568	popq	%rdi
0000000000015569	popq	%rbx
000000000001556a	popq	%rbp
000000000001556b	jmpq	*%rax
__ZN12CCSpritePart25createWithSpriteFrameNameEPKc:
000000000001556d	pushq	%rbp
000000000001556e	movq	%rsp, %rbp
0000000000015571	pushq	%rbx
0000000000015572	pushq	%rdi
0000000000015573	pushq	%rsi
0000000000015574	pushq	%rdx
0000000000015575	pushq	%rcx
0000000000015576	pushq	%r8
0000000000015578	pushq	%r9
000000000001557a	pushq	%r10
000000000001557c	pushq	%r11
000000000001557e	pushq	%r12
0000000000015580	pushq	%r13
0000000000015582	pushq	%r14
0000000000015584	pushq	%r15
0000000000015586	subq	$0x10, %rsp
000000000001558a	movss	%xmm0, (%rsp)
000000000001558f	subq	$0x10, %rsp
0000000000015593	movss	%xmm1, (%rsp)
0000000000015598	pushq	%rsi
0000000000015599	pushq	%rdi
000000000001559a	callq	__Z7getBasev ## getBase()
000000000001559f	addq	$0x132dc0, %rax
00000000000155a5	popq	%rdi
00000000000155a6	popq	%rsi
00000000000155a7	movss	(%rsp), %xmm1
00000000000155ac	addq	$0x10, %rsp
00000000000155b0	movss	(%rsp), %xmm0
00000000000155b5	addq	$0x10, %rsp
00000000000155b9	popq	%r15
00000000000155bb	popq	%r14
00000000000155bd	popq	%r13
00000000000155bf	popq	%r12
00000000000155c1	popq	%r11
00000000000155c3	popq	%r10
00000000000155c5	popq	%r9
00000000000155c7	popq	%r8
00000000000155c9	popq	%rcx
00000000000155ca	popq	%rdx
00000000000155cb	popq	%rsi
00000000000155cc	popq	%rdi
00000000000155cd	popq	%rbx
00000000000155ce	popq	%rbp
00000000000155cf	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchBeganEPN7cocos2d7CCTouchEPNS0_7CCEventE:
00000000000155d1	pushq	%rbp
00000000000155d2	movq	%rsp, %rbp
00000000000155d5	pushq	%rbx
00000000000155d6	pushq	%rdi
00000000000155d7	pushq	%rsi
00000000000155d8	pushq	%rdx
00000000000155d9	pushq	%rcx
00000000000155da	pushq	%r8
00000000000155dc	pushq	%r9
00000000000155de	pushq	%r10
00000000000155e0	pushq	%r11
00000000000155e2	pushq	%r12
00000000000155e4	pushq	%r13
00000000000155e6	pushq	%r14
00000000000155e8	pushq	%r15
00000000000155ea	subq	$0x10, %rsp
00000000000155ee	movss	%xmm0, (%rsp)
00000000000155f3	subq	$0x10, %rsp
00000000000155f7	movss	%xmm1, (%rsp)
00000000000155fc	pushq	%rsi
00000000000155fd	pushq	%rdi
00000000000155fe	callq	__Z7getBasev ## getBase()
0000000000015603	addq	$0x2734d0, %rax
0000000000015609	popq	%rdi
000000000001560a	popq	%rsi
000000000001560b	movss	(%rsp), %xmm1
0000000000015610	addq	$0x10, %rsp
0000000000015614	movss	(%rsp), %xmm0
0000000000015619	addq	$0x10, %rsp
000000000001561d	popq	%r15
000000000001561f	popq	%r14
0000000000015621	popq	%r13
0000000000015623	popq	%r12
0000000000015625	popq	%r11
0000000000015627	popq	%r10
0000000000015629	popq	%r9
000000000001562b	popq	%r8
000000000001562d	popq	%rcx
000000000001562e	popq	%rdx
000000000001562f	popq	%rsi
0000000000015630	popq	%rdi
0000000000015631	popq	%rbx
0000000000015632	popq	%rbp
0000000000015633	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchEndedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
0000000000015635	pushq	%rbp
0000000000015636	movq	%rsp, %rbp
0000000000015639	pushq	%rbx
000000000001563a	pushq	%rdi
000000000001563b	pushq	%rsi
000000000001563c	pushq	%rdx
000000000001563d	pushq	%rcx
000000000001563e	pushq	%r8
0000000000015640	pushq	%r9
0000000000015642	pushq	%r10
0000000000015644	pushq	%r11
0000000000015646	pushq	%r12
0000000000015648	pushq	%r13
000000000001564a	pushq	%r14
000000000001564c	pushq	%r15
000000000001564e	subq	$0x10, %rsp
0000000000015652	movss	%xmm0, (%rsp)
0000000000015657	subq	$0x10, %rsp
000000000001565b	movss	%xmm1, (%rsp)
0000000000015660	pushq	%rsi
0000000000015661	pushq	%rdi
0000000000015662	callq	__Z7getBasev ## getBase()
0000000000015667	addq	$0x2735d0, %rax
000000000001566d	popq	%rdi
000000000001566e	popq	%rsi
000000000001566f	movss	(%rsp), %xmm1
0000000000015674	addq	$0x10, %rsp
0000000000015678	movss	(%rsp), %xmm0
000000000001567d	addq	$0x10, %rsp
0000000000015681	popq	%r15
0000000000015683	popq	%r14
0000000000015685	popq	%r13
0000000000015687	popq	%r12
0000000000015689	popq	%r11
000000000001568b	popq	%r10
000000000001568d	popq	%r9
000000000001568f	popq	%r8
0000000000015691	popq	%rcx
0000000000015692	popq	%rdx
0000000000015693	popq	%rsi
0000000000015694	popq	%rdi
0000000000015695	popq	%rbx
0000000000015696	popq	%rbp
0000000000015697	jmpq	*%rax
__ZN12FLAlertLayer12ccTouchMovedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
0000000000015699	pushq	%rbp
000000000001569a	movq	%rsp, %rbp
000000000001569d	pushq	%rbx
000000000001569e	pushq	%rdi
000000000001569f	pushq	%rsi
00000000000156a0	pushq	%rdx
00000000000156a1	pushq	%rcx
00000000000156a2	pushq	%r8
00000000000156a4	pushq	%r9
00000000000156a6	pushq	%r10
00000000000156a8	pushq	%r11
00000000000156aa	pushq	%r12
00000000000156ac	pushq	%r13
00000000000156ae	pushq	%r14
00000000000156b0	pushq	%r15
00000000000156b2	subq	$0x10, %rsp
00000000000156b6	movss	%xmm0, (%rsp)
00000000000156bb	subq	$0x10, %rsp
00000000000156bf	movss	%xmm1, (%rsp)
00000000000156c4	pushq	%rsi
00000000000156c5	pushq	%rdi
00000000000156c6	callq	__Z7getBasev ## getBase()
00000000000156cb	addq	$0x273550, %rax
00000000000156d1	popq	%rdi
00000000000156d2	popq	%rsi
00000000000156d3	movss	(%rsp), %xmm1
00000000000156d8	addq	$0x10, %rsp
00000000000156dc	movss	(%rsp), %xmm0
00000000000156e1	addq	$0x10, %rsp
00000000000156e5	popq	%r15
00000000000156e7	popq	%r14
00000000000156e9	popq	%r13
00000000000156eb	popq	%r12
00000000000156ed	popq	%r11
00000000000156ef	popq	%r10
00000000000156f1	popq	%r9
00000000000156f3	popq	%r8
00000000000156f5	popq	%rcx
00000000000156f6	popq	%rdx
00000000000156f7	popq	%rsi
00000000000156f8	popq	%rdi
00000000000156f9	popq	%rbx
00000000000156fa	popq	%rbp
00000000000156fb	jmpq	*%rax
__ZN12FLAlertLayer14keyBackClickedEv:
00000000000156fd	pushq	%rbp
00000000000156fe	movq	%rsp, %rbp
0000000000015701	pushq	%rbx
0000000000015702	pushq	%rdi
0000000000015703	pushq	%rsi
0000000000015704	pushq	%rdx
0000000000015705	pushq	%rcx
0000000000015706	pushq	%r8
0000000000015708	pushq	%r9
000000000001570a	pushq	%r10
000000000001570c	pushq	%r11
000000000001570e	pushq	%r12
0000000000015710	pushq	%r13
0000000000015712	pushq	%r14
0000000000015714	pushq	%r15
0000000000015716	subq	$0x10, %rsp
000000000001571a	movss	%xmm0, (%rsp)
000000000001571f	subq	$0x10, %rsp
0000000000015723	movss	%xmm1, (%rsp)
0000000000015728	pushq	%rsi
0000000000015729	pushq	%rdi
000000000001572a	callq	__Z7getBasev ## getBase()
000000000001572f	addq	$0x273160, %rax
0000000000015735	popq	%rdi
0000000000015736	popq	%rsi
0000000000015737	movss	(%rsp), %xmm1
000000000001573c	addq	$0x10, %rsp
0000000000015740	movss	(%rsp), %xmm0
0000000000015745	addq	$0x10, %rsp
0000000000015749	popq	%r15
000000000001574b	popq	%r14
000000000001574d	popq	%r13
000000000001574f	popq	%r12
0000000000015751	popq	%r11
0000000000015753	popq	%r10
0000000000015755	popq	%r9
0000000000015757	popq	%r8
0000000000015759	popq	%rcx
000000000001575a	popq	%rdx
000000000001575b	popq	%rsi
000000000001575c	popq	%rdi
000000000001575d	popq	%rbx
000000000001575e	popq	%rbp
000000000001575f	jmpq	*%rax
__ZN12FLAlertLayer16ccTouchCancelledEPN7cocos2d7CCTouchEPNS0_7CCEventE:
0000000000015761	pushq	%rbp
0000000000015762	movq	%rsp, %rbp
0000000000015765	pushq	%rbx
0000000000015766	pushq	%rdi
0000000000015767	pushq	%rsi
0000000000015768	pushq	%rdx
0000000000015769	pushq	%rcx
000000000001576a	pushq	%r8
000000000001576c	pushq	%r9
000000000001576e	pushq	%r10
0000000000015770	pushq	%r11
0000000000015772	pushq	%r12
0000000000015774	pushq	%r13
0000000000015776	pushq	%r14
0000000000015778	pushq	%r15
000000000001577a	subq	$0x10, %rsp
000000000001577e	movss	%xmm0, (%rsp)
0000000000015783	subq	$0x10, %rsp
0000000000015787	movss	%xmm1, (%rsp)
000000000001578c	pushq	%rsi
000000000001578d	pushq	%rdi
000000000001578e	callq	__Z7getBasev ## getBase()
0000000000015793	addq	$0x273650, %rax
0000000000015799	popq	%rdi
000000000001579a	popq	%rsi
000000000001579b	movss	(%rsp), %xmm1
00000000000157a0	addq	$0x10, %rsp
00000000000157a4	movss	(%rsp), %xmm0
00000000000157a9	addq	$0x10, %rsp
00000000000157ad	popq	%r15
00000000000157af	popq	%r14
00000000000157b1	popq	%r13
00000000000157b3	popq	%r12
00000000000157b5	popq	%r11
00000000000157b7	popq	%r10
00000000000157b9	popq	%r9
00000000000157bb	popq	%r8
00000000000157bd	popq	%rcx
00000000000157be	popq	%rdx
00000000000157bf	popq	%rsi
00000000000157c0	popq	%rdi
00000000000157c1	popq	%rbx
00000000000157c2	popq	%rbp
00000000000157c3	jmpq	*%rax
__ZN12FLAlertLayer27registerWithTouchDispatcherEv:
00000000000157c5	pushq	%rbp
00000000000157c6	movq	%rsp, %rbp
00000000000157c9	pushq	%rbx
00000000000157ca	pushq	%rdi
00000000000157cb	pushq	%rsi
00000000000157cc	pushq	%rdx
00000000000157cd	pushq	%rcx
00000000000157ce	pushq	%r8
00000000000157d0	pushq	%r9
00000000000157d2	pushq	%r10
00000000000157d4	pushq	%r11
00000000000157d6	pushq	%r12
00000000000157d8	pushq	%r13
00000000000157da	pushq	%r14
00000000000157dc	pushq	%r15
00000000000157de	subq	$0x10, %rsp
00000000000157e2	movss	%xmm0, (%rsp)
00000000000157e7	subq	$0x10, %rsp
00000000000157eb	movss	%xmm1, (%rsp)
00000000000157f0	pushq	%rsi
00000000000157f1	pushq	%rdi
00000000000157f2	callq	__Z7getBasev ## getBase()
00000000000157f7	addq	$0x272b40, %rax
00000000000157fd	popq	%rdi
00000000000157fe	popq	%rsi
00000000000157ff	movss	(%rsp), %xmm1
0000000000015804	addq	$0x10, %rsp
0000000000015808	movss	(%rsp), %xmm0
000000000001580d	addq	$0x10, %rsp
0000000000015811	popq	%r15
0000000000015813	popq	%r14
0000000000015815	popq	%r13
0000000000015817	popq	%r12
0000000000015819	popq	%r11
000000000001581b	popq	%r10
000000000001581d	popq	%r9
000000000001581f	popq	%r8
0000000000015821	popq	%rcx
0000000000015822	popq	%rdx
0000000000015823	popq	%rsi
0000000000015824	popq	%rdi
0000000000015825	popq	%rbx
0000000000015826	popq	%rbp
0000000000015827	jmpq	*%rax
__ZN12FLAlertLayer4showEv:
0000000000015829	pushq	%rbp
000000000001582a	movq	%rsp, %rbp
000000000001582d	pushq	%rbx
000000000001582e	pushq	%rdi
000000000001582f	pushq	%rsi
0000000000015830	pushq	%rdx
0000000000015831	pushq	%rcx
0000000000015832	pushq	%r8
0000000000015834	pushq	%r9
0000000000015836	pushq	%r10
0000000000015838	pushq	%r11
000000000001583a	pushq	%r12
000000000001583c	pushq	%r13
000000000001583e	pushq	%r14
0000000000015840	pushq	%r15
0000000000015842	subq	$0x10, %rsp
0000000000015846	movss	%xmm0, (%rsp)
000000000001584b	subq	$0x10, %rsp
000000000001584f	movss	%xmm1, (%rsp)
0000000000015854	pushq	%rsi
0000000000015855	pushq	%rdi
0000000000015856	callq	__Z7getBasev ## getBase()
000000000001585b	addq	$0x25f120, %rax
0000000000015861	popq	%rdi
0000000000015862	popq	%rsi
0000000000015863	movss	(%rsp), %xmm1
0000000000015868	addq	$0x10, %rsp
000000000001586c	movss	(%rsp), %xmm0
0000000000015871	addq	$0x10, %rsp
0000000000015875	popq	%r15
0000000000015877	popq	%r14
0000000000015879	popq	%r13
000000000001587b	popq	%r12
000000000001587d	popq	%r11
000000000001587f	popq	%r10
0000000000015881	popq	%r9
0000000000015883	popq	%r8
0000000000015885	popq	%rcx
0000000000015886	popq	%rdx
0000000000015887	popq	%rsi
0000000000015888	popq	%rdi
0000000000015889	popq	%rbx
000000000001588a	popq	%rbp
000000000001588b	jmpq	*%rax
__ZN12FLAlertLayer6createEPvPKcRKSsS2_S2_f:
000000000001588d	pushq	%rbp
000000000001588e	movq	%rsp, %rbp
0000000000015891	pushq	%rbx
0000000000015892	pushq	%rdi
0000000000015893	pushq	%rsi
0000000000015894	pushq	%rdx
0000000000015895	pushq	%rcx
0000000000015896	pushq	%r8
0000000000015898	pushq	%r9
000000000001589a	pushq	%r10
000000000001589c	pushq	%r11
000000000001589e	pushq	%r12
00000000000158a0	pushq	%r13
00000000000158a2	pushq	%r14
00000000000158a4	pushq	%r15
00000000000158a6	subq	$0x10, %rsp
00000000000158aa	movss	%xmm0, (%rsp)
00000000000158af	subq	$0x10, %rsp
00000000000158b3	movss	%xmm1, (%rsp)
00000000000158b8	pushq	%rsi
00000000000158b9	pushq	%rdi
00000000000158ba	callq	__Z7getBasev ## getBase()
00000000000158bf	addq	$0x25e0e0, %rax
00000000000158c5	popq	%rdi
00000000000158c6	popq	%rsi
00000000000158c7	movss	(%rsp), %xmm1
00000000000158cc	addq	$0x10, %rsp
00000000000158d0	movss	(%rsp), %xmm0
00000000000158d5	addq	$0x10, %rsp
00000000000158d9	popq	%r15
00000000000158db	popq	%r14
00000000000158dd	popq	%r13
00000000000158df	popq	%r12
00000000000158e1	popq	%r11
00000000000158e3	popq	%r10
00000000000158e5	popq	%r9
00000000000158e7	popq	%r8
00000000000158e9	popq	%rcx
00000000000158ea	popq	%rdx
00000000000158eb	popq	%rsi
00000000000158ec	popq	%rdi
00000000000158ed	popq	%rbx
00000000000158ee	popq	%rbp
00000000000158ef	jmpq	*%rax
__ZN12FLAlertLayer7keyDownEN7cocos2d12enumKeyCodesE:
00000000000158f1	pushq	%rbp
00000000000158f2	movq	%rsp, %rbp
00000000000158f5	pushq	%rbx
00000000000158f6	pushq	%rdi
00000000000158f7	pushq	%rsi
00000000000158f8	pushq	%rdx
00000000000158f9	pushq	%rcx
00000000000158fa	pushq	%r8
00000000000158fc	pushq	%r9
00000000000158fe	pushq	%r10
0000000000015900	pushq	%r11
0000000000015902	pushq	%r12
0000000000015904	pushq	%r13
0000000000015906	pushq	%r14
0000000000015908	pushq	%r15
000000000001590a	subq	$0x10, %rsp
000000000001590e	movss	%xmm0, (%rsp)
0000000000015913	subq	$0x10, %rsp
0000000000015917	movss	%xmm1, (%rsp)
000000000001591c	pushq	%rsi
000000000001591d	pushq	%rdi
000000000001591e	callq	__Z7getBasev ## getBase()
0000000000015923	addq	$0x273280, %rax
0000000000015929	popq	%rdi
000000000001592a	popq	%rsi
000000000001592b	movss	(%rsp), %xmm1
0000000000015930	addq	$0x10, %rsp
0000000000015934	movss	(%rsp), %xmm0
0000000000015939	addq	$0x10, %rsp
000000000001593d	popq	%r15
000000000001593f	popq	%r14
0000000000015941	popq	%r13
0000000000015943	popq	%r12
0000000000015945	popq	%r11
0000000000015947	popq	%r10
0000000000015949	popq	%r9
000000000001594b	popq	%r8
000000000001594d	popq	%rcx
000000000001594e	popq	%rdx
000000000001594f	popq	%rsi
0000000000015950	popq	%rdi
0000000000015951	popq	%rbx
0000000000015952	popq	%rbp
0000000000015953	jmpq	*%rax
__ZN12FLAlertLayer7onEnterEv:
0000000000015955	pushq	%rbp
0000000000015956	movq	%rsp, %rbp
0000000000015959	pushq	%rbx
000000000001595a	pushq	%rdi
000000000001595b	pushq	%rsi
000000000001595c	pushq	%rdx
000000000001595d	pushq	%rcx
000000000001595e	pushq	%r8
0000000000015960	pushq	%r9
0000000000015962	pushq	%r10
0000000000015964	pushq	%r11
0000000000015966	pushq	%r12
0000000000015968	pushq	%r13
000000000001596a	pushq	%r14
000000000001596c	pushq	%r15
000000000001596e	subq	$0x10, %rsp
0000000000015972	movss	%xmm0, (%rsp)
0000000000015977	subq	$0x10, %rsp
000000000001597b	movss	%xmm1, (%rsp)
0000000000015980	pushq	%rsi
0000000000015981	pushq	%rdi
0000000000015982	callq	__Z7getBasev ## getBase()
0000000000015987	addq	$0x273300, %rax
000000000001598d	popq	%rdi
000000000001598e	popq	%rsi
000000000001598f	movss	(%rsp), %xmm1
0000000000015994	addq	$0x10, %rsp
0000000000015998	movss	(%rsp), %xmm0
000000000001599d	addq	$0x10, %rsp
00000000000159a1	popq	%r15
00000000000159a3	popq	%r14
00000000000159a5	popq	%r13
00000000000159a7	popq	%r12
00000000000159a9	popq	%r11
00000000000159ab	popq	%r10
00000000000159ad	popq	%r9
00000000000159af	popq	%r8
00000000000159b1	popq	%rcx
00000000000159b2	popq	%rdx
00000000000159b3	popq	%rsi
00000000000159b4	popq	%rdi
00000000000159b5	popq	%rbx
00000000000159b6	popq	%rbp
00000000000159b7	jmpq	*%rax
__ZN12FLAlertLayerC1Ev:
00000000000159b9	pushq	%rbp
00000000000159ba	movq	%rsp, %rbp
00000000000159bd	pushq	%rbx
00000000000159be	pushq	%rdi
00000000000159bf	pushq	%rsi
00000000000159c0	pushq	%rdx
00000000000159c1	pushq	%rcx
00000000000159c2	pushq	%r8
00000000000159c4	pushq	%r9
00000000000159c6	pushq	%r10
00000000000159c8	pushq	%r11
00000000000159ca	pushq	%r12
00000000000159cc	pushq	%r13
00000000000159ce	pushq	%r14
00000000000159d0	pushq	%r15
00000000000159d2	subq	$0x10, %rsp
00000000000159d6	movss	%xmm0, (%rsp)
00000000000159db	subq	$0x10, %rsp
00000000000159df	movss	%xmm1, (%rsp)
00000000000159e4	pushq	%rsi
00000000000159e5	pushq	%rdi
00000000000159e6	callq	__Z7getBasev ## getBase()
00000000000159eb	addq	$0x274270, %rax
00000000000159f1	popq	%rdi
00000000000159f2	popq	%rsi
00000000000159f3	movss	(%rsp), %xmm1
00000000000159f8	addq	$0x10, %rsp
00000000000159fc	movss	(%rsp), %xmm0
0000000000015a01	addq	$0x10, %rsp
0000000000015a05	popq	%r15
0000000000015a07	popq	%r14
0000000000015a09	popq	%r13
0000000000015a0b	popq	%r12
0000000000015a0d	popq	%r11
0000000000015a0f	popq	%r10
0000000000015a11	popq	%r9
0000000000015a13	popq	%r8
0000000000015a15	popq	%rcx
0000000000015a16	popq	%rdx
0000000000015a17	popq	%rsi
0000000000015a18	popq	%rdi
0000000000015a19	popq	%rbx
0000000000015a1a	popq	%rbp
0000000000015a1b	jmpq	*%rax
__ZN12FLAlertLayerC2Ev:
0000000000015a1d	pushq	%rbp
0000000000015a1e	movq	%rsp, %rbp
0000000000015a21	pushq	%rbx
0000000000015a22	pushq	%rdi
0000000000015a23	pushq	%rsi
0000000000015a24	pushq	%rdx
0000000000015a25	pushq	%rcx
0000000000015a26	pushq	%r8
0000000000015a28	pushq	%r9
0000000000015a2a	pushq	%r10
0000000000015a2c	pushq	%r11
0000000000015a2e	pushq	%r12
0000000000015a30	pushq	%r13
0000000000015a32	pushq	%r14
0000000000015a34	pushq	%r15
0000000000015a36	subq	$0x10, %rsp
0000000000015a3a	movss	%xmm0, (%rsp)
0000000000015a3f	subq	$0x10, %rsp
0000000000015a43	movss	%xmm1, (%rsp)
0000000000015a48	pushq	%rsi
0000000000015a49	pushq	%rdi
0000000000015a4a	callq	__Z7getBasev ## getBase()
0000000000015a4f	addq	$0x274270, %rax
0000000000015a55	popq	%rdi
0000000000015a56	popq	%rsi
0000000000015a57	movss	(%rsp), %xmm1
0000000000015a5c	addq	$0x10, %rsp
0000000000015a60	movss	(%rsp), %xmm0
0000000000015a65	addq	$0x10, %rsp
0000000000015a69	popq	%r15
0000000000015a6b	popq	%r14
0000000000015a6d	popq	%r13
0000000000015a6f	popq	%r12
0000000000015a71	popq	%r11
0000000000015a73	popq	%r10
0000000000015a75	popq	%r9
0000000000015a77	popq	%r8
0000000000015a79	popq	%rcx
0000000000015a7a	popq	%rdx
0000000000015a7b	popq	%rsi
0000000000015a7c	popq	%rdi
0000000000015a7d	popq	%rbx
0000000000015a7e	popq	%rbp
0000000000015a7f	jmpq	*%rax
__ZN12FLAlertLayerD1Ev:
0000000000015a81	pushq	%rbp
0000000000015a82	movq	%rsp, %rbp
0000000000015a85	pushq	%rbx
0000000000015a86	pushq	%rdi
0000000000015a87	pushq	%rsi
0000000000015a88	pushq	%rdx
0000000000015a89	pushq	%rcx
0000000000015a8a	pushq	%r8
0000000000015a8c	pushq	%r9
0000000000015a8e	pushq	%r10
0000000000015a90	pushq	%r11
0000000000015a92	pushq	%r12
0000000000015a94	pushq	%r13
0000000000015a96	pushq	%r14
0000000000015a98	pushq	%r15
0000000000015a9a	subq	$0x10, %rsp
0000000000015a9e	movss	%xmm0, (%rsp)
0000000000015aa3	subq	$0x10, %rsp
0000000000015aa7	movss	%xmm1, (%rsp)
0000000000015aac	pushq	%rsi
0000000000015aad	pushq	%rdi
0000000000015aae	callq	__Z7getBasev ## getBase()
0000000000015ab3	addq	$0x2727b0, %rax
0000000000015ab9	popq	%rdi
0000000000015aba	popq	%rsi
0000000000015abb	movss	(%rsp), %xmm1
0000000000015ac0	addq	$0x10, %rsp
0000000000015ac4	movss	(%rsp), %xmm0
0000000000015ac9	addq	$0x10, %rsp
0000000000015acd	popq	%r15
0000000000015acf	popq	%r14
0000000000015ad1	popq	%r13
0000000000015ad3	popq	%r12
0000000000015ad5	popq	%r11
0000000000015ad7	popq	%r10
0000000000015ad9	popq	%r9
0000000000015adb	popq	%r8
0000000000015add	popq	%rcx
0000000000015ade	popq	%rdx
0000000000015adf	popq	%rsi
0000000000015ae0	popq	%rdi
0000000000015ae1	popq	%rbx
0000000000015ae2	popq	%rbp
0000000000015ae3	jmpq	*%rax
__ZN12FLAlertLayerD2Ev:
0000000000015ae5	pushq	%rbp
0000000000015ae6	movq	%rsp, %rbp
0000000000015ae9	pushq	%rbx
0000000000015aea	pushq	%rdi
0000000000015aeb	pushq	%rsi
0000000000015aec	pushq	%rdx
0000000000015aed	pushq	%rcx
0000000000015aee	pushq	%r8
0000000000015af0	pushq	%r9
0000000000015af2	pushq	%r10
0000000000015af4	pushq	%r11
0000000000015af6	pushq	%r12
0000000000015af8	pushq	%r13
0000000000015afa	pushq	%r14
0000000000015afc	pushq	%r15
0000000000015afe	subq	$0x10, %rsp
0000000000015b02	movss	%xmm0, (%rsp)
0000000000015b07	subq	$0x10, %rsp
0000000000015b0b	movss	%xmm1, (%rsp)
0000000000015b10	pushq	%rsi
0000000000015b11	pushq	%rdi
0000000000015b12	callq	__Z7getBasev ## getBase()
0000000000015b17	addq	$0x2727b0, %rax
0000000000015b1d	popq	%rdi
0000000000015b1e	popq	%rsi
0000000000015b1f	movss	(%rsp), %xmm1
0000000000015b24	addq	$0x10, %rsp
0000000000015b28	movss	(%rsp), %xmm0
0000000000015b2d	addq	$0x10, %rsp
0000000000015b31	popq	%r15
0000000000015b33	popq	%r14
0000000000015b35	popq	%r13
0000000000015b37	popq	%r12
0000000000015b39	popq	%r11
0000000000015b3b	popq	%r10
0000000000015b3d	popq	%r9
0000000000015b3f	popq	%r8
0000000000015b41	popq	%rcx
0000000000015b42	popq	%rdx
0000000000015b43	popq	%rsi
0000000000015b44	popq	%rdi
0000000000015b45	popq	%rbx
0000000000015b46	popq	%rbp
0000000000015b47	jmpq	*%rax
__ZN12FLAlertLayerD0Ev:
0000000000015b49	pushq	%rbp
0000000000015b4a	movq	%rsp, %rbp
0000000000015b4d	pushq	%rbx
0000000000015b4e	pushq	%rdi
0000000000015b4f	pushq	%rsi
0000000000015b50	pushq	%rdx
0000000000015b51	pushq	%rcx
0000000000015b52	pushq	%r8
0000000000015b54	pushq	%r9
0000000000015b56	pushq	%r10
0000000000015b58	pushq	%r11
0000000000015b5a	pushq	%r12
0000000000015b5c	pushq	%r13
0000000000015b5e	pushq	%r14
0000000000015b60	pushq	%r15
0000000000015b62	subq	$0x10, %rsp
0000000000015b66	movss	%xmm0, (%rsp)
0000000000015b6b	subq	$0x10, %rsp
0000000000015b6f	movss	%xmm1, (%rsp)
0000000000015b74	pushq	%rsi
0000000000015b75	pushq	%rdi
0000000000015b76	callq	__Z7getBasev ## getBase()
0000000000015b7b	addq	$0x274410, %rax
0000000000015b81	popq	%rdi
0000000000015b82	popq	%rsi
0000000000015b83	movss	(%rsp), %xmm1
0000000000015b88	addq	$0x10, %rsp
0000000000015b8c	movss	(%rsp), %xmm0
0000000000015b91	addq	$0x10, %rsp
0000000000015b95	popq	%r15
0000000000015b97	popq	%r14
0000000000015b99	popq	%r13
0000000000015b9b	popq	%r12
0000000000015b9d	popq	%r11
0000000000015b9f	popq	%r10
0000000000015ba1	popq	%r9
0000000000015ba3	popq	%r8
0000000000015ba5	popq	%rcx
0000000000015ba6	popq	%rdx
0000000000015ba7	popq	%rsi
0000000000015ba8	popq	%rdi
0000000000015ba9	popq	%rbx
0000000000015baa	popq	%rbp
0000000000015bab	jmpq	*%rax
__ZN12PlayerObject14setSecondColorERKN7cocos2d10_ccColor3BE:
0000000000015bad	pushq	%rbp
0000000000015bae	movq	%rsp, %rbp
0000000000015bb1	pushq	%rbx
0000000000015bb2	pushq	%rdi
0000000000015bb3	pushq	%rsi
0000000000015bb4	pushq	%rdx
0000000000015bb5	pushq	%rcx
0000000000015bb6	pushq	%r8
0000000000015bb8	pushq	%r9
0000000000015bba	pushq	%r10
0000000000015bbc	pushq	%r11
0000000000015bbe	pushq	%r12
0000000000015bc0	pushq	%r13
0000000000015bc2	pushq	%r14
0000000000015bc4	pushq	%r15
0000000000015bc6	subq	$0x10, %rsp
0000000000015bca	movss	%xmm0, (%rsp)
0000000000015bcf	subq	$0x10, %rsp
0000000000015bd3	movss	%xmm1, (%rsp)
0000000000015bd8	pushq	%rsi
0000000000015bd9	pushq	%rdi
0000000000015bda	callq	__Z7getBasev ## getBase()
0000000000015bdf	addq	$0x219610, %rax
0000000000015be5	popq	%rdi
0000000000015be6	popq	%rsi
0000000000015be7	movss	(%rsp), %xmm1
0000000000015bec	addq	$0x10, %rsp
0000000000015bf0	movss	(%rsp), %xmm0
0000000000015bf5	addq	$0x10, %rsp
0000000000015bf9	popq	%r15
0000000000015bfb	popq	%r14
0000000000015bfd	popq	%r13
0000000000015bff	popq	%r12
0000000000015c01	popq	%r11
0000000000015c03	popq	%r10
0000000000015c05	popq	%r9
0000000000015c07	popq	%r8
0000000000015c09	popq	%rcx
0000000000015c0a	popq	%rdx
0000000000015c0b	popq	%rsi
0000000000015c0c	popq	%rdi
0000000000015c0d	popq	%rbx
0000000000015c0e	popq	%rbp
0000000000015c0f	jmpq	*%rax
__ZN12PlayerObject15addAllParticlesEv:
0000000000015c11	pushq	%rbp
0000000000015c12	movq	%rsp, %rbp
0000000000015c15	pushq	%rbx
0000000000015c16	pushq	%rdi
0000000000015c17	pushq	%rsi
0000000000015c18	pushq	%rdx
0000000000015c19	pushq	%rcx
0000000000015c1a	pushq	%r8
0000000000015c1c	pushq	%r9
0000000000015c1e	pushq	%r10
0000000000015c20	pushq	%r11
0000000000015c22	pushq	%r12
0000000000015c24	pushq	%r13
0000000000015c26	pushq	%r14
0000000000015c28	pushq	%r15
0000000000015c2a	subq	$0x10, %rsp
0000000000015c2e	movss	%xmm0, (%rsp)
0000000000015c33	subq	$0x10, %rsp
0000000000015c37	movss	%xmm1, (%rsp)
0000000000015c3c	pushq	%rsi
0000000000015c3d	pushq	%rdi
0000000000015c3e	callq	__Z7getBasev ## getBase()
0000000000015c43	addq	$0x2189b0, %rax
0000000000015c49	popq	%rdi
0000000000015c4a	popq	%rsi
0000000000015c4b	movss	(%rsp), %xmm1
0000000000015c50	addq	$0x10, %rsp
0000000000015c54	movss	(%rsp), %xmm0
0000000000015c59	addq	$0x10, %rsp
0000000000015c5d	popq	%r15
0000000000015c5f	popq	%r14
0000000000015c61	popq	%r13
0000000000015c63	popq	%r12
0000000000015c65	popq	%r11
0000000000015c67	popq	%r10
0000000000015c69	popq	%r9
0000000000015c6b	popq	%r8
0000000000015c6d	popq	%rcx
0000000000015c6e	popq	%rdx
0000000000015c6f	popq	%rsi
0000000000015c70	popq	%rdi
0000000000015c71	popq	%rbx
0000000000015c72	popq	%rbp
0000000000015c73	jmpq	*%rax
__ZN12PlayerObject6createEiiPN7cocos2d7CCLayerE:
0000000000015c75	pushq	%rbp
0000000000015c76	movq	%rsp, %rbp
0000000000015c79	pushq	%rbx
0000000000015c7a	pushq	%rdi
0000000000015c7b	pushq	%rsi
0000000000015c7c	pushq	%rdx
0000000000015c7d	pushq	%rcx
0000000000015c7e	pushq	%r8
0000000000015c80	pushq	%r9
0000000000015c82	pushq	%r10
0000000000015c84	pushq	%r11
0000000000015c86	pushq	%r12
0000000000015c88	pushq	%r13
0000000000015c8a	pushq	%r14
0000000000015c8c	pushq	%r15
0000000000015c8e	subq	$0x10, %rsp
0000000000015c92	movss	%xmm0, (%rsp)
0000000000015c97	subq	$0x10, %rsp
0000000000015c9b	movss	%xmm1, (%rsp)
0000000000015ca0	pushq	%rsi
0000000000015ca1	pushq	%rdi
0000000000015ca2	callq	__Z7getBasev ## getBase()
0000000000015ca7	addq	$0x217260, %rax
0000000000015cad	popq	%rdi
0000000000015cae	popq	%rsi
0000000000015caf	movss	(%rsp), %xmm1
0000000000015cb4	addq	$0x10, %rsp
0000000000015cb8	movss	(%rsp), %xmm0
0000000000015cbd	addq	$0x10, %rsp
0000000000015cc1	popq	%r15
0000000000015cc3	popq	%r14
0000000000015cc5	popq	%r13
0000000000015cc7	popq	%r12
0000000000015cc9	popq	%r11
0000000000015ccb	popq	%r10
0000000000015ccd	popq	%r9
0000000000015ccf	popq	%r8
0000000000015cd1	popq	%rcx
0000000000015cd2	popq	%rdx
0000000000015cd3	popq	%rsi
0000000000015cd4	popq	%rdi
0000000000015cd5	popq	%rbx
0000000000015cd6	popq	%rbp
0000000000015cd7	jmpq	*%rax
__ZN12PlayerObject8setColorERKN7cocos2d10_ccColor3BE:
0000000000015cd9	pushq	%rbp
0000000000015cda	movq	%rsp, %rbp
0000000000015cdd	pushq	%rbx
0000000000015cde	pushq	%rdi
0000000000015cdf	pushq	%rsi
0000000000015ce0	pushq	%rdx
0000000000015ce1	pushq	%rcx
0000000000015ce2	pushq	%r8
0000000000015ce4	pushq	%r9
0000000000015ce6	pushq	%r10
0000000000015ce8	pushq	%r11
0000000000015cea	pushq	%r12
0000000000015cec	pushq	%r13
0000000000015cee	pushq	%r14
0000000000015cf0	pushq	%r15
0000000000015cf2	subq	$0x10, %rsp
0000000000015cf6	movss	%xmm0, (%rsp)
0000000000015cfb	subq	$0x10, %rsp
0000000000015cff	movss	%xmm1, (%rsp)
0000000000015d04	pushq	%rsi
0000000000015d05	pushq	%rdi
0000000000015d06	callq	__Z7getBasev ## getBase()
0000000000015d0b	addq	$0x22cdf0, %rax
0000000000015d11	popq	%rdi
0000000000015d12	popq	%rsi
0000000000015d13	movss	(%rsp), %xmm1
0000000000015d18	addq	$0x10, %rsp
0000000000015d1c	movss	(%rsp), %xmm0
0000000000015d21	addq	$0x10, %rsp
0000000000015d25	popq	%r15
0000000000015d27	popq	%r14
0000000000015d29	popq	%r13
0000000000015d2b	popq	%r12
0000000000015d2d	popq	%r11
0000000000015d2f	popq	%r10
0000000000015d31	popq	%r9
0000000000015d33	popq	%r8
0000000000015d35	popq	%rcx
0000000000015d36	popq	%rdx
0000000000015d37	popq	%rsi
0000000000015d38	popq	%rdi
0000000000015d39	popq	%rbx
0000000000015d3a	popq	%rbp
0000000000015d3b	jmpq	*%rax
__ZN12PlayerObject11flipGravityEbb:
0000000000015d3d	pushq	%rbp
0000000000015d3e	movq	%rsp, %rbp
0000000000015d41	pushq	%rbx
0000000000015d42	pushq	%rdi
0000000000015d43	pushq	%rsi
0000000000015d44	pushq	%rdx
0000000000015d45	pushq	%rcx
0000000000015d46	pushq	%r8
0000000000015d48	pushq	%r9
0000000000015d4a	pushq	%r10
0000000000015d4c	pushq	%r11
0000000000015d4e	pushq	%r12
0000000000015d50	pushq	%r13
0000000000015d52	pushq	%r14
0000000000015d54	pushq	%r15
0000000000015d56	subq	$0x10, %rsp
0000000000015d5a	movss	%xmm0, (%rsp)
0000000000015d5f	subq	$0x10, %rsp
0000000000015d63	movss	%xmm1, (%rsp)
0000000000015d68	pushq	%rsi
0000000000015d69	pushq	%rdi
0000000000015d6a	callq	__Z7getBasev ## getBase()
0000000000015d6f	addq	$0x21c090, %rax
0000000000015d75	popq	%rdi
0000000000015d76	popq	%rsi
0000000000015d77	movss	(%rsp), %xmm1
0000000000015d7c	addq	$0x10, %rsp
0000000000015d80	movss	(%rsp), %xmm0
0000000000015d85	addq	$0x10, %rsp
0000000000015d89	popq	%r15
0000000000015d8b	popq	%r14
0000000000015d8d	popq	%r13
0000000000015d8f	popq	%r12
0000000000015d91	popq	%r11
0000000000015d93	popq	%r10
0000000000015d95	popq	%r9
0000000000015d97	popq	%r8
0000000000015d99	popq	%rcx
0000000000015d9a	popq	%rdx
0000000000015d9b	popq	%rsi
0000000000015d9c	popq	%rdi
0000000000015d9d	popq	%rbx
0000000000015d9e	popq	%rbp
0000000000015d9f	jmpq	*%rax
__ZN13ObjectToolbox11sharedStateEv:
0000000000015da1	pushq	%rbp
0000000000015da2	movq	%rsp, %rbp
0000000000015da5	pushq	%rbx
0000000000015da6	pushq	%rdi
0000000000015da7	pushq	%rsi
0000000000015da8	pushq	%rdx
0000000000015da9	pushq	%rcx
0000000000015daa	pushq	%r8
0000000000015dac	pushq	%r9
0000000000015dae	pushq	%r10
0000000000015db0	pushq	%r11
0000000000015db2	pushq	%r12
0000000000015db4	pushq	%r13
0000000000015db6	pushq	%r14
0000000000015db8	pushq	%r15
0000000000015dba	subq	$0x10, %rsp
0000000000015dbe	movss	%xmm0, (%rsp)
0000000000015dc3	subq	$0x10, %rsp
0000000000015dc7	movss	%xmm1, (%rsp)
0000000000015dcc	pushq	%rsi
0000000000015dcd	pushq	%rdi
0000000000015dce	callq	__Z7getBasev ## getBase()
0000000000015dd3	addq	$0x3b2bc0, %rax
0000000000015dd9	popq	%rdi
0000000000015dda	popq	%rsi
0000000000015ddb	movss	(%rsp), %xmm1
0000000000015de0	addq	$0x10, %rsp
0000000000015de4	movss	(%rsp), %xmm0
0000000000015de9	addq	$0x10, %rsp
0000000000015ded	popq	%r15
0000000000015def	popq	%r14
0000000000015df1	popq	%r13
0000000000015df3	popq	%r12
0000000000015df5	popq	%r11
0000000000015df7	popq	%r10
0000000000015df9	popq	%r9
0000000000015dfb	popq	%r8
0000000000015dfd	popq	%rcx
0000000000015dfe	popq	%rdx
0000000000015dff	popq	%rsi
0000000000015e00	popq	%rdi
0000000000015e01	popq	%rbx
0000000000015e02	popq	%rbp
0000000000015e03	jmpq	*%rax
__ZN13ObjectToolbox13intKeyToFrameEi:
0000000000015e05	pushq	%rbp
0000000000015e06	movq	%rsp, %rbp
0000000000015e09	pushq	%rbx
0000000000015e0a	pushq	%rdi
0000000000015e0b	pushq	%rsi
0000000000015e0c	pushq	%rdx
0000000000015e0d	pushq	%rcx
0000000000015e0e	pushq	%r8
0000000000015e10	pushq	%r9
0000000000015e12	pushq	%r10
0000000000015e14	pushq	%r11
0000000000015e16	pushq	%r12
0000000000015e18	pushq	%r13
0000000000015e1a	pushq	%r14
0000000000015e1c	pushq	%r15
0000000000015e1e	subq	$0x10, %rsp
0000000000015e22	movss	%xmm0, (%rsp)
0000000000015e27	subq	$0x10, %rsp
0000000000015e2b	movss	%xmm1, (%rsp)
0000000000015e30	pushq	%rsi
0000000000015e31	pushq	%rdi
0000000000015e32	callq	__Z7getBasev ## getBase()
0000000000015e37	addq	$0x4173b0, %rax
0000000000015e3d	popq	%rdi
0000000000015e3e	popq	%rsi
0000000000015e3f	movss	(%rsp), %xmm1
0000000000015e44	addq	$0x10, %rsp
0000000000015e48	movss	(%rsp), %xmm0
0000000000015e4d	addq	$0x10, %rsp
0000000000015e51	popq	%r15
0000000000015e53	popq	%r14
0000000000015e55	popq	%r13
0000000000015e57	popq	%r12
0000000000015e59	popq	%r11
0000000000015e5b	popq	%r10
0000000000015e5d	popq	%r9
0000000000015e5f	popq	%r8
0000000000015e61	popq	%rcx
0000000000015e62	popq	%rdx
0000000000015e63	popq	%rsi
0000000000015e64	popq	%rdi
0000000000015e65	popq	%rbx
0000000000015e66	popq	%rbp
0000000000015e67	jmpq	*%rax
__ZN14GJSearchObject6createEiSsSsSsibbbibbbbbbbbii:
0000000000015e69	pushq	%rbp
0000000000015e6a	movq	%rsp, %rbp
0000000000015e6d	pushq	%rbx
0000000000015e6e	pushq	%rdi
0000000000015e6f	pushq	%rsi
0000000000015e70	pushq	%rdx
0000000000015e71	pushq	%rcx
0000000000015e72	pushq	%r8
0000000000015e74	pushq	%r9
0000000000015e76	pushq	%r10
0000000000015e78	pushq	%r11
0000000000015e7a	pushq	%r12
0000000000015e7c	pushq	%r13
0000000000015e7e	pushq	%r14
0000000000015e80	pushq	%r15
0000000000015e82	subq	$0x10, %rsp
0000000000015e86	movss	%xmm0, (%rsp)
0000000000015e8b	subq	$0x10, %rsp
0000000000015e8f	movss	%xmm1, (%rsp)
0000000000015e94	pushq	%rsi
0000000000015e95	pushq	%rdi
0000000000015e96	callq	__Z7getBasev ## getBase()
0000000000015e9b	addq	$0x2dee30, %rax
0000000000015ea1	popq	%rdi
0000000000015ea2	popq	%rsi
0000000000015ea3	movss	(%rsp), %xmm1
0000000000015ea8	addq	$0x10, %rsp
0000000000015eac	movss	(%rsp), %xmm0
0000000000015eb1	addq	$0x10, %rsp
0000000000015eb5	popq	%r15
0000000000015eb7	popq	%r14
0000000000015eb9	popq	%r13
0000000000015ebb	popq	%r12
0000000000015ebd	popq	%r11
0000000000015ebf	popq	%r10
0000000000015ec1	popq	%r9
0000000000015ec3	popq	%r8
0000000000015ec5	popq	%rcx
0000000000015ec6	popq	%rdx
0000000000015ec7	popq	%rsi
0000000000015ec8	popq	%rdi
0000000000015ec9	popq	%rbx
0000000000015eca	popq	%rbp
0000000000015ecb	jmpq	*%rax
__ZN16EditorPauseLayer6createEP16LevelEditorLayer:
0000000000015ecd	pushq	%rbp
0000000000015ece	movq	%rsp, %rbp
0000000000015ed1	pushq	%rbx
0000000000015ed2	pushq	%rdi
0000000000015ed3	pushq	%rsi
0000000000015ed4	pushq	%rdx
0000000000015ed5	pushq	%rcx
0000000000015ed6	pushq	%r8
0000000000015ed8	pushq	%r9
0000000000015eda	pushq	%r10
0000000000015edc	pushq	%r11
0000000000015ede	pushq	%r12
0000000000015ee0	pushq	%r13
0000000000015ee2	pushq	%r14
0000000000015ee4	pushq	%r15
0000000000015ee6	subq	$0x10, %rsp
0000000000015eea	movss	%xmm0, (%rsp)
0000000000015eef	subq	$0x10, %rsp
0000000000015ef3	movss	%xmm1, (%rsp)
0000000000015ef8	pushq	%rsi
0000000000015ef9	pushq	%rdi
0000000000015efa	callq	__Z7getBasev ## getBase()
0000000000015eff	addq	$0x13c680, %rax
0000000000015f05	popq	%rdi
0000000000015f06	popq	%rsi
0000000000015f07	movss	(%rsp), %xmm1
0000000000015f0c	addq	$0x10, %rsp
0000000000015f10	movss	(%rsp), %xmm0
0000000000015f15	addq	$0x10, %rsp
0000000000015f19	popq	%r15
0000000000015f1b	popq	%r14
0000000000015f1d	popq	%r13
0000000000015f1f	popq	%r12
0000000000015f21	popq	%r11
0000000000015f23	popq	%r10
0000000000015f25	popq	%r9
0000000000015f27	popq	%r8
0000000000015f29	popq	%rcx
0000000000015f2a	popq	%rdx
0000000000015f2b	popq	%rsi
0000000000015f2c	popq	%rdi
0000000000015f2d	popq	%rbx
0000000000015f2e	popq	%rbp
0000000000015f2f	jmpq	*%rax
__ZN16EditorPauseLayer9saveLevelEv:
0000000000015f31	pushq	%rbp
0000000000015f32	movq	%rsp, %rbp
0000000000015f35	pushq	%rbx
0000000000015f36	pushq	%rdi
0000000000015f37	pushq	%rsi
0000000000015f38	pushq	%rdx
0000000000015f39	pushq	%rcx
0000000000015f3a	pushq	%r8
0000000000015f3c	pushq	%r9
0000000000015f3e	pushq	%r10
0000000000015f40	pushq	%r11
0000000000015f42	pushq	%r12
0000000000015f44	pushq	%r13
0000000000015f46	pushq	%r14
0000000000015f48	pushq	%r15
0000000000015f4a	subq	$0x10, %rsp
0000000000015f4e	movss	%xmm0, (%rsp)
0000000000015f53	subq	$0x10, %rsp
0000000000015f57	movss	%xmm1, (%rsp)
0000000000015f5c	pushq	%rsi
0000000000015f5d	pushq	%rdi
0000000000015f5e	callq	__Z7getBasev ## getBase()
0000000000015f63	addq	$0x13ebd0, %rax
0000000000015f69	popq	%rdi
0000000000015f6a	popq	%rsi
0000000000015f6b	movss	(%rsp), %xmm1
0000000000015f70	addq	$0x10, %rsp
0000000000015f74	movss	(%rsp), %xmm0
0000000000015f79	addq	$0x10, %rsp
0000000000015f7d	popq	%r15
0000000000015f7f	popq	%r14
0000000000015f81	popq	%r13
0000000000015f83	popq	%r12
0000000000015f85	popq	%r11
0000000000015f87	popq	%r10
0000000000015f89	popq	%r9
0000000000015f8b	popq	%r8
0000000000015f8d	popq	%rcx
0000000000015f8e	popq	%rdx
0000000000015f8f	popq	%rsi
0000000000015f90	popq	%rdi
0000000000015f91	popq	%rbx
0000000000015f92	popq	%rbp
0000000000015f93	jmpq	*%rax
__ZN16EditorPauseLayerD1Ev:
0000000000015f95	pushq	%rbp
0000000000015f96	movq	%rsp, %rbp
0000000000015f99	pushq	%rbx
0000000000015f9a	pushq	%rdi
0000000000015f9b	pushq	%rsi
0000000000015f9c	pushq	%rdx
0000000000015f9d	pushq	%rcx
0000000000015f9e	pushq	%r8
0000000000015fa0	pushq	%r9
0000000000015fa2	pushq	%r10
0000000000015fa4	pushq	%r11
0000000000015fa6	pushq	%r12
0000000000015fa8	pushq	%r13
0000000000015faa	pushq	%r14
0000000000015fac	pushq	%r15
0000000000015fae	subq	$0x10, %rsp
0000000000015fb2	movss	%xmm0, (%rsp)
0000000000015fb7	subq	$0x10, %rsp
0000000000015fbb	movss	%xmm1, (%rsp)
0000000000015fc0	pushq	%rsi
0000000000015fc1	pushq	%rdi
0000000000015fc2	callq	__Z7getBasev ## getBase()
0000000000015fc7	addq	$0x13c570, %rax
0000000000015fcd	popq	%rdi
0000000000015fce	popq	%rsi
0000000000015fcf	movss	(%rsp), %xmm1
0000000000015fd4	addq	$0x10, %rsp
0000000000015fd8	movss	(%rsp), %xmm0
0000000000015fdd	addq	$0x10, %rsp
0000000000015fe1	popq	%r15
0000000000015fe3	popq	%r14
0000000000015fe5	popq	%r13
0000000000015fe7	popq	%r12
0000000000015fe9	popq	%r11
0000000000015feb	popq	%r10
0000000000015fed	popq	%r9
0000000000015fef	popq	%r8
0000000000015ff1	popq	%rcx
0000000000015ff2	popq	%rdx
0000000000015ff3	popq	%rsi
0000000000015ff4	popq	%rdi
0000000000015ff5	popq	%rbx
0000000000015ff6	popq	%rbp
0000000000015ff7	jmpq	*%rax
__ZN16GameLevelManager11sharedStateEv:
0000000000015ff9	pushq	%rbp
0000000000015ffa	movq	%rsp, %rbp
0000000000015ffd	pushq	%rbx
0000000000015ffe	pushq	%rdi
0000000000015fff	pushq	%rsi
0000000000016000	pushq	%rdx
0000000000016001	pushq	%rcx
0000000000016002	pushq	%r8
0000000000016004	pushq	%r9
0000000000016006	pushq	%r10
0000000000016008	pushq	%r11
000000000001600a	pushq	%r12
000000000001600c	pushq	%r13
000000000001600e	pushq	%r14
0000000000016010	pushq	%r15
0000000000016012	subq	$0x10, %rsp
0000000000016016	movss	%xmm0, (%rsp)
000000000001601b	subq	$0x10, %rsp
000000000001601f	movss	%xmm1, (%rsp)
0000000000016024	pushq	%rsi
0000000000016025	pushq	%rdi
0000000000016026	callq	__Z7getBasev ## getBase()
000000000001602b	addq	$0x2a8340, %rax
0000000000016031	popq	%rdi
0000000000016032	popq	%rsi
0000000000016033	movss	(%rsp), %xmm1
0000000000016038	addq	$0x10, %rsp
000000000001603c	movss	(%rsp), %xmm0
0000000000016041	addq	$0x10, %rsp
0000000000016045	popq	%r15
0000000000016047	popq	%r14
0000000000016049	popq	%r13
000000000001604b	popq	%r12
000000000001604d	popq	%r11
000000000001604f	popq	%r10
0000000000016051	popq	%r9
0000000000016053	popq	%r8
0000000000016055	popq	%rcx
0000000000016056	popq	%rdx
0000000000016057	popq	%rsi
0000000000016058	popq	%rdi
0000000000016059	popq	%rbx
000000000001605a	popq	%rbp
000000000001605b	jmpq	*%rax
__ZN16GameLevelManager14createNewLevelEv:
000000000001605d	pushq	%rbp
000000000001605e	movq	%rsp, %rbp
0000000000016061	pushq	%rbx
0000000000016062	pushq	%rdi
0000000000016063	pushq	%rsi
0000000000016064	pushq	%rdx
0000000000016065	pushq	%rcx
0000000000016066	pushq	%r8
0000000000016068	pushq	%r9
000000000001606a	pushq	%r10
000000000001606c	pushq	%r11
000000000001606e	pushq	%r12
0000000000016070	pushq	%r13
0000000000016072	pushq	%r14
0000000000016074	pushq	%r15
0000000000016076	subq	$0x10, %rsp
000000000001607a	movss	%xmm0, (%rsp)
000000000001607f	subq	$0x10, %rsp
0000000000016083	movss	%xmm1, (%rsp)
0000000000016088	pushq	%rsi
0000000000016089	pushq	%rdi
000000000001608a	callq	__Z7getBasev ## getBase()
000000000001608f	addq	$0x2b8180, %rax
0000000000016095	popq	%rdi
0000000000016096	popq	%rsi
0000000000016097	movss	(%rsp), %xmm1
000000000001609c	addq	$0x10, %rsp
00000000000160a0	movss	(%rsp), %xmm0
00000000000160a5	addq	$0x10, %rsp
00000000000160a9	popq	%r15
00000000000160ab	popq	%r14
00000000000160ad	popq	%r13
00000000000160af	popq	%r12
00000000000160b1	popq	%r11
00000000000160b3	popq	%r10
00000000000160b5	popq	%r9
00000000000160b7	popq	%r8
00000000000160b9	popq	%rcx
00000000000160ba	popq	%rdx
00000000000160bb	popq	%rsi
00000000000160bc	popq	%rdi
00000000000160bd	popq	%rbx
00000000000160be	popq	%rbp
00000000000160bf	jmpq	*%rax
__ZN15SetupSpawnPopup18createToggleButtonESsMN7cocos2d8CCObjectEFvPS1_EbPNS0_6CCMenuENS0_7CCPointEPNS0_7CCArrayE:
00000000000160c1	pushq	%rbp
00000000000160c2	movq	%rsp, %rbp
00000000000160c5	pushq	%rbx
00000000000160c6	pushq	%rdi
00000000000160c7	pushq	%rsi
00000000000160c8	pushq	%rdx
00000000000160c9	pushq	%rcx
00000000000160ca	pushq	%r8
00000000000160cc	pushq	%r9
00000000000160ce	pushq	%r10
00000000000160d0	pushq	%r11
00000000000160d2	pushq	%r12
00000000000160d4	pushq	%r13
00000000000160d6	pushq	%r14
00000000000160d8	pushq	%r15
00000000000160da	subq	$0x10, %rsp
00000000000160de	movss	%xmm0, (%rsp)
00000000000160e3	subq	$0x10, %rsp
00000000000160e7	movss	%xmm1, (%rsp)
00000000000160ec	pushq	%rsi
00000000000160ed	pushq	%rdi
00000000000160ee	callq	__Z7getBasev ## getBase()
00000000000160f3	addq	$0x13b0e0, %rax
00000000000160f9	popq	%rdi
00000000000160fa	popq	%rsi
00000000000160fb	movss	(%rsp), %xmm1
0000000000016100	addq	$0x10, %rsp
0000000000016104	movss	(%rsp), %xmm0
0000000000016109	addq	$0x10, %rsp
000000000001610d	popq	%r15
000000000001610f	popq	%r14
0000000000016111	popq	%r13
0000000000016113	popq	%r12
0000000000016115	popq	%r11
0000000000016117	popq	%r10
0000000000016119	popq	%r9
000000000001611b	popq	%r8
000000000001611d	popq	%rcx
000000000001611e	popq	%rdx
000000000001611f	popq	%rsi
0000000000016120	popq	%rdi
0000000000016121	popq	%rbx
0000000000016122	popq	%rbp
0000000000016123	jmpq	*%rax
__ZN16GameSoundManager13sharedManagerEv:
0000000000016125	pushq	%rbp
0000000000016126	movq	%rsp, %rbp
0000000000016129	pushq	%rbx
000000000001612a	pushq	%rdi
000000000001612b	pushq	%rsi
000000000001612c	pushq	%rdx
000000000001612d	pushq	%rcx
000000000001612e	pushq	%r8
0000000000016130	pushq	%r9
0000000000016132	pushq	%r10
0000000000016134	pushq	%r11
0000000000016136	pushq	%r12
0000000000016138	pushq	%r13
000000000001613a	pushq	%r14
000000000001613c	pushq	%r15
000000000001613e	subq	$0x10, %rsp
0000000000016142	movss	%xmm0, (%rsp)
0000000000016147	subq	$0x10, %rsp
000000000001614b	movss	%xmm1, (%rsp)
0000000000016150	pushq	%rsi
0000000000016151	pushq	%rdi
0000000000016152	callq	__Z7getBasev ## getBase()
0000000000016157	addq	$0x3610f0, %rax
000000000001615d	popq	%rdi
000000000001615e	popq	%rsi
000000000001615f	movss	(%rsp), %xmm1
0000000000016164	addq	$0x10, %rsp
0000000000016168	movss	(%rsp), %xmm0
000000000001616d	addq	$0x10, %rsp
0000000000016171	popq	%r15
0000000000016173	popq	%r14
0000000000016175	popq	%r13
0000000000016177	popq	%r12
0000000000016179	popq	%r11
000000000001617b	popq	%r10
000000000001617d	popq	%r9
000000000001617f	popq	%r8
0000000000016181	popq	%rcx
0000000000016182	popq	%rdx
0000000000016183	popq	%rsi
0000000000016184	popq	%rdi
0000000000016185	popq	%rbx
0000000000016186	popq	%rbp
0000000000016187	jmpq	*%rax
__ZN16GameSoundManager19stopBackgroundMusicEv:
0000000000016189	pushq	%rbp
000000000001618a	movq	%rsp, %rbp
000000000001618d	pushq	%rbx
000000000001618e	pushq	%rdi
000000000001618f	pushq	%rsi
0000000000016190	pushq	%rdx
0000000000016191	pushq	%rcx
0000000000016192	pushq	%r8
0000000000016194	pushq	%r9
0000000000016196	pushq	%r10
0000000000016198	pushq	%r11
000000000001619a	pushq	%r12
000000000001619c	pushq	%r13
000000000001619e	pushq	%r14
00000000000161a0	pushq	%r15
00000000000161a2	subq	$0x10, %rsp
00000000000161a6	movss	%xmm0, (%rsp)
00000000000161ab	subq	$0x10, %rsp
00000000000161af	movss	%xmm1, (%rsp)
00000000000161b4	pushq	%rsi
00000000000161b5	pushq	%rdi
00000000000161b6	callq	__Z7getBasev ## getBase()
00000000000161bb	addq	$0x362130, %rax
00000000000161c1	popq	%rdi
00000000000161c2	popq	%rsi
00000000000161c3	movss	(%rsp), %xmm1
00000000000161c8	addq	$0x10, %rsp
00000000000161cc	movss	(%rsp), %xmm0
00000000000161d1	addq	$0x10, %rsp
00000000000161d5	popq	%r15
00000000000161d7	popq	%r14
00000000000161d9	popq	%r13
00000000000161db	popq	%r12
00000000000161dd	popq	%r11
00000000000161df	popq	%r10
00000000000161e1	popq	%r9
00000000000161e3	popq	%r8
00000000000161e5	popq	%rcx
00000000000161e6	popq	%rdx
00000000000161e7	popq	%rsi
00000000000161e8	popq	%rdi
00000000000161e9	popq	%rbx
00000000000161ea	popq	%rbp
00000000000161eb	jmpq	*%rax
__ZN16GameSoundManagerD0Ev:
00000000000161ed	pushq	%rbp
00000000000161ee	movq	%rsp, %rbp
00000000000161f1	pushq	%rbx
00000000000161f2	pushq	%rdi
00000000000161f3	pushq	%rsi
00000000000161f4	pushq	%rdx
00000000000161f5	pushq	%rcx
00000000000161f6	pushq	%r8
00000000000161f8	pushq	%r9
00000000000161fa	pushq	%r10
00000000000161fc	pushq	%r11
00000000000161fe	pushq	%r12
0000000000016200	pushq	%r13
0000000000016202	pushq	%r14
0000000000016204	pushq	%r15
0000000000016206	subq	$0x10, %rsp
000000000001620a	movss	%xmm0, (%rsp)
000000000001620f	subq	$0x10, %rsp
0000000000016213	movss	%xmm1, (%rsp)
0000000000016218	pushq	%rsi
0000000000016219	pushq	%rdi
000000000001621a	callq	__Z7getBasev ## getBase()
000000000001621f	addq	$0x362cd0, %rax
0000000000016225	popq	%rdi
0000000000016226	popq	%rsi
0000000000016227	movss	(%rsp), %xmm1
000000000001622c	addq	$0x10, %rsp
0000000000016230	movss	(%rsp), %xmm0
0000000000016235	addq	$0x10, %rsp
0000000000016239	popq	%r15
000000000001623b	popq	%r14
000000000001623d	popq	%r13
000000000001623f	popq	%r12
0000000000016241	popq	%r11
0000000000016243	popq	%r10
0000000000016245	popq	%r9
0000000000016247	popq	%r8
0000000000016249	popq	%rcx
000000000001624a	popq	%rdx
000000000001624b	popq	%rsi
000000000001624c	popq	%rdi
000000000001624d	popq	%rbx
000000000001624e	popq	%rbp
000000000001624f	jmpq	*%rax
__ZN16GameSoundManagerD1Ev:
0000000000016251	pushq	%rbp
0000000000016252	movq	%rsp, %rbp
0000000000016255	pushq	%rbx
0000000000016256	pushq	%rdi
0000000000016257	pushq	%rsi
0000000000016258	pushq	%rdx
0000000000016259	pushq	%rcx
000000000001625a	pushq	%r8
000000000001625c	pushq	%r9
000000000001625e	pushq	%r10
0000000000016260	pushq	%r11
0000000000016262	pushq	%r12
0000000000016264	pushq	%r13
0000000000016266	pushq	%r14
0000000000016268	pushq	%r15
000000000001626a	subq	$0x10, %rsp
000000000001626e	movss	%xmm0, (%rsp)
0000000000016273	subq	$0x10, %rsp
0000000000016277	movss	%xmm1, (%rsp)
000000000001627c	pushq	%rsi
000000000001627d	pushq	%rdi
000000000001627e	callq	__Z7getBasev ## getBase()
0000000000016283	addq	$0x362cc0, %rax
0000000000016289	popq	%rdi
000000000001628a	popq	%rsi
000000000001628b	movss	(%rsp), %xmm1
0000000000016290	addq	$0x10, %rsp
0000000000016294	movss	(%rsp), %xmm0
0000000000016299	addq	$0x10, %rsp
000000000001629d	popq	%r15
000000000001629f	popq	%r14
00000000000162a1	popq	%r13
00000000000162a3	popq	%r12
00000000000162a5	popq	%r11
00000000000162a7	popq	%r10
00000000000162a9	popq	%r9
00000000000162ab	popq	%r8
00000000000162ad	popq	%rcx
00000000000162ae	popq	%rdx
00000000000162af	popq	%rsi
00000000000162b0	popq	%rdi
00000000000162b1	popq	%rbx
00000000000162b2	popq	%rbp
00000000000162b3	jmpq	*%rax
__ZN15GJBaseGameLayer10spawnGroupEi:
00000000000162b5	pushq	%rbp
00000000000162b6	movq	%rsp, %rbp
00000000000162b9	pushq	%rbx
00000000000162ba	pushq	%rdi
00000000000162bb	pushq	%rsi
00000000000162bc	pushq	%rdx
00000000000162bd	pushq	%rcx
00000000000162be	pushq	%r8
00000000000162c0	pushq	%r9
00000000000162c2	pushq	%r10
00000000000162c4	pushq	%r11
00000000000162c6	pushq	%r12
00000000000162c8	pushq	%r13
00000000000162ca	pushq	%r14
00000000000162cc	pushq	%r15
00000000000162ce	subq	$0x10, %rsp
00000000000162d2	movss	%xmm0, (%rsp)
00000000000162d7	subq	$0x10, %rsp
00000000000162db	movss	%xmm1, (%rsp)
00000000000162e0	pushq	%rsi
00000000000162e1	pushq	%rdi
00000000000162e2	callq	__Z7getBasev ## getBase()
00000000000162e7	addq	$0xb7050, %rax
00000000000162ed	popq	%rdi
00000000000162ee	popq	%rsi
00000000000162ef	movss	(%rsp), %xmm1
00000000000162f4	addq	$0x10, %rsp
00000000000162f8	movss	(%rsp), %xmm0
00000000000162fd	addq	$0x10, %rsp
0000000000016301	popq	%r15
0000000000016303	popq	%r14
0000000000016305	popq	%r13
0000000000016307	popq	%r12
0000000000016309	popq	%r11
000000000001630b	popq	%r10
000000000001630d	popq	%r9
000000000001630f	popq	%r8
0000000000016311	popq	%rcx
0000000000016312	popq	%rdx
0000000000016313	popq	%rsi
0000000000016314	popq	%rdi
0000000000016315	popq	%rbx
0000000000016316	popq	%rbp
0000000000016317	jmpq	*%rax
__ZN16GJAccountManager11sharedStateEv:
0000000000016319	pushq	%rbp
000000000001631a	movq	%rsp, %rbp
000000000001631d	pushq	%rbx
000000000001631e	pushq	%rdi
000000000001631f	pushq	%rsi
0000000000016320	pushq	%rdx
0000000000016321	pushq	%rcx
0000000000016322	pushq	%r8
0000000000016324	pushq	%r9
0000000000016326	pushq	%r10
0000000000016328	pushq	%r11
000000000001632a	pushq	%r12
000000000001632c	pushq	%r13
000000000001632e	pushq	%r14
0000000000016330	pushq	%r15
0000000000016332	subq	$0x10, %rsp
0000000000016336	movss	%xmm0, (%rsp)
000000000001633b	subq	$0x10, %rsp
000000000001633f	movss	%xmm1, (%rsp)
0000000000016344	pushq	%rsi
0000000000016345	pushq	%rdi
0000000000016346	callq	__Z7getBasev ## getBase()
000000000001634b	addq	$0x85070, %rax
0000000000016351	popq	%rdi
0000000000016352	popq	%rsi
0000000000016353	movss	(%rsp), %xmm1
0000000000016358	addq	$0x10, %rsp
000000000001635c	movss	(%rsp), %xmm0
0000000000016361	addq	$0x10, %rsp
0000000000016365	popq	%r15
0000000000016367	popq	%r14
0000000000016369	popq	%r13
000000000001636b	popq	%r12
000000000001636d	popq	%r11
000000000001636f	popq	%r10
0000000000016371	popq	%r9
0000000000016373	popq	%r8
0000000000016375	popq	%rcx
0000000000016376	popq	%rdx
0000000000016377	popq	%rsi
0000000000016378	popq	%rdi
0000000000016379	popq	%rbx
000000000001637a	popq	%rbp
000000000001637b	jmpq	*%rax
__ZN16LevelEditorLayer14redoLastActionEv:
000000000001637d	pushq	%rbp
000000000001637e	movq	%rsp, %rbp
0000000000016381	pushq	%rbx
0000000000016382	pushq	%rdi
0000000000016383	pushq	%rsi
0000000000016384	pushq	%rdx
0000000000016385	pushq	%rcx
0000000000016386	pushq	%r8
0000000000016388	pushq	%r9
000000000001638a	pushq	%r10
000000000001638c	pushq	%r11
000000000001638e	pushq	%r12
0000000000016390	pushq	%r13
0000000000016392	pushq	%r14
0000000000016394	pushq	%r15
0000000000016396	subq	$0x10, %rsp
000000000001639a	movss	%xmm0, (%rsp)
000000000001639f	subq	$0x10, %rsp
00000000000163a3	movss	%xmm1, (%rsp)
00000000000163a8	pushq	%rsi
00000000000163a9	pushq	%rdi
00000000000163aa	callq	__Z7getBasev ## getBase()
00000000000163af	addq	$0x97750, %rax
00000000000163b5	popq	%rdi
00000000000163b6	popq	%rsi
00000000000163b7	movss	(%rsp), %xmm1
00000000000163bc	addq	$0x10, %rsp
00000000000163c0	movss	(%rsp), %xmm0
00000000000163c5	addq	$0x10, %rsp
00000000000163c9	popq	%r15
00000000000163cb	popq	%r14
00000000000163cd	popq	%r13
00000000000163cf	popq	%r12
00000000000163d1	popq	%r11
00000000000163d3	popq	%r10
00000000000163d5	popq	%r9
00000000000163d7	popq	%r8
00000000000163d9	popq	%rcx
00000000000163da	popq	%rdx
00000000000163db	popq	%rsi
00000000000163dc	popq	%rdi
00000000000163dd	popq	%rbx
00000000000163de	popq	%rbp
00000000000163df	jmpq	*%rax
__ZN16LevelEditorLayer14undoLastActionEv:
00000000000163e1	pushq	%rbp
00000000000163e2	movq	%rsp, %rbp
00000000000163e5	pushq	%rbx
00000000000163e6	pushq	%rdi
00000000000163e7	pushq	%rsi
00000000000163e8	pushq	%rdx
00000000000163e9	pushq	%rcx
00000000000163ea	pushq	%r8
00000000000163ec	pushq	%r9
00000000000163ee	pushq	%r10
00000000000163f0	pushq	%r11
00000000000163f2	pushq	%r12
00000000000163f4	pushq	%r13
00000000000163f6	pushq	%r14
00000000000163f8	pushq	%r15
00000000000163fa	subq	$0x10, %rsp
00000000000163fe	movss	%xmm0, (%rsp)
0000000000016403	subq	$0x10, %rsp
0000000000016407	movss	%xmm1, (%rsp)
000000000001640c	pushq	%rsi
000000000001640d	pushq	%rdi
000000000001640e	callq	__Z7getBasev ## getBase()
0000000000016413	addq	$0x97770, %rax
0000000000016419	popq	%rdi
000000000001641a	popq	%rsi
000000000001641b	movss	(%rsp), %xmm1
0000000000016420	addq	$0x10, %rsp
0000000000016424	movss	(%rsp), %xmm0
0000000000016429	addq	$0x10, %rsp
000000000001642d	popq	%r15
000000000001642f	popq	%r14
0000000000016431	popq	%r13
0000000000016433	popq	%r12
0000000000016435	popq	%r11
0000000000016437	popq	%r10
0000000000016439	popq	%r9
000000000001643b	popq	%r8
000000000001643d	popq	%rcx
000000000001643e	popq	%rdx
000000000001643f	popq	%rsi
0000000000016440	popq	%rdi
0000000000016441	popq	%rbx
0000000000016442	popq	%rbp
0000000000016443	jmpq	*%rax
__ZN16LevelEditorLayer16removeAllObjectsEv:
0000000000016445	pushq	%rbp
0000000000016446	movq	%rsp, %rbp
0000000000016449	pushq	%rbx
000000000001644a	pushq	%rdi
000000000001644b	pushq	%rsi
000000000001644c	pushq	%rdx
000000000001644d	pushq	%rcx
000000000001644e	pushq	%r8
0000000000016450	pushq	%r9
0000000000016452	pushq	%r10
0000000000016454	pushq	%r11
0000000000016456	pushq	%r12
0000000000016458	pushq	%r13
000000000001645a	pushq	%r14
000000000001645c	pushq	%r15
000000000001645e	subq	$0x10, %rsp
0000000000016462	movss	%xmm0, (%rsp)
0000000000016467	subq	$0x10, %rsp
000000000001646b	movss	%xmm1, (%rsp)
0000000000016470	pushq	%rsi
0000000000016471	pushq	%rdi
0000000000016472	callq	__Z7getBasev ## getBase()
0000000000016477	addq	$0x93d80, %rax
000000000001647d	popq	%rdi
000000000001647e	popq	%rsi
000000000001647f	movss	(%rsp), %xmm1
0000000000016484	addq	$0x10, %rsp
0000000000016488	movss	(%rsp), %xmm0
000000000001648d	addq	$0x10, %rsp
0000000000016491	popq	%r15
0000000000016493	popq	%r14
0000000000016495	popq	%r13
0000000000016497	popq	%r12
0000000000016499	popq	%r11
000000000001649b	popq	%r10
000000000001649d	popq	%r9
000000000001649f	popq	%r8
00000000000164a1	popq	%rcx
00000000000164a2	popq	%rdx
00000000000164a3	popq	%rsi
00000000000164a4	popq	%rdi
00000000000164a5	popq	%rbx
00000000000164a6	popq	%rbp
00000000000164a7	jmpq	*%rax
__ZN16LevelEditorLayer23createObjectsFromStringESsb:
00000000000164a9	pushq	%rbp
00000000000164aa	movq	%rsp, %rbp
00000000000164ad	pushq	%rbx
00000000000164ae	pushq	%rdi
00000000000164af	pushq	%rsi
00000000000164b0	pushq	%rdx
00000000000164b1	pushq	%rcx
00000000000164b2	pushq	%r8
00000000000164b4	pushq	%r9
00000000000164b6	pushq	%r10
00000000000164b8	pushq	%r11
00000000000164ba	pushq	%r12
00000000000164bc	pushq	%r13
00000000000164be	pushq	%r14
00000000000164c0	pushq	%r15
00000000000164c2	subq	$0x10, %rsp
00000000000164c6	movss	%xmm0, (%rsp)
00000000000164cb	subq	$0x10, %rsp
00000000000164cf	movss	%xmm1, (%rsp)
00000000000164d4	pushq	%rsi
00000000000164d5	pushq	%rdi
00000000000164d6	callq	__Z7getBasev ## getBase()
00000000000164db	addq	$0x94730, %rax
00000000000164e1	popq	%rdi
00000000000164e2	popq	%rsi
00000000000164e3	movss	(%rsp), %xmm1
00000000000164e8	addq	$0x10, %rsp
00000000000164ec	movss	(%rsp), %xmm0
00000000000164f1	addq	$0x10, %rsp
00000000000164f5	popq	%r15
00000000000164f7	popq	%r14
00000000000164f9	popq	%r13
00000000000164fb	popq	%r12
00000000000164fd	popq	%r11
00000000000164ff	popq	%r10
0000000000016501	popq	%r9
0000000000016503	popq	%r8
0000000000016505	popq	%rcx
0000000000016506	popq	%rdx
0000000000016507	popq	%rsi
0000000000016508	popq	%rdi
0000000000016509	popq	%rbx
000000000001650a	popq	%rbp
000000000001650b	jmpq	*%rax
__ZN17CCMenuItemToggler11setSizeMultEf:
000000000001650d	pushq	%rbp
000000000001650e	movq	%rsp, %rbp
0000000000016511	pushq	%rbx
0000000000016512	pushq	%rdi
0000000000016513	pushq	%rsi
0000000000016514	pushq	%rdx
0000000000016515	pushq	%rcx
0000000000016516	pushq	%r8
0000000000016518	pushq	%r9
000000000001651a	pushq	%r10
000000000001651c	pushq	%r11
000000000001651e	pushq	%r12
0000000000016520	pushq	%r13
0000000000016522	pushq	%r14
0000000000016524	pushq	%r15
0000000000016526	subq	$0x10, %rsp
000000000001652a	movss	%xmm0, (%rsp)
000000000001652f	subq	$0x10, %rsp
0000000000016533	movss	%xmm1, (%rsp)
0000000000016538	pushq	%rsi
0000000000016539	pushq	%rdi
000000000001653a	callq	__Z7getBasev ## getBase()
000000000001653f	addq	$0x38a40, %rax
0000000000016545	popq	%rdi
0000000000016546	popq	%rsi
0000000000016547	movss	(%rsp), %xmm1
000000000001654c	addq	$0x10, %rsp
0000000000016550	movss	(%rsp), %xmm0
0000000000016555	addq	$0x10, %rsp
0000000000016559	popq	%r15
000000000001655b	popq	%r14
000000000001655d	popq	%r13
000000000001655f	popq	%r12
0000000000016561	popq	%r11
0000000000016563	popq	%r10
0000000000016565	popq	%r9
0000000000016567	popq	%r8
0000000000016569	popq	%rcx
000000000001656a	popq	%rdx
000000000001656b	popq	%rsi
000000000001656c	popq	%rdi
000000000001656d	popq	%rbx
000000000001656e	popq	%rbp
000000000001656f	jmpq	*%rax
__ZN17CCMenuItemToggler6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E:
0000000000016571	pushq	%rbp
0000000000016572	movq	%rsp, %rbp
0000000000016575	pushq	%rbx
0000000000016576	pushq	%rdi
0000000000016577	pushq	%rsi
0000000000016578	pushq	%rdx
0000000000016579	pushq	%rcx
000000000001657a	pushq	%r8
000000000001657c	pushq	%r9
000000000001657e	pushq	%r10
0000000000016580	pushq	%r11
0000000000016582	pushq	%r12
0000000000016584	pushq	%r13
0000000000016586	pushq	%r14
0000000000016588	pushq	%r15
000000000001658a	subq	$0x10, %rsp
000000000001658e	movss	%xmm0, (%rsp)
0000000000016593	subq	$0x10, %rsp
0000000000016597	movss	%xmm1, (%rsp)
000000000001659c	pushq	%rsi
000000000001659d	pushq	%rdi
000000000001659e	callq	__Z7getBasev ## getBase()
00000000000165a3	addq	$0x38400, %rax
00000000000165a9	popq	%rdi
00000000000165aa	popq	%rsi
00000000000165ab	movss	(%rsp), %xmm1
00000000000165b0	addq	$0x10, %rsp
00000000000165b4	movss	(%rsp), %xmm0
00000000000165b9	addq	$0x10, %rsp
00000000000165bd	popq	%r15
00000000000165bf	popq	%r14
00000000000165c1	popq	%r13
00000000000165c3	popq	%r12
00000000000165c5	popq	%r11
00000000000165c7	popq	%r10
00000000000165c9	popq	%r9
00000000000165cb	popq	%r8
00000000000165cd	popq	%rcx
00000000000165ce	popq	%rdx
00000000000165cf	popq	%rsi
00000000000165d0	popq	%rdi
00000000000165d1	popq	%rbx
00000000000165d2	popq	%rbp
00000000000165d3	jmpq	*%rax
__ZN17LevelBrowserLayer5sceneEP14GJSearchObject:
00000000000165d5	pushq	%rbp
00000000000165d6	movq	%rsp, %rbp
00000000000165d9	pushq	%rbx
00000000000165da	pushq	%rdi
00000000000165db	pushq	%rsi
00000000000165dc	pushq	%rdx
00000000000165dd	pushq	%rcx
00000000000165de	pushq	%r8
00000000000165e0	pushq	%r9
00000000000165e2	pushq	%r10
00000000000165e4	pushq	%r11
00000000000165e6	pushq	%r12
00000000000165e8	pushq	%r13
00000000000165ea	pushq	%r14
00000000000165ec	pushq	%r15
00000000000165ee	subq	$0x10, %rsp
00000000000165f2	movss	%xmm0, (%rsp)
00000000000165f7	subq	$0x10, %rsp
00000000000165fb	movss	%xmm1, (%rsp)
0000000000016600	pushq	%rsi
0000000000016601	pushq	%rdi
0000000000016602	callq	__Z7getBasev ## getBase()
0000000000016607	addq	$0x2511d0, %rax
000000000001660d	popq	%rdi
000000000001660e	popq	%rsi
000000000001660f	movss	(%rsp), %xmm1
0000000000016614	addq	$0x10, %rsp
0000000000016618	movss	(%rsp), %xmm0
000000000001661d	addq	$0x10, %rsp
0000000000016621	popq	%r15
0000000000016623	popq	%r14
0000000000016625	popq	%r13
0000000000016627	popq	%r12
0000000000016629	popq	%r11
000000000001662b	popq	%r10
000000000001662d	popq	%r9
000000000001662f	popq	%r8
0000000000016631	popq	%rcx
0000000000016632	popq	%rdx
0000000000016633	popq	%rsi
0000000000016634	popq	%rdi
0000000000016635	popq	%rbx
0000000000016636	popq	%rbp
0000000000016637	jmpq	*%rax
__ZN21CCMenuItemSpriteExtra11setSizeMultEf:
0000000000016639	pushq	%rbp
000000000001663a	movq	%rsp, %rbp
000000000001663d	pushq	%rbx
000000000001663e	pushq	%rdi
000000000001663f	pushq	%rsi
0000000000016640	pushq	%rdx
0000000000016641	pushq	%rcx
0000000000016642	pushq	%r8
0000000000016644	pushq	%r9
0000000000016646	pushq	%r10
0000000000016648	pushq	%r11
000000000001664a	pushq	%r12
000000000001664c	pushq	%r13
000000000001664e	pushq	%r14
0000000000016650	pushq	%r15
0000000000016652	subq	$0x10, %rsp
0000000000016656	movss	%xmm0, (%rsp)
000000000001665b	subq	$0x10, %rsp
000000000001665f	movss	%xmm1, (%rsp)
0000000000016664	pushq	%rsi
0000000000016665	pushq	%rdi
0000000000016666	callq	__Z7getBasev ## getBase()
000000000001666b	addq	$0x1255e0, %rax
0000000000016671	popq	%rdi
0000000000016672	popq	%rsi
0000000000016673	movss	(%rsp), %xmm1
0000000000016678	addq	$0x10, %rsp
000000000001667c	movss	(%rsp), %xmm0
0000000000016681	addq	$0x10, %rsp
0000000000016685	popq	%r15
0000000000016687	popq	%r14
0000000000016689	popq	%r13
000000000001668b	popq	%r12
000000000001668d	popq	%r11
000000000001668f	popq	%r10
0000000000016691	popq	%r9
0000000000016693	popq	%r8
0000000000016695	popq	%rcx
0000000000016696	popq	%rdx
0000000000016697	popq	%rsi
0000000000016698	popq	%rdi
0000000000016699	popq	%rbx
000000000001669a	popq	%rbp
000000000001669b	jmpq	*%rax
__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E:
000000000001669d	pushq	%rbp
000000000001669e	movq	%rsp, %rbp
00000000000166a1	pushq	%rbx
00000000000166a2	pushq	%rdi
00000000000166a3	pushq	%rsi
00000000000166a4	pushq	%rdx
00000000000166a5	pushq	%rcx
00000000000166a6	pushq	%r8
00000000000166a8	pushq	%r9
00000000000166aa	pushq	%r10
00000000000166ac	pushq	%r11
00000000000166ae	pushq	%r12
00000000000166b0	pushq	%r13
00000000000166b2	pushq	%r14
00000000000166b4	pushq	%r15
00000000000166b6	subq	$0x10, %rsp
00000000000166ba	movss	%xmm0, (%rsp)
00000000000166bf	subq	$0x10, %rsp
00000000000166c3	movss	%xmm1, (%rsp)
00000000000166c8	pushq	%rsi
00000000000166c9	pushq	%rdi
00000000000166ca	callq	__Z7getBasev ## getBase()
00000000000166cf	addq	$0x1253c0, %rax
00000000000166d5	popq	%rdi
00000000000166d6	popq	%rsi
00000000000166d7	movss	(%rsp), %xmm1
00000000000166dc	addq	$0x10, %rsp
00000000000166e0	movss	(%rsp), %xmm0
00000000000166e5	addq	$0x10, %rsp
00000000000166e9	popq	%r15
00000000000166eb	popq	%r14
00000000000166ed	popq	%r13
00000000000166ef	popq	%r12
00000000000166f1	popq	%r11
00000000000166f3	popq	%r10
00000000000166f5	popq	%r9
00000000000166f7	popq	%r8
00000000000166f9	popq	%rcx
00000000000166fa	popq	%rdx
00000000000166fb	popq	%rsi
00000000000166fc	popq	%rdi
00000000000166fd	popq	%rbx
00000000000166fe	popq	%rbp
00000000000166ff	jmpq	*%rax
__ZN21MoreVideoOptionsLayer4initEv:
0000000000016701	pushq	%rbp
0000000000016702	movq	%rsp, %rbp
0000000000016705	pushq	%rbx
0000000000016706	pushq	%rdi
0000000000016707	pushq	%rsi
0000000000016708	pushq	%rdx
0000000000016709	pushq	%rcx
000000000001670a	pushq	%r8
000000000001670c	pushq	%r9
000000000001670e	pushq	%r10
0000000000016710	pushq	%r11
0000000000016712	pushq	%r12
0000000000016714	pushq	%r13
0000000000016716	pushq	%r14
0000000000016718	pushq	%r15
000000000001671a	subq	$0x10, %rsp
000000000001671e	movss	%xmm0, (%rsp)
0000000000016723	subq	$0x10, %rsp
0000000000016727	movss	%xmm1, (%rsp)
000000000001672c	pushq	%rsi
000000000001672d	pushq	%rdi
000000000001672e	callq	__Z7getBasev ## getBase()
0000000000016733	addq	$0x444150, %rax
0000000000016739	popq	%rdi
000000000001673a	popq	%rsi
000000000001673b	movss	(%rsp), %xmm1
0000000000016740	addq	$0x10, %rsp
0000000000016744	movss	(%rsp), %xmm0
0000000000016749	addq	$0x10, %rsp
000000000001674d	popq	%r15
000000000001674f	popq	%r14
0000000000016751	popq	%r13
0000000000016753	popq	%r12
0000000000016755	popq	%r11
0000000000016757	popq	%r10
0000000000016759	popq	%r9
000000000001675b	popq	%r8
000000000001675d	popq	%rcx
000000000001675e	popq	%rdx
000000000001675f	popq	%rsi
0000000000016760	popq	%rdi
0000000000016761	popq	%rbx
0000000000016762	popq	%rbp
0000000000016763	jmpq	*%rax
__ZN21MoreVideoOptionsLayer6createEv:
0000000000016765	pushq	%rbp
0000000000016766	movq	%rsp, %rbp
0000000000016769	pushq	%rbx
000000000001676a	pushq	%rdi
000000000001676b	pushq	%rsi
000000000001676c	pushq	%rdx
000000000001676d	pushq	%rcx
000000000001676e	pushq	%r8
0000000000016770	pushq	%r9
0000000000016772	pushq	%r10
0000000000016774	pushq	%r11
0000000000016776	pushq	%r12
0000000000016778	pushq	%r13
000000000001677a	pushq	%r14
000000000001677c	pushq	%r15
000000000001677e	subq	$0x10, %rsp
0000000000016782	movss	%xmm0, (%rsp)
0000000000016787	subq	$0x10, %rsp
000000000001678b	movss	%xmm1, (%rsp)
0000000000016790	pushq	%rsi
0000000000016791	pushq	%rdi
0000000000016792	callq	__Z7getBasev ## getBase()
0000000000016797	addq	$0x443c10, %rax
000000000001679d	popq	%rdi
000000000001679e	popq	%rsi
000000000001679f	movss	(%rsp), %xmm1
00000000000167a4	addq	$0x10, %rsp
00000000000167a8	movss	(%rsp), %xmm0
00000000000167ad	addq	$0x10, %rsp
00000000000167b1	popq	%r15
00000000000167b3	popq	%r14
00000000000167b5	popq	%r13
00000000000167b7	popq	%r12
00000000000167b9	popq	%r11
00000000000167bb	popq	%r10
00000000000167bd	popq	%r9
00000000000167bf	popq	%r8
00000000000167c1	popq	%rcx
00000000000167c2	popq	%rdx
00000000000167c3	popq	%rsi
00000000000167c4	popq	%rdi
00000000000167c5	popq	%rbx
00000000000167c6	popq	%rbp
00000000000167c7	jmpq	*%rax
__ZN7cocos2d10CCDirector10getWinSizeEv:
00000000000167c9	pushq	%rbp
00000000000167ca	movq	%rsp, %rbp
00000000000167cd	pushq	%rbx
00000000000167ce	pushq	%rdi
00000000000167cf	pushq	%rsi
00000000000167d0	pushq	%rdx
00000000000167d1	pushq	%rcx
00000000000167d2	pushq	%r8
00000000000167d4	pushq	%r9
00000000000167d6	pushq	%r10
00000000000167d8	pushq	%r11
00000000000167da	pushq	%r12
00000000000167dc	pushq	%r13
00000000000167de	pushq	%r14
00000000000167e0	pushq	%r15
00000000000167e2	subq	$0x10, %rsp
00000000000167e6	movss	%xmm0, (%rsp)
00000000000167eb	subq	$0x10, %rsp
00000000000167ef	movss	%xmm1, (%rsp)
00000000000167f4	pushq	%rsi
00000000000167f5	pushq	%rdi
00000000000167f6	callq	__Z7getBasev ## getBase()
00000000000167fb	addq	$0x24a0f0, %rax
0000000000016801	popq	%rdi
0000000000016802	popq	%rsi
0000000000016803	movss	(%rsp), %xmm1
0000000000016808	addq	$0x10, %rsp
000000000001680c	movss	(%rsp), %xmm0
0000000000016811	addq	$0x10, %rsp
0000000000016815	popq	%r15
0000000000016817	popq	%r14
0000000000016819	popq	%r13
000000000001681b	popq	%r12
000000000001681d	popq	%r11
000000000001681f	popq	%r10
0000000000016821	popq	%r9
0000000000016823	popq	%r8
0000000000016825	popq	%rcx
0000000000016826	popq	%rdx
0000000000016827	popq	%rsi
0000000000016828	popq	%rdi
0000000000016829	popq	%rbx
000000000001682a	popq	%rbp
000000000001682b	jmpq	*%rax
__ZN7cocos2d10CCDirector12getScreenTopEv:
000000000001682d	pushq	%rbp
000000000001682e	movq	%rsp, %rbp
0000000000016831	pushq	%rbx
0000000000016832	pushq	%rdi
0000000000016833	pushq	%rsi
0000000000016834	pushq	%rdx
0000000000016835	pushq	%rcx
0000000000016836	pushq	%r8
0000000000016838	pushq	%r9
000000000001683a	pushq	%r10
000000000001683c	pushq	%r11
000000000001683e	pushq	%r12
0000000000016840	pushq	%r13
0000000000016842	pushq	%r14
0000000000016844	pushq	%r15
0000000000016846	subq	$0x10, %rsp
000000000001684a	movss	%xmm0, (%rsp)
000000000001684f	subq	$0x10, %rsp
0000000000016853	movss	%xmm1, (%rsp)
0000000000016858	pushq	%rsi
0000000000016859	pushq	%rdi
000000000001685a	callq	__Z7getBasev ## getBase()
000000000001685f	addq	$0x24b200, %rax
0000000000016865	popq	%rdi
0000000000016866	popq	%rsi
0000000000016867	movss	(%rsp), %xmm1
000000000001686c	addq	$0x10, %rsp
0000000000016870	movss	(%rsp), %xmm0
0000000000016875	addq	$0x10, %rsp
0000000000016879	popq	%r15
000000000001687b	popq	%r14
000000000001687d	popq	%r13
000000000001687f	popq	%r12
0000000000016881	popq	%r11
0000000000016883	popq	%r10
0000000000016885	popq	%r9
0000000000016887	popq	%r8
0000000000016889	popq	%rcx
000000000001688a	popq	%rdx
000000000001688b	popq	%rsi
000000000001688c	popq	%rdi
000000000001688d	popq	%rbx
000000000001688e	popq	%rbp
000000000001688f	jmpq	*%rax
__ZN7cocos2d10CCDirector13getScreenLeftEv:
0000000000016891	pushq	%rbp
0000000000016892	movq	%rsp, %rbp
0000000000016895	pushq	%rbx
0000000000016896	pushq	%rdi
0000000000016897	pushq	%rsi
0000000000016898	pushq	%rdx
0000000000016899	pushq	%rcx
000000000001689a	pushq	%r8
000000000001689c	pushq	%r9
000000000001689e	pushq	%r10
00000000000168a0	pushq	%r11
00000000000168a2	pushq	%r12
00000000000168a4	pushq	%r13
00000000000168a6	pushq	%r14
00000000000168a8	pushq	%r15
00000000000168aa	subq	$0x10, %rsp
00000000000168ae	movss	%xmm0, (%rsp)
00000000000168b3	subq	$0x10, %rsp
00000000000168b7	movss	%xmm1, (%rsp)
00000000000168bc	pushq	%rsi
00000000000168bd	pushq	%rdi
00000000000168be	callq	__Z7getBasev ## getBase()
00000000000168c3	addq	$0x24b220, %rax
00000000000168c9	popq	%rdi
00000000000168ca	popq	%rsi
00000000000168cb	movss	(%rsp), %xmm1
00000000000168d0	addq	$0x10, %rsp
00000000000168d4	movss	(%rsp), %xmm0
00000000000168d9	addq	$0x10, %rsp
00000000000168dd	popq	%r15
00000000000168df	popq	%r14
00000000000168e1	popq	%r13
00000000000168e3	popq	%r12
00000000000168e5	popq	%r11
00000000000168e7	popq	%r10
00000000000168e9	popq	%r9
00000000000168eb	popq	%r8
00000000000168ed	popq	%rcx
00000000000168ee	popq	%rdx
00000000000168ef	popq	%rsi
00000000000168f0	popq	%rdi
00000000000168f1	popq	%rbx
00000000000168f2	popq	%rbp
00000000000168f3	jmpq	*%rax
__ZN7cocos2d10CCDirector14getScreenRightEv:
00000000000168f5	pushq	%rbp
00000000000168f6	movq	%rsp, %rbp
00000000000168f9	pushq	%rbx
00000000000168fa	pushq	%rdi
00000000000168fb	pushq	%rsi
00000000000168fc	pushq	%rdx
00000000000168fd	pushq	%rcx
00000000000168fe	pushq	%r8
0000000000016900	pushq	%r9
0000000000016902	pushq	%r10
0000000000016904	pushq	%r11
0000000000016906	pushq	%r12
0000000000016908	pushq	%r13
000000000001690a	pushq	%r14
000000000001690c	pushq	%r15
000000000001690e	subq	$0x10, %rsp
0000000000016912	movss	%xmm0, (%rsp)
0000000000016917	subq	$0x10, %rsp
000000000001691b	movss	%xmm1, (%rsp)
0000000000016920	pushq	%rsi
0000000000016921	pushq	%rdi
0000000000016922	callq	__Z7getBasev ## getBase()
0000000000016927	addq	$0x24b230, %rax
000000000001692d	popq	%rdi
000000000001692e	popq	%rsi
000000000001692f	movss	(%rsp), %xmm1
0000000000016934	addq	$0x10, %rsp
0000000000016938	movss	(%rsp), %xmm0
000000000001693d	addq	$0x10, %rsp
0000000000016941	popq	%r15
0000000000016943	popq	%r14
0000000000016945	popq	%r13
0000000000016947	popq	%r12
0000000000016949	popq	%r11
000000000001694b	popq	%r10
000000000001694d	popq	%r9
000000000001694f	popq	%r8
0000000000016951	popq	%rcx
0000000000016952	popq	%rdx
0000000000016953	popq	%rsi
0000000000016954	popq	%rdi
0000000000016955	popq	%rbx
0000000000016956	popq	%rbp
0000000000016957	jmpq	*%rax
__ZN7cocos2d10CCDirector14sharedDirectorEv:
0000000000016959	pushq	%rbp
000000000001695a	movq	%rsp, %rbp
000000000001695d	pushq	%rbx
000000000001695e	pushq	%rdi
000000000001695f	pushq	%rsi
0000000000016960	pushq	%rdx
0000000000016961	pushq	%rcx
0000000000016962	pushq	%r8
0000000000016964	pushq	%r9
0000000000016966	pushq	%r10
0000000000016968	pushq	%r11
000000000001696a	pushq	%r12
000000000001696c	pushq	%r13
000000000001696e	pushq	%r14
0000000000016970	pushq	%r15
0000000000016972	subq	$0x10, %rsp
0000000000016976	movss	%xmm0, (%rsp)
000000000001697b	subq	$0x10, %rsp
000000000001697f	movss	%xmm1, (%rsp)
0000000000016984	pushq	%rsi
0000000000016985	pushq	%rdi
0000000000016986	callq	__Z7getBasev ## getBase()
000000000001698b	addq	$0x248cb0, %rax
0000000000016991	popq	%rdi
0000000000016992	popq	%rsi
0000000000016993	movss	(%rsp), %xmm1
0000000000016998	addq	$0x10, %rsp
000000000001699c	movss	(%rsp), %xmm0
00000000000169a1	addq	$0x10, %rsp
00000000000169a5	popq	%r15
00000000000169a7	popq	%r14
00000000000169a9	popq	%r13
00000000000169ab	popq	%r12
00000000000169ad	popq	%r11
00000000000169af	popq	%r10
00000000000169b1	popq	%r9
00000000000169b3	popq	%r8
00000000000169b5	popq	%rcx
00000000000169b6	popq	%rdx
00000000000169b7	popq	%rsi
00000000000169b8	popq	%rdi
00000000000169b9	popq	%rbx
00000000000169ba	popq	%rbp
00000000000169bb	jmpq	*%rax
__ZN7cocos2d10CCDirector15getScreenBottomEv:
00000000000169bd	pushq	%rbp
00000000000169be	movq	%rsp, %rbp
00000000000169c1	pushq	%rbx
00000000000169c2	pushq	%rdi
00000000000169c3	pushq	%rsi
00000000000169c4	pushq	%rdx
00000000000169c5	pushq	%rcx
00000000000169c6	pushq	%r8
00000000000169c8	pushq	%r9
00000000000169ca	pushq	%r10
00000000000169cc	pushq	%r11
00000000000169ce	pushq	%r12
00000000000169d0	pushq	%r13
00000000000169d2	pushq	%r14
00000000000169d4	pushq	%r15
00000000000169d6	subq	$0x10, %rsp
00000000000169da	movss	%xmm0, (%rsp)
00000000000169df	subq	$0x10, %rsp
00000000000169e3	movss	%xmm1, (%rsp)
00000000000169e8	pushq	%rsi
00000000000169e9	pushq	%rdi
00000000000169ea	callq	__Z7getBasev ## getBase()
00000000000169ef	addq	$0x24b210, %rax
00000000000169f5	popq	%rdi
00000000000169f6	popq	%rsi
00000000000169f7	movss	(%rsp), %xmm1
00000000000169fc	addq	$0x10, %rsp
0000000000016a00	movss	(%rsp), %xmm0
0000000000016a05	addq	$0x10, %rsp
0000000000016a09	popq	%r15
0000000000016a0b	popq	%r14
0000000000016a0d	popq	%r13
0000000000016a0f	popq	%r12
0000000000016a11	popq	%r11
0000000000016a13	popq	%r10
0000000000016a15	popq	%r9
0000000000016a17	popq	%r8
0000000000016a19	popq	%rcx
0000000000016a1a	popq	%rdx
0000000000016a1b	popq	%rsi
0000000000016a1c	popq	%rdi
0000000000016a1d	popq	%rbx
0000000000016a1e	popq	%rbp
0000000000016a1f	jmpq	*%rax
__ZN7cocos2d10CCDirector18getTouchDispatcherEPv:
0000000000016a21	pushq	%rbp
0000000000016a22	movq	%rsp, %rbp
0000000000016a25	pushq	%rbx
0000000000016a26	pushq	%rdi
0000000000016a27	pushq	%rsi
0000000000016a28	pushq	%rdx
0000000000016a29	pushq	%rcx
0000000000016a2a	pushq	%r8
0000000000016a2c	pushq	%r9
0000000000016a2e	pushq	%r10
0000000000016a30	pushq	%r11
0000000000016a32	pushq	%r12
0000000000016a34	pushq	%r13
0000000000016a36	pushq	%r14
0000000000016a38	pushq	%r15
0000000000016a3a	subq	$0x10, %rsp
0000000000016a3e	movss	%xmm0, (%rsp)
0000000000016a43	subq	$0x10, %rsp
0000000000016a47	movss	%xmm1, (%rsp)
0000000000016a4c	pushq	%rsi
0000000000016a4d	pushq	%rdi
0000000000016a4e	callq	__Z7getBasev ## getBase()
0000000000016a53	addq	$0x24afa0, %rax
0000000000016a59	popq	%rdi
0000000000016a5a	popq	%rsi
0000000000016a5b	movss	(%rsp), %xmm1
0000000000016a60	addq	$0x10, %rsp
0000000000016a64	movss	(%rsp), %xmm0
0000000000016a69	addq	$0x10, %rsp
0000000000016a6d	popq	%r15
0000000000016a6f	popq	%r14
0000000000016a71	popq	%r13
0000000000016a73	popq	%r12
0000000000016a75	popq	%r11
0000000000016a77	popq	%r10
0000000000016a79	popq	%r9
0000000000016a7b	popq	%r8
0000000000016a7d	popq	%rcx
0000000000016a7e	popq	%rdx
0000000000016a7f	popq	%rsi
0000000000016a80	popq	%rdi
0000000000016a81	popq	%rbx
0000000000016a82	popq	%rbp
0000000000016a83	jmpq	*%rax
__ZN7cocos2d10CCDirector9pushSceneEPNS_7CCSceneE:
0000000000016a85	pushq	%rbp
0000000000016a86	movq	%rsp, %rbp
0000000000016a89	pushq	%rbx
0000000000016a8a	pushq	%rdi
0000000000016a8b	pushq	%rsi
0000000000016a8c	pushq	%rdx
0000000000016a8d	pushq	%rcx
0000000000016a8e	pushq	%r8
0000000000016a90	pushq	%r9
0000000000016a92	pushq	%r10
0000000000016a94	pushq	%r11
0000000000016a96	pushq	%r12
0000000000016a98	pushq	%r13
0000000000016a9a	pushq	%r14
0000000000016a9c	pushq	%r15
0000000000016a9e	subq	$0x10, %rsp
0000000000016aa2	movss	%xmm0, (%rsp)
0000000000016aa7	subq	$0x10, %rsp
0000000000016aab	movss	%xmm1, (%rsp)
0000000000016ab0	pushq	%rsi
0000000000016ab1	pushq	%rdi
0000000000016ab2	callq	__Z7getBasev ## getBase()
0000000000016ab7	addq	$0x24a620, %rax
0000000000016abd	popq	%rdi
0000000000016abe	popq	%rsi
0000000000016abf	movss	(%rsp), %xmm1
0000000000016ac4	addq	$0x10, %rsp
0000000000016ac8	movss	(%rsp), %xmm0
0000000000016acd	addq	$0x10, %rsp
0000000000016ad1	popq	%r15
0000000000016ad3	popq	%r14
0000000000016ad5	popq	%r13
0000000000016ad7	popq	%r12
0000000000016ad9	popq	%r11
0000000000016adb	popq	%r10
0000000000016add	popq	%r9
0000000000016adf	popq	%r8
0000000000016ae1	popq	%rcx
0000000000016ae2	popq	%rdx
0000000000016ae3	popq	%rsi
0000000000016ae4	popq	%rdi
0000000000016ae5	popq	%rbx
0000000000016ae6	popq	%rbp
0000000000016ae7	jmpq	*%rax
__ZN7cocos2d7CCScene6createEv:
0000000000016ae9	pushq	%rbp
0000000000016aea	movq	%rsp, %rbp
0000000000016aed	pushq	%rbx
0000000000016aee	pushq	%rdi
0000000000016aef	pushq	%rsi
0000000000016af0	pushq	%rdx
0000000000016af1	pushq	%rcx
0000000000016af2	pushq	%r8
0000000000016af4	pushq	%r9
0000000000016af6	pushq	%r10
0000000000016af8	pushq	%r11
0000000000016afa	pushq	%r12
0000000000016afc	pushq	%r13
0000000000016afe	pushq	%r14
0000000000016b00	pushq	%r15
0000000000016b02	subq	$0x10, %rsp
0000000000016b06	movss	%xmm0, (%rsp)
0000000000016b0b	subq	$0x10, %rsp
0000000000016b0f	movss	%xmm1, (%rsp)
0000000000016b14	pushq	%rsi
0000000000016b15	pushq	%rdi
0000000000016b16	callq	__Z7getBasev ## getBase()
0000000000016b1b	addq	$0x13c140, %rax
0000000000016b21	popq	%rdi
0000000000016b22	popq	%rsi
0000000000016b23	movss	(%rsp), %xmm1
0000000000016b28	addq	$0x10, %rsp
0000000000016b2c	movss	(%rsp), %xmm0
0000000000016b31	addq	$0x10, %rsp
0000000000016b35	popq	%r15
0000000000016b37	popq	%r14
0000000000016b39	popq	%r13
0000000000016b3b	popq	%r12
0000000000016b3d	popq	%r11
0000000000016b3f	popq	%r10
0000000000016b41	popq	%r9
0000000000016b43	popq	%r8
0000000000016b45	popq	%rcx
0000000000016b46	popq	%rdx
0000000000016b47	popq	%rsi
0000000000016b48	popq	%rdi
0000000000016b49	popq	%rbx
0000000000016b4a	popq	%rbp
0000000000016b4b	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA10getOpacityEv:
0000000000016b4d	pushq	%rbp
0000000000016b4e	movq	%rsp, %rbp
0000000000016b51	pushq	%rbx
0000000000016b52	pushq	%rdi
0000000000016b53	pushq	%rsi
0000000000016b54	pushq	%rdx
0000000000016b55	pushq	%rcx
0000000000016b56	pushq	%r8
0000000000016b58	pushq	%r9
0000000000016b5a	pushq	%r10
0000000000016b5c	pushq	%r11
0000000000016b5e	pushq	%r12
0000000000016b60	pushq	%r13
0000000000016b62	pushq	%r14
0000000000016b64	pushq	%r15
0000000000016b66	subq	$0x10, %rsp
0000000000016b6a	movss	%xmm0, (%rsp)
0000000000016b6f	subq	$0x10, %rsp
0000000000016b73	movss	%xmm1, (%rsp)
0000000000016b78	pushq	%rsi
0000000000016b79	pushq	%rdi
0000000000016b7a	callq	__Z7getBasev ## getBase()
0000000000016b7f	addq	$0x273be0, %rax
0000000000016b85	popq	%rdi
0000000000016b86	popq	%rsi
0000000000016b87	movss	(%rsp), %xmm1
0000000000016b8c	addq	$0x10, %rsp
0000000000016b90	movss	(%rsp), %xmm0
0000000000016b95	addq	$0x10, %rsp
0000000000016b99	popq	%r15
0000000000016b9b	popq	%r14
0000000000016b9d	popq	%r13
0000000000016b9f	popq	%r12
0000000000016ba1	popq	%r11
0000000000016ba3	popq	%r10
0000000000016ba5	popq	%r9
0000000000016ba7	popq	%r8
0000000000016ba9	popq	%rcx
0000000000016baa	popq	%rdx
0000000000016bab	popq	%rsi
0000000000016bac	popq	%rdi
0000000000016bad	popq	%rbx
0000000000016bae	popq	%rbp
0000000000016baf	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA17getDisplayedColorEv:
0000000000016bb1	pushq	%rbp
0000000000016bb2	movq	%rsp, %rbp
0000000000016bb5	pushq	%rbx
0000000000016bb6	pushq	%rdi
0000000000016bb7	pushq	%rsi
0000000000016bb8	pushq	%rdx
0000000000016bb9	pushq	%rcx
0000000000016bba	pushq	%r8
0000000000016bbc	pushq	%r9
0000000000016bbe	pushq	%r10
0000000000016bc0	pushq	%r11
0000000000016bc2	pushq	%r12
0000000000016bc4	pushq	%r13
0000000000016bc6	pushq	%r14
0000000000016bc8	pushq	%r15
0000000000016bca	subq	$0x10, %rsp
0000000000016bce	movss	%xmm0, (%rsp)
0000000000016bd3	subq	$0x10, %rsp
0000000000016bd7	movss	%xmm1, (%rsp)
0000000000016bdc	pushq	%rsi
0000000000016bdd	pushq	%rdi
0000000000016bde	callq	__Z7getBasev ## getBase()
0000000000016be3	addq	$0x273d80, %rax
0000000000016be9	popq	%rdi
0000000000016bea	popq	%rsi
0000000000016beb	movss	(%rsp), %xmm1
0000000000016bf0	addq	$0x10, %rsp
0000000000016bf4	movss	(%rsp), %xmm0
0000000000016bf9	addq	$0x10, %rsp
0000000000016bfd	popq	%r15
0000000000016bff	popq	%r14
0000000000016c01	popq	%r13
0000000000016c03	popq	%r12
0000000000016c05	popq	%r11
0000000000016c07	popq	%r10
0000000000016c09	popq	%r9
0000000000016c0b	popq	%r8
0000000000016c0d	popq	%rcx
0000000000016c0e	popq	%rdx
0000000000016c0f	popq	%rsi
0000000000016c10	popq	%rdi
0000000000016c11	popq	%rbx
0000000000016c12	popq	%rbp
0000000000016c13	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA18isOpacityModifyRGBEv:
0000000000016c15	pushq	%rbp
0000000000016c16	movq	%rsp, %rbp
0000000000016c19	pushq	%rbx
0000000000016c1a	pushq	%rdi
0000000000016c1b	pushq	%rsi
0000000000016c1c	pushq	%rdx
0000000000016c1d	pushq	%rcx
0000000000016c1e	pushq	%r8
0000000000016c20	pushq	%r9
0000000000016c22	pushq	%r10
0000000000016c24	pushq	%r11
0000000000016c26	pushq	%r12
0000000000016c28	pushq	%r13
0000000000016c2a	pushq	%r14
0000000000016c2c	pushq	%r15
0000000000016c2e	subq	$0x10, %rsp
0000000000016c32	movss	%xmm0, (%rsp)
0000000000016c37	subq	$0x10, %rsp
0000000000016c3b	movss	%xmm1, (%rsp)
0000000000016c40	pushq	%rsi
0000000000016c41	pushq	%rdi
0000000000016c42	callq	__Z7getBasev ## getBase()
0000000000016c47	addq	$0x6190, %rax
0000000000016c4d	popq	%rdi
0000000000016c4e	popq	%rsi
0000000000016c4f	movss	(%rsp), %xmm1
0000000000016c54	addq	$0x10, %rsp
0000000000016c58	movss	(%rsp), %xmm0
0000000000016c5d	addq	$0x10, %rsp
0000000000016c61	popq	%r15
0000000000016c63	popq	%r14
0000000000016c65	popq	%r13
0000000000016c67	popq	%r12
0000000000016c69	popq	%r11
0000000000016c6b	popq	%r10
0000000000016c6d	popq	%r9
0000000000016c6f	popq	%r8
0000000000016c71	popq	%rcx
0000000000016c72	popq	%rdx
0000000000016c73	popq	%rsi
0000000000016c74	popq	%rdi
0000000000016c75	popq	%rbx
0000000000016c76	popq	%rbp
0000000000016c77	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA19getDisplayedOpacityEv:
0000000000016c79	pushq	%rbp
0000000000016c7a	movq	%rsp, %rbp
0000000000016c7d	pushq	%rbx
0000000000016c7e	pushq	%rdi
0000000000016c7f	pushq	%rsi
0000000000016c80	pushq	%rdx
0000000000016c81	pushq	%rcx
0000000000016c82	pushq	%r8
0000000000016c84	pushq	%r9
0000000000016c86	pushq	%r10
0000000000016c88	pushq	%r11
0000000000016c8a	pushq	%r12
0000000000016c8c	pushq	%r13
0000000000016c8e	pushq	%r14
0000000000016c90	pushq	%r15
0000000000016c92	subq	$0x10, %rsp
0000000000016c96	movss	%xmm0, (%rsp)
0000000000016c9b	subq	$0x10, %rsp
0000000000016c9f	movss	%xmm1, (%rsp)
0000000000016ca4	pushq	%rsi
0000000000016ca5	pushq	%rdi
0000000000016ca6	callq	__Z7getBasev ## getBase()
0000000000016cab	addq	$0x273c00, %rax
0000000000016cb1	popq	%rdi
0000000000016cb2	popq	%rsi
0000000000016cb3	movss	(%rsp), %xmm1
0000000000016cb8	addq	$0x10, %rsp
0000000000016cbc	movss	(%rsp), %xmm0
0000000000016cc1	addq	$0x10, %rsp
0000000000016cc5	popq	%r15
0000000000016cc7	popq	%r14
0000000000016cc9	popq	%r13
0000000000016ccb	popq	%r12
0000000000016ccd	popq	%r11
0000000000016ccf	popq	%r10
0000000000016cd1	popq	%r9
0000000000016cd3	popq	%r8
0000000000016cd5	popq	%rcx
0000000000016cd6	popq	%rdx
0000000000016cd7	popq	%rsi
0000000000016cd8	popq	%rdi
0000000000016cd9	popq	%rbx
0000000000016cda	popq	%rbp
0000000000016cdb	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA19setOpacityModifyRGBEb:
0000000000016cdd	pushq	%rbp
0000000000016cde	movq	%rsp, %rbp
0000000000016ce1	pushq	%rbx
0000000000016ce2	pushq	%rdi
0000000000016ce3	pushq	%rsi
0000000000016ce4	pushq	%rdx
0000000000016ce5	pushq	%rcx
0000000000016ce6	pushq	%r8
0000000000016ce8	pushq	%r9
0000000000016cea	pushq	%r10
0000000000016cec	pushq	%r11
0000000000016cee	pushq	%r12
0000000000016cf0	pushq	%r13
0000000000016cf2	pushq	%r14
0000000000016cf4	pushq	%r15
0000000000016cf6	subq	$0x10, %rsp
0000000000016cfa	movss	%xmm0, (%rsp)
0000000000016cff	subq	$0x10, %rsp
0000000000016d03	movss	%xmm1, (%rsp)
0000000000016d08	pushq	%rsi
0000000000016d09	pushq	%rdi
0000000000016d0a	callq	__Z7getBasev ## getBase()
0000000000016d0f	addq	$0x6180, %rax
0000000000016d15	popq	%rdi
0000000000016d16	popq	%rsi
0000000000016d17	movss	(%rsp), %xmm1
0000000000016d1c	addq	$0x10, %rsp
0000000000016d20	movss	(%rsp), %xmm0
0000000000016d25	addq	$0x10, %rsp
0000000000016d29	popq	%r15
0000000000016d2b	popq	%r14
0000000000016d2d	popq	%r13
0000000000016d2f	popq	%r12
0000000000016d31	popq	%r11
0000000000016d33	popq	%r10
0000000000016d35	popq	%r9
0000000000016d37	popq	%r8
0000000000016d39	popq	%rcx
0000000000016d3a	popq	%rdx
0000000000016d3b	popq	%rsi
0000000000016d3c	popq	%rdi
0000000000016d3d	popq	%rbx
0000000000016d3e	popq	%rbp
0000000000016d3f	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA20updateDisplayedColorERKNS_10_ccColor3BE:
0000000000016d41	pushq	%rbp
0000000000016d42	movq	%rsp, %rbp
0000000000016d45	pushq	%rbx
0000000000016d46	pushq	%rdi
0000000000016d47	pushq	%rsi
0000000000016d48	pushq	%rdx
0000000000016d49	pushq	%rcx
0000000000016d4a	pushq	%r8
0000000000016d4c	pushq	%r9
0000000000016d4e	pushq	%r10
0000000000016d50	pushq	%r11
0000000000016d52	pushq	%r12
0000000000016d54	pushq	%r13
0000000000016d56	pushq	%r14
0000000000016d58	pushq	%r15
0000000000016d5a	subq	$0x10, %rsp
0000000000016d5e	movss	%xmm0, (%rsp)
0000000000016d63	subq	$0x10, %rsp
0000000000016d67	movss	%xmm1, (%rsp)
0000000000016d6c	pushq	%rsi
0000000000016d6d	pushq	%rdi
0000000000016d6e	callq	__Z7getBasev ## getBase()
0000000000016d73	addq	$0x2740b0, %rax
0000000000016d79	popq	%rdi
0000000000016d7a	popq	%rsi
0000000000016d7b	movss	(%rsp), %xmm1
0000000000016d80	addq	$0x10, %rsp
0000000000016d84	movss	(%rsp), %xmm0
0000000000016d89	addq	$0x10, %rsp
0000000000016d8d	popq	%r15
0000000000016d8f	popq	%r14
0000000000016d91	popq	%r13
0000000000016d93	popq	%r12
0000000000016d95	popq	%r11
0000000000016d97	popq	%r10
0000000000016d99	popq	%r9
0000000000016d9b	popq	%r8
0000000000016d9d	popq	%rcx
0000000000016d9e	popq	%rdx
0000000000016d9f	popq	%rsi
0000000000016da0	popq	%rdi
0000000000016da1	popq	%rbx
0000000000016da2	popq	%rbp
0000000000016da3	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA21isCascadeColorEnabledEv:
0000000000016da5	pushq	%rbp
0000000000016da6	movq	%rsp, %rbp
0000000000016da9	pushq	%rbx
0000000000016daa	pushq	%rdi
0000000000016dab	pushq	%rsi
0000000000016dac	pushq	%rdx
0000000000016dad	pushq	%rcx
0000000000016dae	pushq	%r8
0000000000016db0	pushq	%r9
0000000000016db2	pushq	%r10
0000000000016db4	pushq	%r11
0000000000016db6	pushq	%r12
0000000000016db8	pushq	%r13
0000000000016dba	pushq	%r14
0000000000016dbc	pushq	%r15
0000000000016dbe	subq	$0x10, %rsp
0000000000016dc2	movss	%xmm0, (%rsp)
0000000000016dc7	subq	$0x10, %rsp
0000000000016dcb	movss	%xmm1, (%rsp)
0000000000016dd0	pushq	%rsi
0000000000016dd1	pushq	%rdi
0000000000016dd2	callq	__Z7getBasev ## getBase()
0000000000016dd7	addq	$0x274230, %rax
0000000000016ddd	popq	%rdi
0000000000016dde	popq	%rsi
0000000000016ddf	movss	(%rsp), %xmm1
0000000000016de4	addq	$0x10, %rsp
0000000000016de8	movss	(%rsp), %xmm0
0000000000016ded	addq	$0x10, %rsp
0000000000016df1	popq	%r15
0000000000016df3	popq	%r14
0000000000016df5	popq	%r13
0000000000016df7	popq	%r12
0000000000016df9	popq	%r11
0000000000016dfb	popq	%r10
0000000000016dfd	popq	%r9
0000000000016dff	popq	%r8
0000000000016e01	popq	%rcx
0000000000016e02	popq	%rdx
0000000000016e03	popq	%rsi
0000000000016e04	popq	%rdi
0000000000016e05	popq	%rbx
0000000000016e06	popq	%rbp
0000000000016e07	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA22setCascadeColorEnabledEb:
0000000000016e09	pushq	%rbp
0000000000016e0a	movq	%rsp, %rbp
0000000000016e0d	pushq	%rbx
0000000000016e0e	pushq	%rdi
0000000000016e0f	pushq	%rsi
0000000000016e10	pushq	%rdx
0000000000016e11	pushq	%rcx
0000000000016e12	pushq	%r8
0000000000016e14	pushq	%r9
0000000000016e16	pushq	%r10
0000000000016e18	pushq	%r11
0000000000016e1a	pushq	%r12
0000000000016e1c	pushq	%r13
0000000000016e1e	pushq	%r14
0000000000016e20	pushq	%r15
0000000000016e22	subq	$0x10, %rsp
0000000000016e26	movss	%xmm0, (%rsp)
0000000000016e2b	subq	$0x10, %rsp
0000000000016e2f	movss	%xmm1, (%rsp)
0000000000016e34	pushq	%rsi
0000000000016e35	pushq	%rdi
0000000000016e36	callq	__Z7getBasev ## getBase()
0000000000016e3b	addq	$0x274250, %rax
0000000000016e41	popq	%rdi
0000000000016e42	popq	%rsi
0000000000016e43	movss	(%rsp), %xmm1
0000000000016e48	addq	$0x10, %rsp
0000000000016e4c	movss	(%rsp), %xmm0
0000000000016e51	addq	$0x10, %rsp
0000000000016e55	popq	%r15
0000000000016e57	popq	%r14
0000000000016e59	popq	%r13
0000000000016e5b	popq	%r12
0000000000016e5d	popq	%r11
0000000000016e5f	popq	%r10
0000000000016e61	popq	%r9
0000000000016e63	popq	%r8
0000000000016e65	popq	%rcx
0000000000016e66	popq	%rdx
0000000000016e67	popq	%rsi
0000000000016e68	popq	%rdi
0000000000016e69	popq	%rbx
0000000000016e6a	popq	%rbp
0000000000016e6b	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA22updateDisplayedOpacityEh:
0000000000016e6d	pushq	%rbp
0000000000016e6e	movq	%rsp, %rbp
0000000000016e71	pushq	%rbx
0000000000016e72	pushq	%rdi
0000000000016e73	pushq	%rsi
0000000000016e74	pushq	%rdx
0000000000016e75	pushq	%rcx
0000000000016e76	pushq	%r8
0000000000016e78	pushq	%r9
0000000000016e7a	pushq	%r10
0000000000016e7c	pushq	%r11
0000000000016e7e	pushq	%r12
0000000000016e80	pushq	%r13
0000000000016e82	pushq	%r14
0000000000016e84	pushq	%r15
0000000000016e86	subq	$0x10, %rsp
0000000000016e8a	movss	%xmm0, (%rsp)
0000000000016e8f	subq	$0x10, %rsp
0000000000016e93	movss	%xmm1, (%rsp)
0000000000016e98	pushq	%rsi
0000000000016e99	pushq	%rdi
0000000000016e9a	callq	__Z7getBasev ## getBase()
0000000000016e9f	addq	$0x273f20, %rax
0000000000016ea5	popq	%rdi
0000000000016ea6	popq	%rsi
0000000000016ea7	movss	(%rsp), %xmm1
0000000000016eac	addq	$0x10, %rsp
0000000000016eb0	movss	(%rsp), %xmm0
0000000000016eb5	addq	$0x10, %rsp
0000000000016eb9	popq	%r15
0000000000016ebb	popq	%r14
0000000000016ebd	popq	%r13
0000000000016ebf	popq	%r12
0000000000016ec1	popq	%r11
0000000000016ec3	popq	%r10
0000000000016ec5	popq	%r9
0000000000016ec7	popq	%r8
0000000000016ec9	popq	%rcx
0000000000016eca	popq	%rdx
0000000000016ecb	popq	%rsi
0000000000016ecc	popq	%rdi
0000000000016ecd	popq	%rbx
0000000000016ece	popq	%rbp
0000000000016ecf	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA23isCascadeOpacityEnabledEv:
0000000000016ed1	pushq	%rbp
0000000000016ed2	movq	%rsp, %rbp
0000000000016ed5	pushq	%rbx
0000000000016ed6	pushq	%rdi
0000000000016ed7	pushq	%rsi
0000000000016ed8	pushq	%rdx
0000000000016ed9	pushq	%rcx
0000000000016eda	pushq	%r8
0000000000016edc	pushq	%r9
0000000000016ede	pushq	%r10
0000000000016ee0	pushq	%r11
0000000000016ee2	pushq	%r12
0000000000016ee4	pushq	%r13
0000000000016ee6	pushq	%r14
0000000000016ee8	pushq	%r15
0000000000016eea	subq	$0x10, %rsp
0000000000016eee	movss	%xmm0, (%rsp)
0000000000016ef3	subq	$0x10, %rsp
0000000000016ef7	movss	%xmm1, (%rsp)
0000000000016efc	pushq	%rsi
0000000000016efd	pushq	%rdi
0000000000016efe	callq	__Z7getBasev ## getBase()
0000000000016f03	addq	$0x2741f0, %rax
0000000000016f09	popq	%rdi
0000000000016f0a	popq	%rsi
0000000000016f0b	movss	(%rsp), %xmm1
0000000000016f10	addq	$0x10, %rsp
0000000000016f14	movss	(%rsp), %xmm0
0000000000016f19	addq	$0x10, %rsp
0000000000016f1d	popq	%r15
0000000000016f1f	popq	%r14
0000000000016f21	popq	%r13
0000000000016f23	popq	%r12
0000000000016f25	popq	%r11
0000000000016f27	popq	%r10
0000000000016f29	popq	%r9
0000000000016f2b	popq	%r8
0000000000016f2d	popq	%rcx
0000000000016f2e	popq	%rdx
0000000000016f2f	popq	%rsi
0000000000016f30	popq	%rdi
0000000000016f31	popq	%rbx
0000000000016f32	popq	%rbp
0000000000016f33	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA24setCascadeOpacityEnabledEb:
0000000000016f35	pushq	%rbp
0000000000016f36	movq	%rsp, %rbp
0000000000016f39	pushq	%rbx
0000000000016f3a	pushq	%rdi
0000000000016f3b	pushq	%rsi
0000000000016f3c	pushq	%rdx
0000000000016f3d	pushq	%rcx
0000000000016f3e	pushq	%r8
0000000000016f40	pushq	%r9
0000000000016f42	pushq	%r10
0000000000016f44	pushq	%r11
0000000000016f46	pushq	%r12
0000000000016f48	pushq	%r13
0000000000016f4a	pushq	%r14
0000000000016f4c	pushq	%r15
0000000000016f4e	subq	$0x10, %rsp
0000000000016f52	movss	%xmm0, (%rsp)
0000000000016f57	subq	$0x10, %rsp
0000000000016f5b	movss	%xmm1, (%rsp)
0000000000016f60	pushq	%rsi
0000000000016f61	pushq	%rdi
0000000000016f62	callq	__Z7getBasev ## getBase()
0000000000016f67	addq	$0x274210, %rax
0000000000016f6d	popq	%rdi
0000000000016f6e	popq	%rsi
0000000000016f6f	movss	(%rsp), %xmm1
0000000000016f74	addq	$0x10, %rsp
0000000000016f78	movss	(%rsp), %xmm0
0000000000016f7d	addq	$0x10, %rsp
0000000000016f81	popq	%r15
0000000000016f83	popq	%r14
0000000000016f85	popq	%r13
0000000000016f87	popq	%r12
0000000000016f89	popq	%r11
0000000000016f8b	popq	%r10
0000000000016f8d	popq	%r9
0000000000016f8f	popq	%r8
0000000000016f91	popq	%rcx
0000000000016f92	popq	%rdx
0000000000016f93	popq	%rsi
0000000000016f94	popq	%rdi
0000000000016f95	popq	%rbx
0000000000016f96	popq	%rbp
0000000000016f97	jmpq	*%rax
__ZN7cocos2d11CCLayerRGBA8getColorEv:
0000000000016f99	pushq	%rbp
0000000000016f9a	movq	%rsp, %rbp
0000000000016f9d	pushq	%rbx
0000000000016f9e	pushq	%rdi
0000000000016f9f	pushq	%rsi
0000000000016fa0	pushq	%rdx
0000000000016fa1	pushq	%rcx
0000000000016fa2	pushq	%r8
0000000000016fa4	pushq	%r9
0000000000016fa6	pushq	%r10
0000000000016fa8	pushq	%r11
0000000000016faa	pushq	%r12
0000000000016fac	pushq	%r13
0000000000016fae	pushq	%r14
0000000000016fb0	pushq	%r15
0000000000016fb2	subq	$0x10, %rsp
0000000000016fb6	movss	%xmm0, (%rsp)
0000000000016fbb	subq	$0x10, %rsp
0000000000016fbf	movss	%xmm1, (%rsp)
0000000000016fc4	pushq	%rsi
0000000000016fc5	pushq	%rdi
0000000000016fc6	callq	__Z7getBasev ## getBase()
0000000000016fcb	addq	$0x273d60, %rax
0000000000016fd1	popq	%rdi
0000000000016fd2	popq	%rsi
0000000000016fd3	movss	(%rsp), %xmm1
0000000000016fd8	addq	$0x10, %rsp
0000000000016fdc	movss	(%rsp), %xmm0
0000000000016fe1	addq	$0x10, %rsp
0000000000016fe5	popq	%r15
0000000000016fe7	popq	%r14
0000000000016fe9	popq	%r13
0000000000016feb	popq	%r12
0000000000016fed	popq	%r11
0000000000016fef	popq	%r10
0000000000016ff1	popq	%r9
0000000000016ff3	popq	%r8
0000000000016ff5	popq	%rcx
0000000000016ff6	popq	%rdx
0000000000016ff7	popq	%rsi
0000000000016ff8	popq	%rdi
0000000000016ff9	popq	%rbx
0000000000016ffa	popq	%rbp
0000000000016ffb	jmpq	*%rax
__ZN7cocos2d11CCScheduler16scheduleSelectorEMNS_8CCObjectEFvfEPS1_fjfb:
0000000000016ffd	pushq	%rbp
0000000000016ffe	movq	%rsp, %rbp
0000000000017001	pushq	%rbx
0000000000017002	pushq	%rdi
0000000000017003	pushq	%rsi
0000000000017004	pushq	%rdx
0000000000017005	pushq	%rcx
0000000000017006	pushq	%r8
0000000000017008	pushq	%r9
000000000001700a	pushq	%r10
000000000001700c	pushq	%r11
000000000001700e	pushq	%r12
0000000000017010	pushq	%r13
0000000000017012	pushq	%r14
0000000000017014	pushq	%r15
0000000000017016	subq	$0x10, %rsp
000000000001701a	movss	%xmm0, (%rsp)
000000000001701f	subq	$0x10, %rsp
0000000000017023	movss	%xmm1, (%rsp)
0000000000017028	pushq	%rsi
0000000000017029	pushq	%rdi
000000000001702a	callq	__Z7getBasev ## getBase()
000000000001702f	addq	$0x242b20, %rax
0000000000017035	popq	%rdi
0000000000017036	popq	%rsi
0000000000017037	movss	(%rsp), %xmm1
000000000001703c	addq	$0x10, %rsp
0000000000017040	movss	(%rsp), %xmm0
0000000000017045	addq	$0x10, %rsp
0000000000017049	popq	%r15
000000000001704b	popq	%r14
000000000001704d	popq	%r13
000000000001704f	popq	%r12
0000000000017051	popq	%r11
0000000000017053	popq	%r10
0000000000017055	popq	%r9
0000000000017057	popq	%r8
0000000000017059	popq	%rcx
000000000001705a	popq	%rdx
000000000001705b	popq	%rsi
000000000001705c	popq	%rdi
000000000001705d	popq	%rbx
000000000001705e	popq	%rbp
000000000001705f	jmpq	*%rax
__ZN7cocos2d11CCScheduler22unscheduleAllForTargetEPNS_8CCObjectE:
0000000000017061	pushq	%rbp
0000000000017062	movq	%rsp, %rbp
0000000000017065	pushq	%rbx
0000000000017066	pushq	%rdi
0000000000017067	pushq	%rsi
0000000000017068	pushq	%rdx
0000000000017069	pushq	%rcx
000000000001706a	pushq	%r8
000000000001706c	pushq	%r9
000000000001706e	pushq	%r10
0000000000017070	pushq	%r11
0000000000017072	pushq	%r12
0000000000017074	pushq	%r13
0000000000017076	pushq	%r14
0000000000017078	pushq	%r15
000000000001707a	subq	$0x10, %rsp
000000000001707e	movss	%xmm0, (%rsp)
0000000000017083	subq	$0x10, %rsp
0000000000017087	movss	%xmm1, (%rsp)
000000000001708c	pushq	%rsi
000000000001708d	pushq	%rdi
000000000001708e	callq	__Z7getBasev ## getBase()
0000000000017093	addq	$0x243e40, %rax
0000000000017099	popq	%rdi
000000000001709a	popq	%rsi
000000000001709b	movss	(%rsp), %xmm1
00000000000170a0	addq	$0x10, %rsp
00000000000170a4	movss	(%rsp), %xmm0
00000000000170a9	addq	$0x10, %rsp
00000000000170ad	popq	%r15
00000000000170af	popq	%r14
00000000000170b1	popq	%r13
00000000000170b3	popq	%r12
00000000000170b5	popq	%r11
00000000000170b7	popq	%r10
00000000000170b9	popq	%r9
00000000000170bb	popq	%r8
00000000000170bd	popq	%rcx
00000000000170be	popq	%rdx
00000000000170bf	popq	%rsi
00000000000170c0	popq	%rdi
00000000000170c1	popq	%rbx
00000000000170c2	popq	%rbp
00000000000170c3	jmpq	*%rax
__ZN7cocos2d11CCScheduler23scheduleUpdateForTargetEPNS_8CCObjectEib:
00000000000170c5	pushq	%rbp
00000000000170c6	movq	%rsp, %rbp
00000000000170c9	pushq	%rbx
00000000000170ca	pushq	%rdi
00000000000170cb	pushq	%rsi
00000000000170cc	pushq	%rdx
00000000000170cd	pushq	%rcx
00000000000170ce	pushq	%r8
00000000000170d0	pushq	%r9
00000000000170d2	pushq	%r10
00000000000170d4	pushq	%r11
00000000000170d6	pushq	%r12
00000000000170d8	pushq	%r13
00000000000170da	pushq	%r14
00000000000170dc	pushq	%r15
00000000000170de	subq	$0x10, %rsp
00000000000170e2	movss	%xmm0, (%rsp)
00000000000170e7	subq	$0x10, %rsp
00000000000170eb	movss	%xmm1, (%rsp)
00000000000170f0	pushq	%rsi
00000000000170f1	pushq	%rdi
00000000000170f2	callq	__Z7getBasev ## getBase()
00000000000170f7	addq	$0x2438d0, %rax
00000000000170fd	popq	%rdi
00000000000170fe	popq	%rsi
00000000000170ff	movss	(%rsp), %xmm1
0000000000017104	addq	$0x10, %rsp
0000000000017108	movss	(%rsp), %xmm0
000000000001710d	addq	$0x10, %rsp
0000000000017111	popq	%r15
0000000000017113	popq	%r14
0000000000017115	popq	%r13
0000000000017117	popq	%r12
0000000000017119	popq	%r11
000000000001711b	popq	%r10
000000000001711d	popq	%r9
000000000001711f	popq	%r8
0000000000017121	popq	%rcx
0000000000017122	popq	%rdx
0000000000017123	popq	%rsi
0000000000017124	popq	%rdi
0000000000017125	popq	%rbx
0000000000017126	popq	%rbp
0000000000017127	jmpq	*%rax
__ZN7cocos2d11CCTexture2D13initWithImageEPNS_7CCImageE:
0000000000017129	pushq	%rbp
000000000001712a	movq	%rsp, %rbp
000000000001712d	pushq	%rbx
000000000001712e	pushq	%rdi
000000000001712f	pushq	%rsi
0000000000017130	pushq	%rdx
0000000000017131	pushq	%rcx
0000000000017132	pushq	%r8
0000000000017134	pushq	%r9
0000000000017136	pushq	%r10
0000000000017138	pushq	%r11
000000000001713a	pushq	%r12
000000000001713c	pushq	%r13
000000000001713e	pushq	%r14
0000000000017140	pushq	%r15
0000000000017142	subq	$0x10, %rsp
0000000000017146	movss	%xmm0, (%rsp)
000000000001714b	subq	$0x10, %rsp
000000000001714f	movss	%xmm1, (%rsp)
0000000000017154	pushq	%rsi
0000000000017155	pushq	%rdi
0000000000017156	callq	__Z7getBasev ## getBase()
000000000001715b	addq	$0x246940, %rax
0000000000017161	popq	%rdi
0000000000017162	popq	%rsi
0000000000017163	movss	(%rsp), %xmm1
0000000000017168	addq	$0x10, %rsp
000000000001716c	movss	(%rsp), %xmm0
0000000000017171	addq	$0x10, %rsp
0000000000017175	popq	%r15
0000000000017177	popq	%r14
0000000000017179	popq	%r13
000000000001717b	popq	%r12
000000000001717d	popq	%r11
000000000001717f	popq	%r10
0000000000017181	popq	%r9
0000000000017183	popq	%r8
0000000000017185	popq	%rcx
0000000000017186	popq	%rdx
0000000000017187	popq	%rsi
0000000000017188	popq	%rdi
0000000000017189	popq	%rbx
000000000001718a	popq	%rbp
000000000001718b	jmpq	*%rax
__ZN7cocos2d11CCTexture2DC1Ev:
000000000001718d	pushq	%rbp
000000000001718e	movq	%rsp, %rbp
0000000000017191	pushq	%rbx
0000000000017192	pushq	%rdi
0000000000017193	pushq	%rsi
0000000000017194	pushq	%rdx
0000000000017195	pushq	%rcx
0000000000017196	pushq	%r8
0000000000017198	pushq	%r9
000000000001719a	pushq	%r10
000000000001719c	pushq	%r11
000000000001719e	pushq	%r12
00000000000171a0	pushq	%r13
00000000000171a2	pushq	%r14
00000000000171a4	pushq	%r15
00000000000171a6	subq	$0x10, %rsp
00000000000171aa	movss	%xmm0, (%rsp)
00000000000171af	subq	$0x10, %rsp
00000000000171b3	movss	%xmm1, (%rsp)
00000000000171b8	pushq	%rsi
00000000000171b9	pushq	%rdi
00000000000171ba	callq	__Z7getBasev ## getBase()
00000000000171bf	addq	$0x246280, %rax
00000000000171c5	popq	%rdi
00000000000171c6	popq	%rsi
00000000000171c7	movss	(%rsp), %xmm1
00000000000171cc	addq	$0x10, %rsp
00000000000171d0	movss	(%rsp), %xmm0
00000000000171d5	addq	$0x10, %rsp
00000000000171d9	popq	%r15
00000000000171db	popq	%r14
00000000000171dd	popq	%r13
00000000000171df	popq	%r12
00000000000171e1	popq	%r11
00000000000171e3	popq	%r10
00000000000171e5	popq	%r9
00000000000171e7	popq	%r8
00000000000171e9	popq	%rcx
00000000000171ea	popq	%rdx
00000000000171eb	popq	%rsi
00000000000171ec	popq	%rdi
00000000000171ed	popq	%rbx
00000000000171ee	popq	%rbp
00000000000171ef	jmpq	*%rax
__ZN7cocos2d11CCTexture2DC2Ev:
00000000000171f1	pushq	%rbp
00000000000171f2	movq	%rsp, %rbp
00000000000171f5	pushq	%rbx
00000000000171f6	pushq	%rdi
00000000000171f7	pushq	%rsi
00000000000171f8	pushq	%rdx
00000000000171f9	pushq	%rcx
00000000000171fa	pushq	%r8
00000000000171fc	pushq	%r9
00000000000171fe	pushq	%r10
0000000000017200	pushq	%r11
0000000000017202	pushq	%r12
0000000000017204	pushq	%r13
0000000000017206	pushq	%r14
0000000000017208	pushq	%r15
000000000001720a	subq	$0x10, %rsp
000000000001720e	movss	%xmm0, (%rsp)
0000000000017213	subq	$0x10, %rsp
0000000000017217	movss	%xmm1, (%rsp)
000000000001721c	pushq	%rsi
000000000001721d	pushq	%rdi
000000000001721e	callq	__Z7getBasev ## getBase()
0000000000017223	addq	$0x246280, %rax
0000000000017229	popq	%rdi
000000000001722a	popq	%rsi
000000000001722b	movss	(%rsp), %xmm1
0000000000017230	addq	$0x10, %rsp
0000000000017234	movss	(%rsp), %xmm0
0000000000017239	addq	$0x10, %rsp
000000000001723d	popq	%r15
000000000001723f	popq	%r14
0000000000017241	popq	%r13
0000000000017243	popq	%r12
0000000000017245	popq	%r11
0000000000017247	popq	%r10
0000000000017249	popq	%r9
000000000001724b	popq	%r8
000000000001724d	popq	%rcx
000000000001724e	popq	%rdx
000000000001724f	popq	%rsi
0000000000017250	popq	%rdi
0000000000017251	popq	%rbx
0000000000017252	popq	%rbp
0000000000017253	jmpq	*%rax
__ZN15CCTextInputNode6createEffPKcS1_iS1_:
0000000000017255	pushq	%rbp
0000000000017256	movq	%rsp, %rbp
0000000000017259	pushq	%rbx
000000000001725a	pushq	%rdi
000000000001725b	pushq	%rsi
000000000001725c	pushq	%rdx
000000000001725d	pushq	%rcx
000000000001725e	pushq	%r8
0000000000017260	pushq	%r9
0000000000017262	pushq	%r10
0000000000017264	pushq	%r11
0000000000017266	pushq	%r12
0000000000017268	pushq	%r13
000000000001726a	pushq	%r14
000000000001726c	pushq	%r15
000000000001726e	subq	$0x10, %rsp
0000000000017272	movss	%xmm0, (%rsp)
0000000000017277	subq	$0x10, %rsp
000000000001727b	movss	%xmm1, (%rsp)
0000000000017280	pushq	%rsi
0000000000017281	pushq	%rdi
0000000000017282	callq	__Z7getBasev ## getBase()
0000000000017287	addq	$0x5cfb0, %rax
000000000001728d	popq	%rdi
000000000001728e	popq	%rsi
000000000001728f	movss	(%rsp), %xmm1
0000000000017294	addq	$0x10, %rsp
0000000000017298	movss	(%rsp), %xmm0
000000000001729d	addq	$0x10, %rsp
00000000000172a1	popq	%r15
00000000000172a3	popq	%r14
00000000000172a5	popq	%r13
00000000000172a7	popq	%r12
00000000000172a9	popq	%r11
00000000000172ab	popq	%r10
00000000000172ad	popq	%r9
00000000000172af	popq	%r8
00000000000172b1	popq	%rcx
00000000000172b2	popq	%rdx
00000000000172b3	popq	%rsi
00000000000172b4	popq	%rdi
00000000000172b5	popq	%rbx
00000000000172b6	popq	%rbp
00000000000172b7	jmpq	*%rax
__ZN15CCTextInputNode15setAllowedCharsESs:
00000000000172b9	pushq	%rbp
00000000000172ba	movq	%rsp, %rbp
00000000000172bd	pushq	%rbx
00000000000172be	pushq	%rdi
00000000000172bf	pushq	%rsi
00000000000172c0	pushq	%rdx
00000000000172c1	pushq	%rcx
00000000000172c2	pushq	%r8
00000000000172c4	pushq	%r9
00000000000172c6	pushq	%r10
00000000000172c8	pushq	%r11
00000000000172ca	pushq	%r12
00000000000172cc	pushq	%r13
00000000000172ce	pushq	%r14
00000000000172d0	pushq	%r15
00000000000172d2	subq	$0x10, %rsp
00000000000172d6	movss	%xmm0, (%rsp)
00000000000172db	subq	$0x10, %rsp
00000000000172df	movss	%xmm1, (%rsp)
00000000000172e4	pushq	%rsi
00000000000172e5	pushq	%rdi
00000000000172e6	callq	__Z7getBasev ## getBase()
00000000000172eb	addq	$0x5d360, %rax
00000000000172f1	popq	%rdi
00000000000172f2	popq	%rsi
00000000000172f3	movss	(%rsp), %xmm1
00000000000172f8	addq	$0x10, %rsp
00000000000172fc	movss	(%rsp), %xmm0
0000000000017301	addq	$0x10, %rsp
0000000000017305	popq	%r15
0000000000017307	popq	%r14
0000000000017309	popq	%r13
000000000001730b	popq	%r12
000000000001730d	popq	%r11
000000000001730f	popq	%r10
0000000000017311	popq	%r9
0000000000017313	popq	%r8
0000000000017315	popq	%rcx
0000000000017316	popq	%rdx
0000000000017317	popq	%rsi
0000000000017318	popq	%rdi
0000000000017319	popq	%rbx
000000000001731a	popq	%rbp
000000000001731b	jmpq	*%rax
__ZN15CCTextInputNode16setMaxLabelScaleEf:
000000000001731d	pushq	%rbp
000000000001731e	movq	%rsp, %rbp
0000000000017321	pushq	%rbx
0000000000017322	pushq	%rdi
0000000000017323	pushq	%rsi
0000000000017324	pushq	%rdx
0000000000017325	pushq	%rcx
0000000000017326	pushq	%r8
0000000000017328	pushq	%r9
000000000001732a	pushq	%r10
000000000001732c	pushq	%r11
000000000001732e	pushq	%r12
0000000000017330	pushq	%r13
0000000000017332	pushq	%r14
0000000000017334	pushq	%r15
0000000000017336	subq	$0x10, %rsp
000000000001733a	movss	%xmm0, (%rsp)
000000000001733f	subq	$0x10, %rsp
0000000000017343	movss	%xmm1, (%rsp)
0000000000017348	pushq	%rsi
0000000000017349	pushq	%rdi
000000000001734a	callq	__Z7getBasev ## getBase()
000000000001734f	addq	$0x5da30, %rax
0000000000017355	popq	%rdi
0000000000017356	popq	%rsi
0000000000017357	movss	(%rsp), %xmm1
000000000001735c	addq	$0x10, %rsp
0000000000017360	movss	(%rsp), %xmm0
0000000000017365	addq	$0x10, %rsp
0000000000017369	popq	%r15
000000000001736b	popq	%r14
000000000001736d	popq	%r13
000000000001736f	popq	%r12
0000000000017371	popq	%r11
0000000000017373	popq	%r10
0000000000017375	popq	%r9
0000000000017377	popq	%r8
0000000000017379	popq	%rcx
000000000001737a	popq	%rdx
000000000001737b	popq	%rsi
000000000001737c	popq	%rdi
000000000001737d	popq	%rbx
000000000001737e	popq	%rbp
000000000001737f	jmpq	*%rax
__ZN15CCTextInputNode16setMaxLabelWidthEf:
0000000000017381	pushq	%rbp
0000000000017382	movq	%rsp, %rbp
0000000000017385	pushq	%rbx
0000000000017386	pushq	%rdi
0000000000017387	pushq	%rsi
0000000000017388	pushq	%rdx
0000000000017389	pushq	%rcx
000000000001738a	pushq	%r8
000000000001738c	pushq	%r9
000000000001738e	pushq	%r10
0000000000017390	pushq	%r11
0000000000017392	pushq	%r12
0000000000017394	pushq	%r13
0000000000017396	pushq	%r14
0000000000017398	pushq	%r15
000000000001739a	subq	$0x10, %rsp
000000000001739e	movss	%xmm0, (%rsp)
00000000000173a3	subq	$0x10, %rsp
00000000000173a7	movss	%xmm1, (%rsp)
00000000000173ac	pushq	%rsi
00000000000173ad	pushq	%rdi
00000000000173ae	callq	__Z7getBasev ## getBase()
00000000000173b3	addq	$0x5da50, %rax
00000000000173b9	popq	%rdi
00000000000173ba	popq	%rsi
00000000000173bb	movss	(%rsp), %xmm1
00000000000173c0	addq	$0x10, %rsp
00000000000173c4	movss	(%rsp), %xmm0
00000000000173c9	addq	$0x10, %rsp
00000000000173cd	popq	%r15
00000000000173cf	popq	%r14
00000000000173d1	popq	%r13
00000000000173d3	popq	%r12
00000000000173d5	popq	%r11
00000000000173d7	popq	%r10
00000000000173d9	popq	%r9
00000000000173db	popq	%r8
00000000000173dd	popq	%rcx
00000000000173de	popq	%rdx
00000000000173df	popq	%rsi
00000000000173e0	popq	%rdi
00000000000173e1	popq	%rbx
00000000000173e2	popq	%rbp
00000000000173e3	jmpq	*%rax
__ZN15CCTextInputNode9getStringEv:
00000000000173e5	pushq	%rbp
00000000000173e6	movq	%rsp, %rbp
00000000000173e9	pushq	%rbx
00000000000173ea	pushq	%rdi
00000000000173eb	pushq	%rsi
00000000000173ec	pushq	%rdx
00000000000173ed	pushq	%rcx
00000000000173ee	pushq	%r8
00000000000173f0	pushq	%r9
00000000000173f2	pushq	%r10
00000000000173f4	pushq	%r11
00000000000173f6	pushq	%r12
00000000000173f8	pushq	%r13
00000000000173fa	pushq	%r14
00000000000173fc	pushq	%r15
00000000000173fe	subq	$0x10, %rsp
0000000000017402	movss	%xmm0, (%rsp)
0000000000017407	subq	$0x10, %rsp
000000000001740b	movss	%xmm1, (%rsp)
0000000000017410	pushq	%rsi
0000000000017411	pushq	%rdi
0000000000017412	callq	__Z7getBasev ## getBase()
0000000000017417	addq	$0x5d6f0, %rax
000000000001741d	popq	%rdi
000000000001741e	popq	%rsi
000000000001741f	movss	(%rsp), %xmm1
0000000000017424	addq	$0x10, %rsp
0000000000017428	movss	(%rsp), %xmm0
000000000001742d	addq	$0x10, %rsp
0000000000017431	popq	%r15
0000000000017433	popq	%r14
0000000000017435	popq	%r13
0000000000017437	popq	%r12
0000000000017439	popq	%r11
000000000001743b	popq	%r10
000000000001743d	popq	%r9
000000000001743f	popq	%r8
0000000000017441	popq	%rcx
0000000000017442	popq	%rdx
0000000000017443	popq	%rsi
0000000000017444	popq	%rdi
0000000000017445	popq	%rbx
0000000000017446	popq	%rbp
0000000000017447	jmpq	*%rax
__ZN15CCTextInputNode11getString_sEv:
0000000000017449	pushq	%rbp
000000000001744a	movq	%rsp, %rbp
000000000001744d	movq	0x1c0(%rdi), %rdi
0000000000017454	movq	(%rdi), %rax
0000000000017457	callq	*0x4b8(%rax)
000000000001745d	popq	%rbp
000000000001745e	retq
__ZN7cocos2d12CCDictionary11valueForKeyEl:
000000000001745f	pushq	%rbp
0000000000017460	movq	%rsp, %rbp
0000000000017463	pushq	%rbx
0000000000017464	pushq	%rdi
0000000000017465	pushq	%rsi
0000000000017466	pushq	%rdx
0000000000017467	pushq	%rcx
0000000000017468	pushq	%r8
000000000001746a	pushq	%r9
000000000001746c	pushq	%r10
000000000001746e	pushq	%r11
0000000000017470	pushq	%r12
0000000000017472	pushq	%r13
0000000000017474	pushq	%r14
0000000000017476	pushq	%r15
0000000000017478	subq	$0x10, %rsp
000000000001747c	movss	%xmm0, (%rsp)
0000000000017481	subq	$0x10, %rsp
0000000000017485	movss	%xmm1, (%rsp)
000000000001748a	pushq	%rsi
000000000001748b	pushq	%rdi
000000000001748c	callq	__Z7getBasev ## getBase()
0000000000017491	addq	$0x190cf0, %rax
0000000000017497	popq	%rdi
0000000000017498	popq	%rsi
0000000000017499	movss	(%rsp), %xmm1
000000000001749e	addq	$0x10, %rsp
00000000000174a2	movss	(%rsp), %xmm0
00000000000174a7	addq	$0x10, %rsp
00000000000174ab	popq	%r15
00000000000174ad	popq	%r14
00000000000174af	popq	%r13
00000000000174b1	popq	%r12
00000000000174b3	popq	%r11
00000000000174b5	popq	%r10
00000000000174b7	popq	%r9
00000000000174b9	popq	%r8
00000000000174bb	popq	%rcx
00000000000174bc	popq	%rdx
00000000000174bd	popq	%rsi
00000000000174be	popq	%rdi
00000000000174bf	popq	%rbx
00000000000174c0	popq	%rbp
00000000000174c1	jmpq	*%rax
__ZN7cocos2d12CCDictionary12objectForKeyERKSs:
00000000000174c3	pushq	%rbp
00000000000174c4	movq	%rsp, %rbp
00000000000174c7	pushq	%rbx
00000000000174c8	pushq	%rdi
00000000000174c9	pushq	%rsi
00000000000174ca	pushq	%rdx
00000000000174cb	pushq	%rcx
00000000000174cc	pushq	%r8
00000000000174ce	pushq	%r9
00000000000174d0	pushq	%r10
00000000000174d2	pushq	%r11
00000000000174d4	pushq	%r12
00000000000174d6	pushq	%r13
00000000000174d8	pushq	%r14
00000000000174da	pushq	%r15
00000000000174dc	subq	$0x10, %rsp
00000000000174e0	movss	%xmm0, (%rsp)
00000000000174e5	subq	$0x10, %rsp
00000000000174e9	movss	%xmm1, (%rsp)
00000000000174ee	pushq	%rsi
00000000000174ef	pushq	%rdi
00000000000174f0	callq	__Z7getBasev ## getBase()
00000000000174f5	addq	$0x190870, %rax
00000000000174fb	popq	%rdi
00000000000174fc	popq	%rsi
00000000000174fd	movss	(%rsp), %xmm1
0000000000017502	addq	$0x10, %rsp
0000000000017506	movss	(%rsp), %xmm0
000000000001750b	addq	$0x10, %rsp
000000000001750f	popq	%r15
0000000000017511	popq	%r14
0000000000017513	popq	%r13
0000000000017515	popq	%r12
0000000000017517	popq	%r11
0000000000017519	popq	%r10
000000000001751b	popq	%r9
000000000001751d	popq	%r8
000000000001751f	popq	%rcx
0000000000017520	popq	%rdx
0000000000017521	popq	%rsi
0000000000017522	popq	%rdi
0000000000017523	popq	%rbx
0000000000017524	popq	%rbp
0000000000017525	jmpq	*%rax
__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectEl:
0000000000017527	pushq	%rbp
0000000000017528	movq	%rsp, %rbp
000000000001752b	pushq	%rbx
000000000001752c	pushq	%rdi
000000000001752d	pushq	%rsi
000000000001752e	pushq	%rdx
000000000001752f	pushq	%rcx
0000000000017530	pushq	%r8
0000000000017532	pushq	%r9
0000000000017534	pushq	%r10
0000000000017536	pushq	%r11
0000000000017538	pushq	%r12
000000000001753a	pushq	%r13
000000000001753c	pushq	%r14
000000000001753e	pushq	%r15
0000000000017540	subq	$0x10, %rsp
0000000000017544	movss	%xmm0, (%rsp)
0000000000017549	subq	$0x10, %rsp
000000000001754d	movss	%xmm1, (%rsp)
0000000000017552	pushq	%rsi
0000000000017553	pushq	%rdi
0000000000017554	callq	__Z7getBasev ## getBase()
0000000000017559	addq	$0x191790, %rax
000000000001755f	popq	%rdi
0000000000017560	popq	%rsi
0000000000017561	movss	(%rsp), %xmm1
0000000000017566	addq	$0x10, %rsp
000000000001756a	movss	(%rsp), %xmm0
000000000001756f	addq	$0x10, %rsp
0000000000017573	popq	%r15
0000000000017575	popq	%r14
0000000000017577	popq	%r13
0000000000017579	popq	%r12
000000000001757b	popq	%r11
000000000001757d	popq	%r10
000000000001757f	popq	%r9
0000000000017581	popq	%r8
0000000000017583	popq	%rcx
0000000000017584	popq	%rdx
0000000000017585	popq	%rsi
0000000000017586	popq	%rdi
0000000000017587	popq	%rbx
0000000000017588	popq	%rbp
0000000000017589	jmpq	*%rax
__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectERKSs:
000000000001758b	pushq	%rbp
000000000001758c	movq	%rsp, %rbp
000000000001758f	pushq	%rbx
0000000000017590	pushq	%rdi
0000000000017591	pushq	%rsi
0000000000017592	pushq	%rdx
0000000000017593	pushq	%rcx
0000000000017594	pushq	%r8
0000000000017596	pushq	%r9
0000000000017598	pushq	%r10
000000000001759a	pushq	%r11
000000000001759c	pushq	%r12
000000000001759e	pushq	%r13
00000000000175a0	pushq	%r14
00000000000175a2	pushq	%r15
00000000000175a4	subq	$0x10, %rsp
00000000000175a8	movss	%xmm0, (%rsp)
00000000000175ad	subq	$0x10, %rsp
00000000000175b1	movss	%xmm1, (%rsp)
00000000000175b6	pushq	%rsi
00000000000175b7	pushq	%rdi
00000000000175b8	callq	__Z7getBasev ## getBase()
00000000000175bd	addq	$0x190dc0, %rax
00000000000175c3	popq	%rdi
00000000000175c4	popq	%rsi
00000000000175c5	movss	(%rsp), %xmm1
00000000000175ca	addq	$0x10, %rsp
00000000000175ce	movss	(%rsp), %xmm0
00000000000175d3	addq	$0x10, %rsp
00000000000175d7	popq	%r15
00000000000175d9	popq	%r14
00000000000175db	popq	%r13
00000000000175dd	popq	%r12
00000000000175df	popq	%r11
00000000000175e1	popq	%r10
00000000000175e3	popq	%r9
00000000000175e5	popq	%r8
00000000000175e7	popq	%rcx
00000000000175e8	popq	%rdx
00000000000175e9	popq	%rsi
00000000000175ea	popq	%rdi
00000000000175eb	popq	%rbx
00000000000175ec	popq	%rbp
00000000000175ed	jmpq	*%rax
__ZN7cocos2d12CCDictionary7allKeysEv:
00000000000175ef	pushq	%rbp
00000000000175f0	movq	%rsp, %rbp
00000000000175f3	pushq	%rbx
00000000000175f4	pushq	%rdi
00000000000175f5	pushq	%rsi
00000000000175f6	pushq	%rdx
00000000000175f7	pushq	%rcx
00000000000175f8	pushq	%r8
00000000000175fa	pushq	%r9
00000000000175fc	pushq	%r10
00000000000175fe	pushq	%r11
0000000000017600	pushq	%r12
0000000000017602	pushq	%r13
0000000000017604	pushq	%r14
0000000000017606	pushq	%r15
0000000000017608	subq	$0x10, %rsp
000000000001760c	movss	%xmm0, (%rsp)
0000000000017611	subq	$0x10, %rsp
0000000000017615	movss	%xmm1, (%rsp)
000000000001761a	pushq	%rsi
000000000001761b	pushq	%rdi
000000000001761c	callq	__Z7getBasev ## getBase()
0000000000017621	addq	$0x190450, %rax
0000000000017627	popq	%rdi
0000000000017628	popq	%rsi
0000000000017629	movss	(%rsp), %xmm1
000000000001762e	addq	$0x10, %rsp
0000000000017632	movss	(%rsp), %xmm0
0000000000017637	addq	$0x10, %rsp
000000000001763b	popq	%r15
000000000001763d	popq	%r14
000000000001763f	popq	%r13
0000000000017641	popq	%r12
0000000000017643	popq	%r11
0000000000017645	popq	%r10
0000000000017647	popq	%r9
0000000000017649	popq	%r8
000000000001764b	popq	%rcx
000000000001764c	popq	%rdx
000000000001764d	popq	%rsi
000000000001764e	popq	%rdi
000000000001764f	popq	%rbx
0000000000017650	popq	%rbp
0000000000017651	jmpq	*%rax
__ZN7cocos2d12CCLayerColor11updateColorEv:
0000000000017653	pushq	%rbp
0000000000017654	movq	%rsp, %rbp
0000000000017657	pushq	%rbx
0000000000017658	pushq	%rdi
0000000000017659	pushq	%rsi
000000000001765a	pushq	%rdx
000000000001765b	pushq	%rcx
000000000001765c	pushq	%r8
000000000001765e	pushq	%r9
0000000000017660	pushq	%r10
0000000000017662	pushq	%r11
0000000000017664	pushq	%r12
0000000000017666	pushq	%r13
0000000000017668	pushq	%r14
000000000001766a	pushq	%r15
000000000001766c	subq	$0x10, %rsp
0000000000017670	movss	%xmm0, (%rsp)
0000000000017675	subq	$0x10, %rsp
0000000000017679	movss	%xmm1, (%rsp)
000000000001767e	pushq	%rsi
000000000001767f	pushq	%rdi
0000000000017680	callq	__Z7getBasev ## getBase()
0000000000017685	addq	$0x274ae0, %rax
000000000001768b	popq	%rdi
000000000001768c	popq	%rsi
000000000001768d	movss	(%rsp), %xmm1
0000000000017692	addq	$0x10, %rsp
0000000000017696	movss	(%rsp), %xmm0
000000000001769b	addq	$0x10, %rsp
000000000001769f	popq	%r15
00000000000176a1	popq	%r14
00000000000176a3	popq	%r13
00000000000176a5	popq	%r12
00000000000176a7	popq	%r11
00000000000176a9	popq	%r10
00000000000176ab	popq	%r9
00000000000176ad	popq	%r8
00000000000176af	popq	%rcx
00000000000176b0	popq	%rdx
00000000000176b1	popq	%rsi
00000000000176b2	popq	%rdi
00000000000176b3	popq	%rbx
00000000000176b4	popq	%rbp
00000000000176b5	jmpq	*%rax
__ZN7cocos2d12CCLayerColor12getBlendFuncEv:
00000000000176b7	pushq	%rbp
00000000000176b8	movq	%rsp, %rbp
00000000000176bb	pushq	%rbx
00000000000176bc	pushq	%rdi
00000000000176bd	pushq	%rsi
00000000000176be	pushq	%rdx
00000000000176bf	pushq	%rcx
00000000000176c0	pushq	%r8
00000000000176c2	pushq	%r9
00000000000176c4	pushq	%r10
00000000000176c6	pushq	%r11
00000000000176c8	pushq	%r12
00000000000176ca	pushq	%r13
00000000000176cc	pushq	%r14
00000000000176ce	pushq	%r15
00000000000176d0	subq	$0x10, %rsp
00000000000176d4	movss	%xmm0, (%rsp)
00000000000176d9	subq	$0x10, %rsp
00000000000176dd	movss	%xmm1, (%rsp)
00000000000176e2	pushq	%rsi
00000000000176e3	pushq	%rdi
00000000000176e4	callq	__Z7getBasev ## getBase()
00000000000176e9	addq	$0x274480, %rax
00000000000176ef	popq	%rdi
00000000000176f0	popq	%rsi
00000000000176f1	movss	(%rsp), %xmm1
00000000000176f6	addq	$0x10, %rsp
00000000000176fa	movss	(%rsp), %xmm0
00000000000176ff	addq	$0x10, %rsp
0000000000017703	popq	%r15
0000000000017705	popq	%r14
0000000000017707	popq	%r13
0000000000017709	popq	%r12
000000000001770b	popq	%r11
000000000001770d	popq	%r10
000000000001770f	popq	%r9
0000000000017711	popq	%r8
0000000000017713	popq	%rcx
0000000000017714	popq	%rdx
0000000000017715	popq	%rsi
0000000000017716	popq	%rdi
0000000000017717	popq	%rbx
0000000000017718	popq	%rbp
0000000000017719	jmpq	*%rax
__ZN7cocos2d12CCLayerColor6createERKNS_10_ccColor4BEff:
000000000001771b	pushq	%rbp
000000000001771c	movq	%rsp, %rbp
000000000001771f	pushq	%rbx
0000000000017720	pushq	%rdi
0000000000017721	pushq	%rsi
0000000000017722	pushq	%rdx
0000000000017723	pushq	%rcx
0000000000017724	pushq	%r8
0000000000017726	pushq	%r9
0000000000017728	pushq	%r10
000000000001772a	pushq	%r11
000000000001772c	pushq	%r12
000000000001772e	pushq	%r13
0000000000017730	pushq	%r14
0000000000017732	pushq	%r15
0000000000017734	subq	$0x10, %rsp
0000000000017738	movss	%xmm0, (%rsp)
000000000001773d	subq	$0x10, %rsp
0000000000017741	movss	%xmm1, (%rsp)
0000000000017746	pushq	%rsi
0000000000017747	pushq	%rdi
0000000000017748	callq	__Z7getBasev ## getBase()
000000000001774d	addq	$0x2745e0, %rax
0000000000017753	popq	%rdi
0000000000017754	popq	%rsi
0000000000017755	movss	(%rsp), %xmm1
000000000001775a	addq	$0x10, %rsp
000000000001775e	movss	(%rsp), %xmm0
0000000000017763	addq	$0x10, %rsp
0000000000017767	popq	%r15
0000000000017769	popq	%r14
000000000001776b	popq	%r13
000000000001776d	popq	%r12
000000000001776f	popq	%r11
0000000000017771	popq	%r10
0000000000017773	popq	%r9
0000000000017775	popq	%r8
0000000000017777	popq	%rcx
0000000000017778	popq	%rdx
0000000000017779	popq	%rsi
000000000001777a	popq	%rdi
000000000001777b	popq	%rbx
000000000001777c	popq	%rbp
000000000001777d	jmpq	*%rax
__ZN7cocos2d12CCLayerColor12setBlendFuncENS_12_ccBlendFuncE:
000000000001777f	pushq	%rbp
0000000000017780	movq	%rsp, %rbp
0000000000017783	pushq	%rbx
0000000000017784	pushq	%rdi
0000000000017785	pushq	%rsi
0000000000017786	pushq	%rdx
0000000000017787	pushq	%rcx
0000000000017788	pushq	%r8
000000000001778a	pushq	%r9
000000000001778c	pushq	%r10
000000000001778e	pushq	%r11
0000000000017790	pushq	%r12
0000000000017792	pushq	%r13
0000000000017794	pushq	%r14
0000000000017796	pushq	%r15
0000000000017798	subq	$0x10, %rsp
000000000001779c	movss	%xmm0, (%rsp)
00000000000177a1	subq	$0x10, %rsp
00000000000177a5	movss	%xmm1, (%rsp)
00000000000177aa	pushq	%rsi
00000000000177ab	pushq	%rdi
00000000000177ac	callq	__Z7getBasev ## getBase()
00000000000177b1	addq	$0x2744a0, %rax
00000000000177b7	popq	%rdi
00000000000177b8	popq	%rsi
00000000000177b9	movss	(%rsp), %xmm1
00000000000177be	addq	$0x10, %rsp
00000000000177c2	movss	(%rsp), %xmm0
00000000000177c7	addq	$0x10, %rsp
00000000000177cb	popq	%r15
00000000000177cd	popq	%r14
00000000000177cf	popq	%r13
00000000000177d1	popq	%r12
00000000000177d3	popq	%r11
00000000000177d5	popq	%r10
00000000000177d7	popq	%r9
00000000000177d9	popq	%r8
00000000000177db	popq	%rcx
00000000000177dc	popq	%rdx
00000000000177dd	popq	%rsi
00000000000177de	popq	%rdi
00000000000177df	popq	%rbx
00000000000177e0	popq	%rbp
00000000000177e1	jmpq	*%rax
__ZN7cocos2d12CCLayerColor10setOpacityEh:
00000000000177e3	pushq	%rbp
00000000000177e4	movq	%rsp, %rbp
00000000000177e7	pushq	%rbx
00000000000177e8	pushq	%rdi
00000000000177e9	pushq	%rsi
00000000000177ea	pushq	%rdx
00000000000177eb	pushq	%rcx
00000000000177ec	pushq	%r8
00000000000177ee	pushq	%r9
00000000000177f0	pushq	%r10
00000000000177f2	pushq	%r11
00000000000177f4	pushq	%r12
00000000000177f6	pushq	%r13
00000000000177f8	pushq	%r14
00000000000177fa	pushq	%r15
00000000000177fc	subq	$0x10, %rsp
0000000000017800	movss	%xmm0, (%rsp)
0000000000017805	subq	$0x10, %rsp
0000000000017809	movss	%xmm1, (%rsp)
000000000001780e	pushq	%rsi
000000000001780f	pushq	%rdi
0000000000017810	callq	__Z7getBasev ## getBase()
0000000000017815	addq	$0x274db0, %rax
000000000001781b	popq	%rdi
000000000001781c	popq	%rsi
000000000001781d	movss	(%rsp), %xmm1
0000000000017822	addq	$0x10, %rsp
0000000000017826	movss	(%rsp), %xmm0
000000000001782b	addq	$0x10, %rsp
000000000001782f	popq	%r15
0000000000017831	popq	%r14
0000000000017833	popq	%r13
0000000000017835	popq	%r12
0000000000017837	popq	%r11
0000000000017839	popq	%r10
000000000001783b	popq	%r9
000000000001783d	popq	%r8
000000000001783f	popq	%rcx
0000000000017840	popq	%rdx
0000000000017841	popq	%rsi
0000000000017842	popq	%rdi
0000000000017843	popq	%rbx
0000000000017844	popq	%rbp
0000000000017845	jmpq	*%rax
__ZN7cocos2d12CCLayerColor13initWithColorERKNS_10_ccColor4BE:
0000000000017847	pushq	%rbp
0000000000017848	movq	%rsp, %rbp
000000000001784b	pushq	%rbx
000000000001784c	pushq	%rdi
000000000001784d	pushq	%rsi
000000000001784e	pushq	%rdx
000000000001784f	pushq	%rcx
0000000000017850	pushq	%r8
0000000000017852	pushq	%r9
0000000000017854	pushq	%r10
0000000000017856	pushq	%r11
0000000000017858	pushq	%r12
000000000001785a	pushq	%r13
000000000001785c	pushq	%r14
000000000001785e	pushq	%r15
0000000000017860	subq	$0x10, %rsp
0000000000017864	movss	%xmm0, (%rsp)
0000000000017869	subq	$0x10, %rsp
000000000001786d	movss	%xmm1, (%rsp)
0000000000017872	pushq	%rsi
0000000000017873	pushq	%rdi
0000000000017874	callq	__Z7getBasev ## getBase()
0000000000017879	addq	$0x2749a0, %rax
000000000001787f	popq	%rdi
0000000000017880	popq	%rsi
0000000000017881	movss	(%rsp), %xmm1
0000000000017886	addq	$0x10, %rsp
000000000001788a	movss	(%rsp), %xmm0
000000000001788f	addq	$0x10, %rsp
0000000000017893	popq	%r15
0000000000017895	popq	%r14
0000000000017897	popq	%r13
0000000000017899	popq	%r12
000000000001789b	popq	%r11
000000000001789d	popq	%r10
000000000001789f	popq	%r9
00000000000178a1	popq	%r8
00000000000178a3	popq	%rcx
00000000000178a4	popq	%rdx
00000000000178a5	popq	%rsi
00000000000178a6	popq	%rdi
00000000000178a7	popq	%rbx
00000000000178a8	popq	%rbp
00000000000178a9	jmpq	*%rax
__ZN7cocos2d12CCLayerColor13initWithColorERKNS_10_ccColor4BEff:
00000000000178ab	pushq	%rbp
00000000000178ac	movq	%rsp, %rbp
00000000000178af	pushq	%rbx
00000000000178b0	pushq	%rdi
00000000000178b1	pushq	%rsi
00000000000178b2	pushq	%rdx
00000000000178b3	pushq	%rcx
00000000000178b4	pushq	%r8
00000000000178b6	pushq	%r9
00000000000178b8	pushq	%r10
00000000000178ba	pushq	%r11
00000000000178bc	pushq	%r12
00000000000178be	pushq	%r13
00000000000178c0	pushq	%r14
00000000000178c2	pushq	%r15
00000000000178c4	subq	$0x10, %rsp
00000000000178c8	movss	%xmm0, (%rsp)
00000000000178cd	subq	$0x10, %rsp
00000000000178d1	movss	%xmm1, (%rsp)
00000000000178d6	pushq	%rsi
00000000000178d7	pushq	%rdi
00000000000178d8	callq	__Z7getBasev ## getBase()
00000000000178dd	addq	$0x274850, %rax
00000000000178e3	popq	%rdi
00000000000178e4	popq	%rsi
00000000000178e5	movss	(%rsp), %xmm1
00000000000178ea	addq	$0x10, %rsp
00000000000178ee	movss	(%rsp), %xmm0
00000000000178f3	addq	$0x10, %rsp
00000000000178f7	popq	%r15
00000000000178f9	popq	%r14
00000000000178fb	popq	%r13
00000000000178fd	popq	%r12
00000000000178ff	popq	%r11
0000000000017901	popq	%r10
0000000000017903	popq	%r9
0000000000017905	popq	%r8
0000000000017907	popq	%rcx
0000000000017908	popq	%rdx
0000000000017909	popq	%rsi
000000000001790a	popq	%rdi
000000000001790b	popq	%rbx
000000000001790c	popq	%rbp
000000000001790d	jmpq	*%rax
__ZN7cocos2d12CCLayerColor14setContentSizeERKNS_6CCSizeE:
000000000001790f	pushq	%rbp
0000000000017910	movq	%rsp, %rbp
0000000000017913	pushq	%rbx
0000000000017914	pushq	%rdi
0000000000017915	pushq	%rsi
0000000000017916	pushq	%rdx
0000000000017917	pushq	%rcx
0000000000017918	pushq	%r8
000000000001791a	pushq	%r9
000000000001791c	pushq	%r10
000000000001791e	pushq	%r11
0000000000017920	pushq	%r12
0000000000017922	pushq	%r13
0000000000017924	pushq	%r14
0000000000017926	pushq	%r15
0000000000017928	subq	$0x10, %rsp
000000000001792c	movss	%xmm0, (%rsp)
0000000000017931	subq	$0x10, %rsp
0000000000017935	movss	%xmm1, (%rsp)
000000000001793a	pushq	%rsi
000000000001793b	pushq	%rdi
000000000001793c	callq	__Z7getBasev ## getBase()
0000000000017941	addq	$0x2749f0, %rax
0000000000017947	popq	%rdi
0000000000017948	popq	%rsi
0000000000017949	movss	(%rsp), %xmm1
000000000001794e	addq	$0x10, %rsp
0000000000017952	movss	(%rsp), %xmm0
0000000000017957	addq	$0x10, %rsp
000000000001795b	popq	%r15
000000000001795d	popq	%r14
000000000001795f	popq	%r13
0000000000017961	popq	%r12
0000000000017963	popq	%r11
0000000000017965	popq	%r10
0000000000017967	popq	%r9
0000000000017969	popq	%r8
000000000001796b	popq	%rcx
000000000001796c	popq	%rdx
000000000001796d	popq	%rsi
000000000001796e	popq	%rdi
000000000001796f	popq	%rbx
0000000000017970	popq	%rbp
0000000000017971	jmpq	*%rax
__ZN7cocos2d12CCLayerColor4drawEv:
0000000000017973	pushq	%rbp
0000000000017974	movq	%rsp, %rbp
0000000000017977	pushq	%rbx
0000000000017978	pushq	%rdi
0000000000017979	pushq	%rsi
000000000001797a	pushq	%rdx
000000000001797b	pushq	%rcx
000000000001797c	pushq	%r8
000000000001797e	pushq	%r9
0000000000017980	pushq	%r10
0000000000017982	pushq	%r11
0000000000017984	pushq	%r12
0000000000017986	pushq	%r13
0000000000017988	pushq	%r14
000000000001798a	pushq	%r15
000000000001798c	subq	$0x10, %rsp
0000000000017990	movss	%xmm0, (%rsp)
0000000000017995	subq	$0x10, %rsp
0000000000017999	movss	%xmm1, (%rsp)
000000000001799e	pushq	%rsi
000000000001799f	pushq	%rdi
00000000000179a0	callq	__Z7getBasev ## getBase()
00000000000179a5	addq	$0x123840, %rax
00000000000179ab	popq	%rdi
00000000000179ac	popq	%rsi
00000000000179ad	movss	(%rsp), %xmm1
00000000000179b2	addq	$0x10, %rsp
00000000000179b6	movss	(%rsp), %xmm0
00000000000179bb	addq	$0x10, %rsp
00000000000179bf	popq	%r15
00000000000179c1	popq	%r14
00000000000179c3	popq	%r13
00000000000179c5	popq	%r12
00000000000179c7	popq	%r11
00000000000179c9	popq	%r10
00000000000179cb	popq	%r9
00000000000179cd	popq	%r8
00000000000179cf	popq	%rcx
00000000000179d0	popq	%rdx
00000000000179d1	popq	%rsi
00000000000179d2	popq	%rdi
00000000000179d3	popq	%rbx
00000000000179d4	popq	%rbp
00000000000179d5	jmpq	*%rax
__ZN7cocos2d12CCLayerColor4initEv:
00000000000179d7	pushq	%rbp
00000000000179d8	movq	%rsp, %rbp
00000000000179db	pushq	%rbx
00000000000179dc	pushq	%rdi
00000000000179dd	pushq	%rsi
00000000000179de	pushq	%rdx
00000000000179df	pushq	%rcx
00000000000179e0	pushq	%r8
00000000000179e2	pushq	%r9
00000000000179e4	pushq	%r10
00000000000179e6	pushq	%r11
00000000000179e8	pushq	%r12
00000000000179ea	pushq	%r13
00000000000179ec	pushq	%r14
00000000000179ee	pushq	%r15
00000000000179f0	subq	$0x10, %rsp
00000000000179f4	movss	%xmm0, (%rsp)
00000000000179f9	subq	$0x10, %rsp
00000000000179fd	movss	%xmm1, (%rsp)
0000000000017a02	pushq	%rsi
0000000000017a03	pushq	%rdi
0000000000017a04	callq	__Z7getBasev ## getBase()
0000000000017a09	addq	$0x274800, %rax
0000000000017a0f	popq	%rdi
0000000000017a10	popq	%rsi
0000000000017a11	movss	(%rsp), %xmm1
0000000000017a16	addq	$0x10, %rsp
0000000000017a1a	movss	(%rsp), %xmm0
0000000000017a1f	addq	$0x10, %rsp
0000000000017a23	popq	%r15
0000000000017a25	popq	%r14
0000000000017a27	popq	%r13
0000000000017a29	popq	%r12
0000000000017a2b	popq	%r11
0000000000017a2d	popq	%r10
0000000000017a2f	popq	%r9
0000000000017a31	popq	%r8
0000000000017a33	popq	%rcx
0000000000017a34	popq	%rdx
0000000000017a35	popq	%rsi
0000000000017a36	popq	%rdi
0000000000017a37	popq	%rbx
0000000000017a38	popq	%rbp
0000000000017a39	jmpq	*%rax
__ZN7cocos2d12CCLayerColor8setColorERKNS_10_ccColor3BE:
0000000000017a3b	pushq	%rbp
0000000000017a3c	movq	%rsp, %rbp
0000000000017a3f	pushq	%rbx
0000000000017a40	pushq	%rdi
0000000000017a41	pushq	%rsi
0000000000017a42	pushq	%rdx
0000000000017a43	pushq	%rcx
0000000000017a44	pushq	%r8
0000000000017a46	pushq	%r9
0000000000017a48	pushq	%r10
0000000000017a4a	pushq	%r11
0000000000017a4c	pushq	%r12
0000000000017a4e	pushq	%r13
0000000000017a50	pushq	%r14
0000000000017a52	pushq	%r15
0000000000017a54	subq	$0x10, %rsp
0000000000017a58	movss	%xmm0, (%rsp)
0000000000017a5d	subq	$0x10, %rsp
0000000000017a61	movss	%xmm1, (%rsp)
0000000000017a66	pushq	%rsi
0000000000017a67	pushq	%rdi
0000000000017a68	callq	__Z7getBasev ## getBase()
0000000000017a6d	addq	$0x274c20, %rax
0000000000017a73	popq	%rdi
0000000000017a74	popq	%rsi
0000000000017a75	movss	(%rsp), %xmm1
0000000000017a7a	addq	$0x10, %rsp
0000000000017a7e	movss	(%rsp), %xmm0
0000000000017a83	addq	$0x10, %rsp
0000000000017a87	popq	%r15
0000000000017a89	popq	%r14
0000000000017a8b	popq	%r13
0000000000017a8d	popq	%r12
0000000000017a8f	popq	%r11
0000000000017a91	popq	%r10
0000000000017a93	popq	%r9
0000000000017a95	popq	%r8
0000000000017a97	popq	%rcx
0000000000017a98	popq	%rdx
0000000000017a99	popq	%rsi
0000000000017a9a	popq	%rdi
0000000000017a9b	popq	%rbx
0000000000017a9c	popq	%rbp
0000000000017a9d	jmpq	*%rax
__ZN7cocos2d12CCLayerColorD0Ev:
0000000000017a9f	pushq	%rbp
0000000000017aa0	movq	%rsp, %rbp
0000000000017aa3	pushq	%rbx
0000000000017aa4	pushq	%rdi
0000000000017aa5	pushq	%rsi
0000000000017aa6	pushq	%rdx
0000000000017aa7	pushq	%rcx
0000000000017aa8	pushq	%r8
0000000000017aaa	pushq	%r9
0000000000017aac	pushq	%r10
0000000000017aae	pushq	%r11
0000000000017ab0	pushq	%r12
0000000000017ab2	pushq	%r13
0000000000017ab4	pushq	%r14
0000000000017ab6	pushq	%r15
0000000000017ab8	subq	$0x10, %rsp
0000000000017abc	movss	%xmm0, (%rsp)
0000000000017ac1	subq	$0x10, %rsp
0000000000017ac5	movss	%xmm1, (%rsp)
0000000000017aca	pushq	%rsi
0000000000017acb	pushq	%rdi
0000000000017acc	callq	__Z7getBasev ## getBase()
0000000000017ad1	addq	$0x272930, %rax
0000000000017ad7	popq	%rdi
0000000000017ad8	popq	%rsi
0000000000017ad9	movss	(%rsp), %xmm1
0000000000017ade	addq	$0x10, %rsp
0000000000017ae2	movss	(%rsp), %xmm0
0000000000017ae7	addq	$0x10, %rsp
0000000000017aeb	popq	%r15
0000000000017aed	popq	%r14
0000000000017aef	popq	%r13
0000000000017af1	popq	%r12
0000000000017af3	popq	%r11
0000000000017af5	popq	%r10
0000000000017af7	popq	%r9
0000000000017af9	popq	%r8
0000000000017afb	popq	%rcx
0000000000017afc	popq	%rdx
0000000000017afd	popq	%rsi
0000000000017afe	popq	%rdi
0000000000017aff	popq	%rbx
0000000000017b00	popq	%rbp
0000000000017b01	jmpq	*%rax
__ZN7cocos2d12CCLayerColorD1Ev:
0000000000017b03	pushq	%rbp
0000000000017b04	movq	%rsp, %rbp
0000000000017b07	pushq	%rbx
0000000000017b08	pushq	%rdi
0000000000017b09	pushq	%rsi
0000000000017b0a	pushq	%rdx
0000000000017b0b	pushq	%rcx
0000000000017b0c	pushq	%r8
0000000000017b0e	pushq	%r9
0000000000017b10	pushq	%r10
0000000000017b12	pushq	%r11
0000000000017b14	pushq	%r12
0000000000017b16	pushq	%r13
0000000000017b18	pushq	%r14
0000000000017b1a	pushq	%r15
0000000000017b1c	subq	$0x10, %rsp
0000000000017b20	movss	%xmm0, (%rsp)
0000000000017b25	subq	$0x10, %rsp
0000000000017b29	movss	%xmm1, (%rsp)
0000000000017b2e	pushq	%rsi
0000000000017b2f	pushq	%rdi
0000000000017b30	callq	__Z7getBasev ## getBase()
0000000000017b35	addq	$0x272900, %rax
0000000000017b3b	popq	%rdi
0000000000017b3c	popq	%rsi
0000000000017b3d	movss	(%rsp), %xmm1
0000000000017b42	addq	$0x10, %rsp
0000000000017b46	movss	(%rsp), %xmm0
0000000000017b4b	addq	$0x10, %rsp
0000000000017b4f	popq	%r15
0000000000017b51	popq	%r14
0000000000017b53	popq	%r13
0000000000017b55	popq	%r12
0000000000017b57	popq	%r11
0000000000017b59	popq	%r10
0000000000017b5b	popq	%r9
0000000000017b5d	popq	%r8
0000000000017b5f	popq	%rcx
0000000000017b60	popq	%rdx
0000000000017b61	popq	%rsi
0000000000017b62	popq	%rdi
0000000000017b63	popq	%rbx
0000000000017b64	popq	%rbp
0000000000017b65	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont6createEPKcS2_:
0000000000017b67	pushq	%rbp
0000000000017b68	movq	%rsp, %rbp
0000000000017b6b	pushq	%rbx
0000000000017b6c	pushq	%rdi
0000000000017b6d	pushq	%rsi
0000000000017b6e	pushq	%rdx
0000000000017b6f	pushq	%rcx
0000000000017b70	pushq	%r8
0000000000017b72	pushq	%r9
0000000000017b74	pushq	%r10
0000000000017b76	pushq	%r11
0000000000017b78	pushq	%r12
0000000000017b7a	pushq	%r13
0000000000017b7c	pushq	%r14
0000000000017b7e	pushq	%r15
0000000000017b80	subq	$0x10, %rsp
0000000000017b84	movss	%xmm0, (%rsp)
0000000000017b89	subq	$0x10, %rsp
0000000000017b8d	movss	%xmm1, (%rsp)
0000000000017b92	pushq	%rsi
0000000000017b93	pushq	%rdi
0000000000017b94	callq	__Z7getBasev ## getBase()
0000000000017b99	addq	$0x347660, %rax
0000000000017b9f	popq	%rdi
0000000000017ba0	popq	%rsi
0000000000017ba1	movss	(%rsp), %xmm1
0000000000017ba6	addq	$0x10, %rsp
0000000000017baa	movss	(%rsp), %xmm0
0000000000017baf	addq	$0x10, %rsp
0000000000017bb3	popq	%r15
0000000000017bb5	popq	%r14
0000000000017bb7	popq	%r13
0000000000017bb9	popq	%r12
0000000000017bbb	popq	%r11
0000000000017bbd	popq	%r10
0000000000017bbf	popq	%r9
0000000000017bc1	popq	%r8
0000000000017bc3	popq	%rcx
0000000000017bc4	popq	%rdx
0000000000017bc5	popq	%rsi
0000000000017bc6	popq	%rdi
0000000000017bc7	popq	%rbx
0000000000017bc8	popq	%rbp
0000000000017bc9	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont8setScaleEf:
0000000000017bcb	pushq	%rbp
0000000000017bcc	movq	%rsp, %rbp
0000000000017bcf	pushq	%rbx
0000000000017bd0	pushq	%rdi
0000000000017bd1	pushq	%rsi
0000000000017bd2	pushq	%rdx
0000000000017bd3	pushq	%rcx
0000000000017bd4	pushq	%r8
0000000000017bd6	pushq	%r9
0000000000017bd8	pushq	%r10
0000000000017bda	pushq	%r11
0000000000017bdc	pushq	%r12
0000000000017bde	pushq	%r13
0000000000017be0	pushq	%r14
0000000000017be2	pushq	%r15
0000000000017be4	subq	$0x10, %rsp
0000000000017be8	movss	%xmm0, (%rsp)
0000000000017bed	subq	$0x10, %rsp
0000000000017bf1	movss	%xmm1, (%rsp)
0000000000017bf6	pushq	%rsi
0000000000017bf7	pushq	%rdi
0000000000017bf8	callq	__Z7getBasev ## getBase()
0000000000017bfd	addq	$0x34a5d0, %rax
0000000000017c03	popq	%rdi
0000000000017c04	popq	%rsi
0000000000017c05	movss	(%rsp), %xmm1
0000000000017c0a	addq	$0x10, %rsp
0000000000017c0e	movss	(%rsp), %xmm0
0000000000017c13	addq	$0x10, %rsp
0000000000017c17	popq	%r15
0000000000017c19	popq	%r14
0000000000017c1b	popq	%r13
0000000000017c1d	popq	%r12
0000000000017c1f	popq	%r11
0000000000017c21	popq	%r10
0000000000017c23	popq	%r9
0000000000017c25	popq	%r8
0000000000017c27	popq	%rcx
0000000000017c28	popq	%rdx
0000000000017c29	popq	%rsi
0000000000017c2a	popq	%rdi
0000000000017c2b	popq	%rbx
0000000000017c2c	popq	%rbp
0000000000017c2d	jmpq	*%rax
__ZN7cocos2d13CCLabelBMFont9setStringEPKcb:
0000000000017c2f	pushq	%rbp
0000000000017c30	movq	%rsp, %rbp
0000000000017c33	pushq	%rbx
0000000000017c34	pushq	%rdi
0000000000017c35	pushq	%rsi
0000000000017c36	pushq	%rdx
0000000000017c37	pushq	%rcx
0000000000017c38	pushq	%r8
0000000000017c3a	pushq	%r9
0000000000017c3c	pushq	%r10
0000000000017c3e	pushq	%r11
0000000000017c40	pushq	%r12
0000000000017c42	pushq	%r13
0000000000017c44	pushq	%r14
0000000000017c46	pushq	%r15
0000000000017c48	subq	$0x10, %rsp
0000000000017c4c	movss	%xmm0, (%rsp)
0000000000017c51	subq	$0x10, %rsp
0000000000017c55	movss	%xmm1, (%rsp)
0000000000017c5a	pushq	%rsi
0000000000017c5b	pushq	%rdi
0000000000017c5c	callq	__Z7getBasev ## getBase()
0000000000017c61	addq	$0x3489e0, %rax
0000000000017c67	popq	%rdi
0000000000017c68	popq	%rsi
0000000000017c69	movss	(%rsp), %xmm1
0000000000017c6e	addq	$0x10, %rsp
0000000000017c72	movss	(%rsp), %xmm0
0000000000017c77	addq	$0x10, %rsp
0000000000017c7b	popq	%r15
0000000000017c7d	popq	%r14
0000000000017c7f	popq	%r13
0000000000017c81	popq	%r12
0000000000017c83	popq	%r11
0000000000017c85	popq	%r10
0000000000017c87	popq	%r9
0000000000017c89	popq	%r8
0000000000017c8b	popq	%rcx
0000000000017c8c	popq	%rdx
0000000000017c8d	popq	%rsi
0000000000017c8e	popq	%rdi
0000000000017c8f	popq	%rbx
0000000000017c90	popq	%rbp
0000000000017c91	jmpq	*%rax
__ZN7cocos2d16CCTransitionFade6createEfPNS_7CCSceneE:
0000000000017c93	pushq	%rbp
0000000000017c94	movq	%rsp, %rbp
0000000000017c97	pushq	%rbx
0000000000017c98	pushq	%rdi
0000000000017c99	pushq	%rsi
0000000000017c9a	pushq	%rdx
0000000000017c9b	pushq	%rcx
0000000000017c9c	pushq	%r8
0000000000017c9e	pushq	%r9
0000000000017ca0	pushq	%r10
0000000000017ca2	pushq	%r11
0000000000017ca4	pushq	%r12
0000000000017ca6	pushq	%r13
0000000000017ca8	pushq	%r14
0000000000017caa	pushq	%r15
0000000000017cac	subq	$0x10, %rsp
0000000000017cb0	movss	%xmm0, (%rsp)
0000000000017cb5	subq	$0x10, %rsp
0000000000017cb9	movss	%xmm1, (%rsp)
0000000000017cbe	pushq	%rsi
0000000000017cbf	pushq	%rdi
0000000000017cc0	callq	__Z7getBasev ## getBase()
0000000000017cc5	addq	$0x8ea30, %rax
0000000000017ccb	popq	%rdi
0000000000017ccc	popq	%rsi
0000000000017ccd	movss	(%rsp), %xmm1
0000000000017cd2	addq	$0x10, %rsp
0000000000017cd6	movss	(%rsp), %xmm0
0000000000017cdb	addq	$0x10, %rsp
0000000000017cdf	popq	%r15
0000000000017ce1	popq	%r14
0000000000017ce3	popq	%r13
0000000000017ce5	popq	%r12
0000000000017ce7	popq	%r11
0000000000017ce9	popq	%r10
0000000000017ceb	popq	%r9
0000000000017ced	popq	%r8
0000000000017cef	popq	%rcx
0000000000017cf0	popq	%rdx
0000000000017cf1	popq	%rsi
0000000000017cf2	popq	%rdi
0000000000017cf3	popq	%rbx
0000000000017cf4	popq	%rbp
0000000000017cf5	jmpq	*%rax
__ZN7cocos2d17CCTouchDispatcher18incrementForcePrioEi:
0000000000017cf7	pushq	%rbp
0000000000017cf8	movq	%rsp, %rbp
0000000000017cfb	pushq	%rbx
0000000000017cfc	pushq	%rdi
0000000000017cfd	pushq	%rsi
0000000000017cfe	pushq	%rdx
0000000000017cff	pushq	%rcx
0000000000017d00	pushq	%r8
0000000000017d02	pushq	%r9
0000000000017d04	pushq	%r10
0000000000017d06	pushq	%r11
0000000000017d08	pushq	%r12
0000000000017d0a	pushq	%r13
0000000000017d0c	pushq	%r14
0000000000017d0e	pushq	%r15
0000000000017d10	subq	$0x10, %rsp
0000000000017d14	movss	%xmm0, (%rsp)
0000000000017d19	subq	$0x10, %rsp
0000000000017d1d	movss	%xmm1, (%rsp)
0000000000017d22	pushq	%rsi
0000000000017d23	pushq	%rdi
0000000000017d24	callq	__Z7getBasev ## getBase()
0000000000017d29	addq	$0x280f60, %rax
0000000000017d2f	popq	%rdi
0000000000017d30	popq	%rsi
0000000000017d31	movss	(%rsp), %xmm1
0000000000017d36	addq	$0x10, %rsp
0000000000017d3a	movss	(%rsp), %xmm0
0000000000017d3f	addq	$0x10, %rsp
0000000000017d43	popq	%r15
0000000000017d45	popq	%r14
0000000000017d47	popq	%r13
0000000000017d49	popq	%r12
0000000000017d4b	popq	%r11
0000000000017d4d	popq	%r10
0000000000017d4f	popq	%r9
0000000000017d51	popq	%r8
0000000000017d53	popq	%rcx
0000000000017d54	popq	%rdx
0000000000017d55	popq	%rsi
0000000000017d56	popq	%rdi
0000000000017d57	popq	%rbx
0000000000017d58	popq	%rbp
0000000000017d59	jmpq	*%rax
__ZN7cocos2d6CCMenu6createEv:
0000000000017d5b	pushq	%rbp
0000000000017d5c	movq	%rsp, %rbp
0000000000017d5f	pushq	%rbx
0000000000017d60	pushq	%rdi
0000000000017d61	pushq	%rsi
0000000000017d62	pushq	%rdx
0000000000017d63	pushq	%rcx
0000000000017d64	pushq	%r8
0000000000017d66	pushq	%r9
0000000000017d68	pushq	%r10
0000000000017d6a	pushq	%r11
0000000000017d6c	pushq	%r12
0000000000017d6e	pushq	%r13
0000000000017d70	pushq	%r14
0000000000017d72	pushq	%r15
0000000000017d74	subq	$0x10, %rsp
0000000000017d78	movss	%xmm0, (%rsp)
0000000000017d7d	subq	$0x10, %rsp
0000000000017d81	movss	%xmm1, (%rsp)
0000000000017d86	pushq	%rsi
0000000000017d87	pushq	%rdi
0000000000017d88	callq	__Z7getBasev ## getBase()
0000000000017d8d	addq	$0x438720, %rax
0000000000017d93	popq	%rdi
0000000000017d94	popq	%rsi
0000000000017d95	movss	(%rsp), %xmm1
0000000000017d9a	addq	$0x10, %rsp
0000000000017d9e	movss	(%rsp), %xmm0
0000000000017da3	addq	$0x10, %rsp
0000000000017da7	popq	%r15
0000000000017da9	popq	%r14
0000000000017dab	popq	%r13
0000000000017dad	popq	%r12
0000000000017daf	popq	%r11
0000000000017db1	popq	%r10
0000000000017db3	popq	%r9
0000000000017db5	popq	%r8
0000000000017db7	popq	%rcx
0000000000017db8	popq	%rdx
0000000000017db9	popq	%rsi
0000000000017dba	popq	%rdi
0000000000017dbb	popq	%rbx
0000000000017dbc	popq	%rbp
0000000000017dbd	jmpq	*%rax
__ZN7cocos2d6CCNode10_setZOrderEi:
0000000000017dbf	pushq	%rbp
0000000000017dc0	movq	%rsp, %rbp
0000000000017dc3	pushq	%rbx
0000000000017dc4	pushq	%rdi
0000000000017dc5	pushq	%rsi
0000000000017dc6	pushq	%rdx
0000000000017dc7	pushq	%rcx
0000000000017dc8	pushq	%r8
0000000000017dca	pushq	%r9
0000000000017dcc	pushq	%r10
0000000000017dce	pushq	%r11
0000000000017dd0	pushq	%r12
0000000000017dd2	pushq	%r13
0000000000017dd4	pushq	%r14
0000000000017dd6	pushq	%r15
0000000000017dd8	subq	$0x10, %rsp
0000000000017ddc	movss	%xmm0, (%rsp)
0000000000017de1	subq	$0x10, %rsp
0000000000017de5	movss	%xmm1, (%rsp)
0000000000017dea	pushq	%rsi
0000000000017deb	pushq	%rdi
0000000000017dec	callq	__Z7getBasev ## getBase()
0000000000017df1	addq	$0x122990, %rax
0000000000017df7	popq	%rdi
0000000000017df8	popq	%rsi
0000000000017df9	movss	(%rsp), %xmm1
0000000000017dfe	addq	$0x10, %rsp
0000000000017e02	movss	(%rsp), %xmm0
0000000000017e07	addq	$0x10, %rsp
0000000000017e0b	popq	%r15
0000000000017e0d	popq	%r14
0000000000017e0f	popq	%r13
0000000000017e11	popq	%r12
0000000000017e13	popq	%r11
0000000000017e15	popq	%r10
0000000000017e17	popq	%r9
0000000000017e19	popq	%r8
0000000000017e1b	popq	%rcx
0000000000017e1c	popq	%rdx
0000000000017e1d	popq	%rsi
0000000000017e1e	popq	%rdi
0000000000017e1f	popq	%rbx
0000000000017e20	popq	%rbp
0000000000017e21	jmpq	*%rax
__ZN7cocos2d6CCNode10getVertexZEv:
0000000000017e23	pushq	%rbp
0000000000017e24	movq	%rsp, %rbp
0000000000017e27	pushq	%rbx
0000000000017e28	pushq	%rdi
0000000000017e29	pushq	%rsi
0000000000017e2a	pushq	%rdx
0000000000017e2b	pushq	%rcx
0000000000017e2c	pushq	%r8
0000000000017e2e	pushq	%r9
0000000000017e30	pushq	%r10
0000000000017e32	pushq	%r11
0000000000017e34	pushq	%r12
0000000000017e36	pushq	%r13
0000000000017e38	pushq	%r14
0000000000017e3a	pushq	%r15
0000000000017e3c	subq	$0x10, %rsp
0000000000017e40	movss	%xmm0, (%rsp)
0000000000017e45	subq	$0x10, %rsp
0000000000017e49	movss	%xmm1, (%rsp)
0000000000017e4e	pushq	%rsi
0000000000017e4f	pushq	%rdi
0000000000017e50	callq	__Z7getBasev ## getBase()
0000000000017e55	addq	$0x1229e0, %rax
0000000000017e5b	popq	%rdi
0000000000017e5c	popq	%rsi
0000000000017e5d	movss	(%rsp), %xmm1
0000000000017e62	addq	$0x10, %rsp
0000000000017e66	movss	(%rsp), %xmm0
0000000000017e6b	addq	$0x10, %rsp
0000000000017e6f	popq	%r15
0000000000017e71	popq	%r14
0000000000017e73	popq	%r13
0000000000017e75	popq	%r12
0000000000017e77	popq	%r11
0000000000017e79	popq	%r10
0000000000017e7b	popq	%r9
0000000000017e7d	popq	%r8
0000000000017e7f	popq	%rcx
0000000000017e80	popq	%rdx
0000000000017e81	popq	%rsi
0000000000017e82	popq	%rdi
0000000000017e83	popq	%rbx
0000000000017e84	popq	%rbp
0000000000017e85	jmpq	*%rax
__ZN7cocos2d6CCNode10setVertexZEf:
0000000000017e87	pushq	%rbp
0000000000017e88	movq	%rsp, %rbp
0000000000017e8b	pushq	%rbx
0000000000017e8c	pushq	%rdi
0000000000017e8d	pushq	%rsi
0000000000017e8e	pushq	%rdx
0000000000017e8f	pushq	%rcx
0000000000017e90	pushq	%r8
0000000000017e92	pushq	%r9
0000000000017e94	pushq	%r10
0000000000017e96	pushq	%r11
0000000000017e98	pushq	%r12
0000000000017e9a	pushq	%r13
0000000000017e9c	pushq	%r14
0000000000017e9e	pushq	%r15
0000000000017ea0	subq	$0x10, %rsp
0000000000017ea4	movss	%xmm0, (%rsp)
0000000000017ea9	subq	$0x10, %rsp
0000000000017ead	movss	%xmm1, (%rsp)
0000000000017eb2	pushq	%rsi
0000000000017eb3	pushq	%rdi
0000000000017eb4	callq	__Z7getBasev ## getBase()
0000000000017eb9	addq	$0x1229f0, %rax
0000000000017ebf	popq	%rdi
0000000000017ec0	popq	%rsi
0000000000017ec1	movss	(%rsp), %xmm1
0000000000017ec6	addq	$0x10, %rsp
0000000000017eca	movss	(%rsp), %xmm0
0000000000017ecf	addq	$0x10, %rsp
0000000000017ed3	popq	%r15
0000000000017ed5	popq	%r14
0000000000017ed7	popq	%r13
0000000000017ed9	popq	%r12
0000000000017edb	popq	%r11
0000000000017edd	popq	%r10
0000000000017edf	popq	%r9
0000000000017ee1	popq	%r8
0000000000017ee3	popq	%rcx
0000000000017ee4	popq	%rdx
0000000000017ee5	popq	%rsi
0000000000017ee6	popq	%rdi
0000000000017ee7	popq	%rbx
0000000000017ee8	popq	%rbp
0000000000017ee9	jmpq	*%rax
__ZN7cocos2d6CCNode10setVisibleEb:
0000000000017eeb	pushq	%rbp
0000000000017eec	movq	%rsp, %rbp
0000000000017eef	pushq	%rbx
0000000000017ef0	pushq	%rdi
0000000000017ef1	pushq	%rsi
0000000000017ef2	pushq	%rdx
0000000000017ef3	pushq	%rcx
0000000000017ef4	pushq	%r8
0000000000017ef6	pushq	%r9
0000000000017ef8	pushq	%r10
0000000000017efa	pushq	%r11
0000000000017efc	pushq	%r12
0000000000017efe	pushq	%r13
0000000000017f00	pushq	%r14
0000000000017f02	pushq	%r15
0000000000017f04	subq	$0x10, %rsp
0000000000017f08	movss	%xmm0, (%rsp)
0000000000017f0d	subq	$0x10, %rsp
0000000000017f11	movss	%xmm1, (%rsp)
0000000000017f16	pushq	%rsi
0000000000017f17	pushq	%rdi
0000000000017f18	callq	__Z7getBasev ## getBase()
0000000000017f1d	addq	$0x122d60, %rax
0000000000017f23	popq	%rdi
0000000000017f24	popq	%rsi
0000000000017f25	movss	(%rsp), %xmm1
0000000000017f2a	addq	$0x10, %rsp
0000000000017f2e	movss	(%rsp), %xmm0
0000000000017f33	addq	$0x10, %rsp
0000000000017f37	popq	%r15
0000000000017f39	popq	%r14
0000000000017f3b	popq	%r13
0000000000017f3d	popq	%r12
0000000000017f3f	popq	%r11
0000000000017f41	popq	%r10
0000000000017f43	popq	%r9
0000000000017f45	popq	%r8
0000000000017f47	popq	%rcx
0000000000017f48	popq	%rdx
0000000000017f49	popq	%rsi
0000000000017f4a	popq	%rdi
0000000000017f4b	popq	%rbx
0000000000017f4c	popq	%rbp
0000000000017f4d	jmpq	*%rax
__ZN7cocos2d6CCNode10unscheduleEMNS_8CCObjectEFvfE:
0000000000017f4f	pushq	%rbp
0000000000017f50	movq	%rsp, %rbp
0000000000017f53	pushq	%rbx
0000000000017f54	pushq	%rdi
0000000000017f55	pushq	%rsi
0000000000017f56	pushq	%rdx
0000000000017f57	pushq	%rcx
0000000000017f58	pushq	%r8
0000000000017f5a	pushq	%r9
0000000000017f5c	pushq	%r10
0000000000017f5e	pushq	%r11
0000000000017f60	pushq	%r12
0000000000017f62	pushq	%r13
0000000000017f64	pushq	%r14
0000000000017f66	pushq	%r15
0000000000017f68	subq	$0x10, %rsp
0000000000017f6c	movss	%xmm0, (%rsp)
0000000000017f71	subq	$0x10, %rsp
0000000000017f75	movss	%xmm1, (%rsp)
0000000000017f7a	pushq	%rsi
0000000000017f7b	pushq	%rdi
0000000000017f7c	callq	__Z7getBasev ## getBase()
0000000000017f81	addq	$0x124180, %rax
0000000000017f87	popq	%rdi
0000000000017f88	popq	%rsi
0000000000017f89	movss	(%rsp), %xmm1
0000000000017f8e	addq	$0x10, %rsp
0000000000017f92	movss	(%rsp), %xmm0
0000000000017f97	addq	$0x10, %rsp
0000000000017f9b	popq	%r15
0000000000017f9d	popq	%r14
0000000000017f9f	popq	%r13
0000000000017fa1	popq	%r12
0000000000017fa3	popq	%r11
0000000000017fa5	popq	%r10
0000000000017fa7	popq	%r9
0000000000017fa9	popq	%r8
0000000000017fab	popq	%rcx
0000000000017fac	popq	%rdx
0000000000017fad	popq	%rsi
0000000000017fae	popq	%rdi
0000000000017faf	popq	%rbx
0000000000017fb0	popq	%rbp
0000000000017fb1	jmpq	*%rax
__ZN7cocos2d6CCNode11getChildrenEv:
0000000000017fb3	pushq	%rbp
0000000000017fb4	movq	%rsp, %rbp
0000000000017fb7	pushq	%rbx
0000000000017fb8	pushq	%rdi
0000000000017fb9	pushq	%rsi
0000000000017fba	pushq	%rdx
0000000000017fbb	pushq	%rcx
0000000000017fbc	pushq	%r8
0000000000017fbe	pushq	%r9
0000000000017fc0	pushq	%r10
0000000000017fc2	pushq	%r11
0000000000017fc4	pushq	%r12
0000000000017fc6	pushq	%r13
0000000000017fc8	pushq	%r14
0000000000017fca	pushq	%r15
0000000000017fcc	subq	$0x10, %rsp
0000000000017fd0	movss	%xmm0, (%rsp)
0000000000017fd5	subq	$0x10, %rsp
0000000000017fd9	movss	%xmm1, (%rsp)
0000000000017fde	pushq	%rsi
0000000000017fdf	pushq	%rdi
0000000000017fe0	callq	__Z7getBasev ## getBase()
0000000000017fe5	addq	$0x122c80, %rax
0000000000017feb	popq	%rdi
0000000000017fec	popq	%rsi
0000000000017fed	movss	(%rsp), %xmm1
0000000000017ff2	addq	$0x10, %rsp
0000000000017ff6	movss	(%rsp), %xmm0
0000000000017ffb	addq	$0x10, %rsp
0000000000017fff	popq	%r15
0000000000018001	popq	%r14
0000000000018003	popq	%r13
0000000000018005	popq	%r12
0000000000018007	popq	%r11
0000000000018009	popq	%r10
000000000001800b	popq	%r9
000000000001800d	popq	%r8
000000000001800f	popq	%rcx
0000000000018010	popq	%rdx
0000000000018011	popq	%rsi
0000000000018012	popq	%rdi
0000000000018013	popq	%rbx
0000000000018014	popq	%rbp
0000000000018015	jmpq	*%rax
__ZN7cocos2d6CCNode11getPositionEPfS1_:
0000000000018017	pushq	%rbp
0000000000018018	movq	%rsp, %rbp
000000000001801b	pushq	%rbx
000000000001801c	pushq	%rdi
000000000001801d	pushq	%rsi
000000000001801e	pushq	%rdx
000000000001801f	pushq	%rcx
0000000000018020	pushq	%r8
0000000000018022	pushq	%r9
0000000000018024	pushq	%r10
0000000000018026	pushq	%r11
0000000000018028	pushq	%r12
000000000001802a	pushq	%r13
000000000001802c	pushq	%r14
000000000001802e	pushq	%r15
0000000000018030	subq	$0x10, %rsp
0000000000018034	movss	%xmm0, (%rsp)
0000000000018039	subq	$0x10, %rsp
000000000001803d	movss	%xmm1, (%rsp)
0000000000018042	pushq	%rsi
0000000000018043	pushq	%rdi
0000000000018044	callq	__Z7getBasev ## getBase()
0000000000018049	addq	$0x122b90, %rax
000000000001804f	popq	%rdi
0000000000018050	popq	%rsi
0000000000018051	movss	(%rsp), %xmm1
0000000000018056	addq	$0x10, %rsp
000000000001805a	movss	(%rsp), %xmm0
000000000001805f	addq	$0x10, %rsp
0000000000018063	popq	%r15
0000000000018065	popq	%r14
0000000000018067	popq	%r13
0000000000018069	popq	%r12
000000000001806b	popq	%r11
000000000001806d	popq	%r10
000000000001806f	popq	%r9
0000000000018071	popq	%r8
0000000000018073	popq	%rcx
0000000000018074	popq	%rdx
0000000000018075	popq	%rsi
0000000000018076	popq	%rdi
0000000000018077	popq	%rbx
0000000000018078	popq	%rbp
0000000000018079	jmpq	*%rax
__ZN7cocos2d6CCNode11getPositionEv:
000000000001807b	pushq	%rbp
000000000001807c	movq	%rsp, %rbp
000000000001807f	pushq	%rbx
0000000000018080	pushq	%rdi
0000000000018081	pushq	%rsi
0000000000018082	pushq	%rdx
0000000000018083	pushq	%rcx
0000000000018084	pushq	%r8
0000000000018086	pushq	%r9
0000000000018088	pushq	%r10
000000000001808a	pushq	%r11
000000000001808c	pushq	%r12
000000000001808e	pushq	%r13
0000000000018090	pushq	%r14
0000000000018092	pushq	%r15
0000000000018094	subq	$0x10, %rsp
0000000000018098	movss	%xmm0, (%rsp)
000000000001809d	subq	$0x10, %rsp
00000000000180a1	movss	%xmm1, (%rsp)
00000000000180a6	pushq	%rsi
00000000000180a7	pushq	%rdi
00000000000180a8	callq	__Z7getBasev ## getBase()
00000000000180ad	addq	$0x122b60, %rax
00000000000180b3	popq	%rdi
00000000000180b4	popq	%rsi
00000000000180b5	movss	(%rsp), %xmm1
00000000000180ba	addq	$0x10, %rsp
00000000000180be	movss	(%rsp), %xmm0
00000000000180c3	addq	$0x10, %rsp
00000000000180c7	popq	%r15
00000000000180c9	popq	%r14
00000000000180cb	popq	%r13
00000000000180cd	popq	%r12
00000000000180cf	popq	%r11
00000000000180d1	popq	%r10
00000000000180d3	popq	%r9
00000000000180d5	popq	%r8
00000000000180d7	popq	%rcx
00000000000180d8	popq	%rdx
00000000000180d9	popq	%rsi
00000000000180da	popq	%rdi
00000000000180db	popq	%rbx
00000000000180dc	popq	%rbp
00000000000180dd	jmpq	*%rax
__ZN7cocos2d6CCNode11getRotationEv:
00000000000180df	pushq	%rbp
00000000000180e0	movq	%rsp, %rbp
00000000000180e3	pushq	%rbx
00000000000180e4	pushq	%rdi
00000000000180e5	pushq	%rsi
00000000000180e6	pushq	%rdx
00000000000180e7	pushq	%rcx
00000000000180e8	pushq	%r8
00000000000180ea	pushq	%r9
00000000000180ec	pushq	%r10
00000000000180ee	pushq	%r11
00000000000180f0	pushq	%r12
00000000000180f2	pushq	%r13
00000000000180f4	pushq	%r14
00000000000180f6	pushq	%r15
00000000000180f8	subq	$0x10, %rsp
00000000000180fc	movss	%xmm0, (%rsp)
0000000000018101	subq	$0x10, %rsp
0000000000018105	movss	%xmm1, (%rsp)
000000000001810a	pushq	%rsi
000000000001810b	pushq	%rdi
000000000001810c	callq	__Z7getBasev ## getBase()
0000000000018111	addq	$0x122a00, %rax
0000000000018117	popq	%rdi
0000000000018118	popq	%rsi
0000000000018119	movss	(%rsp), %xmm1
000000000001811e	addq	$0x10, %rsp
0000000000018122	movss	(%rsp), %xmm0
0000000000018127	addq	$0x10, %rsp
000000000001812b	popq	%r15
000000000001812d	popq	%r14
000000000001812f	popq	%r13
0000000000018131	popq	%r12
0000000000018133	popq	%r11
0000000000018135	popq	%r10
0000000000018137	popq	%r9
0000000000018139	popq	%r8
000000000001813b	popq	%rcx
000000000001813c	popq	%rdx
000000000001813d	popq	%rsi
000000000001813e	popq	%rdi
000000000001813f	popq	%rbx
0000000000018140	popq	%rbp
0000000000018141	jmpq	*%rax
__ZN7cocos2d6CCNode11getUserDataEv:
0000000000018143	pushq	%rbp
0000000000018144	movq	%rsp, %rbp
0000000000018147	pushq	%rbx
0000000000018148	pushq	%rdi
0000000000018149	pushq	%rsi
000000000001814a	pushq	%rdx
000000000001814b	pushq	%rcx
000000000001814c	pushq	%r8
000000000001814e	pushq	%r9
0000000000018150	pushq	%r10
0000000000018152	pushq	%r11
0000000000018154	pushq	%r12
0000000000018156	pushq	%r13
0000000000018158	pushq	%r14
000000000001815a	pushq	%r15
000000000001815c	subq	$0x10, %rsp
0000000000018160	movss	%xmm0, (%rsp)
0000000000018165	subq	$0x10, %rsp
0000000000018169	movss	%xmm1, (%rsp)
000000000001816e	pushq	%rsi
000000000001816f	pushq	%rdi
0000000000018170	callq	__Z7getBasev ## getBase()
0000000000018175	addq	$0x122f30, %rax
000000000001817b	popq	%rdi
000000000001817c	popq	%rsi
000000000001817d	movss	(%rsp), %xmm1
0000000000018182	addq	$0x10, %rsp
0000000000018186	movss	(%rsp), %xmm0
000000000001818b	addq	$0x10, %rsp
000000000001818f	popq	%r15
0000000000018191	popq	%r14
0000000000018193	popq	%r13
0000000000018195	popq	%r12
0000000000018197	popq	%r11
0000000000018199	popq	%r10
000000000001819b	popq	%r9
000000000001819d	popq	%r8
000000000001819f	popq	%rcx
00000000000181a0	popq	%rdx
00000000000181a1	popq	%rsi
00000000000181a2	popq	%rdi
00000000000181a3	popq	%rbx
00000000000181a4	popq	%rbp
00000000000181a5	jmpq	*%rax
__ZN7cocos2d6CCNode11removeChildEPS0_:
00000000000181a7	pushq	%rbp
00000000000181a8	movq	%rsp, %rbp
00000000000181ab	pushq	%rbx
00000000000181ac	pushq	%rdi
00000000000181ad	pushq	%rsi
00000000000181ae	pushq	%rdx
00000000000181af	pushq	%rcx
00000000000181b0	pushq	%r8
00000000000181b2	pushq	%r9
00000000000181b4	pushq	%r10
00000000000181b6	pushq	%r11
00000000000181b8	pushq	%r12
00000000000181ba	pushq	%r13
00000000000181bc	pushq	%r14
00000000000181be	pushq	%r15
00000000000181c0	subq	$0x10, %rsp
00000000000181c4	movss	%xmm0, (%rsp)
00000000000181c9	subq	$0x10, %rsp
00000000000181cd	movss	%xmm1, (%rsp)
00000000000181d2	pushq	%rsi
00000000000181d3	pushq	%rdi
00000000000181d4	callq	__Z7getBasev ## getBase()
00000000000181d9	addq	$0x123460, %rax
00000000000181df	popq	%rdi
00000000000181e0	popq	%rsi
00000000000181e1	movss	(%rsp), %xmm1
00000000000181e6	addq	$0x10, %rsp
00000000000181ea	movss	(%rsp), %xmm0
00000000000181ef	addq	$0x10, %rsp
00000000000181f3	popq	%r15
00000000000181f5	popq	%r14
00000000000181f7	popq	%r13
00000000000181f9	popq	%r12
00000000000181fb	popq	%r11
00000000000181fd	popq	%r10
00000000000181ff	popq	%r9
0000000000018201	popq	%r8
0000000000018203	popq	%rcx
0000000000018204	popq	%rdx
0000000000018205	popq	%rsi
0000000000018206	popq	%rdi
0000000000018207	popq	%rbx
0000000000018208	popq	%rbp
0000000000018209	jmpq	*%rax
__ZN7cocos2d6CCNode11removeChildEPS0_b:
000000000001820b	pushq	%rbp
000000000001820c	movq	%rsp, %rbp
000000000001820f	pushq	%rbx
0000000000018210	pushq	%rdi
0000000000018211	pushq	%rsi
0000000000018212	pushq	%rdx
0000000000018213	pushq	%rcx
0000000000018214	pushq	%r8
0000000000018216	pushq	%r9
0000000000018218	pushq	%r10
000000000001821a	pushq	%r11
000000000001821c	pushq	%r12
000000000001821e	pushq	%r13
0000000000018220	pushq	%r14
0000000000018222	pushq	%r15
0000000000018224	subq	$0x10, %rsp
0000000000018228	movss	%xmm0, (%rsp)
000000000001822d	subq	$0x10, %rsp
0000000000018231	movss	%xmm1, (%rsp)
0000000000018236	pushq	%rsi
0000000000018237	pushq	%rdi
0000000000018238	callq	__Z7getBasev ## getBase()
000000000001823d	addq	$0x123480, %rax
0000000000018243	popq	%rdi
0000000000018244	popq	%rsi
0000000000018245	movss	(%rsp), %xmm1
000000000001824a	addq	$0x10, %rsp
000000000001824e	movss	(%rsp), %xmm0
0000000000018253	addq	$0x10, %rsp
0000000000018257	popq	%r15
0000000000018259	popq	%r14
000000000001825b	popq	%r13
000000000001825d	popq	%r12
000000000001825f	popq	%r11
0000000000018261	popq	%r10
0000000000018263	popq	%r9
0000000000018265	popq	%r8
0000000000018267	popq	%rcx
0000000000018268	popq	%rdx
0000000000018269	popq	%rsi
000000000001826a	popq	%rdi
000000000001826b	popq	%rbx
000000000001826c	popq	%rbp
000000000001826d	jmpq	*%rax
__ZN7cocos2d6CCNode11setPositionEff:
000000000001826f	pushq	%rbp
0000000000018270	movq	%rsp, %rbp
0000000000018273	pushq	%rbx
0000000000018274	pushq	%rdi
0000000000018275	pushq	%rsi
0000000000018276	pushq	%rdx
0000000000018277	pushq	%rcx
0000000000018278	pushq	%r8
000000000001827a	pushq	%r9
000000000001827c	pushq	%r10
000000000001827e	pushq	%r11
0000000000018280	pushq	%r12
0000000000018282	pushq	%r13
0000000000018284	pushq	%r14
0000000000018286	pushq	%r15
0000000000018288	subq	$0x10, %rsp
000000000001828c	movss	%xmm0, (%rsp)
0000000000018291	subq	$0x10, %rsp
0000000000018295	movss	%xmm1, (%rsp)
000000000001829a	pushq	%rsi
000000000001829b	pushq	%rdi
000000000001829c	callq	__Z7getBasev ## getBase()
00000000000182a1	addq	$0x122ba0, %rax
00000000000182a7	popq	%rdi
00000000000182a8	popq	%rsi
00000000000182a9	movss	(%rsp), %xmm1
00000000000182ae	addq	$0x10, %rsp
00000000000182b2	movss	(%rsp), %xmm0
00000000000182b7	addq	$0x10, %rsp
00000000000182bb	popq	%r15
00000000000182bd	popq	%r14
00000000000182bf	popq	%r13
00000000000182c1	popq	%r12
00000000000182c3	popq	%r11
00000000000182c5	popq	%r10
00000000000182c7	popq	%r9
00000000000182c9	popq	%r8
00000000000182cb	popq	%rcx
00000000000182cc	popq	%rdx
00000000000182cd	popq	%rsi
00000000000182ce	popq	%rdi
00000000000182cf	popq	%rbx
00000000000182d0	popq	%rbp
00000000000182d1	jmpq	*%rax
__ZN7cocos2d6CCNode11setPositionERKNS_7CCPointE:
00000000000182d3	pushq	%rbp
00000000000182d4	movq	%rsp, %rbp
00000000000182d7	pushq	%rbx
00000000000182d8	pushq	%rdi
00000000000182d9	pushq	%rsi
00000000000182da	pushq	%rdx
00000000000182db	pushq	%rcx
00000000000182dc	pushq	%r8
00000000000182de	pushq	%r9
00000000000182e0	pushq	%r10
00000000000182e2	pushq	%r11
00000000000182e4	pushq	%r12
00000000000182e6	pushq	%r13
00000000000182e8	pushq	%r14
00000000000182ea	pushq	%r15
00000000000182ec	subq	$0x10, %rsp
00000000000182f0	movss	%xmm0, (%rsp)
00000000000182f5	subq	$0x10, %rsp
00000000000182f9	movss	%xmm1, (%rsp)
00000000000182fe	pushq	%rsi
00000000000182ff	pushq	%rdi
0000000000018300	callq	__Z7getBasev ## getBase()
0000000000018305	addq	$0x122b70, %rax
000000000001830b	popq	%rdi
000000000001830c	popq	%rsi
000000000001830d	movss	(%rsp), %xmm1
0000000000018312	addq	$0x10, %rsp
0000000000018316	movss	(%rsp), %xmm0
000000000001831b	addq	$0x10, %rsp
000000000001831f	popq	%r15
0000000000018321	popq	%r14
0000000000018323	popq	%r13
0000000000018325	popq	%r12
0000000000018327	popq	%r11
0000000000018329	popq	%r10
000000000001832b	popq	%r9
000000000001832d	popq	%r8
000000000001832f	popq	%rcx
0000000000018330	popq	%rdx
0000000000018331	popq	%rsi
0000000000018332	popq	%rdi
0000000000018333	popq	%rbx
0000000000018334	popq	%rbp
0000000000018335	jmpq	*%rax
__ZN7cocos2d6CCNode11setRotationEf:
0000000000018337	pushq	%rbp
0000000000018338	movq	%rsp, %rbp
000000000001833b	pushq	%rbx
000000000001833c	pushq	%rdi
000000000001833d	pushq	%rsi
000000000001833e	pushq	%rdx
000000000001833f	pushq	%rcx
0000000000018340	pushq	%r8
0000000000018342	pushq	%r9
0000000000018344	pushq	%r10
0000000000018346	pushq	%r11
0000000000018348	pushq	%r12
000000000001834a	pushq	%r13
000000000001834c	pushq	%r14
000000000001834e	pushq	%r15
0000000000018350	subq	$0x10, %rsp
0000000000018354	movss	%xmm0, (%rsp)
0000000000018359	subq	$0x10, %rsp
000000000001835d	movss	%xmm1, (%rsp)
0000000000018362	pushq	%rsi
0000000000018363	pushq	%rdi
0000000000018364	callq	__Z7getBasev ## getBase()
0000000000018369	addq	$0x122a10, %rax
000000000001836f	popq	%rdi
0000000000018370	popq	%rsi
0000000000018371	movss	(%rsp), %xmm1
0000000000018376	addq	$0x10, %rsp
000000000001837a	movss	(%rsp), %xmm0
000000000001837f	addq	$0x10, %rsp
0000000000018383	popq	%r15
0000000000018385	popq	%r14
0000000000018387	popq	%r13
0000000000018389	popq	%r12
000000000001838b	popq	%r11
000000000001838d	popq	%r10
000000000001838f	popq	%r9
0000000000018391	popq	%r8
0000000000018393	popq	%rcx
0000000000018394	popq	%rdx
0000000000018395	popq	%rsi
0000000000018396	popq	%rdi
0000000000018397	popq	%rbx
0000000000018398	popq	%rbp
0000000000018399	jmpq	*%rax
__ZN7cocos2d6CCNode11setUserDataEPv:
000000000001839b	pushq	%rbp
000000000001839c	movq	%rsp, %rbp
000000000001839f	pushq	%rbx
00000000000183a0	pushq	%rdi
00000000000183a1	pushq	%rsi
00000000000183a2	pushq	%rdx
00000000000183a3	pushq	%rcx
00000000000183a4	pushq	%r8
00000000000183a6	pushq	%r9
00000000000183a8	pushq	%r10
00000000000183aa	pushq	%r11
00000000000183ac	pushq	%r12
00000000000183ae	pushq	%r13
00000000000183b0	pushq	%r14
00000000000183b2	pushq	%r15
00000000000183b4	subq	$0x10, %rsp
00000000000183b8	movss	%xmm0, (%rsp)
00000000000183bd	subq	$0x10, %rsp
00000000000183c1	movss	%xmm1, (%rsp)
00000000000183c6	pushq	%rsi
00000000000183c7	pushq	%rdi
00000000000183c8	callq	__Z7getBasev ## getBase()
00000000000183cd	addq	$0x122f40, %rax
00000000000183d3	popq	%rdi
00000000000183d4	popq	%rsi
00000000000183d5	movss	(%rsp), %xmm1
00000000000183da	addq	$0x10, %rsp
00000000000183de	movss	(%rsp), %xmm0
00000000000183e3	addq	$0x10, %rsp
00000000000183e7	popq	%r15
00000000000183e9	popq	%r14
00000000000183eb	popq	%r13
00000000000183ed	popq	%r12
00000000000183ef	popq	%r11
00000000000183f1	popq	%r10
00000000000183f3	popq	%r9
00000000000183f5	popq	%r8
00000000000183f7	popq	%rcx
00000000000183f8	popq	%rdx
00000000000183f9	popq	%rsi
00000000000183fa	popq	%rdi
00000000000183fb	popq	%rbx
00000000000183fc	popq	%rbp
00000000000183fd	jmpq	*%rax
__ZN7cocos2d6CCNode12addComponentEPNS_11CCComponentE:
00000000000183ff	pushq	%rbp
0000000000018400	movq	%rsp, %rbp
0000000000018403	pushq	%rbx
0000000000018404	pushq	%rdi
0000000000018405	pushq	%rsi
0000000000018406	pushq	%rdx
0000000000018407	pushq	%rcx
0000000000018408	pushq	%r8
000000000001840a	pushq	%r9
000000000001840c	pushq	%r10
000000000001840e	pushq	%r11
0000000000018410	pushq	%r12
0000000000018412	pushq	%r13
0000000000018414	pushq	%r14
0000000000018416	pushq	%r15
0000000000018418	subq	$0x10, %rsp
000000000001841c	movss	%xmm0, (%rsp)
0000000000018421	subq	$0x10, %rsp
0000000000018425	movss	%xmm1, (%rsp)
000000000001842a	pushq	%rsi
000000000001842b	pushq	%rdi
000000000001842c	callq	__Z7getBasev ## getBase()
0000000000018431	addq	$0x124a40, %rax
0000000000018437	popq	%rdi
0000000000018438	popq	%rsi
0000000000018439	movss	(%rsp), %xmm1
000000000001843e	addq	$0x10, %rsp
0000000000018442	movss	(%rsp), %xmm0
0000000000018447	addq	$0x10, %rsp
000000000001844b	popq	%r15
000000000001844d	popq	%r14
000000000001844f	popq	%r13
0000000000018451	popq	%r12
0000000000018453	popq	%r11
0000000000018455	popq	%r10
0000000000018457	popq	%r9
0000000000018459	popq	%r8
000000000001845b	popq	%rcx
000000000001845c	popq	%rdx
000000000001845d	popq	%rsi
000000000001845e	popq	%rdi
000000000001845f	popq	%rbx
0000000000018460	popq	%rbp
0000000000018461	jmpq	*%rax
__ZN7cocos2d6CCNode12getPositionXEv:
0000000000018463	pushq	%rbp
0000000000018464	movq	%rsp, %rbp
0000000000018467	pushq	%rbx
0000000000018468	pushq	%rdi
0000000000018469	pushq	%rsi
000000000001846a	pushq	%rdx
000000000001846b	pushq	%rcx
000000000001846c	pushq	%r8
000000000001846e	pushq	%r9
0000000000018470	pushq	%r10
0000000000018472	pushq	%r11
0000000000018474	pushq	%r12
0000000000018476	pushq	%r13
0000000000018478	pushq	%r14
000000000001847a	pushq	%r15
000000000001847c	subq	$0x10, %rsp
0000000000018480	movss	%xmm0, (%rsp)
0000000000018485	subq	$0x10, %rsp
0000000000018489	movss	%xmm1, (%rsp)
000000000001848e	pushq	%rsi
000000000001848f	pushq	%rdi
0000000000018490	callq	__Z7getBasev ## getBase()
0000000000018495	addq	$0x122be0, %rax
000000000001849b	popq	%rdi
000000000001849c	popq	%rsi
000000000001849d	movss	(%rsp), %xmm1
00000000000184a2	addq	$0x10, %rsp
00000000000184a6	movss	(%rsp), %xmm0
00000000000184ab	addq	$0x10, %rsp
00000000000184af	popq	%r15
00000000000184b1	popq	%r14
00000000000184b3	popq	%r13
00000000000184b5	popq	%r12
00000000000184b7	popq	%r11
00000000000184b9	popq	%r10
00000000000184bb	popq	%r9
00000000000184bd	popq	%r8
00000000000184bf	popq	%rcx
00000000000184c0	popq	%rdx
00000000000184c1	popq	%rsi
00000000000184c2	popq	%rdi
00000000000184c3	popq	%rbx
00000000000184c4	popq	%rbp
00000000000184c5	jmpq	*%rax
__ZN7cocos2d6CCNode12getPositionYEv:
00000000000184c7	pushq	%rbp
00000000000184c8	movq	%rsp, %rbp
00000000000184cb	pushq	%rbx
00000000000184cc	pushq	%rdi
00000000000184cd	pushq	%rsi
00000000000184ce	pushq	%rdx
00000000000184cf	pushq	%rcx
00000000000184d0	pushq	%r8
00000000000184d2	pushq	%r9
00000000000184d4	pushq	%r10
00000000000184d6	pushq	%r11
00000000000184d8	pushq	%r12
00000000000184da	pushq	%r13
00000000000184dc	pushq	%r14
00000000000184de	pushq	%r15
00000000000184e0	subq	$0x10, %rsp
00000000000184e4	movss	%xmm0, (%rsp)
00000000000184e9	subq	$0x10, %rsp
00000000000184ed	movss	%xmm1, (%rsp)
00000000000184f2	pushq	%rsi
00000000000184f3	pushq	%rdi
00000000000184f4	callq	__Z7getBasev ## getBase()
00000000000184f9	addq	$0x122bf0, %rax
00000000000184ff	popq	%rdi
0000000000018500	popq	%rsi
0000000000018501	movss	(%rsp), %xmm1
0000000000018506	addq	$0x10, %rsp
000000000001850a	movss	(%rsp), %xmm0
000000000001850f	addq	$0x10, %rsp
0000000000018513	popq	%r15
0000000000018515	popq	%r14
0000000000018517	popq	%r13
0000000000018519	popq	%r12
000000000001851b	popq	%r11
000000000001851d	popq	%r10
000000000001851f	popq	%r9
0000000000018521	popq	%r8
0000000000018523	popq	%rcx
0000000000018524	popq	%rdx
0000000000018525	popq	%rsi
0000000000018526	popq	%rdi
0000000000018527	popq	%rbx
0000000000018528	popq	%rbp
0000000000018529	jmpq	*%rax
__ZN7cocos2d6CCNode12getRotationXEv:
000000000001852b	pushq	%rbp
000000000001852c	movq	%rsp, %rbp
000000000001852f	pushq	%rbx
0000000000018530	pushq	%rdi
0000000000018531	pushq	%rsi
0000000000018532	pushq	%rdx
0000000000018533	pushq	%rcx
0000000000018534	pushq	%r8
0000000000018536	pushq	%r9
0000000000018538	pushq	%r10
000000000001853a	pushq	%r11
000000000001853c	pushq	%r12
000000000001853e	pushq	%r13
0000000000018540	pushq	%r14
0000000000018542	pushq	%r15
0000000000018544	subq	$0x10, %rsp
0000000000018548	movss	%xmm0, (%rsp)
000000000001854d	subq	$0x10, %rsp
0000000000018551	movss	%xmm1, (%rsp)
0000000000018556	pushq	%rsi
0000000000018557	pushq	%rdi
0000000000018558	callq	__Z7getBasev ## getBase()
000000000001855d	addq	$0x122a50, %rax
0000000000018563	popq	%rdi
0000000000018564	popq	%rsi
0000000000018565	movss	(%rsp), %xmm1
000000000001856a	addq	$0x10, %rsp
000000000001856e	movss	(%rsp), %xmm0
0000000000018573	addq	$0x10, %rsp
0000000000018577	popq	%r15
0000000000018579	popq	%r14
000000000001857b	popq	%r13
000000000001857d	popq	%r12
000000000001857f	popq	%r11
0000000000018581	popq	%r10
0000000000018583	popq	%r9
0000000000018585	popq	%r8
0000000000018587	popq	%rcx
0000000000018588	popq	%rdx
0000000000018589	popq	%rsi
000000000001858a	popq	%rdi
000000000001858b	popq	%rbx
000000000001858c	popq	%rbp
000000000001858d	jmpq	*%rax
__ZN7cocos2d6CCNode12getRotationYEv:
000000000001858f	pushq	%rbp
0000000000018590	movq	%rsp, %rbp
0000000000018593	pushq	%rbx
0000000000018594	pushq	%rdi
0000000000018595	pushq	%rsi
0000000000018596	pushq	%rdx
0000000000018597	pushq	%rcx
0000000000018598	pushq	%r8
000000000001859a	pushq	%r9
000000000001859c	pushq	%r10
000000000001859e	pushq	%r11
00000000000185a0	pushq	%r12
00000000000185a2	pushq	%r13
00000000000185a4	pushq	%r14
00000000000185a6	pushq	%r15
00000000000185a8	subq	$0x10, %rsp
00000000000185ac	movss	%xmm0, (%rsp)
00000000000185b1	subq	$0x10, %rsp
00000000000185b5	movss	%xmm1, (%rsp)
00000000000185ba	pushq	%rsi
00000000000185bb	pushq	%rdi
00000000000185bc	callq	__Z7getBasev ## getBase()
00000000000185c1	addq	$0x122a80, %rax
00000000000185c7	popq	%rdi
00000000000185c8	popq	%rsi
00000000000185c9	movss	(%rsp), %xmm1
00000000000185ce	addq	$0x10, %rsp
00000000000185d2	movss	(%rsp), %xmm0
00000000000185d7	addq	$0x10, %rsp
00000000000185db	popq	%r15
00000000000185dd	popq	%r14
00000000000185df	popq	%r13
00000000000185e1	popq	%r12
00000000000185e3	popq	%r11
00000000000185e5	popq	%r10
00000000000185e7	popq	%r9
00000000000185e9	popq	%r8
00000000000185eb	popq	%rcx
00000000000185ec	popq	%rdx
00000000000185ed	popq	%rsi
00000000000185ee	popq	%rdi
00000000000185ef	popq	%rbx
00000000000185f0	popq	%rbp
00000000000185f1	jmpq	*%rax
__ZN7cocos2d6CCNode12getSchedulerEv:
00000000000185f3	pushq	%rbp
00000000000185f4	movq	%rsp, %rbp
00000000000185f7	pushq	%rbx
00000000000185f8	pushq	%rdi
00000000000185f9	pushq	%rsi
00000000000185fa	pushq	%rdx
00000000000185fb	pushq	%rcx
00000000000185fc	pushq	%r8
00000000000185fe	pushq	%r9
0000000000018600	pushq	%r10
0000000000018602	pushq	%r11
0000000000018604	pushq	%r12
0000000000018606	pushq	%r13
0000000000018608	pushq	%r14
000000000001860a	pushq	%r15
000000000001860c	subq	$0x10, %rsp
0000000000018610	movss	%xmm0, (%rsp)
0000000000018615	subq	$0x10, %rsp
0000000000018619	movss	%xmm1, (%rsp)
000000000001861e	pushq	%rsi
000000000001861f	pushq	%rdi
0000000000018620	callq	__Z7getBasev ## getBase()
0000000000018625	addq	$0x123f70, %rax
000000000001862b	popq	%rdi
000000000001862c	popq	%rsi
000000000001862d	movss	(%rsp), %xmm1
0000000000018632	addq	$0x10, %rsp
0000000000018636	movss	(%rsp), %xmm0
000000000001863b	addq	$0x10, %rsp
000000000001863f	popq	%r15
0000000000018641	popq	%r14
0000000000018643	popq	%r13
0000000000018645	popq	%r12
0000000000018647	popq	%r11
0000000000018649	popq	%r10
000000000001864b	popq	%r9
000000000001864d	popq	%r8
000000000001864f	popq	%rcx
0000000000018650	popq	%rdx
0000000000018651	popq	%rsi
0000000000018652	popq	%rdi
0000000000018653	popq	%rbx
0000000000018654	popq	%rbp
0000000000018655	jmpq	*%rax
__ZN7cocos2d6CCNode12reorderChildEPS0_i:
0000000000018657	pushq	%rbp
0000000000018658	movq	%rsp, %rbp
000000000001865b	pushq	%rbx
000000000001865c	pushq	%rdi
000000000001865d	pushq	%rsi
000000000001865e	pushq	%rdx
000000000001865f	pushq	%rcx
0000000000018660	pushq	%r8
0000000000018662	pushq	%r9
0000000000018664	pushq	%r10
0000000000018666	pushq	%r11
0000000000018668	pushq	%r12
000000000001866a	pushq	%r13
000000000001866c	pushq	%r14
000000000001866e	pushq	%r15
0000000000018670	subq	$0x10, %rsp
0000000000018674	movss	%xmm0, (%rsp)
0000000000018679	subq	$0x10, %rsp
000000000001867d	movss	%xmm1, (%rsp)
0000000000018682	pushq	%rsi
0000000000018683	pushq	%rdi
0000000000018684	callq	__Z7getBasev ## getBase()
0000000000018689	addq	$0x123760, %rax
000000000001868f	popq	%rdi
0000000000018690	popq	%rsi
0000000000018691	movss	(%rsp), %xmm1
0000000000018696	addq	$0x10, %rsp
000000000001869a	movss	(%rsp), %xmm0
000000000001869f	addq	$0x10, %rsp
00000000000186a3	popq	%r15
00000000000186a5	popq	%r14
00000000000186a7	popq	%r13
00000000000186a9	popq	%r12
00000000000186ab	popq	%r11
00000000000186ad	popq	%r10
00000000000186af	popq	%r9
00000000000186b1	popq	%r8
00000000000186b3	popq	%rcx
00000000000186b4	popq	%rdx
00000000000186b5	popq	%rsi
00000000000186b6	popq	%rdi
00000000000186b7	popq	%rbx
00000000000186b8	popq	%rbp
00000000000186b9	jmpq	*%rax
__ZN7cocos2d6CCNode12setPositionXEf:
00000000000186bb	pushq	%rbp
00000000000186bc	movq	%rsp, %rbp
00000000000186bf	pushq	%rbx
00000000000186c0	pushq	%rdi
00000000000186c1	pushq	%rsi
00000000000186c2	pushq	%rdx
00000000000186c3	pushq	%rcx
00000000000186c4	pushq	%r8
00000000000186c6	pushq	%r9
00000000000186c8	pushq	%r10
00000000000186ca	pushq	%r11
00000000000186cc	pushq	%r12
00000000000186ce	pushq	%r13
00000000000186d0	pushq	%r14
00000000000186d2	pushq	%r15
00000000000186d4	subq	$0x10, %rsp
00000000000186d8	movss	%xmm0, (%rsp)
00000000000186dd	subq	$0x10, %rsp
00000000000186e1	movss	%xmm1, (%rsp)
00000000000186e6	pushq	%rsi
00000000000186e7	pushq	%rdi
00000000000186e8	callq	__Z7getBasev ## getBase()
00000000000186ed	addq	$0x122c00, %rax
00000000000186f3	popq	%rdi
00000000000186f4	popq	%rsi
00000000000186f5	movss	(%rsp), %xmm1
00000000000186fa	addq	$0x10, %rsp
00000000000186fe	movss	(%rsp), %xmm0
0000000000018703	addq	$0x10, %rsp
0000000000018707	popq	%r15
0000000000018709	popq	%r14
000000000001870b	popq	%r13
000000000001870d	popq	%r12
000000000001870f	popq	%r11
0000000000018711	popq	%r10
0000000000018713	popq	%r9
0000000000018715	popq	%r8
0000000000018717	popq	%rcx
0000000000018718	popq	%rdx
0000000000018719	popq	%rsi
000000000001871a	popq	%rdi
000000000001871b	popq	%rbx
000000000001871c	popq	%rbp
000000000001871d	jmpq	*%rax
__ZN7cocos2d6CCNode12setPositionYEf:
000000000001871f	pushq	%rbp
0000000000018720	movq	%rsp, %rbp
0000000000018723	pushq	%rbx
0000000000018724	pushq	%rdi
0000000000018725	pushq	%rsi
0000000000018726	pushq	%rdx
0000000000018727	pushq	%rcx
0000000000018728	pushq	%r8
000000000001872a	pushq	%r9
000000000001872c	pushq	%r10
000000000001872e	pushq	%r11
0000000000018730	pushq	%r12
0000000000018732	pushq	%r13
0000000000018734	pushq	%r14
0000000000018736	pushq	%r15
0000000000018738	subq	$0x10, %rsp
000000000001873c	movss	%xmm0, (%rsp)
0000000000018741	subq	$0x10, %rsp
0000000000018745	movss	%xmm1, (%rsp)
000000000001874a	pushq	%rsi
000000000001874b	pushq	%rdi
000000000001874c	callq	__Z7getBasev ## getBase()
0000000000018751	addq	$0x122c40, %rax
0000000000018757	popq	%rdi
0000000000018758	popq	%rsi
0000000000018759	movss	(%rsp), %xmm1
000000000001875e	addq	$0x10, %rsp
0000000000018762	movss	(%rsp), %xmm0
0000000000018767	addq	$0x10, %rsp
000000000001876b	popq	%r15
000000000001876d	popq	%r14
000000000001876f	popq	%r13
0000000000018771	popq	%r12
0000000000018773	popq	%r11
0000000000018775	popq	%r10
0000000000018777	popq	%r9
0000000000018779	popq	%r8
000000000001877b	popq	%rcx
000000000001877c	popq	%rdx
000000000001877d	popq	%rsi
000000000001877e	popq	%rdi
000000000001877f	popq	%rbx
0000000000018780	popq	%rbp
0000000000018781	jmpq	*%rax
__ZN7cocos2d6CCNode12setRotationXEf:
0000000000018783	pushq	%rbp
0000000000018784	movq	%rsp, %rbp
0000000000018787	pushq	%rbx
0000000000018788	pushq	%rdi
0000000000018789	pushq	%rsi
000000000001878a	pushq	%rdx
000000000001878b	pushq	%rcx
000000000001878c	pushq	%r8
000000000001878e	pushq	%r9
0000000000018790	pushq	%r10
0000000000018792	pushq	%r11
0000000000018794	pushq	%r12
0000000000018796	pushq	%r13
0000000000018798	pushq	%r14
000000000001879a	pushq	%r15
000000000001879c	subq	$0x10, %rsp
00000000000187a0	movss	%xmm0, (%rsp)
00000000000187a5	subq	$0x10, %rsp
00000000000187a9	movss	%xmm1, (%rsp)
00000000000187ae	pushq	%rsi
00000000000187af	pushq	%rdi
00000000000187b0	callq	__Z7getBasev ## getBase()
00000000000187b5	addq	$0x122a60, %rax
00000000000187bb	popq	%rdi
00000000000187bc	popq	%rsi
00000000000187bd	movss	(%rsp), %xmm1
00000000000187c2	addq	$0x10, %rsp
00000000000187c6	movss	(%rsp), %xmm0
00000000000187cb	addq	$0x10, %rsp
00000000000187cf	popq	%r15
00000000000187d1	popq	%r14
00000000000187d3	popq	%r13
00000000000187d5	popq	%r12
00000000000187d7	popq	%r11
00000000000187d9	popq	%r10
00000000000187db	popq	%r9
00000000000187dd	popq	%r8
00000000000187df	popq	%rcx
00000000000187e0	popq	%rdx
00000000000187e1	popq	%rsi
00000000000187e2	popq	%rdi
00000000000187e3	popq	%rbx
00000000000187e4	popq	%rbp
00000000000187e5	jmpq	*%rax
__ZN7cocos2d6CCNode12setRotationYEf:
00000000000187e7	pushq	%rbp
00000000000187e8	movq	%rsp, %rbp
00000000000187eb	pushq	%rbx
00000000000187ec	pushq	%rdi
00000000000187ed	pushq	%rsi
00000000000187ee	pushq	%rdx
00000000000187ef	pushq	%rcx
00000000000187f0	pushq	%r8
00000000000187f2	pushq	%r9
00000000000187f4	pushq	%r10
00000000000187f6	pushq	%r11
00000000000187f8	pushq	%r12
00000000000187fa	pushq	%r13
00000000000187fc	pushq	%r14
00000000000187fe	pushq	%r15
0000000000018800	subq	$0x10, %rsp
0000000000018804	movss	%xmm0, (%rsp)
0000000000018809	subq	$0x10, %rsp
000000000001880d	movss	%xmm1, (%rsp)
0000000000018812	pushq	%rsi
0000000000018813	pushq	%rdi
0000000000018814	callq	__Z7getBasev ## getBase()
0000000000018819	addq	$0x122a90, %rax
000000000001881f	popq	%rdi
0000000000018820	popq	%rsi
0000000000018821	movss	(%rsp), %xmm1
0000000000018826	addq	$0x10, %rsp
000000000001882a	movss	(%rsp), %xmm0
000000000001882f	addq	$0x10, %rsp
0000000000018833	popq	%r15
0000000000018835	popq	%r14
0000000000018837	popq	%r13
0000000000018839	popq	%r12
000000000001883b	popq	%r11
000000000001883d	popq	%r10
000000000001883f	popq	%r9
0000000000018841	popq	%r8
0000000000018843	popq	%rcx
0000000000018844	popq	%rdx
0000000000018845	popq	%rsi
0000000000018846	popq	%rdi
0000000000018847	popq	%rbx
0000000000018848	popq	%rbp
0000000000018849	jmpq	*%rax
__ZN7cocos2d6CCNode12setSchedulerEPNS_11CCSchedulerE:
000000000001884b	pushq	%rbp
000000000001884c	movq	%rsp, %rbp
000000000001884f	pushq	%rbx
0000000000018850	pushq	%rdi
0000000000018851	pushq	%rsi
0000000000018852	pushq	%rdx
0000000000018853	pushq	%rcx
0000000000018854	pushq	%r8
0000000000018856	pushq	%r9
0000000000018858	pushq	%r10
000000000001885a	pushq	%r11
000000000001885c	pushq	%r12
000000000001885e	pushq	%r13
0000000000018860	pushq	%r14
0000000000018862	pushq	%r15
0000000000018864	subq	$0x10, %rsp
0000000000018868	movss	%xmm0, (%rsp)
000000000001886d	subq	$0x10, %rsp
0000000000018871	movss	%xmm1, (%rsp)
0000000000018876	pushq	%rsi
0000000000018877	pushq	%rdi
0000000000018878	callq	__Z7getBasev ## getBase()
000000000001887d	addq	$0x123f20, %rax
0000000000018883	popq	%rdi
0000000000018884	popq	%rsi
0000000000018885	movss	(%rsp), %xmm1
000000000001888a	addq	$0x10, %rsp
000000000001888e	movss	(%rsp), %xmm0
0000000000018893	addq	$0x10, %rsp
0000000000018897	popq	%r15
0000000000018899	popq	%r14
000000000001889b	popq	%r13
000000000001889d	popq	%r12
000000000001889f	popq	%r11
00000000000188a1	popq	%r10
00000000000188a3	popq	%r9
00000000000188a5	popq	%r8
00000000000188a7	popq	%rcx
00000000000188a8	popq	%rdx
00000000000188a9	popq	%rsi
00000000000188aa	popq	%rdi
00000000000188ab	popq	%rbx
00000000000188ac	popq	%rbp
00000000000188ad	jmpq	*%rax
__ZN7cocos2d6CCNode13getChildByTagEi:
00000000000188af	pushq	%rbp
00000000000188b0	movq	%rsp, %rbp
00000000000188b3	pushq	%rbx
00000000000188b4	pushq	%rdi
00000000000188b5	pushq	%rsi
00000000000188b6	pushq	%rdx
00000000000188b7	pushq	%rcx
00000000000188b8	pushq	%r8
00000000000188ba	pushq	%r9
00000000000188bc	pushq	%r10
00000000000188be	pushq	%r11
00000000000188c0	pushq	%r12
00000000000188c2	pushq	%r13
00000000000188c4	pushq	%r14
00000000000188c6	pushq	%r15
00000000000188c8	subq	$0x10, %rsp
00000000000188cc	movss	%xmm0, (%rsp)
00000000000188d1	subq	$0x10, %rsp
00000000000188d5	movss	%xmm1, (%rsp)
00000000000188da	pushq	%rsi
00000000000188db	pushq	%rdi
00000000000188dc	callq	__Z7getBasev ## getBase()
00000000000188e1	addq	$0x123220, %rax
00000000000188e7	popq	%rdi
00000000000188e8	popq	%rsi
00000000000188e9	movss	(%rsp), %xmm1
00000000000188ee	addq	$0x10, %rsp
00000000000188f2	movss	(%rsp), %xmm0
00000000000188f7	addq	$0x10, %rsp
00000000000188fb	popq	%r15
00000000000188fd	popq	%r14
00000000000188ff	popq	%r13
0000000000018901	popq	%r12
0000000000018903	popq	%r11
0000000000018905	popq	%r10
0000000000018907	popq	%r9
0000000000018909	popq	%r8
000000000001890b	popq	%rcx
000000000001890c	popq	%rdx
000000000001890d	popq	%rsi
000000000001890e	popq	%rdi
000000000001890f	popq	%rbx
0000000000018910	popq	%rbp
0000000000018911	jmpq	*%rax
__ZN7cocos2d6CCNode13getUserObjectEv:
0000000000018913	pushq	%rbp
0000000000018914	movq	%rsp, %rbp
0000000000018917	pushq	%rbx
0000000000018918	pushq	%rdi
0000000000018919	pushq	%rsi
000000000001891a	pushq	%rdx
000000000001891b	pushq	%rcx
000000000001891c	pushq	%r8
000000000001891e	pushq	%r9
0000000000018920	pushq	%r10
0000000000018922	pushq	%r11
0000000000018924	pushq	%r12
0000000000018926	pushq	%r13
0000000000018928	pushq	%r14
000000000001892a	pushq	%r15
000000000001892c	subq	$0x10, %rsp
0000000000018930	movss	%xmm0, (%rsp)
0000000000018935	subq	$0x10, %rsp
0000000000018939	movss	%xmm1, (%rsp)
000000000001893e	pushq	%rsi
000000000001893f	pushq	%rdi
0000000000018940	callq	__Z7getBasev ## getBase()
0000000000018945	addq	$0x122f80, %rax
000000000001894b	popq	%rdi
000000000001894c	popq	%rsi
000000000001894d	movss	(%rsp), %xmm1
0000000000018952	addq	$0x10, %rsp
0000000000018956	movss	(%rsp), %xmm0
000000000001895b	addq	$0x10, %rsp
000000000001895f	popq	%r15
0000000000018961	popq	%r14
0000000000018963	popq	%r13
0000000000018965	popq	%r12
0000000000018967	popq	%r11
0000000000018969	popq	%r10
000000000001896b	popq	%r9
000000000001896d	popq	%r8
000000000001896f	popq	%rcx
0000000000018970	popq	%rdx
0000000000018971	popq	%rsi
0000000000018972	popq	%rdi
0000000000018973	popq	%rbx
0000000000018974	popq	%rbp
0000000000018975	jmpq	*%rax
__ZN7cocos2d6CCNode13setUserObjectEPNS_8CCObjectE:
0000000000018977	pushq	%rbp
0000000000018978	movq	%rsp, %rbp
000000000001897b	pushq	%rbx
000000000001897c	pushq	%rdi
000000000001897d	pushq	%rsi
000000000001897e	pushq	%rdx
000000000001897f	pushq	%rcx
0000000000018980	pushq	%r8
0000000000018982	pushq	%r9
0000000000018984	pushq	%r10
0000000000018986	pushq	%r11
0000000000018988	pushq	%r12
000000000001898a	pushq	%r13
000000000001898c	pushq	%r14
000000000001898e	pushq	%r15
0000000000018990	subq	$0x10, %rsp
0000000000018994	movss	%xmm0, (%rsp)
0000000000018999	subq	$0x10, %rsp
000000000001899d	movss	%xmm1, (%rsp)
00000000000189a2	pushq	%rsi
00000000000189a3	pushq	%rdi
00000000000189a4	callq	__Z7getBasev ## getBase()
00000000000189a9	addq	$0x122fb0, %rax
00000000000189af	popq	%rdi
00000000000189b0	popq	%rsi
00000000000189b1	movss	(%rsp), %xmm1
00000000000189b6	addq	$0x10, %rsp
00000000000189ba	movss	(%rsp), %xmm0
00000000000189bf	addq	$0x10, %rsp
00000000000189c3	popq	%r15
00000000000189c5	popq	%r14
00000000000189c7	popq	%r13
00000000000189c9	popq	%r12
00000000000189cb	popq	%r11
00000000000189cd	popq	%r10
00000000000189cf	popq	%r9
00000000000189d1	popq	%r8
00000000000189d3	popq	%rcx
00000000000189d4	popq	%rdx
00000000000189d5	popq	%rsi
00000000000189d6	popq	%rdi
00000000000189d7	popq	%rbx
00000000000189d8	popq	%rbp
00000000000189d9	jmpq	*%rax
__ZN7cocos2d6CCNode14getAnchorPointEv:
00000000000189db	pushq	%rbp
00000000000189dc	movq	%rsp, %rbp
00000000000189df	pushq	%rbx
00000000000189e0	pushq	%rdi
00000000000189e1	pushq	%rsi
00000000000189e2	pushq	%rdx
00000000000189e3	pushq	%rcx
00000000000189e4	pushq	%r8
00000000000189e6	pushq	%r9
00000000000189e8	pushq	%r10
00000000000189ea	pushq	%r11
00000000000189ec	pushq	%r12
00000000000189ee	pushq	%r13
00000000000189f0	pushq	%r14
00000000000189f2	pushq	%r15
00000000000189f4	subq	$0x10, %rsp
00000000000189f8	movss	%xmm0, (%rsp)
00000000000189fd	subq	$0x10, %rsp
0000000000018a01	movss	%xmm1, (%rsp)
0000000000018a06	pushq	%rsi
0000000000018a07	pushq	%rdi
0000000000018a08	callq	__Z7getBasev ## getBase()
0000000000018a0d	addq	$0x122d80, %rax
0000000000018a13	popq	%rdi
0000000000018a14	popq	%rsi
0000000000018a15	movss	(%rsp), %xmm1
0000000000018a1a	addq	$0x10, %rsp
0000000000018a1e	movss	(%rsp), %xmm0
0000000000018a23	addq	$0x10, %rsp
0000000000018a27	popq	%r15
0000000000018a29	popq	%r14
0000000000018a2b	popq	%r13
0000000000018a2d	popq	%r12
0000000000018a2f	popq	%r11
0000000000018a31	popq	%r10
0000000000018a33	popq	%r9
0000000000018a35	popq	%r8
0000000000018a37	popq	%rcx
0000000000018a38	popq	%rdx
0000000000018a39	popq	%rsi
0000000000018a3a	popq	%rdi
0000000000018a3b	popq	%rbx
0000000000018a3c	popq	%rbp
0000000000018a3d	jmpq	*%rax
__ZN7cocos2d6CCNode14setAnchorPointERKNS_7CCPointE:
0000000000018a3f	pushq	%rbp
0000000000018a40	movq	%rsp, %rbp
0000000000018a43	pushq	%rbx
0000000000018a44	pushq	%rdi
0000000000018a45	pushq	%rsi
0000000000018a46	pushq	%rdx
0000000000018a47	pushq	%rcx
0000000000018a48	pushq	%r8
0000000000018a4a	pushq	%r9
0000000000018a4c	pushq	%r10
0000000000018a4e	pushq	%r11
0000000000018a50	pushq	%r12
0000000000018a52	pushq	%r13
0000000000018a54	pushq	%r14
0000000000018a56	pushq	%r15
0000000000018a58	subq	$0x10, %rsp
0000000000018a5c	movss	%xmm0, (%rsp)
0000000000018a61	subq	$0x10, %rsp
0000000000018a65	movss	%xmm1, (%rsp)
0000000000018a6a	pushq	%rsi
0000000000018a6b	pushq	%rdi
0000000000018a6c	callq	__Z7getBasev ## getBase()
0000000000018a71	addq	$0x122d90, %rax
0000000000018a77	popq	%rdi
0000000000018a78	popq	%rsi
0000000000018a79	movss	(%rsp), %xmm1
0000000000018a7e	addq	$0x10, %rsp
0000000000018a82	movss	(%rsp), %xmm0
0000000000018a87	addq	$0x10, %rsp
0000000000018a8b	popq	%r15
0000000000018a8d	popq	%r14
0000000000018a8f	popq	%r13
0000000000018a91	popq	%r12
0000000000018a93	popq	%r11
0000000000018a95	popq	%r10
0000000000018a97	popq	%r9
0000000000018a99	popq	%r8
0000000000018a9b	popq	%rcx
0000000000018a9c	popq	%rdx
0000000000018a9d	popq	%rsi
0000000000018a9e	popq	%rdi
0000000000018a9f	popq	%rbx
0000000000018aa0	popq	%rbp
0000000000018aa1	jmpq	*%rax
__ZN7cocos2d6CCNode14setContentSizeERKNS_6CCSizeE:
0000000000018aa3	pushq	%rbp
0000000000018aa4	movq	%rsp, %rbp
0000000000018aa7	pushq	%rbx
0000000000018aa8	pushq	%rdi
0000000000018aa9	pushq	%rsi
0000000000018aaa	pushq	%rdx
0000000000018aab	pushq	%rcx
0000000000018aac	pushq	%r8
0000000000018aae	pushq	%r9
0000000000018ab0	pushq	%r10
0000000000018ab2	pushq	%r11
0000000000018ab4	pushq	%r12
0000000000018ab6	pushq	%r13
0000000000018ab8	pushq	%r14
0000000000018aba	pushq	%r15
0000000000018abc	subq	$0x10, %rsp
0000000000018ac0	movss	%xmm0, (%rsp)
0000000000018ac5	subq	$0x10, %rsp
0000000000018ac9	movss	%xmm1, (%rsp)
0000000000018ace	pushq	%rsi
0000000000018acf	pushq	%rdi
0000000000018ad0	callq	__Z7getBasev ## getBase()
0000000000018ad5	addq	$0x122e50, %rax
0000000000018adb	popq	%rdi
0000000000018adc	popq	%rsi
0000000000018add	movss	(%rsp), %xmm1
0000000000018ae2	addq	$0x10, %rsp
0000000000018ae6	movss	(%rsp), %xmm0
0000000000018aeb	addq	$0x10, %rsp
0000000000018aef	popq	%r15
0000000000018af1	popq	%r14
0000000000018af3	popq	%r13
0000000000018af5	popq	%r12
0000000000018af7	popq	%r11
0000000000018af9	popq	%r10
0000000000018afb	popq	%r9
0000000000018afd	popq	%r8
0000000000018aff	popq	%rcx
0000000000018b00	popq	%rdx
0000000000018b01	popq	%rsi
0000000000018b02	popq	%rdi
0000000000018b03	popq	%rbx
0000000000018b04	popq	%rbp
0000000000018b05	jmpq	*%rax
__ZN7cocos2d6CCNode15removeComponentEPKc:
0000000000018b07	pushq	%rbp
0000000000018b08	movq	%rsp, %rbp
0000000000018b0b	pushq	%rbx
0000000000018b0c	pushq	%rdi
0000000000018b0d	pushq	%rsi
0000000000018b0e	pushq	%rdx
0000000000018b0f	pushq	%rcx
0000000000018b10	pushq	%r8
0000000000018b12	pushq	%r9
0000000000018b14	pushq	%r10
0000000000018b16	pushq	%r11
0000000000018b18	pushq	%r12
0000000000018b1a	pushq	%r13
0000000000018b1c	pushq	%r14
0000000000018b1e	pushq	%r15
0000000000018b20	subq	$0x10, %rsp
0000000000018b24	movss	%xmm0, (%rsp)
0000000000018b29	subq	$0x10, %rsp
0000000000018b2d	movss	%xmm1, (%rsp)
0000000000018b32	pushq	%rsi
0000000000018b33	pushq	%rdi
0000000000018b34	callq	__Z7getBasev ## getBase()
0000000000018b39	addq	$0x124a60, %rax
0000000000018b3f	popq	%rdi
0000000000018b40	popq	%rsi
0000000000018b41	movss	(%rsp), %xmm1
0000000000018b46	addq	$0x10, %rsp
0000000000018b4a	movss	(%rsp), %xmm0
0000000000018b4f	addq	$0x10, %rsp
0000000000018b53	popq	%r15
0000000000018b55	popq	%r14
0000000000018b57	popq	%r13
0000000000018b59	popq	%r12
0000000000018b5b	popq	%r11
0000000000018b5d	popq	%r10
0000000000018b5f	popq	%r9
0000000000018b61	popq	%r8
0000000000018b63	popq	%rcx
0000000000018b64	popq	%rdx
0000000000018b65	popq	%rsi
0000000000018b66	popq	%rdi
0000000000018b67	popq	%rbx
0000000000018b68	popq	%rbp
0000000000018b69	jmpq	*%rax
__ZN7cocos2d6CCNode15removeComponentEPNS_11CCComponentE:
0000000000018b6b	pushq	%rbp
0000000000018b6c	movq	%rsp, %rbp
0000000000018b6f	pushq	%rbx
0000000000018b70	pushq	%rdi
0000000000018b71	pushq	%rsi
0000000000018b72	pushq	%rdx
0000000000018b73	pushq	%rcx
0000000000018b74	pushq	%r8
0000000000018b76	pushq	%r9
0000000000018b78	pushq	%r10
0000000000018b7a	pushq	%r11
0000000000018b7c	pushq	%r12
0000000000018b7e	pushq	%r13
0000000000018b80	pushq	%r14
0000000000018b82	pushq	%r15
0000000000018b84	subq	$0x10, %rsp
0000000000018b88	movss	%xmm0, (%rsp)
0000000000018b8d	subq	$0x10, %rsp
0000000000018b91	movss	%xmm1, (%rsp)
0000000000018b96	pushq	%rsi
0000000000018b97	pushq	%rdi
0000000000018b98	callq	__Z7getBasev ## getBase()
0000000000018b9d	addq	$0x124a80, %rax
0000000000018ba3	popq	%rdi
0000000000018ba4	popq	%rsi
0000000000018ba5	movss	(%rsp), %xmm1
0000000000018baa	addq	$0x10, %rsp
0000000000018bae	movss	(%rsp), %xmm0
0000000000018bb3	addq	$0x10, %rsp
0000000000018bb7	popq	%r15
0000000000018bb9	popq	%r14
0000000000018bbb	popq	%r13
0000000000018bbd	popq	%r12
0000000000018bbf	popq	%r11
0000000000018bc1	popq	%r10
0000000000018bc3	popq	%r9
0000000000018bc5	popq	%r8
0000000000018bc7	popq	%rcx
0000000000018bc8	popq	%rdx
0000000000018bc9	popq	%rsi
0000000000018bca	popq	%rdi
0000000000018bcb	popq	%rbx
0000000000018bcc	popq	%rbp
0000000000018bcd	jmpq	*%rax
__ZN7cocos2d6CCNode15sortAllChildrenEv:
0000000000018bcf	pushq	%rbp
0000000000018bd0	movq	%rsp, %rbp
0000000000018bd3	pushq	%rbx
0000000000018bd4	pushq	%rdi
0000000000018bd5	pushq	%rsi
0000000000018bd6	pushq	%rdx
0000000000018bd7	pushq	%rcx
0000000000018bd8	pushq	%r8
0000000000018bda	pushq	%r9
0000000000018bdc	pushq	%r10
0000000000018bde	pushq	%r11
0000000000018be0	pushq	%r12
0000000000018be2	pushq	%r13
0000000000018be4	pushq	%r14
0000000000018be6	pushq	%r15
0000000000018be8	subq	$0x10, %rsp
0000000000018bec	movss	%xmm0, (%rsp)
0000000000018bf1	subq	$0x10, %rsp
0000000000018bf5	movss	%xmm1, (%rsp)
0000000000018bfa	pushq	%rsi
0000000000018bfb	pushq	%rdi
0000000000018bfc	callq	__Z7getBasev ## getBase()
0000000000018c01	addq	$0x1237b0, %rax
0000000000018c07	popq	%rdi
0000000000018c08	popq	%rsi
0000000000018c09	movss	(%rsp), %xmm1
0000000000018c0e	addq	$0x10, %rsp
0000000000018c12	movss	(%rsp), %xmm0
0000000000018c17	addq	$0x10, %rsp
0000000000018c1b	popq	%r15
0000000000018c1d	popq	%r14
0000000000018c1f	popq	%r13
0000000000018c21	popq	%r12
0000000000018c23	popq	%r11
0000000000018c25	popq	%r10
0000000000018c27	popq	%r9
0000000000018c29	popq	%r8
0000000000018c2b	popq	%rcx
0000000000018c2c	popq	%rdx
0000000000018c2d	popq	%rsi
0000000000018c2e	popq	%rdi
0000000000018c2f	popq	%rbx
0000000000018c30	popq	%rbp
0000000000018c31	jmpq	*%rax
__ZN7cocos2d6CCNode15updateTransformEv:
0000000000018c33	pushq	%rbp
0000000000018c34	movq	%rsp, %rbp
0000000000018c37	pushq	%rbx
0000000000018c38	pushq	%rdi
0000000000018c39	pushq	%rsi
0000000000018c3a	pushq	%rdx
0000000000018c3b	pushq	%rcx
0000000000018c3c	pushq	%r8
0000000000018c3e	pushq	%r9
0000000000018c40	pushq	%r10
0000000000018c42	pushq	%r11
0000000000018c44	pushq	%r12
0000000000018c46	pushq	%r13
0000000000018c48	pushq	%r14
0000000000018c4a	pushq	%r15
0000000000018c4c	subq	$0x10, %rsp
0000000000018c50	movss	%xmm0, (%rsp)
0000000000018c55	subq	$0x10, %rsp
0000000000018c59	movss	%xmm1, (%rsp)
0000000000018c5e	pushq	%rsi
0000000000018c5f	pushq	%rdi
0000000000018c60	callq	__Z7getBasev ## getBase()
0000000000018c65	addq	$0x1249d0, %rax
0000000000018c6b	popq	%rdi
0000000000018c6c	popq	%rsi
0000000000018c6d	movss	(%rsp), %xmm1
0000000000018c72	addq	$0x10, %rsp
0000000000018c76	movss	(%rsp), %xmm0
0000000000018c7b	addq	$0x10, %rsp
0000000000018c7f	popq	%r15
0000000000018c81	popq	%r14
0000000000018c83	popq	%r13
0000000000018c85	popq	%r12
0000000000018c87	popq	%r11
0000000000018c89	popq	%r10
0000000000018c8b	popq	%r9
0000000000018c8d	popq	%r8
0000000000018c8f	popq	%rcx
0000000000018c90	popq	%rdx
0000000000018c91	popq	%rsi
0000000000018c92	popq	%rdi
0000000000018c93	popq	%rbx
0000000000018c94	popq	%rbp
0000000000018c95	jmpq	*%rax
__ZN7cocos2d6CCNode16getActionManagerEv:
0000000000018c97	pushq	%rbp
0000000000018c98	movq	%rsp, %rbp
0000000000018c9b	pushq	%rbx
0000000000018c9c	pushq	%rdi
0000000000018c9d	pushq	%rsi
0000000000018c9e	pushq	%rdx
0000000000018c9f	pushq	%rcx
0000000000018ca0	pushq	%r8
0000000000018ca2	pushq	%r9
0000000000018ca4	pushq	%r10
0000000000018ca6	pushq	%r11
0000000000018ca8	pushq	%r12
0000000000018caa	pushq	%r13
0000000000018cac	pushq	%r14
0000000000018cae	pushq	%r15
0000000000018cb0	subq	$0x10, %rsp
0000000000018cb4	movss	%xmm0, (%rsp)
0000000000018cb9	subq	$0x10, %rsp
0000000000018cbd	movss	%xmm1, (%rsp)
0000000000018cc2	pushq	%rsi
0000000000018cc3	pushq	%rdi
0000000000018cc4	callq	__Z7getBasev ## getBase()
0000000000018cc9	addq	$0x123e50, %rax
0000000000018ccf	popq	%rdi
0000000000018cd0	popq	%rsi
0000000000018cd1	movss	(%rsp), %xmm1
0000000000018cd6	addq	$0x10, %rsp
0000000000018cda	movss	(%rsp), %xmm0
0000000000018cdf	addq	$0x10, %rsp
0000000000018ce3	popq	%r15
0000000000018ce5	popq	%r14
0000000000018ce7	popq	%r13
0000000000018ce9	popq	%r12
0000000000018ceb	popq	%r11
0000000000018ced	popq	%r10
0000000000018cef	popq	%r9
0000000000018cf1	popq	%r8
0000000000018cf3	popq	%rcx
0000000000018cf4	popq	%rdx
0000000000018cf5	popq	%rsi
0000000000018cf6	popq	%rdi
0000000000018cf7	popq	%rbx
0000000000018cf8	popq	%rbp
0000000000018cf9	jmpq	*%rax
__ZN7cocos2d6CCNode16getGLServerStateEv:
0000000000018cfb	pushq	%rbp
0000000000018cfc	movq	%rsp, %rbp
0000000000018cff	pushq	%rbx
0000000000018d00	pushq	%rdi
0000000000018d01	pushq	%rsi
0000000000018d02	pushq	%rdx
0000000000018d03	pushq	%rcx
0000000000018d04	pushq	%r8
0000000000018d06	pushq	%r9
0000000000018d08	pushq	%r10
0000000000018d0a	pushq	%r11
0000000000018d0c	pushq	%r12
0000000000018d0e	pushq	%r13
0000000000018d10	pushq	%r14
0000000000018d12	pushq	%r15
0000000000018d14	subq	$0x10, %rsp
0000000000018d18	movss	%xmm0, (%rsp)
0000000000018d1d	subq	$0x10, %rsp
0000000000018d21	movss	%xmm1, (%rsp)
0000000000018d26	pushq	%rsi
0000000000018d27	pushq	%rdi
0000000000018d28	callq	__Z7getBasev ## getBase()
0000000000018d2d	addq	$0x122f90, %rax
0000000000018d33	popq	%rdi
0000000000018d34	popq	%rsi
0000000000018d35	movss	(%rsp), %xmm1
0000000000018d3a	addq	$0x10, %rsp
0000000000018d3e	movss	(%rsp), %xmm0
0000000000018d43	addq	$0x10, %rsp
0000000000018d47	popq	%r15
0000000000018d49	popq	%r14
0000000000018d4b	popq	%r13
0000000000018d4d	popq	%r12
0000000000018d4f	popq	%r11
0000000000018d51	popq	%r10
0000000000018d53	popq	%r9
0000000000018d55	popq	%r8
0000000000018d57	popq	%rcx
0000000000018d58	popq	%rdx
0000000000018d59	popq	%rsi
0000000000018d5a	popq	%rdi
0000000000018d5b	popq	%rbx
0000000000018d5c	popq	%rbp
0000000000018d5d	jmpq	*%rax
__ZN7cocos2d6CCNode16getShaderProgramEv:
0000000000018d5f	pushq	%rbp
0000000000018d60	movq	%rsp, %rbp
0000000000018d63	pushq	%rbx
0000000000018d64	pushq	%rdi
0000000000018d65	pushq	%rsi
0000000000018d66	pushq	%rdx
0000000000018d67	pushq	%rcx
0000000000018d68	pushq	%r8
0000000000018d6a	pushq	%r9
0000000000018d6c	pushq	%r10
0000000000018d6e	pushq	%r11
0000000000018d70	pushq	%r12
0000000000018d72	pushq	%r13
0000000000018d74	pushq	%r14
0000000000018d76	pushq	%r15
0000000000018d78	subq	$0x10, %rsp
0000000000018d7c	movss	%xmm0, (%rsp)
0000000000018d81	subq	$0x10, %rsp
0000000000018d85	movss	%xmm1, (%rsp)
0000000000018d8a	pushq	%rsi
0000000000018d8b	pushq	%rdi
0000000000018d8c	callq	__Z7getBasev ## getBase()
0000000000018d91	addq	$0x122f70, %rax
0000000000018d97	popq	%rdi
0000000000018d98	popq	%rsi
0000000000018d99	movss	(%rsp), %xmm1
0000000000018d9e	addq	$0x10, %rsp
0000000000018da2	movss	(%rsp), %xmm0
0000000000018da7	addq	$0x10, %rsp
0000000000018dab	popq	%r15
0000000000018dad	popq	%r14
0000000000018daf	popq	%r13
0000000000018db1	popq	%r12
0000000000018db3	popq	%r11
0000000000018db5	popq	%r10
0000000000018db7	popq	%r9
0000000000018db9	popq	%r8
0000000000018dbb	popq	%rcx
0000000000018dbc	popq	%rdx
0000000000018dbd	popq	%rsi
0000000000018dbe	popq	%rdi
0000000000018dbf	popq	%rbx
0000000000018dc0	popq	%rbp
0000000000018dc1	jmpq	*%rax
__ZN7cocos2d6CCNode16removeChildByTagEi:
0000000000018dc3	pushq	%rbp
0000000000018dc4	movq	%rsp, %rbp
0000000000018dc7	pushq	%rbx
0000000000018dc8	pushq	%rdi
0000000000018dc9	pushq	%rsi
0000000000018dca	pushq	%rdx
0000000000018dcb	pushq	%rcx
0000000000018dcc	pushq	%r8
0000000000018dce	pushq	%r9
0000000000018dd0	pushq	%r10
0000000000018dd2	pushq	%r11
0000000000018dd4	pushq	%r12
0000000000018dd6	pushq	%r13
0000000000018dd8	pushq	%r14
0000000000018dda	pushq	%r15
0000000000018ddc	subq	$0x10, %rsp
0000000000018de0	movss	%xmm0, (%rsp)
0000000000018de5	subq	$0x10, %rsp
0000000000018de9	movss	%xmm1, (%rsp)
0000000000018dee	pushq	%rsi
0000000000018def	pushq	%rdi
0000000000018df0	callq	__Z7getBasev ## getBase()
0000000000018df5	addq	$0x1235a0, %rax
0000000000018dfb	popq	%rdi
0000000000018dfc	popq	%rsi
0000000000018dfd	movss	(%rsp), %xmm1
0000000000018e02	addq	$0x10, %rsp
0000000000018e06	movss	(%rsp), %xmm0
0000000000018e0b	addq	$0x10, %rsp
0000000000018e0f	popq	%r15
0000000000018e11	popq	%r14
0000000000018e13	popq	%r13
0000000000018e15	popq	%r12
0000000000018e17	popq	%r11
0000000000018e19	popq	%r10
0000000000018e1b	popq	%r9
0000000000018e1d	popq	%r8
0000000000018e1f	popq	%rcx
0000000000018e20	popq	%rdx
0000000000018e21	popq	%rsi
0000000000018e22	popq	%rdi
0000000000018e23	popq	%rbx
0000000000018e24	popq	%rbp
0000000000018e25	jmpq	*%rax
__ZN7cocos2d6CCNode16removeChildByTagEib:
0000000000018e27	pushq	%rbp
0000000000018e28	movq	%rsp, %rbp
0000000000018e2b	pushq	%rbx
0000000000018e2c	pushq	%rdi
0000000000018e2d	pushq	%rsi
0000000000018e2e	pushq	%rdx
0000000000018e2f	pushq	%rcx
0000000000018e30	pushq	%r8
0000000000018e32	pushq	%r9
0000000000018e34	pushq	%r10
0000000000018e36	pushq	%r11
0000000000018e38	pushq	%r12
0000000000018e3a	pushq	%r13
0000000000018e3c	pushq	%r14
0000000000018e3e	pushq	%r15
0000000000018e40	subq	$0x10, %rsp
0000000000018e44	movss	%xmm0, (%rsp)
0000000000018e49	subq	$0x10, %rsp
0000000000018e4d	movss	%xmm1, (%rsp)
0000000000018e52	pushq	%rsi
0000000000018e53	pushq	%rdi
0000000000018e54	callq	__Z7getBasev ## getBase()
0000000000018e59	addq	$0x1235c0, %rax
0000000000018e5f	popq	%rdi
0000000000018e60	popq	%rsi
0000000000018e61	movss	(%rsp), %xmm1
0000000000018e66	addq	$0x10, %rsp
0000000000018e6a	movss	(%rsp), %xmm0
0000000000018e6f	addq	$0x10, %rsp
0000000000018e73	popq	%r15
0000000000018e75	popq	%r14
0000000000018e77	popq	%r13
0000000000018e79	popq	%r12
0000000000018e7b	popq	%r11
0000000000018e7d	popq	%r10
0000000000018e7f	popq	%r9
0000000000018e81	popq	%r8
0000000000018e83	popq	%rcx
0000000000018e84	popq	%rdx
0000000000018e85	popq	%rsi
0000000000018e86	popq	%rdi
0000000000018e87	popq	%rbx
0000000000018e88	popq	%rbp
0000000000018e89	jmpq	*%rax
__ZN7cocos2d6CCNode16removeFromParentEv:
0000000000018e8b	pushq	%rbp
0000000000018e8c	movq	%rsp, %rbp
0000000000018e8f	pushq	%rbx
0000000000018e90	pushq	%rdi
0000000000018e91	pushq	%rsi
0000000000018e92	pushq	%rdx
0000000000018e93	pushq	%rcx
0000000000018e94	pushq	%r8
0000000000018e96	pushq	%r9
0000000000018e98	pushq	%r10
0000000000018e9a	pushq	%r11
0000000000018e9c	pushq	%r12
0000000000018e9e	pushq	%r13
0000000000018ea0	pushq	%r14
0000000000018ea2	pushq	%r15
0000000000018ea4	subq	$0x10, %rsp
0000000000018ea8	movss	%xmm0, (%rsp)
0000000000018ead	subq	$0x10, %rsp
0000000000018eb1	movss	%xmm1, (%rsp)
0000000000018eb6	pushq	%rsi
0000000000018eb7	pushq	%rdi
0000000000018eb8	callq	__Z7getBasev ## getBase()
0000000000018ebd	addq	$0x1233f0, %rax
0000000000018ec3	popq	%rdi
0000000000018ec4	popq	%rsi
0000000000018ec5	movss	(%rsp), %xmm1
0000000000018eca	addq	$0x10, %rsp
0000000000018ece	movss	(%rsp), %xmm0
0000000000018ed3	addq	$0x10, %rsp
0000000000018ed7	popq	%r15
0000000000018ed9	popq	%r14
0000000000018edb	popq	%r13
0000000000018edd	popq	%r12
0000000000018edf	popq	%r11
0000000000018ee1	popq	%r10
0000000000018ee3	popq	%r9
0000000000018ee5	popq	%r8
0000000000018ee7	popq	%rcx
0000000000018ee8	popq	%rdx
0000000000018ee9	popq	%rsi
0000000000018eea	popq	%rdi
0000000000018eeb	popq	%rbx
0000000000018eec	popq	%rbp
0000000000018eed	jmpq	*%rax
__ZN7cocos2d6CCNode16setActionManagerEPNS_15CCActionManagerE:
0000000000018eef	pushq	%rbp
0000000000018ef0	movq	%rsp, %rbp
0000000000018ef3	pushq	%rbx
0000000000018ef4	pushq	%rdi
0000000000018ef5	pushq	%rsi
0000000000018ef6	pushq	%rdx
0000000000018ef7	pushq	%rcx
0000000000018ef8	pushq	%r8
0000000000018efa	pushq	%r9
0000000000018efc	pushq	%r10
0000000000018efe	pushq	%r11
0000000000018f00	pushq	%r12
0000000000018f02	pushq	%r13
0000000000018f04	pushq	%r14
0000000000018f06	pushq	%r15
0000000000018f08	subq	$0x10, %rsp
0000000000018f0c	movss	%xmm0, (%rsp)
0000000000018f11	subq	$0x10, %rsp
0000000000018f15	movss	%xmm1, (%rsp)
0000000000018f1a	pushq	%rsi
0000000000018f1b	pushq	%rdi
0000000000018f1c	callq	__Z7getBasev ## getBase()
0000000000018f21	addq	$0x123e00, %rax
0000000000018f27	popq	%rdi
0000000000018f28	popq	%rsi
0000000000018f29	movss	(%rsp), %xmm1
0000000000018f2e	addq	$0x10, %rsp
0000000000018f32	movss	(%rsp), %xmm0
0000000000018f37	addq	$0x10, %rsp
0000000000018f3b	popq	%r15
0000000000018f3d	popq	%r14
0000000000018f3f	popq	%r13
0000000000018f41	popq	%r12
0000000000018f43	popq	%r11
0000000000018f45	popq	%r10
0000000000018f47	popq	%r9
0000000000018f49	popq	%r8
0000000000018f4b	popq	%rcx
0000000000018f4c	popq	%rdx
0000000000018f4d	popq	%rsi
0000000000018f4e	popq	%rdi
0000000000018f4f	popq	%rbx
0000000000018f50	popq	%rbp
0000000000018f51	jmpq	*%rax
__ZN7cocos2d6CCNode16setGLServerStateENS_15ccGLServerStateE:
0000000000018f53	pushq	%rbp
0000000000018f54	movq	%rsp, %rbp
0000000000018f57	pushq	%rbx
0000000000018f58	pushq	%rdi
0000000000018f59	pushq	%rsi
0000000000018f5a	pushq	%rdx
0000000000018f5b	pushq	%rcx
0000000000018f5c	pushq	%r8
0000000000018f5e	pushq	%r9
0000000000018f60	pushq	%r10
0000000000018f62	pushq	%r11
0000000000018f64	pushq	%r12
0000000000018f66	pushq	%r13
0000000000018f68	pushq	%r14
0000000000018f6a	pushq	%r15
0000000000018f6c	subq	$0x10, %rsp
0000000000018f70	movss	%xmm0, (%rsp)
0000000000018f75	subq	$0x10, %rsp
0000000000018f79	movss	%xmm1, (%rsp)
0000000000018f7e	pushq	%rsi
0000000000018f7f	pushq	%rdi
0000000000018f80	callq	__Z7getBasev ## getBase()
0000000000018f85	addq	$0x122fa0, %rax
0000000000018f8b	popq	%rdi
0000000000018f8c	popq	%rsi
0000000000018f8d	movss	(%rsp), %xmm1
0000000000018f92	addq	$0x10, %rsp
0000000000018f96	movss	(%rsp), %xmm0
0000000000018f9b	addq	$0x10, %rsp
0000000000018f9f	popq	%r15
0000000000018fa1	popq	%r14
0000000000018fa3	popq	%r13
0000000000018fa5	popq	%r12
0000000000018fa7	popq	%r11
0000000000018fa9	popq	%r10
0000000000018fab	popq	%r9
0000000000018fad	popq	%r8
0000000000018faf	popq	%rcx
0000000000018fb0	popq	%rdx
0000000000018fb1	popq	%rsi
0000000000018fb2	popq	%rdi
0000000000018fb3	popq	%rbx
0000000000018fb4	popq	%rbp
0000000000018fb5	jmpq	*%rax
__ZN7cocos2d6CCNode16setShaderProgramEPNS_11CCGLProgramE:
0000000000018fb7	pushq	%rbp
0000000000018fb8	movq	%rsp, %rbp
0000000000018fbb	pushq	%rbx
0000000000018fbc	pushq	%rdi
0000000000018fbd	pushq	%rsi
0000000000018fbe	pushq	%rdx
0000000000018fbf	pushq	%rcx
0000000000018fc0	pushq	%r8
0000000000018fc2	pushq	%r9
0000000000018fc4	pushq	%r10
0000000000018fc6	pushq	%r11
0000000000018fc8	pushq	%r12
0000000000018fca	pushq	%r13
0000000000018fcc	pushq	%r14
0000000000018fce	pushq	%r15
0000000000018fd0	subq	$0x10, %rsp
0000000000018fd4	movss	%xmm0, (%rsp)
0000000000018fd9	subq	$0x10, %rsp
0000000000018fdd	movss	%xmm1, (%rsp)
0000000000018fe2	pushq	%rsi
0000000000018fe3	pushq	%rdi
0000000000018fe4	callq	__Z7getBasev ## getBase()
0000000000018fe9	addq	$0x122ff0, %rax
0000000000018fef	popq	%rdi
0000000000018ff0	popq	%rsi
0000000000018ff1	movss	(%rsp), %xmm1
0000000000018ff6	addq	$0x10, %rsp
0000000000018ffa	movss	(%rsp), %xmm0
0000000000018fff	addq	$0x10, %rsp
0000000000019003	popq	%r15
0000000000019005	popq	%r14
0000000000019007	popq	%r13
0000000000019009	popq	%r12
000000000001900b	popq	%r11
000000000001900d	popq	%r10
000000000001900f	popq	%r9
0000000000019011	popq	%r8
0000000000019013	popq	%rcx
0000000000019014	popq	%rdx
0000000000019015	popq	%rsi
0000000000019016	popq	%rdi
0000000000019017	popq	%rbx
0000000000019018	popq	%rbp
0000000000019019	jmpq	*%rax
__ZN7cocos2d6CCNode17getOrderOfArrivalEv:
000000000001901b	pushq	%rbp
000000000001901c	movq	%rsp, %rbp
000000000001901f	pushq	%rbx
0000000000019020	pushq	%rdi
0000000000019021	pushq	%rsi
0000000000019022	pushq	%rdx
0000000000019023	pushq	%rcx
0000000000019024	pushq	%r8
0000000000019026	pushq	%r9
0000000000019028	pushq	%r10
000000000001902a	pushq	%r11
000000000001902c	pushq	%r12
000000000001902e	pushq	%r13
0000000000019030	pushq	%r14
0000000000019032	pushq	%r15
0000000000019034	subq	$0x10, %rsp
0000000000019038	movss	%xmm0, (%rsp)
000000000001903d	subq	$0x10, %rsp
0000000000019041	movss	%xmm1, (%rsp)
0000000000019046	pushq	%rsi
0000000000019047	pushq	%rdi
0000000000019048	callq	__Z7getBasev ## getBase()
000000000001904d	addq	$0x122f50, %rax
0000000000019053	popq	%rdi
0000000000019054	popq	%rsi
0000000000019055	movss	(%rsp), %xmm1
000000000001905a	addq	$0x10, %rsp
000000000001905e	movss	(%rsp), %xmm0
0000000000019063	addq	$0x10, %rsp
0000000000019067	popq	%r15
0000000000019069	popq	%r14
000000000001906b	popq	%r13
000000000001906d	popq	%r12
000000000001906f	popq	%r11
0000000000019071	popq	%r10
0000000000019073	popq	%r9
0000000000019075	popq	%r8
0000000000019077	popq	%rcx
0000000000019078	popq	%rdx
0000000000019079	popq	%rsi
000000000001907a	popq	%rdi
000000000001907b	popq	%rbx
000000000001907c	popq	%rbp
000000000001907d	jmpq	*%rax
__ZN7cocos2d6CCNode17removeAllChildrenEv:
000000000001907f	pushq	%rbp
0000000000019080	movq	%rsp, %rbp
0000000000019083	pushq	%rbx
0000000000019084	pushq	%rdi
0000000000019085	pushq	%rsi
0000000000019086	pushq	%rdx
0000000000019087	pushq	%rcx
0000000000019088	pushq	%r8
000000000001908a	pushq	%r9
000000000001908c	pushq	%r10
000000000001908e	pushq	%r11
0000000000019090	pushq	%r12
0000000000019092	pushq	%r13
0000000000019094	pushq	%r14
0000000000019096	pushq	%r15
0000000000019098	subq	$0x10, %rsp
000000000001909c	movss	%xmm0, (%rsp)
00000000000190a1	subq	$0x10, %rsp
00000000000190a5	movss	%xmm1, (%rsp)
00000000000190aa	pushq	%rsi
00000000000190ab	pushq	%rdi
00000000000190ac	callq	__Z7getBasev ## getBase()
00000000000190b1	addq	$0x123600, %rax
00000000000190b7	popq	%rdi
00000000000190b8	popq	%rsi
00000000000190b9	movss	(%rsp), %xmm1
00000000000190be	addq	$0x10, %rsp
00000000000190c2	movss	(%rsp), %xmm0
00000000000190c7	addq	$0x10, %rsp
00000000000190cb	popq	%r15
00000000000190cd	popq	%r14
00000000000190cf	popq	%r13
00000000000190d1	popq	%r12
00000000000190d3	popq	%r11
00000000000190d5	popq	%r10
00000000000190d7	popq	%r9
00000000000190d9	popq	%r8
00000000000190db	popq	%rcx
00000000000190dc	popq	%rdx
00000000000190dd	popq	%rsi
00000000000190de	popq	%rdi
00000000000190df	popq	%rbx
00000000000190e0	popq	%rbp
00000000000190e1	jmpq	*%rax
__ZN7cocos2d6CCNode17setOrderOfArrivalEj:
00000000000190e3	pushq	%rbp
00000000000190e4	movq	%rsp, %rbp
00000000000190e7	pushq	%rbx
00000000000190e8	pushq	%rdi
00000000000190e9	pushq	%rsi
00000000000190ea	pushq	%rdx
00000000000190eb	pushq	%rcx
00000000000190ec	pushq	%r8
00000000000190ee	pushq	%r9
00000000000190f0	pushq	%r10
00000000000190f2	pushq	%r11
00000000000190f4	pushq	%r12
00000000000190f6	pushq	%r13
00000000000190f8	pushq	%r14
00000000000190fa	pushq	%r15
00000000000190fc	subq	$0x10, %rsp
0000000000019100	movss	%xmm0, (%rsp)
0000000000019105	subq	$0x10, %rsp
0000000000019109	movss	%xmm1, (%rsp)
000000000001910e	pushq	%rsi
000000000001910f	pushq	%rdi
0000000000019110	callq	__Z7getBasev ## getBase()
0000000000019115	addq	$0x122f60, %rax
000000000001911b	popq	%rdi
000000000001911c	popq	%rsi
000000000001911d	movss	(%rsp), %xmm1
0000000000019122	addq	$0x10, %rsp
0000000000019126	movss	(%rsp), %xmm0
000000000001912b	addq	$0x10, %rsp
000000000001912f	popq	%r15
0000000000019131	popq	%r14
0000000000019133	popq	%r13
0000000000019135	popq	%r12
0000000000019137	popq	%r11
0000000000019139	popq	%r10
000000000001913b	popq	%r9
000000000001913d	popq	%r8
000000000001913f	popq	%rcx
0000000000019140	popq	%rdx
0000000000019141	popq	%rsi
0000000000019142	popq	%rdi
0000000000019143	popq	%rbx
0000000000019144	popq	%rbp
0000000000019145	jmpq	*%rax
__ZN7cocos2d6CCNode17updateTweenActionEfPKc:
0000000000019147	pushq	%rbp
0000000000019148	movq	%rsp, %rbp
000000000001914b	pushq	%rbx
000000000001914c	pushq	%rdi
000000000001914d	pushq	%rsi
000000000001914e	pushq	%rdx
000000000001914f	pushq	%rcx
0000000000019150	pushq	%r8
0000000000019152	pushq	%r9
0000000000019154	pushq	%r10
0000000000019156	pushq	%r11
0000000000019158	pushq	%r12
000000000001915a	pushq	%r13
000000000001915c	pushq	%r14
000000000001915e	pushq	%r15
0000000000019160	subq	$0x10, %rsp
0000000000019164	movss	%xmm0, (%rsp)
0000000000019169	subq	$0x10, %rsp
000000000001916d	movss	%xmm1, (%rsp)
0000000000019172	pushq	%rsi
0000000000019173	pushq	%rdi
0000000000019174	callq	__Z7getBasev ## getBase()
0000000000019179	addq	$0x1249c0, %rax
000000000001917f	popq	%rdi
0000000000019180	popq	%rsi
0000000000019181	movss	(%rsp), %xmm1
0000000000019186	addq	$0x10, %rsp
000000000001918a	movss	(%rsp), %xmm0
000000000001918f	addq	$0x10, %rsp
0000000000019193	popq	%r15
0000000000019195	popq	%r14
0000000000019197	popq	%r13
0000000000019199	popq	%r12
000000000001919b	popq	%r11
000000000001919d	popq	%r10
000000000001919f	popq	%r9
00000000000191a1	popq	%r8
00000000000191a3	popq	%rcx
00000000000191a4	popq	%rdx
00000000000191a5	popq	%rsi
00000000000191a6	popq	%rdi
00000000000191a7	popq	%rbx
00000000000191a8	popq	%rbp
00000000000191a9	jmpq	*%rax
__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE:
00000000000191ab	pushq	%rbp
00000000000191ac	movq	%rsp, %rbp
00000000000191af	pushq	%rbx
00000000000191b0	pushq	%rdi
00000000000191b1	pushq	%rsi
00000000000191b2	pushq	%rdx
00000000000191b3	pushq	%rcx
00000000000191b4	pushq	%r8
00000000000191b6	pushq	%r9
00000000000191b8	pushq	%r10
00000000000191ba	pushq	%r11
00000000000191bc	pushq	%r12
00000000000191be	pushq	%r13
00000000000191c0	pushq	%r14
00000000000191c2	pushq	%r15
00000000000191c4	subq	$0x10, %rsp
00000000000191c8	movss	%xmm0, (%rsp)
00000000000191cd	subq	$0x10, %rsp
00000000000191d1	movss	%xmm1, (%rsp)
00000000000191d6	pushq	%rsi
00000000000191d7	pushq	%rdi
00000000000191d8	callq	__Z7getBasev ## getBase()
00000000000191dd	addq	$0x124750, %rax
00000000000191e3	popq	%rdi
00000000000191e4	popq	%rsi
00000000000191e5	movss	(%rsp), %xmm1
00000000000191ea	addq	$0x10, %rsp
00000000000191ee	movss	(%rsp), %xmm0
00000000000191f3	addq	$0x10, %rsp
00000000000191f7	popq	%r15
00000000000191f9	popq	%r14
00000000000191fb	popq	%r13
00000000000191fd	popq	%r12
00000000000191ff	popq	%r11
0000000000019201	popq	%r10
0000000000019203	popq	%r9
0000000000019205	popq	%r8
0000000000019207	popq	%rcx
0000000000019208	popq	%rdx
0000000000019209	popq	%rsi
000000000001920a	popq	%rdi
000000000001920b	popq	%rbx
000000000001920c	popq	%rbp
000000000001920d	jmpq	*%rax
__ZN7cocos2d6CCNode18removeMeAndCleanupEv:
000000000001920f	pushq	%rbp
0000000000019210	movq	%rsp, %rbp
0000000000019213	pushq	%rbx
0000000000019214	pushq	%rdi
0000000000019215	pushq	%rsi
0000000000019216	pushq	%rdx
0000000000019217	pushq	%rcx
0000000000019218	pushq	%r8
000000000001921a	pushq	%r9
000000000001921c	pushq	%r10
000000000001921e	pushq	%r11
0000000000019220	pushq	%r12
0000000000019222	pushq	%r13
0000000000019224	pushq	%r14
0000000000019226	pushq	%r15
0000000000019228	subq	$0x10, %rsp
000000000001922c	movss	%xmm0, (%rsp)
0000000000019231	subq	$0x10, %rsp
0000000000019235	movss	%xmm1, (%rsp)
000000000001923a	pushq	%rsi
000000000001923b	pushq	%rdi
000000000001923c	callq	__Z7getBasev ## getBase()
0000000000019241	addq	$0x123440, %rax
0000000000019247	popq	%rdi
0000000000019248	popq	%rsi
0000000000019249	movss	(%rsp), %xmm1
000000000001924e	addq	$0x10, %rsp
0000000000019252	movss	(%rsp), %xmm0
0000000000019257	addq	$0x10, %rsp
000000000001925b	popq	%r15
000000000001925d	popq	%r14
000000000001925f	popq	%r13
0000000000019261	popq	%r12
0000000000019263	popq	%r11
0000000000019265	popq	%r10
0000000000019267	popq	%r9
0000000000019269	popq	%r8
000000000001926b	popq	%rcx
000000000001926c	popq	%rdx
000000000001926d	popq	%rsi
000000000001926e	popq	%rdi
000000000001926f	popq	%rbx
0000000000019270	popq	%rbp
0000000000019271	jmpq	*%rax
__ZN7cocos2d6CCNode19removeAllComponentsEv:
0000000000019273	pushq	%rbp
0000000000019274	movq	%rsp, %rbp
0000000000019277	pushq	%rbx
0000000000019278	pushq	%rdi
0000000000019279	pushq	%rsi
000000000001927a	pushq	%rdx
000000000001927b	pushq	%rcx
000000000001927c	pushq	%r8
000000000001927e	pushq	%r9
0000000000019280	pushq	%r10
0000000000019282	pushq	%r11
0000000000019284	pushq	%r12
0000000000019286	pushq	%r13
0000000000019288	pushq	%r14
000000000001928a	pushq	%r15
000000000001928c	subq	$0x10, %rsp
0000000000019290	movss	%xmm0, (%rsp)
0000000000019295	subq	$0x10, %rsp
0000000000019299	movss	%xmm1, (%rsp)
000000000001929e	pushq	%rsi
000000000001929f	pushq	%rdi
00000000000192a0	callq	__Z7getBasev ## getBase()
00000000000192a5	addq	$0x124aa0, %rax
00000000000192ab	popq	%rdi
00000000000192ac	popq	%rsi
00000000000192ad	movss	(%rsp), %xmm1
00000000000192b2	addq	$0x10, %rsp
00000000000192b6	movss	(%rsp), %xmm0
00000000000192bb	addq	$0x10, %rsp
00000000000192bf	popq	%r15
00000000000192c1	popq	%r14
00000000000192c3	popq	%r13
00000000000192c5	popq	%r12
00000000000192c7	popq	%r11
00000000000192c9	popq	%r10
00000000000192cb	popq	%r9
00000000000192cd	popq	%r8
00000000000192cf	popq	%rcx
00000000000192d0	popq	%rdx
00000000000192d1	popq	%rsi
00000000000192d2	popq	%rdi
00000000000192d3	popq	%rbx
00000000000192d4	popq	%rbp
00000000000192d5	jmpq	*%rax
__ZN7cocos2d6CCNode20getScaledContentSizeEv:
00000000000192d7	pushq	%rbp
00000000000192d8	movq	%rsp, %rbp
00000000000192db	pushq	%rbx
00000000000192dc	pushq	%rdi
00000000000192dd	pushq	%rsi
00000000000192de	pushq	%rdx
00000000000192df	pushq	%rcx
00000000000192e0	pushq	%r8
00000000000192e2	pushq	%r9
00000000000192e4	pushq	%r10
00000000000192e6	pushq	%r11
00000000000192e8	pushq	%r12
00000000000192ea	pushq	%r13
00000000000192ec	pushq	%r14
00000000000192ee	pushq	%r15
00000000000192f0	subq	$0x10, %rsp
00000000000192f4	movss	%xmm0, (%rsp)
00000000000192f9	subq	$0x10, %rsp
00000000000192fd	movss	%xmm1, (%rsp)
0000000000019302	pushq	%rsi
0000000000019303	pushq	%rdi
0000000000019304	callq	__Z7getBasev ## getBase()
0000000000019309	addq	$0x122e10, %rax
000000000001930f	popq	%rdi
0000000000019310	popq	%rsi
0000000000019311	movss	(%rsp), %xmm1
0000000000019316	addq	$0x10, %rsp
000000000001931a	movss	(%rsp), %xmm0
000000000001931f	addq	$0x10, %rsp
0000000000019323	popq	%r15
0000000000019325	popq	%r14
0000000000019327	popq	%r13
0000000000019329	popq	%r12
000000000001932b	popq	%r11
000000000001932d	popq	%r10
000000000001932f	popq	%r9
0000000000019331	popq	%r8
0000000000019333	popq	%rcx
0000000000019334	popq	%rdx
0000000000019335	popq	%rsi
0000000000019336	popq	%rdi
0000000000019337	popq	%rbx
0000000000019338	popq	%rbp
0000000000019339	jmpq	*%rax
__ZN7cocos2d6CCNode20nodeToWorldTransformEv:
000000000001933b	pushq	%rbp
000000000001933c	movq	%rsp, %rbp
000000000001933f	pushq	%rbx
0000000000019340	pushq	%rdi
0000000000019341	pushq	%rsi
0000000000019342	pushq	%rdx
0000000000019343	pushq	%rcx
0000000000019344	pushq	%r8
0000000000019346	pushq	%r9
0000000000019348	pushq	%r10
000000000001934a	pushq	%r11
000000000001934c	pushq	%r12
000000000001934e	pushq	%r13
0000000000019350	pushq	%r14
0000000000019352	pushq	%r15
0000000000019354	subq	$0x10, %rsp
0000000000019358	movss	%xmm0, (%rsp)
000000000001935d	subq	$0x10, %rsp
0000000000019361	movss	%xmm1, (%rsp)
0000000000019366	pushq	%rsi
0000000000019367	pushq	%rdi
0000000000019368	callq	__Z7getBasev ## getBase()
000000000001936d	addq	$0x124670, %rax
0000000000019373	popq	%rdi
0000000000019374	popq	%rsi
0000000000019375	movss	(%rsp), %xmm1
000000000001937a	addq	$0x10, %rsp
000000000001937e	movss	(%rsp), %xmm0
0000000000019383	addq	$0x10, %rsp
0000000000019387	popq	%r15
0000000000019389	popq	%r14
000000000001938b	popq	%r13
000000000001938d	popq	%r12
000000000001938f	popq	%r11
0000000000019391	popq	%r10
0000000000019393	popq	%r9
0000000000019395	popq	%r8
0000000000019397	popq	%rcx
0000000000019398	popq	%rdx
0000000000019399	popq	%rsi
000000000001939a	popq	%rdi
000000000001939b	popq	%rbx
000000000001939c	popq	%rbp
000000000001939d	jmpq	*%rax
__ZN7cocos2d6CCNode20worldToNodeTransformEv:
000000000001939f	pushq	%rbp
00000000000193a0	movq	%rsp, %rbp
00000000000193a3	pushq	%rbx
00000000000193a4	pushq	%rdi
00000000000193a5	pushq	%rsi
00000000000193a6	pushq	%rdx
00000000000193a7	pushq	%rcx
00000000000193a8	pushq	%r8
00000000000193aa	pushq	%r9
00000000000193ac	pushq	%r10
00000000000193ae	pushq	%r11
00000000000193b0	pushq	%r12
00000000000193b2	pushq	%r13
00000000000193b4	pushq	%r14
00000000000193b6	pushq	%r15
00000000000193b8	subq	$0x10, %rsp
00000000000193bc	movss	%xmm0, (%rsp)
00000000000193c1	subq	$0x10, %rsp
00000000000193c5	movss	%xmm1, (%rsp)
00000000000193ca	pushq	%rsi
00000000000193cb	pushq	%rdi
00000000000193cc	callq	__Z7getBasev ## getBase()
00000000000193d1	addq	$0x124710, %rax
00000000000193d7	popq	%rdi
00000000000193d8	popq	%rsi
00000000000193d9	movss	(%rsp), %xmm1
00000000000193de	addq	$0x10, %rsp
00000000000193e2	movss	(%rsp), %xmm0
00000000000193e7	addq	$0x10, %rsp
00000000000193eb	popq	%r15
00000000000193ed	popq	%r14
00000000000193ef	popq	%r13
00000000000193f1	popq	%r12
00000000000193f3	popq	%r11
00000000000193f5	popq	%r10
00000000000193f7	popq	%r9
00000000000193f9	popq	%r8
00000000000193fb	popq	%rcx
00000000000193fc	popq	%rdx
00000000000193fd	popq	%rsi
00000000000193fe	popq	%rdi
00000000000193ff	popq	%rbx
0000000000019400	popq	%rbp
0000000000019401	jmpq	*%rax
__ZN7cocos2d6CCNode21nodeToParentTransformEv:
0000000000019403	pushq	%rbp
0000000000019404	movq	%rsp, %rbp
0000000000019407	pushq	%rbx
0000000000019408	pushq	%rdi
0000000000019409	pushq	%rsi
000000000001940a	pushq	%rdx
000000000001940b	pushq	%rcx
000000000001940c	pushq	%r8
000000000001940e	pushq	%r9
0000000000019410	pushq	%r10
0000000000019412	pushq	%r11
0000000000019414	pushq	%r12
0000000000019416	pushq	%r13
0000000000019418	pushq	%r14
000000000001941a	pushq	%r15
000000000001941c	subq	$0x10, %rsp
0000000000019420	movss	%xmm0, (%rsp)
0000000000019425	subq	$0x10, %rsp
0000000000019429	movss	%xmm1, (%rsp)
000000000001942e	pushq	%rsi
000000000001942f	pushq	%rdi
0000000000019430	callq	__Z7getBasev ## getBase()
0000000000019435	addq	$0x124210, %rax
000000000001943b	popq	%rdi
000000000001943c	popq	%rsi
000000000001943d	movss	(%rsp), %xmm1
0000000000019442	addq	$0x10, %rsp
0000000000019446	movss	(%rsp), %xmm0
000000000001944b	addq	$0x10, %rsp
000000000001944f	popq	%r15
0000000000019451	popq	%r14
0000000000019453	popq	%r13
0000000000019455	popq	%r12
0000000000019457	popq	%r11
0000000000019459	popq	%r10
000000000001945b	popq	%r9
000000000001945d	popq	%r8
000000000001945f	popq	%rcx
0000000000019460	popq	%rdx
0000000000019461	popq	%rsi
0000000000019462	popq	%rdi
0000000000019463	popq	%rbx
0000000000019464	popq	%rbp
0000000000019465	jmpq	*%rax
__ZN7cocos2d6CCNode21parentToNodeTransformEv:
0000000000019467	pushq	%rbp
0000000000019468	movq	%rsp, %rbp
000000000001946b	pushq	%rbx
000000000001946c	pushq	%rdi
000000000001946d	pushq	%rsi
000000000001946e	pushq	%rdx
000000000001946f	pushq	%rcx
0000000000019470	pushq	%r8
0000000000019472	pushq	%r9
0000000000019474	pushq	%r10
0000000000019476	pushq	%r11
0000000000019478	pushq	%r12
000000000001947a	pushq	%r13
000000000001947c	pushq	%r14
000000000001947e	pushq	%r15
0000000000019480	subq	$0x10, %rsp
0000000000019484	movss	%xmm0, (%rsp)
0000000000019489	subq	$0x10, %rsp
000000000001948d	movss	%xmm1, (%rsp)
0000000000019492	pushq	%rsi
0000000000019493	pushq	%rdi
0000000000019494	callq	__Z7getBasev ## getBase()
0000000000019499	addq	$0x1245d0, %rax
000000000001949f	popq	%rdi
00000000000194a0	popq	%rsi
00000000000194a1	movss	(%rsp), %xmm1
00000000000194a6	addq	$0x10, %rsp
00000000000194aa	movss	(%rsp), %xmm0
00000000000194af	addq	$0x10, %rsp
00000000000194b3	popq	%r15
00000000000194b5	popq	%r14
00000000000194b7	popq	%r13
00000000000194b9	popq	%r12
00000000000194bb	popq	%r11
00000000000194bd	popq	%r10
00000000000194bf	popq	%r9
00000000000194c1	popq	%r8
00000000000194c3	popq	%rcx
00000000000194c4	popq	%rdx
00000000000194c5	popq	%rsi
00000000000194c6	popq	%rdi
00000000000194c7	popq	%rbx
00000000000194c8	popq	%rbp
00000000000194c9	jmpq	*%rax
__ZN7cocos2d6CCNode21registerScriptHandlerEi:
00000000000194cb	pushq	%rbp
00000000000194cc	movq	%rsp, %rbp
00000000000194cf	pushq	%rbx
00000000000194d0	pushq	%rdi
00000000000194d1	pushq	%rsi
00000000000194d2	pushq	%rdx
00000000000194d3	pushq	%rcx
00000000000194d4	pushq	%r8
00000000000194d6	pushq	%r9
00000000000194d8	pushq	%r10
00000000000194da	pushq	%r11
00000000000194dc	pushq	%r12
00000000000194de	pushq	%r13
00000000000194e0	pushq	%r14
00000000000194e2	pushq	%r15
00000000000194e4	subq	$0x10, %rsp
00000000000194e8	movss	%xmm0, (%rsp)
00000000000194ed	subq	$0x10, %rsp
00000000000194f1	movss	%xmm1, (%rsp)
00000000000194f6	pushq	%rsi
00000000000194f7	pushq	%rdi
00000000000194f8	callq	__Z7getBasev ## getBase()
00000000000194fd	addq	$0x123d90, %rax
0000000000019503	popq	%rdi
0000000000019504	popq	%rsi
0000000000019505	movss	(%rsp), %xmm1
000000000001950a	addq	$0x10, %rsp
000000000001950e	movss	(%rsp), %xmm0
0000000000019513	addq	$0x10, %rsp
0000000000019517	popq	%r15
0000000000019519	popq	%r14
000000000001951b	popq	%r13
000000000001951d	popq	%r12
000000000001951f	popq	%r11
0000000000019521	popq	%r10
0000000000019523	popq	%r9
0000000000019525	popq	%r8
0000000000019527	popq	%rcx
0000000000019528	popq	%rdx
0000000000019529	popq	%rsi
000000000001952a	popq	%rdi
000000000001952b	popq	%rbx
000000000001952c	popq	%rbp
000000000001952d	jmpq	*%rax
__ZN7cocos2d6CCNode22getAnchorPointInPointsEv:
000000000001952f	pushq	%rbp
0000000000019530	movq	%rsp, %rbp
0000000000019533	pushq	%rbx
0000000000019534	pushq	%rdi
0000000000019535	pushq	%rsi
0000000000019536	pushq	%rdx
0000000000019537	pushq	%rcx
0000000000019538	pushq	%r8
000000000001953a	pushq	%r9
000000000001953c	pushq	%r10
000000000001953e	pushq	%r11
0000000000019540	pushq	%r12
0000000000019542	pushq	%r13
0000000000019544	pushq	%r14
0000000000019546	pushq	%r15
0000000000019548	subq	$0x10, %rsp
000000000001954c	movss	%xmm0, (%rsp)
0000000000019551	subq	$0x10, %rsp
0000000000019555	movss	%xmm1, (%rsp)
000000000001955a	pushq	%rsi
000000000001955b	pushq	%rdi
000000000001955c	callq	__Z7getBasev ## getBase()
0000000000019561	addq	$0x122d70, %rax
0000000000019567	popq	%rdi
0000000000019568	popq	%rsi
0000000000019569	movss	(%rsp), %xmm1
000000000001956e	addq	$0x10, %rsp
0000000000019572	movss	(%rsp), %xmm0
0000000000019577	addq	$0x10, %rsp
000000000001957b	popq	%r15
000000000001957d	popq	%r14
000000000001957f	popq	%r13
0000000000019581	popq	%r12
0000000000019583	popq	%r11
0000000000019585	popq	%r10
0000000000019587	popq	%r9
0000000000019589	popq	%r8
000000000001958b	popq	%rcx
000000000001958c	popq	%rdx
000000000001958d	popq	%rsi
000000000001958e	popq	%rdi
000000000001958f	popq	%rbx
0000000000019590	popq	%rbp
0000000000019591	jmpq	*%rax
__ZN7cocos2d6CCNode23unregisterScriptHandlerEv:
0000000000019593	pushq	%rbp
0000000000019594	movq	%rsp, %rbp
0000000000019597	pushq	%rbx
0000000000019598	pushq	%rdi
0000000000019599	pushq	%rsi
000000000001959a	pushq	%rdx
000000000001959b	pushq	%rcx
000000000001959c	pushq	%r8
000000000001959e	pushq	%r9
00000000000195a0	pushq	%r10
00000000000195a2	pushq	%r11
00000000000195a4	pushq	%r12
00000000000195a6	pushq	%r13
00000000000195a8	pushq	%r14
00000000000195aa	pushq	%r15
00000000000195ac	subq	$0x10, %rsp
00000000000195b0	movss	%xmm0, (%rsp)
00000000000195b5	subq	$0x10, %rsp
00000000000195b9	movss	%xmm1, (%rsp)
00000000000195be	pushq	%rsi
00000000000195bf	pushq	%rdi
00000000000195c0	callq	__Z7getBasev ## getBase()
00000000000195c5	addq	$0x123dc0, %rax
00000000000195cb	popq	%rdi
00000000000195cc	popq	%rsi
00000000000195cd	movss	(%rsp), %xmm1
00000000000195d2	addq	$0x10, %rsp
00000000000195d6	movss	(%rsp), %xmm0
00000000000195db	addq	$0x10, %rsp
00000000000195df	popq	%r15
00000000000195e1	popq	%r14
00000000000195e3	popq	%r13
00000000000195e5	popq	%r12
00000000000195e7	popq	%r11
00000000000195e9	popq	%r10
00000000000195eb	popq	%r9
00000000000195ed	popq	%r8
00000000000195ef	popq	%rcx
00000000000195f0	popq	%rdx
00000000000195f1	popq	%rsi
00000000000195f2	popq	%rdi
00000000000195f3	popq	%rbx
00000000000195f4	popq	%rbp
00000000000195f5	jmpq	*%rax
__ZN7cocos2d6CCNode24onExitTransitionDidStartEv:
00000000000195f7	pushq	%rbp
00000000000195f8	movq	%rsp, %rbp
00000000000195fb	pushq	%rbx
00000000000195fc	pushq	%rdi
00000000000195fd	pushq	%rsi
00000000000195fe	pushq	%rdx
00000000000195ff	pushq	%rcx
0000000000019600	pushq	%r8
0000000000019602	pushq	%r9
0000000000019604	pushq	%r10
0000000000019606	pushq	%r11
0000000000019608	pushq	%r12
000000000001960a	pushq	%r13
000000000001960c	pushq	%r14
000000000001960e	pushq	%r15
0000000000019610	subq	$0x10, %rsp
0000000000019614	movss	%xmm0, (%rsp)
0000000000019619	subq	$0x10, %rsp
000000000001961d	movss	%xmm1, (%rsp)
0000000000019622	pushq	%rsi
0000000000019623	pushq	%rdi
0000000000019624	callq	__Z7getBasev ## getBase()
0000000000019629	addq	$0x123c00, %rax
000000000001962f	popq	%rdi
0000000000019630	popq	%rsi
0000000000019631	movss	(%rsp), %xmm1
0000000000019636	addq	$0x10, %rsp
000000000001963a	movss	(%rsp), %xmm0
000000000001963f	addq	$0x10, %rsp
0000000000019643	popq	%r15
0000000000019645	popq	%r14
0000000000019647	popq	%r13
0000000000019649	popq	%r12
000000000001964b	popq	%r11
000000000001964d	popq	%r10
000000000001964f	popq	%r9
0000000000019651	popq	%r8
0000000000019653	popq	%rcx
0000000000019654	popq	%rdx
0000000000019655	popq	%rsi
0000000000019656	popq	%rdi
0000000000019657	popq	%rbx
0000000000019658	popq	%rbp
0000000000019659	jmpq	*%rax
__ZN7cocos2d6CCNode26onEnterTransitionDidFinishEv:
000000000001965b	pushq	%rbp
000000000001965c	movq	%rsp, %rbp
000000000001965f	pushq	%rbx
0000000000019660	pushq	%rdi
0000000000019661	pushq	%rsi
0000000000019662	pushq	%rdx
0000000000019663	pushq	%rcx
0000000000019664	pushq	%r8
0000000000019666	pushq	%r9
0000000000019668	pushq	%r10
000000000001966a	pushq	%r11
000000000001966c	pushq	%r12
000000000001966e	pushq	%r13
0000000000019670	pushq	%r14
0000000000019672	pushq	%r15
0000000000019674	subq	$0x10, %rsp
0000000000019678	movss	%xmm0, (%rsp)
000000000001967d	subq	$0x10, %rsp
0000000000019681	movss	%xmm1, (%rsp)
0000000000019686	pushq	%rsi
0000000000019687	pushq	%rdi
0000000000019688	callq	__Z7getBasev ## getBase()
000000000001968d	addq	$0x123b90, %rax
0000000000019693	popq	%rdi
0000000000019694	popq	%rsi
0000000000019695	movss	(%rsp), %xmm1
000000000001969a	addq	$0x10, %rsp
000000000001969e	movss	(%rsp), %xmm0
00000000000196a3	addq	$0x10, %rsp
00000000000196a7	popq	%r15
00000000000196a9	popq	%r14
00000000000196ab	popq	%r13
00000000000196ad	popq	%r12
00000000000196af	popq	%r11
00000000000196b1	popq	%r10
00000000000196b3	popq	%r9
00000000000196b5	popq	%r8
00000000000196b7	popq	%rcx
00000000000196b8	popq	%rdx
00000000000196b9	popq	%rsi
00000000000196ba	popq	%rdi
00000000000196bb	popq	%rbx
00000000000196bc	popq	%rbp
00000000000196bd	jmpq	*%rax
__ZN7cocos2d6CCNode26removeFromParentAndCleanupEb:
00000000000196bf	pushq	%rbp
00000000000196c0	movq	%rsp, %rbp
00000000000196c3	pushq	%rbx
00000000000196c4	pushq	%rdi
00000000000196c5	pushq	%rsi
00000000000196c6	pushq	%rdx
00000000000196c7	pushq	%rcx
00000000000196c8	pushq	%r8
00000000000196ca	pushq	%r9
00000000000196cc	pushq	%r10
00000000000196ce	pushq	%r11
00000000000196d0	pushq	%r12
00000000000196d2	pushq	%r13
00000000000196d4	pushq	%r14
00000000000196d6	pushq	%r15
00000000000196d8	subq	$0x10, %rsp
00000000000196dc	movss	%xmm0, (%rsp)
00000000000196e1	subq	$0x10, %rsp
00000000000196e5	movss	%xmm1, (%rsp)
00000000000196ea	pushq	%rsi
00000000000196eb	pushq	%rdi
00000000000196ec	callq	__Z7getBasev ## getBase()
00000000000196f1	addq	$0x123410, %rax
00000000000196f7	popq	%rdi
00000000000196f8	popq	%rsi
00000000000196f9	movss	(%rsp), %xmm1
00000000000196fe	addq	$0x10, %rsp
0000000000019702	movss	(%rsp), %xmm0
0000000000019707	addq	$0x10, %rsp
000000000001970b	popq	%r15
000000000001970d	popq	%r14
000000000001970f	popq	%r13
0000000000019711	popq	%r12
0000000000019713	popq	%r11
0000000000019715	popq	%r10
0000000000019717	popq	%r9
0000000000019719	popq	%r8
000000000001971b	popq	%rcx
000000000001971c	popq	%rdx
000000000001971d	popq	%rsi
000000000001971e	popq	%rdi
000000000001971f	popq	%rbx
0000000000019720	popq	%rbp
0000000000019721	jmpq	*%rax
__ZN7cocos2d6CCNode28ignoreAnchorPointForPositionEb:
0000000000019723	pushq	%rbp
0000000000019724	movq	%rsp, %rbp
0000000000019727	pushq	%rbx
0000000000019728	pushq	%rdi
0000000000019729	pushq	%rsi
000000000001972a	pushq	%rdx
000000000001972b	pushq	%rcx
000000000001972c	pushq	%r8
000000000001972e	pushq	%r9
0000000000019730	pushq	%r10
0000000000019732	pushq	%r11
0000000000019734	pushq	%r12
0000000000019736	pushq	%r13
0000000000019738	pushq	%r14
000000000001973a	pushq	%r15
000000000001973c	subq	$0x10, %rsp
0000000000019740	movss	%xmm0, (%rsp)
0000000000019745	subq	$0x10, %rsp
0000000000019749	movss	%xmm1, (%rsp)
000000000001974e	pushq	%rsi
000000000001974f	pushq	%rdi
0000000000019750	callq	__Z7getBasev ## getBase()
0000000000019755	addq	$0x122f00, %rax
000000000001975b	popq	%rdi
000000000001975c	popq	%rsi
000000000001975d	movss	(%rsp), %xmm1
0000000000019762	addq	$0x10, %rsp
0000000000019766	movss	(%rsp), %xmm0
000000000001976b	addq	$0x10, %rsp
000000000001976f	popq	%r15
0000000000019771	popq	%r14
0000000000019773	popq	%r13
0000000000019775	popq	%r12
0000000000019777	popq	%r11
0000000000019779	popq	%r10
000000000001977b	popq	%r9
000000000001977d	popq	%r8
000000000001977f	popq	%rcx
0000000000019780	popq	%rdx
0000000000019781	popq	%rsi
0000000000019782	popq	%rdi
0000000000019783	popq	%rbx
0000000000019784	popq	%rbp
0000000000019785	jmpq	*%rax
__ZN7cocos2d6CCNode28removeAllChildrenWithCleanupEb:
0000000000019787	pushq	%rbp
0000000000019788	movq	%rsp, %rbp
000000000001978b	pushq	%rbx
000000000001978c	pushq	%rdi
000000000001978d	pushq	%rsi
000000000001978e	pushq	%rdx
000000000001978f	pushq	%rcx
0000000000019790	pushq	%r8
0000000000019792	pushq	%r9
0000000000019794	pushq	%r10
0000000000019796	pushq	%r11
0000000000019798	pushq	%r12
000000000001979a	pushq	%r13
000000000001979c	pushq	%r14
000000000001979e	pushq	%r15
00000000000197a0	subq	$0x10, %rsp
00000000000197a4	movss	%xmm0, (%rsp)
00000000000197a9	subq	$0x10, %rsp
00000000000197ad	movss	%xmm1, (%rsp)
00000000000197b2	pushq	%rsi
00000000000197b3	pushq	%rdi
00000000000197b4	callq	__Z7getBasev ## getBase()
00000000000197b9	addq	$0x123620, %rax
00000000000197bf	popq	%rdi
00000000000197c0	popq	%rsi
00000000000197c1	movss	(%rsp), %xmm1
00000000000197c6	addq	$0x10, %rsp
00000000000197ca	movss	(%rsp), %xmm0
00000000000197cf	addq	$0x10, %rsp
00000000000197d3	popq	%r15
00000000000197d5	popq	%r14
00000000000197d7	popq	%r13
00000000000197d9	popq	%r12
00000000000197db	popq	%r11
00000000000197dd	popq	%r10
00000000000197df	popq	%r9
00000000000197e1	popq	%r8
00000000000197e3	popq	%rcx
00000000000197e4	popq	%rdx
00000000000197e5	popq	%rsi
00000000000197e6	popq	%rdi
00000000000197e7	popq	%rbx
00000000000197e8	popq	%rbp
00000000000197e9	jmpq	*%rax
__ZN7cocos2d6CCNode30isIgnoreAnchorPointForPositionEv:
00000000000197eb	pushq	%rbp
00000000000197ec	movq	%rsp, %rbp
00000000000197ef	pushq	%rbx
00000000000197f0	pushq	%rdi
00000000000197f1	pushq	%rsi
00000000000197f2	pushq	%rdx
00000000000197f3	pushq	%rcx
00000000000197f4	pushq	%r8
00000000000197f6	pushq	%r9
00000000000197f8	pushq	%r10
00000000000197fa	pushq	%r11
00000000000197fc	pushq	%r12
00000000000197fe	pushq	%r13
0000000000019800	pushq	%r14
0000000000019802	pushq	%r15
0000000000019804	subq	$0x10, %rsp
0000000000019808	movss	%xmm0, (%rsp)
000000000001980d	subq	$0x10, %rsp
0000000000019811	movss	%xmm1, (%rsp)
0000000000019816	pushq	%rsi
0000000000019817	pushq	%rdi
0000000000019818	callq	__Z7getBasev ## getBase()
000000000001981d	addq	$0x122ef0, %rax
0000000000019823	popq	%rdi
0000000000019824	popq	%rsi
0000000000019825	movss	(%rsp), %xmm1
000000000001982a	addq	$0x10, %rsp
000000000001982e	movss	(%rsp), %xmm0
0000000000019833	addq	$0x10, %rsp
0000000000019837	popq	%r15
0000000000019839	popq	%r14
000000000001983b	popq	%r13
000000000001983d	popq	%r12
000000000001983f	popq	%r11
0000000000019841	popq	%r10
0000000000019843	popq	%r9
0000000000019845	popq	%r8
0000000000019847	popq	%rcx
0000000000019848	popq	%rdx
0000000000019849	popq	%rsi
000000000001984a	popq	%rdi
000000000001984b	popq	%rbx
000000000001984c	popq	%rbp
000000000001984d	jmpq	*%rax
__ZN7cocos2d6CCNode4drawEv:
000000000001984f	pushq	%rbp
0000000000019850	movq	%rsp, %rbp
0000000000019853	pushq	%rbx
0000000000019854	pushq	%rdi
0000000000019855	pushq	%rsi
0000000000019856	pushq	%rdx
0000000000019857	pushq	%rcx
0000000000019858	pushq	%r8
000000000001985a	pushq	%r9
000000000001985c	pushq	%r10
000000000001985e	pushq	%r11
0000000000019860	pushq	%r12
0000000000019862	pushq	%r13
0000000000019864	pushq	%r14
0000000000019866	pushq	%r15
0000000000019868	subq	$0x10, %rsp
000000000001986c	movss	%xmm0, (%rsp)
0000000000019871	subq	$0x10, %rsp
0000000000019875	movss	%xmm1, (%rsp)
000000000001987a	pushq	%rsi
000000000001987b	pushq	%rdi
000000000001987c	callq	__Z7getBasev ## getBase()
0000000000019881	addq	$0x123840, %rax
0000000000019887	popq	%rdi
0000000000019888	popq	%rsi
0000000000019889	movss	(%rsp), %xmm1
000000000001988e	addq	$0x10, %rsp
0000000000019892	movss	(%rsp), %xmm0
0000000000019897	addq	$0x10, %rsp
000000000001989b	popq	%r15
000000000001989d	popq	%r14
000000000001989f	popq	%r13
00000000000198a1	popq	%r12
00000000000198a3	popq	%r11
00000000000198a5	popq	%r10
00000000000198a7	popq	%r9
00000000000198a9	popq	%r8
00000000000198ab	popq	%rcx
00000000000198ac	popq	%rdx
00000000000198ad	popq	%rsi
00000000000198ae	popq	%rdi
00000000000198af	popq	%rbx
00000000000198b0	popq	%rbp
00000000000198b1	jmpq	*%rax
__ZN7cocos2d6CCNode4initEv:
00000000000198b3	pushq	%rbp
00000000000198b4	movq	%rsp, %rbp
00000000000198b7	pushq	%rbx
00000000000198b8	pushq	%rdi
00000000000198b9	pushq	%rsi
00000000000198ba	pushq	%rdx
00000000000198bb	pushq	%rcx
00000000000198bc	pushq	%r8
00000000000198be	pushq	%r9
00000000000198c0	pushq	%r10
00000000000198c2	pushq	%r11
00000000000198c4	pushq	%r12
00000000000198c6	pushq	%r13
00000000000198c8	pushq	%r14
00000000000198ca	pushq	%r15
00000000000198cc	subq	$0x10, %rsp
00000000000198d0	movss	%xmm0, (%rsp)
00000000000198d5	subq	$0x10, %rsp
00000000000198d9	movss	%xmm1, (%rsp)
00000000000198de	pushq	%rsi
00000000000198df	pushq	%rdi
00000000000198e0	callq	__Z7getBasev ## getBase()
00000000000198e5	addq	$0x122910, %rax
00000000000198eb	popq	%rdi
00000000000198ec	popq	%rsi
00000000000198ed	movss	(%rsp), %xmm1
00000000000198f2	addq	$0x10, %rsp
00000000000198f6	movss	(%rsp), %xmm0
00000000000198fb	addq	$0x10, %rsp
00000000000198ff	popq	%r15
0000000000019901	popq	%r14
0000000000019903	popq	%r13
0000000000019905	popq	%r12
0000000000019907	popq	%r11
0000000000019909	popq	%r10
000000000001990b	popq	%r9
000000000001990d	popq	%r8
000000000001990f	popq	%rcx
0000000000019910	popq	%rdx
0000000000019911	popq	%rsi
0000000000019912	popq	%rdi
0000000000019913	popq	%rbx
0000000000019914	popq	%rbp
0000000000019915	jmpq	*%rax
__ZN7cocos2d6CCNode5visitEv:
0000000000019917	pushq	%rbp
0000000000019918	movq	%rsp, %rbp
000000000001991b	pushq	%rbx
000000000001991c	pushq	%rdi
000000000001991d	pushq	%rsi
000000000001991e	pushq	%rdx
000000000001991f	pushq	%rcx
0000000000019920	pushq	%r8
0000000000019922	pushq	%r9
0000000000019924	pushq	%r10
0000000000019926	pushq	%r11
0000000000019928	pushq	%r12
000000000001992a	pushq	%r13
000000000001992c	pushq	%r14
000000000001992e	pushq	%r15
0000000000019930	subq	$0x10, %rsp
0000000000019934	movss	%xmm0, (%rsp)
0000000000019939	subq	$0x10, %rsp
000000000001993d	movss	%xmm1, (%rsp)
0000000000019942	pushq	%rsi
0000000000019943	pushq	%rdi
0000000000019944	callq	__Z7getBasev ## getBase()
0000000000019949	addq	$0x123850, %rax
000000000001994f	popq	%rdi
0000000000019950	popq	%rsi
0000000000019951	movss	(%rsp), %xmm1
0000000000019956	addq	$0x10, %rsp
000000000001995a	movss	(%rsp), %xmm0
000000000001995f	addq	$0x10, %rsp
0000000000019963	popq	%r15
0000000000019965	popq	%r14
0000000000019967	popq	%r13
0000000000019969	popq	%r12
000000000001996b	popq	%r11
000000000001996d	popq	%r10
000000000001996f	popq	%r9
0000000000019971	popq	%r8
0000000000019973	popq	%rcx
0000000000019974	popq	%rdx
0000000000019975	popq	%rsi
0000000000019976	popq	%rdi
0000000000019977	popq	%rbx
0000000000019978	popq	%rbp
0000000000019979	jmpq	*%rax
__ZN7cocos2d6CCNode6onExitEv:
000000000001997b	pushq	%rbp
000000000001997c	movq	%rsp, %rbp
000000000001997f	pushq	%rbx
0000000000019980	pushq	%rdi
0000000000019981	pushq	%rsi
0000000000019982	pushq	%rdx
0000000000019983	pushq	%rcx
0000000000019984	pushq	%r8
0000000000019986	pushq	%r9
0000000000019988	pushq	%r10
000000000001998a	pushq	%r11
000000000001998c	pushq	%r12
000000000001998e	pushq	%r13
0000000000019990	pushq	%r14
0000000000019992	pushq	%r15
0000000000019994	subq	$0x10, %rsp
0000000000019998	movss	%xmm0, (%rsp)
000000000001999d	subq	$0x10, %rsp
00000000000199a1	movss	%xmm1, (%rsp)
00000000000199a6	pushq	%rsi
00000000000199a7	pushq	%rdi
00000000000199a8	callq	__Z7getBasev ## getBase()
00000000000199ad	addq	$0x123ca0, %rax
00000000000199b3	popq	%rdi
00000000000199b4	popq	%rsi
00000000000199b5	movss	(%rsp), %xmm1
00000000000199ba	addq	$0x10, %rsp
00000000000199be	movss	(%rsp), %xmm0
00000000000199c3	addq	$0x10, %rsp
00000000000199c7	popq	%r15
00000000000199c9	popq	%r14
00000000000199cb	popq	%r13
00000000000199cd	popq	%r12
00000000000199cf	popq	%r11
00000000000199d1	popq	%r10
00000000000199d3	popq	%r9
00000000000199d5	popq	%r8
00000000000199d7	popq	%rcx
00000000000199d8	popq	%rdx
00000000000199d9	popq	%rsi
00000000000199da	popq	%rdi
00000000000199db	popq	%rbx
00000000000199dc	popq	%rbp
00000000000199dd	jmpq	*%rax
__ZN7cocos2d6CCNode6updateEf:
00000000000199df	pushq	%rbp
00000000000199e0	movq	%rsp, %rbp
00000000000199e3	pushq	%rbx
00000000000199e4	pushq	%rdi
00000000000199e5	pushq	%rsi
00000000000199e6	pushq	%rdx
00000000000199e7	pushq	%rcx
00000000000199e8	pushq	%r8
00000000000199ea	pushq	%r9
00000000000199ec	pushq	%r10
00000000000199ee	pushq	%r11
00000000000199f0	pushq	%r12
00000000000199f2	pushq	%r13
00000000000199f4	pushq	%r14
00000000000199f6	pushq	%r15
00000000000199f8	subq	$0x10, %rsp
00000000000199fc	movss	%xmm0, (%rsp)
0000000000019a01	subq	$0x10, %rsp
0000000000019a05	movss	%xmm1, (%rsp)
0000000000019a0a	pushq	%rsi
0000000000019a0b	pushq	%rdi
0000000000019a0c	callq	__Z7getBasev ## getBase()
0000000000019a11	addq	$0x1241a0, %rax
0000000000019a17	popq	%rdi
0000000000019a18	popq	%rsi
0000000000019a19	movss	(%rsp), %xmm1
0000000000019a1e	addq	$0x10, %rsp
0000000000019a22	movss	(%rsp), %xmm0
0000000000019a27	addq	$0x10, %rsp
0000000000019a2b	popq	%r15
0000000000019a2d	popq	%r14
0000000000019a2f	popq	%r13
0000000000019a31	popq	%r12
0000000000019a33	popq	%r11
0000000000019a35	popq	%r10
0000000000019a37	popq	%r9
0000000000019a39	popq	%r8
0000000000019a3b	popq	%rcx
0000000000019a3c	popq	%rdx
0000000000019a3d	popq	%rsi
0000000000019a3e	popq	%rdi
0000000000019a3f	popq	%rbx
0000000000019a40	popq	%rbp
0000000000019a41	jmpq	*%rax
__ZN7cocos2d6CCNode7cleanupEv:
0000000000019a43	pushq	%rbp
0000000000019a44	movq	%rsp, %rbp
0000000000019a47	pushq	%rbx
0000000000019a48	pushq	%rdi
0000000000019a49	pushq	%rsi
0000000000019a4a	pushq	%rdx
0000000000019a4b	pushq	%rcx
0000000000019a4c	pushq	%r8
0000000000019a4e	pushq	%r9
0000000000019a50	pushq	%r10
0000000000019a52	pushq	%r11
0000000000019a54	pushq	%r12
0000000000019a56	pushq	%r13
0000000000019a58	pushq	%r14
0000000000019a5a	pushq	%r15
0000000000019a5c	subq	$0x10, %rsp
0000000000019a60	movss	%xmm0, (%rsp)
0000000000019a65	subq	$0x10, %rsp
0000000000019a69	movss	%xmm1, (%rsp)
0000000000019a6e	pushq	%rsi
0000000000019a6f	pushq	%rdi
0000000000019a70	callq	__Z7getBasev ## getBase()
0000000000019a75	addq	$0x123100, %rax
0000000000019a7b	popq	%rdi
0000000000019a7c	popq	%rsi
0000000000019a7d	movss	(%rsp), %xmm1
0000000000019a82	addq	$0x10, %rsp
0000000000019a86	movss	(%rsp), %xmm0
0000000000019a8b	addq	$0x10, %rsp
0000000000019a8f	popq	%r15
0000000000019a91	popq	%r14
0000000000019a93	popq	%r13
0000000000019a95	popq	%r12
0000000000019a97	popq	%r11
0000000000019a99	popq	%r10
0000000000019a9b	popq	%r9
0000000000019a9d	popq	%r8
0000000000019a9f	popq	%rcx
0000000000019aa0	popq	%rdx
0000000000019aa1	popq	%rsi
0000000000019aa2	popq	%rdi
0000000000019aa3	popq	%rbx
0000000000019aa4	popq	%rbp
0000000000019aa5	jmpq	*%rax
__ZN7cocos2d6CCNode7getGridEv:
0000000000019aa7	pushq	%rbp
0000000000019aa8	movq	%rsp, %rbp
0000000000019aab	pushq	%rbx
0000000000019aac	pushq	%rdi
0000000000019aad	pushq	%rsi
0000000000019aae	pushq	%rdx
0000000000019aaf	pushq	%rcx
0000000000019ab0	pushq	%r8
0000000000019ab2	pushq	%r9
0000000000019ab4	pushq	%r10
0000000000019ab6	pushq	%r11
0000000000019ab8	pushq	%r12
0000000000019aba	pushq	%r13
0000000000019abc	pushq	%r14
0000000000019abe	pushq	%r15
0000000000019ac0	subq	$0x10, %rsp
0000000000019ac4	movss	%xmm0, (%rsp)
0000000000019ac9	subq	$0x10, %rsp
0000000000019acd	movss	%xmm1, (%rsp)
0000000000019ad2	pushq	%rsi
0000000000019ad3	pushq	%rdi
0000000000019ad4	callq	__Z7getBasev ## getBase()
0000000000019ad9	addq	$0x122d00, %rax
0000000000019adf	popq	%rdi
0000000000019ae0	popq	%rsi
0000000000019ae1	movss	(%rsp), %xmm1
0000000000019ae6	addq	$0x10, %rsp
0000000000019aea	movss	(%rsp), %xmm0
0000000000019aef	addq	$0x10, %rsp
0000000000019af3	popq	%r15
0000000000019af5	popq	%r14
0000000000019af7	popq	%r13
0000000000019af9	popq	%r12
0000000000019afb	popq	%r11
0000000000019afd	popq	%r10
0000000000019aff	popq	%r9
0000000000019b01	popq	%r8
0000000000019b03	popq	%rcx
0000000000019b04	popq	%rdx
0000000000019b05	popq	%rsi
0000000000019b06	popq	%rdi
0000000000019b07	popq	%rbx
0000000000019b08	popq	%rbp
0000000000019b09	jmpq	*%rax
__ZN7cocos2d6CCNode7onEnterEv:
0000000000019b0b	pushq	%rbp
0000000000019b0c	movq	%rsp, %rbp
0000000000019b0f	pushq	%rbx
0000000000019b10	pushq	%rdi
0000000000019b11	pushq	%rsi
0000000000019b12	pushq	%rdx
0000000000019b13	pushq	%rcx
0000000000019b14	pushq	%r8
0000000000019b16	pushq	%r9
0000000000019b18	pushq	%r10
0000000000019b1a	pushq	%r11
0000000000019b1c	pushq	%r12
0000000000019b1e	pushq	%r13
0000000000019b20	pushq	%r14
0000000000019b22	pushq	%r15
0000000000019b24	subq	$0x10, %rsp
0000000000019b28	movss	%xmm0, (%rsp)
0000000000019b2d	subq	$0x10, %rsp
0000000000019b31	movss	%xmm1, (%rsp)
0000000000019b36	pushq	%rsi
0000000000019b37	pushq	%rdi
0000000000019b38	callq	__Z7getBasev ## getBase()
0000000000019b3d	addq	$0x123a90, %rax
0000000000019b43	popq	%rdi
0000000000019b44	popq	%rsi
0000000000019b45	movss	(%rsp), %xmm1
0000000000019b4a	addq	$0x10, %rsp
0000000000019b4e	movss	(%rsp), %xmm0
0000000000019b53	addq	$0x10, %rsp
0000000000019b57	popq	%r15
0000000000019b59	popq	%r14
0000000000019b5b	popq	%r13
0000000000019b5d	popq	%r12
0000000000019b5f	popq	%r11
0000000000019b61	popq	%r10
0000000000019b63	popq	%r9
0000000000019b65	popq	%r8
0000000000019b67	popq	%rcx
0000000000019b68	popq	%rdx
0000000000019b69	popq	%rsi
0000000000019b6a	popq	%rdi
0000000000019b6b	popq	%rbx
0000000000019b6c	popq	%rbp
0000000000019b6d	jmpq	*%rax
__ZN7cocos2d6CCNode7setGridEPNS_10CCGridBaseE:
0000000000019b6f	pushq	%rbp
0000000000019b70	movq	%rsp, %rbp
0000000000019b73	pushq	%rbx
0000000000019b74	pushq	%rdi
0000000000019b75	pushq	%rsi
0000000000019b76	pushq	%rdx
0000000000019b77	pushq	%rcx
0000000000019b78	pushq	%r8
0000000000019b7a	pushq	%r9
0000000000019b7c	pushq	%r10
0000000000019b7e	pushq	%r11
0000000000019b80	pushq	%r12
0000000000019b82	pushq	%r13
0000000000019b84	pushq	%r14
0000000000019b86	pushq	%r15
0000000000019b88	subq	$0x10, %rsp
0000000000019b8c	movss	%xmm0, (%rsp)
0000000000019b91	subq	$0x10, %rsp
0000000000019b95	movss	%xmm1, (%rsp)
0000000000019b9a	pushq	%rsi
0000000000019b9b	pushq	%rdi
0000000000019b9c	callq	__Z7getBasev ## getBase()
0000000000019ba1	addq	$0x122d10, %rax
0000000000019ba7	popq	%rdi
0000000000019ba8	popq	%rsi
0000000000019ba9	movss	(%rsp), %xmm1
0000000000019bae	addq	$0x10, %rsp
0000000000019bb2	movss	(%rsp), %xmm0
0000000000019bb7	addq	$0x10, %rsp
0000000000019bbb	popq	%r15
0000000000019bbd	popq	%r14
0000000000019bbf	popq	%r13
0000000000019bc1	popq	%r12
0000000000019bc3	popq	%r11
0000000000019bc5	popq	%r10
0000000000019bc7	popq	%r9
0000000000019bc9	popq	%r8
0000000000019bcb	popq	%rcx
0000000000019bcc	popq	%rdx
0000000000019bcd	popq	%rsi
0000000000019bce	popq	%rdi
0000000000019bcf	popq	%rbx
0000000000019bd0	popq	%rbp
0000000000019bd1	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_:
0000000000019bd3	pushq	%rbp
0000000000019bd4	movq	%rsp, %rbp
0000000000019bd7	pushq	%rbx
0000000000019bd8	pushq	%rdi
0000000000019bd9	pushq	%rsi
0000000000019bda	pushq	%rdx
0000000000019bdb	pushq	%rcx
0000000000019bdc	pushq	%r8
0000000000019bde	pushq	%r9
0000000000019be0	pushq	%r10
0000000000019be2	pushq	%r11
0000000000019be4	pushq	%r12
0000000000019be6	pushq	%r13
0000000000019be8	pushq	%r14
0000000000019bea	pushq	%r15
0000000000019bec	subq	$0x10, %rsp
0000000000019bf0	movss	%xmm0, (%rsp)
0000000000019bf5	subq	$0x10, %rsp
0000000000019bf9	movss	%xmm1, (%rsp)
0000000000019bfe	pushq	%rsi
0000000000019bff	pushq	%rdi
0000000000019c00	callq	__Z7getBasev ## getBase()
0000000000019c05	addq	$0x1233d0, %rax
0000000000019c0b	popq	%rdi
0000000000019c0c	popq	%rsi
0000000000019c0d	movss	(%rsp), %xmm1
0000000000019c12	addq	$0x10, %rsp
0000000000019c16	movss	(%rsp), %xmm0
0000000000019c1b	addq	$0x10, %rsp
0000000000019c1f	popq	%r15
0000000000019c21	popq	%r14
0000000000019c23	popq	%r13
0000000000019c25	popq	%r12
0000000000019c27	popq	%r11
0000000000019c29	popq	%r10
0000000000019c2b	popq	%r9
0000000000019c2d	popq	%r8
0000000000019c2f	popq	%rcx
0000000000019c30	popq	%rdx
0000000000019c31	popq	%rsi
0000000000019c32	popq	%rdi
0000000000019c33	popq	%rbx
0000000000019c34	popq	%rbp
0000000000019c35	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_i:
0000000000019c37	pushq	%rbp
0000000000019c38	movq	%rsp, %rbp
0000000000019c3b	pushq	%rbx
0000000000019c3c	pushq	%rdi
0000000000019c3d	pushq	%rsi
0000000000019c3e	pushq	%rdx
0000000000019c3f	pushq	%rcx
0000000000019c40	pushq	%r8
0000000000019c42	pushq	%r9
0000000000019c44	pushq	%r10
0000000000019c46	pushq	%r11
0000000000019c48	pushq	%r12
0000000000019c4a	pushq	%r13
0000000000019c4c	pushq	%r14
0000000000019c4e	pushq	%r15
0000000000019c50	subq	$0x10, %rsp
0000000000019c54	movss	%xmm0, (%rsp)
0000000000019c59	subq	$0x10, %rsp
0000000000019c5d	movss	%xmm1, (%rsp)
0000000000019c62	pushq	%rsi
0000000000019c63	pushq	%rdi
0000000000019c64	callq	__Z7getBasev ## getBase()
0000000000019c69	addq	$0x1233b0, %rax
0000000000019c6f	popq	%rdi
0000000000019c70	popq	%rsi
0000000000019c71	movss	(%rsp), %xmm1
0000000000019c76	addq	$0x10, %rsp
0000000000019c7a	movss	(%rsp), %xmm0
0000000000019c7f	addq	$0x10, %rsp
0000000000019c83	popq	%r15
0000000000019c85	popq	%r14
0000000000019c87	popq	%r13
0000000000019c89	popq	%r12
0000000000019c8b	popq	%r11
0000000000019c8d	popq	%r10
0000000000019c8f	popq	%r9
0000000000019c91	popq	%r8
0000000000019c93	popq	%rcx
0000000000019c94	popq	%rdx
0000000000019c95	popq	%rsi
0000000000019c96	popq	%rdi
0000000000019c97	popq	%rbx
0000000000019c98	popq	%rbp
0000000000019c99	jmpq	*%rax
__ZN7cocos2d6CCNode8addChildEPS0_ii:
0000000000019c9b	pushq	%rbp
0000000000019c9c	movq	%rsp, %rbp
0000000000019c9f	pushq	%rbx
0000000000019ca0	pushq	%rdi
0000000000019ca1	pushq	%rsi
0000000000019ca2	pushq	%rdx
0000000000019ca3	pushq	%rcx
0000000000019ca4	pushq	%r8
0000000000019ca6	pushq	%r9
0000000000019ca8	pushq	%r10
0000000000019caa	pushq	%r11
0000000000019cac	pushq	%r12
0000000000019cae	pushq	%r13
0000000000019cb0	pushq	%r14
0000000000019cb2	pushq	%r15
0000000000019cb4	subq	$0x10, %rsp
0000000000019cb8	movss	%xmm0, (%rsp)
0000000000019cbd	subq	$0x10, %rsp
0000000000019cc1	movss	%xmm1, (%rsp)
0000000000019cc6	pushq	%rsi
0000000000019cc7	pushq	%rdi
0000000000019cc8	callq	__Z7getBasev ## getBase()
0000000000019ccd	addq	$0x1232a0, %rax
0000000000019cd3	popq	%rdi
0000000000019cd4	popq	%rsi
0000000000019cd5	movss	(%rsp), %xmm1
0000000000019cda	addq	$0x10, %rsp
0000000000019cde	movss	(%rsp), %xmm0
0000000000019ce3	addq	$0x10, %rsp
0000000000019ce7	popq	%r15
0000000000019ce9	popq	%r14
0000000000019ceb	popq	%r13
0000000000019ced	popq	%r12
0000000000019cef	popq	%r11
0000000000019cf1	popq	%r10
0000000000019cf3	popq	%r9
0000000000019cf5	popq	%r8
0000000000019cf7	popq	%rcx
0000000000019cf8	popq	%rdx
0000000000019cf9	popq	%rsi
0000000000019cfa	popq	%rdi
0000000000019cfb	popq	%rbx
0000000000019cfc	popq	%rbp
0000000000019cfd	jmpq	*%rax
__ZN7cocos2d6CCNode8getScaleEv:
0000000000019cff	pushq	%rbp
0000000000019d00	movq	%rsp, %rbp
0000000000019d03	pushq	%rbx
0000000000019d04	pushq	%rdi
0000000000019d05	pushq	%rsi
0000000000019d06	pushq	%rdx
0000000000019d07	pushq	%rcx
0000000000019d08	pushq	%r8
0000000000019d0a	pushq	%r9
0000000000019d0c	pushq	%r10
0000000000019d0e	pushq	%r11
0000000000019d10	pushq	%r12
0000000000019d12	pushq	%r13
0000000000019d14	pushq	%r14
0000000000019d16	pushq	%r15
0000000000019d18	subq	$0x10, %rsp
0000000000019d1c	movss	%xmm0, (%rsp)
0000000000019d21	subq	$0x10, %rsp
0000000000019d25	movss	%xmm1, (%rsp)
0000000000019d2a	pushq	%rsi
0000000000019d2b	pushq	%rdi
0000000000019d2c	callq	__Z7getBasev ## getBase()
0000000000019d31	addq	$0x122ab0, %rax
0000000000019d37	popq	%rdi
0000000000019d38	popq	%rsi
0000000000019d39	movss	(%rsp), %xmm1
0000000000019d3e	addq	$0x10, %rsp
0000000000019d42	movss	(%rsp), %xmm0
0000000000019d47	addq	$0x10, %rsp
0000000000019d4b	popq	%r15
0000000000019d4d	popq	%r14
0000000000019d4f	popq	%r13
0000000000019d51	popq	%r12
0000000000019d53	popq	%r11
0000000000019d55	popq	%r10
0000000000019d57	popq	%r9
0000000000019d59	popq	%r8
0000000000019d5b	popq	%rcx
0000000000019d5c	popq	%rdx
0000000000019d5d	popq	%rsi
0000000000019d5e	popq	%rdi
0000000000019d5f	popq	%rbx
0000000000019d60	popq	%rbp
0000000000019d61	jmpq	*%rax
__ZN7cocos2d6CCNode8getSkewXEv:
0000000000019d63	pushq	%rbp
0000000000019d64	movq	%rsp, %rbp
0000000000019d67	pushq	%rbx
0000000000019d68	pushq	%rdi
0000000000019d69	pushq	%rsi
0000000000019d6a	pushq	%rdx
0000000000019d6b	pushq	%rcx
0000000000019d6c	pushq	%r8
0000000000019d6e	pushq	%r9
0000000000019d70	pushq	%r10
0000000000019d72	pushq	%r11
0000000000019d74	pushq	%r12
0000000000019d76	pushq	%r13
0000000000019d78	pushq	%r14
0000000000019d7a	pushq	%r15
0000000000019d7c	subq	$0x10, %rsp
0000000000019d80	movss	%xmm0, (%rsp)
0000000000019d85	subq	$0x10, %rsp
0000000000019d89	movss	%xmm1, (%rsp)
0000000000019d8e	pushq	%rsi
0000000000019d8f	pushq	%rdi
0000000000019d90	callq	__Z7getBasev ## getBase()
0000000000019d95	addq	$0x122920, %rax
0000000000019d9b	popq	%rdi
0000000000019d9c	popq	%rsi
0000000000019d9d	movss	(%rsp), %xmm1
0000000000019da2	addq	$0x10, %rsp
0000000000019da6	movss	(%rsp), %xmm0
0000000000019dab	addq	$0x10, %rsp
0000000000019daf	popq	%r15
0000000000019db1	popq	%r14
0000000000019db3	popq	%r13
0000000000019db5	popq	%r12
0000000000019db7	popq	%r11
0000000000019db9	popq	%r10
0000000000019dbb	popq	%r9
0000000000019dbd	popq	%r8
0000000000019dbf	popq	%rcx
0000000000019dc0	popq	%rdx
0000000000019dc1	popq	%rsi
0000000000019dc2	popq	%rdi
0000000000019dc3	popq	%rbx
0000000000019dc4	popq	%rbp
0000000000019dc5	jmpq	*%rax
__ZN7cocos2d6CCNode8getSkewYEv:
0000000000019dc7	pushq	%rbp
0000000000019dc8	movq	%rsp, %rbp
0000000000019dcb	pushq	%rbx
0000000000019dcc	pushq	%rdi
0000000000019dcd	pushq	%rsi
0000000000019dce	pushq	%rdx
0000000000019dcf	pushq	%rcx
0000000000019dd0	pushq	%r8
0000000000019dd2	pushq	%r9
0000000000019dd4	pushq	%r10
0000000000019dd6	pushq	%r11
0000000000019dd8	pushq	%r12
0000000000019dda	pushq	%r13
0000000000019ddc	pushq	%r14
0000000000019dde	pushq	%r15
0000000000019de0	subq	$0x10, %rsp
0000000000019de4	movss	%xmm0, (%rsp)
0000000000019de9	subq	$0x10, %rsp
0000000000019ded	movss	%xmm1, (%rsp)
0000000000019df2	pushq	%rsi
0000000000019df3	pushq	%rdi
0000000000019df4	callq	__Z7getBasev ## getBase()
0000000000019df9	addq	$0x122950, %rax
0000000000019dff	popq	%rdi
0000000000019e00	popq	%rsi
0000000000019e01	movss	(%rsp), %xmm1
0000000000019e06	addq	$0x10, %rsp
0000000000019e0a	movss	(%rsp), %xmm0
0000000000019e0f	addq	$0x10, %rsp
0000000000019e13	popq	%r15
0000000000019e15	popq	%r14
0000000000019e17	popq	%r13
0000000000019e19	popq	%r12
0000000000019e1b	popq	%r11
0000000000019e1d	popq	%r10
0000000000019e1f	popq	%r9
0000000000019e21	popq	%r8
0000000000019e23	popq	%rcx
0000000000019e24	popq	%rdx
0000000000019e25	popq	%rsi
0000000000019e26	popq	%rdi
0000000000019e27	popq	%rbx
0000000000019e28	popq	%rbp
0000000000019e29	jmpq	*%rax
__ZN7cocos2d6CCNode8scheduleEMNS_8CCObjectEFvfEf:
0000000000019e2b	pushq	%rbp
0000000000019e2c	movq	%rsp, %rbp
0000000000019e2f	pushq	%rbx
0000000000019e30	pushq	%rdi
0000000000019e31	pushq	%rsi
0000000000019e32	pushq	%rdx
0000000000019e33	pushq	%rcx
0000000000019e34	pushq	%r8
0000000000019e36	pushq	%r9
0000000000019e38	pushq	%r10
0000000000019e3a	pushq	%r11
0000000000019e3c	pushq	%r12
0000000000019e3e	pushq	%r13
0000000000019e40	pushq	%r14
0000000000019e42	pushq	%r15
0000000000019e44	subq	$0x10, %rsp
0000000000019e48	movss	%xmm0, (%rsp)
0000000000019e4d	subq	$0x10, %rsp
0000000000019e51	movss	%xmm1, (%rsp)
0000000000019e56	pushq	%rsi
0000000000019e57	pushq	%rdi
0000000000019e58	callq	__Z7getBasev ## getBase()
0000000000019e5d	addq	$0x124120, %rax
0000000000019e63	popq	%rdi
0000000000019e64	popq	%rsi
0000000000019e65	movss	(%rsp), %xmm1
0000000000019e6a	addq	$0x10, %rsp
0000000000019e6e	movss	(%rsp), %xmm0
0000000000019e73	addq	$0x10, %rsp
0000000000019e77	popq	%r15
0000000000019e79	popq	%r14
0000000000019e7b	popq	%r13
0000000000019e7d	popq	%r12
0000000000019e7f	popq	%r11
0000000000019e81	popq	%r10
0000000000019e83	popq	%r9
0000000000019e85	popq	%r8
0000000000019e87	popq	%rcx
0000000000019e88	popq	%rdx
0000000000019e89	popq	%rsi
0000000000019e8a	popq	%rdi
0000000000019e8b	popq	%rbx
0000000000019e8c	popq	%rbp
0000000000019e8d	jmpq	*%rax
__ZN7cocos2d6CCNode8setScaleEf:
0000000000019e8f	pushq	%rbp
0000000000019e90	movq	%rsp, %rbp
0000000000019e93	pushq	%rbx
0000000000019e94	pushq	%rdi
0000000000019e95	pushq	%rsi
0000000000019e96	pushq	%rdx
0000000000019e97	pushq	%rcx
0000000000019e98	pushq	%r8
0000000000019e9a	pushq	%r9
0000000000019e9c	pushq	%r10
0000000000019e9e	pushq	%r11
0000000000019ea0	pushq	%r12
0000000000019ea2	pushq	%r13
0000000000019ea4	pushq	%r14
0000000000019ea6	pushq	%r15
0000000000019ea8	subq	$0x10, %rsp
0000000000019eac	movss	%xmm0, (%rsp)
0000000000019eb1	subq	$0x10, %rsp
0000000000019eb5	movss	%xmm1, (%rsp)
0000000000019eba	pushq	%rsi
0000000000019ebb	pushq	%rdi
0000000000019ebc	callq	__Z7getBasev ## getBase()
0000000000019ec1	addq	$0x122ac0, %rax
0000000000019ec7	popq	%rdi
0000000000019ec8	popq	%rsi
0000000000019ec9	movss	(%rsp), %xmm1
0000000000019ece	addq	$0x10, %rsp
0000000000019ed2	movss	(%rsp), %xmm0
0000000000019ed7	addq	$0x10, %rsp
0000000000019edb	popq	%r15
0000000000019edd	popq	%r14
0000000000019edf	popq	%r13
0000000000019ee1	popq	%r12
0000000000019ee3	popq	%r11
0000000000019ee5	popq	%r10
0000000000019ee7	popq	%r9
0000000000019ee9	popq	%r8
0000000000019eeb	popq	%rcx
0000000000019eec	popq	%rdx
0000000000019eed	popq	%rsi
0000000000019eee	popq	%rdi
0000000000019eef	popq	%rbx
0000000000019ef0	popq	%rbp
0000000000019ef1	jmpq	*%rax
__ZN7cocos2d6CCNode8setScaleEff:
0000000000019ef3	pushq	%rbp
0000000000019ef4	movq	%rsp, %rbp
0000000000019ef7	pushq	%rbx
0000000000019ef8	pushq	%rdi
0000000000019ef9	pushq	%rsi
0000000000019efa	pushq	%rdx
0000000000019efb	pushq	%rcx
0000000000019efc	pushq	%r8
0000000000019efe	pushq	%r9
0000000000019f00	pushq	%r10
0000000000019f02	pushq	%r11
0000000000019f04	pushq	%r12
0000000000019f06	pushq	%r13
0000000000019f08	pushq	%r14
0000000000019f0a	pushq	%r15
0000000000019f0c	subq	$0x10, %rsp
0000000000019f10	movss	%xmm0, (%rsp)
0000000000019f15	subq	$0x10, %rsp
0000000000019f19	movss	%xmm1, (%rsp)
0000000000019f1e	pushq	%rsi
0000000000019f1f	pushq	%rdi
0000000000019f20	callq	__Z7getBasev ## getBase()
0000000000019f25	addq	$0x122ae0, %rax
0000000000019f2b	popq	%rdi
0000000000019f2c	popq	%rsi
0000000000019f2d	movss	(%rsp), %xmm1
0000000000019f32	addq	$0x10, %rsp
0000000000019f36	movss	(%rsp), %xmm0
0000000000019f3b	addq	$0x10, %rsp
0000000000019f3f	popq	%r15
0000000000019f41	popq	%r14
0000000000019f43	popq	%r13
0000000000019f45	popq	%r12
0000000000019f47	popq	%r11
0000000000019f49	popq	%r10
0000000000019f4b	popq	%r9
0000000000019f4d	popq	%r8
0000000000019f4f	popq	%rcx
0000000000019f50	popq	%rdx
0000000000019f51	popq	%rsi
0000000000019f52	popq	%rdi
0000000000019f53	popq	%rbx
0000000000019f54	popq	%rbp
0000000000019f55	jmpq	*%rax
__ZN7cocos2d6CCNode8setSkewXEf:
0000000000019f57	pushq	%rbp
0000000000019f58	movq	%rsp, %rbp
0000000000019f5b	pushq	%rbx
0000000000019f5c	pushq	%rdi
0000000000019f5d	pushq	%rsi
0000000000019f5e	pushq	%rdx
0000000000019f5f	pushq	%rcx
0000000000019f60	pushq	%r8
0000000000019f62	pushq	%r9
0000000000019f64	pushq	%r10
0000000000019f66	pushq	%r11
0000000000019f68	pushq	%r12
0000000000019f6a	pushq	%r13
0000000000019f6c	pushq	%r14
0000000000019f6e	pushq	%r15
0000000000019f70	subq	$0x10, %rsp
0000000000019f74	movss	%xmm0, (%rsp)
0000000000019f79	subq	$0x10, %rsp
0000000000019f7d	movss	%xmm1, (%rsp)
0000000000019f82	pushq	%rsi
0000000000019f83	pushq	%rdi
0000000000019f84	callq	__Z7getBasev ## getBase()
0000000000019f89	addq	$0x122930, %rax
0000000000019f8f	popq	%rdi
0000000000019f90	popq	%rsi
0000000000019f91	movss	(%rsp), %xmm1
0000000000019f96	addq	$0x10, %rsp
0000000000019f9a	movss	(%rsp), %xmm0
0000000000019f9f	addq	$0x10, %rsp
0000000000019fa3	popq	%r15
0000000000019fa5	popq	%r14
0000000000019fa7	popq	%r13
0000000000019fa9	popq	%r12
0000000000019fab	popq	%r11
0000000000019fad	popq	%r10
0000000000019faf	popq	%r9
0000000000019fb1	popq	%r8
0000000000019fb3	popq	%rcx
0000000000019fb4	popq	%rdx
0000000000019fb5	popq	%rsi
0000000000019fb6	popq	%rdi
0000000000019fb7	popq	%rbx
0000000000019fb8	popq	%rbp
0000000000019fb9	jmpq	*%rax
__ZN7cocos2d6CCNode8setSkewYEf:
0000000000019fbb	pushq	%rbp
0000000000019fbc	movq	%rsp, %rbp
0000000000019fbf	pushq	%rbx
0000000000019fc0	pushq	%rdi
0000000000019fc1	pushq	%rsi
0000000000019fc2	pushq	%rdx
0000000000019fc3	pushq	%rcx
0000000000019fc4	pushq	%r8
0000000000019fc6	pushq	%r9
0000000000019fc8	pushq	%r10
0000000000019fca	pushq	%r11
0000000000019fcc	pushq	%r12
0000000000019fce	pushq	%r13
0000000000019fd0	pushq	%r14
0000000000019fd2	pushq	%r15
0000000000019fd4	subq	$0x10, %rsp
0000000000019fd8	movss	%xmm0, (%rsp)
0000000000019fdd	subq	$0x10, %rsp
0000000000019fe1	movss	%xmm1, (%rsp)
0000000000019fe6	pushq	%rsi
0000000000019fe7	pushq	%rdi
0000000000019fe8	callq	__Z7getBasev ## getBase()
0000000000019fed	addq	$0x122960, %rax
0000000000019ff3	popq	%rdi
0000000000019ff4	popq	%rsi
0000000000019ff5	movss	(%rsp), %xmm1
0000000000019ffa	addq	$0x10, %rsp
0000000000019ffe	movss	(%rsp), %xmm0
000000000001a003	addq	$0x10, %rsp
000000000001a007	popq	%r15
000000000001a009	popq	%r14
000000000001a00b	popq	%r13
000000000001a00d	popq	%r12
000000000001a00f	popq	%r11
000000000001a011	popq	%r10
000000000001a013	popq	%r9
000000000001a015	popq	%r8
000000000001a017	popq	%rcx
000000000001a018	popq	%rdx
000000000001a019	popq	%rsi
000000000001a01a	popq	%rdi
000000000001a01b	popq	%rbx
000000000001a01c	popq	%rbp
000000000001a01d	jmpq	*%rax
__ZN7cocos2d6CCNode9getCameraEv:
000000000001a01f	pushq	%rbp
000000000001a020	movq	%rsp, %rbp
000000000001a023	pushq	%rbx
000000000001a024	pushq	%rdi
000000000001a025	pushq	%rsi
000000000001a026	pushq	%rdx
000000000001a027	pushq	%rcx
000000000001a028	pushq	%r8
000000000001a02a	pushq	%r9
000000000001a02c	pushq	%r10
000000000001a02e	pushq	%r11
000000000001a030	pushq	%r12
000000000001a032	pushq	%r13
000000000001a034	pushq	%r14
000000000001a036	pushq	%r15
000000000001a038	subq	$0x10, %rsp
000000000001a03c	movss	%xmm0, (%rsp)
000000000001a041	subq	$0x10, %rsp
000000000001a045	movss	%xmm1, (%rsp)
000000000001a04a	pushq	%rsi
000000000001a04b	pushq	%rdi
000000000001a04c	callq	__Z7getBasev ## getBase()
000000000001a051	addq	$0x122cb0, %rax
000000000001a057	popq	%rdi
000000000001a058	popq	%rsi
000000000001a059	movss	(%rsp), %xmm1
000000000001a05e	addq	$0x10, %rsp
000000000001a062	movss	(%rsp), %xmm0
000000000001a067	addq	$0x10, %rsp
000000000001a06b	popq	%r15
000000000001a06d	popq	%r14
000000000001a06f	popq	%r13
000000000001a071	popq	%r12
000000000001a073	popq	%r11
000000000001a075	popq	%r10
000000000001a077	popq	%r9
000000000001a079	popq	%r8
000000000001a07b	popq	%rcx
000000000001a07c	popq	%rdx
000000000001a07d	popq	%rsi
000000000001a07e	popq	%rdi
000000000001a07f	popq	%rbx
000000000001a080	popq	%rbp
000000000001a081	jmpq	*%rax
__ZN7cocos2d6CCNode9getParentEv:
000000000001a083	pushq	%rbp
000000000001a084	movq	%rsp, %rbp
000000000001a087	pushq	%rbx
000000000001a088	pushq	%rdi
000000000001a089	pushq	%rsi
000000000001a08a	pushq	%rdx
000000000001a08b	pushq	%rcx
000000000001a08c	pushq	%r8
000000000001a08e	pushq	%r9
000000000001a090	pushq	%r10
000000000001a092	pushq	%r11
000000000001a094	pushq	%r12
000000000001a096	pushq	%r13
000000000001a098	pushq	%r14
000000000001a09a	pushq	%r15
000000000001a09c	subq	$0x10, %rsp
000000000001a0a0	movss	%xmm0, (%rsp)
000000000001a0a5	subq	$0x10, %rsp
000000000001a0a9	movss	%xmm1, (%rsp)
000000000001a0ae	pushq	%rsi
000000000001a0af	pushq	%rdi
000000000001a0b0	callq	__Z7getBasev ## getBase()
000000000001a0b5	addq	$0x122ed0, %rax
000000000001a0bb	popq	%rdi
000000000001a0bc	popq	%rsi
000000000001a0bd	movss	(%rsp), %xmm1
000000000001a0c2	addq	$0x10, %rsp
000000000001a0c6	movss	(%rsp), %xmm0
000000000001a0cb	addq	$0x10, %rsp
000000000001a0cf	popq	%r15
000000000001a0d1	popq	%r14
000000000001a0d3	popq	%r13
000000000001a0d5	popq	%r12
000000000001a0d7	popq	%r11
000000000001a0d9	popq	%r10
000000000001a0db	popq	%r9
000000000001a0dd	popq	%r8
000000000001a0df	popq	%rcx
000000000001a0e0	popq	%rdx
000000000001a0e1	popq	%rsi
000000000001a0e2	popq	%rdi
000000000001a0e3	popq	%rbx
000000000001a0e4	popq	%rbp
000000000001a0e5	jmpq	*%rax
__ZN7cocos2d6CCNode9getScaleXEv:
000000000001a0e7	pushq	%rbp
000000000001a0e8	movq	%rsp, %rbp
000000000001a0eb	pushq	%rbx
000000000001a0ec	pushq	%rdi
000000000001a0ed	pushq	%rsi
000000000001a0ee	pushq	%rdx
000000000001a0ef	pushq	%rcx
000000000001a0f0	pushq	%r8
000000000001a0f2	pushq	%r9
000000000001a0f4	pushq	%r10
000000000001a0f6	pushq	%r11
000000000001a0f8	pushq	%r12
000000000001a0fa	pushq	%r13
000000000001a0fc	pushq	%r14
000000000001a0fe	pushq	%r15
000000000001a100	subq	$0x10, %rsp
000000000001a104	movss	%xmm0, (%rsp)
000000000001a109	subq	$0x10, %rsp
000000000001a10d	movss	%xmm1, (%rsp)
000000000001a112	pushq	%rsi
000000000001a113	pushq	%rdi
000000000001a114	callq	__Z7getBasev ## getBase()
000000000001a119	addq	$0x122b00, %rax
000000000001a11f	popq	%rdi
000000000001a120	popq	%rsi
000000000001a121	movss	(%rsp), %xmm1
000000000001a126	addq	$0x10, %rsp
000000000001a12a	movss	(%rsp), %xmm0
000000000001a12f	addq	$0x10, %rsp
000000000001a133	popq	%r15
000000000001a135	popq	%r14
000000000001a137	popq	%r13
000000000001a139	popq	%r12
000000000001a13b	popq	%r11
000000000001a13d	popq	%r10
000000000001a13f	popq	%r9
000000000001a141	popq	%r8
000000000001a143	popq	%rcx
000000000001a144	popq	%rdx
000000000001a145	popq	%rsi
000000000001a146	popq	%rdi
000000000001a147	popq	%rbx
000000000001a148	popq	%rbp
000000000001a149	jmpq	*%rax
__ZN7cocos2d6CCNode9getScaleYEv:
000000000001a14b	pushq	%rbp
000000000001a14c	movq	%rsp, %rbp
000000000001a14f	pushq	%rbx
000000000001a150	pushq	%rdi
000000000001a151	pushq	%rsi
000000000001a152	pushq	%rdx
000000000001a153	pushq	%rcx
000000000001a154	pushq	%r8
000000000001a156	pushq	%r9
000000000001a158	pushq	%r10
000000000001a15a	pushq	%r11
000000000001a15c	pushq	%r12
000000000001a15e	pushq	%r13
000000000001a160	pushq	%r14
000000000001a162	pushq	%r15
000000000001a164	subq	$0x10, %rsp
000000000001a168	movss	%xmm0, (%rsp)
000000000001a16d	subq	$0x10, %rsp
000000000001a171	movss	%xmm1, (%rsp)
000000000001a176	pushq	%rsi
000000000001a177	pushq	%rdi
000000000001a178	callq	__Z7getBasev ## getBase()
000000000001a17d	addq	$0x122b30, %rax
000000000001a183	popq	%rdi
000000000001a184	popq	%rsi
000000000001a185	movss	(%rsp), %xmm1
000000000001a18a	addq	$0x10, %rsp
000000000001a18e	movss	(%rsp), %xmm0
000000000001a193	addq	$0x10, %rsp
000000000001a197	popq	%r15
000000000001a199	popq	%r14
000000000001a19b	popq	%r13
000000000001a19d	popq	%r12
000000000001a19f	popq	%r11
000000000001a1a1	popq	%r10
000000000001a1a3	popq	%r9
000000000001a1a5	popq	%r8
000000000001a1a7	popq	%rcx
000000000001a1a8	popq	%rdx
000000000001a1a9	popq	%rsi
000000000001a1aa	popq	%rdi
000000000001a1ab	popq	%rbx
000000000001a1ac	popq	%rbp
000000000001a1ad	jmpq	*%rax
__ZN7cocos2d6CCNode9getZOrderEv:
000000000001a1af	pushq	%rbp
000000000001a1b0	movq	%rsp, %rbp
000000000001a1b3	pushq	%rbx
000000000001a1b4	pushq	%rdi
000000000001a1b5	pushq	%rsi
000000000001a1b6	pushq	%rdx
000000000001a1b7	pushq	%rcx
000000000001a1b8	pushq	%r8
000000000001a1ba	pushq	%r9
000000000001a1bc	pushq	%r10
000000000001a1be	pushq	%r11
000000000001a1c0	pushq	%r12
000000000001a1c2	pushq	%r13
000000000001a1c4	pushq	%r14
000000000001a1c6	pushq	%r15
000000000001a1c8	subq	$0x10, %rsp
000000000001a1cc	movss	%xmm0, (%rsp)
000000000001a1d1	subq	$0x10, %rsp
000000000001a1d5	movss	%xmm1, (%rsp)
000000000001a1da	pushq	%rsi
000000000001a1db	pushq	%rdi
000000000001a1dc	callq	__Z7getBasev ## getBase()
000000000001a1e1	addq	$0x122980, %rax
000000000001a1e7	popq	%rdi
000000000001a1e8	popq	%rsi
000000000001a1e9	movss	(%rsp), %xmm1
000000000001a1ee	addq	$0x10, %rsp
000000000001a1f2	movss	(%rsp), %xmm0
000000000001a1f7	addq	$0x10, %rsp
000000000001a1fb	popq	%r15
000000000001a1fd	popq	%r14
000000000001a1ff	popq	%r13
000000000001a201	popq	%r12
000000000001a203	popq	%r11
000000000001a205	popq	%r10
000000000001a207	popq	%r9
000000000001a209	popq	%r8
000000000001a20b	popq	%rcx
000000000001a20c	popq	%rdx
000000000001a20d	popq	%rsi
000000000001a20e	popq	%rdi
000000000001a20f	popq	%rbx
000000000001a210	popq	%rbp
000000000001a211	jmpq	*%rax
__ZN7cocos2d6CCNode9isRunningEv:
000000000001a213	pushq	%rbp
000000000001a214	movq	%rsp, %rbp
000000000001a217	pushq	%rbx
000000000001a218	pushq	%rdi
000000000001a219	pushq	%rsi
000000000001a21a	pushq	%rdx
000000000001a21b	pushq	%rcx
000000000001a21c	pushq	%r8
000000000001a21e	pushq	%r9
000000000001a220	pushq	%r10
000000000001a222	pushq	%r11
000000000001a224	pushq	%r12
000000000001a226	pushq	%r13
000000000001a228	pushq	%r14
000000000001a22a	pushq	%r15
000000000001a22c	subq	$0x10, %rsp
000000000001a230	movss	%xmm0, (%rsp)
000000000001a235	subq	$0x10, %rsp
000000000001a239	movss	%xmm1, (%rsp)
000000000001a23e	pushq	%rsi
000000000001a23f	pushq	%rdi
000000000001a240	callq	__Z7getBasev ## getBase()
000000000001a245	addq	$0x122ec0, %rax
000000000001a24b	popq	%rdi
000000000001a24c	popq	%rsi
000000000001a24d	movss	(%rsp), %xmm1
000000000001a252	addq	$0x10, %rsp
000000000001a256	movss	(%rsp), %xmm0
000000000001a25b	addq	$0x10, %rsp
000000000001a25f	popq	%r15
000000000001a261	popq	%r14
000000000001a263	popq	%r13
000000000001a265	popq	%r12
000000000001a267	popq	%r11
000000000001a269	popq	%r10
000000000001a26b	popq	%r9
000000000001a26d	popq	%r8
000000000001a26f	popq	%rcx
000000000001a270	popq	%rdx
000000000001a271	popq	%rsi
000000000001a272	popq	%rdi
000000000001a273	popq	%rbx
000000000001a274	popq	%rbp
000000000001a275	jmpq	*%rax
__ZN7cocos2d6CCNode9isVisibleEv:
000000000001a277	pushq	%rbp
000000000001a278	movq	%rsp, %rbp
000000000001a27b	pushq	%rbx
000000000001a27c	pushq	%rdi
000000000001a27d	pushq	%rsi
000000000001a27e	pushq	%rdx
000000000001a27f	pushq	%rcx
000000000001a280	pushq	%r8
000000000001a282	pushq	%r9
000000000001a284	pushq	%r10
000000000001a286	pushq	%r11
000000000001a288	pushq	%r12
000000000001a28a	pushq	%r13
000000000001a28c	pushq	%r14
000000000001a28e	pushq	%r15
000000000001a290	subq	$0x10, %rsp
000000000001a294	movss	%xmm0, (%rsp)
000000000001a299	subq	$0x10, %rsp
000000000001a29d	movss	%xmm1, (%rsp)
000000000001a2a2	pushq	%rsi
000000000001a2a3	pushq	%rdi
000000000001a2a4	callq	__Z7getBasev ## getBase()
000000000001a2a9	addq	$0x122d50, %rax
000000000001a2af	popq	%rdi
000000000001a2b0	popq	%rsi
000000000001a2b1	movss	(%rsp), %xmm1
000000000001a2b6	addq	$0x10, %rsp
000000000001a2ba	movss	(%rsp), %xmm0
000000000001a2bf	addq	$0x10, %rsp
000000000001a2c3	popq	%r15
000000000001a2c5	popq	%r14
000000000001a2c7	popq	%r13
000000000001a2c9	popq	%r12
000000000001a2cb	popq	%r11
000000000001a2cd	popq	%r10
000000000001a2cf	popq	%r9
000000000001a2d1	popq	%r8
000000000001a2d3	popq	%rcx
000000000001a2d4	popq	%rdx
000000000001a2d5	popq	%rsi
000000000001a2d6	popq	%rdi
000000000001a2d7	popq	%rbx
000000000001a2d8	popq	%rbp
000000000001a2d9	jmpq	*%rax
__ZN7cocos2d6CCNode9setParentEPS0_:
000000000001a2db	pushq	%rbp
000000000001a2dc	movq	%rsp, %rbp
000000000001a2df	pushq	%rbx
000000000001a2e0	pushq	%rdi
000000000001a2e1	pushq	%rsi
000000000001a2e2	pushq	%rdx
000000000001a2e3	pushq	%rcx
000000000001a2e4	pushq	%r8
000000000001a2e6	pushq	%r9
000000000001a2e8	pushq	%r10
000000000001a2ea	pushq	%r11
000000000001a2ec	pushq	%r12
000000000001a2ee	pushq	%r13
000000000001a2f0	pushq	%r14
000000000001a2f2	pushq	%r15
000000000001a2f4	subq	$0x10, %rsp
000000000001a2f8	movss	%xmm0, (%rsp)
000000000001a2fd	subq	$0x10, %rsp
000000000001a301	movss	%xmm1, (%rsp)
000000000001a306	pushq	%rsi
000000000001a307	pushq	%rdi
000000000001a308	callq	__Z7getBasev ## getBase()
000000000001a30d	addq	$0x122ee0, %rax
000000000001a313	popq	%rdi
000000000001a314	popq	%rsi
000000000001a315	movss	(%rsp), %xmm1
000000000001a31a	addq	$0x10, %rsp
000000000001a31e	movss	(%rsp), %xmm0
000000000001a323	addq	$0x10, %rsp
000000000001a327	popq	%r15
000000000001a329	popq	%r14
000000000001a32b	popq	%r13
000000000001a32d	popq	%r12
000000000001a32f	popq	%r11
000000000001a331	popq	%r10
000000000001a333	popq	%r9
000000000001a335	popq	%r8
000000000001a337	popq	%rcx
000000000001a338	popq	%rdx
000000000001a339	popq	%rsi
000000000001a33a	popq	%rdi
000000000001a33b	popq	%rbx
000000000001a33c	popq	%rbp
000000000001a33d	jmpq	*%rax
__ZN7cocos2d6CCNode9setScaleXEf:
000000000001a33f	pushq	%rbp
000000000001a340	movq	%rsp, %rbp
000000000001a343	pushq	%rbx
000000000001a344	pushq	%rdi
000000000001a345	pushq	%rsi
000000000001a346	pushq	%rdx
000000000001a347	pushq	%rcx
000000000001a348	pushq	%r8
000000000001a34a	pushq	%r9
000000000001a34c	pushq	%r10
000000000001a34e	pushq	%r11
000000000001a350	pushq	%r12
000000000001a352	pushq	%r13
000000000001a354	pushq	%r14
000000000001a356	pushq	%r15
000000000001a358	subq	$0x10, %rsp
000000000001a35c	movss	%xmm0, (%rsp)
000000000001a361	subq	$0x10, %rsp
000000000001a365	movss	%xmm1, (%rsp)
000000000001a36a	pushq	%rsi
000000000001a36b	pushq	%rdi
000000000001a36c	callq	__Z7getBasev ## getBase()
000000000001a371	addq	$0x122b10, %rax
000000000001a377	popq	%rdi
000000000001a378	popq	%rsi
000000000001a379	movss	(%rsp), %xmm1
000000000001a37e	addq	$0x10, %rsp
000000000001a382	movss	(%rsp), %xmm0
000000000001a387	addq	$0x10, %rsp
000000000001a38b	popq	%r15
000000000001a38d	popq	%r14
000000000001a38f	popq	%r13
000000000001a391	popq	%r12
000000000001a393	popq	%r11
000000000001a395	popq	%r10
000000000001a397	popq	%r9
000000000001a399	popq	%r8
000000000001a39b	popq	%rcx
000000000001a39c	popq	%rdx
000000000001a39d	popq	%rsi
000000000001a39e	popq	%rdi
000000000001a39f	popq	%rbx
000000000001a3a0	popq	%rbp
000000000001a3a1	jmpq	*%rax
__ZN7cocos2d6CCNode9setScaleYEf:
000000000001a3a3	pushq	%rbp
000000000001a3a4	movq	%rsp, %rbp
000000000001a3a7	pushq	%rbx
000000000001a3a8	pushq	%rdi
000000000001a3a9	pushq	%rsi
000000000001a3aa	pushq	%rdx
000000000001a3ab	pushq	%rcx
000000000001a3ac	pushq	%r8
000000000001a3ae	pushq	%r9
000000000001a3b0	pushq	%r10
000000000001a3b2	pushq	%r11
000000000001a3b4	pushq	%r12
000000000001a3b6	pushq	%r13
000000000001a3b8	pushq	%r14
000000000001a3ba	pushq	%r15
000000000001a3bc	subq	$0x10, %rsp
000000000001a3c0	movss	%xmm0, (%rsp)
000000000001a3c5	subq	$0x10, %rsp
000000000001a3c9	movss	%xmm1, (%rsp)
000000000001a3ce	pushq	%rsi
000000000001a3cf	pushq	%rdi
000000000001a3d0	callq	__Z7getBasev ## getBase()
000000000001a3d5	addq	$0x122b40, %rax
000000000001a3db	popq	%rdi
000000000001a3dc	popq	%rsi
000000000001a3dd	movss	(%rsp), %xmm1
000000000001a3e2	addq	$0x10, %rsp
000000000001a3e6	movss	(%rsp), %xmm0
000000000001a3eb	addq	$0x10, %rsp
000000000001a3ef	popq	%r15
000000000001a3f1	popq	%r14
000000000001a3f3	popq	%r13
000000000001a3f5	popq	%r12
000000000001a3f7	popq	%r11
000000000001a3f9	popq	%r10
000000000001a3fb	popq	%r9
000000000001a3fd	popq	%r8
000000000001a3ff	popq	%rcx
000000000001a400	popq	%rdx
000000000001a401	popq	%rsi
000000000001a402	popq	%rdi
000000000001a403	popq	%rbx
000000000001a404	popq	%rbp
000000000001a405	jmpq	*%rax
__ZN7cocos2d6CCNode9setZOrderEi:
000000000001a407	pushq	%rbp
000000000001a408	movq	%rsp, %rbp
000000000001a40b	pushq	%rbx
000000000001a40c	pushq	%rdi
000000000001a40d	pushq	%rsi
000000000001a40e	pushq	%rdx
000000000001a40f	pushq	%rcx
000000000001a410	pushq	%r8
000000000001a412	pushq	%r9
000000000001a414	pushq	%r10
000000000001a416	pushq	%r11
000000000001a418	pushq	%r12
000000000001a41a	pushq	%r13
000000000001a41c	pushq	%r14
000000000001a41e	pushq	%r15
000000000001a420	subq	$0x10, %rsp
000000000001a424	movss	%xmm0, (%rsp)
000000000001a429	subq	$0x10, %rsp
000000000001a42d	movss	%xmm1, (%rsp)
000000000001a432	pushq	%rsi
000000000001a433	pushq	%rdi
000000000001a434	callq	__Z7getBasev ## getBase()
000000000001a439	addq	$0x1229a0, %rax
000000000001a43f	popq	%rdi
000000000001a440	popq	%rsi
000000000001a441	movss	(%rsp), %xmm1
000000000001a446	addq	$0x10, %rsp
000000000001a44a	movss	(%rsp), %xmm0
000000000001a44f	addq	$0x10, %rsp
000000000001a453	popq	%r15
000000000001a455	popq	%r14
000000000001a457	popq	%r13
000000000001a459	popq	%r12
000000000001a45b	popq	%r11
000000000001a45d	popq	%r10
000000000001a45f	popq	%r9
000000000001a461	popq	%r8
000000000001a463	popq	%rcx
000000000001a464	popq	%rdx
000000000001a465	popq	%rsi
000000000001a466	popq	%rdi
000000000001a467	popq	%rbx
000000000001a468	popq	%rbp
000000000001a469	jmpq	*%rax
__ZN7cocos2d6CCNodeC1Ev:
000000000001a46b	pushq	%rbp
000000000001a46c	movq	%rsp, %rbp
000000000001a46f	pushq	%rbx
000000000001a470	pushq	%rdi
000000000001a471	pushq	%rsi
000000000001a472	pushq	%rdx
000000000001a473	pushq	%rcx
000000000001a474	pushq	%r8
000000000001a476	pushq	%r9
000000000001a478	pushq	%r10
000000000001a47a	pushq	%r11
000000000001a47c	pushq	%r12
000000000001a47e	pushq	%r13
000000000001a480	pushq	%r14
000000000001a482	pushq	%r15
000000000001a484	subq	$0x10, %rsp
000000000001a488	movss	%xmm0, (%rsp)
000000000001a48d	subq	$0x10, %rsp
000000000001a491	movss	%xmm1, (%rsp)
000000000001a496	pushq	%rsi
000000000001a497	pushq	%rdi
000000000001a498	callq	__Z7getBasev ## getBase()
000000000001a49d	addq	$0x122550, %rax
000000000001a4a3	popq	%rdi
000000000001a4a4	popq	%rsi
000000000001a4a5	movss	(%rsp), %xmm1
000000000001a4aa	addq	$0x10, %rsp
000000000001a4ae	movss	(%rsp), %xmm0
000000000001a4b3	addq	$0x10, %rsp
000000000001a4b7	popq	%r15
000000000001a4b9	popq	%r14
000000000001a4bb	popq	%r13
000000000001a4bd	popq	%r12
000000000001a4bf	popq	%r11
000000000001a4c1	popq	%r10
000000000001a4c3	popq	%r9
000000000001a4c5	popq	%r8
000000000001a4c7	popq	%rcx
000000000001a4c8	popq	%rdx
000000000001a4c9	popq	%rsi
000000000001a4ca	popq	%rdi
000000000001a4cb	popq	%rbx
000000000001a4cc	popq	%rbp
000000000001a4cd	jmpq	*%rax
__ZN7cocos2d6CCNodeC2Ev:
000000000001a4cf	pushq	%rbp
000000000001a4d0	movq	%rsp, %rbp
000000000001a4d3	pushq	%rbx
000000000001a4d4	pushq	%rdi
000000000001a4d5	pushq	%rsi
000000000001a4d6	pushq	%rdx
000000000001a4d7	pushq	%rcx
000000000001a4d8	pushq	%r8
000000000001a4da	pushq	%r9
000000000001a4dc	pushq	%r10
000000000001a4de	pushq	%r11
000000000001a4e0	pushq	%r12
000000000001a4e2	pushq	%r13
000000000001a4e4	pushq	%r14
000000000001a4e6	pushq	%r15
000000000001a4e8	subq	$0x10, %rsp
000000000001a4ec	movss	%xmm0, (%rsp)
000000000001a4f1	subq	$0x10, %rsp
000000000001a4f5	movss	%xmm1, (%rsp)
000000000001a4fa	pushq	%rsi
000000000001a4fb	pushq	%rdi
000000000001a4fc	callq	__Z7getBasev ## getBase()
000000000001a501	addq	$0x122550, %rax
000000000001a507	popq	%rdi
000000000001a508	popq	%rsi
000000000001a509	movss	(%rsp), %xmm1
000000000001a50e	addq	$0x10, %rsp
000000000001a512	movss	(%rsp), %xmm0
000000000001a517	addq	$0x10, %rsp
000000000001a51b	popq	%r15
000000000001a51d	popq	%r14
000000000001a51f	popq	%r13
000000000001a521	popq	%r12
000000000001a523	popq	%r11
000000000001a525	popq	%r10
000000000001a527	popq	%r9
000000000001a529	popq	%r8
000000000001a52b	popq	%rcx
000000000001a52c	popq	%rdx
000000000001a52d	popq	%rsi
000000000001a52e	popq	%rdi
000000000001a52f	popq	%rbx
000000000001a530	popq	%rbp
000000000001a531	jmpq	*%rax
__ZN7cocos2d6CCNodeD0Ev:
000000000001a533	pushq	%rbp
000000000001a534	movq	%rsp, %rbp
000000000001a537	pushq	%rbx
000000000001a538	pushq	%rdi
000000000001a539	pushq	%rsi
000000000001a53a	pushq	%rdx
000000000001a53b	pushq	%rcx
000000000001a53c	pushq	%r8
000000000001a53e	pushq	%r9
000000000001a540	pushq	%r10
000000000001a542	pushq	%r11
000000000001a544	pushq	%r12
000000000001a546	pushq	%r13
000000000001a548	pushq	%r14
000000000001a54a	pushq	%r15
000000000001a54c	subq	$0x10, %rsp
000000000001a550	movss	%xmm0, (%rsp)
000000000001a555	subq	$0x10, %rsp
000000000001a559	movss	%xmm1, (%rsp)
000000000001a55e	pushq	%rsi
000000000001a55f	pushq	%rdi
000000000001a560	callq	__Z7getBasev ## getBase()
000000000001a565	addq	$0x1228e0, %rax
000000000001a56b	popq	%rdi
000000000001a56c	popq	%rsi
000000000001a56d	movss	(%rsp), %xmm1
000000000001a572	addq	$0x10, %rsp
000000000001a576	movss	(%rsp), %xmm0
000000000001a57b	addq	$0x10, %rsp
000000000001a57f	popq	%r15
000000000001a581	popq	%r14
000000000001a583	popq	%r13
000000000001a585	popq	%r12
000000000001a587	popq	%r11
000000000001a589	popq	%r10
000000000001a58b	popq	%r9
000000000001a58d	popq	%r8
000000000001a58f	popq	%rcx
000000000001a590	popq	%rdx
000000000001a591	popq	%rsi
000000000001a592	popq	%rdi
000000000001a593	popq	%rbx
000000000001a594	popq	%rbp
000000000001a595	jmpq	*%rax
__ZN7cocos2d6CCNodeD1Ev:
000000000001a597	pushq	%rbp
000000000001a598	movq	%rsp, %rbp
000000000001a59b	pushq	%rbx
000000000001a59c	pushq	%rdi
000000000001a59d	pushq	%rsi
000000000001a59e	pushq	%rdx
000000000001a59f	pushq	%rcx
000000000001a5a0	pushq	%r8
000000000001a5a2	pushq	%r9
000000000001a5a4	pushq	%r10
000000000001a5a6	pushq	%r11
000000000001a5a8	pushq	%r12
000000000001a5aa	pushq	%r13
000000000001a5ac	pushq	%r14
000000000001a5ae	pushq	%r15
000000000001a5b0	subq	$0x10, %rsp
000000000001a5b4	movss	%xmm0, (%rsp)
000000000001a5b9	subq	$0x10, %rsp
000000000001a5bd	movss	%xmm1, (%rsp)
000000000001a5c2	pushq	%rsi
000000000001a5c3	pushq	%rdi
000000000001a5c4	callq	__Z7getBasev ## getBase()
000000000001a5c9	addq	$0x1228d0, %rax
000000000001a5cf	popq	%rdi
000000000001a5d0	popq	%rsi
000000000001a5d1	movss	(%rsp), %xmm1
000000000001a5d6	addq	$0x10, %rsp
000000000001a5da	movss	(%rsp), %xmm0
000000000001a5df	addq	$0x10, %rsp
000000000001a5e3	popq	%r15
000000000001a5e5	popq	%r14
000000000001a5e7	popq	%r13
000000000001a5e9	popq	%r12
000000000001a5eb	popq	%r11
000000000001a5ed	popq	%r10
000000000001a5ef	popq	%r9
000000000001a5f1	popq	%r8
000000000001a5f3	popq	%rcx
000000000001a5f4	popq	%rdx
000000000001a5f5	popq	%rsi
000000000001a5f6	popq	%rdi
000000000001a5f7	popq	%rbx
000000000001a5f8	popq	%rbp
000000000001a5f9	jmpq	*%rax
__ZN7cocos2d6CCNodeD2Ev:
000000000001a5fb	pushq	%rbp
000000000001a5fc	movq	%rsp, %rbp
000000000001a5ff	pushq	%rbx
000000000001a600	pushq	%rdi
000000000001a601	pushq	%rsi
000000000001a602	pushq	%rdx
000000000001a603	pushq	%rcx
000000000001a604	pushq	%r8
000000000001a606	pushq	%r9
000000000001a608	pushq	%r10
000000000001a60a	pushq	%r11
000000000001a60c	pushq	%r12
000000000001a60e	pushq	%r13
000000000001a610	pushq	%r14
000000000001a612	pushq	%r15
000000000001a614	subq	$0x10, %rsp
000000000001a618	movss	%xmm0, (%rsp)
000000000001a61d	subq	$0x10, %rsp
000000000001a621	movss	%xmm1, (%rsp)
000000000001a626	pushq	%rsi
000000000001a627	pushq	%rdi
000000000001a628	callq	__Z7getBasev ## getBase()
000000000001a62d	addq	$0x1228d0, %rax
000000000001a633	popq	%rdi
000000000001a634	popq	%rsi
000000000001a635	movss	(%rsp), %xmm1
000000000001a63a	addq	$0x10, %rsp
000000000001a63e	movss	(%rsp), %xmm0
000000000001a643	addq	$0x10, %rsp
000000000001a647	popq	%r15
000000000001a649	popq	%r14
000000000001a64b	popq	%r13
000000000001a64d	popq	%r12
000000000001a64f	popq	%r11
000000000001a651	popq	%r10
000000000001a653	popq	%r9
000000000001a655	popq	%r8
000000000001a657	popq	%rcx
000000000001a658	popq	%rdx
000000000001a659	popq	%rsi
000000000001a65a	popq	%rdi
000000000001a65b	popq	%rbx
000000000001a65c	popq	%rbp
000000000001a65d	jmpq	*%rax
__ZN7cocos2d6CCRect14intersectsRectERKS0_:
000000000001a65f	pushq	%rbp
000000000001a660	movq	%rsp, %rbp
000000000001a663	pushq	%rbx
000000000001a664	pushq	%rdi
000000000001a665	pushq	%rsi
000000000001a666	pushq	%rdx
000000000001a667	pushq	%rcx
000000000001a668	pushq	%r8
000000000001a66a	pushq	%r9
000000000001a66c	pushq	%r10
000000000001a66e	pushq	%r11
000000000001a670	pushq	%r12
000000000001a672	pushq	%r13
000000000001a674	pushq	%r14
000000000001a676	pushq	%r15
000000000001a678	subq	$0x10, %rsp
000000000001a67c	movss	%xmm0, (%rsp)
000000000001a681	subq	$0x10, %rsp
000000000001a685	movss	%xmm1, (%rsp)
000000000001a68a	pushq	%rsi
000000000001a68b	pushq	%rdi
000000000001a68c	callq	__Z7getBasev ## getBase()
000000000001a691	addq	$0x137800, %rax
000000000001a697	popq	%rdi
000000000001a698	popq	%rsi
000000000001a699	movss	(%rsp), %xmm1
000000000001a69e	addq	$0x10, %rsp
000000000001a6a2	movss	(%rsp), %xmm0
000000000001a6a7	addq	$0x10, %rsp
000000000001a6ab	popq	%r15
000000000001a6ad	popq	%r14
000000000001a6af	popq	%r13
000000000001a6b1	popq	%r12
000000000001a6b3	popq	%r11
000000000001a6b5	popq	%r10
000000000001a6b7	popq	%r9
000000000001a6b9	popq	%r8
000000000001a6bb	popq	%rcx
000000000001a6bc	popq	%rdx
000000000001a6bd	popq	%rsi
000000000001a6be	popq	%rdi
000000000001a6bf	popq	%rbx
000000000001a6c0	popq	%rbp
000000000001a6c1	jmpq	*%rax
__ZN7cocos2d6CCRect7getMaxXEv:
000000000001a6c3	pushq	%rbp
000000000001a6c4	movq	%rsp, %rbp
000000000001a6c7	pushq	%rbx
000000000001a6c8	pushq	%rdi
000000000001a6c9	pushq	%rsi
000000000001a6ca	pushq	%rdx
000000000001a6cb	pushq	%rcx
000000000001a6cc	pushq	%r8
000000000001a6ce	pushq	%r9
000000000001a6d0	pushq	%r10
000000000001a6d2	pushq	%r11
000000000001a6d4	pushq	%r12
000000000001a6d6	pushq	%r13
000000000001a6d8	pushq	%r14
000000000001a6da	pushq	%r15
000000000001a6dc	subq	$0x10, %rsp
000000000001a6e0	movss	%xmm0, (%rsp)
000000000001a6e5	subq	$0x10, %rsp
000000000001a6e9	movss	%xmm1, (%rsp)
000000000001a6ee	pushq	%rsi
000000000001a6ef	pushq	%rdi
000000000001a6f0	callq	__Z7getBasev ## getBase()
000000000001a6f5	addq	$0x137710, %rax
000000000001a6fb	popq	%rdi
000000000001a6fc	popq	%rsi
000000000001a6fd	movss	(%rsp), %xmm1
000000000001a702	addq	$0x10, %rsp
000000000001a706	movss	(%rsp), %xmm0
000000000001a70b	addq	$0x10, %rsp
000000000001a70f	popq	%r15
000000000001a711	popq	%r14
000000000001a713	popq	%r13
000000000001a715	popq	%r12
000000000001a717	popq	%r11
000000000001a719	popq	%r10
000000000001a71b	popq	%r9
000000000001a71d	popq	%r8
000000000001a71f	popq	%rcx
000000000001a720	popq	%rdx
000000000001a721	popq	%rsi
000000000001a722	popq	%rdi
000000000001a723	popq	%rbx
000000000001a724	popq	%rbp
000000000001a725	jmpq	*%rax
__ZN7cocos2d6CCRect7getMaxYEv:
000000000001a727	pushq	%rbp
000000000001a728	movq	%rsp, %rbp
000000000001a72b	pushq	%rbx
000000000001a72c	pushq	%rdi
000000000001a72d	pushq	%rsi
000000000001a72e	pushq	%rdx
000000000001a72f	pushq	%rcx
000000000001a730	pushq	%r8
000000000001a732	pushq	%r9
000000000001a734	pushq	%r10
000000000001a736	pushq	%r11
000000000001a738	pushq	%r12
000000000001a73a	pushq	%r13
000000000001a73c	pushq	%r14
000000000001a73e	pushq	%r15
000000000001a740	subq	$0x10, %rsp
000000000001a744	movss	%xmm0, (%rsp)
000000000001a749	subq	$0x10, %rsp
000000000001a74d	movss	%xmm1, (%rsp)
000000000001a752	pushq	%rsi
000000000001a753	pushq	%rdi
000000000001a754	callq	__Z7getBasev ## getBase()
000000000001a759	addq	$0x137760, %rax
000000000001a75f	popq	%rdi
000000000001a760	popq	%rsi
000000000001a761	movss	(%rsp), %xmm1
000000000001a766	addq	$0x10, %rsp
000000000001a76a	movss	(%rsp), %xmm0
000000000001a76f	addq	$0x10, %rsp
000000000001a773	popq	%r15
000000000001a775	popq	%r14
000000000001a777	popq	%r13
000000000001a779	popq	%r12
000000000001a77b	popq	%r11
000000000001a77d	popq	%r10
000000000001a77f	popq	%r9
000000000001a781	popq	%r8
000000000001a783	popq	%rcx
000000000001a784	popq	%rdx
000000000001a785	popq	%rsi
000000000001a786	popq	%rdi
000000000001a787	popq	%rbx
000000000001a788	popq	%rbp
000000000001a789	jmpq	*%rax
__ZN7cocos2d6CCRect7getMinXEv:
000000000001a78b	pushq	%rbp
000000000001a78c	movq	%rsp, %rbp
000000000001a78f	pushq	%rbx
000000000001a790	pushq	%rdi
000000000001a791	pushq	%rsi
000000000001a792	pushq	%rdx
000000000001a793	pushq	%rcx
000000000001a794	pushq	%r8
000000000001a796	pushq	%r9
000000000001a798	pushq	%r10
000000000001a79a	pushq	%r11
000000000001a79c	pushq	%r12
000000000001a79e	pushq	%r13
000000000001a7a0	pushq	%r14
000000000001a7a2	pushq	%r15
000000000001a7a4	subq	$0x10, %rsp
000000000001a7a8	movss	%xmm0, (%rsp)
000000000001a7ad	subq	$0x10, %rsp
000000000001a7b1	movss	%xmm1, (%rsp)
000000000001a7b6	pushq	%rsi
000000000001a7b7	pushq	%rdi
000000000001a7b8	callq	__Z7getBasev ## getBase()
000000000001a7bd	addq	$0x137750, %rax
000000000001a7c3	popq	%rdi
000000000001a7c4	popq	%rsi
000000000001a7c5	movss	(%rsp), %xmm1
000000000001a7ca	addq	$0x10, %rsp
000000000001a7ce	movss	(%rsp), %xmm0
000000000001a7d3	addq	$0x10, %rsp
000000000001a7d7	popq	%r15
000000000001a7d9	popq	%r14
000000000001a7db	popq	%r13
000000000001a7dd	popq	%r12
000000000001a7df	popq	%r11
000000000001a7e1	popq	%r10
000000000001a7e3	popq	%r9
000000000001a7e5	popq	%r8
000000000001a7e7	popq	%rcx
000000000001a7e8	popq	%rdx
000000000001a7e9	popq	%rsi
000000000001a7ea	popq	%rdi
000000000001a7eb	popq	%rbx
000000000001a7ec	popq	%rbp
000000000001a7ed	jmpq	*%rax
__ZN7cocos2d6CCRect7getMinYEv:
000000000001a7ef	pushq	%rbp
000000000001a7f0	movq	%rsp, %rbp
000000000001a7f3	pushq	%rbx
000000000001a7f4	pushq	%rdi
000000000001a7f5	pushq	%rsi
000000000001a7f6	pushq	%rdx
000000000001a7f7	pushq	%rcx
000000000001a7f8	pushq	%r8
000000000001a7fa	pushq	%r9
000000000001a7fc	pushq	%r10
000000000001a7fe	pushq	%r11
000000000001a800	pushq	%r12
000000000001a802	pushq	%r13
000000000001a804	pushq	%r14
000000000001a806	pushq	%r15
000000000001a808	subq	$0x10, %rsp
000000000001a80c	movss	%xmm0, (%rsp)
000000000001a811	subq	$0x10, %rsp
000000000001a815	movss	%xmm1, (%rsp)
000000000001a81a	pushq	%rsi
000000000001a81b	pushq	%rdi
000000000001a81c	callq	__Z7getBasev ## getBase()
000000000001a821	addq	$0x1377a0, %rax
000000000001a827	popq	%rdi
000000000001a828	popq	%rsi
000000000001a829	movss	(%rsp), %xmm1
000000000001a82e	addq	$0x10, %rsp
000000000001a832	movss	(%rsp), %xmm0
000000000001a837	addq	$0x10, %rsp
000000000001a83b	popq	%r15
000000000001a83d	popq	%r14
000000000001a83f	popq	%r13
000000000001a841	popq	%r12
000000000001a843	popq	%r11
000000000001a845	popq	%r10
000000000001a847	popq	%r9
000000000001a849	popq	%r8
000000000001a84b	popq	%rcx
000000000001a84c	popq	%rdx
000000000001a84d	popq	%rsi
000000000001a84e	popq	%rdi
000000000001a84f	popq	%rbx
000000000001a850	popq	%rbp
000000000001a851	jmpq	*%rax
__ZN7cocos2d6CCRectaSERKS0_:
000000000001a853	pushq	%rbp
000000000001a854	movq	%rsp, %rbp
000000000001a857	pushq	%rbx
000000000001a858	pushq	%rdi
000000000001a859	pushq	%rsi
000000000001a85a	pushq	%rdx
000000000001a85b	pushq	%rcx
000000000001a85c	pushq	%r8
000000000001a85e	pushq	%r9
000000000001a860	pushq	%r10
000000000001a862	pushq	%r11
000000000001a864	pushq	%r12
000000000001a866	pushq	%r13
000000000001a868	pushq	%r14
000000000001a86a	pushq	%r15
000000000001a86c	subq	$0x10, %rsp
000000000001a870	movss	%xmm0, (%rsp)
000000000001a875	subq	$0x10, %rsp
000000000001a879	movss	%xmm1, (%rsp)
000000000001a87e	pushq	%rsi
000000000001a87f	pushq	%rdi
000000000001a880	callq	__Z7getBasev ## getBase()
000000000001a885	addq	$0x137670, %rax
000000000001a88b	popq	%rdi
000000000001a88c	popq	%rsi
000000000001a88d	movss	(%rsp), %xmm1
000000000001a892	addq	$0x10, %rsp
000000000001a896	movss	(%rsp), %xmm0
000000000001a89b	addq	$0x10, %rsp
000000000001a89f	popq	%r15
000000000001a8a1	popq	%r14
000000000001a8a3	popq	%r13
000000000001a8a5	popq	%r12
000000000001a8a7	popq	%r11
000000000001a8a9	popq	%r10
000000000001a8ab	popq	%r9
000000000001a8ad	popq	%r8
000000000001a8af	popq	%rcx
000000000001a8b0	popq	%rdx
000000000001a8b1	popq	%rsi
000000000001a8b2	popq	%rdi
000000000001a8b3	popq	%rbx
000000000001a8b4	popq	%rbp
000000000001a8b5	jmpq	*%rax
__ZN7cocos2d6CCRectC1Effff:
000000000001a8b7	pushq	%rbp
000000000001a8b8	movq	%rsp, %rbp
000000000001a8bb	pushq	%rbx
000000000001a8bc	pushq	%rdi
000000000001a8bd	pushq	%rsi
000000000001a8be	pushq	%rdx
000000000001a8bf	pushq	%rcx
000000000001a8c0	pushq	%r8
000000000001a8c2	pushq	%r9
000000000001a8c4	pushq	%r10
000000000001a8c6	pushq	%r11
000000000001a8c8	pushq	%r12
000000000001a8ca	pushq	%r13
000000000001a8cc	pushq	%r14
000000000001a8ce	pushq	%r15
000000000001a8d0	subq	$0x10, %rsp
000000000001a8d4	movss	%xmm0, (%rsp)
000000000001a8d9	subq	$0x10, %rsp
000000000001a8dd	movss	%xmm1, (%rsp)
000000000001a8e2	pushq	%rsi
000000000001a8e3	pushq	%rdi
000000000001a8e4	callq	__Z7getBasev ## getBase()
000000000001a8e9	addq	$0x137020, %rax
000000000001a8ef	popq	%rdi
000000000001a8f0	popq	%rsi
000000000001a8f1	movss	(%rsp), %xmm1
000000000001a8f6	addq	$0x10, %rsp
000000000001a8fa	movss	(%rsp), %xmm0
000000000001a8ff	addq	$0x10, %rsp
000000000001a903	popq	%r15
000000000001a905	popq	%r14
000000000001a907	popq	%r13
000000000001a909	popq	%r12
000000000001a90b	popq	%r11
000000000001a90d	popq	%r10
000000000001a90f	popq	%r9
000000000001a911	popq	%r8
000000000001a913	popq	%rcx
000000000001a914	popq	%rdx
000000000001a915	popq	%rsi
000000000001a916	popq	%rdi
000000000001a917	popq	%rbx
000000000001a918	popq	%rbp
000000000001a919	jmpq	*%rax
__ZN7cocos2d6CCRectC1ERKS0_:
000000000001a91b	pushq	%rbp
000000000001a91c	movq	%rsp, %rbp
000000000001a91f	pushq	%rbx
000000000001a920	pushq	%rdi
000000000001a921	pushq	%rsi
000000000001a922	pushq	%rdx
000000000001a923	pushq	%rcx
000000000001a924	pushq	%r8
000000000001a926	pushq	%r9
000000000001a928	pushq	%r10
000000000001a92a	pushq	%r11
000000000001a92c	pushq	%r12
000000000001a92e	pushq	%r13
000000000001a930	pushq	%r14
000000000001a932	pushq	%r15
000000000001a934	subq	$0x10, %rsp
000000000001a938	movss	%xmm0, (%rsp)
000000000001a93d	subq	$0x10, %rsp
000000000001a941	movss	%xmm1, (%rsp)
000000000001a946	pushq	%rsi
000000000001a947	pushq	%rdi
000000000001a948	callq	__Z7getBasev ## getBase()
000000000001a94d	addq	$0x137630, %rax
000000000001a953	popq	%rdi
000000000001a954	popq	%rsi
000000000001a955	movss	(%rsp), %xmm1
000000000001a95a	addq	$0x10, %rsp
000000000001a95e	movss	(%rsp), %xmm0
000000000001a963	addq	$0x10, %rsp
000000000001a967	popq	%r15
000000000001a969	popq	%r14
000000000001a96b	popq	%r13
000000000001a96d	popq	%r12
000000000001a96f	popq	%r11
000000000001a971	popq	%r10
000000000001a973	popq	%r9
000000000001a975	popq	%r8
000000000001a977	popq	%rcx
000000000001a978	popq	%rdx
000000000001a979	popq	%rsi
000000000001a97a	popq	%rdi
000000000001a97b	popq	%rbx
000000000001a97c	popq	%rbp
000000000001a97d	jmpq	*%rax
__ZN7cocos2d6CCRectC2Ev:
000000000001a97f	pushq	%rbp
000000000001a980	movq	%rsp, %rbp
000000000001a983	pushq	%rbx
000000000001a984	pushq	%rdi
000000000001a985	pushq	%rsi
000000000001a986	pushq	%rdx
000000000001a987	pushq	%rcx
000000000001a988	pushq	%r8
000000000001a98a	pushq	%r9
000000000001a98c	pushq	%r10
000000000001a98e	pushq	%r11
000000000001a990	pushq	%r12
000000000001a992	pushq	%r13
000000000001a994	pushq	%r14
000000000001a996	pushq	%r15
000000000001a998	subq	$0x10, %rsp
000000000001a99c	movss	%xmm0, (%rsp)
000000000001a9a1	subq	$0x10, %rsp
000000000001a9a5	movss	%xmm1, (%rsp)
000000000001a9aa	pushq	%rsi
000000000001a9ab	pushq	%rdi
000000000001a9ac	callq	__Z7getBasev ## getBase()
000000000001a9b1	addq	$0x1375a0, %rax
000000000001a9b7	popq	%rdi
000000000001a9b8	popq	%rsi
000000000001a9b9	movss	(%rsp), %xmm1
000000000001a9be	addq	$0x10, %rsp
000000000001a9c2	movss	(%rsp), %xmm0
000000000001a9c7	addq	$0x10, %rsp
000000000001a9cb	popq	%r15
000000000001a9cd	popq	%r14
000000000001a9cf	popq	%r13
000000000001a9d1	popq	%r12
000000000001a9d3	popq	%r11
000000000001a9d5	popq	%r10
000000000001a9d7	popq	%r9
000000000001a9d9	popq	%r8
000000000001a9db	popq	%rcx
000000000001a9dc	popq	%rdx
000000000001a9dd	popq	%rsi
000000000001a9de	popq	%rdi
000000000001a9df	popq	%rbx
000000000001a9e0	popq	%rbp
000000000001a9e1	jmpq	*%rax
__ZN7cocos2d6CCSizeC1Eff:
000000000001a9e3	pushq	%rbp
000000000001a9e4	movq	%rsp, %rbp
000000000001a9e7	pushq	%rbx
000000000001a9e8	pushq	%rdi
000000000001a9e9	pushq	%rsi
000000000001a9ea	pushq	%rdx
000000000001a9eb	pushq	%rcx
000000000001a9ec	pushq	%r8
000000000001a9ee	pushq	%r9
000000000001a9f0	pushq	%r10
000000000001a9f2	pushq	%r11
000000000001a9f4	pushq	%r12
000000000001a9f6	pushq	%r13
000000000001a9f8	pushq	%r14
000000000001a9fa	pushq	%r15
000000000001a9fc	subq	$0x10, %rsp
000000000001aa00	movss	%xmm0, (%rsp)
000000000001aa05	subq	$0x10, %rsp
000000000001aa09	movss	%xmm1, (%rsp)
000000000001aa0e	pushq	%rsi
000000000001aa0f	pushq	%rdi
000000000001aa10	callq	__Z7getBasev ## getBase()
000000000001aa15	addq	$0x137010, %rax
000000000001aa1b	popq	%rdi
000000000001aa1c	popq	%rsi
000000000001aa1d	movss	(%rsp), %xmm1
000000000001aa22	addq	$0x10, %rsp
000000000001aa26	movss	(%rsp), %xmm0
000000000001aa2b	addq	$0x10, %rsp
000000000001aa2f	popq	%r15
000000000001aa31	popq	%r14
000000000001aa33	popq	%r13
000000000001aa35	popq	%r12
000000000001aa37	popq	%r11
000000000001aa39	popq	%r10
000000000001aa3b	popq	%r9
000000000001aa3d	popq	%r8
000000000001aa3f	popq	%rcx
000000000001aa40	popq	%rdx
000000000001aa41	popq	%rsi
000000000001aa42	popq	%rdi
000000000001aa43	popq	%rbx
000000000001aa44	popq	%rbp
000000000001aa45	jmpq	*%rax
__ZN7cocos2d7CCArray13objectAtIndexEj:
000000000001aa47	pushq	%rbp
000000000001aa48	movq	%rsp, %rbp
000000000001aa4b	pushq	%rbx
000000000001aa4c	pushq	%rdi
000000000001aa4d	pushq	%rsi
000000000001aa4e	pushq	%rdx
000000000001aa4f	pushq	%rcx
000000000001aa50	pushq	%r8
000000000001aa52	pushq	%r9
000000000001aa54	pushq	%r10
000000000001aa56	pushq	%r11
000000000001aa58	pushq	%r12
000000000001aa5a	pushq	%r13
000000000001aa5c	pushq	%r14
000000000001aa5e	pushq	%r15
000000000001aa60	subq	$0x10, %rsp
000000000001aa64	movss	%xmm0, (%rsp)
000000000001aa69	subq	$0x10, %rsp
000000000001aa6d	movss	%xmm1, (%rsp)
000000000001aa72	pushq	%rsi
000000000001aa73	pushq	%rdi
000000000001aa74	callq	__Z7getBasev ## getBase()
000000000001aa79	addq	$0x41a340, %rax
000000000001aa7f	popq	%rdi
000000000001aa80	popq	%rsi
000000000001aa81	movss	(%rsp), %xmm1
000000000001aa86	addq	$0x10, %rsp
000000000001aa8a	movss	(%rsp), %xmm0
000000000001aa8f	addq	$0x10, %rsp
000000000001aa93	popq	%r15
000000000001aa95	popq	%r14
000000000001aa97	popq	%r13
000000000001aa99	popq	%r12
000000000001aa9b	popq	%r11
000000000001aa9d	popq	%r10
000000000001aa9f	popq	%r9
000000000001aaa1	popq	%r8
000000000001aaa3	popq	%rcx
000000000001aaa4	popq	%rdx
000000000001aaa5	popq	%rsi
000000000001aaa6	popq	%rdi
000000000001aaa7	popq	%rbx
000000000001aaa8	popq	%rbp
000000000001aaa9	jmpq	*%rax
__ZN7cocos2d7CCArray6createEv:
000000000001aaab	pushq	%rbp
000000000001aaac	movq	%rsp, %rbp
000000000001aaaf	pushq	%rbx
000000000001aab0	pushq	%rdi
000000000001aab1	pushq	%rsi
000000000001aab2	pushq	%rdx
000000000001aab3	pushq	%rcx
000000000001aab4	pushq	%r8
000000000001aab6	pushq	%r9
000000000001aab8	pushq	%r10
000000000001aaba	pushq	%r11
000000000001aabc	pushq	%r12
000000000001aabe	pushq	%r13
000000000001aac0	pushq	%r14
000000000001aac2	pushq	%r15
000000000001aac4	subq	$0x10, %rsp
000000000001aac8	movss	%xmm0, (%rsp)
000000000001aacd	subq	$0x10, %rsp
000000000001aad1	movss	%xmm1, (%rsp)
000000000001aad6	pushq	%rsi
000000000001aad7	pushq	%rdi
000000000001aad8	callq	__Z7getBasev ## getBase()
000000000001aadd	addq	$0x419cb0, %rax
000000000001aae3	popq	%rdi
000000000001aae4	popq	%rsi
000000000001aae5	movss	(%rsp), %xmm1
000000000001aaea	addq	$0x10, %rsp
000000000001aaee	movss	(%rsp), %xmm0
000000000001aaf3	addq	$0x10, %rsp
000000000001aaf7	popq	%r15
000000000001aaf9	popq	%r14
000000000001aafb	popq	%r13
000000000001aafd	popq	%r12
000000000001aaff	popq	%r11
000000000001ab01	popq	%r10
000000000001ab03	popq	%r9
000000000001ab05	popq	%r8
000000000001ab07	popq	%rcx
000000000001ab08	popq	%rdx
000000000001ab09	popq	%rsi
000000000001ab0a	popq	%rdi
000000000001ab0b	popq	%rbx
000000000001ab0c	popq	%rbp
000000000001ab0d	jmpq	*%rax
__ZN7cocos2d7CCArray9addObjectEPNS_8CCObjectE:
000000000001ab0f	pushq	%rbp
000000000001ab10	movq	%rsp, %rbp
000000000001ab13	pushq	%rbx
000000000001ab14	pushq	%rdi
000000000001ab15	pushq	%rsi
000000000001ab16	pushq	%rdx
000000000001ab17	pushq	%rcx
000000000001ab18	pushq	%r8
000000000001ab1a	pushq	%r9
000000000001ab1c	pushq	%r10
000000000001ab1e	pushq	%r11
000000000001ab20	pushq	%r12
000000000001ab22	pushq	%r13
000000000001ab24	pushq	%r14
000000000001ab26	pushq	%r15
000000000001ab28	subq	$0x10, %rsp
000000000001ab2c	movss	%xmm0, (%rsp)
000000000001ab31	subq	$0x10, %rsp
000000000001ab35	movss	%xmm1, (%rsp)
000000000001ab3a	pushq	%rsi
000000000001ab3b	pushq	%rdi
000000000001ab3c	callq	__Z7getBasev ## getBase()
000000000001ab41	addq	$0x419f90, %rax
000000000001ab47	popq	%rdi
000000000001ab48	popq	%rsi
000000000001ab49	movss	(%rsp), %xmm1
000000000001ab4e	addq	$0x10, %rsp
000000000001ab52	movss	(%rsp), %xmm0
000000000001ab57	addq	$0x10, %rsp
000000000001ab5b	popq	%r15
000000000001ab5d	popq	%r14
000000000001ab5f	popq	%r13
000000000001ab61	popq	%r12
000000000001ab63	popq	%r11
000000000001ab65	popq	%r10
000000000001ab67	popq	%r9
000000000001ab69	popq	%r8
000000000001ab6b	popq	%rcx
000000000001ab6c	popq	%rdx
000000000001ab6d	popq	%rsi
000000000001ab6e	popq	%rdi
000000000001ab6f	popq	%rbx
000000000001ab70	popq	%rbp
000000000001ab71	jmpq	*%rax
__ZN7cocos2d7CCArray19removeObjectAtIndexEjb:
000000000001ab73	pushq	%rbp
000000000001ab74	movq	%rsp, %rbp
000000000001ab77	pushq	%rbx
000000000001ab78	pushq	%rdi
000000000001ab79	pushq	%rsi
000000000001ab7a	pushq	%rdx
000000000001ab7b	pushq	%rcx
000000000001ab7c	pushq	%r8
000000000001ab7e	pushq	%r9
000000000001ab80	pushq	%r10
000000000001ab82	pushq	%r11
000000000001ab84	pushq	%r12
000000000001ab86	pushq	%r13
000000000001ab88	pushq	%r14
000000000001ab8a	pushq	%r15
000000000001ab8c	subq	$0x10, %rsp
000000000001ab90	movss	%xmm0, (%rsp)
000000000001ab95	subq	$0x10, %rsp
000000000001ab99	movss	%xmm1, (%rsp)
000000000001ab9e	pushq	%rsi
000000000001ab9f	pushq	%rdi
000000000001aba0	callq	__Z7getBasev ## getBase()
000000000001aba5	addq	$0x41a4b0, %rax
000000000001abab	popq	%rdi
000000000001abac	popq	%rsi
000000000001abad	movss	(%rsp), %xmm1
000000000001abb2	addq	$0x10, %rsp
000000000001abb6	movss	(%rsp), %xmm0
000000000001abbb	addq	$0x10, %rsp
000000000001abbf	popq	%r15
000000000001abc1	popq	%r14
000000000001abc3	popq	%r13
000000000001abc5	popq	%r12
000000000001abc7	popq	%r11
000000000001abc9	popq	%r10
000000000001abcb	popq	%r9
000000000001abcd	popq	%r8
000000000001abcf	popq	%rcx
000000000001abd0	popq	%rdx
000000000001abd1	popq	%rsi
000000000001abd2	popq	%rdi
000000000001abd3	popq	%rbx
000000000001abd4	popq	%rbp
000000000001abd5	jmpq	*%rax
__ZN7cocos2d7CCImage17initWithImageDataEPviNS0_12EImageFormatEiii:
000000000001abd7	pushq	%rbp
000000000001abd8	movq	%rsp, %rbp
000000000001abdb	pushq	%rbx
000000000001abdc	pushq	%rdi
000000000001abdd	pushq	%rsi
000000000001abde	pushq	%rdx
000000000001abdf	pushq	%rcx
000000000001abe0	pushq	%r8
000000000001abe2	pushq	%r9
000000000001abe4	pushq	%r10
000000000001abe6	pushq	%r11
000000000001abe8	pushq	%r12
000000000001abea	pushq	%r13
000000000001abec	pushq	%r14
000000000001abee	pushq	%r15
000000000001abf0	subq	$0x10, %rsp
000000000001abf4	movss	%xmm0, (%rsp)
000000000001abf9	subq	$0x10, %rsp
000000000001abfd	movss	%xmm1, (%rsp)
000000000001ac02	pushq	%rsi
000000000001ac03	pushq	%rdi
000000000001ac04	callq	__Z7getBasev ## getBase()
000000000001ac09	addq	$0x24fcb0, %rax
000000000001ac0f	popq	%rdi
000000000001ac10	popq	%rsi
000000000001ac11	movss	(%rsp), %xmm1
000000000001ac16	addq	$0x10, %rsp
000000000001ac1a	movss	(%rsp), %xmm0
000000000001ac1f	addq	$0x10, %rsp
000000000001ac23	popq	%r15
000000000001ac25	popq	%r14
000000000001ac27	popq	%r13
000000000001ac29	popq	%r12
000000000001ac2b	popq	%r11
000000000001ac2d	popq	%r10
000000000001ac2f	popq	%r9
000000000001ac31	popq	%r8
000000000001ac33	popq	%rcx
000000000001ac34	popq	%rdx
000000000001ac35	popq	%rsi
000000000001ac36	popq	%rdi
000000000001ac37	popq	%rbx
000000000001ac38	popq	%rbp
000000000001ac39	jmpq	*%rax
__ZN7cocos2d7CCImageC1Ev:
000000000001ac3b	pushq	%rbp
000000000001ac3c	movq	%rsp, %rbp
000000000001ac3f	pushq	%rbx
000000000001ac40	pushq	%rdi
000000000001ac41	pushq	%rsi
000000000001ac42	pushq	%rdx
000000000001ac43	pushq	%rcx
000000000001ac44	pushq	%r8
000000000001ac46	pushq	%r9
000000000001ac48	pushq	%r10
000000000001ac4a	pushq	%r11
000000000001ac4c	pushq	%r12
000000000001ac4e	pushq	%r13
000000000001ac50	pushq	%r14
000000000001ac52	pushq	%r15
000000000001ac54	subq	$0x10, %rsp
000000000001ac58	movss	%xmm0, (%rsp)
000000000001ac5d	subq	$0x10, %rsp
000000000001ac61	movss	%xmm1, (%rsp)
000000000001ac66	pushq	%rsi
000000000001ac67	pushq	%rdi
000000000001ac68	callq	__Z7getBasev ## getBase()
000000000001ac6d	addq	$0x24fa00, %rax
000000000001ac73	popq	%rdi
000000000001ac74	popq	%rsi
000000000001ac75	movss	(%rsp), %xmm1
000000000001ac7a	addq	$0x10, %rsp
000000000001ac7e	movss	(%rsp), %xmm0
000000000001ac83	addq	$0x10, %rsp
000000000001ac87	popq	%r15
000000000001ac89	popq	%r14
000000000001ac8b	popq	%r13
000000000001ac8d	popq	%r12
000000000001ac8f	popq	%r11
000000000001ac91	popq	%r10
000000000001ac93	popq	%r9
000000000001ac95	popq	%r8
000000000001ac97	popq	%rcx
000000000001ac98	popq	%rdx
000000000001ac99	popq	%rsi
000000000001ac9a	popq	%rdi
000000000001ac9b	popq	%rbx
000000000001ac9c	popq	%rbp
000000000001ac9d	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchBeganEPNS_7CCTouchEPNS_7CCEventE:
000000000001ac9f	pushq	%rbp
000000000001aca0	movq	%rsp, %rbp
000000000001aca3	pushq	%rbx
000000000001aca4	pushq	%rdi
000000000001aca5	pushq	%rsi
000000000001aca6	pushq	%rdx
000000000001aca7	pushq	%rcx
000000000001aca8	pushq	%r8
000000000001acaa	pushq	%r9
000000000001acac	pushq	%r10
000000000001acae	pushq	%r11
000000000001acb0	pushq	%r12
000000000001acb2	pushq	%r13
000000000001acb4	pushq	%r14
000000000001acb6	pushq	%r15
000000000001acb8	subq	$0x10, %rsp
000000000001acbc	movss	%xmm0, (%rsp)
000000000001acc1	subq	$0x10, %rsp
000000000001acc5	movss	%xmm1, (%rsp)
000000000001acca	pushq	%rsi
000000000001accb	pushq	%rdi
000000000001accc	callq	__Z7getBasev ## getBase()
000000000001acd1	addq	$0x2734d0, %rax
000000000001acd7	popq	%rdi
000000000001acd8	popq	%rsi
000000000001acd9	movss	(%rsp), %xmm1
000000000001acde	addq	$0x10, %rsp
000000000001ace2	movss	(%rsp), %xmm0
000000000001ace7	addq	$0x10, %rsp
000000000001aceb	popq	%r15
000000000001aced	popq	%r14
000000000001acef	popq	%r13
000000000001acf1	popq	%r12
000000000001acf3	popq	%r11
000000000001acf5	popq	%r10
000000000001acf7	popq	%r9
000000000001acf9	popq	%r8
000000000001acfb	popq	%rcx
000000000001acfc	popq	%rdx
000000000001acfd	popq	%rsi
000000000001acfe	popq	%rdi
000000000001acff	popq	%rbx
000000000001ad00	popq	%rbp
000000000001ad01	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchEndedEPNS_7CCTouchEPNS_7CCEventE:
000000000001ad03	pushq	%rbp
000000000001ad04	movq	%rsp, %rbp
000000000001ad07	pushq	%rbx
000000000001ad08	pushq	%rdi
000000000001ad09	pushq	%rsi
000000000001ad0a	pushq	%rdx
000000000001ad0b	pushq	%rcx
000000000001ad0c	pushq	%r8
000000000001ad0e	pushq	%r9
000000000001ad10	pushq	%r10
000000000001ad12	pushq	%r11
000000000001ad14	pushq	%r12
000000000001ad16	pushq	%r13
000000000001ad18	pushq	%r14
000000000001ad1a	pushq	%r15
000000000001ad1c	subq	$0x10, %rsp
000000000001ad20	movss	%xmm0, (%rsp)
000000000001ad25	subq	$0x10, %rsp
000000000001ad29	movss	%xmm1, (%rsp)
000000000001ad2e	pushq	%rsi
000000000001ad2f	pushq	%rdi
000000000001ad30	callq	__Z7getBasev ## getBase()
000000000001ad35	addq	$0x2735d0, %rax
000000000001ad3b	popq	%rdi
000000000001ad3c	popq	%rsi
000000000001ad3d	movss	(%rsp), %xmm1
000000000001ad42	addq	$0x10, %rsp
000000000001ad46	movss	(%rsp), %xmm0
000000000001ad4b	addq	$0x10, %rsp
000000000001ad4f	popq	%r15
000000000001ad51	popq	%r14
000000000001ad53	popq	%r13
000000000001ad55	popq	%r12
000000000001ad57	popq	%r11
000000000001ad59	popq	%r10
000000000001ad5b	popq	%r9
000000000001ad5d	popq	%r8
000000000001ad5f	popq	%rcx
000000000001ad60	popq	%rdx
000000000001ad61	popq	%rsi
000000000001ad62	popq	%rdi
000000000001ad63	popq	%rbx
000000000001ad64	popq	%rbp
000000000001ad65	jmpq	*%rax
__ZN7cocos2d7CCLayer12ccTouchMovedEPNS_7CCTouchEPNS_7CCEventE:
000000000001ad67	pushq	%rbp
000000000001ad68	movq	%rsp, %rbp
000000000001ad6b	pushq	%rbx
000000000001ad6c	pushq	%rdi
000000000001ad6d	pushq	%rsi
000000000001ad6e	pushq	%rdx
000000000001ad6f	pushq	%rcx
000000000001ad70	pushq	%r8
000000000001ad72	pushq	%r9
000000000001ad74	pushq	%r10
000000000001ad76	pushq	%r11
000000000001ad78	pushq	%r12
000000000001ad7a	pushq	%r13
000000000001ad7c	pushq	%r14
000000000001ad7e	pushq	%r15
000000000001ad80	subq	$0x10, %rsp
000000000001ad84	movss	%xmm0, (%rsp)
000000000001ad89	subq	$0x10, %rsp
000000000001ad8d	movss	%xmm1, (%rsp)
000000000001ad92	pushq	%rsi
000000000001ad93	pushq	%rdi
000000000001ad94	callq	__Z7getBasev ## getBase()
000000000001ad99	addq	$0x273550, %rax
000000000001ad9f	popq	%rdi
000000000001ada0	popq	%rsi
000000000001ada1	movss	(%rsp), %xmm1
000000000001ada6	addq	$0x10, %rsp
000000000001adaa	movss	(%rsp), %xmm0
000000000001adaf	addq	$0x10, %rsp
000000000001adb3	popq	%r15
000000000001adb5	popq	%r14
000000000001adb7	popq	%r13
000000000001adb9	popq	%r12
000000000001adbb	popq	%r11
000000000001adbd	popq	%r10
000000000001adbf	popq	%r9
000000000001adc1	popq	%r8
000000000001adc3	popq	%rcx
000000000001adc4	popq	%rdx
000000000001adc5	popq	%rsi
000000000001adc6	popq	%rdi
000000000001adc7	popq	%rbx
000000000001adc8	popq	%rbp
000000000001adc9	jmpq	*%rax
__ZN7cocos2d7CCLayer12getTouchModeEv:
000000000001adcb	pushq	%rbp
000000000001adcc	movq	%rsp, %rbp
000000000001adcf	pushq	%rbx
000000000001add0	pushq	%rdi
000000000001add1	pushq	%rsi
000000000001add2	pushq	%rdx
000000000001add3	pushq	%rcx
000000000001add4	pushq	%r8
000000000001add6	pushq	%r9
000000000001add8	pushq	%r10
000000000001adda	pushq	%r11
000000000001addc	pushq	%r12
000000000001adde	pushq	%r13
000000000001ade0	pushq	%r14
000000000001ade2	pushq	%r15
000000000001ade4	subq	$0x10, %rsp
000000000001ade8	movss	%xmm0, (%rsp)
000000000001aded	subq	$0x10, %rsp
000000000001adf1	movss	%xmm1, (%rsp)
000000000001adf6	pushq	%rsi
000000000001adf7	pushq	%rdi
000000000001adf8	callq	__Z7getBasev ## getBase()
000000000001adfd	addq	$0x272e10, %rax
000000000001ae03	popq	%rdi
000000000001ae04	popq	%rsi
000000000001ae05	movss	(%rsp), %xmm1
000000000001ae0a	addq	$0x10, %rsp
000000000001ae0e	movss	(%rsp), %xmm0
000000000001ae13	addq	$0x10, %rsp
000000000001ae17	popq	%r15
000000000001ae19	popq	%r14
000000000001ae1b	popq	%r13
000000000001ae1d	popq	%r12
000000000001ae1f	popq	%r11
000000000001ae21	popq	%r10
000000000001ae23	popq	%r9
000000000001ae25	popq	%r8
000000000001ae27	popq	%rcx
000000000001ae28	popq	%rdx
000000000001ae29	popq	%rsi
000000000001ae2a	popq	%rdi
000000000001ae2b	popq	%rbx
000000000001ae2c	popq	%rbp
000000000001ae2d	jmpq	*%rax
__ZN7cocos2d7CCLayer12setTouchModeENS_13ccTouchesModeE:
000000000001ae2f	pushq	%rbp
000000000001ae30	movq	%rsp, %rbp
000000000001ae33	pushq	%rbx
000000000001ae34	pushq	%rdi
000000000001ae35	pushq	%rsi
000000000001ae36	pushq	%rdx
000000000001ae37	pushq	%rcx
000000000001ae38	pushq	%r8
000000000001ae3a	pushq	%r9
000000000001ae3c	pushq	%r10
000000000001ae3e	pushq	%r11
000000000001ae40	pushq	%r12
000000000001ae42	pushq	%r13
000000000001ae44	pushq	%r14
000000000001ae46	pushq	%r15
000000000001ae48	subq	$0x10, %rsp
000000000001ae4c	movss	%xmm0, (%rsp)
000000000001ae51	subq	$0x10, %rsp
000000000001ae55	movss	%xmm1, (%rsp)
000000000001ae5a	pushq	%rsi
000000000001ae5b	pushq	%rdi
000000000001ae5c	callq	__Z7getBasev ## getBase()
000000000001ae61	addq	$0x272d60, %rax
000000000001ae67	popq	%rdi
000000000001ae68	popq	%rsi
000000000001ae69	movss	(%rsp), %xmm1
000000000001ae6e	addq	$0x10, %rsp
000000000001ae72	movss	(%rsp), %xmm0
000000000001ae77	addq	$0x10, %rsp
000000000001ae7b	popq	%r15
000000000001ae7d	popq	%r14
000000000001ae7f	popq	%r13
000000000001ae81	popq	%r12
000000000001ae83	popq	%r11
000000000001ae85	popq	%r10
000000000001ae87	popq	%r9
000000000001ae89	popq	%r8
000000000001ae8b	popq	%rcx
000000000001ae8c	popq	%rdx
000000000001ae8d	popq	%rsi
000000000001ae8e	popq	%rdi
000000000001ae8f	popq	%rbx
000000000001ae90	popq	%rbp
000000000001ae91	jmpq	*%rax
__ZN7cocos2d7CCLayer13didAccelerateEPNS_14CCAccelerationE:
000000000001ae93	pushq	%rbp
000000000001ae94	movq	%rsp, %rbp
000000000001ae97	pushq	%rbx
000000000001ae98	pushq	%rdi
000000000001ae99	pushq	%rsi
000000000001ae9a	pushq	%rdx
000000000001ae9b	pushq	%rcx
000000000001ae9c	pushq	%r8
000000000001ae9e	pushq	%r9
000000000001aea0	pushq	%r10
000000000001aea2	pushq	%r11
000000000001aea4	pushq	%r12
000000000001aea6	pushq	%r13
000000000001aea8	pushq	%r14
000000000001aeaa	pushq	%r15
000000000001aeac	subq	$0x10, %rsp
000000000001aeb0	movss	%xmm0, (%rsp)
000000000001aeb5	subq	$0x10, %rsp
000000000001aeb9	movss	%xmm1, (%rsp)
000000000001aebe	pushq	%rsi
000000000001aebf	pushq	%rdi
000000000001aec0	callq	__Z7getBasev ## getBase()
000000000001aec5	addq	$0x272ea0, %rax
000000000001aecb	popq	%rdi
000000000001aecc	popq	%rsi
000000000001aecd	movss	(%rsp), %xmm1
000000000001aed2	addq	$0x10, %rsp
000000000001aed6	movss	(%rsp), %xmm0
000000000001aedb	addq	$0x10, %rsp
000000000001aedf	popq	%r15
000000000001aee1	popq	%r14
000000000001aee3	popq	%r13
000000000001aee5	popq	%r12
000000000001aee7	popq	%r11
000000000001aee9	popq	%r10
000000000001aeeb	popq	%r9
000000000001aeed	popq	%r8
000000000001aeef	popq	%rcx
000000000001aef0	popq	%rdx
000000000001aef1	popq	%rsi
000000000001aef2	popq	%rdi
000000000001aef3	popq	%rbx
000000000001aef4	popq	%rbp
000000000001aef5	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesBeganEPNS_5CCSetEPNS_7CCEventE:
000000000001aef7	pushq	%rbp
000000000001aef8	movq	%rsp, %rbp
000000000001aefb	pushq	%rbx
000000000001aefc	pushq	%rdi
000000000001aefd	pushq	%rsi
000000000001aefe	pushq	%rdx
000000000001aeff	pushq	%rcx
000000000001af00	pushq	%r8
000000000001af02	pushq	%r9
000000000001af04	pushq	%r10
000000000001af06	pushq	%r11
000000000001af08	pushq	%r12
000000000001af0a	pushq	%r13
000000000001af0c	pushq	%r14
000000000001af0e	pushq	%r15
000000000001af10	subq	$0x10, %rsp
000000000001af14	movss	%xmm0, (%rsp)
000000000001af19	subq	$0x10, %rsp
000000000001af1d	movss	%xmm1, (%rsp)
000000000001af22	pushq	%rsi
000000000001af23	pushq	%rdi
000000000001af24	callq	__Z7getBasev ## getBase()
000000000001af29	addq	$0x2736d0, %rax
000000000001af2f	popq	%rdi
000000000001af30	popq	%rsi
000000000001af31	movss	(%rsp), %xmm1
000000000001af36	addq	$0x10, %rsp
000000000001af3a	movss	(%rsp), %xmm0
000000000001af3f	addq	$0x10, %rsp
000000000001af43	popq	%r15
000000000001af45	popq	%r14
000000000001af47	popq	%r13
000000000001af49	popq	%r12
000000000001af4b	popq	%r11
000000000001af4d	popq	%r10
000000000001af4f	popq	%r9
000000000001af51	popq	%r8
000000000001af53	popq	%rcx
000000000001af54	popq	%rdx
000000000001af55	popq	%rsi
000000000001af56	popq	%rdi
000000000001af57	popq	%rbx
000000000001af58	popq	%rbp
000000000001af59	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesEndedEPNS_5CCSetEPNS_7CCEventE:
000000000001af5b	pushq	%rbp
000000000001af5c	movq	%rsp, %rbp
000000000001af5f	pushq	%rbx
000000000001af60	pushq	%rdi
000000000001af61	pushq	%rsi
000000000001af62	pushq	%rdx
000000000001af63	pushq	%rcx
000000000001af64	pushq	%r8
000000000001af66	pushq	%r9
000000000001af68	pushq	%r10
000000000001af6a	pushq	%r11
000000000001af6c	pushq	%r12
000000000001af6e	pushq	%r13
000000000001af70	pushq	%r14
000000000001af72	pushq	%r15
000000000001af74	subq	$0x10, %rsp
000000000001af78	movss	%xmm0, (%rsp)
000000000001af7d	subq	$0x10, %rsp
000000000001af81	movss	%xmm1, (%rsp)
000000000001af86	pushq	%rsi
000000000001af87	pushq	%rdi
000000000001af88	callq	__Z7getBasev ## getBase()
000000000001af8d	addq	$0x2737d0, %rax
000000000001af93	popq	%rdi
000000000001af94	popq	%rsi
000000000001af95	movss	(%rsp), %xmm1
000000000001af9a	addq	$0x10, %rsp
000000000001af9e	movss	(%rsp), %xmm0
000000000001afa3	addq	$0x10, %rsp
000000000001afa7	popq	%r15
000000000001afa9	popq	%r14
000000000001afab	popq	%r13
000000000001afad	popq	%r12
000000000001afaf	popq	%r11
000000000001afb1	popq	%r10
000000000001afb3	popq	%r9
000000000001afb5	popq	%r8
000000000001afb7	popq	%rcx
000000000001afb8	popq	%rdx
000000000001afb9	popq	%rsi
000000000001afba	popq	%rdi
000000000001afbb	popq	%rbx
000000000001afbc	popq	%rbp
000000000001afbd	jmpq	*%rax
__ZN7cocos2d7CCLayer14ccTouchesMovedEPNS_5CCSetEPNS_7CCEventE:
000000000001afbf	pushq	%rbp
000000000001afc0	movq	%rsp, %rbp
000000000001afc3	pushq	%rbx
000000000001afc4	pushq	%rdi
000000000001afc5	pushq	%rsi
000000000001afc6	pushq	%rdx
000000000001afc7	pushq	%rcx
000000000001afc8	pushq	%r8
000000000001afca	pushq	%r9
000000000001afcc	pushq	%r10
000000000001afce	pushq	%r11
000000000001afd0	pushq	%r12
000000000001afd2	pushq	%r13
000000000001afd4	pushq	%r14
000000000001afd6	pushq	%r15
000000000001afd8	subq	$0x10, %rsp
000000000001afdc	movss	%xmm0, (%rsp)
000000000001afe1	subq	$0x10, %rsp
000000000001afe5	movss	%xmm1, (%rsp)
000000000001afea	pushq	%rsi
000000000001afeb	pushq	%rdi
000000000001afec	callq	__Z7getBasev ## getBase()
000000000001aff1	addq	$0x273750, %rax
000000000001aff7	popq	%rdi
000000000001aff8	popq	%rsi
000000000001aff9	movss	(%rsp), %xmm1
000000000001affe	addq	$0x10, %rsp
000000000001b002	movss	(%rsp), %xmm0
000000000001b007	addq	$0x10, %rsp
000000000001b00b	popq	%r15
000000000001b00d	popq	%r14
000000000001b00f	popq	%r13
000000000001b011	popq	%r12
000000000001b013	popq	%r11
000000000001b015	popq	%r10
000000000001b017	popq	%r9
000000000001b019	popq	%r8
000000000001b01b	popq	%rcx
000000000001b01c	popq	%rdx
000000000001b01d	popq	%rsi
000000000001b01e	popq	%rdi
000000000001b01f	popq	%rbx
000000000001b020	popq	%rbp
000000000001b021	jmpq	*%rax
__ZN7cocos2d7CCLayer14isMouseEnabledEv:
000000000001b023	pushq	%rbp
000000000001b024	movq	%rsp, %rbp
000000000001b027	pushq	%rbx
000000000001b028	pushq	%rdi
000000000001b029	pushq	%rsi
000000000001b02a	pushq	%rdx
000000000001b02b	pushq	%rcx
000000000001b02c	pushq	%r8
000000000001b02e	pushq	%r9
000000000001b030	pushq	%r10
000000000001b032	pushq	%r11
000000000001b034	pushq	%r12
000000000001b036	pushq	%r13
000000000001b038	pushq	%r14
000000000001b03a	pushq	%r15
000000000001b03c	subq	$0x10, %rsp
000000000001b040	movss	%xmm0, (%rsp)
000000000001b045	subq	$0x10, %rsp
000000000001b049	movss	%xmm1, (%rsp)
000000000001b04e	pushq	%rsi
000000000001b04f	pushq	%rdi
000000000001b050	callq	__Z7getBasev ## getBase()
000000000001b055	addq	$0x273090, %rax
000000000001b05b	popq	%rdi
000000000001b05c	popq	%rsi
000000000001b05d	movss	(%rsp), %xmm1
000000000001b062	addq	$0x10, %rsp
000000000001b066	movss	(%rsp), %xmm0
000000000001b06b	addq	$0x10, %rsp
000000000001b06f	popq	%r15
000000000001b071	popq	%r14
000000000001b073	popq	%r13
000000000001b075	popq	%r12
000000000001b077	popq	%r11
000000000001b079	popq	%r10
000000000001b07b	popq	%r9
000000000001b07d	popq	%r8
000000000001b07f	popq	%rcx
000000000001b080	popq	%rdx
000000000001b081	popq	%rsi
000000000001b082	popq	%rdi
000000000001b083	popq	%rbx
000000000001b084	popq	%rbp
000000000001b085	jmpq	*%rax
__ZN7cocos2d7CCLayer14isTouchEnabledEv:
000000000001b087	pushq	%rbp
000000000001b088	movq	%rsp, %rbp
000000000001b08b	pushq	%rbx
000000000001b08c	pushq	%rdi
000000000001b08d	pushq	%rsi
000000000001b08e	pushq	%rdx
000000000001b08f	pushq	%rcx
000000000001b090	pushq	%r8
000000000001b092	pushq	%r9
000000000001b094	pushq	%r10
000000000001b096	pushq	%r11
000000000001b098	pushq	%r12
000000000001b09a	pushq	%r13
000000000001b09c	pushq	%r14
000000000001b09e	pushq	%r15
000000000001b0a0	subq	$0x10, %rsp
000000000001b0a4	movss	%xmm0, (%rsp)
000000000001b0a9	subq	$0x10, %rsp
000000000001b0ad	movss	%xmm1, (%rsp)
000000000001b0b2	pushq	%rsi
000000000001b0b3	pushq	%rdi
000000000001b0b4	callq	__Z7getBasev ## getBase()
000000000001b0b9	addq	$0x272ce0, %rax
000000000001b0bf	popq	%rdi
000000000001b0c0	popq	%rsi
000000000001b0c1	movss	(%rsp), %xmm1
000000000001b0c6	addq	$0x10, %rsp
000000000001b0ca	movss	(%rsp), %xmm0
000000000001b0cf	addq	$0x10, %rsp
000000000001b0d3	popq	%r15
000000000001b0d5	popq	%r14
000000000001b0d7	popq	%r13
000000000001b0d9	popq	%r12
000000000001b0db	popq	%r11
000000000001b0dd	popq	%r10
000000000001b0df	popq	%r9
000000000001b0e1	popq	%r8
000000000001b0e3	popq	%rcx
000000000001b0e4	popq	%rdx
000000000001b0e5	popq	%rsi
000000000001b0e6	popq	%rdi
000000000001b0e7	popq	%rbx
000000000001b0e8	popq	%rbp
000000000001b0e9	jmpq	*%rax
__ZN7cocos2d7CCLayer14keyBackClickedEv:
000000000001b0eb	pushq	%rbp
000000000001b0ec	movq	%rsp, %rbp
000000000001b0ef	pushq	%rbx
000000000001b0f0	pushq	%rdi
000000000001b0f1	pushq	%rsi
000000000001b0f2	pushq	%rdx
000000000001b0f3	pushq	%rcx
000000000001b0f4	pushq	%r8
000000000001b0f6	pushq	%r9
000000000001b0f8	pushq	%r10
000000000001b0fa	pushq	%r11
000000000001b0fc	pushq	%r12
000000000001b0fe	pushq	%r13
000000000001b100	pushq	%r14
000000000001b102	pushq	%r15
000000000001b104	subq	$0x10, %rsp
000000000001b108	movss	%xmm0, (%rsp)
000000000001b10d	subq	$0x10, %rsp
000000000001b111	movss	%xmm1, (%rsp)
000000000001b116	pushq	%rsi
000000000001b117	pushq	%rdi
000000000001b118	callq	__Z7getBasev ## getBase()
000000000001b11d	addq	$0x273160, %rax
000000000001b123	popq	%rdi
000000000001b124	popq	%rsi
000000000001b125	movss	(%rsp), %xmm1
000000000001b12a	addq	$0x10, %rsp
000000000001b12e	movss	(%rsp), %xmm0
000000000001b133	addq	$0x10, %rsp
000000000001b137	popq	%r15
000000000001b139	popq	%r14
000000000001b13b	popq	%r13
000000000001b13d	popq	%r12
000000000001b13f	popq	%r11
000000000001b141	popq	%r10
000000000001b143	popq	%r9
000000000001b145	popq	%r8
000000000001b147	popq	%rcx
000000000001b148	popq	%rdx
000000000001b149	popq	%rsi
000000000001b14a	popq	%rdi
000000000001b14b	popq	%rbx
000000000001b14c	popq	%rbp
000000000001b14d	jmpq	*%rax
__ZN7cocos2d7CCLayer14keyMenuClickedEv:
000000000001b14f	pushq	%rbp
000000000001b150	movq	%rsp, %rbp
000000000001b153	pushq	%rbx
000000000001b154	pushq	%rdi
000000000001b155	pushq	%rsi
000000000001b156	pushq	%rdx
000000000001b157	pushq	%rcx
000000000001b158	pushq	%r8
000000000001b15a	pushq	%r9
000000000001b15c	pushq	%r10
000000000001b15e	pushq	%r11
000000000001b160	pushq	%r12
000000000001b162	pushq	%r13
000000000001b164	pushq	%r14
000000000001b166	pushq	%r15
000000000001b168	subq	$0x10, %rsp
000000000001b16c	movss	%xmm0, (%rsp)
000000000001b171	subq	$0x10, %rsp
000000000001b175	movss	%xmm1, (%rsp)
000000000001b17a	pushq	%rsi
000000000001b17b	pushq	%rdi
000000000001b17c	callq	__Z7getBasev ## getBase()
000000000001b181	addq	$0x273200, %rax
000000000001b187	popq	%rdi
000000000001b188	popq	%rsi
000000000001b189	movss	(%rsp), %xmm1
000000000001b18e	addq	$0x10, %rsp
000000000001b192	movss	(%rsp), %xmm0
000000000001b197	addq	$0x10, %rsp
000000000001b19b	popq	%r15
000000000001b19d	popq	%r14
000000000001b19f	popq	%r13
000000000001b1a1	popq	%r12
000000000001b1a3	popq	%r11
000000000001b1a5	popq	%r10
000000000001b1a7	popq	%r9
000000000001b1a9	popq	%r8
000000000001b1ab	popq	%rcx
000000000001b1ac	popq	%rdx
000000000001b1ad	popq	%rsi
000000000001b1ae	popq	%rdi
000000000001b1af	popq	%rbx
000000000001b1b0	popq	%rbp
000000000001b1b1	jmpq	*%rax
__ZN7cocos2d7CCLayer15isKeypadEnabledEv:
000000000001b1b3	pushq	%rbp
000000000001b1b4	movq	%rsp, %rbp
000000000001b1b7	pushq	%rbx
000000000001b1b8	pushq	%rdi
000000000001b1b9	pushq	%rsi
000000000001b1ba	pushq	%rdx
000000000001b1bb	pushq	%rcx
000000000001b1bc	pushq	%r8
000000000001b1be	pushq	%r9
000000000001b1c0	pushq	%r10
000000000001b1c2	pushq	%r11
000000000001b1c4	pushq	%r12
000000000001b1c6	pushq	%r13
000000000001b1c8	pushq	%r14
000000000001b1ca	pushq	%r15
000000000001b1cc	subq	$0x10, %rsp
000000000001b1d0	movss	%xmm0, (%rsp)
000000000001b1d5	subq	$0x10, %rsp
000000000001b1d9	movss	%xmm1, (%rsp)
000000000001b1de	pushq	%rsi
000000000001b1df	pushq	%rdi
000000000001b1e0	callq	__Z7getBasev ## getBase()
000000000001b1e5	addq	$0x272f70, %rax
000000000001b1eb	popq	%rdi
000000000001b1ec	popq	%rsi
000000000001b1ed	movss	(%rsp), %xmm1
000000000001b1f2	addq	$0x10, %rsp
000000000001b1f6	movss	(%rsp), %xmm0
000000000001b1fb	addq	$0x10, %rsp
000000000001b1ff	popq	%r15
000000000001b201	popq	%r14
000000000001b203	popq	%r13
000000000001b205	popq	%r12
000000000001b207	popq	%r11
000000000001b209	popq	%r10
000000000001b20b	popq	%r9
000000000001b20d	popq	%r8
000000000001b20f	popq	%rcx
000000000001b210	popq	%rdx
000000000001b211	popq	%rsi
000000000001b212	popq	%rdi
000000000001b213	popq	%rbx
000000000001b214	popq	%rbp
000000000001b215	jmpq	*%rax
__ZN7cocos2d7CCLayer15setMouseEnabledEb:
000000000001b217	pushq	%rbp
000000000001b218	movq	%rsp, %rbp
000000000001b21b	pushq	%rbx
000000000001b21c	pushq	%rdi
000000000001b21d	pushq	%rsi
000000000001b21e	pushq	%rdx
000000000001b21f	pushq	%rcx
000000000001b220	pushq	%r8
000000000001b222	pushq	%r9
000000000001b224	pushq	%r10
000000000001b226	pushq	%r11
000000000001b228	pushq	%r12
000000000001b22a	pushq	%r13
000000000001b22c	pushq	%r14
000000000001b22e	pushq	%r15
000000000001b230	subq	$0x10, %rsp
000000000001b234	movss	%xmm0, (%rsp)
000000000001b239	subq	$0x10, %rsp
000000000001b23d	movss	%xmm1, (%rsp)
000000000001b242	pushq	%rsi
000000000001b243	pushq	%rdi
000000000001b244	callq	__Z7getBasev ## getBase()
000000000001b249	addq	$0x2730a0, %rax
000000000001b24f	popq	%rdi
000000000001b250	popq	%rsi
000000000001b251	movss	(%rsp), %xmm1
000000000001b256	addq	$0x10, %rsp
000000000001b25a	movss	(%rsp), %xmm0
000000000001b25f	addq	$0x10, %rsp
000000000001b263	popq	%r15
000000000001b265	popq	%r14
000000000001b267	popq	%r13
000000000001b269	popq	%r12
000000000001b26b	popq	%r11
000000000001b26d	popq	%r10
000000000001b26f	popq	%r9
000000000001b271	popq	%r8
000000000001b273	popq	%rcx
000000000001b274	popq	%rdx
000000000001b275	popq	%rsi
000000000001b276	popq	%rdi
000000000001b277	popq	%rbx
000000000001b278	popq	%rbp
000000000001b279	jmpq	*%rax
__ZN7cocos2d7CCLayer15setTouchEnabledEb:
000000000001b27b	pushq	%rbp
000000000001b27c	movq	%rsp, %rbp
000000000001b27f	pushq	%rbx
000000000001b280	pushq	%rdi
000000000001b281	pushq	%rsi
000000000001b282	pushq	%rdx
000000000001b283	pushq	%rcx
000000000001b284	pushq	%r8
000000000001b286	pushq	%r9
000000000001b288	pushq	%r10
000000000001b28a	pushq	%r11
000000000001b28c	pushq	%r12
000000000001b28e	pushq	%r13
000000000001b290	pushq	%r14
000000000001b292	pushq	%r15
000000000001b294	subq	$0x10, %rsp
000000000001b298	movss	%xmm0, (%rsp)
000000000001b29d	subq	$0x10, %rsp
000000000001b2a1	movss	%xmm1, (%rsp)
000000000001b2a6	pushq	%rsi
000000000001b2a7	pushq	%rdi
000000000001b2a8	callq	__Z7getBasev ## getBase()
000000000001b2ad	addq	$0x272cf0, %rax
000000000001b2b3	popq	%rdi
000000000001b2b4	popq	%rsi
000000000001b2b5	movss	(%rsp), %xmm1
000000000001b2ba	addq	$0x10, %rsp
000000000001b2be	movss	(%rsp), %xmm0
000000000001b2c3	addq	$0x10, %rsp
000000000001b2c7	popq	%r15
000000000001b2c9	popq	%r14
000000000001b2cb	popq	%r13
000000000001b2cd	popq	%r12
000000000001b2cf	popq	%r11
000000000001b2d1	popq	%r10
000000000001b2d3	popq	%r9
000000000001b2d5	popq	%r8
000000000001b2d7	popq	%rcx
000000000001b2d8	popq	%rdx
000000000001b2d9	popq	%rsi
000000000001b2da	popq	%rdi
000000000001b2db	popq	%rbx
000000000001b2dc	popq	%rbp
000000000001b2dd	jmpq	*%rax
__ZN7cocos2d7CCLayer16ccTouchCancelledEPNS_7CCTouchEPNS_7CCEventE:
000000000001b2df	pushq	%rbp
000000000001b2e0	movq	%rsp, %rbp
000000000001b2e3	pushq	%rbx
000000000001b2e4	pushq	%rdi
000000000001b2e5	pushq	%rsi
000000000001b2e6	pushq	%rdx
000000000001b2e7	pushq	%rcx
000000000001b2e8	pushq	%r8
000000000001b2ea	pushq	%r9
000000000001b2ec	pushq	%r10
000000000001b2ee	pushq	%r11
000000000001b2f0	pushq	%r12
000000000001b2f2	pushq	%r13
000000000001b2f4	pushq	%r14
000000000001b2f6	pushq	%r15
000000000001b2f8	subq	$0x10, %rsp
000000000001b2fc	movss	%xmm0, (%rsp)
000000000001b301	subq	$0x10, %rsp
000000000001b305	movss	%xmm1, (%rsp)
000000000001b30a	pushq	%rsi
000000000001b30b	pushq	%rdi
000000000001b30c	callq	__Z7getBasev ## getBase()
000000000001b311	addq	$0x273650, %rax
000000000001b317	popq	%rdi
000000000001b318	popq	%rsi
000000000001b319	movss	(%rsp), %xmm1
000000000001b31e	addq	$0x10, %rsp
000000000001b322	movss	(%rsp), %xmm0
000000000001b327	addq	$0x10, %rsp
000000000001b32b	popq	%r15
000000000001b32d	popq	%r14
000000000001b32f	popq	%r13
000000000001b331	popq	%r12
000000000001b333	popq	%r11
000000000001b335	popq	%r10
000000000001b337	popq	%r9
000000000001b339	popq	%r8
000000000001b33b	popq	%rcx
000000000001b33c	popq	%rdx
000000000001b33d	popq	%rsi
000000000001b33e	popq	%rdi
000000000001b33f	popq	%rbx
000000000001b340	popq	%rbp
000000000001b341	jmpq	*%rax
__ZN7cocos2d7CCLayer16getTouchPriorityEv:
000000000001b343	pushq	%rbp
000000000001b344	movq	%rsp, %rbp
000000000001b347	pushq	%rbx
000000000001b348	pushq	%rdi
000000000001b349	pushq	%rsi
000000000001b34a	pushq	%rdx
000000000001b34b	pushq	%rcx
000000000001b34c	pushq	%r8
000000000001b34e	pushq	%r9
000000000001b350	pushq	%r10
000000000001b352	pushq	%r11
000000000001b354	pushq	%r12
000000000001b356	pushq	%r13
000000000001b358	pushq	%r14
000000000001b35a	pushq	%r15
000000000001b35c	subq	$0x10, %rsp
000000000001b360	movss	%xmm0, (%rsp)
000000000001b365	subq	$0x10, %rsp
000000000001b369	movss	%xmm1, (%rsp)
000000000001b36e	pushq	%rsi
000000000001b36f	pushq	%rdi
000000000001b370	callq	__Z7getBasev ## getBase()
000000000001b375	addq	$0x272e00, %rax
000000000001b37b	popq	%rdi
000000000001b37c	popq	%rsi
000000000001b37d	movss	(%rsp), %xmm1
000000000001b382	addq	$0x10, %rsp
000000000001b386	movss	(%rsp), %xmm0
000000000001b38b	addq	$0x10, %rsp
000000000001b38f	popq	%r15
000000000001b391	popq	%r14
000000000001b393	popq	%r13
000000000001b395	popq	%r12
000000000001b397	popq	%r11
000000000001b399	popq	%r10
000000000001b39b	popq	%r9
000000000001b39d	popq	%r8
000000000001b39f	popq	%rcx
000000000001b3a0	popq	%rdx
000000000001b3a1	popq	%rsi
000000000001b3a2	popq	%rdi
000000000001b3a3	popq	%rbx
000000000001b3a4	popq	%rbp
000000000001b3a5	jmpq	*%rax
__ZN7cocos2d7CCLayer16setKeypadEnabledEb:
000000000001b3a7	pushq	%rbp
000000000001b3a8	movq	%rsp, %rbp
000000000001b3ab	pushq	%rbx
000000000001b3ac	pushq	%rdi
000000000001b3ad	pushq	%rsi
000000000001b3ae	pushq	%rdx
000000000001b3af	pushq	%rcx
000000000001b3b0	pushq	%r8
000000000001b3b2	pushq	%r9
000000000001b3b4	pushq	%r10
000000000001b3b6	pushq	%r11
000000000001b3b8	pushq	%r12
000000000001b3ba	pushq	%r13
000000000001b3bc	pushq	%r14
000000000001b3be	pushq	%r15
000000000001b3c0	subq	$0x10, %rsp
000000000001b3c4	movss	%xmm0, (%rsp)
000000000001b3c9	subq	$0x10, %rsp
000000000001b3cd	movss	%xmm1, (%rsp)
000000000001b3d2	pushq	%rsi
000000000001b3d3	pushq	%rdi
000000000001b3d4	callq	__Z7getBasev ## getBase()
000000000001b3d9	addq	$0x272f80, %rax
000000000001b3df	popq	%rdi
000000000001b3e0	popq	%rsi
000000000001b3e1	movss	(%rsp), %xmm1
000000000001b3e6	addq	$0x10, %rsp
000000000001b3ea	movss	(%rsp), %xmm0
000000000001b3ef	addq	$0x10, %rsp
000000000001b3f3	popq	%r15
000000000001b3f5	popq	%r14
000000000001b3f7	popq	%r13
000000000001b3f9	popq	%r12
000000000001b3fb	popq	%r11
000000000001b3fd	popq	%r10
000000000001b3ff	popq	%r9
000000000001b401	popq	%r8
000000000001b403	popq	%rcx
000000000001b404	popq	%rdx
000000000001b405	popq	%rsi
000000000001b406	popq	%rdi
000000000001b407	popq	%rbx
000000000001b408	popq	%rbp
000000000001b409	jmpq	*%rax
__ZN7cocos2d7CCLayer16setTouchPriorityEi:
000000000001b40b	pushq	%rbp
000000000001b40c	movq	%rsp, %rbp
000000000001b40f	pushq	%rbx
000000000001b410	pushq	%rdi
000000000001b411	pushq	%rsi
000000000001b412	pushq	%rdx
000000000001b413	pushq	%rcx
000000000001b414	pushq	%r8
000000000001b416	pushq	%r9
000000000001b418	pushq	%r10
000000000001b41a	pushq	%r11
000000000001b41c	pushq	%r12
000000000001b41e	pushq	%r13
000000000001b420	pushq	%r14
000000000001b422	pushq	%r15
000000000001b424	subq	$0x10, %rsp
000000000001b428	movss	%xmm0, (%rsp)
000000000001b42d	subq	$0x10, %rsp
000000000001b431	movss	%xmm1, (%rsp)
000000000001b436	pushq	%rsi
000000000001b437	pushq	%rdi
000000000001b438	callq	__Z7getBasev ## getBase()
000000000001b43d	addq	$0x272db0, %rax
000000000001b443	popq	%rdi
000000000001b444	popq	%rsi
000000000001b445	movss	(%rsp), %xmm1
000000000001b44a	addq	$0x10, %rsp
000000000001b44e	movss	(%rsp), %xmm0
000000000001b453	addq	$0x10, %rsp
000000000001b457	popq	%r15
000000000001b459	popq	%r14
000000000001b45b	popq	%r13
000000000001b45d	popq	%r12
000000000001b45f	popq	%r11
000000000001b461	popq	%r10
000000000001b463	popq	%r9
000000000001b465	popq	%r8
000000000001b467	popq	%rcx
000000000001b468	popq	%rdx
000000000001b469	popq	%rsi
000000000001b46a	popq	%rdi
000000000001b46b	popq	%rbx
000000000001b46c	popq	%rbp
000000000001b46d	jmpq	*%rax
__ZN7cocos2d7CCLayer17isKeyboardEnabledEv:
000000000001b46f	pushq	%rbp
000000000001b470	movq	%rsp, %rbp
000000000001b473	pushq	%rbx
000000000001b474	pushq	%rdi
000000000001b475	pushq	%rsi
000000000001b476	pushq	%rdx
000000000001b477	pushq	%rcx
000000000001b478	pushq	%r8
000000000001b47a	pushq	%r9
000000000001b47c	pushq	%r10
000000000001b47e	pushq	%r11
000000000001b480	pushq	%r12
000000000001b482	pushq	%r13
000000000001b484	pushq	%r14
000000000001b486	pushq	%r15
000000000001b488	subq	$0x10, %rsp
000000000001b48c	movss	%xmm0, (%rsp)
000000000001b491	subq	$0x10, %rsp
000000000001b495	movss	%xmm1, (%rsp)
000000000001b49a	pushq	%rsi
000000000001b49b	pushq	%rdi
000000000001b49c	callq	__Z7getBasev ## getBase()
000000000001b4a1	addq	$0x273010, %rax
000000000001b4a7	popq	%rdi
000000000001b4a8	popq	%rsi
000000000001b4a9	movss	(%rsp), %xmm1
000000000001b4ae	addq	$0x10, %rsp
000000000001b4b2	movss	(%rsp), %xmm0
000000000001b4b7	addq	$0x10, %rsp
000000000001b4bb	popq	%r15
000000000001b4bd	popq	%r14
000000000001b4bf	popq	%r13
000000000001b4c1	popq	%r12
000000000001b4c3	popq	%r11
000000000001b4c5	popq	%r10
000000000001b4c7	popq	%r9
000000000001b4c9	popq	%r8
000000000001b4cb	popq	%rcx
000000000001b4cc	popq	%rdx
000000000001b4cd	popq	%rsi
000000000001b4ce	popq	%rdi
000000000001b4cf	popq	%rbx
000000000001b4d0	popq	%rbp
000000000001b4d1	jmpq	*%rax
__ZN7cocos2d7CCLayer18ccTouchesCancelledEPNS_5CCSetEPNS_7CCEventE:
000000000001b4d3	pushq	%rbp
000000000001b4d4	movq	%rsp, %rbp
000000000001b4d7	pushq	%rbx
000000000001b4d8	pushq	%rdi
000000000001b4d9	pushq	%rsi
000000000001b4da	pushq	%rdx
000000000001b4db	pushq	%rcx
000000000001b4dc	pushq	%r8
000000000001b4de	pushq	%r9
000000000001b4e0	pushq	%r10
000000000001b4e2	pushq	%r11
000000000001b4e4	pushq	%r12
000000000001b4e6	pushq	%r13
000000000001b4e8	pushq	%r14
000000000001b4ea	pushq	%r15
000000000001b4ec	subq	$0x10, %rsp
000000000001b4f0	movss	%xmm0, (%rsp)
000000000001b4f5	subq	$0x10, %rsp
000000000001b4f9	movss	%xmm1, (%rsp)
000000000001b4fe	pushq	%rsi
000000000001b4ff	pushq	%rdi
000000000001b500	callq	__Z7getBasev ## getBase()
000000000001b505	addq	$0x273850, %rax
000000000001b50b	popq	%rdi
000000000001b50c	popq	%rsi
000000000001b50d	movss	(%rsp), %xmm1
000000000001b512	addq	$0x10, %rsp
000000000001b516	movss	(%rsp), %xmm0
000000000001b51b	addq	$0x10, %rsp
000000000001b51f	popq	%r15
000000000001b521	popq	%r14
000000000001b523	popq	%r13
000000000001b525	popq	%r12
000000000001b527	popq	%r11
000000000001b529	popq	%r10
000000000001b52b	popq	%r9
000000000001b52d	popq	%r8
000000000001b52f	popq	%rcx
000000000001b530	popq	%rdx
000000000001b531	popq	%rsi
000000000001b532	popq	%rdi
000000000001b533	popq	%rbx
000000000001b534	popq	%rbp
000000000001b535	jmpq	*%rax
__ZN7cocos2d7CCLayer18setKeyboardEnabledEb:
000000000001b537	pushq	%rbp
000000000001b538	movq	%rsp, %rbp
000000000001b53b	pushq	%rbx
000000000001b53c	pushq	%rdi
000000000001b53d	pushq	%rsi
000000000001b53e	pushq	%rdx
000000000001b53f	pushq	%rcx
000000000001b540	pushq	%r8
000000000001b542	pushq	%r9
000000000001b544	pushq	%r10
000000000001b546	pushq	%r11
000000000001b548	pushq	%r12
000000000001b54a	pushq	%r13
000000000001b54c	pushq	%r14
000000000001b54e	pushq	%r15
000000000001b550	subq	$0x10, %rsp
000000000001b554	movss	%xmm0, (%rsp)
000000000001b559	subq	$0x10, %rsp
000000000001b55d	movss	%xmm1, (%rsp)
000000000001b562	pushq	%rsi
000000000001b563	pushq	%rdi
000000000001b564	callq	__Z7getBasev ## getBase()
000000000001b569	addq	$0x273020, %rax
000000000001b56f	popq	%rdi
000000000001b570	popq	%rsi
000000000001b571	movss	(%rsp), %xmm1
000000000001b576	addq	$0x10, %rsp
000000000001b57a	movss	(%rsp), %xmm0
000000000001b57f	addq	$0x10, %rsp
000000000001b583	popq	%r15
000000000001b585	popq	%r14
000000000001b587	popq	%r13
000000000001b589	popq	%r12
000000000001b58b	popq	%r11
000000000001b58d	popq	%r10
000000000001b58f	popq	%r9
000000000001b591	popq	%r8
000000000001b593	popq	%rcx
000000000001b594	popq	%rdx
000000000001b595	popq	%rsi
000000000001b596	popq	%rdi
000000000001b597	popq	%rbx
000000000001b598	popq	%rbp
000000000001b599	jmpq	*%rax
__ZN7cocos2d7CCLayer22isAccelerometerEnabledEv:
000000000001b59b	pushq	%rbp
000000000001b59c	movq	%rsp, %rbp
000000000001b59f	pushq	%rbx
000000000001b5a0	pushq	%rdi
000000000001b5a1	pushq	%rsi
000000000001b5a2	pushq	%rdx
000000000001b5a3	pushq	%rcx
000000000001b5a4	pushq	%r8
000000000001b5a6	pushq	%r9
000000000001b5a8	pushq	%r10
000000000001b5aa	pushq	%r11
000000000001b5ac	pushq	%r12
000000000001b5ae	pushq	%r13
000000000001b5b0	pushq	%r14
000000000001b5b2	pushq	%r15
000000000001b5b4	subq	$0x10, %rsp
000000000001b5b8	movss	%xmm0, (%rsp)
000000000001b5bd	subq	$0x10, %rsp
000000000001b5c1	movss	%xmm1, (%rsp)
000000000001b5c6	pushq	%rsi
000000000001b5c7	pushq	%rdi
000000000001b5c8	callq	__Z7getBasev ## getBase()
000000000001b5cd	addq	$0x272e20, %rax
000000000001b5d3	popq	%rdi
000000000001b5d4	popq	%rsi
000000000001b5d5	movss	(%rsp), %xmm1
000000000001b5da	addq	$0x10, %rsp
000000000001b5de	movss	(%rsp), %xmm0
000000000001b5e3	addq	$0x10, %rsp
000000000001b5e7	popq	%r15
000000000001b5e9	popq	%r14
000000000001b5eb	popq	%r13
000000000001b5ed	popq	%r12
000000000001b5ef	popq	%r11
000000000001b5f1	popq	%r10
000000000001b5f3	popq	%r9
000000000001b5f5	popq	%r8
000000000001b5f7	popq	%rcx
000000000001b5f8	popq	%rdx
000000000001b5f9	popq	%rsi
000000000001b5fa	popq	%rdi
000000000001b5fb	popq	%rbx
000000000001b5fc	popq	%rbp
000000000001b5fd	jmpq	*%rax
__ZN7cocos2d7CCLayer23setAccelerometerEnabledEb:
000000000001b5ff	pushq	%rbp
000000000001b600	movq	%rsp, %rbp
000000000001b603	pushq	%rbx
000000000001b604	pushq	%rdi
000000000001b605	pushq	%rsi
000000000001b606	pushq	%rdx
000000000001b607	pushq	%rcx
000000000001b608	pushq	%r8
000000000001b60a	pushq	%r9
000000000001b60c	pushq	%r10
000000000001b60e	pushq	%r11
000000000001b610	pushq	%r12
000000000001b612	pushq	%r13
000000000001b614	pushq	%r14
000000000001b616	pushq	%r15
000000000001b618	subq	$0x10, %rsp
000000000001b61c	movss	%xmm0, (%rsp)
000000000001b621	subq	$0x10, %rsp
000000000001b625	movss	%xmm1, (%rsp)
000000000001b62a	pushq	%rsi
000000000001b62b	pushq	%rdi
000000000001b62c	callq	__Z7getBasev ## getBase()
000000000001b631	addq	$0x272e30, %rax
000000000001b637	popq	%rdi
000000000001b638	popq	%rsi
000000000001b639	movss	(%rsp), %xmm1
000000000001b63e	addq	$0x10, %rsp
000000000001b642	movss	(%rsp), %xmm0
000000000001b647	addq	$0x10, %rsp
000000000001b64b	popq	%r15
000000000001b64d	popq	%r14
000000000001b64f	popq	%r13
000000000001b651	popq	%r12
000000000001b653	popq	%r11
000000000001b655	popq	%r10
000000000001b657	popq	%r9
000000000001b659	popq	%r8
000000000001b65b	popq	%rcx
000000000001b65c	popq	%rdx
000000000001b65d	popq	%rsi
000000000001b65e	popq	%rdi
000000000001b65f	popq	%rbx
000000000001b660	popq	%rbp
000000000001b661	jmpq	*%rax
__ZN7cocos2d7CCLayer24setAccelerometerIntervalEd:
000000000001b663	pushq	%rbp
000000000001b664	movq	%rsp, %rbp
000000000001b667	pushq	%rbx
000000000001b668	pushq	%rdi
000000000001b669	pushq	%rsi
000000000001b66a	pushq	%rdx
000000000001b66b	pushq	%rcx
000000000001b66c	pushq	%r8
000000000001b66e	pushq	%r9
000000000001b670	pushq	%r10
000000000001b672	pushq	%r11
000000000001b674	pushq	%r12
000000000001b676	pushq	%r13
000000000001b678	pushq	%r14
000000000001b67a	pushq	%r15
000000000001b67c	subq	$0x10, %rsp
000000000001b680	movss	%xmm0, (%rsp)
000000000001b685	subq	$0x10, %rsp
000000000001b689	movss	%xmm1, (%rsp)
000000000001b68e	pushq	%rsi
000000000001b68f	pushq	%rdi
000000000001b690	callq	__Z7getBasev ## getBase()
000000000001b695	addq	$0x272e70, %rax
000000000001b69b	popq	%rdi
000000000001b69c	popq	%rsi
000000000001b69d	movss	(%rsp), %xmm1
000000000001b6a2	addq	$0x10, %rsp
000000000001b6a6	movss	(%rsp), %xmm0
000000000001b6ab	addq	$0x10, %rsp
000000000001b6af	popq	%r15
000000000001b6b1	popq	%r14
000000000001b6b3	popq	%r13
000000000001b6b5	popq	%r12
000000000001b6b7	popq	%r11
000000000001b6b9	popq	%r10
000000000001b6bb	popq	%r9
000000000001b6bd	popq	%r8
000000000001b6bf	popq	%rcx
000000000001b6c0	popq	%rdx
000000000001b6c1	popq	%rsi
000000000001b6c2	popq	%rdi
000000000001b6c3	popq	%rbx
000000000001b6c4	popq	%rbp
000000000001b6c5	jmpq	*%rax
__ZN7cocos2d7CCLayer26onEnterTransitionDidFinishEv:
000000000001b6c7	pushq	%rbp
000000000001b6c8	movq	%rsp, %rbp
000000000001b6cb	pushq	%rbx
000000000001b6cc	pushq	%rdi
000000000001b6cd	pushq	%rsi
000000000001b6ce	pushq	%rdx
000000000001b6cf	pushq	%rcx
000000000001b6d0	pushq	%r8
000000000001b6d2	pushq	%r9
000000000001b6d4	pushq	%r10
000000000001b6d6	pushq	%r11
000000000001b6d8	pushq	%r12
000000000001b6da	pushq	%r13
000000000001b6dc	pushq	%r14
000000000001b6de	pushq	%r15
000000000001b6e0	subq	$0x10, %rsp
000000000001b6e4	movss	%xmm0, (%rsp)
000000000001b6e9	subq	$0x10, %rsp
000000000001b6ed	movss	%xmm1, (%rsp)
000000000001b6f2	pushq	%rsi
000000000001b6f3	pushq	%rdi
000000000001b6f4	callq	__Z7getBasev ## getBase()
000000000001b6f9	addq	$0x273490, %rax
000000000001b6ff	popq	%rdi
000000000001b700	popq	%rsi
000000000001b701	movss	(%rsp), %xmm1
000000000001b706	addq	$0x10, %rsp
000000000001b70a	movss	(%rsp), %xmm0
000000000001b70f	addq	$0x10, %rsp
000000000001b713	popq	%r15
000000000001b715	popq	%r14
000000000001b717	popq	%r13
000000000001b719	popq	%r12
000000000001b71b	popq	%r11
000000000001b71d	popq	%r10
000000000001b71f	popq	%r9
000000000001b721	popq	%r8
000000000001b723	popq	%rcx
000000000001b724	popq	%rdx
000000000001b725	popq	%rsi
000000000001b726	popq	%rdi
000000000001b727	popq	%rbx
000000000001b728	popq	%rbp
000000000001b729	jmpq	*%rax
__ZN7cocos2d7CCLayer26registerScriptTouchHandlerEibib:
000000000001b72b	pushq	%rbp
000000000001b72c	movq	%rsp, %rbp
000000000001b72f	pushq	%rbx
000000000001b730	pushq	%rdi
000000000001b731	pushq	%rsi
000000000001b732	pushq	%rdx
000000000001b733	pushq	%rcx
000000000001b734	pushq	%r8
000000000001b736	pushq	%r9
000000000001b738	pushq	%r10
000000000001b73a	pushq	%r11
000000000001b73c	pushq	%r12
000000000001b73e	pushq	%r13
000000000001b740	pushq	%r14
000000000001b742	pushq	%r15
000000000001b744	subq	$0x10, %rsp
000000000001b748	movss	%xmm0, (%rsp)
000000000001b74d	subq	$0x10, %rsp
000000000001b751	movss	%xmm1, (%rsp)
000000000001b756	pushq	%rsi
000000000001b757	pushq	%rdi
000000000001b758	callq	__Z7getBasev ## getBase()
000000000001b75d	addq	$0x272bd0, %rax
000000000001b763	popq	%rdi
000000000001b764	popq	%rsi
000000000001b765	movss	(%rsp), %xmm1
000000000001b76a	addq	$0x10, %rsp
000000000001b76e	movss	(%rsp), %xmm0
000000000001b773	addq	$0x10, %rsp
000000000001b777	popq	%r15
000000000001b779	popq	%r14
000000000001b77b	popq	%r13
000000000001b77d	popq	%r12
000000000001b77f	popq	%r11
000000000001b781	popq	%r10
000000000001b783	popq	%r9
000000000001b785	popq	%r8
000000000001b787	popq	%rcx
000000000001b788	popq	%rdx
000000000001b789	popq	%rsi
000000000001b78a	popq	%rdi
000000000001b78b	popq	%rbx
000000000001b78c	popq	%rbp
000000000001b78d	jmpq	*%rax
__ZN7cocos2d7CCLayer28unregisterScriptTouchHandlerEv:
000000000001b78f	pushq	%rbp
000000000001b790	movq	%rsp, %rbp
000000000001b793	pushq	%rbx
000000000001b794	pushq	%rdi
000000000001b795	pushq	%rsi
000000000001b796	pushq	%rdx
000000000001b797	pushq	%rcx
000000000001b798	pushq	%r8
000000000001b79a	pushq	%r9
000000000001b79c	pushq	%r10
000000000001b79e	pushq	%r11
000000000001b7a0	pushq	%r12
000000000001b7a2	pushq	%r13
000000000001b7a4	pushq	%r14
000000000001b7a6	pushq	%r15
000000000001b7a8	subq	$0x10, %rsp
000000000001b7ac	movss	%xmm0, (%rsp)
000000000001b7b1	subq	$0x10, %rsp
000000000001b7b5	movss	%xmm1, (%rsp)
000000000001b7ba	pushq	%rsi
000000000001b7bb	pushq	%rdi
000000000001b7bc	callq	__Z7getBasev ## getBase()
000000000001b7c1	addq	$0x272c30, %rax
000000000001b7c7	popq	%rdi
000000000001b7c8	popq	%rsi
000000000001b7c9	movss	(%rsp), %xmm1
000000000001b7ce	addq	$0x10, %rsp
000000000001b7d2	movss	(%rsp), %xmm0
000000000001b7d7	addq	$0x10, %rsp
000000000001b7db	popq	%r15
000000000001b7dd	popq	%r14
000000000001b7df	popq	%r13
000000000001b7e1	popq	%r12
000000000001b7e3	popq	%r11
000000000001b7e5	popq	%r10
000000000001b7e7	popq	%r9
000000000001b7e9	popq	%r8
000000000001b7eb	popq	%rcx
000000000001b7ec	popq	%rdx
000000000001b7ed	popq	%rsi
000000000001b7ee	popq	%rdi
000000000001b7ef	popq	%rbx
000000000001b7f0	popq	%rbp
000000000001b7f1	jmpq	*%rax
__ZN7cocos2d7CCLayer6createEv:
000000000001b7f3	pushq	%rbp
000000000001b7f4	movq	%rsp, %rbp
000000000001b7f7	pushq	%rbx
000000000001b7f8	pushq	%rdi
000000000001b7f9	pushq	%rsi
000000000001b7fa	pushq	%rdx
000000000001b7fb	pushq	%rcx
000000000001b7fc	pushq	%r8
000000000001b7fe	pushq	%r9
000000000001b800	pushq	%r10
000000000001b802	pushq	%r11
000000000001b804	pushq	%r12
000000000001b806	pushq	%r13
000000000001b808	pushq	%r14
000000000001b80a	pushq	%r15
000000000001b80c	subq	$0x10, %rsp
000000000001b810	movss	%xmm0, (%rsp)
000000000001b815	subq	$0x10, %rsp
000000000001b819	movss	%xmm1, (%rsp)
000000000001b81e	pushq	%rsi
000000000001b81f	pushq	%rdi
000000000001b820	callq	__Z7getBasev ## getBase()
000000000001b825	addq	$0x272a00, %rax
000000000001b82b	popq	%rdi
000000000001b82c	popq	%rsi
000000000001b82d	movss	(%rsp), %xmm1
000000000001b832	addq	$0x10, %rsp
000000000001b836	movss	(%rsp), %xmm0
000000000001b83b	addq	$0x10, %rsp
000000000001b83f	popq	%r15
000000000001b841	popq	%r14
000000000001b843	popq	%r13
000000000001b845	popq	%r12
000000000001b847	popq	%r11
000000000001b849	popq	%r10
000000000001b84b	popq	%r9
000000000001b84d	popq	%r8
000000000001b84f	popq	%rcx
000000000001b850	popq	%rdx
000000000001b851	popq	%rsi
000000000001b852	popq	%rdi
000000000001b853	popq	%rbx
000000000001b854	popq	%rbp
000000000001b855	jmpq	*%rax
__ZN7cocos2d7CCLayer6onExitEv:
000000000001b857	pushq	%rbp
000000000001b858	movq	%rsp, %rbp
000000000001b85b	pushq	%rbx
000000000001b85c	pushq	%rdi
000000000001b85d	pushq	%rsi
000000000001b85e	pushq	%rdx
000000000001b85f	pushq	%rcx
000000000001b860	pushq	%r8
000000000001b862	pushq	%r9
000000000001b864	pushq	%r10
000000000001b866	pushq	%r11
000000000001b868	pushq	%r12
000000000001b86a	pushq	%r13
000000000001b86c	pushq	%r14
000000000001b86e	pushq	%r15
000000000001b870	subq	$0x10, %rsp
000000000001b874	movss	%xmm0, (%rsp)
000000000001b879	subq	$0x10, %rsp
000000000001b87d	movss	%xmm1, (%rsp)
000000000001b882	pushq	%rsi
000000000001b883	pushq	%rdi
000000000001b884	callq	__Z7getBasev ## getBase()
000000000001b889	addq	$0x2733c0, %rax
000000000001b88f	popq	%rdi
000000000001b890	popq	%rsi
000000000001b891	movss	(%rsp), %xmm1
000000000001b896	addq	$0x10, %rsp
000000000001b89a	movss	(%rsp), %xmm0
000000000001b89f	addq	$0x10, %rsp
000000000001b8a3	popq	%r15
000000000001b8a5	popq	%r14
000000000001b8a7	popq	%r13
000000000001b8a9	popq	%r12
000000000001b8ab	popq	%r11
000000000001b8ad	popq	%r10
000000000001b8af	popq	%r9
000000000001b8b1	popq	%r8
000000000001b8b3	popq	%rcx
000000000001b8b4	popq	%rdx
000000000001b8b5	popq	%rsi
000000000001b8b6	popq	%rdi
000000000001b8b7	popq	%rbx
000000000001b8b8	popq	%rbp
000000000001b8b9	jmpq	*%rax
__ZN7cocos2d7CCLayer7keyDownENS_12enumKeyCodesE:
000000000001b8bb	pushq	%rbp
000000000001b8bc	movq	%rsp, %rbp
000000000001b8bf	pushq	%rbx
000000000001b8c0	pushq	%rdi
000000000001b8c1	pushq	%rsi
000000000001b8c2	pushq	%rdx
000000000001b8c3	pushq	%rcx
000000000001b8c4	pushq	%r8
000000000001b8c6	pushq	%r9
000000000001b8c8	pushq	%r10
000000000001b8ca	pushq	%r11
000000000001b8cc	pushq	%r12
000000000001b8ce	pushq	%r13
000000000001b8d0	pushq	%r14
000000000001b8d2	pushq	%r15
000000000001b8d4	subq	$0x10, %rsp
000000000001b8d8	movss	%xmm0, (%rsp)
000000000001b8dd	subq	$0x10, %rsp
000000000001b8e1	movss	%xmm1, (%rsp)
000000000001b8e6	pushq	%rsi
000000000001b8e7	pushq	%rdi
000000000001b8e8	callq	__Z7getBasev ## getBase()
000000000001b8ed	addq	$0x273280, %rax
000000000001b8f3	popq	%rdi
000000000001b8f4	popq	%rsi
000000000001b8f5	movss	(%rsp), %xmm1
000000000001b8fa	addq	$0x10, %rsp
000000000001b8fe	movss	(%rsp), %xmm0
000000000001b903	addq	$0x10, %rsp
000000000001b907	popq	%r15
000000000001b909	popq	%r14
000000000001b90b	popq	%r13
000000000001b90d	popq	%r12
000000000001b90f	popq	%r11
000000000001b911	popq	%r10
000000000001b913	popq	%r9
000000000001b915	popq	%r8
000000000001b917	popq	%rcx
000000000001b918	popq	%rdx
000000000001b919	popq	%rsi
000000000001b91a	popq	%rdi
000000000001b91b	popq	%rbx
000000000001b91c	popq	%rbp
000000000001b91d	jmpq	*%rax
__ZN7cocos2d7CCLayer7onEnterEv:
000000000001b91f	pushq	%rbp
000000000001b920	movq	%rsp, %rbp
000000000001b923	pushq	%rbx
000000000001b924	pushq	%rdi
000000000001b925	pushq	%rsi
000000000001b926	pushq	%rdx
000000000001b927	pushq	%rcx
000000000001b928	pushq	%r8
000000000001b92a	pushq	%r9
000000000001b92c	pushq	%r10
000000000001b92e	pushq	%r11
000000000001b930	pushq	%r12
000000000001b932	pushq	%r13
000000000001b934	pushq	%r14
000000000001b936	pushq	%r15
000000000001b938	subq	$0x10, %rsp
000000000001b93c	movss	%xmm0, (%rsp)
000000000001b941	subq	$0x10, %rsp
000000000001b945	movss	%xmm1, (%rsp)
000000000001b94a	pushq	%rsi
000000000001b94b	pushq	%rdi
000000000001b94c	callq	__Z7getBasev ## getBase()
000000000001b951	addq	$0x273300, %rax
000000000001b957	popq	%rdi
000000000001b958	popq	%rsi
000000000001b959	movss	(%rsp), %xmm1
000000000001b95e	addq	$0x10, %rsp
000000000001b962	movss	(%rsp), %xmm0
000000000001b967	addq	$0x10, %rsp
000000000001b96b	popq	%r15
000000000001b96d	popq	%r14
000000000001b96f	popq	%r13
000000000001b971	popq	%r12
000000000001b973	popq	%r11
000000000001b975	popq	%r10
000000000001b977	popq	%r9
000000000001b979	popq	%r8
000000000001b97b	popq	%rcx
000000000001b97c	popq	%rdx
000000000001b97d	popq	%rsi
000000000001b97e	popq	%rdi
000000000001b97f	popq	%rbx
000000000001b980	popq	%rbp
000000000001b981	jmpq	*%rax
__ZN7cocos2d7CCPoint6equalsEPvRKS0_:
000000000001b983	pushq	%rbp
000000000001b984	movq	%rsp, %rbp
000000000001b987	pushq	%rbx
000000000001b988	pushq	%rdi
000000000001b989	pushq	%rsi
000000000001b98a	pushq	%rdx
000000000001b98b	pushq	%rcx
000000000001b98c	pushq	%r8
000000000001b98e	pushq	%r9
000000000001b990	pushq	%r10
000000000001b992	pushq	%r11
000000000001b994	pushq	%r12
000000000001b996	pushq	%r13
000000000001b998	pushq	%r14
000000000001b99a	pushq	%r15
000000000001b99c	subq	$0x10, %rsp
000000000001b9a0	movss	%xmm0, (%rsp)
000000000001b9a5	subq	$0x10, %rsp
000000000001b9a9	movss	%xmm1, (%rsp)
000000000001b9ae	pushq	%rsi
000000000001b9af	pushq	%rdi
000000000001b9b0	callq	__Z7getBasev ## getBase()
000000000001b9b5	addq	$0x1371d0, %rax
000000000001b9bb	popq	%rdi
000000000001b9bc	popq	%rsi
000000000001b9bd	movss	(%rsp), %xmm1
000000000001b9c2	addq	$0x10, %rsp
000000000001b9c6	movss	(%rsp), %xmm0
000000000001b9cb	addq	$0x10, %rsp
000000000001b9cf	popq	%r15
000000000001b9d1	popq	%r14
000000000001b9d3	popq	%r13
000000000001b9d5	popq	%r12
000000000001b9d7	popq	%r11
000000000001b9d9	popq	%r10
000000000001b9db	popq	%r9
000000000001b9dd	popq	%r8
000000000001b9df	popq	%rcx
000000000001b9e0	popq	%rdx
000000000001b9e1	popq	%rsi
000000000001b9e2	popq	%rdi
000000000001b9e3	popq	%rbx
000000000001b9e4	popq	%rbp
000000000001b9e5	jmpq	*%rax
__ZN7cocos2d7CCPointaSERKS0_:
000000000001b9e7	pushq	%rbp
000000000001b9e8	movq	%rsp, %rbp
000000000001b9eb	pushq	%rbx
000000000001b9ec	pushq	%rdi
000000000001b9ed	pushq	%rsi
000000000001b9ee	pushq	%rdx
000000000001b9ef	pushq	%rcx
000000000001b9f0	pushq	%r8
000000000001b9f2	pushq	%r9
000000000001b9f4	pushq	%r10
000000000001b9f6	pushq	%r11
000000000001b9f8	pushq	%r12
000000000001b9fa	pushq	%r13
000000000001b9fc	pushq	%r14
000000000001b9fe	pushq	%r15
000000000001ba00	subq	$0x10, %rsp
000000000001ba04	movss	%xmm0, (%rsp)
000000000001ba09	subq	$0x10, %rsp
000000000001ba0d	movss	%xmm1, (%rsp)
000000000001ba12	pushq	%rsi
000000000001ba13	pushq	%rdi
000000000001ba14	callq	__Z7getBasev ## getBase()
000000000001ba19	addq	$0x1370c0, %rax
000000000001ba1f	popq	%rdi
000000000001ba20	popq	%rsi
000000000001ba21	movss	(%rsp), %xmm1
000000000001ba26	addq	$0x10, %rsp
000000000001ba2a	movss	(%rsp), %xmm0
000000000001ba2f	addq	$0x10, %rsp
000000000001ba33	popq	%r15
000000000001ba35	popq	%r14
000000000001ba37	popq	%r13
000000000001ba39	popq	%r12
000000000001ba3b	popq	%r11
000000000001ba3d	popq	%r10
000000000001ba3f	popq	%r9
000000000001ba41	popq	%r8
000000000001ba43	popq	%rcx
000000000001ba44	popq	%rdx
000000000001ba45	popq	%rsi
000000000001ba46	popq	%rdi
000000000001ba47	popq	%rbx
000000000001ba48	popq	%rbp
000000000001ba49	jmpq	*%rax
__ZN7cocos2d7CCPointC1Eff:
000000000001ba4b	pushq	%rbp
000000000001ba4c	movq	%rsp, %rbp
000000000001ba4f	pushq	%rbx
000000000001ba50	pushq	%rdi
000000000001ba51	pushq	%rsi
000000000001ba52	pushq	%rdx
000000000001ba53	pushq	%rcx
000000000001ba54	pushq	%r8
000000000001ba56	pushq	%r9
000000000001ba58	pushq	%r10
000000000001ba5a	pushq	%r11
000000000001ba5c	pushq	%r12
000000000001ba5e	pushq	%r13
000000000001ba60	pushq	%r14
000000000001ba62	pushq	%r15
000000000001ba64	subq	$0x10, %rsp
000000000001ba68	movss	%xmm0, (%rsp)
000000000001ba6d	subq	$0x10, %rsp
000000000001ba71	movss	%xmm1, (%rsp)
000000000001ba76	pushq	%rsi
000000000001ba77	pushq	%rdi
000000000001ba78	callq	__Z7getBasev ## getBase()
000000000001ba7d	addq	$0x137000, %rax
000000000001ba83	popq	%rdi
000000000001ba84	popq	%rsi
000000000001ba85	movss	(%rsp), %xmm1
000000000001ba8a	addq	$0x10, %rsp
000000000001ba8e	movss	(%rsp), %xmm0
000000000001ba93	addq	$0x10, %rsp
000000000001ba97	popq	%r15
000000000001ba99	popq	%r14
000000000001ba9b	popq	%r13
000000000001ba9d	popq	%r12
000000000001ba9f	popq	%r11
000000000001baa1	popq	%r10
000000000001baa3	popq	%r9
000000000001baa5	popq	%r8
000000000001baa7	popq	%rcx
000000000001baa8	popq	%rdx
000000000001baa9	popq	%rsi
000000000001baaa	popq	%rdi
000000000001baab	popq	%rbx
000000000001baac	popq	%rbp
000000000001baad	jmpq	*%rax
__ZN7cocos2d7CCPointC1Ev:
000000000001baaf	pushq	%rbp
000000000001bab0	movq	%rsp, %rbp
000000000001bab3	pushq	%rbx
000000000001bab4	pushq	%rdi
000000000001bab5	pushq	%rsi
000000000001bab6	pushq	%rdx
000000000001bab7	pushq	%rcx
000000000001bab8	pushq	%r8
000000000001baba	pushq	%r9
000000000001babc	pushq	%r10
000000000001babe	pushq	%r11
000000000001bac0	pushq	%r12
000000000001bac2	pushq	%r13
000000000001bac4	pushq	%r14
000000000001bac6	pushq	%r15
000000000001bac8	subq	$0x10, %rsp
000000000001bacc	movss	%xmm0, (%rsp)
000000000001bad1	subq	$0x10, %rsp
000000000001bad5	movss	%xmm1, (%rsp)
000000000001bada	pushq	%rsi
000000000001badb	pushq	%rdi
000000000001badc	callq	__Z7getBasev ## getBase()
000000000001bae1	addq	$0x137060, %rax
000000000001bae7	popq	%rdi
000000000001bae8	popq	%rsi
000000000001bae9	movss	(%rsp), %xmm1
000000000001baee	addq	$0x10, %rsp
000000000001baf2	movss	(%rsp), %xmm0
000000000001baf7	addq	$0x10, %rsp
000000000001bafb	popq	%r15
000000000001bafd	popq	%r14
000000000001baff	popq	%r13
000000000001bb01	popq	%r12
000000000001bb03	popq	%r11
000000000001bb05	popq	%r10
000000000001bb07	popq	%r9
000000000001bb09	popq	%r8
000000000001bb0b	popq	%rcx
000000000001bb0c	popq	%rdx
000000000001bb0d	popq	%rsi
000000000001bb0e	popq	%rdi
000000000001bb0f	popq	%rbx
000000000001bb10	popq	%rbp
000000000001bb11	jmpq	*%rax
__ZN7cocos2d7CCPointC2ERKS0_:
000000000001bb13	pushq	%rbp
000000000001bb14	movq	%rsp, %rbp
000000000001bb17	pushq	%rbx
000000000001bb18	pushq	%rdi
000000000001bb19	pushq	%rsi
000000000001bb1a	pushq	%rdx
000000000001bb1b	pushq	%rcx
000000000001bb1c	pushq	%r8
000000000001bb1e	pushq	%r9
000000000001bb20	pushq	%r10
000000000001bb22	pushq	%r11
000000000001bb24	pushq	%r12
000000000001bb26	pushq	%r13
000000000001bb28	pushq	%r14
000000000001bb2a	pushq	%r15
000000000001bb2c	subq	$0x10, %rsp
000000000001bb30	movss	%xmm0, (%rsp)
000000000001bb35	subq	$0x10, %rsp
000000000001bb39	movss	%xmm1, (%rsp)
000000000001bb3e	pushq	%rsi
000000000001bb3f	pushq	%rdi
000000000001bb40	callq	__Z7getBasev ## getBase()
000000000001bb45	addq	$0x137090, %rax
000000000001bb4b	popq	%rdi
000000000001bb4c	popq	%rsi
000000000001bb4d	movss	(%rsp), %xmm1
000000000001bb52	addq	$0x10, %rsp
000000000001bb56	movss	(%rsp), %xmm0
000000000001bb5b	addq	$0x10, %rsp
000000000001bb5f	popq	%r15
000000000001bb61	popq	%r14
000000000001bb63	popq	%r13
000000000001bb65	popq	%r12
000000000001bb67	popq	%r11
000000000001bb69	popq	%r10
000000000001bb6b	popq	%r9
000000000001bb6d	popq	%r8
000000000001bb6f	popq	%rcx
000000000001bb70	popq	%rdx
000000000001bb71	popq	%rsi
000000000001bb72	popq	%rdi
000000000001bb73	popq	%rbx
000000000001bb74	popq	%rbp
000000000001bb75	jmpq	*%rax
__ZN7cocos2d7CCPointC1ERKS0_:
000000000001bb77	pushq	%rbp
000000000001bb78	movq	%rsp, %rbp
000000000001bb7b	pushq	%rbx
000000000001bb7c	pushq	%rdi
000000000001bb7d	pushq	%rsi
000000000001bb7e	pushq	%rdx
000000000001bb7f	pushq	%rcx
000000000001bb80	pushq	%r8
000000000001bb82	pushq	%r9
000000000001bb84	pushq	%r10
000000000001bb86	pushq	%r11
000000000001bb88	pushq	%r12
000000000001bb8a	pushq	%r13
000000000001bb8c	pushq	%r14
000000000001bb8e	pushq	%r15
000000000001bb90	subq	$0x10, %rsp
000000000001bb94	movss	%xmm0, (%rsp)
000000000001bb99	subq	$0x10, %rsp
000000000001bb9d	movss	%xmm1, (%rsp)
000000000001bba2	pushq	%rsi
000000000001bba3	pushq	%rdi
000000000001bba4	callq	__Z7getBasev ## getBase()
000000000001bba9	addq	$0x137090, %rax
000000000001bbaf	popq	%rdi
000000000001bbb0	popq	%rsi
000000000001bbb1	movss	(%rsp), %xmm1
000000000001bbb6	addq	$0x10, %rsp
000000000001bbba	movss	(%rsp), %xmm0
000000000001bbbf	addq	$0x10, %rsp
000000000001bbc3	popq	%r15
000000000001bbc5	popq	%r14
000000000001bbc7	popq	%r13
000000000001bbc9	popq	%r12
000000000001bbcb	popq	%r11
000000000001bbcd	popq	%r10
000000000001bbcf	popq	%r9
000000000001bbd1	popq	%r8
000000000001bbd3	popq	%rcx
000000000001bbd4	popq	%rdx
000000000001bbd5	popq	%rsi
000000000001bbd6	popq	%rdi
000000000001bbd7	popq	%rbx
000000000001bbd8	popq	%rbp
000000000001bbd9	jmpq	*%rax
__ZN7cocos2d7CCPointmiERKS0_:
000000000001bbdb	pushq	%rbp
000000000001bbdc	movq	%rsp, %rbp
000000000001bbdf	pushq	%rbx
000000000001bbe0	pushq	%rdi
000000000001bbe1	pushq	%rsi
000000000001bbe2	pushq	%rdx
000000000001bbe3	pushq	%rcx
000000000001bbe4	pushq	%r8
000000000001bbe6	pushq	%r9
000000000001bbe8	pushq	%r10
000000000001bbea	pushq	%r11
000000000001bbec	pushq	%r12
000000000001bbee	pushq	%r13
000000000001bbf0	pushq	%r14
000000000001bbf2	pushq	%r15
000000000001bbf4	subq	$0x10, %rsp
000000000001bbf8	movss	%xmm0, (%rsp)
000000000001bbfd	subq	$0x10, %rsp
000000000001bc01	movss	%xmm1, (%rsp)
000000000001bc06	pushq	%rsi
000000000001bc07	pushq	%rdi
000000000001bc08	callq	__Z7getBasev ## getBase()
000000000001bc0d	addq	$0x137120, %rax
000000000001bc13	popq	%rdi
000000000001bc14	popq	%rsi
000000000001bc15	movss	(%rsp), %xmm1
000000000001bc1a	addq	$0x10, %rsp
000000000001bc1e	movss	(%rsp), %xmm0
000000000001bc23	addq	$0x10, %rsp
000000000001bc27	popq	%r15
000000000001bc29	popq	%r14
000000000001bc2b	popq	%r13
000000000001bc2d	popq	%r12
000000000001bc2f	popq	%r11
000000000001bc31	popq	%r10
000000000001bc33	popq	%r9
000000000001bc35	popq	%r8
000000000001bc37	popq	%rcx
000000000001bc38	popq	%rdx
000000000001bc39	popq	%rsi
000000000001bc3a	popq	%rdi
000000000001bc3b	popq	%rbx
000000000001bc3c	popq	%rbp
000000000001bc3d	jmpq	*%rax
__ZN7cocos2d8CCObject11autoreleaseEv:
000000000001bc3f	pushq	%rbp
000000000001bc40	movq	%rsp, %rbp
000000000001bc43	pushq	%rbx
000000000001bc44	pushq	%rdi
000000000001bc45	pushq	%rsi
000000000001bc46	pushq	%rdx
000000000001bc47	pushq	%rcx
000000000001bc48	pushq	%r8
000000000001bc4a	pushq	%r9
000000000001bc4c	pushq	%r10
000000000001bc4e	pushq	%r11
000000000001bc50	pushq	%r12
000000000001bc52	pushq	%r13
000000000001bc54	pushq	%r14
000000000001bc56	pushq	%r15
000000000001bc58	subq	$0x10, %rsp
000000000001bc5c	movss	%xmm0, (%rsp)
000000000001bc61	subq	$0x10, %rsp
000000000001bc65	movss	%xmm1, (%rsp)
000000000001bc6a	pushq	%rsi
000000000001bc6b	pushq	%rdi
000000000001bc6c	callq	__Z7getBasev ## getBase()
000000000001bc71	addq	$0x250ed0, %rax
000000000001bc77	popq	%rdi
000000000001bc78	popq	%rsi
000000000001bc79	movss	(%rsp), %xmm1
000000000001bc7e	addq	$0x10, %rsp
000000000001bc82	movss	(%rsp), %xmm0
000000000001bc87	addq	$0x10, %rsp
000000000001bc8b	popq	%r15
000000000001bc8d	popq	%r14
000000000001bc8f	popq	%r13
000000000001bc91	popq	%r12
000000000001bc93	popq	%r11
000000000001bc95	popq	%r10
000000000001bc97	popq	%r9
000000000001bc99	popq	%r8
000000000001bc9b	popq	%rcx
000000000001bc9c	popq	%rdx
000000000001bc9d	popq	%rsi
000000000001bc9e	popq	%rdi
000000000001bc9f	popq	%rbx
000000000001bca0	popq	%rbp
000000000001bca1	jmpq	*%rax
__ZN7cocos2d8CCObject13acceptVisitorERNS_13CCDataVisitorE:
000000000001bca3	pushq	%rbp
000000000001bca4	movq	%rsp, %rbp
000000000001bca7	pushq	%rbx
000000000001bca8	pushq	%rdi
000000000001bca9	pushq	%rsi
000000000001bcaa	pushq	%rdx
000000000001bcab	pushq	%rcx
000000000001bcac	pushq	%r8
000000000001bcae	pushq	%r9
000000000001bcb0	pushq	%r10
000000000001bcb2	pushq	%r11
000000000001bcb4	pushq	%r12
000000000001bcb6	pushq	%r13
000000000001bcb8	pushq	%r14
000000000001bcba	pushq	%r15
000000000001bcbc	subq	$0x10, %rsp
000000000001bcc0	movss	%xmm0, (%rsp)
000000000001bcc5	subq	$0x10, %rsp
000000000001bcc9	movss	%xmm1, (%rsp)
000000000001bcce	pushq	%rsi
000000000001bccf	pushq	%rdi
000000000001bcd0	callq	__Z7getBasev ## getBase()
000000000001bcd5	addq	$0x250f30, %rax
000000000001bcdb	popq	%rdi
000000000001bcdc	popq	%rsi
000000000001bcdd	movss	(%rsp), %xmm1
000000000001bce2	addq	$0x10, %rsp
000000000001bce6	movss	(%rsp), %xmm0
000000000001bceb	addq	$0x10, %rsp
000000000001bcef	popq	%r15
000000000001bcf1	popq	%r14
000000000001bcf3	popq	%r13
000000000001bcf5	popq	%r12
000000000001bcf7	popq	%r11
000000000001bcf9	popq	%r10
000000000001bcfb	popq	%r9
000000000001bcfd	popq	%r8
000000000001bcff	popq	%rcx
000000000001bd00	popq	%rdx
000000000001bd01	popq	%rsi
000000000001bd02	popq	%rdi
000000000001bd03	popq	%rbx
000000000001bd04	popq	%rbp
000000000001bd05	jmpq	*%rax
__ZN7cocos2d8CCObject15encodeWithCoderEP13DS_Dictionary:
000000000001bd07	pushq	%rbp
000000000001bd08	movq	%rsp, %rbp
000000000001bd0b	pushq	%rbx
000000000001bd0c	pushq	%rdi
000000000001bd0d	pushq	%rsi
000000000001bd0e	pushq	%rdx
000000000001bd0f	pushq	%rcx
000000000001bd10	pushq	%r8
000000000001bd12	pushq	%r9
000000000001bd14	pushq	%r10
000000000001bd16	pushq	%r11
000000000001bd18	pushq	%r12
000000000001bd1a	pushq	%r13
000000000001bd1c	pushq	%r14
000000000001bd1e	pushq	%r15
000000000001bd20	subq	$0x10, %rsp
000000000001bd24	movss	%xmm0, (%rsp)
000000000001bd29	subq	$0x10, %rsp
000000000001bd2d	movss	%xmm1, (%rsp)
000000000001bd32	pushq	%rsi
000000000001bd33	pushq	%rdi
000000000001bd34	callq	__Z7getBasev ## getBase()
000000000001bd39	addq	$0x250f70, %rax
000000000001bd3f	popq	%rdi
000000000001bd40	popq	%rsi
000000000001bd41	movss	(%rsp), %xmm1
000000000001bd46	addq	$0x10, %rsp
000000000001bd4a	movss	(%rsp), %xmm0
000000000001bd4f	addq	$0x10, %rsp
000000000001bd53	popq	%r15
000000000001bd55	popq	%r14
000000000001bd57	popq	%r13
000000000001bd59	popq	%r12
000000000001bd5b	popq	%r11
000000000001bd5d	popq	%r10
000000000001bd5f	popq	%r9
000000000001bd61	popq	%r8
000000000001bd63	popq	%rcx
000000000001bd64	popq	%rdx
000000000001bd65	popq	%rsi
000000000001bd66	popq	%rdi
000000000001bd67	popq	%rbx
000000000001bd68	popq	%rbp
000000000001bd69	jmpq	*%rax
__ZN7cocos2d8CCObject6retainEv:
000000000001bd6b	pushq	%rbp
000000000001bd6c	movq	%rsp, %rbp
000000000001bd6f	pushq	%rbx
000000000001bd70	pushq	%rdi
000000000001bd71	pushq	%rsi
000000000001bd72	pushq	%rdx
000000000001bd73	pushq	%rcx
000000000001bd74	pushq	%r8
000000000001bd76	pushq	%r9
000000000001bd78	pushq	%r10
000000000001bd7a	pushq	%r11
000000000001bd7c	pushq	%r12
000000000001bd7e	pushq	%r13
000000000001bd80	pushq	%r14
000000000001bd82	pushq	%r15
000000000001bd84	subq	$0x10, %rsp
000000000001bd88	movss	%xmm0, (%rsp)
000000000001bd8d	subq	$0x10, %rsp
000000000001bd91	movss	%xmm1, (%rsp)
000000000001bd96	pushq	%rsi
000000000001bd97	pushq	%rdi
000000000001bd98	callq	__Z7getBasev ## getBase()
000000000001bd9d	addq	$0x250ec0, %rax
000000000001bda3	popq	%rdi
000000000001bda4	popq	%rsi
000000000001bda5	movss	(%rsp), %xmm1
000000000001bdaa	addq	$0x10, %rsp
000000000001bdae	movss	(%rsp), %xmm0
000000000001bdb3	addq	$0x10, %rsp
000000000001bdb7	popq	%r15
000000000001bdb9	popq	%r14
000000000001bdbb	popq	%r13
000000000001bdbd	popq	%r12
000000000001bdbf	popq	%r11
000000000001bdc1	popq	%r10
000000000001bdc3	popq	%r9
000000000001bdc5	popq	%r8
000000000001bdc7	popq	%rcx
000000000001bdc8	popq	%rdx
000000000001bdc9	popq	%rsi
000000000001bdca	popq	%rdi
000000000001bdcb	popq	%rbx
000000000001bdcc	popq	%rbp
000000000001bdcd	jmpq	*%rax
__ZN7cocos2d8CCObject6setTagEi:
000000000001bdcf	pushq	%rbp
000000000001bdd0	movq	%rsp, %rbp
000000000001bdd3	pushq	%rbx
000000000001bdd4	pushq	%rdi
000000000001bdd5	pushq	%rsi
000000000001bdd6	pushq	%rdx
000000000001bdd7	pushq	%rcx
000000000001bdd8	pushq	%r8
000000000001bdda	pushq	%r9
000000000001bddc	pushq	%r10
000000000001bdde	pushq	%r11
000000000001bde0	pushq	%r12
000000000001bde2	pushq	%r13
000000000001bde4	pushq	%r14
000000000001bde6	pushq	%r15
000000000001bde8	subq	$0x10, %rsp
000000000001bdec	movss	%xmm0, (%rsp)
000000000001bdf1	subq	$0x10, %rsp
000000000001bdf5	movss	%xmm1, (%rsp)
000000000001bdfa	pushq	%rsi
000000000001bdfb	pushq	%rdi
000000000001bdfc	callq	__Z7getBasev ## getBase()
000000000001be01	addq	$0x250f60, %rax
000000000001be07	popq	%rdi
000000000001be08	popq	%rsi
000000000001be09	movss	(%rsp), %xmm1
000000000001be0e	addq	$0x10, %rsp
000000000001be12	movss	(%rsp), %xmm0
000000000001be17	addq	$0x10, %rsp
000000000001be1b	popq	%r15
000000000001be1d	popq	%r14
000000000001be1f	popq	%r13
000000000001be21	popq	%r12
000000000001be23	popq	%r11
000000000001be25	popq	%r10
000000000001be27	popq	%r9
000000000001be29	popq	%r8
000000000001be2b	popq	%rcx
000000000001be2c	popq	%rdx
000000000001be2d	popq	%rsi
000000000001be2e	popq	%rdi
000000000001be2f	popq	%rbx
000000000001be30	popq	%rbp
000000000001be31	jmpq	*%rax
__ZN7cocos2d8CCObject7isEqualEPKS0_:
000000000001be33	pushq	%rbp
000000000001be34	movq	%rsp, %rbp
000000000001be37	pushq	%rbx
000000000001be38	pushq	%rdi
000000000001be39	pushq	%rsi
000000000001be3a	pushq	%rdx
000000000001be3b	pushq	%rcx
000000000001be3c	pushq	%r8
000000000001be3e	pushq	%r9
000000000001be40	pushq	%r10
000000000001be42	pushq	%r11
000000000001be44	pushq	%r12
000000000001be46	pushq	%r13
000000000001be48	pushq	%r14
000000000001be4a	pushq	%r15
000000000001be4c	subq	$0x10, %rsp
000000000001be50	movss	%xmm0, (%rsp)
000000000001be55	subq	$0x10, %rsp
000000000001be59	movss	%xmm1, (%rsp)
000000000001be5e	pushq	%rsi
000000000001be5f	pushq	%rdi
000000000001be60	callq	__Z7getBasev ## getBase()
000000000001be65	addq	$0x250f20, %rax
000000000001be6b	popq	%rdi
000000000001be6c	popq	%rsi
000000000001be6d	movss	(%rsp), %xmm1
000000000001be72	addq	$0x10, %rsp
000000000001be76	movss	(%rsp), %xmm0
000000000001be7b	addq	$0x10, %rsp
000000000001be7f	popq	%r15
000000000001be81	popq	%r14
000000000001be83	popq	%r13
000000000001be85	popq	%r12
000000000001be87	popq	%r11
000000000001be89	popq	%r10
000000000001be8b	popq	%r9
000000000001be8d	popq	%r8
000000000001be8f	popq	%rcx
000000000001be90	popq	%rdx
000000000001be91	popq	%rsi
000000000001be92	popq	%rdi
000000000001be93	popq	%rbx
000000000001be94	popq	%rbp
000000000001be95	jmpq	*%rax
__ZN7cocos2d8CCObject9canEncodeEv:
000000000001be97	pushq	%rbp
000000000001be98	movq	%rsp, %rbp
000000000001be9b	pushq	%rbx
000000000001be9c	pushq	%rdi
000000000001be9d	pushq	%rsi
000000000001be9e	pushq	%rdx
000000000001be9f	pushq	%rcx
000000000001bea0	pushq	%r8
000000000001bea2	pushq	%r9
000000000001bea4	pushq	%r10
000000000001bea6	pushq	%r11
000000000001bea8	pushq	%r12
000000000001beaa	pushq	%r13
000000000001beac	pushq	%r14
000000000001beae	pushq	%r15
000000000001beb0	subq	$0x10, %rsp
000000000001beb4	movss	%xmm0, (%rsp)
000000000001beb9	subq	$0x10, %rsp
000000000001bebd	movss	%xmm1, (%rsp)
000000000001bec2	pushq	%rsi
000000000001bec3	pushq	%rdi
000000000001bec4	callq	__Z7getBasev ## getBase()
000000000001bec9	addq	$0x250f90, %rax
000000000001becf	popq	%rdi
000000000001bed0	popq	%rsi
000000000001bed1	movss	(%rsp), %xmm1
000000000001bed6	addq	$0x10, %rsp
000000000001beda	movss	(%rsp), %xmm0
000000000001bedf	addq	$0x10, %rsp
000000000001bee3	popq	%r15
000000000001bee5	popq	%r14
000000000001bee7	popq	%r13
000000000001bee9	popq	%r12
000000000001beeb	popq	%r11
000000000001beed	popq	%r10
000000000001beef	popq	%r9
000000000001bef1	popq	%r8
000000000001bef3	popq	%rcx
000000000001bef4	popq	%rdx
000000000001bef5	popq	%rsi
000000000001bef6	popq	%rdi
000000000001bef7	popq	%rbx
000000000001bef8	popq	%rbp
000000000001bef9	jmpq	*%rax
__ZN7cocos2d8CCObjectC1Ev:
000000000001befb	pushq	%rbp
000000000001befc	movq	%rsp, %rbp
000000000001beff	pushq	%rbx
000000000001bf00	pushq	%rdi
000000000001bf01	pushq	%rsi
000000000001bf02	pushq	%rdx
000000000001bf03	pushq	%rcx
000000000001bf04	pushq	%r8
000000000001bf06	pushq	%r9
000000000001bf08	pushq	%r10
000000000001bf0a	pushq	%r11
000000000001bf0c	pushq	%r12
000000000001bf0e	pushq	%r13
000000000001bf10	pushq	%r14
000000000001bf12	pushq	%r15
000000000001bf14	subq	$0x10, %rsp
000000000001bf18	movss	%xmm0, (%rsp)
000000000001bf1d	subq	$0x10, %rsp
000000000001bf21	movss	%xmm1, (%rsp)
000000000001bf26	pushq	%rsi
000000000001bf27	pushq	%rdi
000000000001bf28	callq	__Z7getBasev ## getBase()
000000000001bf2d	addq	$0x250ca0, %rax
000000000001bf33	popq	%rdi
000000000001bf34	popq	%rsi
000000000001bf35	movss	(%rsp), %xmm1
000000000001bf3a	addq	$0x10, %rsp
000000000001bf3e	movss	(%rsp), %xmm0
000000000001bf43	addq	$0x10, %rsp
000000000001bf47	popq	%r15
000000000001bf49	popq	%r14
000000000001bf4b	popq	%r13
000000000001bf4d	popq	%r12
000000000001bf4f	popq	%r11
000000000001bf51	popq	%r10
000000000001bf53	popq	%r9
000000000001bf55	popq	%r8
000000000001bf57	popq	%rcx
000000000001bf58	popq	%rdx
000000000001bf59	popq	%rsi
000000000001bf5a	popq	%rdi
000000000001bf5b	popq	%rbx
000000000001bf5c	popq	%rbp
000000000001bf5d	jmpq	*%rax
__ZN7cocos2d8CCObjectD1Ev:
000000000001bf5f	pushq	%rbp
000000000001bf60	movq	%rsp, %rbp
000000000001bf63	pushq	%rbx
000000000001bf64	pushq	%rdi
000000000001bf65	pushq	%rsi
000000000001bf66	pushq	%rdx
000000000001bf67	pushq	%rcx
000000000001bf68	pushq	%r8
000000000001bf6a	pushq	%r9
000000000001bf6c	pushq	%r10
000000000001bf6e	pushq	%r11
000000000001bf70	pushq	%r12
000000000001bf72	pushq	%r13
000000000001bf74	pushq	%r14
000000000001bf76	pushq	%r15
000000000001bf78	subq	$0x10, %rsp
000000000001bf7c	movss	%xmm0, (%rsp)
000000000001bf81	subq	$0x10, %rsp
000000000001bf85	movss	%xmm1, (%rsp)
000000000001bf8a	pushq	%rsi
000000000001bf8b	pushq	%rdi
000000000001bf8c	callq	__Z7getBasev ## getBase()
000000000001bf91	addq	$0x250d20, %rax
000000000001bf97	popq	%rdi
000000000001bf98	popq	%rsi
000000000001bf99	movss	(%rsp), %xmm1
000000000001bf9e	addq	$0x10, %rsp
000000000001bfa2	movss	(%rsp), %xmm0
000000000001bfa7	addq	$0x10, %rsp
000000000001bfab	popq	%r15
000000000001bfad	popq	%r14
000000000001bfaf	popq	%r13
000000000001bfb1	popq	%r12
000000000001bfb3	popq	%r11
000000000001bfb5	popq	%r10
000000000001bfb7	popq	%r9
000000000001bfb9	popq	%r8
000000000001bfbb	popq	%rcx
000000000001bfbc	popq	%rdx
000000000001bfbd	popq	%rsi
000000000001bfbe	popq	%rdi
000000000001bfbf	popq	%rbx
000000000001bfc0	popq	%rbp
000000000001bfc1	jmpq	*%rax
__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc:
000000000001bfc3	pushq	%rbp
000000000001bfc4	movq	%rsp, %rbp
000000000001bfc7	pushq	%rbx
000000000001bfc8	pushq	%rdi
000000000001bfc9	pushq	%rsi
000000000001bfca	pushq	%rdx
000000000001bfcb	pushq	%rcx
000000000001bfcc	pushq	%r8
000000000001bfce	pushq	%r9
000000000001bfd0	pushq	%r10
000000000001bfd2	pushq	%r11
000000000001bfd4	pushq	%r12
000000000001bfd6	pushq	%r13
000000000001bfd8	pushq	%r14
000000000001bfda	pushq	%r15
000000000001bfdc	subq	$0x10, %rsp
000000000001bfe0	movss	%xmm0, (%rsp)
000000000001bfe5	subq	$0x10, %rsp
000000000001bfe9	movss	%xmm1, (%rsp)
000000000001bfee	pushq	%rsi
000000000001bfef	pushq	%rdi
000000000001bff0	callq	__Z7getBasev ## getBase()
000000000001bff5	addq	$0x132dc0, %rax
000000000001bffb	popq	%rdi
000000000001bffc	popq	%rsi
000000000001bffd	movss	(%rsp), %xmm1
000000000001c002	addq	$0x10, %rsp
000000000001c006	movss	(%rsp), %xmm0
000000000001c00b	addq	$0x10, %rsp
000000000001c00f	popq	%r15
000000000001c011	popq	%r14
000000000001c013	popq	%r13
000000000001c015	popq	%r12
000000000001c017	popq	%r11
000000000001c019	popq	%r10
000000000001c01b	popq	%r9
000000000001c01d	popq	%r8
000000000001c01f	popq	%rcx
000000000001c020	popq	%rdx
000000000001c021	popq	%rsi
000000000001c022	popq	%rdi
000000000001c023	popq	%rbx
000000000001c024	popq	%rbp
000000000001c025	jmpq	*%rax
__ZN7cocos2d8CCSprite6createEv:
000000000001c027	pushq	%rbp
000000000001c028	movq	%rsp, %rbp
000000000001c02b	pushq	%rbx
000000000001c02c	pushq	%rdi
000000000001c02d	pushq	%rsi
000000000001c02e	pushq	%rdx
000000000001c02f	pushq	%rcx
000000000001c030	pushq	%r8
000000000001c032	pushq	%r9
000000000001c034	pushq	%r10
000000000001c036	pushq	%r11
000000000001c038	pushq	%r12
000000000001c03a	pushq	%r13
000000000001c03c	pushq	%r14
000000000001c03e	pushq	%r15
000000000001c040	subq	$0x10, %rsp
000000000001c044	movss	%xmm0, (%rsp)
000000000001c049	subq	$0x10, %rsp
000000000001c04d	movss	%xmm1, (%rsp)
000000000001c052	pushq	%rsi
000000000001c053	pushq	%rdi
000000000001c054	callq	__Z7getBasev ## getBase()
000000000001c059	addq	$0x132df0, %rax
000000000001c05f	popq	%rdi
000000000001c060	popq	%rsi
000000000001c061	movss	(%rsp), %xmm1
000000000001c066	addq	$0x10, %rsp
000000000001c06a	movss	(%rsp), %xmm0
000000000001c06f	addq	$0x10, %rsp
000000000001c073	popq	%r15
000000000001c075	popq	%r14
000000000001c077	popq	%r13
000000000001c079	popq	%r12
000000000001c07b	popq	%r11
000000000001c07d	popq	%r10
000000000001c07f	popq	%r9
000000000001c081	popq	%r8
000000000001c083	popq	%rcx
000000000001c084	popq	%rdx
000000000001c085	popq	%rsi
000000000001c086	popq	%rdi
000000000001c087	popq	%rbx
000000000001c088	popq	%rbp
000000000001c089	jmpq	*%rax
__ZN7cocos2d8CCSpriteC1Ev:
000000000001c08b	pushq	%rbp
000000000001c08c	movq	%rsp, %rbp
000000000001c08f	pushq	%rbx
000000000001c090	pushq	%rdi
000000000001c091	pushq	%rsi
000000000001c092	pushq	%rdx
000000000001c093	pushq	%rcx
000000000001c094	pushq	%r8
000000000001c096	pushq	%r9
000000000001c098	pushq	%r10
000000000001c09a	pushq	%r11
000000000001c09c	pushq	%r12
000000000001c09e	pushq	%r13
000000000001c0a0	pushq	%r14
000000000001c0a2	pushq	%r15
000000000001c0a4	subq	$0x10, %rsp
000000000001c0a8	movss	%xmm0, (%rsp)
000000000001c0ad	subq	$0x10, %rsp
000000000001c0b1	movss	%xmm1, (%rsp)
000000000001c0b6	pushq	%rsi
000000000001c0b7	pushq	%rdi
000000000001c0b8	callq	__Z7getBasev ## getBase()
000000000001c0bd	addq	$0x124ac0, %rax
000000000001c0c3	popq	%rdi
000000000001c0c4	popq	%rsi
000000000001c0c5	movss	(%rsp), %xmm1
000000000001c0ca	addq	$0x10, %rsp
000000000001c0ce	movss	(%rsp), %xmm0
000000000001c0d3	addq	$0x10, %rsp
000000000001c0d7	popq	%r15
000000000001c0d9	popq	%r14
000000000001c0db	popq	%r13
000000000001c0dd	popq	%r12
000000000001c0df	popq	%r11
000000000001c0e1	popq	%r10
000000000001c0e3	popq	%r9
000000000001c0e5	popq	%r8
000000000001c0e7	popq	%rcx
000000000001c0e8	popq	%rdx
000000000001c0e9	popq	%rsi
000000000001c0ea	popq	%rdi
000000000001c0eb	popq	%rbx
000000000001c0ec	popq	%rbp
000000000001c0ed	jmpq	*%rax
__ZN7cocos2d8CCString11doubleValueEv:
000000000001c0ef	pushq	%rbp
000000000001c0f0	movq	%rsp, %rbp
000000000001c0f3	pushq	%rbx
000000000001c0f4	pushq	%rdi
000000000001c0f5	pushq	%rsi
000000000001c0f6	pushq	%rdx
000000000001c0f7	pushq	%rcx
000000000001c0f8	pushq	%r8
000000000001c0fa	pushq	%r9
000000000001c0fc	pushq	%r10
000000000001c0fe	pushq	%r11
000000000001c100	pushq	%r12
000000000001c102	pushq	%r13
000000000001c104	pushq	%r14
000000000001c106	pushq	%r15
000000000001c108	subq	$0x10, %rsp
000000000001c10c	movss	%xmm0, (%rsp)
000000000001c111	subq	$0x10, %rsp
000000000001c115	movss	%xmm1, (%rsp)
000000000001c11a	pushq	%rsi
000000000001c11b	pushq	%rdi
000000000001c11c	callq	__Z7getBasev ## getBase()
000000000001c121	addq	$0x44c7f0, %rax
000000000001c127	popq	%rdi
000000000001c128	popq	%rsi
000000000001c129	movss	(%rsp), %xmm1
000000000001c12e	addq	$0x10, %rsp
000000000001c132	movss	(%rsp), %xmm0
000000000001c137	addq	$0x10, %rsp
000000000001c13b	popq	%r15
000000000001c13d	popq	%r14
000000000001c13f	popq	%r13
000000000001c141	popq	%r12
000000000001c143	popq	%r11
000000000001c145	popq	%r10
000000000001c147	popq	%r9
000000000001c149	popq	%r8
000000000001c14b	popq	%rcx
000000000001c14c	popq	%rdx
000000000001c14d	popq	%rsi
000000000001c14e	popq	%rdi
000000000001c14f	popq	%rbx
000000000001c150	popq	%rbp
000000000001c151	jmpq	*%rax
__ZN7cocos2d8CCString16createWithFormatEPKcz:
000000000001c153	pushq	%rbp
000000000001c154	movq	%rsp, %rbp
000000000001c157	pushq	%rbx
000000000001c158	pushq	%rdi
000000000001c159	pushq	%rsi
000000000001c15a	pushq	%rdx
000000000001c15b	pushq	%rcx
000000000001c15c	pushq	%r8
000000000001c15e	pushq	%r9
000000000001c160	pushq	%r10
000000000001c162	pushq	%r11
000000000001c164	pushq	%r12
000000000001c166	pushq	%r13
000000000001c168	pushq	%r14
000000000001c16a	pushq	%r15
000000000001c16c	subq	$0x10, %rsp
000000000001c170	movss	%xmm0, (%rsp)
000000000001c175	subq	$0x10, %rsp
000000000001c179	movss	%xmm1, (%rsp)
000000000001c17e	pushq	%rsi
000000000001c17f	pushq	%rdi
000000000001c180	callq	__Z7getBasev ## getBase()
000000000001c185	addq	$0x44cab0, %rax
000000000001c18b	popq	%rdi
000000000001c18c	popq	%rsi
000000000001c18d	movss	(%rsp), %xmm1
000000000001c192	addq	$0x10, %rsp
000000000001c196	movss	(%rsp), %xmm0
000000000001c19b	addq	$0x10, %rsp
000000000001c19f	popq	%r15
000000000001c1a1	popq	%r14
000000000001c1a3	popq	%r13
000000000001c1a5	popq	%r12
000000000001c1a7	popq	%r11
000000000001c1a9	popq	%r10
000000000001c1ab	popq	%r9
000000000001c1ad	popq	%r8
000000000001c1af	popq	%rcx
000000000001c1b0	popq	%rdx
000000000001c1b1	popq	%rsi
000000000001c1b2	popq	%rdi
000000000001c1b3	popq	%rbx
000000000001c1b4	popq	%rbp
000000000001c1b5	jmpq	*%rax
__ZN7cocos2d8CCString8intValueEv:
000000000001c1b7	pushq	%rbp
000000000001c1b8	movq	%rsp, %rbp
000000000001c1bb	pushq	%rbx
000000000001c1bc	pushq	%rdi
000000000001c1bd	pushq	%rsi
000000000001c1be	pushq	%rdx
000000000001c1bf	pushq	%rcx
000000000001c1c0	pushq	%r8
000000000001c1c2	pushq	%r9
000000000001c1c4	pushq	%r10
000000000001c1c6	pushq	%r11
000000000001c1c8	pushq	%r12
000000000001c1ca	pushq	%r13
000000000001c1cc	pushq	%r14
000000000001c1ce	pushq	%r15
000000000001c1d0	subq	$0x10, %rsp
000000000001c1d4	movss	%xmm0, (%rsp)
000000000001c1d9	subq	$0x10, %rsp
000000000001c1dd	movss	%xmm1, (%rsp)
000000000001c1e2	pushq	%rsi
000000000001c1e3	pushq	%rdi
000000000001c1e4	callq	__Z7getBasev ## getBase()
000000000001c1e9	addq	$0x44c780, %rax
000000000001c1ef	popq	%rdi
000000000001c1f0	popq	%rsi
000000000001c1f1	movss	(%rsp), %xmm1
000000000001c1f6	addq	$0x10, %rsp
000000000001c1fa	movss	(%rsp), %xmm0
000000000001c1ff	addq	$0x10, %rsp
000000000001c203	popq	%r15
000000000001c205	popq	%r14
000000000001c207	popq	%r13
000000000001c209	popq	%r12
000000000001c20b	popq	%r11
000000000001c20d	popq	%r10
000000000001c20f	popq	%r9
000000000001c211	popq	%r8
000000000001c213	popq	%rcx
000000000001c214	popq	%rdx
000000000001c215	popq	%rsi
000000000001c216	popq	%rdi
000000000001c217	popq	%rbx
000000000001c218	popq	%rbp
000000000001c219	jmpq	*%rax
__ZN7cocos2d8CCString9boolValueEv:
000000000001c21b	pushq	%rbp
000000000001c21c	movq	%rsp, %rbp
000000000001c21f	pushq	%rbx
000000000001c220	pushq	%rdi
000000000001c221	pushq	%rsi
000000000001c222	pushq	%rdx
000000000001c223	pushq	%rcx
000000000001c224	pushq	%r8
000000000001c226	pushq	%r9
000000000001c228	pushq	%r10
000000000001c22a	pushq	%r11
000000000001c22c	pushq	%r12
000000000001c22e	pushq	%r13
000000000001c230	pushq	%r14
000000000001c232	pushq	%r15
000000000001c234	subq	$0x10, %rsp
000000000001c238	movss	%xmm0, (%rsp)
000000000001c23d	subq	$0x10, %rsp
000000000001c241	movss	%xmm1, (%rsp)
000000000001c246	pushq	%rsi
000000000001c247	pushq	%rdi
000000000001c248	callq	__Z7getBasev ## getBase()
000000000001c24d	addq	$0x44c810, %rax
000000000001c253	popq	%rdi
000000000001c254	popq	%rsi
000000000001c255	movss	(%rsp), %xmm1
000000000001c25a	addq	$0x10, %rsp
000000000001c25e	movss	(%rsp), %xmm0
000000000001c263	addq	$0x10, %rsp
000000000001c267	popq	%r15
000000000001c269	popq	%r14
000000000001c26b	popq	%r13
000000000001c26d	popq	%r12
000000000001c26f	popq	%r11
000000000001c271	popq	%r10
000000000001c273	popq	%r9
000000000001c275	popq	%r8
000000000001c277	popq	%rcx
000000000001c278	popq	%rdx
000000000001c279	popq	%rsi
000000000001c27a	popq	%rdi
000000000001c27b	popq	%rbx
000000000001c27c	popq	%rbp
000000000001c27d	jmpq	*%rax
__ZN7cocos2d9CCCopying12copyWithZoneEPNS_6CCZoneE:
000000000001c27f	pushq	%rbp
000000000001c280	movq	%rsp, %rbp
000000000001c283	pushq	%rbx
000000000001c284	pushq	%rdi
000000000001c285	pushq	%rsi
000000000001c286	pushq	%rdx
000000000001c287	pushq	%rcx
000000000001c288	pushq	%r8
000000000001c28a	pushq	%r9
000000000001c28c	pushq	%r10
000000000001c28e	pushq	%r11
000000000001c290	pushq	%r12
000000000001c292	pushq	%r13
000000000001c294	pushq	%r14
000000000001c296	pushq	%r15
000000000001c298	subq	$0x10, %rsp
000000000001c29c	movss	%xmm0, (%rsp)
000000000001c2a1	subq	$0x10, %rsp
000000000001c2a5	movss	%xmm1, (%rsp)
000000000001c2aa	pushq	%rsi
000000000001c2ab	pushq	%rdi
000000000001c2ac	callq	__Z7getBasev ## getBase()
000000000001c2b1	addq	$0x250c90, %rax
000000000001c2b7	popq	%rdi
000000000001c2b8	popq	%rsi
000000000001c2b9	movss	(%rsp), %xmm1
000000000001c2be	addq	$0x10, %rsp
000000000001c2c2	movss	(%rsp), %xmm0
000000000001c2c7	addq	$0x10, %rsp
000000000001c2cb	popq	%r15
000000000001c2cd	popq	%r14
000000000001c2cf	popq	%r13
000000000001c2d1	popq	%r12
000000000001c2d3	popq	%r11
000000000001c2d5	popq	%r10
000000000001c2d7	popq	%r9
000000000001c2d9	popq	%r8
000000000001c2db	popq	%rcx
000000000001c2dc	popq	%rdx
000000000001c2dd	popq	%rsi
000000000001c2de	popq	%rdi
000000000001c2df	popq	%rbx
000000000001c2e0	popq	%rbp
000000000001c2e1	jmpq	*%rax
__ZN7cocos2d9extension14CCScale9Sprite14setContentSizeERKNS_6CCSizeE:
000000000001c2e3	pushq	%rbp
000000000001c2e4	movq	%rsp, %rbp
000000000001c2e7	pushq	%rbx
000000000001c2e8	pushq	%rdi
000000000001c2e9	pushq	%rsi
000000000001c2ea	pushq	%rdx
000000000001c2eb	pushq	%rcx
000000000001c2ec	pushq	%r8
000000000001c2ee	pushq	%r9
000000000001c2f0	pushq	%r10
000000000001c2f2	pushq	%r11
000000000001c2f4	pushq	%r12
000000000001c2f6	pushq	%r13
000000000001c2f8	pushq	%r14
000000000001c2fa	pushq	%r15
000000000001c2fc	subq	$0x10, %rsp
000000000001c300	movss	%xmm0, (%rsp)
000000000001c305	subq	$0x10, %rsp
000000000001c309	movss	%xmm1, (%rsp)
000000000001c30e	pushq	%rsi
000000000001c30f	pushq	%rdi
000000000001c310	callq	__Z7getBasev ## getBase()
000000000001c315	addq	$0x2127c0, %rax
000000000001c31b	popq	%rdi
000000000001c31c	popq	%rsi
000000000001c31d	movss	(%rsp), %xmm1
000000000001c322	addq	$0x10, %rsp
000000000001c326	movss	(%rsp), %xmm0
000000000001c32b	addq	$0x10, %rsp
000000000001c32f	popq	%r15
000000000001c331	popq	%r14
000000000001c333	popq	%r13
000000000001c335	popq	%r12
000000000001c337	popq	%r11
000000000001c339	popq	%r10
000000000001c33b	popq	%r9
000000000001c33d	popq	%r8
000000000001c33f	popq	%rcx
000000000001c340	popq	%rdx
000000000001c341	popq	%rsi
000000000001c342	popq	%rdi
000000000001c343	popq	%rbx
000000000001c344	popq	%rbp
000000000001c345	jmpq	*%rax
__ZN7cocos2d9extension14CCScale9Sprite6createEPKcNS_6CCRectE:
000000000001c347	pushq	%rbp
000000000001c348	movq	%rsp, %rbp
000000000001c34b	pushq	%rbx
000000000001c34c	pushq	%rdi
000000000001c34d	pushq	%rsi
000000000001c34e	pushq	%rdx
000000000001c34f	pushq	%rcx
000000000001c350	pushq	%r8
000000000001c352	pushq	%r9
000000000001c354	pushq	%r10
000000000001c356	pushq	%r11
000000000001c358	pushq	%r12
000000000001c35a	pushq	%r13
000000000001c35c	pushq	%r14
000000000001c35e	pushq	%r15
000000000001c360	subq	$0x10, %rsp
000000000001c364	movss	%xmm0, (%rsp)
000000000001c369	subq	$0x10, %rsp
000000000001c36d	movss	%xmm1, (%rsp)
000000000001c372	pushq	%rsi
000000000001c373	pushq	%rdi
000000000001c374	callq	__Z7getBasev ## getBase()
000000000001c379	addq	$0x212ef0, %rax
000000000001c37f	popq	%rdi
000000000001c380	popq	%rsi
000000000001c381	movss	(%rsp), %xmm1
000000000001c386	addq	$0x10, %rsp
000000000001c38a	movss	(%rsp), %xmm0
000000000001c38f	addq	$0x10, %rsp
000000000001c393	popq	%r15
000000000001c395	popq	%r14
000000000001c397	popq	%r13
000000000001c399	popq	%r12
000000000001c39b	popq	%r11
000000000001c39d	popq	%r10
000000000001c39f	popq	%r9
000000000001c3a1	popq	%r8
000000000001c3a3	popq	%rcx
000000000001c3a4	popq	%rdx
000000000001c3a5	popq	%rsi
000000000001c3a6	popq	%rdi
000000000001c3a7	popq	%rbx
000000000001c3a8	popq	%rbp
000000000001c3a9	jmpq	*%rax
__ZN7cocos2d9extension14CCScale9Sprite6createEPKc:
000000000001c3ab	pushq	%rbp
000000000001c3ac	movq	%rsp, %rbp
000000000001c3af	pushq	%rbx
000000000001c3b0	pushq	%rdi
000000000001c3b1	pushq	%rsi
000000000001c3b2	pushq	%rdx
000000000001c3b3	pushq	%rcx
000000000001c3b4	pushq	%r8
000000000001c3b6	pushq	%r9
000000000001c3b8	pushq	%r10
000000000001c3ba	pushq	%r11
000000000001c3bc	pushq	%r12
000000000001c3be	pushq	%r13
000000000001c3c0	pushq	%r14
000000000001c3c2	pushq	%r15
000000000001c3c4	subq	$0x10, %rsp
000000000001c3c8	movss	%xmm0, (%rsp)
000000000001c3cd	subq	$0x10, %rsp
000000000001c3d1	movss	%xmm1, (%rsp)
000000000001c3d6	pushq	%rsi
000000000001c3d7	pushq	%rdi
000000000001c3d8	callq	__Z7getBasev ## getBase()
000000000001c3dd	addq	$0x2130d0, %rax
000000000001c3e3	popq	%rdi
000000000001c3e4	popq	%rsi
000000000001c3e5	movss	(%rsp), %xmm1
000000000001c3ea	addq	$0x10, %rsp
000000000001c3ee	movss	(%rsp), %xmm0
000000000001c3f3	addq	$0x10, %rsp
000000000001c3f7	popq	%r15
000000000001c3f9	popq	%r14
000000000001c3fb	popq	%r13
000000000001c3fd	popq	%r12
000000000001c3ff	popq	%r11
000000000001c401	popq	%r10
000000000001c403	popq	%r9
000000000001c405	popq	%r8
000000000001c407	popq	%rcx
000000000001c408	popq	%rdx
000000000001c409	popq	%rsi
000000000001c40a	popq	%rdi
000000000001c40b	popq	%rbx
000000000001c40c	popq	%rbp
000000000001c40d	jmpq	*%rax
__ZN8EditorUI12pasteObjectsESs:
000000000001c40f	pushq	%rbp
000000000001c410	movq	%rsp, %rbp
000000000001c413	pushq	%rbx
000000000001c414	pushq	%rdi
000000000001c415	pushq	%rsi
000000000001c416	pushq	%rdx
000000000001c417	pushq	%rcx
000000000001c418	pushq	%r8
000000000001c41a	pushq	%r9
000000000001c41c	pushq	%r10
000000000001c41e	pushq	%r11
000000000001c420	pushq	%r12
000000000001c422	pushq	%r13
000000000001c424	pushq	%r14
000000000001c426	pushq	%r15
000000000001c428	subq	$0x10, %rsp
000000000001c42c	movss	%xmm0, (%rsp)
000000000001c431	subq	$0x10, %rsp
000000000001c435	movss	%xmm1, (%rsp)
000000000001c43a	pushq	%rsi
000000000001c43b	pushq	%rdi
000000000001c43c	callq	__Z7getBasev ## getBase()
000000000001c441	addq	$0x232d0, %rax
000000000001c447	popq	%rdi
000000000001c448	popq	%rsi
000000000001c449	movss	(%rsp), %xmm1
000000000001c44e	addq	$0x10, %rsp
000000000001c452	movss	(%rsp), %xmm0
000000000001c457	addq	$0x10, %rsp
000000000001c45b	popq	%r15
000000000001c45d	popq	%r14
000000000001c45f	popq	%r13
000000000001c461	popq	%r12
000000000001c463	popq	%r11
000000000001c465	popq	%r10
000000000001c467	popq	%r9
000000000001c469	popq	%r8
000000000001c46b	popq	%rcx
000000000001c46c	popq	%rdx
000000000001c46d	popq	%rsi
000000000001c46e	popq	%rdi
000000000001c46f	popq	%rbx
000000000001c470	popq	%rbp
000000000001c471	jmpq	*%rax
__ZN8EditorUI13selectObjectsEPN7cocos2d7CCArrayEb:
000000000001c473	pushq	%rbp
000000000001c474	movq	%rsp, %rbp
000000000001c477	pushq	%rbx
000000000001c478	pushq	%rdi
000000000001c479	pushq	%rsi
000000000001c47a	pushq	%rdx
000000000001c47b	pushq	%rcx
000000000001c47c	pushq	%r8
000000000001c47e	pushq	%r9
000000000001c480	pushq	%r10
000000000001c482	pushq	%r11
000000000001c484	pushq	%r12
000000000001c486	pushq	%r13
000000000001c488	pushq	%r14
000000000001c48a	pushq	%r15
000000000001c48c	subq	$0x10, %rsp
000000000001c490	movss	%xmm0, (%rsp)
000000000001c495	subq	$0x10, %rsp
000000000001c499	movss	%xmm1, (%rsp)
000000000001c49e	pushq	%rsi
000000000001c49f	pushq	%rdi
000000000001c4a0	callq	__Z7getBasev ## getBase()
000000000001c4a5	addq	$0x23940, %rax
000000000001c4ab	popq	%rdi
000000000001c4ac	popq	%rsi
000000000001c4ad	movss	(%rsp), %xmm1
000000000001c4b2	addq	$0x10, %rsp
000000000001c4b6	movss	(%rsp), %xmm0
000000000001c4bb	addq	$0x10, %rsp
000000000001c4bf	popq	%r15
000000000001c4c1	popq	%r14
000000000001c4c3	popq	%r13
000000000001c4c5	popq	%r12
000000000001c4c7	popq	%r11
000000000001c4c9	popq	%r10
000000000001c4cb	popq	%r9
000000000001c4cd	popq	%r8
000000000001c4cf	popq	%rcx
000000000001c4d0	popq	%rdx
000000000001c4d1	popq	%rsi
000000000001c4d2	popq	%rdi
000000000001c4d3	popq	%rbx
000000000001c4d4	popq	%rbp
000000000001c4d5	jmpq	*%rax
__ZN8EditorUI14redoLastActionEv:
000000000001c4d7	pushq	%rbp
000000000001c4d8	movq	%rsp, %rbp
000000000001c4db	pushq	%rbx
000000000001c4dc	pushq	%rdi
000000000001c4dd	pushq	%rsi
000000000001c4de	pushq	%rdx
000000000001c4df	pushq	%rcx
000000000001c4e0	pushq	%r8
000000000001c4e2	pushq	%r9
000000000001c4e4	pushq	%r10
000000000001c4e6	pushq	%r11
000000000001c4e8	pushq	%r12
000000000001c4ea	pushq	%r13
000000000001c4ec	pushq	%r14
000000000001c4ee	pushq	%r15
000000000001c4f0	subq	$0x10, %rsp
000000000001c4f4	movss	%xmm0, (%rsp)
000000000001c4f9	subq	$0x10, %rsp
000000000001c4fd	movss	%xmm1, (%rsp)
000000000001c502	pushq	%rsi
000000000001c503	pushq	%rdi
000000000001c504	callq	__Z7getBasev ## getBase()
000000000001c509	addq	$0xb8e0, %rax
000000000001c50f	popq	%rdi
000000000001c510	popq	%rsi
000000000001c511	movss	(%rsp), %xmm1
000000000001c516	addq	$0x10, %rsp
000000000001c51a	movss	(%rsp), %xmm0
000000000001c51f	addq	$0x10, %rsp
000000000001c523	popq	%r15
000000000001c525	popq	%r14
000000000001c527	popq	%r13
000000000001c529	popq	%r12
000000000001c52b	popq	%r11
000000000001c52d	popq	%r10
000000000001c52f	popq	%r9
000000000001c531	popq	%r8
000000000001c533	popq	%rcx
000000000001c534	popq	%rdx
000000000001c535	popq	%rsi
000000000001c536	popq	%rdi
000000000001c537	popq	%rbx
000000000001c538	popq	%rbp
000000000001c539	jmpq	*%rax
__ZN8EditorUI14undoLastActionEv:
000000000001c53b	pushq	%rbp
000000000001c53c	movq	%rsp, %rbp
000000000001c53f	pushq	%rbx
000000000001c540	pushq	%rdi
000000000001c541	pushq	%rsi
000000000001c542	pushq	%rdx
000000000001c543	pushq	%rcx
000000000001c544	pushq	%r8
000000000001c546	pushq	%r9
000000000001c548	pushq	%r10
000000000001c54a	pushq	%r11
000000000001c54c	pushq	%r12
000000000001c54e	pushq	%r13
000000000001c550	pushq	%r14
000000000001c552	pushq	%r15
000000000001c554	subq	$0x10, %rsp
000000000001c558	movss	%xmm0, (%rsp)
000000000001c55d	subq	$0x10, %rsp
000000000001c561	movss	%xmm1, (%rsp)
000000000001c566	pushq	%rsi
000000000001c567	pushq	%rdi
000000000001c568	callq	__Z7getBasev ## getBase()
000000000001c56d	addq	$0xb830, %rax
000000000001c573	popq	%rdi
000000000001c574	popq	%rsi
000000000001c575	movss	(%rsp), %xmm1
000000000001c57a	addq	$0x10, %rsp
000000000001c57e	movss	(%rsp), %xmm0
000000000001c583	addq	$0x10, %rsp
000000000001c587	popq	%r15
000000000001c589	popq	%r14
000000000001c58b	popq	%r13
000000000001c58d	popq	%r12
000000000001c58f	popq	%r11
000000000001c591	popq	%r10
000000000001c593	popq	%r9
000000000001c595	popq	%r8
000000000001c597	popq	%rcx
000000000001c598	popq	%rdx
000000000001c599	popq	%rsi
000000000001c59a	popq	%rdi
000000000001c59b	popq	%rbx
000000000001c59c	popq	%rbp
000000000001c59d	jmpq	*%rax
__ZN8EditorUI18getSelectedObjectsEv:
000000000001c59f	pushq	%rbp
000000000001c5a0	movq	%rsp, %rbp
000000000001c5a3	pushq	%rbx
000000000001c5a4	pushq	%rdi
000000000001c5a5	pushq	%rsi
000000000001c5a6	pushq	%rdx
000000000001c5a7	pushq	%rcx
000000000001c5a8	pushq	%r8
000000000001c5aa	pushq	%r9
000000000001c5ac	pushq	%r10
000000000001c5ae	pushq	%r11
000000000001c5b0	pushq	%r12
000000000001c5b2	pushq	%r13
000000000001c5b4	pushq	%r14
000000000001c5b6	pushq	%r15
000000000001c5b8	subq	$0x10, %rsp
000000000001c5bc	movss	%xmm0, (%rsp)
000000000001c5c1	subq	$0x10, %rsp
000000000001c5c5	movss	%xmm1, (%rsp)
000000000001c5ca	pushq	%rsi
000000000001c5cb	pushq	%rdi
000000000001c5cc	callq	__Z7getBasev ## getBase()
000000000001c5d1	addq	$0x23f30, %rax
000000000001c5d7	popq	%rdi
000000000001c5d8	popq	%rsi
000000000001c5d9	movss	(%rsp), %xmm1
000000000001c5de	addq	$0x10, %rsp
000000000001c5e2	movss	(%rsp), %xmm0
000000000001c5e7	addq	$0x10, %rsp
000000000001c5eb	popq	%r15
000000000001c5ed	popq	%r14
000000000001c5ef	popq	%r13
000000000001c5f1	popq	%r12
000000000001c5f3	popq	%r11
000000000001c5f5	popq	%r10
000000000001c5f7	popq	%r9
000000000001c5f9	popq	%r8
000000000001c5fb	popq	%rcx
000000000001c5fc	popq	%rdx
000000000001c5fd	popq	%rsi
000000000001c5fe	popq	%rdi
000000000001c5ff	popq	%rbx
000000000001c600	popq	%rbp
000000000001c601	jmpq	*%rax
__ZN8EditorUI12getCreateBtnEii:
000000000001c603	pushq	%rbp
000000000001c604	movq	%rsp, %rbp
000000000001c607	pushq	%rbx
000000000001c608	pushq	%rdi
000000000001c609	pushq	%rsi
000000000001c60a	pushq	%rdx
000000000001c60b	pushq	%rcx
000000000001c60c	pushq	%r8
000000000001c60e	pushq	%r9
000000000001c610	pushq	%r10
000000000001c612	pushq	%r11
000000000001c614	pushq	%r12
000000000001c616	pushq	%r13
000000000001c618	pushq	%r14
000000000001c61a	pushq	%r15
000000000001c61c	subq	$0x10, %rsp
000000000001c620	movss	%xmm0, (%rsp)
000000000001c625	subq	$0x10, %rsp
000000000001c629	movss	%xmm1, (%rsp)
000000000001c62e	pushq	%rsi
000000000001c62f	pushq	%rdi
000000000001c630	callq	__Z7getBasev ## getBase()
000000000001c635	addq	$0x1f6c0, %rax
000000000001c63b	popq	%rdi
000000000001c63c	popq	%rsi
000000000001c63d	movss	(%rsp), %xmm1
000000000001c642	addq	$0x10, %rsp
000000000001c646	movss	(%rsp), %xmm0
000000000001c64b	addq	$0x10, %rsp
000000000001c64f	popq	%r15
000000000001c651	popq	%r14
000000000001c653	popq	%r13
000000000001c655	popq	%r12
000000000001c657	popq	%r11
000000000001c659	popq	%r10
000000000001c65b	popq	%r9
000000000001c65d	popq	%r8
000000000001c65f	popq	%rcx
000000000001c660	popq	%rdx
000000000001c661	popq	%rsi
000000000001c662	popq	%rdi
000000000001c663	popq	%rbx
000000000001c664	popq	%rbp
000000000001c665	jmpq	*%rax
__ZN13EditButtonBar13loadFromItemsEPN7cocos2d7CCArrayEiib:
000000000001c667	pushq	%rbp
000000000001c668	movq	%rsp, %rbp
000000000001c66b	pushq	%rbx
000000000001c66c	pushq	%rdi
000000000001c66d	pushq	%rsi
000000000001c66e	pushq	%rdx
000000000001c66f	pushq	%rcx
000000000001c670	pushq	%r8
000000000001c672	pushq	%r9
000000000001c674	pushq	%r10
000000000001c676	pushq	%r11
000000000001c678	pushq	%r12
000000000001c67a	pushq	%r13
000000000001c67c	pushq	%r14
000000000001c67e	pushq	%r15
000000000001c680	subq	$0x10, %rsp
000000000001c684	movss	%xmm0, (%rsp)
000000000001c689	subq	$0x10, %rsp
000000000001c68d	movss	%xmm1, (%rsp)
000000000001c692	pushq	%rsi
000000000001c693	pushq	%rdi
000000000001c694	callq	__Z7getBasev ## getBase()
000000000001c699	addq	$0x351010, %rax
000000000001c69f	popq	%rdi
000000000001c6a0	popq	%rsi
000000000001c6a1	movss	(%rsp), %xmm1
000000000001c6a6	addq	$0x10, %rsp
000000000001c6aa	movss	(%rsp), %xmm0
000000000001c6af	addq	$0x10, %rsp
000000000001c6b3	popq	%r15
000000000001c6b5	popq	%r14
000000000001c6b7	popq	%r13
000000000001c6b9	popq	%r12
000000000001c6bb	popq	%r11
000000000001c6bd	popq	%r10
000000000001c6bf	popq	%r9
000000000001c6c1	popq	%r8
000000000001c6c3	popq	%rcx
000000000001c6c4	popq	%rdx
000000000001c6c5	popq	%rsi
000000000001c6c6	popq	%rdi
000000000001c6c7	popq	%rbx
000000000001c6c8	popq	%rbp
000000000001c6c9	jmpq	*%rax
__ZN9InfoLayer17onRefreshCommentsEPN7cocos2d8CCObjectE:
000000000001c6cb	pushq	%rbp
000000000001c6cc	movq	%rsp, %rbp
000000000001c6cf	pushq	%rbx
000000000001c6d0	pushq	%rdi
000000000001c6d1	pushq	%rsi
000000000001c6d2	pushq	%rdx
000000000001c6d3	pushq	%rcx
000000000001c6d4	pushq	%r8
000000000001c6d6	pushq	%r9
000000000001c6d8	pushq	%r10
000000000001c6da	pushq	%r11
000000000001c6dc	pushq	%r12
000000000001c6de	pushq	%r13
000000000001c6e0	pushq	%r14
000000000001c6e2	pushq	%r15
000000000001c6e4	subq	$0x10, %rsp
000000000001c6e8	movss	%xmm0, (%rsp)
000000000001c6ed	subq	$0x10, %rsp
000000000001c6f1	movss	%xmm1, (%rsp)
000000000001c6f6	pushq	%rsi
000000000001c6f7	pushq	%rdi
000000000001c6f8	callq	__Z7getBasev ## getBase()
000000000001c6fd	addq	$0x459b60, %rax
000000000001c703	popq	%rdi
000000000001c704	popq	%rsi
000000000001c705	movss	(%rsp), %xmm1
000000000001c70a	addq	$0x10, %rsp
000000000001c70e	movss	(%rsp), %xmm0
000000000001c713	addq	$0x10, %rsp
000000000001c717	popq	%r15
000000000001c719	popq	%r14
000000000001c71b	popq	%r13
000000000001c71d	popq	%r12
000000000001c71f	popq	%r11
000000000001c721	popq	%r10
000000000001c723	popq	%r9
000000000001c725	popq	%r8
000000000001c727	popq	%rcx
000000000001c728	popq	%rdx
000000000001c729	popq	%rsi
000000000001c72a	popq	%rdi
000000000001c72b	popq	%rbx
000000000001c72c	popq	%rbp
000000000001c72d	jmpq	*%rax
__ZN9InfoLayer8loadPageEib:
000000000001c72f	pushq	%rbp
000000000001c730	movq	%rsp, %rbp
000000000001c733	pushq	%rbx
000000000001c734	pushq	%rdi
000000000001c735	pushq	%rsi
000000000001c736	pushq	%rdx
000000000001c737	pushq	%rcx
000000000001c738	pushq	%r8
000000000001c73a	pushq	%r9
000000000001c73c	pushq	%r10
000000000001c73e	pushq	%r11
000000000001c740	pushq	%r12
000000000001c742	pushq	%r13
000000000001c744	pushq	%r14
000000000001c746	pushq	%r15
000000000001c748	subq	$0x10, %rsp
000000000001c74c	movss	%xmm0, (%rsp)
000000000001c751	subq	$0x10, %rsp
000000000001c755	movss	%xmm1, (%rsp)
000000000001c75a	pushq	%rsi
000000000001c75b	pushq	%rdi
000000000001c75c	callq	__Z7getBasev ## getBase()
000000000001c761	addq	$0x458fb0, %rax
000000000001c767	popq	%rdi
000000000001c768	popq	%rsi
000000000001c769	movss	(%rsp), %xmm1
000000000001c76e	addq	$0x10, %rsp
000000000001c772	movss	(%rsp), %xmm0
000000000001c777	addq	$0x10, %rsp
000000000001c77b	popq	%r15
000000000001c77d	popq	%r14
000000000001c77f	popq	%r13
000000000001c781	popq	%r12
000000000001c783	popq	%r11
000000000001c785	popq	%r10
000000000001c787	popq	%r9
000000000001c789	popq	%r8
000000000001c78b	popq	%rcx
000000000001c78c	popq	%rdx
000000000001c78d	popq	%rsi
000000000001c78e	popq	%rdi
000000000001c78f	popq	%rbx
000000000001c790	popq	%rbp
000000000001c791	jmpq	*%rax
__ZN9MenuLayer14keyBackClickedEv:
000000000001c793	pushq	%rbp
000000000001c794	movq	%rsp, %rbp
000000000001c797	pushq	%rbx
000000000001c798	pushq	%rdi
000000000001c799	pushq	%rsi
000000000001c79a	pushq	%rdx
000000000001c79b	pushq	%rcx
000000000001c79c	pushq	%r8
000000000001c79e	pushq	%r9
000000000001c7a0	pushq	%r10
000000000001c7a2	pushq	%r11
000000000001c7a4	pushq	%r12
000000000001c7a6	pushq	%r13
000000000001c7a8	pushq	%r14
000000000001c7aa	pushq	%r15
000000000001c7ac	subq	$0x10, %rsp
000000000001c7b0	movss	%xmm0, (%rsp)
000000000001c7b5	subq	$0x10, %rsp
000000000001c7b9	movss	%xmm1, (%rsp)
000000000001c7be	pushq	%rsi
000000000001c7bf	pushq	%rdi
000000000001c7c0	callq	__Z7getBasev ## getBase()
000000000001c7c5	addq	$0x1d3170, %rax
000000000001c7cb	popq	%rdi
000000000001c7cc	popq	%rsi
000000000001c7cd	movss	(%rsp), %xmm1
000000000001c7d2	addq	$0x10, %rsp
000000000001c7d6	movss	(%rsp), %xmm0
000000000001c7db	addq	$0x10, %rsp
000000000001c7df	popq	%r15
000000000001c7e1	popq	%r14
000000000001c7e3	popq	%r13
000000000001c7e5	popq	%r12
000000000001c7e7	popq	%r11
000000000001c7e9	popq	%r10
000000000001c7eb	popq	%r9
000000000001c7ed	popq	%r8
000000000001c7ef	popq	%rcx
000000000001c7f0	popq	%rdx
000000000001c7f1	popq	%rsi
000000000001c7f2	popq	%rdi
000000000001c7f3	popq	%rbx
000000000001c7f4	popq	%rbp
000000000001c7f5	jmpq	*%rax
__ZN9MenuLayer6onQuitEPN7cocos2d8CCObjectE:
000000000001c7f7	pushq	%rbp
000000000001c7f8	movq	%rsp, %rbp
000000000001c7fb	pushq	%rbx
000000000001c7fc	pushq	%rdi
000000000001c7fd	pushq	%rsi
000000000001c7fe	pushq	%rdx
000000000001c7ff	pushq	%rcx
000000000001c800	pushq	%r8
000000000001c802	pushq	%r9
000000000001c804	pushq	%r10
000000000001c806	pushq	%r11
000000000001c808	pushq	%r12
000000000001c80a	pushq	%r13
000000000001c80c	pushq	%r14
000000000001c80e	pushq	%r15
000000000001c810	subq	$0x10, %rsp
000000000001c814	movss	%xmm0, (%rsp)
000000000001c819	subq	$0x10, %rsp
000000000001c81d	movss	%xmm1, (%rsp)
000000000001c822	pushq	%rsi
000000000001c823	pushq	%rdi
000000000001c824	callq	__Z7getBasev ## getBase()
000000000001c829	addq	$0x1d2b40, %rax
000000000001c82f	popq	%rdi
000000000001c830	popq	%rsi
000000000001c831	movss	(%rsp), %xmm1
000000000001c836	addq	$0x10, %rsp
000000000001c83a	movss	(%rsp), %xmm0
000000000001c83f	addq	$0x10, %rsp
000000000001c843	popq	%r15
000000000001c845	popq	%r14
000000000001c847	popq	%r13
000000000001c849	popq	%r12
000000000001c84b	popq	%r11
000000000001c84d	popq	%r10
000000000001c84f	popq	%r9
000000000001c851	popq	%r8
000000000001c853	popq	%rcx
000000000001c854	popq	%rdx
000000000001c855	popq	%rsi
000000000001c856	popq	%rdi
000000000001c857	popq	%rbx
000000000001c858	popq	%rbp
000000000001c859	jmpq	*%rax
__ZNK7cocos2d6CCNode14getContentSizeEv:
000000000001c85b	pushq	%rbp
000000000001c85c	movq	%rsp, %rbp
000000000001c85f	pushq	%rbx
000000000001c860	pushq	%rdi
000000000001c861	pushq	%rsi
000000000001c862	pushq	%rdx
000000000001c863	pushq	%rcx
000000000001c864	pushq	%r8
000000000001c866	pushq	%r9
000000000001c868	pushq	%r10
000000000001c86a	pushq	%r11
000000000001c86c	pushq	%r12
000000000001c86e	pushq	%r13
000000000001c870	pushq	%r14
000000000001c872	pushq	%r15
000000000001c874	subq	$0x10, %rsp
000000000001c878	movss	%xmm0, (%rsp)
000000000001c87d	subq	$0x10, %rsp
000000000001c881	movss	%xmm1, (%rsp)
000000000001c886	pushq	%rsi
000000000001c887	pushq	%rdi
000000000001c888	callq	__Z7getBasev ## getBase()
000000000001c88d	addq	$0x122e00, %rax
000000000001c893	popq	%rdi
000000000001c894	popq	%rsi
000000000001c895	movss	(%rsp), %xmm1
000000000001c89a	addq	$0x10, %rsp
000000000001c89e	movss	(%rsp), %xmm0
000000000001c8a3	addq	$0x10, %rsp
000000000001c8a7	popq	%r15
000000000001c8a9	popq	%r14
000000000001c8ab	popq	%r13
000000000001c8ad	popq	%r12
000000000001c8af	popq	%r11
000000000001c8b1	popq	%r10
000000000001c8b3	popq	%r9
000000000001c8b5	popq	%r8
000000000001c8b7	popq	%rcx
000000000001c8b8	popq	%rdx
000000000001c8b9	popq	%rsi
000000000001c8ba	popq	%rdi
000000000001c8bb	popq	%rbx
000000000001c8bc	popq	%rbp
000000000001c8bd	jmpq	*%rax
__ZNK7cocos2d6CCNode16getChildrenCountEv:
000000000001c8bf	pushq	%rbp
000000000001c8c0	movq	%rsp, %rbp
000000000001c8c3	pushq	%rbx
000000000001c8c4	pushq	%rdi
000000000001c8c5	pushq	%rsi
000000000001c8c6	pushq	%rdx
000000000001c8c7	pushq	%rcx
000000000001c8c8	pushq	%r8
000000000001c8ca	pushq	%r9
000000000001c8cc	pushq	%r10
000000000001c8ce	pushq	%r11
000000000001c8d0	pushq	%r12
000000000001c8d2	pushq	%r13
000000000001c8d4	pushq	%r14
000000000001c8d6	pushq	%r15
000000000001c8d8	subq	$0x10, %rsp
000000000001c8dc	movss	%xmm0, (%rsp)
000000000001c8e1	subq	$0x10, %rsp
000000000001c8e5	movss	%xmm1, (%rsp)
000000000001c8ea	pushq	%rsi
000000000001c8eb	pushq	%rdi
000000000001c8ec	callq	__Z7getBasev ## getBase()
000000000001c8f1	addq	$0x122c90, %rax
000000000001c8f7	popq	%rdi
000000000001c8f8	popq	%rsi
000000000001c8f9	movss	(%rsp), %xmm1
000000000001c8fe	addq	$0x10, %rsp
000000000001c902	movss	(%rsp), %xmm0
000000000001c907	addq	$0x10, %rsp
000000000001c90b	popq	%r15
000000000001c90d	popq	%r14
000000000001c90f	popq	%r13
000000000001c911	popq	%r12
000000000001c913	popq	%r11
000000000001c915	popq	%r10
000000000001c917	popq	%r9
000000000001c919	popq	%r8
000000000001c91b	popq	%rcx
000000000001c91c	popq	%rdx
000000000001c91d	popq	%rsi
000000000001c91e	popq	%rdi
000000000001c91f	popq	%rbx
000000000001c920	popq	%rbp
000000000001c921	jmpq	*%rax
__ZNK7cocos2d7CCArray5countEv:
000000000001c923	pushq	%rbp
000000000001c924	movq	%rsp, %rbp
000000000001c927	pushq	%rbx
000000000001c928	pushq	%rdi
000000000001c929	pushq	%rsi
000000000001c92a	pushq	%rdx
000000000001c92b	pushq	%rcx
000000000001c92c	pushq	%r8
000000000001c92e	pushq	%r9
000000000001c930	pushq	%r10
000000000001c932	pushq	%r11
000000000001c934	pushq	%r12
000000000001c936	pushq	%r13
000000000001c938	pushq	%r14
000000000001c93a	pushq	%r15
000000000001c93c	subq	$0x10, %rsp
000000000001c940	movss	%xmm0, (%rsp)
000000000001c945	subq	$0x10, %rsp
000000000001c949	movss	%xmm1, (%rsp)
000000000001c94e	pushq	%rsi
000000000001c94f	pushq	%rdi
000000000001c950	callq	__Z7getBasev ## getBase()
000000000001c955	addq	$0x41a2f0, %rax
000000000001c95b	popq	%rdi
000000000001c95c	popq	%rsi
000000000001c95d	movss	(%rsp), %xmm1
000000000001c962	addq	$0x10, %rsp
000000000001c966	movss	(%rsp), %xmm0
000000000001c96b	addq	$0x10, %rsp
000000000001c96f	popq	%r15
000000000001c971	popq	%r14
000000000001c973	popq	%r13
000000000001c975	popq	%r12
000000000001c977	popq	%r11
000000000001c979	popq	%r10
000000000001c97b	popq	%r9
000000000001c97d	popq	%r8
000000000001c97f	popq	%rcx
000000000001c980	popq	%rdx
000000000001c981	popq	%rsi
000000000001c982	popq	%rdi
000000000001c983	popq	%rbx
000000000001c984	popq	%rbp
000000000001c985	jmpq	*%rax
__ZNK7cocos2d7CCPointplERKS0_:
000000000001c987	pushq	%rbp
000000000001c988	movq	%rsp, %rbp
000000000001c98b	pushq	%rbx
000000000001c98c	pushq	%rdi
000000000001c98d	pushq	%rsi
000000000001c98e	pushq	%rdx
000000000001c98f	pushq	%rcx
000000000001c990	pushq	%r8
000000000001c992	pushq	%r9
000000000001c994	pushq	%r10
000000000001c996	pushq	%r11
000000000001c998	pushq	%r12
000000000001c99a	pushq	%r13
000000000001c99c	pushq	%r14
000000000001c99e	pushq	%r15
000000000001c9a0	subq	$0x10, %rsp
000000000001c9a4	movss	%xmm0, (%rsp)
000000000001c9a9	subq	$0x10, %rsp
000000000001c9ad	movss	%xmm1, (%rsp)
000000000001c9b2	pushq	%rsi
000000000001c9b3	pushq	%rdi
000000000001c9b4	callq	__Z7getBasev ## getBase()
000000000001c9b9	addq	$0x1370f0, %rax
000000000001c9bf	popq	%rdi
000000000001c9c0	popq	%rsi
000000000001c9c1	movss	(%rsp), %xmm1
000000000001c9c6	addq	$0x10, %rsp
000000000001c9ca	movss	(%rsp), %xmm0
000000000001c9cf	addq	$0x10, %rsp
000000000001c9d3	popq	%r15
000000000001c9d5	popq	%r14
000000000001c9d7	popq	%r13
000000000001c9d9	popq	%r12
000000000001c9db	popq	%r11
000000000001c9dd	popq	%r10
000000000001c9df	popq	%r9
000000000001c9e1	popq	%r8
000000000001c9e3	popq	%rcx
000000000001c9e4	popq	%rdx
000000000001c9e5	popq	%rsi
000000000001c9e6	popq	%rdi
000000000001c9e7	popq	%rbx
000000000001c9e8	popq	%rbp
000000000001c9e9	jmpq	*%rax
__ZNK7cocos2d7CCPointmiERKS0_:
000000000001c9eb	pushq	%rbp
000000000001c9ec	movq	%rsp, %rbp
000000000001c9ef	pushq	%rbx
000000000001c9f0	pushq	%rdi
000000000001c9f1	pushq	%rsi
000000000001c9f2	pushq	%rdx
000000000001c9f3	pushq	%rcx
000000000001c9f4	pushq	%r8
000000000001c9f6	pushq	%r9
000000000001c9f8	pushq	%r10
000000000001c9fa	pushq	%r11
000000000001c9fc	pushq	%r12
000000000001c9fe	pushq	%r13
000000000001ca00	pushq	%r14
000000000001ca02	pushq	%r15
000000000001ca04	subq	$0x10, %rsp
000000000001ca08	movss	%xmm0, (%rsp)
000000000001ca0d	subq	$0x10, %rsp
000000000001ca11	movss	%xmm1, (%rsp)
000000000001ca16	pushq	%rsi
000000000001ca17	pushq	%rdi
000000000001ca18	callq	__Z7getBasev ## getBase()
000000000001ca1d	addq	$0x137120, %rax
000000000001ca23	popq	%rdi
000000000001ca24	popq	%rsi
000000000001ca25	movss	(%rsp), %xmm1
000000000001ca2a	addq	$0x10, %rsp
000000000001ca2e	movss	(%rsp), %xmm0
000000000001ca33	addq	$0x10, %rsp
000000000001ca37	popq	%r15
000000000001ca39	popq	%r14
000000000001ca3b	popq	%r13
000000000001ca3d	popq	%r12
000000000001ca3f	popq	%r11
000000000001ca41	popq	%r10
000000000001ca43	popq	%r9
000000000001ca45	popq	%r8
000000000001ca47	popq	%rcx
000000000001ca48	popq	%rdx
000000000001ca49	popq	%rsi
000000000001ca4a	popq	%rdi
000000000001ca4b	popq	%rbx
000000000001ca4c	popq	%rbp
000000000001ca4d	jmpq	*%rax
__ZNK7cocos2d8CCObject6getTagEv:
000000000001ca4f	pushq	%rbp
000000000001ca50	movq	%rsp, %rbp
000000000001ca53	pushq	%rbx
000000000001ca54	pushq	%rdi
000000000001ca55	pushq	%rsi
000000000001ca56	pushq	%rdx
000000000001ca57	pushq	%rcx
000000000001ca58	pushq	%r8
000000000001ca5a	pushq	%r9
000000000001ca5c	pushq	%r10
000000000001ca5e	pushq	%r11
000000000001ca60	pushq	%r12
000000000001ca62	pushq	%r13
000000000001ca64	pushq	%r14
000000000001ca66	pushq	%r15
000000000001ca68	subq	$0x10, %rsp
000000000001ca6c	movss	%xmm0, (%rsp)
000000000001ca71	subq	$0x10, %rsp
000000000001ca75	movss	%xmm1, (%rsp)
000000000001ca7a	pushq	%rsi
000000000001ca7b	pushq	%rdi
000000000001ca7c	callq	__Z7getBasev ## getBase()
000000000001ca81	addq	$0x250f50, %rax
000000000001ca87	popq	%rdi
000000000001ca88	popq	%rsi
000000000001ca89	movss	(%rsp), %xmm1
000000000001ca8e	addq	$0x10, %rsp
000000000001ca92	movss	(%rsp), %xmm0
000000000001ca97	addq	$0x10, %rsp
000000000001ca9b	popq	%r15
000000000001ca9d	popq	%r14
000000000001ca9f	popq	%r13
000000000001caa1	popq	%r12
000000000001caa3	popq	%r11
000000000001caa5	popq	%r10
000000000001caa7	popq	%r9
000000000001caa9	popq	%r8
000000000001caab	popq	%rcx
000000000001caac	popq	%rdx
000000000001caad	popq	%rsi
000000000001caae	popq	%rdi
000000000001caaf	popq	%rbx
000000000001cab0	popq	%rbp
000000000001cab1	jmpq	*%rax
__ZNK7cocos2d8CCString10getCStringEv:
000000000001cab3	pushq	%rbp
000000000001cab4	movq	%rsp, %rbp
000000000001cab7	pushq	%rbx
000000000001cab8	pushq	%rdi
000000000001cab9	pushq	%rsi
000000000001caba	pushq	%rdx
000000000001cabb	pushq	%rcx
000000000001cabc	pushq	%r8
000000000001cabe	pushq	%r9
000000000001cac0	pushq	%r10
000000000001cac2	pushq	%r11
000000000001cac4	pushq	%r12
000000000001cac6	pushq	%r13
000000000001cac8	pushq	%r14
000000000001caca	pushq	%r15
000000000001cacc	subq	$0x10, %rsp
000000000001cad0	movss	%xmm0, (%rsp)
000000000001cad5	subq	$0x10, %rsp
000000000001cad9	movss	%xmm1, (%rsp)
000000000001cade	pushq	%rsi
000000000001cadf	pushq	%rdi
000000000001cae0	callq	__Z7getBasev ## getBase()
000000000001cae5	addq	$0x44c470, %rax
000000000001caeb	popq	%rdi
000000000001caec	popq	%rsi
000000000001caed	movss	(%rsp), %xmm1
000000000001caf2	addq	$0x10, %rsp
000000000001caf6	movss	(%rsp), %xmm0
000000000001cafb	addq	$0x10, %rsp
000000000001caff	popq	%r15
000000000001cb01	popq	%r14
000000000001cb03	popq	%r13
000000000001cb05	popq	%r12
000000000001cb07	popq	%r11
000000000001cb09	popq	%r10
000000000001cb0b	popq	%r9
000000000001cb0d	popq	%r8
000000000001cb0f	popq	%rcx
000000000001cb10	popq	%rdx
000000000001cb11	popq	%rsi
000000000001cb12	popq	%rdi
000000000001cb13	popq	%rbx
000000000001cb14	popq	%rbp
000000000001cb15	jmpq	*%rax
__ZN9PlayLayer6createEP11GJGameLevel:
000000000001cb17	pushq	%rbp
000000000001cb18	movq	%rsp, %rbp
000000000001cb1b	pushq	%rbx
000000000001cb1c	pushq	%rdi
000000000001cb1d	pushq	%rsi
000000000001cb1e	pushq	%rdx
000000000001cb1f	pushq	%rcx
000000000001cb20	pushq	%r8
000000000001cb22	pushq	%r9
000000000001cb24	pushq	%r10
000000000001cb26	pushq	%r11
000000000001cb28	pushq	%r12
000000000001cb2a	pushq	%r13
000000000001cb2c	pushq	%r14
000000000001cb2e	pushq	%r15
000000000001cb30	subq	$0x10, %rsp
000000000001cb34	movss	%xmm0, (%rsp)
000000000001cb39	subq	$0x10, %rsp
000000000001cb3d	movss	%xmm1, (%rsp)
000000000001cb42	pushq	%rsi
000000000001cb43	pushq	%rdi
000000000001cb44	callq	__Z7getBasev ## getBase()
000000000001cb49	addq	$0x6b590, %rax
000000000001cb4f	popq	%rdi
000000000001cb50	popq	%rsi
000000000001cb51	movss	(%rsp), %xmm1
000000000001cb56	addq	$0x10, %rsp
000000000001cb5a	movss	(%rsp), %xmm0
000000000001cb5f	addq	$0x10, %rsp
000000000001cb63	popq	%r15
000000000001cb65	popq	%r14
000000000001cb67	popq	%r13
000000000001cb69	popq	%r12
000000000001cb6b	popq	%r11
000000000001cb6d	popq	%r10
000000000001cb6f	popq	%r9
000000000001cb71	popq	%r8
000000000001cb73	popq	%rcx
000000000001cb74	popq	%rdx
000000000001cb75	popq	%rsi
000000000001cb76	popq	%rdi
000000000001cb77	popq	%rbx
000000000001cb78	popq	%rbp
000000000001cb79	jmpq	*%rax
__ZN9PlayLayer13switchToSceneEP11GJGameLevel:
000000000001cb7b	pushq	%rbp
000000000001cb7c	movq	%rsp, %rbp
000000000001cb7f	pushq	%rbx
000000000001cb80	pushq	%rdi
000000000001cb81	pushq	%rsi
000000000001cb82	pushq	%rdx
000000000001cb83	pushq	%rcx
000000000001cb84	pushq	%r8
000000000001cb86	pushq	%r9
000000000001cb88	pushq	%r10
000000000001cb8a	pushq	%r11
000000000001cb8c	pushq	%r12
000000000001cb8e	pushq	%r13
000000000001cb90	pushq	%r14
000000000001cb92	pushq	%r15
000000000001cb94	subq	$0x10, %rsp
000000000001cb98	movss	%xmm0, (%rsp)
000000000001cb9d	subq	$0x10, %rsp
000000000001cba1	movss	%xmm1, (%rsp)
000000000001cba6	pushq	%rsi
000000000001cba7	pushq	%rdi
000000000001cba8	callq	__Z7getBasev ## getBase()
000000000001cbad	addq	$0xe5d50, %rax
000000000001cbb3	popq	%rdi
000000000001cbb4	popq	%rsi
000000000001cbb5	movss	(%rsp), %xmm1
000000000001cbba	addq	$0x10, %rsp
000000000001cbbe	movss	(%rsp), %xmm0
000000000001cbc3	addq	$0x10, %rsp
000000000001cbc7	popq	%r15
000000000001cbc9	popq	%r14
000000000001cbcb	popq	%r13
000000000001cbcd	popq	%r12
000000000001cbcf	popq	%r11
000000000001cbd1	popq	%r10
000000000001cbd3	popq	%r9
000000000001cbd5	popq	%r8
000000000001cbd7	popq	%rcx
000000000001cbd8	popq	%rdx
000000000001cbd9	popq	%rsi
000000000001cbda	popq	%rdi
000000000001cbdb	popq	%rbx
000000000001cbdc	popq	%rbp
000000000001cbdd	jmpq	*%rax
__ZN11GJGameLevel6createEv:
000000000001cbdf	pushq	%rbp
000000000001cbe0	movq	%rsp, %rbp
000000000001cbe3	pushq	%rbx
000000000001cbe4	pushq	%rdi
000000000001cbe5	pushq	%rsi
000000000001cbe6	pushq	%rdx
000000000001cbe7	pushq	%rcx
000000000001cbe8	pushq	%r8
000000000001cbea	pushq	%r9
000000000001cbec	pushq	%r10
000000000001cbee	pushq	%r11
000000000001cbf0	pushq	%r12
000000000001cbf2	pushq	%r13
000000000001cbf4	pushq	%r14
000000000001cbf6	pushq	%r15
000000000001cbf8	subq	$0x10, %rsp
000000000001cbfc	movss	%xmm0, (%rsp)
000000000001cc01	subq	$0x10, %rsp
000000000001cc05	movss	%xmm1, (%rsp)
000000000001cc0a	pushq	%rsi
000000000001cc0b	pushq	%rdi
000000000001cc0c	callq	__Z7getBasev ## getBase()
000000000001cc11	addq	$0x2b83e0, %rax
000000000001cc17	popq	%rdi
000000000001cc18	popq	%rsi
000000000001cc19	movss	(%rsp), %xmm1
000000000001cc1e	addq	$0x10, %rsp
000000000001cc22	movss	(%rsp), %xmm0
000000000001cc27	addq	$0x10, %rsp
000000000001cc2b	popq	%r15
000000000001cc2d	popq	%r14
000000000001cc2f	popq	%r13
000000000001cc31	popq	%r12
000000000001cc33	popq	%r11
000000000001cc35	popq	%r10
000000000001cc37	popq	%r9
000000000001cc39	popq	%r8
000000000001cc3b	popq	%rcx
000000000001cc3c	popq	%rdx
000000000001cc3d	popq	%rsi
000000000001cc3e	popq	%rdi
000000000001cc3f	popq	%rbx
000000000001cc40	popq	%rbp
000000000001cc41	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchBeganEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001cc43	pushq	%rbp
000000000001cc44	movq	%rsp, %rbp
000000000001cc47	pushq	%rbx
000000000001cc48	pushq	%rdi
000000000001cc49	pushq	%rsi
000000000001cc4a	pushq	%rdx
000000000001cc4b	pushq	%rcx
000000000001cc4c	pushq	%r8
000000000001cc4e	pushq	%r9
000000000001cc50	pushq	%r10
000000000001cc52	pushq	%r11
000000000001cc54	pushq	%r12
000000000001cc56	pushq	%r13
000000000001cc58	pushq	%r14
000000000001cc5a	pushq	%r15
000000000001cc5c	subq	$0x10, %rsp
000000000001cc60	movss	%xmm0, (%rsp)
000000000001cc65	subq	$0x10, %rsp
000000000001cc69	movss	%xmm1, (%rsp)
000000000001cc6e	pushq	%rsi
000000000001cc6f	pushq	%rdi
000000000001cc70	callq	__Z7getBasev ## getBase()
000000000001cc75	addq	$0x273510, %rax
000000000001cc7b	popq	%rdi
000000000001cc7c	popq	%rsi
000000000001cc7d	movss	(%rsp), %xmm1
000000000001cc82	addq	$0x10, %rsp
000000000001cc86	movss	(%rsp), %xmm0
000000000001cc8b	addq	$0x10, %rsp
000000000001cc8f	popq	%r15
000000000001cc91	popq	%r14
000000000001cc93	popq	%r13
000000000001cc95	popq	%r12
000000000001cc97	popq	%r11
000000000001cc99	popq	%r10
000000000001cc9b	popq	%r9
000000000001cc9d	popq	%r8
000000000001cc9f	popq	%rcx
000000000001cca0	popq	%rdx
000000000001cca1	popq	%rsi
000000000001cca2	popq	%rdi
000000000001cca3	popq	%rbx
000000000001cca4	popq	%rbp
000000000001cca5	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchMovedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001cca7	pushq	%rbp
000000000001cca8	movq	%rsp, %rbp
000000000001ccab	pushq	%rbx
000000000001ccac	pushq	%rdi
000000000001ccad	pushq	%rsi
000000000001ccae	pushq	%rdx
000000000001ccaf	pushq	%rcx
000000000001ccb0	pushq	%r8
000000000001ccb2	pushq	%r9
000000000001ccb4	pushq	%r10
000000000001ccb6	pushq	%r11
000000000001ccb8	pushq	%r12
000000000001ccba	pushq	%r13
000000000001ccbc	pushq	%r14
000000000001ccbe	pushq	%r15
000000000001ccc0	subq	$0x10, %rsp
000000000001ccc4	movss	%xmm0, (%rsp)
000000000001ccc9	subq	$0x10, %rsp
000000000001cccd	movss	%xmm1, (%rsp)
000000000001ccd2	pushq	%rsi
000000000001ccd3	pushq	%rdi
000000000001ccd4	callq	__Z7getBasev ## getBase()
000000000001ccd9	addq	$0x273590, %rax
000000000001ccdf	popq	%rdi
000000000001cce0	popq	%rsi
000000000001cce1	movss	(%rsp), %xmm1
000000000001cce6	addq	$0x10, %rsp
000000000001ccea	movss	(%rsp), %xmm0
000000000001ccef	addq	$0x10, %rsp
000000000001ccf3	popq	%r15
000000000001ccf5	popq	%r14
000000000001ccf7	popq	%r13
000000000001ccf9	popq	%r12
000000000001ccfb	popq	%r11
000000000001ccfd	popq	%r10
000000000001ccff	popq	%r9
000000000001cd01	popq	%r8
000000000001cd03	popq	%rcx
000000000001cd04	popq	%rdx
000000000001cd05	popq	%rsi
000000000001cd06	popq	%rdi
000000000001cd07	popq	%rbx
000000000001cd08	popq	%rbp
000000000001cd09	jmpq	*%rax
__ZThn288_N12FLAlertLayer12ccTouchEndedEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001cd0b	pushq	%rbp
000000000001cd0c	movq	%rsp, %rbp
000000000001cd0f	pushq	%rbx
000000000001cd10	pushq	%rdi
000000000001cd11	pushq	%rsi
000000000001cd12	pushq	%rdx
000000000001cd13	pushq	%rcx
000000000001cd14	pushq	%r8
000000000001cd16	pushq	%r9
000000000001cd18	pushq	%r10
000000000001cd1a	pushq	%r11
000000000001cd1c	pushq	%r12
000000000001cd1e	pushq	%r13
000000000001cd20	pushq	%r14
000000000001cd22	pushq	%r15
000000000001cd24	subq	$0x10, %rsp
000000000001cd28	movss	%xmm0, (%rsp)
000000000001cd2d	subq	$0x10, %rsp
000000000001cd31	movss	%xmm1, (%rsp)
000000000001cd36	pushq	%rsi
000000000001cd37	pushq	%rdi
000000000001cd38	callq	__Z7getBasev ## getBase()
000000000001cd3d	addq	$0x273610, %rax
000000000001cd43	popq	%rdi
000000000001cd44	popq	%rsi
000000000001cd45	movss	(%rsp), %xmm1
000000000001cd4a	addq	$0x10, %rsp
000000000001cd4e	movss	(%rsp), %xmm0
000000000001cd53	addq	$0x10, %rsp
000000000001cd57	popq	%r15
000000000001cd59	popq	%r14
000000000001cd5b	popq	%r13
000000000001cd5d	popq	%r12
000000000001cd5f	popq	%r11
000000000001cd61	popq	%r10
000000000001cd63	popq	%r9
000000000001cd65	popq	%r8
000000000001cd67	popq	%rcx
000000000001cd68	popq	%rdx
000000000001cd69	popq	%rsi
000000000001cd6a	popq	%rdi
000000000001cd6b	popq	%rbx
000000000001cd6c	popq	%rbp
000000000001cd6d	jmpq	*%rax
__ZThn288_N12FLAlertLayer16ccTouchCancelledEPN7cocos2d7CCTouchEPNS0_7CCEventE:
000000000001cd6f	pushq	%rbp
000000000001cd70	movq	%rsp, %rbp
000000000001cd73	pushq	%rbx
000000000001cd74	pushq	%rdi
000000000001cd75	pushq	%rsi
000000000001cd76	pushq	%rdx
000000000001cd77	pushq	%rcx
000000000001cd78	pushq	%r8
000000000001cd7a	pushq	%r9
000000000001cd7c	pushq	%r10
000000000001cd7e	pushq	%r11
000000000001cd80	pushq	%r12
000000000001cd82	pushq	%r13
000000000001cd84	pushq	%r14
000000000001cd86	pushq	%r15
000000000001cd88	subq	$0x10, %rsp
000000000001cd8c	movss	%xmm0, (%rsp)
000000000001cd91	subq	$0x10, %rsp
000000000001cd95	movss	%xmm1, (%rsp)
000000000001cd9a	pushq	%rsi
000000000001cd9b	pushq	%rdi
000000000001cd9c	callq	__Z7getBasev ## getBase()
000000000001cda1	addq	$0x273690, %rax
000000000001cda7	popq	%rdi
000000000001cda8	popq	%rsi
000000000001cda9	movss	(%rsp), %xmm1
000000000001cdae	addq	$0x10, %rsp
000000000001cdb2	movss	(%rsp), %xmm0
000000000001cdb7	addq	$0x10, %rsp
000000000001cdbb	popq	%r15
000000000001cdbd	popq	%r14
000000000001cdbf	popq	%r13
000000000001cdc1	popq	%r12
000000000001cdc3	popq	%r11
000000000001cdc5	popq	%r10
000000000001cdc7	popq	%r9
000000000001cdc9	popq	%r8
000000000001cdcb	popq	%rcx
000000000001cdcc	popq	%rdx
000000000001cdcd	popq	%rsi
000000000001cdce	popq	%rdi
000000000001cdcf	popq	%rbx
000000000001cdd0	popq	%rbp
000000000001cdd1	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesBeganEPNS_5CCSetEPNS_7CCEventE:
000000000001cdd3	pushq	%rbp
000000000001cdd4	movq	%rsp, %rbp
000000000001cdd7	pushq	%rbx
000000000001cdd8	pushq	%rdi
000000000001cdd9	pushq	%rsi
000000000001cdda	pushq	%rdx
000000000001cddb	pushq	%rcx
000000000001cddc	pushq	%r8
000000000001cdde	pushq	%r9
000000000001cde0	pushq	%r10
000000000001cde2	pushq	%r11
000000000001cde4	pushq	%r12
000000000001cde6	pushq	%r13
000000000001cde8	pushq	%r14
000000000001cdea	pushq	%r15
000000000001cdec	subq	$0x10, %rsp
000000000001cdf0	movss	%xmm0, (%rsp)
000000000001cdf5	subq	$0x10, %rsp
000000000001cdf9	movss	%xmm1, (%rsp)
000000000001cdfe	pushq	%rsi
000000000001cdff	pushq	%rdi
000000000001ce00	callq	__Z7getBasev ## getBase()
000000000001ce05	addq	$0x273710, %rax
000000000001ce0b	popq	%rdi
000000000001ce0c	popq	%rsi
000000000001ce0d	movss	(%rsp), %xmm1
000000000001ce12	addq	$0x10, %rsp
000000000001ce16	movss	(%rsp), %xmm0
000000000001ce1b	addq	$0x10, %rsp
000000000001ce1f	popq	%r15
000000000001ce21	popq	%r14
000000000001ce23	popq	%r13
000000000001ce25	popq	%r12
000000000001ce27	popq	%r11
000000000001ce29	popq	%r10
000000000001ce2b	popq	%r9
000000000001ce2d	popq	%r8
000000000001ce2f	popq	%rcx
000000000001ce30	popq	%rdx
000000000001ce31	popq	%rsi
000000000001ce32	popq	%rdi
000000000001ce33	popq	%rbx
000000000001ce34	popq	%rbp
000000000001ce35	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesMovedEPNS_5CCSetEPNS_7CCEventE:
000000000001ce37	pushq	%rbp
000000000001ce38	movq	%rsp, %rbp
000000000001ce3b	pushq	%rbx
000000000001ce3c	pushq	%rdi
000000000001ce3d	pushq	%rsi
000000000001ce3e	pushq	%rdx
000000000001ce3f	pushq	%rcx
000000000001ce40	pushq	%r8
000000000001ce42	pushq	%r9
000000000001ce44	pushq	%r10
000000000001ce46	pushq	%r11
000000000001ce48	pushq	%r12
000000000001ce4a	pushq	%r13
000000000001ce4c	pushq	%r14
000000000001ce4e	pushq	%r15
000000000001ce50	subq	$0x10, %rsp
000000000001ce54	movss	%xmm0, (%rsp)
000000000001ce59	subq	$0x10, %rsp
000000000001ce5d	movss	%xmm1, (%rsp)
000000000001ce62	pushq	%rsi
000000000001ce63	pushq	%rdi
000000000001ce64	callq	__Z7getBasev ## getBase()
000000000001ce69	addq	$0x273790, %rax
000000000001ce6f	popq	%rdi
000000000001ce70	popq	%rsi
000000000001ce71	movss	(%rsp), %xmm1
000000000001ce76	addq	$0x10, %rsp
000000000001ce7a	movss	(%rsp), %xmm0
000000000001ce7f	addq	$0x10, %rsp
000000000001ce83	popq	%r15
000000000001ce85	popq	%r14
000000000001ce87	popq	%r13
000000000001ce89	popq	%r12
000000000001ce8b	popq	%r11
000000000001ce8d	popq	%r10
000000000001ce8f	popq	%r9
000000000001ce91	popq	%r8
000000000001ce93	popq	%rcx
000000000001ce94	popq	%rdx
000000000001ce95	popq	%rsi
000000000001ce96	popq	%rdi
000000000001ce97	popq	%rbx
000000000001ce98	popq	%rbp
000000000001ce99	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer14ccTouchesEndedEPNS_5CCSetEPNS_7CCEventE:
000000000001ce9b	pushq	%rbp
000000000001ce9c	movq	%rsp, %rbp
000000000001ce9f	pushq	%rbx
000000000001cea0	pushq	%rdi
000000000001cea1	pushq	%rsi
000000000001cea2	pushq	%rdx
000000000001cea3	pushq	%rcx
000000000001cea4	pushq	%r8
000000000001cea6	pushq	%r9
000000000001cea8	pushq	%r10
000000000001ceaa	pushq	%r11
000000000001ceac	pushq	%r12
000000000001ceae	pushq	%r13
000000000001ceb0	pushq	%r14
000000000001ceb2	pushq	%r15
000000000001ceb4	subq	$0x10, %rsp
000000000001ceb8	movss	%xmm0, (%rsp)
000000000001cebd	subq	$0x10, %rsp
000000000001cec1	movss	%xmm1, (%rsp)
000000000001cec6	pushq	%rsi
000000000001cec7	pushq	%rdi
000000000001cec8	callq	__Z7getBasev ## getBase()
000000000001cecd	addq	$0x273810, %rax
000000000001ced3	popq	%rdi
000000000001ced4	popq	%rsi
000000000001ced5	movss	(%rsp), %xmm1
000000000001ceda	addq	$0x10, %rsp
000000000001cede	movss	(%rsp), %xmm0
000000000001cee3	addq	$0x10, %rsp
000000000001cee7	popq	%r15
000000000001cee9	popq	%r14
000000000001ceeb	popq	%r13
000000000001ceed	popq	%r12
000000000001ceef	popq	%r11
000000000001cef1	popq	%r10
000000000001cef3	popq	%r9
000000000001cef5	popq	%r8
000000000001cef7	popq	%rcx
000000000001cef8	popq	%rdx
000000000001cef9	popq	%rsi
000000000001cefa	popq	%rdi
000000000001cefb	popq	%rbx
000000000001cefc	popq	%rbp
000000000001cefd	jmpq	*%rax
__ZThn288_N7cocos2d7CCLayer18ccTouchesCancelledEPNS_5CCSetEPNS_7CCEventE:
000000000001ceff	pushq	%rbp
000000000001cf00	movq	%rsp, %rbp
000000000001cf03	pushq	%rbx
000000000001cf04	pushq	%rdi
000000000001cf05	pushq	%rsi
000000000001cf06	pushq	%rdx
000000000001cf07	pushq	%rcx
000000000001cf08	pushq	%r8
000000000001cf0a	pushq	%r9
000000000001cf0c	pushq	%r10
000000000001cf0e	pushq	%r11
000000000001cf10	pushq	%r12
000000000001cf12	pushq	%r13
000000000001cf14	pushq	%r14
000000000001cf16	pushq	%r15
000000000001cf18	subq	$0x10, %rsp
000000000001cf1c	movss	%xmm0, (%rsp)
000000000001cf21	subq	$0x10, %rsp
000000000001cf25	movss	%xmm1, (%rsp)
000000000001cf2a	pushq	%rsi
000000000001cf2b	pushq	%rdi
000000000001cf2c	callq	__Z7getBasev ## getBase()
000000000001cf31	addq	$0x273890, %rax
000000000001cf37	popq	%rdi
000000000001cf38	popq	%rsi
000000000001cf39	movss	(%rsp), %xmm1
000000000001cf3e	addq	$0x10, %rsp
000000000001cf42	movss	(%rsp), %xmm0
000000000001cf47	addq	$0x10, %rsp
000000000001cf4b	popq	%r15
000000000001cf4d	popq	%r14
000000000001cf4f	popq	%r13
000000000001cf51	popq	%r12
000000000001cf53	popq	%r11
000000000001cf55	popq	%r10
000000000001cf57	popq	%r9
000000000001cf59	popq	%r8
000000000001cf5b	popq	%rcx
000000000001cf5c	popq	%rdx
000000000001cf5d	popq	%rsi
000000000001cf5e	popq	%rdi
000000000001cf5f	popq	%rbx
000000000001cf60	popq	%rbp
000000000001cf61	jmpq	*%rax
__ZThn296_N7cocos2d7CCLayer13didAccelerateEPNS_14CCAccelerationE:
000000000001cf63	pushq	%rbp
000000000001cf64	movq	%rsp, %rbp
000000000001cf67	pushq	%rbx
000000000001cf68	pushq	%rdi
000000000001cf69	pushq	%rsi
000000000001cf6a	pushq	%rdx
000000000001cf6b	pushq	%rcx
000000000001cf6c	pushq	%r8
000000000001cf6e	pushq	%r9
000000000001cf70	pushq	%r10
000000000001cf72	pushq	%r11
000000000001cf74	pushq	%r12
000000000001cf76	pushq	%r13
000000000001cf78	pushq	%r14
000000000001cf7a	pushq	%r15
000000000001cf7c	subq	$0x10, %rsp
000000000001cf80	movss	%xmm0, (%rsp)
000000000001cf85	subq	$0x10, %rsp
000000000001cf89	movss	%xmm1, (%rsp)
000000000001cf8e	pushq	%rsi
000000000001cf8f	pushq	%rdi
000000000001cf90	callq	__Z7getBasev ## getBase()
000000000001cf95	addq	$0x272ee0, %rax
000000000001cf9b	popq	%rdi
000000000001cf9c	popq	%rsi
000000000001cf9d	movss	(%rsp), %xmm1
000000000001cfa2	addq	$0x10, %rsp
000000000001cfa6	movss	(%rsp), %xmm0
000000000001cfab	addq	$0x10, %rsp
000000000001cfaf	popq	%r15
000000000001cfb1	popq	%r14
000000000001cfb3	popq	%r13
000000000001cfb5	popq	%r12
000000000001cfb7	popq	%r11
000000000001cfb9	popq	%r10
000000000001cfbb	popq	%r9
000000000001cfbd	popq	%r8
000000000001cfbf	popq	%rcx
000000000001cfc0	popq	%rdx
000000000001cfc1	popq	%rsi
000000000001cfc2	popq	%rdi
000000000001cfc3	popq	%rbx
000000000001cfc4	popq	%rbp
000000000001cfc5	jmpq	*%rax
__ZThn304_N7cocos2d7CCLayer14keyMenuClickedEv:
000000000001cfc7	pushq	%rbp
000000000001cfc8	movq	%rsp, %rbp
000000000001cfcb	pushq	%rbx
000000000001cfcc	pushq	%rdi
000000000001cfcd	pushq	%rsi
000000000001cfce	pushq	%rdx
000000000001cfcf	pushq	%rcx
000000000001cfd0	pushq	%r8
000000000001cfd2	pushq	%r9
000000000001cfd4	pushq	%r10
000000000001cfd6	pushq	%r11
000000000001cfd8	pushq	%r12
000000000001cfda	pushq	%r13
000000000001cfdc	pushq	%r14
000000000001cfde	pushq	%r15
000000000001cfe0	subq	$0x10, %rsp
000000000001cfe4	movss	%xmm0, (%rsp)
000000000001cfe9	subq	$0x10, %rsp
000000000001cfed	movss	%xmm1, (%rsp)
000000000001cff2	pushq	%rsi
000000000001cff3	pushq	%rdi
000000000001cff4	callq	__Z7getBasev ## getBase()
000000000001cff9	addq	$0x273240, %rax
000000000001cfff	popq	%rdi
000000000001d000	popq	%rsi
000000000001d001	movss	(%rsp), %xmm1
000000000001d006	addq	$0x10, %rsp
000000000001d00a	movss	(%rsp), %xmm0
000000000001d00f	addq	$0x10, %rsp
000000000001d013	popq	%r15
000000000001d015	popq	%r14
000000000001d017	popq	%r13
000000000001d019	popq	%r12
000000000001d01b	popq	%r11
000000000001d01d	popq	%r10
000000000001d01f	popq	%r9
000000000001d021	popq	%r8
000000000001d023	popq	%rcx
000000000001d024	popq	%rdx
000000000001d025	popq	%rsi
000000000001d026	popq	%rdi
000000000001d027	popq	%rbx
000000000001d028	popq	%rbp
000000000001d029	jmpq	*%rax
__ZThn304_N12FLAlertLayer14keyBackClickedEv:
000000000001d02b	pushq	%rbp
000000000001d02c	movq	%rsp, %rbp
000000000001d02f	pushq	%rbx
000000000001d030	pushq	%rdi
000000000001d031	pushq	%rsi
000000000001d032	pushq	%rdx
000000000001d033	pushq	%rcx
000000000001d034	pushq	%r8
000000000001d036	pushq	%r9
000000000001d038	pushq	%r10
000000000001d03a	pushq	%r11
000000000001d03c	pushq	%r12
000000000001d03e	pushq	%r13
000000000001d040	pushq	%r14
000000000001d042	pushq	%r15
000000000001d044	subq	$0x10, %rsp
000000000001d048	movss	%xmm0, (%rsp)
000000000001d04d	subq	$0x10, %rsp
000000000001d051	movss	%xmm1, (%rsp)
000000000001d056	pushq	%rsi
000000000001d057	pushq	%rdi
000000000001d058	callq	__Z7getBasev ## getBase()
000000000001d05d	addq	$0x25ed90, %rax
000000000001d063	popq	%rdi
000000000001d064	popq	%rsi
000000000001d065	movss	(%rsp), %xmm1
000000000001d06a	addq	$0x10, %rsp
000000000001d06e	movss	(%rsp), %xmm0
000000000001d073	addq	$0x10, %rsp
000000000001d077	popq	%r15
000000000001d079	popq	%r14
000000000001d07b	popq	%r13
000000000001d07d	popq	%r12
000000000001d07f	popq	%r11
000000000001d081	popq	%r10
000000000001d083	popq	%r9
000000000001d085	popq	%r8
000000000001d087	popq	%rcx
000000000001d088	popq	%rdx
000000000001d089	popq	%rsi
000000000001d08a	popq	%rdi
000000000001d08b	popq	%rbx
000000000001d08c	popq	%rbp
000000000001d08d	jmpq	*%rax
__ZThn312_N12FLAlertLayer7keyDownEN7cocos2d12enumKeyCodesE:
000000000001d08f	pushq	%rbp
000000000001d090	movq	%rsp, %rbp
000000000001d093	pushq	%rbx
000000000001d094	pushq	%rdi
000000000001d095	pushq	%rsi
000000000001d096	pushq	%rdx
000000000001d097	pushq	%rcx
000000000001d098	pushq	%r8
000000000001d09a	pushq	%r9
000000000001d09c	pushq	%r10
000000000001d09e	pushq	%r11
000000000001d0a0	pushq	%r12
000000000001d0a2	pushq	%r13
000000000001d0a4	pushq	%r14
000000000001d0a6	pushq	%r15
000000000001d0a8	subq	$0x10, %rsp
000000000001d0ac	movss	%xmm0, (%rsp)
000000000001d0b1	subq	$0x10, %rsp
000000000001d0b5	movss	%xmm1, (%rsp)
000000000001d0ba	pushq	%rsi
000000000001d0bb	pushq	%rdi
000000000001d0bc	callq	__Z7getBasev ## getBase()
000000000001d0c1	addq	$0x2732c0, %rax
000000000001d0c7	popq	%rdi
000000000001d0c8	popq	%rsi
000000000001d0c9	movss	(%rsp), %xmm1
000000000001d0ce	addq	$0x10, %rsp
000000000001d0d2	movss	(%rsp), %xmm0
000000000001d0d7	addq	$0x10, %rsp
000000000001d0db	popq	%r15
000000000001d0dd	popq	%r14
000000000001d0df	popq	%r13
000000000001d0e1	popq	%r12
000000000001d0e3	popq	%r11
000000000001d0e5	popq	%r10
000000000001d0e7	popq	%r9
000000000001d0e9	popq	%r8
000000000001d0eb	popq	%rcx
000000000001d0ec	popq	%rdx
000000000001d0ed	popq	%rsi
000000000001d0ee	popq	%rdi
000000000001d0ef	popq	%rbx
000000000001d0f0	popq	%rbp
000000000001d0f1	jmpq	*%rax
__ZN7cocos2d18CCKeyboardDelegate5keyUpENS_12enumKeyCodesE:
000000000001d0f3	pushq	%rbp
000000000001d0f4	movq	%rsp, %rbp
000000000001d0f7	pushq	%rbx
000000000001d0f8	pushq	%rdi
000000000001d0f9	pushq	%rsi
000000000001d0fa	pushq	%rdx
000000000001d0fb	pushq	%rcx
000000000001d0fc	pushq	%r8
000000000001d0fe	pushq	%r9
000000000001d100	pushq	%r10
000000000001d102	pushq	%r11
000000000001d104	pushq	%r12
000000000001d106	pushq	%r13
000000000001d108	pushq	%r14
000000000001d10a	pushq	%r15
000000000001d10c	subq	$0x10, %rsp
000000000001d110	movss	%xmm0, (%rsp)
000000000001d115	subq	$0x10, %rsp
000000000001d119	movss	%xmm1, (%rsp)
000000000001d11e	pushq	%rsi
000000000001d11f	pushq	%rdi
000000000001d120	callq	__Z7getBasev ## getBase()
000000000001d125	addq	$0x61a0, %rax
000000000001d12b	popq	%rdi
000000000001d12c	popq	%rsi
000000000001d12d	movss	(%rsp), %xmm1
000000000001d132	addq	$0x10, %rsp
000000000001d136	movss	(%rsp), %xmm0
000000000001d13b	addq	$0x10, %rsp
000000000001d13f	popq	%r15
000000000001d141	popq	%r14
000000000001d143	popq	%r13
000000000001d145	popq	%r12
000000000001d147	popq	%r11
000000000001d149	popq	%r10
000000000001d14b	popq	%r9
000000000001d14d	popq	%r8
000000000001d14f	popq	%rcx
000000000001d150	popq	%rdx
000000000001d151	popq	%rsi
000000000001d152	popq	%rdi
000000000001d153	popq	%rbx
000000000001d154	popq	%rbp
000000000001d155	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate12rightKeyDownEv:
000000000001d157	pushq	%rbp
000000000001d158	movq	%rsp, %rbp
000000000001d15b	pushq	%rbx
000000000001d15c	pushq	%rdi
000000000001d15d	pushq	%rsi
000000000001d15e	pushq	%rdx
000000000001d15f	pushq	%rcx
000000000001d160	pushq	%r8
000000000001d162	pushq	%r9
000000000001d164	pushq	%r10
000000000001d166	pushq	%r11
000000000001d168	pushq	%r12
000000000001d16a	pushq	%r13
000000000001d16c	pushq	%r14
000000000001d16e	pushq	%r15
000000000001d170	subq	$0x10, %rsp
000000000001d174	movss	%xmm0, (%rsp)
000000000001d179	subq	$0x10, %rsp
000000000001d17d	movss	%xmm1, (%rsp)
000000000001d182	pushq	%rsi
000000000001d183	pushq	%rdi
000000000001d184	callq	__Z7getBasev ## getBase()
000000000001d189	addq	$0x61b0, %rax
000000000001d18f	popq	%rdi
000000000001d190	popq	%rsi
000000000001d191	movss	(%rsp), %xmm1
000000000001d196	addq	$0x10, %rsp
000000000001d19a	movss	(%rsp), %xmm0
000000000001d19f	addq	$0x10, %rsp
000000000001d1a3	popq	%r15
000000000001d1a5	popq	%r14
000000000001d1a7	popq	%r13
000000000001d1a9	popq	%r12
000000000001d1ab	popq	%r11
000000000001d1ad	popq	%r10
000000000001d1af	popq	%r9
000000000001d1b1	popq	%r8
000000000001d1b3	popq	%rcx
000000000001d1b4	popq	%rdx
000000000001d1b5	popq	%rsi
000000000001d1b6	popq	%rdi
000000000001d1b7	popq	%rbx
000000000001d1b8	popq	%rbp
000000000001d1b9	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate10rightKeyUpEv:
000000000001d1bb	pushq	%rbp
000000000001d1bc	movq	%rsp, %rbp
000000000001d1bf	pushq	%rbx
000000000001d1c0	pushq	%rdi
000000000001d1c1	pushq	%rsi
000000000001d1c2	pushq	%rdx
000000000001d1c3	pushq	%rcx
000000000001d1c4	pushq	%r8
000000000001d1c6	pushq	%r9
000000000001d1c8	pushq	%r10
000000000001d1ca	pushq	%r11
000000000001d1cc	pushq	%r12
000000000001d1ce	pushq	%r13
000000000001d1d0	pushq	%r14
000000000001d1d2	pushq	%r15
000000000001d1d4	subq	$0x10, %rsp
000000000001d1d8	movss	%xmm0, (%rsp)
000000000001d1dd	subq	$0x10, %rsp
000000000001d1e1	movss	%xmm1, (%rsp)
000000000001d1e6	pushq	%rsi
000000000001d1e7	pushq	%rdi
000000000001d1e8	callq	__Z7getBasev ## getBase()
000000000001d1ed	addq	$0x61c0, %rax
000000000001d1f3	popq	%rdi
000000000001d1f4	popq	%rsi
000000000001d1f5	movss	(%rsp), %xmm1
000000000001d1fa	addq	$0x10, %rsp
000000000001d1fe	movss	(%rsp), %xmm0
000000000001d203	addq	$0x10, %rsp
000000000001d207	popq	%r15
000000000001d209	popq	%r14
000000000001d20b	popq	%r13
000000000001d20d	popq	%r12
000000000001d20f	popq	%r11
000000000001d211	popq	%r10
000000000001d213	popq	%r9
000000000001d215	popq	%r8
000000000001d217	popq	%rcx
000000000001d218	popq	%rdx
000000000001d219	popq	%rsi
000000000001d21a	popq	%rdi
000000000001d21b	popq	%rbx
000000000001d21c	popq	%rbp
000000000001d21d	jmpq	*%rax
__ZN7cocos2d15CCMouseDelegate11scrollWheelEff:
000000000001d21f	pushq	%rbp
000000000001d220	movq	%rsp, %rbp
000000000001d223	pushq	%rbx
000000000001d224	pushq	%rdi
000000000001d225	pushq	%rsi
000000000001d226	pushq	%rdx
000000000001d227	pushq	%rcx
000000000001d228	pushq	%r8
000000000001d22a	pushq	%r9
000000000001d22c	pushq	%r10
000000000001d22e	pushq	%r11
000000000001d230	pushq	%r12
000000000001d232	pushq	%r13
000000000001d234	pushq	%r14
000000000001d236	pushq	%r15
000000000001d238	subq	$0x10, %rsp
000000000001d23c	movss	%xmm0, (%rsp)
000000000001d241	subq	$0x10, %rsp
000000000001d245	movss	%xmm1, (%rsp)
000000000001d24a	pushq	%rsi
000000000001d24b	pushq	%rdi
000000000001d24c	callq	__Z7getBasev ## getBase()
000000000001d251	addq	$0x61d0, %rax
000000000001d257	popq	%rdi
000000000001d258	popq	%rsi
000000000001d259	movss	(%rsp), %xmm1
000000000001d25e	addq	$0x10, %rsp
000000000001d262	movss	(%rsp), %xmm0
000000000001d267	addq	$0x10, %rsp
000000000001d26b	popq	%r15
000000000001d26d	popq	%r14
000000000001d26f	popq	%r13
000000000001d271	popq	%r12
000000000001d273	popq	%r11
000000000001d275	popq	%r10
000000000001d277	popq	%r9
000000000001d279	popq	%r8
000000000001d27b	popq	%rcx
000000000001d27c	popq	%rdx
000000000001d27d	popq	%rsi
000000000001d27e	popq	%rdi
000000000001d27f	popq	%rbx
000000000001d280	popq	%rbp
000000000001d281	jmpq	*%rax
__ZThn368_N7cocos2d12CCLayerColor8setColorERKNS_10_ccColor3BE:
000000000001d283	pushq	%rbp
000000000001d284	movq	%rsp, %rbp
000000000001d287	pushq	%rbx
000000000001d288	pushq	%rdi
000000000001d289	pushq	%rsi
000000000001d28a	pushq	%rdx
000000000001d28b	pushq	%rcx
000000000001d28c	pushq	%r8
000000000001d28e	pushq	%r9
000000000001d290	pushq	%r10
000000000001d292	pushq	%r11
000000000001d294	pushq	%r12
000000000001d296	pushq	%r13
000000000001d298	pushq	%r14
000000000001d29a	pushq	%r15
000000000001d29c	subq	$0x10, %rsp
000000000001d2a0	movss	%xmm0, (%rsp)
000000000001d2a5	subq	$0x10, %rsp
000000000001d2a9	movss	%xmm1, (%rsp)
000000000001d2ae	pushq	%rsi
000000000001d2af	pushq	%rdi
000000000001d2b0	callq	__Z7getBasev ## getBase()
000000000001d2b5	addq	$0x274cf0, %rax
000000000001d2bb	popq	%rdi
000000000001d2bc	popq	%rsi
000000000001d2bd	movss	(%rsp), %xmm1
000000000001d2c2	addq	$0x10, %rsp
000000000001d2c6	movss	(%rsp), %xmm0
000000000001d2cb	addq	$0x10, %rsp
000000000001d2cf	popq	%r15
000000000001d2d1	popq	%r14
000000000001d2d3	popq	%r13
000000000001d2d5	popq	%r12
000000000001d2d7	popq	%r11
000000000001d2d9	popq	%r10
000000000001d2db	popq	%r9
000000000001d2dd	popq	%r8
000000000001d2df	popq	%rcx
000000000001d2e0	popq	%rdx
000000000001d2e1	popq	%rsi
000000000001d2e2	popq	%rdi
000000000001d2e3	popq	%rbx
000000000001d2e4	popq	%rbp
000000000001d2e5	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA8getColorEv:
000000000001d2e7	pushq	%rbp
000000000001d2e8	movq	%rsp, %rbp
000000000001d2eb	pushq	%rbx
000000000001d2ec	pushq	%rdi
000000000001d2ed	pushq	%rsi
000000000001d2ee	pushq	%rdx
000000000001d2ef	pushq	%rcx
000000000001d2f0	pushq	%r8
000000000001d2f2	pushq	%r9
000000000001d2f4	pushq	%r10
000000000001d2f6	pushq	%r11
000000000001d2f8	pushq	%r12
000000000001d2fa	pushq	%r13
000000000001d2fc	pushq	%r14
000000000001d2fe	pushq	%r15
000000000001d300	subq	$0x10, %rsp
000000000001d304	movss	%xmm0, (%rsp)
000000000001d309	subq	$0x10, %rsp
000000000001d30d	movss	%xmm1, (%rsp)
000000000001d312	pushq	%rsi
000000000001d313	pushq	%rdi
000000000001d314	callq	__Z7getBasev ## getBase()
000000000001d319	addq	$0x273d70, %rax
000000000001d31f	popq	%rdi
000000000001d320	popq	%rsi
000000000001d321	movss	(%rsp), %xmm1
000000000001d326	addq	$0x10, %rsp
000000000001d32a	movss	(%rsp), %xmm0
000000000001d32f	addq	$0x10, %rsp
000000000001d333	popq	%r15
000000000001d335	popq	%r14
000000000001d337	popq	%r13
000000000001d339	popq	%r12
000000000001d33b	popq	%r11
000000000001d33d	popq	%r10
000000000001d33f	popq	%r9
000000000001d341	popq	%r8
000000000001d343	popq	%rcx
000000000001d344	popq	%rdx
000000000001d345	popq	%rsi
000000000001d346	popq	%rdi
000000000001d347	popq	%rbx
000000000001d348	popq	%rbp
000000000001d349	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA17getDisplayedColorEv:
000000000001d34b	pushq	%rbp
000000000001d34c	movq	%rsp, %rbp
000000000001d34f	pushq	%rbx
000000000001d350	pushq	%rdi
000000000001d351	pushq	%rsi
000000000001d352	pushq	%rdx
000000000001d353	pushq	%rcx
000000000001d354	pushq	%r8
000000000001d356	pushq	%r9
000000000001d358	pushq	%r10
000000000001d35a	pushq	%r11
000000000001d35c	pushq	%r12
000000000001d35e	pushq	%r13
000000000001d360	pushq	%r14
000000000001d362	pushq	%r15
000000000001d364	subq	$0x10, %rsp
000000000001d368	movss	%xmm0, (%rsp)
000000000001d36d	subq	$0x10, %rsp
000000000001d371	movss	%xmm1, (%rsp)
000000000001d376	pushq	%rsi
000000000001d377	pushq	%rdi
000000000001d378	callq	__Z7getBasev ## getBase()
000000000001d37d	addq	$0x273d90, %rax
000000000001d383	popq	%rdi
000000000001d384	popq	%rsi
000000000001d385	movss	(%rsp), %xmm1
000000000001d38a	addq	$0x10, %rsp
000000000001d38e	movss	(%rsp), %xmm0
000000000001d393	addq	$0x10, %rsp
000000000001d397	popq	%r15
000000000001d399	popq	%r14
000000000001d39b	popq	%r13
000000000001d39d	popq	%r12
000000000001d39f	popq	%r11
000000000001d3a1	popq	%r10
000000000001d3a3	popq	%r9
000000000001d3a5	popq	%r8
000000000001d3a7	popq	%rcx
000000000001d3a8	popq	%rdx
000000000001d3a9	popq	%rsi
000000000001d3aa	popq	%rdi
000000000001d3ab	popq	%rbx
000000000001d3ac	popq	%rbp
000000000001d3ad	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA19getDisplayedOpacityEv:
000000000001d3af	pushq	%rbp
000000000001d3b0	movq	%rsp, %rbp
000000000001d3b3	pushq	%rbx
000000000001d3b4	pushq	%rdi
000000000001d3b5	pushq	%rsi
000000000001d3b6	pushq	%rdx
000000000001d3b7	pushq	%rcx
000000000001d3b8	pushq	%r8
000000000001d3ba	pushq	%r9
000000000001d3bc	pushq	%r10
000000000001d3be	pushq	%r11
000000000001d3c0	pushq	%r12
000000000001d3c2	pushq	%r13
000000000001d3c4	pushq	%r14
000000000001d3c6	pushq	%r15
000000000001d3c8	subq	$0x10, %rsp
000000000001d3cc	movss	%xmm0, (%rsp)
000000000001d3d1	subq	$0x10, %rsp
000000000001d3d5	movss	%xmm1, (%rsp)
000000000001d3da	pushq	%rsi
000000000001d3db	pushq	%rdi
000000000001d3dc	callq	__Z7getBasev ## getBase()
000000000001d3e1	addq	$0x273c10, %rax
000000000001d3e7	popq	%rdi
000000000001d3e8	popq	%rsi
000000000001d3e9	movss	(%rsp), %xmm1
000000000001d3ee	addq	$0x10, %rsp
000000000001d3f2	movss	(%rsp), %xmm0
000000000001d3f7	addq	$0x10, %rsp
000000000001d3fb	popq	%r15
000000000001d3fd	popq	%r14
000000000001d3ff	popq	%r13
000000000001d401	popq	%r12
000000000001d403	popq	%r11
000000000001d405	popq	%r10
000000000001d407	popq	%r9
000000000001d409	popq	%r8
000000000001d40b	popq	%rcx
000000000001d40c	popq	%rdx
000000000001d40d	popq	%rsi
000000000001d40e	popq	%rdi
000000000001d40f	popq	%rbx
000000000001d410	popq	%rbp
000000000001d411	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA10getOpacityEv:
000000000001d413	pushq	%rbp
000000000001d414	movq	%rsp, %rbp
000000000001d417	pushq	%rbx
000000000001d418	pushq	%rdi
000000000001d419	pushq	%rsi
000000000001d41a	pushq	%rdx
000000000001d41b	pushq	%rcx
000000000001d41c	pushq	%r8
000000000001d41e	pushq	%r9
000000000001d420	pushq	%r10
000000000001d422	pushq	%r11
000000000001d424	pushq	%r12
000000000001d426	pushq	%r13
000000000001d428	pushq	%r14
000000000001d42a	pushq	%r15
000000000001d42c	subq	$0x10, %rsp
000000000001d430	movss	%xmm0, (%rsp)
000000000001d435	subq	$0x10, %rsp
000000000001d439	movss	%xmm1, (%rsp)
000000000001d43e	pushq	%rsi
000000000001d43f	pushq	%rdi
000000000001d440	callq	__Z7getBasev ## getBase()
000000000001d445	addq	$0x273bf0, %rax
000000000001d44b	popq	%rdi
000000000001d44c	popq	%rsi
000000000001d44d	movss	(%rsp), %xmm1
000000000001d452	addq	$0x10, %rsp
000000000001d456	movss	(%rsp), %xmm0
000000000001d45b	addq	$0x10, %rsp
000000000001d45f	popq	%r15
000000000001d461	popq	%r14
000000000001d463	popq	%r13
000000000001d465	popq	%r12
000000000001d467	popq	%r11
000000000001d469	popq	%r10
000000000001d46b	popq	%r9
000000000001d46d	popq	%r8
000000000001d46f	popq	%rcx
000000000001d470	popq	%rdx
000000000001d471	popq	%rsi
000000000001d472	popq	%rdi
000000000001d473	popq	%rbx
000000000001d474	popq	%rbp
000000000001d475	jmpq	*%rax
__ZThn368_N7cocos2d12CCLayerColor10setOpacityEh:
000000000001d477	pushq	%rbp
000000000001d478	movq	%rsp, %rbp
000000000001d47b	pushq	%rbx
000000000001d47c	pushq	%rdi
000000000001d47d	pushq	%rsi
000000000001d47e	pushq	%rdx
000000000001d47f	pushq	%rcx
000000000001d480	pushq	%r8
000000000001d482	pushq	%r9
000000000001d484	pushq	%r10
000000000001d486	pushq	%r11
000000000001d488	pushq	%r12
000000000001d48a	pushq	%r13
000000000001d48c	pushq	%r14
000000000001d48e	pushq	%r15
000000000001d490	subq	$0x10, %rsp
000000000001d494	movss	%xmm0, (%rsp)
000000000001d499	subq	$0x10, %rsp
000000000001d49d	movss	%xmm1, (%rsp)
000000000001d4a2	pushq	%rsi
000000000001d4a3	pushq	%rdi
000000000001d4a4	callq	__Z7getBasev ## getBase()
000000000001d4a9	addq	$0x274e50, %rax
000000000001d4af	popq	%rdi
000000000001d4b0	popq	%rsi
000000000001d4b1	movss	(%rsp), %xmm1
000000000001d4b6	addq	$0x10, %rsp
000000000001d4ba	movss	(%rsp), %xmm0
000000000001d4bf	addq	$0x10, %rsp
000000000001d4c3	popq	%r15
000000000001d4c5	popq	%r14
000000000001d4c7	popq	%r13
000000000001d4c9	popq	%r12
000000000001d4cb	popq	%r11
000000000001d4cd	popq	%r10
000000000001d4cf	popq	%r9
000000000001d4d1	popq	%r8
000000000001d4d3	popq	%rcx
000000000001d4d4	popq	%rdx
000000000001d4d5	popq	%rsi
000000000001d4d6	popq	%rdi
000000000001d4d7	popq	%rbx
000000000001d4d8	popq	%rbp
000000000001d4d9	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA19setOpacityModifyRGBEb:
000000000001d4db	pushq	%rbp
000000000001d4dc	movq	%rsp, %rbp
000000000001d4df	pushq	%rbx
000000000001d4e0	pushq	%rdi
000000000001d4e1	pushq	%rsi
000000000001d4e2	pushq	%rdx
000000000001d4e3	pushq	%rcx
000000000001d4e4	pushq	%r8
000000000001d4e6	pushq	%r9
000000000001d4e8	pushq	%r10
000000000001d4ea	pushq	%r11
000000000001d4ec	pushq	%r12
000000000001d4ee	pushq	%r13
000000000001d4f0	pushq	%r14
000000000001d4f2	pushq	%r15
000000000001d4f4	subq	$0x10, %rsp
000000000001d4f8	movss	%xmm0, (%rsp)
000000000001d4fd	subq	$0x10, %rsp
000000000001d501	movss	%xmm1, (%rsp)
000000000001d506	pushq	%rsi
000000000001d507	pushq	%rdi
000000000001d508	callq	__Z7getBasev ## getBase()
000000000001d50d	addq	$0x61e0, %rax
000000000001d513	popq	%rdi
000000000001d514	popq	%rsi
000000000001d515	movss	(%rsp), %xmm1
000000000001d51a	addq	$0x10, %rsp
000000000001d51e	movss	(%rsp), %xmm0
000000000001d523	addq	$0x10, %rsp
000000000001d527	popq	%r15
000000000001d529	popq	%r14
000000000001d52b	popq	%r13
000000000001d52d	popq	%r12
000000000001d52f	popq	%r11
000000000001d531	popq	%r10
000000000001d533	popq	%r9
000000000001d535	popq	%r8
000000000001d537	popq	%rcx
000000000001d538	popq	%rdx
000000000001d539	popq	%rsi
000000000001d53a	popq	%rdi
000000000001d53b	popq	%rbx
000000000001d53c	popq	%rbp
000000000001d53d	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA18isOpacityModifyRGBEv:
000000000001d53f	pushq	%rbp
000000000001d540	movq	%rsp, %rbp
000000000001d543	pushq	%rbx
000000000001d544	pushq	%rdi
000000000001d545	pushq	%rsi
000000000001d546	pushq	%rdx
000000000001d547	pushq	%rcx
000000000001d548	pushq	%r8
000000000001d54a	pushq	%r9
000000000001d54c	pushq	%r10
000000000001d54e	pushq	%r11
000000000001d550	pushq	%r12
000000000001d552	pushq	%r13
000000000001d554	pushq	%r14
000000000001d556	pushq	%r15
000000000001d558	subq	$0x10, %rsp
000000000001d55c	movss	%xmm0, (%rsp)
000000000001d561	subq	$0x10, %rsp
000000000001d565	movss	%xmm1, (%rsp)
000000000001d56a	pushq	%rsi
000000000001d56b	pushq	%rdi
000000000001d56c	callq	__Z7getBasev ## getBase()
000000000001d571	addq	$0x61f0, %rax
000000000001d577	popq	%rdi
000000000001d578	popq	%rsi
000000000001d579	movss	(%rsp), %xmm1
000000000001d57e	addq	$0x10, %rsp
000000000001d582	movss	(%rsp), %xmm0
000000000001d587	addq	$0x10, %rsp
000000000001d58b	popq	%r15
000000000001d58d	popq	%r14
000000000001d58f	popq	%r13
000000000001d591	popq	%r12
000000000001d593	popq	%r11
000000000001d595	popq	%r10
000000000001d597	popq	%r9
000000000001d599	popq	%r8
000000000001d59b	popq	%rcx
000000000001d59c	popq	%rdx
000000000001d59d	popq	%rsi
000000000001d59e	popq	%rdi
000000000001d59f	popq	%rbx
000000000001d5a0	popq	%rbp
000000000001d5a1	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA21isCascadeColorEnabledEv:
000000000001d5a3	pushq	%rbp
000000000001d5a4	movq	%rsp, %rbp
000000000001d5a7	pushq	%rbx
000000000001d5a8	pushq	%rdi
000000000001d5a9	pushq	%rsi
000000000001d5aa	pushq	%rdx
000000000001d5ab	pushq	%rcx
000000000001d5ac	pushq	%r8
000000000001d5ae	pushq	%r9
000000000001d5b0	pushq	%r10
000000000001d5b2	pushq	%r11
000000000001d5b4	pushq	%r12
000000000001d5b6	pushq	%r13
000000000001d5b8	pushq	%r14
000000000001d5ba	pushq	%r15
000000000001d5bc	subq	$0x10, %rsp
000000000001d5c0	movss	%xmm0, (%rsp)
000000000001d5c5	subq	$0x10, %rsp
000000000001d5c9	movss	%xmm1, (%rsp)
000000000001d5ce	pushq	%rsi
000000000001d5cf	pushq	%rdi
000000000001d5d0	callq	__Z7getBasev ## getBase()
000000000001d5d5	addq	$0x274240, %rax
000000000001d5db	popq	%rdi
000000000001d5dc	popq	%rsi
000000000001d5dd	movss	(%rsp), %xmm1
000000000001d5e2	addq	$0x10, %rsp
000000000001d5e6	movss	(%rsp), %xmm0
000000000001d5eb	addq	$0x10, %rsp
000000000001d5ef	popq	%r15
000000000001d5f1	popq	%r14
000000000001d5f3	popq	%r13
000000000001d5f5	popq	%r12
000000000001d5f7	popq	%r11
000000000001d5f9	popq	%r10
000000000001d5fb	popq	%r9
000000000001d5fd	popq	%r8
000000000001d5ff	popq	%rcx
000000000001d600	popq	%rdx
000000000001d601	popq	%rsi
000000000001d602	popq	%rdi
000000000001d603	popq	%rbx
000000000001d604	popq	%rbp
000000000001d605	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA22setCascadeColorEnabledEb:
000000000001d607	pushq	%rbp
000000000001d608	movq	%rsp, %rbp
000000000001d60b	pushq	%rbx
000000000001d60c	pushq	%rdi
000000000001d60d	pushq	%rsi
000000000001d60e	pushq	%rdx
000000000001d60f	pushq	%rcx
000000000001d610	pushq	%r8
000000000001d612	pushq	%r9
000000000001d614	pushq	%r10
000000000001d616	pushq	%r11
000000000001d618	pushq	%r12
000000000001d61a	pushq	%r13
000000000001d61c	pushq	%r14
000000000001d61e	pushq	%r15
000000000001d620	subq	$0x10, %rsp
000000000001d624	movss	%xmm0, (%rsp)
000000000001d629	subq	$0x10, %rsp
000000000001d62d	movss	%xmm1, (%rsp)
000000000001d632	pushq	%rsi
000000000001d633	pushq	%rdi
000000000001d634	callq	__Z7getBasev ## getBase()
000000000001d639	addq	$0x274260, %rax
000000000001d63f	popq	%rdi
000000000001d640	popq	%rsi
000000000001d641	movss	(%rsp), %xmm1
000000000001d646	addq	$0x10, %rsp
000000000001d64a	movss	(%rsp), %xmm0
000000000001d64f	addq	$0x10, %rsp
000000000001d653	popq	%r15
000000000001d655	popq	%r14
000000000001d657	popq	%r13
000000000001d659	popq	%r12
000000000001d65b	popq	%r11
000000000001d65d	popq	%r10
000000000001d65f	popq	%r9
000000000001d661	popq	%r8
000000000001d663	popq	%rcx
000000000001d664	popq	%rdx
000000000001d665	popq	%rsi
000000000001d666	popq	%rdi
000000000001d667	popq	%rbx
000000000001d668	popq	%rbp
000000000001d669	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA20updateDisplayedColorERKNS_10_ccColor3BE:
000000000001d66b	pushq	%rbp
000000000001d66c	movq	%rsp, %rbp
000000000001d66f	pushq	%rbx
000000000001d670	pushq	%rdi
000000000001d671	pushq	%rsi
000000000001d672	pushq	%rdx
000000000001d673	pushq	%rcx
000000000001d674	pushq	%r8
000000000001d676	pushq	%r9
000000000001d678	pushq	%r10
000000000001d67a	pushq	%r11
000000000001d67c	pushq	%r12
000000000001d67e	pushq	%r13
000000000001d680	pushq	%r14
000000000001d682	pushq	%r15
000000000001d684	subq	$0x10, %rsp
000000000001d688	movss	%xmm0, (%rsp)
000000000001d68d	subq	$0x10, %rsp
000000000001d691	movss	%xmm1, (%rsp)
000000000001d696	pushq	%rsi
000000000001d697	pushq	%rdi
000000000001d698	callq	__Z7getBasev ## getBase()
000000000001d69d	addq	$0x2741d0, %rax
000000000001d6a3	popq	%rdi
000000000001d6a4	popq	%rsi
000000000001d6a5	movss	(%rsp), %xmm1
000000000001d6aa	addq	$0x10, %rsp
000000000001d6ae	movss	(%rsp), %xmm0
000000000001d6b3	addq	$0x10, %rsp
000000000001d6b7	popq	%r15
000000000001d6b9	popq	%r14
000000000001d6bb	popq	%r13
000000000001d6bd	popq	%r12
000000000001d6bf	popq	%r11
000000000001d6c1	popq	%r10
000000000001d6c3	popq	%r9
000000000001d6c5	popq	%r8
000000000001d6c7	popq	%rcx
000000000001d6c8	popq	%rdx
000000000001d6c9	popq	%rsi
000000000001d6ca	popq	%rdi
000000000001d6cb	popq	%rbx
000000000001d6cc	popq	%rbp
000000000001d6cd	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA23isCascadeOpacityEnabledEv:
000000000001d6cf	pushq	%rbp
000000000001d6d0	movq	%rsp, %rbp
000000000001d6d3	pushq	%rbx
000000000001d6d4	pushq	%rdi
000000000001d6d5	pushq	%rsi
000000000001d6d6	pushq	%rdx
000000000001d6d7	pushq	%rcx
000000000001d6d8	pushq	%r8
000000000001d6da	pushq	%r9
000000000001d6dc	pushq	%r10
000000000001d6de	pushq	%r11
000000000001d6e0	pushq	%r12
000000000001d6e2	pushq	%r13
000000000001d6e4	pushq	%r14
000000000001d6e6	pushq	%r15
000000000001d6e8	subq	$0x10, %rsp
000000000001d6ec	movss	%xmm0, (%rsp)
000000000001d6f1	subq	$0x10, %rsp
000000000001d6f5	movss	%xmm1, (%rsp)
000000000001d6fa	pushq	%rsi
000000000001d6fb	pushq	%rdi
000000000001d6fc	callq	__Z7getBasev ## getBase()
000000000001d701	addq	$0x274200, %rax
000000000001d707	popq	%rdi
000000000001d708	popq	%rsi
000000000001d709	movss	(%rsp), %xmm1
000000000001d70e	addq	$0x10, %rsp
000000000001d712	movss	(%rsp), %xmm0
000000000001d717	addq	$0x10, %rsp
000000000001d71b	popq	%r15
000000000001d71d	popq	%r14
000000000001d71f	popq	%r13
000000000001d721	popq	%r12
000000000001d723	popq	%r11
000000000001d725	popq	%r10
000000000001d727	popq	%r9
000000000001d729	popq	%r8
000000000001d72b	popq	%rcx
000000000001d72c	popq	%rdx
000000000001d72d	popq	%rsi
000000000001d72e	popq	%rdi
000000000001d72f	popq	%rbx
000000000001d730	popq	%rbp
000000000001d731	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA24setCascadeOpacityEnabledEb:
000000000001d733	pushq	%rbp
000000000001d734	movq	%rsp, %rbp
000000000001d737	pushq	%rbx
000000000001d738	pushq	%rdi
000000000001d739	pushq	%rsi
000000000001d73a	pushq	%rdx
000000000001d73b	pushq	%rcx
000000000001d73c	pushq	%r8
000000000001d73e	pushq	%r9
000000000001d740	pushq	%r10
000000000001d742	pushq	%r11
000000000001d744	pushq	%r12
000000000001d746	pushq	%r13
000000000001d748	pushq	%r14
000000000001d74a	pushq	%r15
000000000001d74c	subq	$0x10, %rsp
000000000001d750	movss	%xmm0, (%rsp)
000000000001d755	subq	$0x10, %rsp
000000000001d759	movss	%xmm1, (%rsp)
000000000001d75e	pushq	%rsi
000000000001d75f	pushq	%rdi
000000000001d760	callq	__Z7getBasev ## getBase()
000000000001d765	addq	$0x274220, %rax
000000000001d76b	popq	%rdi
000000000001d76c	popq	%rsi
000000000001d76d	movss	(%rsp), %xmm1
000000000001d772	addq	$0x10, %rsp
000000000001d776	movss	(%rsp), %xmm0
000000000001d77b	addq	$0x10, %rsp
000000000001d77f	popq	%r15
000000000001d781	popq	%r14
000000000001d783	popq	%r13
000000000001d785	popq	%r12
000000000001d787	popq	%r11
000000000001d789	popq	%r10
000000000001d78b	popq	%r9
000000000001d78d	popq	%r8
000000000001d78f	popq	%rcx
000000000001d790	popq	%rdx
000000000001d791	popq	%rsi
000000000001d792	popq	%rdi
000000000001d793	popq	%rbx
000000000001d794	popq	%rbp
000000000001d795	jmpq	*%rax
__ZThn368_N7cocos2d11CCLayerRGBA22updateDisplayedOpacityEh:
000000000001d797	pushq	%rbp
000000000001d798	movq	%rsp, %rbp
000000000001d79b	pushq	%rbx
000000000001d79c	pushq	%rdi
000000000001d79d	pushq	%rsi
000000000001d79e	pushq	%rdx
000000000001d79f	pushq	%rcx
000000000001d7a0	pushq	%r8
000000000001d7a2	pushq	%r9
000000000001d7a4	pushq	%r10
000000000001d7a6	pushq	%r11
000000000001d7a8	pushq	%r12
000000000001d7aa	pushq	%r13
000000000001d7ac	pushq	%r14
000000000001d7ae	pushq	%r15
000000000001d7b0	subq	$0x10, %rsp
000000000001d7b4	movss	%xmm0, (%rsp)
000000000001d7b9	subq	$0x10, %rsp
000000000001d7bd	movss	%xmm1, (%rsp)
000000000001d7c2	pushq	%rsi
000000000001d7c3	pushq	%rdi
000000000001d7c4	callq	__Z7getBasev ## getBase()
000000000001d7c9	addq	$0x273ff0, %rax
000000000001d7cf	popq	%rdi
000000000001d7d0	popq	%rsi
000000000001d7d1	movss	(%rsp), %xmm1
000000000001d7d6	addq	$0x10, %rsp
000000000001d7da	movss	(%rsp), %xmm0
000000000001d7df	addq	$0x10, %rsp
000000000001d7e3	popq	%r15
000000000001d7e5	popq	%r14
000000000001d7e7	popq	%r13
000000000001d7e9	popq	%r12
000000000001d7eb	popq	%r11
000000000001d7ed	popq	%r10
000000000001d7ef	popq	%r9
000000000001d7f1	popq	%r8
000000000001d7f3	popq	%rcx
000000000001d7f4	popq	%rdx
000000000001d7f5	popq	%rsi
000000000001d7f6	popq	%rdi
000000000001d7f7	popq	%rbx
000000000001d7f8	popq	%rbp
000000000001d7f9	jmpq	*%rax
__ZThn392_N7cocos2d12CCLayerColor12setBlendFuncENS_12_ccBlendFuncE:
000000000001d7fb	pushq	%rbp
000000000001d7fc	movq	%rsp, %rbp
000000000001d7ff	pushq	%rbx
000000000001d800	pushq	%rdi
000000000001d801	pushq	%rsi
000000000001d802	pushq	%rdx
000000000001d803	pushq	%rcx
000000000001d804	pushq	%r8
000000000001d806	pushq	%r9
000000000001d808	pushq	%r10
000000000001d80a	pushq	%r11
000000000001d80c	pushq	%r12
000000000001d80e	pushq	%r13
000000000001d810	pushq	%r14
000000000001d812	pushq	%r15
000000000001d814	subq	$0x10, %rsp
000000000001d818	movss	%xmm0, (%rsp)
000000000001d81d	subq	$0x10, %rsp
000000000001d821	movss	%xmm1, (%rsp)
000000000001d826	pushq	%rsi
000000000001d827	pushq	%rdi
000000000001d828	callq	__Z7getBasev ## getBase()
000000000001d82d	addq	$0x2744b0, %rax
000000000001d833	popq	%rdi
000000000001d834	popq	%rsi
000000000001d835	movss	(%rsp), %xmm1
000000000001d83a	addq	$0x10, %rsp
000000000001d83e	movss	(%rsp), %xmm0
000000000001d843	addq	$0x10, %rsp
000000000001d847	popq	%r15
000000000001d849	popq	%r14
000000000001d84b	popq	%r13
000000000001d84d	popq	%r12
000000000001d84f	popq	%r11
000000000001d851	popq	%r10
000000000001d853	popq	%r9
000000000001d855	popq	%r8
000000000001d857	popq	%rcx
000000000001d858	popq	%rdx
000000000001d859	popq	%rsi
000000000001d85a	popq	%rdi
000000000001d85b	popq	%rbx
000000000001d85c	popq	%rbp
000000000001d85d	jmpq	*%rax
__ZThn392_N7cocos2d12CCLayerColor12getBlendFuncEv:
000000000001d85f	pushq	%rbp
000000000001d860	movq	%rsp, %rbp
000000000001d863	pushq	%rbx
000000000001d864	pushq	%rdi
000000000001d865	pushq	%rsi
000000000001d866	pushq	%rdx
000000000001d867	pushq	%rcx
000000000001d868	pushq	%r8
000000000001d86a	pushq	%r9
000000000001d86c	pushq	%r10
000000000001d86e	pushq	%r11
000000000001d870	pushq	%r12
000000000001d872	pushq	%r13
000000000001d874	pushq	%r14
000000000001d876	pushq	%r15
000000000001d878	subq	$0x10, %rsp
000000000001d87c	movss	%xmm0, (%rsp)
000000000001d881	subq	$0x10, %rsp
000000000001d885	movss	%xmm1, (%rsp)
000000000001d88a	pushq	%rsi
000000000001d88b	pushq	%rdi
000000000001d88c	callq	__Z7getBasev ## getBase()
000000000001d891	addq	$0x274490, %rax
000000000001d897	popq	%rdi
000000000001d898	popq	%rsi
000000000001d899	movss	(%rsp), %xmm1
000000000001d89e	addq	$0x10, %rsp
000000000001d8a2	movss	(%rsp), %xmm0
000000000001d8a7	addq	$0x10, %rsp
000000000001d8ab	popq	%r15
000000000001d8ad	popq	%r14
000000000001d8af	popq	%r13
000000000001d8b1	popq	%r12
000000000001d8b3	popq	%r11
000000000001d8b5	popq	%r10
000000000001d8b7	popq	%r9
000000000001d8b9	popq	%r8
000000000001d8bb	popq	%rcx
000000000001d8bc	popq	%rdx
000000000001d8bd	popq	%rsi
000000000001d8be	popq	%rdi
000000000001d8bf	popq	%rbx
000000000001d8c0	popq	%rbp
000000000001d8c1	jmpq	*%rax
__ZN8TextArea6createESsPKcffN7cocos2d7CCPointEfb:
000000000001d8c3	pushq	%rbp
000000000001d8c4	movq	%rsp, %rbp
000000000001d8c7	pushq	%rbx
000000000001d8c8	pushq	%rdi
000000000001d8c9	pushq	%rsi
000000000001d8ca	pushq	%rdx
000000000001d8cb	pushq	%rcx
000000000001d8cc	pushq	%r8
000000000001d8ce	pushq	%r9
000000000001d8d0	pushq	%r10
000000000001d8d2	pushq	%r11
000000000001d8d4	pushq	%r12
000000000001d8d6	pushq	%r13
000000000001d8d8	pushq	%r14
000000000001d8da	pushq	%r15
000000000001d8dc	subq	$0x10, %rsp
000000000001d8e0	movss	%xmm0, (%rsp)
000000000001d8e5	subq	$0x10, %rsp
000000000001d8e9	movss	%xmm1, (%rsp)
000000000001d8ee	pushq	%rsi
000000000001d8ef	pushq	%rdi
000000000001d8f0	callq	__Z7getBasev ## getBase()
000000000001d8f5	addq	$0x19eb40, %rax
000000000001d8fb	popq	%rdi
000000000001d8fc	popq	%rsi
000000000001d8fd	movss	(%rsp), %xmm1
000000000001d902	addq	$0x10, %rsp
000000000001d906	movss	(%rsp), %xmm0
000000000001d90b	addq	$0x10, %rsp
000000000001d90f	popq	%r15
000000000001d911	popq	%r14
000000000001d913	popq	%r13
000000000001d915	popq	%r12
000000000001d917	popq	%r11
000000000001d919	popq	%r10
000000000001d91b	popq	%r9
000000000001d91d	popq	%r8
000000000001d91f	popq	%rcx
000000000001d920	popq	%rdx
000000000001d921	popq	%rsi
000000000001d922	popq	%rdi
000000000001d923	popq	%rbx
000000000001d924	popq	%rbp
000000000001d925	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture6createEiiNS_22CCTexture2DPixelFormatE:
000000000001d927	pushq	%rbp
000000000001d928	movq	%rsp, %rbp
000000000001d92b	pushq	%rbx
000000000001d92c	pushq	%rdi
000000000001d92d	pushq	%rsi
000000000001d92e	pushq	%rdx
000000000001d92f	pushq	%rcx
000000000001d930	pushq	%r8
000000000001d932	pushq	%r9
000000000001d934	pushq	%r10
000000000001d936	pushq	%r11
000000000001d938	pushq	%r12
000000000001d93a	pushq	%r13
000000000001d93c	pushq	%r14
000000000001d93e	pushq	%r15
000000000001d940	subq	$0x10, %rsp
000000000001d944	movss	%xmm0, (%rsp)
000000000001d949	subq	$0x10, %rsp
000000000001d94d	movss	%xmm1, (%rsp)
000000000001d952	pushq	%rsi
000000000001d953	pushq	%rdi
000000000001d954	callq	__Z7getBasev ## getBase()
000000000001d959	addq	$0x35c720, %rax
000000000001d95f	popq	%rdi
000000000001d960	popq	%rsi
000000000001d961	movss	(%rsp), %xmm1
000000000001d966	addq	$0x10, %rsp
000000000001d96a	movss	(%rsp), %xmm0
000000000001d96f	addq	$0x10, %rsp
000000000001d973	popq	%r15
000000000001d975	popq	%r14
000000000001d977	popq	%r13
000000000001d979	popq	%r12
000000000001d97b	popq	%r11
000000000001d97d	popq	%r10
000000000001d97f	popq	%r9
000000000001d981	popq	%r8
000000000001d983	popq	%rcx
000000000001d984	popq	%rdx
000000000001d985	popq	%rsi
000000000001d986	popq	%rdi
000000000001d987	popq	%rbx
000000000001d988	popq	%rbp
000000000001d989	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture5beginEv:
000000000001d98b	pushq	%rbp
000000000001d98c	movq	%rsp, %rbp
000000000001d98f	pushq	%rbx
000000000001d990	pushq	%rdi
000000000001d991	pushq	%rsi
000000000001d992	pushq	%rdx
000000000001d993	pushq	%rcx
000000000001d994	pushq	%r8
000000000001d996	pushq	%r9
000000000001d998	pushq	%r10
000000000001d99a	pushq	%r11
000000000001d99c	pushq	%r12
000000000001d99e	pushq	%r13
000000000001d9a0	pushq	%r14
000000000001d9a2	pushq	%r15
000000000001d9a4	subq	$0x10, %rsp
000000000001d9a8	movss	%xmm0, (%rsp)
000000000001d9ad	subq	$0x10, %rsp
000000000001d9b1	movss	%xmm1, (%rsp)
000000000001d9b6	pushq	%rsi
000000000001d9b7	pushq	%rdi
000000000001d9b8	callq	__Z7getBasev ## getBase()
000000000001d9bd	addq	$0x35ce10, %rax
000000000001d9c3	popq	%rdi
000000000001d9c4	popq	%rsi
000000000001d9c5	movss	(%rsp), %xmm1
000000000001d9ca	addq	$0x10, %rsp
000000000001d9ce	movss	(%rsp), %xmm0
000000000001d9d3	addq	$0x10, %rsp
000000000001d9d7	popq	%r15
000000000001d9d9	popq	%r14
000000000001d9db	popq	%r13
000000000001d9dd	popq	%r12
000000000001d9df	popq	%r11
000000000001d9e1	popq	%r10
000000000001d9e3	popq	%r9
000000000001d9e5	popq	%r8
000000000001d9e7	popq	%rcx
000000000001d9e8	popq	%rdx
000000000001d9e9	popq	%rsi
000000000001d9ea	popq	%rdi
000000000001d9eb	popq	%rbx
000000000001d9ec	popq	%rbp
000000000001d9ed	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture3endEv:
000000000001d9ef	pushq	%rbp
000000000001d9f0	movq	%rsp, %rbp
000000000001d9f3	pushq	%rbx
000000000001d9f4	pushq	%rdi
000000000001d9f5	pushq	%rsi
000000000001d9f6	pushq	%rdx
000000000001d9f7	pushq	%rcx
000000000001d9f8	pushq	%r8
000000000001d9fa	pushq	%r9
000000000001d9fc	pushq	%r10
000000000001d9fe	pushq	%r11
000000000001da00	pushq	%r12
000000000001da02	pushq	%r13
000000000001da04	pushq	%r14
000000000001da06	pushq	%r15
000000000001da08	subq	$0x10, %rsp
000000000001da0c	movss	%xmm0, (%rsp)
000000000001da11	subq	$0x10, %rsp
000000000001da15	movss	%xmm1, (%rsp)
000000000001da1a	pushq	%rsi
000000000001da1b	pushq	%rdi
000000000001da1c	callq	__Z7getBasev ## getBase()
000000000001da21	addq	$0x35d2c0, %rax
000000000001da27	popq	%rdi
000000000001da28	popq	%rsi
000000000001da29	movss	(%rsp), %xmm1
000000000001da2e	addq	$0x10, %rsp
000000000001da32	movss	(%rsp), %xmm0
000000000001da37	addq	$0x10, %rsp
000000000001da3b	popq	%r15
000000000001da3d	popq	%r14
000000000001da3f	popq	%r13
000000000001da41	popq	%r12
000000000001da43	popq	%r11
000000000001da45	popq	%r10
000000000001da47	popq	%r9
000000000001da49	popq	%r8
000000000001da4b	popq	%rcx
000000000001da4c	popq	%rdx
000000000001da4d	popq	%rsi
000000000001da4e	popq	%rdi
000000000001da4f	popq	%rbx
000000000001da50	popq	%rbp
000000000001da51	jmpq	*%rax
__ZN7cocos2d15CCRenderTexture10newCCImageEb:
000000000001da53	pushq	%rbp
000000000001da54	movq	%rsp, %rbp
000000000001da57	pushq	%rbx
000000000001da58	pushq	%rdi
000000000001da59	pushq	%rsi
000000000001da5a	pushq	%rdx
000000000001da5b	pushq	%rcx
000000000001da5c	pushq	%r8
000000000001da5e	pushq	%r9
000000000001da60	pushq	%r10
000000000001da62	pushq	%r11
000000000001da64	pushq	%r12
000000000001da66	pushq	%r13
000000000001da68	pushq	%r14
000000000001da6a	pushq	%r15
000000000001da6c	subq	$0x10, %rsp
000000000001da70	movss	%xmm0, (%rsp)
000000000001da75	subq	$0x10, %rsp
000000000001da79	movss	%xmm1, (%rsp)
000000000001da7e	pushq	%rsi
000000000001da7f	pushq	%rdi
000000000001da80	callq	__Z7getBasev ## getBase()
000000000001da85	addq	$0x35d7d0, %rax
000000000001da8b	popq	%rdi
000000000001da8c	popq	%rsi
000000000001da8d	movss	(%rsp), %xmm1
000000000001da92	addq	$0x10, %rsp
000000000001da96	movss	(%rsp), %xmm0
000000000001da9b	addq	$0x10, %rsp
000000000001da9f	popq	%r15
000000000001daa1	popq	%r14
000000000001daa3	popq	%r13
000000000001daa5	popq	%r12
000000000001daa7	popq	%r11
000000000001daa9	popq	%r10
000000000001daab	popq	%r9
000000000001daad	popq	%r8
000000000001daaf	popq	%rcx
000000000001dab0	popq	%rdx
000000000001dab1	popq	%rsi
000000000001dab2	popq	%rdi
000000000001dab3	popq	%rbx
000000000001dab4	popq	%rbp
000000000001dab5	jmpq	*%rax
_sexyRender:
000000000001dab7	pushq	%rbp
000000000001dab8	movq	%rsp, %rbp
000000000001dabb	pushq	%rbx
000000000001dabc	pushq	%rdi
000000000001dabd	pushq	%rsi
000000000001dabe	pushq	%rdx
000000000001dabf	pushq	%rcx
000000000001dac0	pushq	%r8
000000000001dac2	pushq	%r9
000000000001dac4	pushq	%r10
000000000001dac6	pushq	%r11
000000000001dac8	pushq	%r12
000000000001daca	pushq	%r13
000000000001dacc	pushq	%r14
000000000001dace	pushq	%r15
000000000001dad0	subq	$0x10, %rsp
000000000001dad4	movss	%xmm0, (%rsp)
000000000001dad9	subq	$0x10, %rsp
000000000001dadd	movss	%xmm1, (%rsp)
000000000001dae2	pushq	%rsi
000000000001dae3	pushq	%rdi
000000000001dae4	callq	__Z7getBasev ## getBase()
000000000001dae9	addq	$0x274b50, %rax
000000000001daef	popq	%rdi
000000000001daf0	popq	%rsi
000000000001daf1	movss	(%rsp), %xmm1
000000000001daf6	addq	$0x10, %rsp
000000000001dafa	movss	(%rsp), %xmm0
000000000001daff	addq	$0x10, %rsp
000000000001db03	popq	%r15
000000000001db05	popq	%r14
000000000001db07	popq	%r13
000000000001db09	popq	%r12
000000000001db0b	popq	%r11
000000000001db0d	popq	%r10
000000000001db0f	popq	%r9
000000000001db11	popq	%r8
000000000001db13	popq	%rcx
000000000001db14	popq	%rdx
000000000001db15	popq	%rsi
000000000001db16	popq	%rdi
000000000001db17	popq	%rbx
000000000001db18	popq	%rbp
000000000001db19	jmpq	*%rax
__Z14setupTypeinfosv:
000000000001db1b	pushq	%rbp
000000000001db1c	movq	%rsp, %rbp
000000000001db1f	callq	__Z7getBasev ## getBase()
000000000001db24	addq	$0x624f70, %rax
000000000001db2a	movq	%rax, __ZTIN7cocos2d6CCNodeE(%rip) ## typeinfo for cocos2d::CCNode
000000000001db31	callq	__Z7getBasev ## getBase()
000000000001db36	addq	$0x65d870, %rax
000000000001db3c	movq	%rax, %rsi
000000000001db3f	leaq	__ZTI12FLAlertLayer(%rip), %rdi ## typeinfo for FLAlertLayer
000000000001db46	movl	$0x28, %edx
000000000001db4b	callq	0x279c0 ## symbol stub for: _memcpy
000000000001db50	popq	%rbp
000000000001db51	retq
000000000001db52	nop
000000000001db53	nop
000000000001db54	nop
000000000001db55	nop
000000000001db56	nop
000000000001db57	nop
000000000001db58	nop
000000000001db59	nop
000000000001db5a	nop
000000000001db5b	nop
000000000001db5c	nop
000000000001db5d	nop
000000000001db5e	nop
000000000001db5f	nop
__ZN5Cacao16relativePositionEdd:
000000000001db60	pushq	%rbp
000000000001db61	movq	%rsp, %rbp
000000000001db64	subq	$0x30, %rsp
000000000001db68	movq	%rdi, %rax
000000000001db6b	movsd	%xmm0, -0x8(%rbp)
000000000001db70	movsd	%xmm1, -0x10(%rbp)
000000000001db75	movq	%rdi, -0x28(%rbp)
000000000001db79	movq	%rax, -0x30(%rbp)
000000000001db7d	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
000000000001db82	leaq	-0x18(%rbp), %rdi
000000000001db86	movq	%rax, %rsi
000000000001db89	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
000000000001db8e	movsd	0x4ada2(%rip), %xmm0
000000000001db96	movss	-0x18(%rbp), %xmm1
000000000001db9b	cvtss2sd	%xmm1, %xmm1
000000000001db9f	movsd	-0x8(%rbp), %xmm2
000000000001dba4	divsd	%xmm0, %xmm2
000000000001dba8	mulsd	%xmm2, %xmm1
000000000001dbac	cvtsd2ss	%xmm1, %xmm1
000000000001dbb0	movss	%xmm1, -0x1c(%rbp)
000000000001dbb5	movss	-0x14(%rbp), %xmm1
000000000001dbba	cvtss2sd	%xmm1, %xmm1
000000000001dbbe	movsd	-0x10(%rbp), %xmm2
000000000001dbc3	divsd	%xmm0, %xmm2
000000000001dbc7	mulsd	%xmm2, %xmm1
000000000001dbcb	cvtsd2ss	%xmm1, %xmm0
000000000001dbcf	movss	%xmm0, -0x20(%rbp)
000000000001dbd4	movq	-0x28(%rbp), %rdi
000000000001dbd8	callq	__ZN7cocos2d7CCPointC1Ev ## cocos2d::CCPoint::CCPoint()
000000000001dbdd	movss	-0x1c(%rbp), %xmm0
000000000001dbe2	movq	-0x28(%rbp), %rax
000000000001dbe6	movss	%xmm0, (%rax)
000000000001dbea	movss	-0x20(%rbp), %xmm0
000000000001dbef	movss	%xmm0, 0x4(%rax)
000000000001dbf4	movq	-0x30(%rbp), %rax
000000000001dbf8	addq	$0x30, %rsp
000000000001dbfc	popq	%rbp
000000000001dbfd	retq
000000000001dbfe	nop
__ZN5Cacao13addedPositionEdd:
000000000001dc00	pushq	%rbp
000000000001dc01	movq	%rsp, %rbp
000000000001dc04	subq	$0x30, %rsp
000000000001dc08	movq	%rdi, %rax
000000000001dc0b	movsd	%xmm0, -0x8(%rbp)
000000000001dc10	movsd	%xmm1, -0x10(%rbp)
000000000001dc15	movq	%rdi, -0x28(%rbp)
000000000001dc19	movq	%rax, -0x30(%rbp)
000000000001dc1d	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
000000000001dc22	leaq	-0x18(%rbp), %rdi
000000000001dc26	movq	%rax, %rsi
000000000001dc29	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
000000000001dc2e	movss	0x4ad1a(%rip), %xmm0
000000000001dc36	movss	-0x18(%rbp), %xmm1
000000000001dc3b	divss	%xmm0, %xmm1
000000000001dc3f	cvtss2sd	%xmm1, %xmm1
000000000001dc43	addsd	-0x8(%rbp), %xmm1
000000000001dc48	cvtsd2ss	%xmm1, %xmm1
000000000001dc4c	movss	%xmm1, -0x1c(%rbp)
000000000001dc51	movss	-0x14(%rbp), %xmm1
000000000001dc56	divss	%xmm0, %xmm1
000000000001dc5a	cvtss2sd	%xmm1, %xmm0
000000000001dc5e	addsd	-0x10(%rbp), %xmm0
000000000001dc63	cvtsd2ss	%xmm0, %xmm0
000000000001dc67	movss	%xmm0, -0x20(%rbp)
000000000001dc6c	movq	-0x28(%rbp), %rdi
000000000001dc70	callq	__ZN7cocos2d7CCPointC1Ev ## cocos2d::CCPoint::CCPoint()
000000000001dc75	movss	-0x1c(%rbp), %xmm0
000000000001dc7a	movq	-0x28(%rbp), %rax
000000000001dc7e	movss	%xmm0, (%rax)
000000000001dc82	movss	-0x20(%rbp), %xmm0
000000000001dc87	movss	%xmm0, 0x4(%rax)
000000000001dc8c	movq	-0x30(%rbp), %rax
000000000001dc90	addq	$0x30, %rsp
000000000001dc94	popq	%rbp
000000000001dc95	retq
000000000001dc96	nopw	%cs:(%rax,%rax)
__ZN5Cacao13spriteFromPngEPhi:
000000000001dca0	pushq	%rbp
000000000001dca1	movq	%rsp, %rbp
000000000001dca4	subq	$0xb0, %rsp
000000000001dcab	movq	%rdi, -0x8(%rbp)
000000000001dcaf	movl	%esi, -0xc(%rbp)
000000000001dcb2	movl	$0x40, %edi
000000000001dcb7	callq	0x27924 ## symbol stub for: __Znwm
000000000001dcbc	movq	%rax, %rdi
000000000001dcbf	movq	%rax, %rcx
000000000001dcc2	movq	%rdi, -0x50(%rbp)
000000000001dcc6	movq	%rax, %rdi
000000000001dcc9	movq	%rcx, -0x58(%rbp)
000000000001dccd	callq	__ZN7cocos2d7CCImageC1Ev ## cocos2d::CCImage::CCImage()
000000000001dcd2	jmp	0x1dcd7
000000000001dcd7	movq	-0x58(%rbp), %rax
000000000001dcdb	movq	%rax, -0x18(%rbp)
000000000001dcdf	movq	-0x18(%rbp), %rdi
000000000001dce3	movq	-0x8(%rbp), %rsi
000000000001dce7	movl	-0xc(%rbp), %edx
000000000001dcea	movq	%rsp, %rcx
000000000001dced	movl	$0x1, (%rcx)
000000000001dcf3	movl	$0x1, %r8d
000000000001dcf9	movl	%r8d, %ecx
000000000001dcfc	movl	%r8d, -0x5c(%rbp)
000000000001dd00	movl	-0x5c(%rbp), %r9d
000000000001dd04	callq	__ZN7cocos2d7CCImage17initWithImageDataEPviNS0_12EImageFormatEiii ## cocos2d::CCImage::initWithImageData(void*, int, cocos2d::CCImage::EImageFormat, int, int, int)
000000000001dd09	movl	$0x58, %edi
000000000001dd0e	movb	%al, -0x5d(%rbp)
000000000001dd11	callq	0x27924 ## symbol stub for: __Znwm
000000000001dd16	movq	%rax, %rsi
000000000001dd19	movq	%rax, %rdi
000000000001dd1c	movq	%rdi, -0x68(%rbp)
000000000001dd20	movq	%rax, %rdi
000000000001dd23	movq	%rsi, -0x70(%rbp)
000000000001dd27	callq	__ZN7cocos2d11CCTexture2DC1Ev ## cocos2d::CCTexture2D::CCTexture2D()
000000000001dd2c	jmp	0x1dd31
000000000001dd31	movq	-0x68(%rbp), %rax
000000000001dd35	movq	%rax, -0x30(%rbp)
000000000001dd39	movq	-0x30(%rbp), %rdi
000000000001dd3d	movq	-0x18(%rbp), %rsi
000000000001dd41	callq	__ZN7cocos2d11CCTexture2D13initWithImageEPNS_7CCImageE ## cocos2d::CCTexture2D::initWithImage(cocos2d::CCImage*)
000000000001dd46	movq	-0x18(%rbp), %rdi
000000000001dd4a	movb	%al, -0x71(%rbp)
000000000001dd4d	callq	0x27354 ## symbol stub for: __ZNK7cocos2d7CCImage8getWidthEv
000000000001dd52	movzwl	%ax, %ecx
000000000001dd55	cvtsi2ssl	%ecx, %xmm2
000000000001dd59	movq	-0x18(%rbp), %rdi
000000000001dd5d	movss	%xmm2, -0x78(%rbp)
000000000001dd62	callq	0x2735a ## symbol stub for: __ZNK7cocos2d7CCImage9getHeightEv
000000000001dd67	movzwl	%ax, %ecx
000000000001dd6a	cvtsi2ssl	%ecx, %xmm3
000000000001dd6e	leaq	-0x40(%rbp), %rdi
000000000001dd72	xorps	%xmm2, %xmm2
000000000001dd75	movaps	%xmm2, %xmm0
000000000001dd78	movaps	%xmm2, %xmm1
000000000001dd7b	movss	-0x78(%rbp), %xmm2
000000000001dd80	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001dd85	movq	-0x18(%rbp), %rdi
000000000001dd89	callq	0x27354 ## symbol stub for: __ZNK7cocos2d7CCImage8getWidthEv
000000000001dd8e	movq	0x54293(%rip), %rdi ## literal pool symbol address: __ZSt4cout
000000000001dd95	movzwl	%ax, %esi
000000000001dd98	callq	0x27504 ## symbol stub for: __ZNSolsEt
000000000001dd9d	movq	%rax, %rdi
000000000001dda0	leaq	0x4d734(%rip), %rsi ## literal pool for: "\n"
000000000001dda7	callq	0x27918 ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000001ddac	movq	-0x18(%rbp), %rdi
000000000001ddb0	movq	%rax, -0x80(%rbp)
000000000001ddb4	callq	0x2735a ## symbol stub for: __ZNK7cocos2d7CCImage9getHeightEv
000000000001ddb9	movq	0x54268(%rip), %rdi ## literal pool symbol address: __ZSt4cout
000000000001ddc0	movzwl	%ax, %esi
000000000001ddc3	callq	0x27504 ## symbol stub for: __ZNSolsEt
000000000001ddc8	movq	%rax, %rdi
000000000001ddcb	leaq	0x4d709(%rip), %rsi ## literal pool for: "\n"
000000000001ddd2	callq	0x27918 ## symbol stub for: __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
000000000001ddd7	movq	%rax, -0x88(%rbp)
000000000001ddde	callq	__ZN7cocos2d8CCSprite6createEv ## cocos2d::CCSprite::create()
000000000001dde3	movq	%rax, -0x48(%rbp)
000000000001dde7	movq	-0x48(%rbp), %rax
000000000001ddeb	movq	-0x30(%rbp), %rsi
000000000001ddef	movq	(%rax), %rdi
000000000001ddf2	movq	%rdi, -0x90(%rbp)
000000000001ddf9	movq	%rax, %rdi
000000000001ddfc	leaq	-0x40(%rbp), %rdx
000000000001de00	movq	-0x90(%rbp), %rax
000000000001de07	callq	*0x3d0(%rax)
000000000001de0d	movq	-0x48(%rbp), %rdx
000000000001de11	movq	-0x30(%rbp), %rsi
000000000001de15	movq	(%rdx), %rdi
000000000001de18	movq	%rdi, -0x98(%rbp)
000000000001de1f	movq	%rdx, %rdi
000000000001de22	movq	-0x98(%rbp), %rdx
000000000001de29	movb	%al, -0x99(%rbp)
000000000001de2f	callq	*0x400(%rdx)
000000000001de35	movq	-0x48(%rbp), %rax
000000000001de39	addq	$0xb0, %rsp
000000000001de40	popq	%rbp
000000000001de41	retq
000000000001de42	movl	%edx, %ecx
000000000001de44	movq	%rax, -0x20(%rbp)
000000000001de48	movl	%ecx, -0x24(%rbp)
000000000001de4b	movq	-0x50(%rbp), %rdi
000000000001de4f	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001de54	jmp	0x1de6b
000000000001de59	movl	%edx, %ecx
000000000001de5b	movq	%rax, -0x20(%rbp)
000000000001de5f	movl	%ecx, -0x24(%rbp)
000000000001de62	movq	-0x70(%rbp), %rdi
000000000001de66	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001de6b	movq	-0x20(%rbp), %rdi
000000000001de6f	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001de74	ud2
000000000001de76	nopw	%cs:(%rax,%rax)
__ZNK7cocos2d7CCImage8getWidthEv:
000000000001de80	pushq	%rbp
000000000001de81	movq	%rsp, %rbp
000000000001de84	movq	%rdi, -0x8(%rbp)
000000000001de88	movq	-0x8(%rbp), %rdi
000000000001de8c	movzwl	0x24(%rdi), %eax
000000000001de90	popq	%rbp
000000000001de91	retq
000000000001de92	nopw	%cs:(%rax,%rax)
000000000001de9c	nopl	(%rax)
__ZNK7cocos2d7CCImage9getHeightEv:
000000000001dea0	pushq	%rbp
000000000001dea1	movq	%rsp, %rbp
000000000001dea4	movq	%rdi, -0x8(%rbp)
000000000001dea8	movq	-0x8(%rbp), %rdi
000000000001deac	movzwl	0x26(%rdi), %eax
000000000001deb0	popq	%rbp
000000000001deb1	retq
000000000001deb2	nopw	%cs:(%rax,%rax)
000000000001debc	nopl	(%rax)
__ZN5Cacao11addGDObjectEPKci:
000000000001dec0	pushq	%rbp
000000000001dec1	movq	%rsp, %rbp
000000000001dec4	subq	$0x80, %rsp
000000000001decb	movq	%rdi, -0x8(%rbp)
000000000001decf	movl	%esi, -0xc(%rbp)
000000000001ded2	callq	__ZN13ObjectToolbox11sharedStateEv ## ObjectToolbox::sharedState()
000000000001ded7	movq	%rax, -0x18(%rbp)
000000000001dedb	movq	-0x18(%rbp), %rdi
000000000001dedf	callq	0x27204 ## symbol stub for: __ZN13ObjectToolbox14_intKeyObjectsEv
000000000001dee4	movq	(%rax), %rax
000000000001dee7	movq	%rax, -0x20(%rbp)
000000000001deeb	movq	-0x18(%rbp), %rdi
000000000001deef	callq	0x2720a ## symbol stub for: __ZN13ObjectToolbox14_strKeyObjectsEv
000000000001def4	movq	(%rax), %rax
000000000001def7	movq	%rax, -0x28(%rbp)
000000000001defb	movl	-0xc(%rbp), %esi
000000000001defe	leaq	0x4d5d8(%rip), %rdi ## literal pool for: "%i"
000000000001df05	xorl	%ecx, %ecx
000000000001df07	movb	%cl, %dl
000000000001df09	movb	%dl, %al
000000000001df0b	movb	%dl, -0x55(%rbp)
000000000001df0e	callq	__ZN7cocos2d8CCString16createWithFormatEPKcz ## cocos2d::CCString::createWithFormat(char const*, ...)
000000000001df13	movq	%rax, -0x30(%rbp)
000000000001df17	movq	-0x8(%rbp), %rsi
000000000001df1b	leaq	0x4d5be(%rip), %rdi ## literal pool for: "%s"
000000000001df22	movb	-0x55(%rbp), %al
000000000001df25	callq	__ZN7cocos2d8CCString16createWithFormatEPKcz ## cocos2d::CCString::createWithFormat(char const*, ...)
000000000001df2a	movq	%rax, -0x38(%rbp)
000000000001df2e	movq	-0x28(%rbp), %rdi
000000000001df32	movq	-0x30(%rbp), %rsi
000000000001df36	movq	-0x8(%rbp), %rax
000000000001df3a	leaq	-0x48(%rbp), %r8
000000000001df3e	movq	%rdi, -0x60(%rbp)
000000000001df42	movq	%r8, %rdi
000000000001df45	movq	%rsi, -0x68(%rbp)
000000000001df49	movq	%rax, -0x70(%rbp)
000000000001df4d	movq	%r8, -0x78(%rbp)
000000000001df51	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
000000000001df56	leaq	-0x40(%rbp), %rdi
000000000001df5a	movq	-0x70(%rbp), %rsi
000000000001df5e	movq	-0x78(%rbp), %rdx
000000000001df62	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000001df67	jmp	0x1df6c
000000000001df6c	leaq	-0x40(%rbp), %rdx
000000000001df70	movq	-0x60(%rbp), %rdi
000000000001df74	movq	-0x68(%rbp), %rsi
000000000001df78	callq	__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectERKSs ## cocos2d::CCDictionary::setObject(cocos2d::CCObject*, std::string const&)
000000000001df7d	jmp	0x1df82
000000000001df82	leaq	-0x40(%rbp), %rdi
000000000001df86	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001df8b	leaq	-0x48(%rbp), %rdi
000000000001df8f	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001df94	movq	-0x20(%rbp), %rdi
000000000001df98	movq	-0x38(%rbp), %rax
000000000001df9c	movslq	-0xc(%rbp), %rdx
000000000001dfa0	movq	%rax, %rsi
000000000001dfa3	callq	__ZN7cocos2d12CCDictionary9setObjectEPNS_8CCObjectEl ## cocos2d::CCDictionary::setObject(cocos2d::CCObject*, long)
000000000001dfa8	addq	$0x80, %rsp
000000000001dfaf	popq	%rbp
000000000001dfb0	retq
000000000001dfb1	movl	%edx, %ecx
000000000001dfb3	movq	%rax, -0x50(%rbp)
000000000001dfb7	movl	%ecx, -0x54(%rbp)
000000000001dfba	jmp	0x1dfd1
000000000001dfbf	movl	%edx, %ecx
000000000001dfc1	movq	%rax, -0x50(%rbp)
000000000001dfc5	movl	%ecx, -0x54(%rbp)
000000000001dfc8	leaq	-0x40(%rbp), %rdi
000000000001dfcc	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001dfd1	leaq	-0x48(%rbp), %rdi
000000000001dfd5	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001dfda	movq	-0x50(%rbp), %rdi
000000000001dfde	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001dfe3	ud2
000000000001dfe5	nopw	%cs:(%rax,%rax)
000000000001dfef	nop
__ZN13ObjectToolbox14_intKeyObjectsEv:
000000000001dff0	pushq	%rbp
000000000001dff1	movq	%rsp, %rbp
000000000001dff4	movq	%rdi, -0x8(%rbp)
000000000001dff8	movq	-0x8(%rbp), %rdi
000000000001dffc	addq	$0x128, %rdi
000000000001e003	movq	%rdi, %rax
000000000001e006	popq	%rbp
000000000001e007	retq
000000000001e008	nopl	(%rax,%rax)
__ZN13ObjectToolbox14_strKeyObjectsEv:
000000000001e010	pushq	%rbp
000000000001e011	movq	%rsp, %rbp
000000000001e014	movq	%rdi, -0x8(%rbp)
000000000001e018	movq	-0x8(%rbp), %rdi
000000000001e01c	addq	$0x120, %rdi
000000000001e023	movq	%rdi, %rax
000000000001e026	popq	%rbp
000000000001e027	retq
000000000001e028	nopl	(%rax,%rax)
__ZN5Cacao13createTogglerEPN7cocos2d8CCObjectEMS1_FvS2_E:
000000000001e030	pushq	%rbp
000000000001e031	movq	%rsp, %rbp
000000000001e034	subq	$0x50, %rsp
000000000001e038	movq	%rsi, -0x10(%rbp)
000000000001e03c	movq	%rdx, -0x8(%rbp)
000000000001e040	movq	-0x10(%rbp), %rdx
000000000001e044	movq	-0x8(%rbp), %rsi
000000000001e048	movq	%rdi, -0x18(%rbp)
000000000001e04c	movq	%rsi, -0x20(%rbp)
000000000001e050	movq	%rdx, -0x28(%rbp)
000000000001e054	leaq	0x4d488(%rip), %rdi ## literal pool for: "GJ_checkOn_001.png"
000000000001e05b	callq	__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc ## cocos2d::CCSprite::createWithSpriteFrameName(char const*)
000000000001e060	movq	%rax, -0x30(%rbp)
000000000001e064	leaq	0x4d48b(%rip), %rdi ## literal pool for: "GJ_checkOff_001.png"
000000000001e06b	callq	__ZN7cocos2d8CCSprite25createWithSpriteFrameNameEPKc ## cocos2d::CCSprite::createWithSpriteFrameName(char const*)
000000000001e070	movq	%rax, -0x38(%rbp)
000000000001e074	movq	-0x38(%rbp), %rdi
000000000001e078	movq	-0x30(%rbp), %rsi
000000000001e07c	movq	-0x18(%rbp), %rdx
000000000001e080	movq	-0x28(%rbp), %rax
000000000001e084	movq	-0x20(%rbp), %rcx
000000000001e088	movq	%rcx, -0x40(%rbp)
000000000001e08c	movq	%rax, -0x48(%rbp)
000000000001e090	movq	-0x48(%rbp), %rcx
000000000001e094	movq	-0x40(%rbp), %r8
000000000001e098	callq	__ZN17CCMenuItemToggler6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemToggler::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001e09d	addq	$0x50, %rsp
000000000001e0a1	popq	%rbp
000000000001e0a2	retq
000000000001e0a3	nopw	%cs:(%rax,%rax)
000000000001e0ad	nopl	(%rax)
__ZN5Cacao16FLDialogDelegate8onSubmitEPNS_14FLDialogHelperERKSs:
000000000001e0b0	pushq	%rbp
000000000001e0b1	movq	%rsp, %rbp
000000000001e0b4	subq	$0x20, %rsp
000000000001e0b8	movq	%rdi, -0x8(%rbp)
000000000001e0bc	movq	%rsi, -0x10(%rbp)
000000000001e0c0	movq	%rdx, -0x18(%rbp)
000000000001e0c4	movq	-0x10(%rbp), %rdi
000000000001e0c8	callq	__ZN5Cacao14FLDialogHelper5closeEv ## Cacao::FLDialogHelper::close()
000000000001e0cd	addq	$0x20, %rsp
000000000001e0d1	popq	%rbp
000000000001e0d2	retq
000000000001e0d3	nopw	%cs:(%rax,%rax)
000000000001e0dd	nopl	(%rax)
__ZN5Cacao14FLDialogHelper5closeEv:
000000000001e0e0	pushq	%rbp
000000000001e0e1	movq	%rsp, %rbp
000000000001e0e4	subq	$0x10, %rsp
000000000001e0e8	movq	%rdi, -0x8(%rbp)
000000000001e0ec	movq	-0x8(%rbp), %rdi
000000000001e0f0	movq	0x120(%rdi), %rdi
000000000001e0f7	movq	(%rdi), %rax
000000000001e0fa	callq	*0x430(%rax)
000000000001e100	addq	$0x10, %rsp
000000000001e104	popq	%rbp
000000000001e105	retq
000000000001e106	nopw	%cs:(%rax,%rax)
__ZN5Cacao16FLDialogDelegate8onCancelEPNS_14FLDialogHelperE:
000000000001e110	pushq	%rbp
000000000001e111	movq	%rsp, %rbp
000000000001e114	subq	$0x10, %rsp
000000000001e118	movq	%rdi, -0x8(%rbp)
000000000001e11c	movq	%rsi, -0x10(%rbp)
000000000001e120	movq	-0x10(%rbp), %rdi
000000000001e124	callq	__ZN5Cacao14FLDialogHelper5closeEv ## Cacao::FLDialogHelper::close()
000000000001e129	addq	$0x10, %rsp
000000000001e12d	popq	%rbp
000000000001e12e	retq
000000000001e12f	nop
__ZN5Cacao16FLDialogDelegate6onShowEPNS_14FLDialogHelperE:
000000000001e130	pushq	%rbp
000000000001e131	movq	%rsp, %rbp
000000000001e134	movq	%rdi, -0x8(%rbp)
000000000001e138	movq	%rsi, -0x10(%rbp)
000000000001e13c	popq	%rbp
000000000001e13d	retq
000000000001e13e	nop
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_S4_:
000000000001e140	pushq	%rbp
000000000001e141	movq	%rsp, %rbp
000000000001e144	subq	$0x70, %rsp
000000000001e148	movq	%rdi, -0x10(%rbp)
000000000001e14c	movq	%rsi, -0x18(%rbp)
000000000001e150	movq	%rdx, -0x20(%rbp)
000000000001e154	movq	%rcx, -0x28(%rbp)
000000000001e158	movq	%r8, -0x30(%rbp)
000000000001e15c	movl	$0x140, %ecx
000000000001e161	movq	%rcx, %rdi
000000000001e164	movq	%rcx, -0x50(%rbp)
000000000001e168	callq	0x27924 ## symbol stub for: __Znwm
000000000001e16d	movq	%rax, %rcx
000000000001e170	movq	%rax, %rdx
000000000001e173	movq	%rax, %rdi
000000000001e176	movq	-0x50(%rbp), %rsi
000000000001e17a	movq	%rax, -0x58(%rbp)
000000000001e17e	movq	%rcx, -0x60(%rbp)
000000000001e182	movq	%rdx, -0x68(%rbp)
000000000001e186	callq	0x27930 ## symbol stub for: ___bzero
000000000001e18b	movq	-0x58(%rbp), %rdi
000000000001e18f	callq	__ZN5Cacao14FLDialogHelperC1Ev ## Cacao::FLDialogHelper::FLDialogHelper()
000000000001e194	jmp	0x1e199
000000000001e199	movq	-0x68(%rbp), %rax
000000000001e19d	movq	%rax, -0x38(%rbp)
000000000001e1a1	movq	-0x38(%rbp), %rdi
000000000001e1a5	movq	-0x10(%rbp), %rsi
000000000001e1a9	movq	-0x18(%rbp), %rdx
000000000001e1ad	movq	-0x20(%rbp), %rcx
000000000001e1b1	movq	-0x28(%rbp), %r8
000000000001e1b5	movq	-0x30(%rbp), %r9
000000000001e1b9	callq	__ZN5Cacao14FLDialogHelper13initWithStuffEPNS_16FLDialogDelegateEPKcS4_S4_S4_ ## Cacao::FLDialogHelper::initWithStuff(Cacao::FLDialogDelegate*, char const*, char const*, char const*, char const*)
000000000001e1be	testb	$0x1, %al
000000000001e1c0	jne	0x1e1cb
000000000001e1c6	jmp	0x1e1ef
000000000001e1cb	movq	-0x38(%rbp), %rax
000000000001e1cf	movq	%rax, -0x8(%rbp)
000000000001e1d3	jmp	0x1e216
000000000001e1d8	movl	%edx, %ecx
000000000001e1da	movq	%rax, -0x40(%rbp)
000000000001e1de	movl	%ecx, -0x44(%rbp)
000000000001e1e1	movq	-0x60(%rbp), %rdi
000000000001e1e5	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001e1ea	jmp	0x1e220
000000000001e1ef	movq	-0x38(%rbp), %rax
000000000001e1f3	cmpq	$0x0, %rax
000000000001e1f7	movq	%rax, -0x70(%rbp)
000000000001e1fb	je	0x1e20e
000000000001e201	movq	-0x70(%rbp), %rax
000000000001e205	movq	(%rax), %rcx
000000000001e208	movq	%rax, %rdi
000000000001e20b	callq	*0x10(%rcx)
000000000001e20e	movq	$0x0, -0x8(%rbp)
000000000001e216	movq	-0x8(%rbp), %rax
000000000001e21a	addq	$0x70, %rsp
000000000001e21e	popq	%rbp
000000000001e21f	retq
000000000001e220	movq	-0x40(%rbp), %rdi
000000000001e224	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001e229	ud2
000000000001e22b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperC1Ev:
000000000001e230	pushq	%rbp
000000000001e231	movq	%rsp, %rbp
000000000001e234	subq	$0x10, %rsp
000000000001e238	movq	%rdi, -0x8(%rbp)
000000000001e23c	movq	-0x8(%rbp), %rdi
000000000001e240	callq	__ZN5Cacao14FLDialogHelperC2Ev ## Cacao::FLDialogHelper::FLDialogHelper()
000000000001e245	addq	$0x10, %rsp
000000000001e249	popq	%rbp
000000000001e24a	retq
000000000001e24b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelper13initWithStuffEPNS_16FLDialogDelegateEPKcS4_S4_S4_:
000000000001e250	pushq	%rbp
000000000001e251	movq	%rsp, %rbp
000000000001e254	subq	$0x230, %rsp
000000000001e25b	movq	%rdi, -0x8(%rbp)
000000000001e25f	movq	%rsi, -0x10(%rbp)
000000000001e263	movq	%rdx, -0x18(%rbp)
000000000001e267	movq	%rcx, -0x20(%rbp)
000000000001e26b	movq	%r8, -0x28(%rbp)
000000000001e26f	movq	%r9, -0x30(%rbp)
000000000001e273	movq	-0x8(%rbp), %rcx
000000000001e277	cmpq	$0x0, -0x10(%rbp)
000000000001e27c	movq	%rcx, -0x170(%rbp)
000000000001e283	je	0x1e2a0
000000000001e289	movq	-0x10(%rbp), %rax
000000000001e28d	movq	-0x170(%rbp), %rcx
000000000001e294	movq	%rax, 0x138(%rcx)
000000000001e29b	jmp	0x1e2e1
000000000001e2a0	movl	$0x8, %edi
000000000001e2a5	callq	0x27924 ## symbol stub for: __Znwm
000000000001e2aa	xorl	%esi, %esi
000000000001e2ac	movq	%rax, %rdi
000000000001e2af	movl	$0x8, %edx
000000000001e2b4	movq	%rax, -0x178(%rbp)
000000000001e2bb	callq	0x279cc ## symbol stub for: _memset
000000000001e2c0	movq	-0x178(%rbp), %rdi
000000000001e2c7	callq	__ZN5Cacao16FLDialogDelegateC1Ev ## Cacao::FLDialogDelegate::FLDialogDelegate()
000000000001e2cc	movq	-0x170(%rbp), %rax
000000000001e2d3	movq	-0x178(%rbp), %rdx
000000000001e2da	movq	%rdx, 0x138(%rax)
000000000001e2e1	leaq	-0x40(%rbp), %rax
000000000001e2e5	movq	%rax, %rdi
000000000001e2e8	movq	%rax, -0x180(%rbp)
000000000001e2ef	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
000000000001e2f4	leaq	0x4d236(%rip), %rsi ## literal pool for: "ok"
000000000001e2fb	leaq	-0x38(%rbp), %rdi
000000000001e2ff	movq	-0x180(%rbp), %rdx
000000000001e306	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000001e30b	jmp	0x1e310
000000000001e310	leaq	0x4d21a(%rip), %rax ## literal pool for: "ok"
000000000001e317	leaq	-0x38(%rbp), %rsi
000000000001e31b	movq	%rax, %rdi
000000000001e31e	movq	%rax, %rdx
000000000001e321	callq	0x271d4 ## symbol stub for: __ZN12FLAlertLayer6createEPKcRKSsS1_
000000000001e326	movq	%rax, -0x188(%rbp)
000000000001e32d	jmp	0x1e332
000000000001e332	movq	-0x170(%rbp), %rax
000000000001e339	movq	-0x188(%rbp), %rcx
000000000001e340	movq	%rcx, 0x120(%rax)
000000000001e347	leaq	-0x38(%rbp), %rdi
000000000001e34b	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001e350	leaq	-0x40(%rbp), %rdi
000000000001e354	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001e359	movq	-0x170(%rbp), %rax
000000000001e360	movq	0x120(%rax), %rdi
000000000001e367	callq	0x271ce ## symbol stub for: __ZN12FLAlertLayer10_mainLayerEv
000000000001e36c	movq	(%rax), %rax
000000000001e36f	movq	-0x170(%rbp), %rcx
000000000001e376	movq	%rax, 0x128(%rcx)
000000000001e37d	movq	0x120(%rcx), %rdi
000000000001e384	callq	0x271ce ## symbol stub for: __ZN12FLAlertLayer10_mainLayerEv
000000000001e389	movq	(%rax), %rax
000000000001e38c	movq	%rax, %rcx
000000000001e38f	movq	(%rax), %rax
000000000001e392	movq	%rcx, %rdi
000000000001e395	callq	*0x1d8(%rax)
000000000001e39b	movq	%rax, -0x58(%rbp)
000000000001e39f	movl	$0x0, -0x5c(%rbp)
000000000001e3a6	movl	-0x5c(%rbp), %eax
000000000001e3a9	movq	-0x58(%rbp), %rdi
000000000001e3ad	movl	%eax, -0x18c(%rbp)
000000000001e3b3	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001e3b8	movl	-0x18c(%rbp), %ecx
000000000001e3be	cmpl	%eax, %ecx
000000000001e3c0	jae	0x1e4af
000000000001e3c6	movq	-0x58(%rbp), %rdi
000000000001e3ca	movl	-0x5c(%rbp), %esi
000000000001e3cd	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001e3d2	movq	%rax, -0x68(%rbp)
000000000001e3d6	callq	__Z7getBasev ## getBase()
000000000001e3db	addq	$0x682fc0, %rax
000000000001e3e1	movq	-0x68(%rbp), %rdi
000000000001e3e5	cmpq	(%rdi), %rax
000000000001e3e8	jne	0x1e487
000000000001e3ee	movq	-0x68(%rbp), %rax
000000000001e3f2	movq	%rax, %rcx
000000000001e3f5	movq	(%rax), %rax
000000000001e3f8	movq	%rcx, %rdi
000000000001e3fb	callq	*0x1d8(%rax)
000000000001e401	movq	%rax, -0x70(%rbp)
000000000001e405	movl	$0x0, -0x74(%rbp)
000000000001e40c	movl	-0x74(%rbp), %eax
000000000001e40f	movq	-0x70(%rbp), %rdi
000000000001e413	movl	%eax, -0x190(%rbp)
000000000001e419	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001e41e	movl	-0x190(%rbp), %ecx
000000000001e424	cmpl	%eax, %ecx
000000000001e426	jae	0x1e482
000000000001e42c	movq	-0x70(%rbp), %rdi
000000000001e430	movl	-0x74(%rbp), %esi
000000000001e433	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001e438	xorl	%esi, %esi
000000000001e43a	movq	%rax, %rdi
000000000001e43d	movq	(%rax), %rax
000000000001e440	callq	*0x148(%rax)
000000000001e446	movl	-0x74(%rbp), %eax
000000000001e449	addl	$0x1, %eax
000000000001e44c	movl	%eax, -0x74(%rbp)
000000000001e44f	jmp	0x1e40c
000000000001e454	movl	%edx, %ecx
000000000001e456	movq	%rax, -0x48(%rbp)
000000000001e45a	movl	%ecx, -0x4c(%rbp)
000000000001e45d	jmp	0x1e474
000000000001e462	movl	%edx, %ecx
000000000001e464	movq	%rax, -0x48(%rbp)
000000000001e468	movl	%ecx, -0x4c(%rbp)
000000000001e46b	leaq	-0x38(%rbp), %rdi
000000000001e46f	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001e474	leaq	-0x40(%rbp), %rdi
000000000001e478	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001e47d	jmp	0x1eb12
000000000001e482	jmp	0x1e49c
000000000001e487	xorl	%esi, %esi
000000000001e489	movq	-0x68(%rbp), %rax
000000000001e48d	movq	%rax, %rcx
000000000001e490	movq	(%rax), %rax
000000000001e493	movq	%rcx, %rdi
000000000001e496	callq	*0x148(%rax)
000000000001e49c	jmp	0x1e4a1
000000000001e4a1	movl	-0x5c(%rbp), %eax
000000000001e4a4	addl	$0x1, %eax
000000000001e4a7	movl	%eax, -0x5c(%rbp)
000000000001e4aa	jmp	0x1e3a6
000000000001e4af	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
000000000001e4b4	leaq	-0x80(%rbp), %rdi
000000000001e4b8	movq	%rax, %rsi
000000000001e4bb	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
000000000001e4c0	leaq	-0x90(%rbp), %rdi
000000000001e4c7	xorps	%xmm0, %xmm0
000000000001e4ca	movss	0x4a48a(%rip), %xmm1
000000000001e4d2	movss	%xmm0, -0x194(%rbp)
000000000001e4da	movss	-0x194(%rbp), %xmm2
000000000001e4e2	movss	%xmm1, -0x198(%rbp)
000000000001e4ea	movaps	%xmm2, %xmm1
000000000001e4ed	movss	-0x198(%rbp), %xmm2
000000000001e4f5	movss	-0x198(%rbp), %xmm3
000000000001e4fd	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000001e502	movl	$0x43070000, -0x94(%rbp)
000000000001e50c	movl	$0x42a00000, -0x98(%rbp)
000000000001e516	movss	-0x80(%rbp), %xmm0
000000000001e51b	movss	-0x7c(%rbp), %xmm1
000000000001e520	movss	0x4a428(%rip), %xmm2
000000000001e528	divss	%xmm2, %xmm0
000000000001e52c	divss	%xmm2, %xmm1
000000000001e530	movss	-0x98(%rbp), %xmm2
000000000001e538	addss	%xmm2, %xmm1
000000000001e53c	leaq	-0xa0(%rbp), %rax
000000000001e543	movq	%rax, %rdi
000000000001e546	movq	%rax, -0x1a0(%rbp)
000000000001e54d	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e552	movss	-0xa0(%rbp), %xmm0
000000000001e55a	movss	-0x9c(%rbp), %xmm1
000000000001e562	cvtss2sd	%xmm1, %xmm1
000000000001e566	movss	-0x94(%rbp), %xmm2
000000000001e56e	cvtss2sd	%xmm2, %xmm2
000000000001e572	movsd	0x4a3c6(%rip), %xmm3
000000000001e57a	divsd	%xmm3, %xmm2
000000000001e57e	addsd	%xmm2, %xmm1
000000000001e582	movsd	0x4a3be(%rip), %xmm2
000000000001e58a	addsd	%xmm2, %xmm1
000000000001e58e	cvtsd2ss	%xmm1, %xmm1
000000000001e592	leaq	-0xa8(%rbp), %rax
000000000001e599	movq	%rax, %rdi
000000000001e59c	movq	%rax, -0x1a8(%rbp)
000000000001e5a3	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e5a8	movss	-0xa0(%rbp), %xmm0
000000000001e5b0	movss	-0x9c(%rbp), %xmm1
000000000001e5b8	movss	0x4a3a0(%rip), %xmm2
000000000001e5c0	addss	%xmm2, %xmm1
000000000001e5c4	leaq	-0xb0(%rbp), %rdi
000000000001e5cb	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e5d0	movq	-0x18(%rbp), %rdi
000000000001e5d4	leaq	0x4cf59(%rip), %rsi ## literal pool for: "bigFont.fnt"
000000000001e5db	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
000000000001e5e0	movq	%rax, -0xb8(%rbp)
000000000001e5e7	movq	-0xb8(%rbp), %rax
000000000001e5ee	movq	(%rax), %rsi
000000000001e5f1	movq	0xb8(%rsi), %rsi
000000000001e5f8	movq	%rax, %rdi
000000000001e5fb	movq	-0x1a8(%rbp), %rax
000000000001e602	movq	%rsi, -0x1b0(%rbp)
000000000001e609	movq	%rax, %rsi
000000000001e60c	movq	-0x1b0(%rbp), %rcx
000000000001e613	callq	*%rcx
000000000001e615	movq	-0xb8(%rbp), %rax
000000000001e61c	movq	(%rax), %rcx
000000000001e61f	movq	0xa0(%rcx), %rcx
000000000001e626	movss	0x4a336(%rip), %xmm0
000000000001e62e	movq	%rax, %rdi
000000000001e631	callq	*%rcx
000000000001e633	movq	-0x170(%rbp), %rax
000000000001e63a	movq	0x128(%rax), %rcx
000000000001e641	movq	-0xb8(%rbp), %rsi
000000000001e648	movq	(%rcx), %rdi
000000000001e64b	movq	0x1b8(%rdi), %rdi
000000000001e652	movq	%rdi, -0x1b8(%rbp)
000000000001e659	movq	%rcx, %rdi
000000000001e65c	movq	-0x1b8(%rbp), %rcx
000000000001e663	callq	*%rcx
000000000001e665	movl	$0x43b40000, -0xbc(%rbp)
000000000001e66f	movl	$0x42480000, -0xc0(%rbp)
000000000001e679	movss	-0xbc(%rbp), %xmm0
000000000001e681	movss	-0xc0(%rbp), %xmm1
000000000001e689	movq	-0x30(%rbp), %rdi
000000000001e68d	leaq	0x4ceac(%rip), %rsi ## literal pool for: "Thonburi"
000000000001e694	xorl	%edx, %edx
000000000001e696	movl	%edx, %ecx
000000000001e698	movl	$0xc, %r8d
000000000001e69e	movl	%edx, -0x1bc(%rbp)
000000000001e6a4	movl	%r8d, %edx
000000000001e6a7	callq	__ZN15CCTextInputNode6createEffPKcS1_iS1_ ## CCTextInputNode::create(float, float, char const*, char const*, int, char const*)
000000000001e6ac	movq	%rax, -0xc8(%rbp)
000000000001e6b3	movq	-0xc8(%rbp), %rax
000000000001e6ba	movq	(%rax), %rcx
000000000001e6bd	movq	0xb8(%rcx), %rcx
000000000001e6c4	movq	%rax, %rdi
000000000001e6c7	movq	-0x1a0(%rbp), %rsi
000000000001e6ce	callq	*%rcx
000000000001e6d0	movq	-0x170(%rbp), %rax
000000000001e6d7	movq	0x128(%rax), %rcx
000000000001e6de	movq	-0xc8(%rbp), %rsi
000000000001e6e5	movq	(%rcx), %rdi
000000000001e6e8	movq	0x1b8(%rdi), %rdi
000000000001e6ef	movq	%rdi, -0x1c8(%rbp)
000000000001e6f6	movq	%rcx, %rdi
000000000001e6f9	movq	-0x1c8(%rbp), %rcx
000000000001e700	callq	*%rcx
000000000001e702	movq	-0xc8(%rbp), %rax
000000000001e709	movq	-0x170(%rbp), %rcx
000000000001e710	movq	%rax, 0x130(%rcx)
000000000001e717	leaq	-0xd0(%rbp), %rax
000000000001e71e	movss	0x4a242(%rip), %xmm0
000000000001e726	movss	0x4a23e(%rip), %xmm1
000000000001e72e	movq	%rax, %rdi
000000000001e731	movq	%rax, -0x1d0(%rbp)
000000000001e738	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e73d	movl	$0xe6, %edx
000000000001e742	movl	$0x96, %ecx
000000000001e747	movl	%edx, %edi
000000000001e749	movl	%edx, %esi
000000000001e74b	callq	__ZN7cocos2dL4ccc4Ehhhh ## cocos2d::ccc4(unsigned char, unsigned char, unsigned char, unsigned char)
000000000001e750	movl	%eax, -0xe0(%rbp)
000000000001e756	leaq	-0xe0(%rbp), %rdi
000000000001e75d	movss	0x4a20b(%rip), %xmm0
000000000001e765	movss	0x4a207(%rip), %xmm1
000000000001e76d	callq	__ZN7cocos2d12CCLayerColor6createERKNS_10_ccColor4BEff ## cocos2d::CCLayerColor::create(cocos2d::_ccColor4B const&, float, float)
000000000001e772	movq	%rax, -0xd8(%rbp)
000000000001e779	movq	-0xd8(%rbp), %rax
000000000001e780	leaq	-0xe8(%rbp), %rdi
000000000001e787	movq	%rdi, -0x1d8(%rbp)
000000000001e78e	movq	-0x1a0(%rbp), %rsi
000000000001e795	movq	-0x1d0(%rbp), %rdx
000000000001e79c	movq	%rax, -0x1e0(%rbp)
000000000001e7a3	callq	__ZNK7cocos2d7CCPointplERKS0_ ## cocos2d::CCPoint::operator+(cocos2d::CCPoint const&) const
000000000001e7a8	movq	-0x1e0(%rbp), %rax
000000000001e7af	movq	(%rax), %rdx
000000000001e7b2	movq	0xb8(%rdx), %rdx
000000000001e7b9	movq	%rax, %rdi
000000000001e7bc	movq	-0x1d8(%rbp), %rsi
000000000001e7c3	callq	*%rdx
000000000001e7c5	movq	-0x170(%rbp), %rax
000000000001e7cc	movq	0x128(%rax), %rdx
000000000001e7d3	movq	-0xd8(%rbp), %rsi
000000000001e7da	movq	(%rdx), %rdi
000000000001e7dd	movq	0x1b8(%rdi), %rdi
000000000001e7e4	movq	%rdi, -0x1e8(%rbp)
000000000001e7eb	movq	%rdx, %rdi
000000000001e7ee	movq	-0x1e8(%rbp), %rdx
000000000001e7f5	callq	*%rdx
000000000001e7f7	movq	-0x28(%rbp), %rdi
000000000001e7fb	movl	$0x5a, %ecx
000000000001e800	movss	0x4a170(%rip), %xmm0
000000000001e808	movl	$0x1, %r8d
000000000001e80e	movl	%ecx, %esi
000000000001e810	movl	-0x1bc(%rbp), %edx
000000000001e816	movss	%xmm0, -0x1ec(%rbp)
000000000001e81e	movl	%ecx, -0x1f0(%rbp)
000000000001e824	movl	%r8d, %ecx
000000000001e827	movl	%r8d, -0x1f4(%rbp)
000000000001e82e	callq	__ZN12ButtonSprite6createEPKciifb ## ButtonSprite::create(char const*, int, int, float, bool)
000000000001e833	movq	%rax, -0xf0(%rbp)
000000000001e83a	movq	-0xf0(%rbp), %rax
000000000001e841	leaq	__ZN5Cacao14FLDialogHelper8onCancelEPN7cocos2d8CCObjectE(%rip), %rdi ## Cacao::FLDialogHelper::onCancel(cocos2d::CCObject*)
000000000001e848	movq	%rdi, -0x108(%rbp)
000000000001e84f	movq	$0x0, -0x100(%rbp)
000000000001e85a	movq	-0x108(%rbp), %rcx
000000000001e861	movq	-0x100(%rbp), %r8
000000000001e868	movq	%rax, %rdi
000000000001e86b	movq	%rax, %rsi
000000000001e86e	movq	-0x170(%rbp), %rdx
000000000001e875	callq	__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemSpriteExtra::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001e87a	movq	%rax, -0xf8(%rbp)
000000000001e881	movq	-0xf8(%rbp), %rax
000000000001e888	movq	(%rax), %rcx
000000000001e88b	movq	0xa0(%rcx), %rcx
000000000001e892	movss	0x4a0ba(%rip), %xmm0
000000000001e89a	movq	%rax, %rdi
000000000001e89d	callq	*%rcx
000000000001e89f	movq	-0x20(%rbp), %rdi
000000000001e8a3	movl	-0x1f0(%rbp), %esi
000000000001e8a9	movl	-0x1bc(%rbp), %edx
000000000001e8af	movss	-0x1ec(%rbp), %xmm0
000000000001e8b7	movl	-0x1f4(%rbp), %ecx
000000000001e8bd	callq	__ZN12ButtonSprite6createEPKciifb ## ButtonSprite::create(char const*, int, int, float, bool)
000000000001e8c2	movq	%rax, -0x110(%rbp)
000000000001e8c9	movq	-0x110(%rbp), %rax
000000000001e8d0	movq	%rax, %rdi
000000000001e8d3	movq	-0x170(%rbp), %r8
000000000001e8da	leaq	__ZN5Cacao14FLDialogHelper8onSubmitEPN7cocos2d8CCObjectE(%rip), %r9 ## Cacao::FLDialogHelper::onSubmit(cocos2d::CCObject*)
000000000001e8e1	movq	%r9, -0x128(%rbp)
000000000001e8e8	movq	$0x0, -0x120(%rbp)
000000000001e8f3	movq	-0x128(%rbp), %rcx
000000000001e8fa	movq	-0x120(%rbp), %r9
000000000001e901	movq	%rax, %rsi
000000000001e904	movq	%r8, %rdx
000000000001e907	movq	%r9, %r8
000000000001e90a	callq	__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemSpriteExtra::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000001e90f	movss	0x4a041(%rip), %xmm0
000000000001e917	movq	%rax, -0x118(%rbp)
000000000001e91e	leaq	-0x130(%rbp), %rdi
000000000001e925	xorps	%xmm1, %xmm1
000000000001e928	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000001e92d	movss	0x4a01f(%rip), %xmm0
000000000001e935	movq	-0x118(%rbp), %rax
000000000001e93c	movq	(%rax), %rcx
000000000001e93f	movq	%rax, %rdi
000000000001e942	callq	*0xa0(%rcx)
000000000001e948	movl	$0x0, -0x134(%rbp)
000000000001e952	movl	-0x134(%rbp), %eax
000000000001e958	movq	-0x58(%rbp), %rdi
000000000001e95c	movl	%eax, -0x1f8(%rbp)
000000000001e962	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
000000000001e967	movl	-0x1f8(%rbp), %ecx
000000000001e96d	cmpl	%eax, %ecx
000000000001e96f	jae	0x1eb02
000000000001e975	movq	-0x58(%rbp), %rdi
000000000001e979	movl	-0x134(%rbp), %esi
000000000001e97f	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
000000000001e984	movq	%rax, -0x140(%rbp)
000000000001e98b	callq	__Z7getBasev ## getBase()
000000000001e990	addq	$0x682fc0, %rax
000000000001e996	movq	-0x140(%rbp), %rdi
000000000001e99d	cmpq	(%rdi), %rax
000000000001e9a0	jne	0x1eae9
000000000001e9a6	movq	-0x140(%rbp), %rax
000000000001e9ad	movq	%rax, -0x148(%rbp)
000000000001e9b4	movq	-0x118(%rbp), %rax
000000000001e9bb	movq	%rax, %rcx
000000000001e9be	movq	-0x148(%rbp), %rdx
000000000001e9c5	leaq	-0x158(%rbp), %rdi
000000000001e9cc	leaq	-0xb0(%rbp), %rsi
000000000001e9d3	leaq	-0x130(%rbp), %r8
000000000001e9da	movq	%rdx, -0x200(%rbp)
000000000001e9e1	movq	%r8, %rdx
000000000001e9e4	movq	%rax, -0x208(%rbp)
000000000001e9eb	movq	%rcx, -0x210(%rbp)
000000000001e9f2	callq	__ZNK7cocos2d7CCPointplERKS0_ ## cocos2d::CCPoint::operator+(cocos2d::CCPoint const&) const
000000000001e9f7	leaq	-0x150(%rbp), %rdi
000000000001e9fe	movq	-0x200(%rbp), %rsi
000000000001ea05	leaq	-0x158(%rbp), %rdx
000000000001ea0c	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
000000000001ea11	movq	-0x208(%rbp), %rax
000000000001ea18	movq	(%rax), %rcx
000000000001ea1b	movq	-0x210(%rbp), %rdi
000000000001ea22	leaq	-0x150(%rbp), %rsi
000000000001ea29	callq	*0xb8(%rcx)
000000000001ea2f	movq	-0xf8(%rbp), %rax
000000000001ea36	movq	%rax, %rcx
000000000001ea39	movq	-0x148(%rbp), %rdx
000000000001ea40	leaq	-0x168(%rbp), %rdi
000000000001ea47	leaq	-0xb0(%rbp), %rsi
000000000001ea4e	leaq	-0x130(%rbp), %r8
000000000001ea55	movq	%rdx, -0x218(%rbp)
000000000001ea5c	movq	%r8, %rdx
000000000001ea5f	movq	%rax, -0x220(%rbp)
000000000001ea66	movq	%rcx, -0x228(%rbp)
000000000001ea6d	callq	__ZNK7cocos2d7CCPointmiERKS0_ ## cocos2d::CCPoint::operator-(cocos2d::CCPoint const&) const
000000000001ea72	leaq	-0x160(%rbp), %rdi
000000000001ea79	movq	-0x218(%rbp), %rsi
000000000001ea80	leaq	-0x168(%rbp), %rdx
000000000001ea87	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
000000000001ea8c	movq	-0x220(%rbp), %rax
000000000001ea93	movq	(%rax), %rcx
000000000001ea96	movq	-0x228(%rbp), %rdi
000000000001ea9d	leaq	-0x160(%rbp), %rsi
000000000001eaa4	callq	*0xb8(%rcx)
000000000001eaaa	movq	-0x148(%rbp), %rax
000000000001eab1	movq	-0x118(%rbp), %rcx
000000000001eab8	movq	(%rax), %rdx
000000000001eabb	movq	%rax, %rdi
000000000001eabe	movq	%rcx, %rsi
000000000001eac1	callq	*0x1b8(%rdx)
000000000001eac7	movq	-0x148(%rbp), %rax
000000000001eace	movq	-0xf8(%rbp), %rcx
000000000001ead5	movq	(%rax), %rdx
000000000001ead8	movq	%rax, %rdi
000000000001eadb	movq	%rcx, %rsi
000000000001eade	callq	*0x1b8(%rdx)
000000000001eae4	jmp	0x1eb02
000000000001eae9	jmp	0x1eaee
000000000001eaee	movl	-0x134(%rbp), %eax
000000000001eaf4	addl	$0x1, %eax
000000000001eaf7	movl	%eax, -0x134(%rbp)
000000000001eafd	jmp	0x1e952
000000000001eb02	movb	$0x1, %al
000000000001eb04	andb	$0x1, %al
000000000001eb06	movzbl	%al, %eax
000000000001eb09	addq	$0x230, %rsp
000000000001eb10	popq	%rbp
000000000001eb11	retq
000000000001eb12	movq	-0x48(%rbp), %rdi
000000000001eb16	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001eb1b	ud2
000000000001eb1d	nopl	(%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_:
000000000001eb20	pushq	%rbp
000000000001eb21	movq	%rsp, %rbp
000000000001eb24	subq	$0x20, %rsp
000000000001eb28	movq	%rdi, -0x8(%rbp)
000000000001eb2c	movq	%rsi, -0x10(%rbp)
000000000001eb30	movq	%rdx, -0x18(%rbp)
000000000001eb34	movq	%rcx, -0x20(%rbp)
000000000001eb38	movq	-0x8(%rbp), %rdi
000000000001eb3c	movq	-0x10(%rbp), %rsi
000000000001eb40	movq	-0x18(%rbp), %rdx
000000000001eb44	movq	-0x20(%rbp), %rcx
000000000001eb48	leaq	0x4c9bb(%rip), %r8 ## literal pool for: "Insert text"
000000000001eb4f	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_S4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*, char const*, char const*)
000000000001eb54	addq	$0x20, %rsp
000000000001eb58	popq	%rbp
000000000001eb59	retq
000000000001eb5a	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_:
000000000001eb60	pushq	%rbp
000000000001eb61	movq	%rsp, %rbp
000000000001eb64	subq	$0x20, %rsp
000000000001eb68	movq	%rdi, -0x8(%rbp)
000000000001eb6c	movq	%rsi, -0x10(%rbp)
000000000001eb70	movq	%rdx, -0x18(%rbp)
000000000001eb74	movq	-0x8(%rbp), %rdi
000000000001eb78	movq	-0x10(%rbp), %rsi
000000000001eb7c	movq	-0x18(%rbp), %rdx
000000000001eb80	leaq	0x4c98f(%rip), %rcx ## literal pool for: "Cancel"
000000000001eb87	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_S4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*, char const*)
000000000001eb8c	addq	$0x20, %rsp
000000000001eb90	popq	%rbp
000000000001eb91	retq
000000000001eb92	nopw	%cs:(%rax,%rax)
000000000001eb9c	nopl	(%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKc:
000000000001eba0	pushq	%rbp
000000000001eba1	movq	%rsp, %rbp
000000000001eba4	subq	$0x10, %rsp
000000000001eba8	movq	%rdi, -0x8(%rbp)
000000000001ebac	movq	%rsi, -0x10(%rbp)
000000000001ebb0	movq	-0x8(%rbp), %rdi
000000000001ebb4	movq	-0x10(%rbp), %rsi
000000000001ebb8	leaq	0x4c95e(%rip), %rdx ## literal pool for: "Submit"
000000000001ebbf	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKcS4_ ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*, char const*)
000000000001ebc4	addq	$0x10, %rsp
000000000001ebc8	popq	%rbp
000000000001ebc9	retq
000000000001ebca	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateE:
000000000001ebd0	pushq	%rbp
000000000001ebd1	movq	%rsp, %rbp
000000000001ebd4	subq	$0x10, %rsp
000000000001ebd8	movq	%rdi, -0x8(%rbp)
000000000001ebdc	movq	-0x8(%rbp), %rdi
000000000001ebe0	leaq	0x4c93d(%rip), %rsi ## literal pool for: "Cacao Prompt"
000000000001ebe7	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateEPKc ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*, char const*)
000000000001ebec	addq	$0x10, %rsp
000000000001ebf0	popq	%rbp
000000000001ebf1	retq
000000000001ebf2	nopw	%cs:(%rax,%rax)
000000000001ebfc	nopl	(%rax)
__ZN5Cacao14FLDialogHelper6createEv:
000000000001ec00	pushq	%rbp
000000000001ec01	movq	%rsp, %rbp
000000000001ec04	xorl	%eax, %eax
000000000001ec06	movl	%eax, %edi
000000000001ec08	callq	__ZN5Cacao14FLDialogHelper6createEPNS_16FLDialogDelegateE ## Cacao::FLDialogHelper::create(Cacao::FLDialogDelegate*)
000000000001ec0d	popq	%rbp
000000000001ec0e	retq
000000000001ec0f	nop
__ZN5Cacao14FLDialogHelper8onSubmitEPN7cocos2d8CCObjectE:
000000000001ec10	pushq	%rbp
000000000001ec11	movq	%rsp, %rbp
000000000001ec14	subq	$0x50, %rsp
000000000001ec18	movq	%rdi, -0x8(%rbp)
000000000001ec1c	movq	%rsi, -0x10(%rbp)
000000000001ec20	movq	-0x8(%rbp), %rsi
000000000001ec24	movq	0x130(%rsi), %rdi
000000000001ec2b	movq	%rsi, -0x38(%rbp)
000000000001ec2f	callq	__ZN15CCTextInputNode11getString_sEv ## CCTextInputNode::getString_s()
000000000001ec34	leaq	-0x20(%rbp), %rsi
000000000001ec38	movq	%rsi, %rdi
000000000001ec3b	movq	%rax, -0x40(%rbp)
000000000001ec3f	movq	%rsi, -0x48(%rbp)
000000000001ec43	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
000000000001ec48	leaq	-0x18(%rbp), %rdi
000000000001ec4c	movq	-0x40(%rbp), %rsi
000000000001ec50	movq	-0x48(%rbp), %rdx
000000000001ec54	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000001ec59	jmp	0x1ec5e
000000000001ec5e	leaq	-0x20(%rbp), %rdi
000000000001ec62	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001ec67	movq	-0x38(%rbp), %rdi
000000000001ec6b	movq	0x138(%rdi), %rax
000000000001ec72	movq	(%rax), %rcx
000000000001ec75	movq	(%rcx), %rcx
000000000001ec78	leaq	-0x18(%rbp), %rdx
000000000001ec7c	movq	%rax, %rdi
000000000001ec7f	movq	-0x38(%rbp), %rsi
000000000001ec83	callq	*%rcx
000000000001ec85	jmp	0x1ec8a
000000000001ec8a	leaq	-0x18(%rbp), %rdi
000000000001ec8e	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001ec93	addq	$0x50, %rsp
000000000001ec97	popq	%rbp
000000000001ec98	retq
000000000001ec99	movl	%edx, %ecx
000000000001ec9b	movq	%rax, -0x28(%rbp)
000000000001ec9f	movl	%ecx, -0x2c(%rbp)
000000000001eca2	leaq	-0x20(%rbp), %rdi
000000000001eca6	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000001ecab	jmp	0x1ecc2
000000000001ecb0	movl	%edx, %ecx
000000000001ecb2	movq	%rax, -0x28(%rbp)
000000000001ecb6	movl	%ecx, -0x2c(%rbp)
000000000001ecb9	leaq	-0x18(%rbp), %rdi
000000000001ecbd	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000001ecc2	movq	-0x28(%rbp), %rdi
000000000001ecc6	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001eccb	ud2
000000000001eccd	nopl	(%rax)
__ZN5Cacao14FLDialogHelper8onCancelEPN7cocos2d8CCObjectE:
000000000001ecd0	pushq	%rbp
000000000001ecd1	movq	%rsp, %rbp
000000000001ecd4	subq	$0x10, %rsp
000000000001ecd8	movq	%rdi, -0x8(%rbp)
000000000001ecdc	movq	%rsi, -0x10(%rbp)
000000000001ece0	movq	-0x8(%rbp), %rsi
000000000001ece4	movq	0x138(%rsi), %rdi
000000000001eceb	movq	(%rdi), %rax
000000000001ecee	callq	*0x8(%rax)
000000000001ecf1	addq	$0x10, %rsp
000000000001ecf5	popq	%rbp
000000000001ecf6	retq
000000000001ecf7	nopw	(%rax,%rax)
__ZN5Cacao16FLDialogDelegateC1Ev:
000000000001ed00	pushq	%rbp
000000000001ed01	movq	%rsp, %rbp
000000000001ed04	subq	$0x10, %rsp
000000000001ed08	movq	%rdi, -0x8(%rbp)
000000000001ed0c	movq	-0x8(%rbp), %rdi
000000000001ed10	callq	__ZN5Cacao16FLDialogDelegateC2Ev ## Cacao::FLDialogDelegate::FLDialogDelegate()
000000000001ed15	addq	$0x10, %rsp
000000000001ed19	popq	%rbp
000000000001ed1a	retq
000000000001ed1b	nopl	(%rax,%rax)
__ZN12FLAlertLayer6createEPKcRKSsS1_:
000000000001ed20	pushq	%rbp
000000000001ed21	movq	%rsp, %rbp
000000000001ed24	subq	$0x30, %rsp
000000000001ed28	xorl	%eax, %eax
000000000001ed2a	movl	%eax, %ecx
000000000001ed2c	movss	0x49c48(%rip), %xmm0
000000000001ed34	movq	%rdi, -0x8(%rbp)
000000000001ed38	movq	%rsi, -0x10(%rbp)
000000000001ed3c	movq	%rdx, -0x18(%rbp)
000000000001ed40	movq	-0x8(%rbp), %rsi
000000000001ed44	movq	-0x10(%rbp), %rdx
000000000001ed48	movq	-0x18(%rbp), %rdi
000000000001ed4c	movq	%rdi, -0x20(%rbp)
000000000001ed50	movq	%rcx, %rdi
000000000001ed53	movq	-0x20(%rbp), %r8
000000000001ed57	movq	%rcx, -0x28(%rbp)
000000000001ed5b	movq	%r8, %rcx
000000000001ed5e	movq	-0x28(%rbp), %r8
000000000001ed62	callq	__ZN12FLAlertLayer6createEPvPKcRKSsS2_S2_f ## FLAlertLayer::create(void*, char const*, std::string const&, char const*, char const*, float)
000000000001ed67	addq	$0x30, %rsp
000000000001ed6b	popq	%rbp
000000000001ed6c	retq
000000000001ed6d	nopl	(%rax)
__ZN12FLAlertLayer10_mainLayerEv:
000000000001ed70	pushq	%rbp
000000000001ed71	movq	%rsp, %rbp
000000000001ed74	movq	%rdi, -0x8(%rbp)
000000000001ed78	movq	-0x8(%rbp), %rdi
000000000001ed7c	addq	$0x220, %rdi
000000000001ed83	movq	%rdi, %rax
000000000001ed86	popq	%rbp
000000000001ed87	retq
000000000001ed88	nopl	(%rax,%rax)
__ZN7cocos2dL4ccc4Ehhhh:
000000000001ed90	pushq	%rbp
000000000001ed91	movq	%rsp, %rbp
000000000001ed94	movb	%cl, %al
000000000001ed96	movb	%dl, %r8b
000000000001ed99	movb	%sil, %r9b
000000000001ed9c	movb	%dil, %r10b
000000000001ed9f	movb	%r10b, -0x9(%rbp)
000000000001eda3	movb	%r9b, -0xa(%rbp)
000000000001eda7	movb	%r8b, -0xb(%rbp)
000000000001edab	movb	%al, -0xc(%rbp)
000000000001edae	movb	-0x9(%rbp), %al
000000000001edb1	movb	%al, -0x8(%rbp)
000000000001edb4	movb	-0xa(%rbp), %al
000000000001edb7	movb	%al, -0x7(%rbp)
000000000001edba	movb	-0xb(%rbp), %al
000000000001edbd	movb	%al, -0x6(%rbp)
000000000001edc0	movb	-0xc(%rbp), %al
000000000001edc3	movb	%al, -0x5(%rbp)
000000000001edc6	movl	-0x8(%rbp), %eax
000000000001edc9	popq	%rbp
000000000001edca	retq
000000000001edcb	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelper4showEv:
000000000001edd0	pushq	%rbp
000000000001edd1	movq	%rsp, %rbp
000000000001edd4	subq	$0x20, %rsp
000000000001edd8	movq	%rdi, -0x8(%rbp)
000000000001eddc	movq	-0x8(%rbp), %rdi
000000000001ede0	movq	0x138(%rdi), %rax
000000000001ede7	movq	(%rax), %rcx
000000000001edea	movq	%rdi, -0x10(%rbp)
000000000001edee	movq	%rax, %rdi
000000000001edf1	movq	-0x10(%rbp), %rsi
000000000001edf5	callq	*0x10(%rcx)
000000000001edf8	movq	-0x10(%rbp), %rax
000000000001edfc	movq	0x120(%rax), %rdi
000000000001ee03	callq	__ZN12FLAlertLayer4showEv ## FLAlertLayer::show()
000000000001ee08	movl	%eax, -0x14(%rbp)
000000000001ee0b	addq	$0x20, %rsp
000000000001ee0f	popq	%rbp
000000000001ee10	retq
000000000001ee11	nopw	%cs:(%rax,%rax)
000000000001ee1b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditor6createEP12ModContainer:
000000000001ee20	pushq	%rbp
000000000001ee21	movq	%rsp, %rbp
000000000001ee24	subq	$0x50, %rsp
000000000001ee28	movq	%rdi, -0x10(%rbp)
000000000001ee2c	movl	$0x1c0, %edi
000000000001ee31	movq	%rdi, -0x30(%rbp)
000000000001ee35	callq	0x27924 ## symbol stub for: __Znwm
000000000001ee3a	movq	%rax, %rdi
000000000001ee3d	movq	%rax, %rcx
000000000001ee40	movq	%rdi, -0x38(%rbp)
000000000001ee44	movq	%rax, %rdi
000000000001ee47	movq	-0x30(%rbp), %rsi
000000000001ee4b	movq	%rax, -0x40(%rbp)
000000000001ee4f	movq	%rcx, -0x48(%rbp)
000000000001ee53	callq	0x27930 ## symbol stub for: ___bzero
000000000001ee58	movq	-0x40(%rbp), %rdi
000000000001ee5c	callq	__ZN5Cacao14EditorUIEditorC1Ev ## Cacao::EditorUIEditor::EditorUIEditor()
000000000001ee61	jmp	0x1ee66
000000000001ee66	movq	-0x48(%rbp), %rax
000000000001ee6a	movq	%rax, -0x18(%rbp)
000000000001ee6e	movq	-0x18(%rbp), %rdi
000000000001ee72	movq	-0x10(%rbp), %rsi
000000000001ee76	callq	__ZN5Cacao14EditorUIEditor10initWithMCEP12ModContainer ## Cacao::EditorUIEditor::initWithMC(ModContainer*)
000000000001ee7b	testb	$0x1, %al
000000000001ee7d	jne	0x1ee88
000000000001ee83	jmp	0x1eeac
000000000001ee88	movq	-0x18(%rbp), %rax
000000000001ee8c	movq	%rax, -0x8(%rbp)
000000000001ee90	jmp	0x1eed3
000000000001ee95	movl	%edx, %ecx
000000000001ee97	movq	%rax, -0x20(%rbp)
000000000001ee9b	movl	%ecx, -0x24(%rbp)
000000000001ee9e	movq	-0x38(%rbp), %rdi
000000000001eea2	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001eea7	jmp	0x1eedd
000000000001eeac	movq	-0x18(%rbp), %rax
000000000001eeb0	cmpq	$0x0, %rax
000000000001eeb4	movq	%rax, -0x50(%rbp)
000000000001eeb8	je	0x1eecb
000000000001eebe	movq	-0x50(%rbp), %rax
000000000001eec2	movq	(%rax), %rcx
000000000001eec5	movq	%rax, %rdi
000000000001eec8	callq	*0x10(%rcx)
000000000001eecb	movq	$0x0, -0x8(%rbp)
000000000001eed3	movq	-0x8(%rbp), %rax
000000000001eed7	addq	$0x50, %rsp
000000000001eedb	popq	%rbp
000000000001eedc	retq
000000000001eedd	movq	-0x20(%rbp), %rdi
000000000001eee1	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001eee6	ud2
000000000001eee8	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditorC1Ev:
000000000001eef0	pushq	%rbp
000000000001eef1	movq	%rsp, %rbp
000000000001eef4	subq	$0x10, %rsp
000000000001eef8	movq	%rdi, -0x8(%rbp)
000000000001eefc	movq	-0x8(%rbp), %rdi
000000000001ef00	callq	__ZN5Cacao14EditorUIEditorC2Ev ## Cacao::EditorUIEditor::EditorUIEditor()
000000000001ef05	addq	$0x10, %rsp
000000000001ef09	popq	%rbp
000000000001ef0a	retq
000000000001ef0b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditor10initWithMCEP12ModContainer:
000000000001ef10	pushq	%rbp
000000000001ef11	movq	%rsp, %rbp
000000000001ef14	subq	$0x20, %rsp
000000000001ef18	movq	%rdi, -0x8(%rbp)
000000000001ef1c	movq	%rsi, -0x10(%rbp)
000000000001ef20	movq	-0x8(%rbp), %rsi
000000000001ef24	movq	%rsi, %rdi
000000000001ef27	movq	%rsi, -0x18(%rbp)
000000000001ef2b	callq	__ZN7cocos2d6CCNode4initEv ## cocos2d::CCNode::init()
000000000001ef30	testb	$0x1, %al
000000000001ef32	jne	0x1ef3d
000000000001ef38	jmp	0x1ef56
000000000001ef3d	movq	-0x10(%rbp), %rax
000000000001ef41	movq	-0x18(%rbp), %rcx
000000000001ef45	movq	%rax, 0x120(%rcx)
000000000001ef4c	movl	$0xffffffff, 0x128(%rcx)
000000000001ef56	movb	$0x1, %al
000000000001ef58	andb	$0x1, %al
000000000001ef5a	movzbl	%al, %eax
000000000001ef5d	addq	$0x20, %rsp
000000000001ef61	popq	%rbp
000000000001ef62	retq
000000000001ef63	nopw	%cs:(%rax,%rax)
000000000001ef6d	nopl	(%rax)
__ZN5Cacao14EditorUIEditor3barEi:
000000000001ef70	pushq	%rbp
000000000001ef71	movq	%rsp, %rbp
000000000001ef74	movq	%rdi, -0x8(%rbp)
000000000001ef78	movl	%esi, -0xc(%rbp)
000000000001ef7b	movq	-0x8(%rbp), %rdi
000000000001ef7f	movl	$0xd, %esi
000000000001ef84	cmpl	-0xc(%rbp), %esi
000000000001ef87	setg	%al
000000000001ef8a	andb	$0x1, %al
000000000001ef8c	movzbl	%al, %esi
000000000001ef8f	cmpl	$0x0, %esi
000000000001ef92	movq	%rdi, -0x18(%rbp)
000000000001ef96	jle	0x1efa9
000000000001ef9c	movl	-0xc(%rbp), %eax
000000000001ef9f	movq	-0x18(%rbp), %rcx
000000000001efa3	movl	%eax, 0x128(%rcx)
000000000001efa9	movq	-0x18(%rbp), %rax
000000000001efad	popq	%rbp
000000000001efae	retq
000000000001efaf	nop
__ZN5Cacao14EditorUIEditor8addIndexEii:
000000000001efb0	pushq	%rbp
000000000001efb1	movq	%rsp, %rbp
000000000001efb4	subq	$0x30, %rsp
000000000001efb8	movq	%rdi, -0x8(%rbp)
000000000001efbc	movl	%esi, -0xc(%rbp)
000000000001efbf	movl	%edx, -0x10(%rbp)
000000000001efc2	movq	-0x8(%rbp), %rdi
000000000001efc6	cmpl	$0x0, 0x128(%rdi)
000000000001efcd	movq	%rdi, -0x20(%rbp)
000000000001efd1	jle	0x1f019
000000000001efd7	movq	-0x20(%rbp), %rax
000000000001efdb	addq	$0x130, %rax
000000000001efe1	movq	-0x20(%rbp), %rcx
000000000001efe5	addq	$0x128, %rcx
000000000001efec	movq	%rax, %rdi
000000000001efef	movq	%rcx, %rsi
000000000001eff2	callq	0x27630 ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEixERS7_
000000000001eff7	leaq	-0x18(%rbp), %rdi
000000000001effb	leaq	-0xc(%rbp), %rsi
000000000001efff	leaq	-0x10(%rbp), %rdx
000000000001f003	movq	%rax, -0x28(%rbp)
000000000001f007	callq	__ZNSt4pairIiiEC1ERKiS2_ ## std::pair<int, int>::pair(int const&, int const&)
000000000001f00c	movq	-0x28(%rbp), %rdi
000000000001f010	leaq	-0x18(%rbp), %rsi
000000000001f014	callq	0x276ae ## symbol stub for: __ZNSt6vectorISt4pairIiiESaIS1_EE9push_backERKS1_
000000000001f019	movq	-0x20(%rbp), %rax
000000000001f01d	addq	$0x30, %rsp
000000000001f021	popq	%rbp
000000000001f022	retq
000000000001f023	nopw	%cs:(%rax,%rax)
000000000001f02d	nopl	(%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEixERS7_:
000000000001f030	pushq	%rbp
000000000001f031	movq	%rsp, %rbp
000000000001f034	subq	$0xd0, %rsp
000000000001f03b	movq	%rdi, -0x8(%rbp)
000000000001f03f	movq	%rsi, -0x10(%rbp)
000000000001f043	movq	-0x8(%rbp), %rsi
000000000001f047	movq	-0x10(%rbp), %rdi
000000000001f04b	movq	%rdi, -0x98(%rbp)
000000000001f052	movq	%rsi, %rdi
000000000001f055	movq	-0x98(%rbp), %rax
000000000001f05c	movq	%rsi, -0xa0(%rbp)
000000000001f063	movq	%rax, %rsi
000000000001f066	callq	0x27618 ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE11lower_boundERS7_
000000000001f06b	movq	%rax, -0x18(%rbp)
000000000001f06f	movq	-0xa0(%rbp), %rdi
000000000001f076	callq	0x2761e ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE3endEv
000000000001f07b	movq	%rax, -0x20(%rbp)
000000000001f07f	leaq	-0x18(%rbp), %rdi
000000000001f083	leaq	-0x20(%rbp), %rsi
000000000001f087	callq	0x273fc ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEeqERKS7_
000000000001f08c	testb	$0x1, %al
000000000001f08e	movb	$0x1, %al
000000000001f090	movb	%al, -0xa1(%rbp)
000000000001f096	jne	0x1f0d5
000000000001f09c	movq	-0xa0(%rbp), %rdi
000000000001f0a3	callq	0x2741a ## symbol stub for: __ZNKSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE8key_compEv
000000000001f0a8	movq	-0x10(%rbp), %rsi
000000000001f0ac	leaq	-0x18(%rbp), %rdi
000000000001f0b0	movq	%rsi, -0xb0(%rbp)
000000000001f0b7	callq	0x273f6 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEdeEv
000000000001f0bc	leaq	-0x28(%rbp), %rdi
000000000001f0c0	movq	-0xb0(%rbp), %rsi
000000000001f0c7	movq	%rax, %rdx
000000000001f0ca	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
000000000001f0cf	movb	%al, -0xa1(%rbp)
000000000001f0d5	movb	-0xa1(%rbp), %al
000000000001f0db	testb	$0x1, %al
000000000001f0dd	jne	0x1f0e8
000000000001f0e3	jmp	0x1f1e6
000000000001f0e8	movq	-0x18(%rbp), %rax
000000000001f0ec	movq	%rax, -0x40(%rbp)
000000000001f0f0	movq	-0x10(%rbp), %rsi
000000000001f0f4	leaq	-0x80(%rbp), %rax
000000000001f0f8	movq	%rax, %rdi
000000000001f0fb	movq	%rsi, -0xb8(%rbp)
000000000001f102	movq	%rax, -0xc0(%rbp)
000000000001f109	callq	__ZNSaISt4pairIiiEEC1Ev ## std::allocator<std::pair<int, int> >::allocator()
000000000001f10e	leaq	-0x78(%rbp), %rdi
000000000001f112	movq	-0xc0(%rbp), %rsi
000000000001f119	callq	__ZNSt6vectorISt4pairIiiESaIS1_EEC1ERKS2_ ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector(std::allocator<std::pair<int, int> > const&)
000000000001f11e	jmp	0x1f123
000000000001f123	leaq	-0x60(%rbp), %rdi
000000000001f127	leaq	-0x78(%rbp), %rdx
000000000001f12b	movq	-0xb8(%rbp), %rsi
000000000001f132	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC1ERS0_RKS4_ ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::pair(int const&, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&)
000000000001f137	jmp	0x1f13c
000000000001f13c	movq	-0x40(%rbp), %rsi
000000000001f140	leaq	-0x60(%rbp), %rdx
000000000001f144	movq	-0xa0(%rbp), %rdi
000000000001f14b	callq	0x2762a ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE6insertESt17_Rb_tree_iteratorIS8_ERKS8_
000000000001f150	movq	%rax, -0xc8(%rbp)
000000000001f157	jmp	0x1f15c
000000000001f15c	movq	-0xc8(%rbp), %rax
000000000001f163	movq	%rax, -0x38(%rbp)
000000000001f167	movq	-0x38(%rbp), %rcx
000000000001f16b	movq	%rcx, -0x18(%rbp)
000000000001f16f	leaq	-0x60(%rbp), %rdi
000000000001f173	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED1Ev ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::~pair()
000000000001f178	leaq	-0x78(%rbp), %rdi
000000000001f17c	callq	__ZNSt6vectorISt4pairIiiESaIS1_EED1Ev ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
000000000001f181	leaq	-0x80(%rbp), %rdi
000000000001f185	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
000000000001f18a	jmp	0x1f1e6
000000000001f18f	movl	%edx, %ecx
000000000001f191	movq	%rax, -0x88(%rbp)
000000000001f198	movl	%ecx, -0x8c(%rbp)
000000000001f19e	jmp	0x1f1d8
000000000001f1a3	movl	%edx, %ecx
000000000001f1a5	movq	%rax, -0x88(%rbp)
000000000001f1ac	movl	%ecx, -0x8c(%rbp)
000000000001f1b2	jmp	0x1f1cf
000000000001f1b7	movl	%edx, %ecx
000000000001f1b9	movq	%rax, -0x88(%rbp)
000000000001f1c0	movl	%ecx, -0x8c(%rbp)
000000000001f1c6	leaq	-0x60(%rbp), %rdi
000000000001f1ca	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED1Ev ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::~pair()
000000000001f1cf	leaq	-0x78(%rbp), %rdi
000000000001f1d3	callq	__ZNSt6vectorISt4pairIiiESaIS1_EED1Ev ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
000000000001f1d8	leaq	-0x80(%rbp), %rdi
000000000001f1dc	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
000000000001f1e1	jmp	0x1f1fc
000000000001f1e6	leaq	-0x18(%rbp), %rdi
000000000001f1ea	callq	0x273f6 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEdeEv
000000000001f1ef	addq	$0x8, %rax
000000000001f1f3	addq	$0xd0, %rsp
000000000001f1fa	popq	%rbp
000000000001f1fb	retq
000000000001f1fc	movq	-0x88(%rbp), %rdi
000000000001f203	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001f208	ud2
000000000001f20a	nopw	(%rax,%rax)
__ZNSt6vectorISt4pairIiiESaIS1_EE9push_backERKS1_:
000000000001f210	pushq	%rbp
000000000001f211	movq	%rsp, %rbp
000000000001f214	subq	$0x20, %rsp
000000000001f218	movq	%rdi, -0x8(%rbp)
000000000001f21c	movq	%rsi, -0x10(%rbp)
000000000001f220	movq	-0x8(%rbp), %rsi
000000000001f224	movq	0x8(%rsi), %rdi
000000000001f228	cmpq	0x10(%rsi), %rdi
000000000001f22c	movq	%rsi, -0x20(%rbp)
000000000001f230	je	0x1f263
000000000001f236	movq	-0x20(%rbp), %rax
000000000001f23a	movq	-0x20(%rbp), %rcx
000000000001f23e	movq	0x8(%rcx), %rsi
000000000001f242	movq	-0x10(%rbp), %rdx
000000000001f246	movq	%rax, %rdi
000000000001f249	callq	0x272d0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructEPS2_RKS2_
000000000001f24e	movq	-0x20(%rbp), %rax
000000000001f252	movq	0x8(%rax), %rcx
000000000001f256	addq	$0x8, %rcx
000000000001f25a	movq	%rcx, 0x8(%rax)
000000000001f25e	jmp	0x1f281
000000000001f263	movq	-0x20(%rbp), %rdi
000000000001f267	callq	0x276a8 ## symbol stub for: __ZNSt6vectorISt4pairIiiESaIS1_EE3endEv
000000000001f26c	movq	%rax, -0x18(%rbp)
000000000001f270	movq	-0x10(%rbp), %rdx
000000000001f274	movq	-0x18(%rbp), %rsi
000000000001f278	movq	-0x20(%rbp), %rdi
000000000001f27c	callq	0x276a2 ## symbol stub for: __ZNSt6vectorISt4pairIiiESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
000000000001f281	addq	$0x20, %rsp
000000000001f285	popq	%rbp
000000000001f286	retq
000000000001f287	nopw	(%rax,%rax)
__ZNSt4pairIiiEC1ERKiS2_:
000000000001f290	pushq	%rbp
000000000001f291	movq	%rsp, %rbp
000000000001f294	subq	$0x20, %rsp
000000000001f298	movq	%rdi, -0x8(%rbp)
000000000001f29c	movq	%rsi, -0x10(%rbp)
000000000001f2a0	movq	%rdx, -0x18(%rbp)
000000000001f2a4	movq	-0x8(%rbp), %rdi
000000000001f2a8	movq	-0x10(%rbp), %rsi
000000000001f2ac	movq	-0x18(%rbp), %rdx
000000000001f2b0	callq	__ZNSt4pairIiiEC2ERKiS2_ ## std::pair<int, int>::pair(int const&, int const&)
000000000001f2b5	addq	$0x20, %rsp
000000000001f2b9	popq	%rbp
000000000001f2ba	retq
000000000001f2bb	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditor18addTriggerCallbackEiPFvP10GameObjectP15GJBaseGameLayerE:
000000000001f2c0	pushq	%rbp
000000000001f2c1	movq	%rsp, %rbp
000000000001f2c4	subq	$0x60, %rsp
000000000001f2c8	movq	%rdi, -0x8(%rbp)
000000000001f2cc	movl	%esi, -0xc(%rbp)
000000000001f2cf	movq	%rdx, -0x18(%rbp)
000000000001f2d3	movq	-0x8(%rbp), %rdx
000000000001f2d7	movq	%rdx, %rdi
000000000001f2da	addq	$0x190, %rdi
000000000001f2e1	leaq	-0xc(%rbp), %rsi
000000000001f2e5	movq	%rdx, -0x50(%rbp)
000000000001f2e9	callq	0x2740e ## symbol stub for: __ZNKSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE5countERS9_
000000000001f2ee	cmpq	$0x0, %rax
000000000001f2f2	jne	0x1f338
000000000001f2f8	movq	-0x50(%rbp), %rax
000000000001f2fc	addq	$0x190, %rax
000000000001f302	leaq	-0x38(%rbp), %rdi
000000000001f306	leaq	-0xc(%rbp), %rsi
000000000001f30a	leaq	-0x18(%rbp), %rdx
000000000001f30e	movq	%rax, -0x58(%rbp)
000000000001f312	callq	__ZNSt4pairIiPFvP10GameObjectP15GJBaseGameLayerEEC1ERKiRKS5_ ## std::pair<int, void (*)(GameObject*, GJBaseGameLayer*)>::pair(int const&, void (* const&)(GameObject*, GJBaseGameLayer*))
000000000001f317	leaq	-0x28(%rbp), %rdi
000000000001f31b	leaq	-0x38(%rbp), %rsi
000000000001f31f	callq	__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC1IiS6_EERKS_IT_T0_E ## std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>::pair<int, void (*)(GameObject*, GJBaseGameLayer*)>(std::pair<int, void (*)(GameObject*, GJBaseGameLayer*)> const&)
000000000001f324	movq	-0x58(%rbp), %rdi
000000000001f328	leaq	-0x28(%rbp), %rsi
000000000001f32c	callq	0x27606 ## symbol stub for: __ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE6insertERKSA_
000000000001f331	movq	%rax, -0x48(%rbp)
000000000001f335	movb	%dl, -0x40(%rbp)
000000000001f338	movq	-0x50(%rbp), %rax
000000000001f33c	addq	$0x60, %rsp
000000000001f340	popq	%rbp
000000000001f341	retq
000000000001f342	nopw	%cs:(%rax,%rax)
000000000001f34c	nopl	(%rax)
__ZNKSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE5countERS9_:
000000000001f350	pushq	%rbp
000000000001f351	movq	%rsp, %rbp
000000000001f354	subq	$0x30, %rsp
000000000001f358	movq	%rdi, -0x8(%rbp)
000000000001f35c	movq	%rsi, -0x10(%rbp)
000000000001f360	movq	-0x8(%rbp), %rsi
000000000001f364	movq	-0x10(%rbp), %rdi
000000000001f368	movq	%rdi, -0x28(%rbp)
000000000001f36c	movq	%rsi, %rdi
000000000001f36f	movq	-0x28(%rbp), %rax
000000000001f373	movq	%rsi, -0x30(%rbp)
000000000001f377	movq	%rax, %rsi
000000000001f37a	callq	0x27474 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE4findERS1_
000000000001f37f	movq	%rax, -0x18(%rbp)
000000000001f383	movq	-0x30(%rbp), %rdi
000000000001f387	callq	0x2746e ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv
000000000001f38c	movq	%rax, -0x20(%rbp)
000000000001f390	leaq	-0x18(%rbp), %rdi
000000000001f394	leaq	-0x20(%rbp), %rsi
000000000001f398	callq	0x27408 ## symbol stub for: __ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_
000000000001f39d	xorl	%ecx, %ecx
000000000001f39f	testb	$0x1, %al
000000000001f3a1	movl	$0x1, %edx
000000000001f3a6	cmovnel	%ecx, %edx
000000000001f3a9	movslq	%edx, %rax
000000000001f3ac	addq	$0x30, %rsp
000000000001f3b0	popq	%rbp
000000000001f3b1	retq
000000000001f3b2	nopw	%cs:(%rax,%rax)
000000000001f3bc	nopl	(%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE6insertERKSA_:
000000000001f3c0	pushq	%rbp
000000000001f3c1	movq	%rsp, %rbp
000000000001f3c4	subq	$0x20, %rsp
000000000001f3c8	movq	%rdi, -0x18(%rbp)
000000000001f3cc	movq	%rsi, -0x20(%rbp)
000000000001f3d0	movq	-0x18(%rbp), %rdi
000000000001f3d4	movq	-0x20(%rbp), %rsi
000000000001f3d8	callq	0x276ea ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueERKS8_
000000000001f3dd	movq	%rax, -0x10(%rbp)
000000000001f3e1	movb	%dl, -0x8(%rbp)
000000000001f3e4	movq	-0x10(%rbp), %rax
000000000001f3e8	movb	-0x8(%rbp), %dl
000000000001f3eb	addq	$0x20, %rsp
000000000001f3ef	popq	%rbp
000000000001f3f0	retq
000000000001f3f1	nopw	%cs:(%rax,%rax)
000000000001f3fb	nopl	(%rax,%rax)
__ZNSt4pairIiPFvP10GameObjectP15GJBaseGameLayerEEC1ERKiRKS5_:
000000000001f400	pushq	%rbp
000000000001f401	movq	%rsp, %rbp
000000000001f404	subq	$0x20, %rsp
000000000001f408	movq	%rdi, -0x8(%rbp)
000000000001f40c	movq	%rsi, -0x10(%rbp)
000000000001f410	movq	%rdx, -0x18(%rbp)
000000000001f414	movq	-0x8(%rbp), %rdi
000000000001f418	movq	-0x10(%rbp), %rsi
000000000001f41c	movq	-0x18(%rbp), %rdx
000000000001f420	callq	__ZNSt4pairIiPFvP10GameObjectP15GJBaseGameLayerEEC2ERKiRKS5_ ## std::pair<int, void (*)(GameObject*, GJBaseGameLayer*)>::pair(int const&, void (* const&)(GameObject*, GJBaseGameLayer*))
000000000001f425	addq	$0x20, %rsp
000000000001f429	popq	%rbp
000000000001f42a	retq
000000000001f42b	nopl	(%rax,%rax)
__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC1IiS6_EERKS_IT_T0_E:
000000000001f430	pushq	%rbp
000000000001f431	movq	%rsp, %rbp
000000000001f434	subq	$0x10, %rsp
000000000001f438	movq	%rdi, -0x8(%rbp)
000000000001f43c	movq	%rsi, -0x10(%rbp)
000000000001f440	movq	-0x8(%rbp), %rdi
000000000001f444	movq	-0x10(%rbp), %rsi
000000000001f448	callq	__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC2IiS6_EERKS_IT_T0_E ## std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>::pair<int, void (*)(GameObject*, GJBaseGameLayer*)>(std::pair<int, void (*)(GameObject*, GJBaseGameLayer*)> const&)
000000000001f44d	addq	$0x10, %rsp
000000000001f451	popq	%rbp
000000000001f452	retq
000000000001f453	nopw	%cs:(%rax,%rax)
000000000001f45d	nopl	(%rax)
__ZN5Cacao14EditorUIEditor9applyBarsEv:
000000000001f460	pushq	%rbp
000000000001f461	movq	%rsp, %rbp
000000000001f464	subq	$0x30, %rsp
000000000001f468	movq	%rdi, -0x8(%rbp)
000000000001f46c	movq	-0x8(%rbp), %rdi
000000000001f470	testb	$0x1, 0x54981(%rip)
000000000001f477	movq	%rdi, -0x18(%rbp)
000000000001f47b	jne	0x1f4ca
000000000001f481	movb	$0x1, 0x54970(%rip)
000000000001f488	movq	-0x18(%rbp), %rax
000000000001f48c	movq	%rax, __ZN5Cacao14EditorUIEditor11barInstanceE(%rip) ## Cacao::EditorUIEditor::barInstance
000000000001f493	movq	0x120(%rax), %rdi
000000000001f49a	movq	%rdi, -0x20(%rbp)
000000000001f49e	callq	__Z7getBasev ## getBase()
000000000001f4a3	addq	$0xcb50, %rax
000000000001f4a9	leaq	-0x10(%rbp), %rdi
000000000001f4ad	movq	%rax, -0x28(%rbp)
000000000001f4b1	callq	__ZZN5Cacao14EditorUIEditor9applyBarsEvENK3$_0cvPFvP8EditorUIEEv ## Cacao::EditorUIEditor::applyBars()::$_0::operator void (*)(EditorUI*)() const
000000000001f4b6	movq	-0x20(%rbp), %rdi
000000000001f4ba	movq	-0x28(%rbp), %rsi
000000000001f4be	movq	%rax, %rdx
000000000001f4c1	callq	0x271ec ## symbol stub for: __ZN12ModContainer12registerHookIPFvP8EditorUIEEET_lS5_
000000000001f4c6	movq	%rax, -0x30(%rbp)
000000000001f4ca	movq	-0x18(%rbp), %rax
000000000001f4ce	movq	%rax, __ZN5Cacao14EditorUIEditor11barInstanceE(%rip) ## Cacao::EditorUIEditor::barInstance
000000000001f4d5	addq	$0x30, %rsp
000000000001f4d9	popq	%rbp
000000000001f4da	retq
000000000001f4db	nopl	(%rax,%rax)
__ZN12ModContainer12registerHookIPFvP8EditorUIEEET_lS5_:
000000000001f4e0	pushq	%rbp
000000000001f4e1	movq	%rsp, %rbp
000000000001f4e4	subq	$0x60, %rsp
000000000001f4e8	movq	%rdi, -0x8(%rbp)
000000000001f4ec	movq	%rsi, -0x10(%rbp)
000000000001f4f0	movq	%rdx, -0x18(%rbp)
000000000001f4f4	movq	-0x8(%rbp), %rdi
000000000001f4f8	movl	$0x30, %edx
000000000001f4fd	movq	%rdi, -0x40(%rbp)
000000000001f501	movq	%rdx, %rdi
000000000001f504	callq	0x27924 ## symbol stub for: __Znwm
000000000001f509	movq	%rax, %rdx
000000000001f50c	movq	%rax, %rsi
000000000001f50f	movq	-0x10(%rbp), %rdi
000000000001f513	movq	-0x18(%rbp), %rcx
000000000001f517	movq	%rdi, -0x48(%rbp)
000000000001f51b	movq	%rax, %rdi
000000000001f51e	movq	-0x48(%rbp), %rax
000000000001f522	movq	%rsi, -0x50(%rbp)
000000000001f526	movq	%rax, %rsi
000000000001f529	movq	%rdx, -0x58(%rbp)
000000000001f52d	movq	%rcx, %rdx
000000000001f530	callq	__ZN13HookContainerC1ElPFvvE ## HookContainer::HookContainer(long, void (*)())
000000000001f535	jmp	0x1f53a
000000000001f53a	movq	-0x50(%rbp), %rax
000000000001f53e	movq	%rax, -0x20(%rbp)
000000000001f542	movq	-0x20(%rbp), %rcx
000000000001f546	movq	%rcx, -0x38(%rbp)
000000000001f54a	movq	-0x40(%rbp), %rdi
000000000001f54e	leaq	-0x38(%rbp), %rsi
000000000001f552	callq	0x27684 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
000000000001f557	movq	-0x20(%rbp), %rdi
000000000001f55b	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
000000000001f560	addq	$0x60, %rsp
000000000001f564	popq	%rbp
000000000001f565	retq
000000000001f566	movl	%edx, %ecx
000000000001f568	movq	%rax, -0x28(%rbp)
000000000001f56c	movl	%ecx, -0x2c(%rbp)
000000000001f56f	movq	-0x58(%rbp), %rdi
000000000001f573	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001f578	movq	-0x28(%rbp), %rdi
000000000001f57c	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001f581	ud2
000000000001f583	nopw	%cs:(%rax,%rax)
000000000001f58d	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor9applyBarsEvENK3$_0cvPFvP8EditorUIEEv:
000000000001f590	pushq	%rbp
000000000001f591	movq	%rsp, %rbp
000000000001f594	movq	%rdi, -0x8(%rbp)
000000000001f598	leaq	__ZZN5Cacao14EditorUIEditor9applyBarsEvEN3$_08__invokeEP8EditorUI(%rip), %rax ## Cacao::EditorUIEditor::applyBars()::$_0::__invoke(EditorUI*)
000000000001f59f	popq	%rbp
000000000001f5a0	retq
000000000001f5a1	nopw	%cs:(%rax,%rax)
000000000001f5ab	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditor12applyObjectsEv:
000000000001f5b0	pushq	%rbp
000000000001f5b1	movq	%rsp, %rbp
000000000001f5b4	subq	$0x50, %rsp
000000000001f5b8	movq	%rdi, -0x8(%rbp)
000000000001f5bc	movq	-0x8(%rbp), %rdi
000000000001f5c0	testb	$0x1, __ZN5Cacao14EditorUIEditor11appliedBarsE(%rip) ## Cacao::EditorUIEditor::appliedBars
000000000001f5c7	movq	%rdi, -0x20(%rbp)
000000000001f5cb	jne	0x1f655
000000000001f5d1	movb	$0x1, __ZN5Cacao14EditorUIEditor11appliedBarsE(%rip) ## Cacao::EditorUIEditor::appliedBars
000000000001f5d8	movq	-0x20(%rbp), %rax
000000000001f5dc	movq	%rax, __ZN5Cacao14EditorUIEditor14objectInstanceE(%rip) ## Cacao::EditorUIEditor::objectInstance
000000000001f5e3	movq	0x120(%rax), %rdi
000000000001f5ea	movq	%rdi, -0x28(%rbp)
000000000001f5ee	callq	__Z7getBasev ## getBase()
000000000001f5f3	addq	$0x2fbba0, %rax
000000000001f5f9	leaq	-0x10(%rbp), %rdi
000000000001f5fd	movq	%rax, -0x30(%rbp)
000000000001f601	callq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_1cvPFvP10GameObjectEEv ## Cacao::EditorUIEditor::applyObjects()::$_1::operator void (*)(GameObject*)() const
000000000001f606	movq	-0x28(%rbp), %rdi
000000000001f60a	movq	-0x30(%rbp), %rsi
000000000001f60e	movq	%rax, %rdx
000000000001f611	callq	0x271e0 ## symbol stub for: __ZN12ModContainer12registerHookIPFvP10GameObjectEEET_lS5_
000000000001f616	movq	-0x20(%rbp), %rdx
000000000001f61a	movq	0x120(%rdx), %rdi
000000000001f621	movq	%rax, -0x38(%rbp)
000000000001f625	movq	%rdi, -0x40(%rbp)
000000000001f629	callq	__Z7getBasev ## getBase()
000000000001f62e	addq	$0x2f4ce0, %rax
000000000001f634	leaq	-0x18(%rbp), %rdi
000000000001f638	movq	%rax, -0x48(%rbp)
000000000001f63c	callq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_2cvPFP10GameObjectiEEv ## Cacao::EditorUIEditor::applyObjects()::$_2::operator GameObject* (*)(int)() const
000000000001f641	movq	-0x40(%rbp), %rdi
000000000001f645	movq	-0x48(%rbp), %rsi
000000000001f649	movq	%rax, %rdx
000000000001f64c	callq	0x271da ## symbol stub for: __ZN12ModContainer12registerHookIPFP10GameObjectiEEET_lS5_
000000000001f651	movq	%rax, -0x50(%rbp)
000000000001f655	movq	-0x20(%rbp), %rax
000000000001f659	movq	%rax, __ZN5Cacao14EditorUIEditor14objectInstanceE(%rip) ## Cacao::EditorUIEditor::objectInstance
000000000001f660	addq	$0x50, %rsp
000000000001f664	popq	%rbp
000000000001f665	retq
000000000001f666	nopw	%cs:(%rax,%rax)
__ZN12ModContainer12registerHookIPFvP10GameObjectEEET_lS5_:
000000000001f670	pushq	%rbp
000000000001f671	movq	%rsp, %rbp
000000000001f674	subq	$0x60, %rsp
000000000001f678	movq	%rdi, -0x8(%rbp)
000000000001f67c	movq	%rsi, -0x10(%rbp)
000000000001f680	movq	%rdx, -0x18(%rbp)
000000000001f684	movq	-0x8(%rbp), %rdi
000000000001f688	movl	$0x30, %edx
000000000001f68d	movq	%rdi, -0x40(%rbp)
000000000001f691	movq	%rdx, %rdi
000000000001f694	callq	0x27924 ## symbol stub for: __Znwm
000000000001f699	movq	%rax, %rdx
000000000001f69c	movq	%rax, %rsi
000000000001f69f	movq	-0x10(%rbp), %rdi
000000000001f6a3	movq	-0x18(%rbp), %rcx
000000000001f6a7	movq	%rdi, -0x48(%rbp)
000000000001f6ab	movq	%rax, %rdi
000000000001f6ae	movq	-0x48(%rbp), %rax
000000000001f6b2	movq	%rsi, -0x50(%rbp)
000000000001f6b6	movq	%rax, %rsi
000000000001f6b9	movq	%rdx, -0x58(%rbp)
000000000001f6bd	movq	%rcx, %rdx
000000000001f6c0	callq	__ZN13HookContainerC1ElPFvvE ## HookContainer::HookContainer(long, void (*)())
000000000001f6c5	jmp	0x1f6ca
000000000001f6ca	movq	-0x50(%rbp), %rax
000000000001f6ce	movq	%rax, -0x20(%rbp)
000000000001f6d2	movq	-0x20(%rbp), %rcx
000000000001f6d6	movq	%rcx, -0x38(%rbp)
000000000001f6da	movq	-0x40(%rbp), %rdi
000000000001f6de	leaq	-0x38(%rbp), %rsi
000000000001f6e2	callq	0x27684 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
000000000001f6e7	movq	-0x20(%rbp), %rdi
000000000001f6eb	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
000000000001f6f0	addq	$0x60, %rsp
000000000001f6f4	popq	%rbp
000000000001f6f5	retq
000000000001f6f6	movl	%edx, %ecx
000000000001f6f8	movq	%rax, -0x28(%rbp)
000000000001f6fc	movl	%ecx, -0x2c(%rbp)
000000000001f6ff	movq	-0x58(%rbp), %rdi
000000000001f703	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001f708	movq	-0x28(%rbp), %rdi
000000000001f70c	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001f711	ud2
000000000001f713	nopw	%cs:(%rax,%rax)
000000000001f71d	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_1cvPFvP10GameObjectEEv:
000000000001f720	pushq	%rbp
000000000001f721	movq	%rsp, %rbp
000000000001f724	movq	%rdi, -0x8(%rbp)
000000000001f728	leaq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvEN3$_18__invokeEP10GameObject(%rip), %rax ## Cacao::EditorUIEditor::applyObjects()::$_1::__invoke(GameObject*)
000000000001f72f	popq	%rbp
000000000001f730	retq
000000000001f731	nopw	%cs:(%rax,%rax)
000000000001f73b	nopl	(%rax,%rax)
__ZN12ModContainer12registerHookIPFP10GameObjectiEEET_lS5_:
000000000001f740	pushq	%rbp
000000000001f741	movq	%rsp, %rbp
000000000001f744	subq	$0x60, %rsp
000000000001f748	movq	%rdi, -0x8(%rbp)
000000000001f74c	movq	%rsi, -0x10(%rbp)
000000000001f750	movq	%rdx, -0x18(%rbp)
000000000001f754	movq	-0x8(%rbp), %rdi
000000000001f758	movl	$0x30, %edx
000000000001f75d	movq	%rdi, -0x40(%rbp)
000000000001f761	movq	%rdx, %rdi
000000000001f764	callq	0x27924 ## symbol stub for: __Znwm
000000000001f769	movq	%rax, %rdx
000000000001f76c	movq	%rax, %rsi
000000000001f76f	movq	-0x10(%rbp), %rdi
000000000001f773	movq	-0x18(%rbp), %rcx
000000000001f777	movq	%rdi, -0x48(%rbp)
000000000001f77b	movq	%rax, %rdi
000000000001f77e	movq	-0x48(%rbp), %rax
000000000001f782	movq	%rsi, -0x50(%rbp)
000000000001f786	movq	%rax, %rsi
000000000001f789	movq	%rdx, -0x58(%rbp)
000000000001f78d	movq	%rcx, %rdx
000000000001f790	callq	__ZN13HookContainerC1ElPFvvE ## HookContainer::HookContainer(long, void (*)())
000000000001f795	jmp	0x1f79a
000000000001f79a	movq	-0x50(%rbp), %rax
000000000001f79e	movq	%rax, -0x20(%rbp)
000000000001f7a2	movq	-0x20(%rbp), %rcx
000000000001f7a6	movq	%rcx, -0x38(%rbp)
000000000001f7aa	movq	-0x40(%rbp), %rdi
000000000001f7ae	leaq	-0x38(%rbp), %rsi
000000000001f7b2	callq	0x27684 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
000000000001f7b7	movq	-0x20(%rbp), %rdi
000000000001f7bb	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
000000000001f7c0	addq	$0x60, %rsp
000000000001f7c4	popq	%rbp
000000000001f7c5	retq
000000000001f7c6	movl	%edx, %ecx
000000000001f7c8	movq	%rax, -0x28(%rbp)
000000000001f7cc	movl	%ecx, -0x2c(%rbp)
000000000001f7cf	movq	-0x58(%rbp), %rdi
000000000001f7d3	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001f7d8	movq	-0x28(%rbp), %rdi
000000000001f7dc	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001f7e1	ud2
000000000001f7e3	nopw	%cs:(%rax,%rax)
000000000001f7ed	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_2cvPFP10GameObjectiEEv:
000000000001f7f0	pushq	%rbp
000000000001f7f1	movq	%rsp, %rbp
000000000001f7f4	movq	%rdi, -0x8(%rbp)
000000000001f7f8	leaq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvEN3$_28__invokeEi(%rip), %rax ## Cacao::EditorUIEditor::applyObjects()::$_2::__invoke(int)
000000000001f7ff	popq	%rbp
000000000001f800	retq
000000000001f801	nopw	%cs:(%rax,%rax)
000000000001f80b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditor14applyCallbacksEv:
000000000001f810	pushq	%rbp
000000000001f811	movq	%rsp, %rbp
000000000001f814	subq	$0x30, %rsp
000000000001f818	movq	%rdi, -0x8(%rbp)
000000000001f81c	movq	-0x8(%rbp), %rdi
000000000001f820	testb	$0x1, __ZN5Cacao14EditorUIEditor14appliedObjectsE(%rip) ## Cacao::EditorUIEditor::appliedObjects
000000000001f827	movq	%rdi, -0x18(%rbp)
000000000001f82b	jne	0x1f87a
000000000001f831	movb	$0x1, __ZN5Cacao14EditorUIEditor14appliedObjectsE(%rip) ## Cacao::EditorUIEditor::appliedObjects
000000000001f838	movq	-0x18(%rbp), %rax
000000000001f83c	movq	%rax, __ZN5Cacao14EditorUIEditor16callbackInstanceE(%rip) ## Cacao::EditorUIEditor::callbackInstance
000000000001f843	movq	0x120(%rax), %rdi
000000000001f84a	movq	%rdi, -0x20(%rbp)
000000000001f84e	callq	__Z7getBasev ## getBase()
000000000001f853	addq	$0x2fa8f0, %rax
000000000001f859	leaq	-0x10(%rbp), %rdi
000000000001f85d	movq	%rax, -0x28(%rbp)
000000000001f861	callq	__ZZN5Cacao14EditorUIEditor14applyCallbacksEvENK3$_3cvPFvP10GameObjectP15GJBaseGameLayerEEv ## Cacao::EditorUIEditor::applyCallbacks()::$_3::operator void (*)(GameObject*, GJBaseGameLayer*)() const
000000000001f866	movq	-0x20(%rbp), %rdi
000000000001f86a	movq	-0x28(%rbp), %rsi
000000000001f86e	movq	%rax, %rdx
000000000001f871	callq	0x271e6 ## symbol stub for: __ZN12ModContainer12registerHookIPFvP10GameObjectP15GJBaseGameLayerEEET_lS7_
000000000001f876	movq	%rax, -0x30(%rbp)
000000000001f87a	movq	-0x18(%rbp), %rax
000000000001f87e	movq	%rax, __ZN5Cacao14EditorUIEditor16callbackInstanceE(%rip) ## Cacao::EditorUIEditor::callbackInstance
000000000001f885	addq	$0x30, %rsp
000000000001f889	popq	%rbp
000000000001f88a	retq
000000000001f88b	nopl	(%rax,%rax)
__ZN12ModContainer12registerHookIPFvP10GameObjectP15GJBaseGameLayerEEET_lS7_:
000000000001f890	pushq	%rbp
000000000001f891	movq	%rsp, %rbp
000000000001f894	subq	$0x60, %rsp
000000000001f898	movq	%rdi, -0x8(%rbp)
000000000001f89c	movq	%rsi, -0x10(%rbp)
000000000001f8a0	movq	%rdx, -0x18(%rbp)
000000000001f8a4	movq	-0x8(%rbp), %rdi
000000000001f8a8	movl	$0x30, %edx
000000000001f8ad	movq	%rdi, -0x40(%rbp)
000000000001f8b1	movq	%rdx, %rdi
000000000001f8b4	callq	0x27924 ## symbol stub for: __Znwm
000000000001f8b9	movq	%rax, %rdx
000000000001f8bc	movq	%rax, %rsi
000000000001f8bf	movq	-0x10(%rbp), %rdi
000000000001f8c3	movq	-0x18(%rbp), %rcx
000000000001f8c7	movq	%rdi, -0x48(%rbp)
000000000001f8cb	movq	%rax, %rdi
000000000001f8ce	movq	-0x48(%rbp), %rax
000000000001f8d2	movq	%rsi, -0x50(%rbp)
000000000001f8d6	movq	%rax, %rsi
000000000001f8d9	movq	%rdx, -0x58(%rbp)
000000000001f8dd	movq	%rcx, %rdx
000000000001f8e0	callq	__ZN13HookContainerC1ElPFvvE ## HookContainer::HookContainer(long, void (*)())
000000000001f8e5	jmp	0x1f8ea
000000000001f8ea	movq	-0x50(%rbp), %rax
000000000001f8ee	movq	%rax, -0x20(%rbp)
000000000001f8f2	movq	-0x20(%rbp), %rcx
000000000001f8f6	movq	%rcx, -0x38(%rbp)
000000000001f8fa	movq	-0x40(%rbp), %rdi
000000000001f8fe	leaq	-0x38(%rbp), %rsi
000000000001f902	callq	0x27684 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_
000000000001f907	movq	-0x20(%rbp), %rdi
000000000001f90b	callq	__ZN13HookContainer11getOriginalEv ## HookContainer::getOriginal()
000000000001f910	addq	$0x60, %rsp
000000000001f914	popq	%rbp
000000000001f915	retq
000000000001f916	movl	%edx, %ecx
000000000001f918	movq	%rax, -0x28(%rbp)
000000000001f91c	movl	%ecx, -0x2c(%rbp)
000000000001f91f	movq	-0x58(%rbp), %rdi
000000000001f923	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001f928	movq	-0x28(%rbp), %rdi
000000000001f92c	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001f931	ud2
000000000001f933	nopw	%cs:(%rax,%rax)
000000000001f93d	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor14applyCallbacksEvENK3$_3cvPFvP10GameObjectP15GJBaseGameLayerEEv:
000000000001f940	pushq	%rbp
000000000001f941	movq	%rsp, %rbp
000000000001f944	movq	%rdi, -0x8(%rbp)
000000000001f948	leaq	__ZZN5Cacao14EditorUIEditor14applyCallbacksEvEN3$_38__invokeEP10GameObjectP15GJBaseGameLayer(%rip), %rax ## Cacao::EditorUIEditor::applyCallbacks()::$_3::__invoke(GameObject*, GJBaseGameLayer*)
000000000001f94f	popq	%rbp
000000000001f950	retq
000000000001f951	nopw	%cs:(%rax,%rax)
000000000001f95b	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperC2Ev:
000000000001f960	pushq	%rbp
000000000001f961	movq	%rsp, %rbp
000000000001f964	subq	$0x10, %rsp
000000000001f968	movq	%rdi, -0x8(%rbp)
000000000001f96c	movq	-0x8(%rbp), %rdi
000000000001f970	movq	%rdi, %rax
000000000001f973	movq	%rdi, -0x10(%rbp)
000000000001f977	movq	%rax, %rdi
000000000001f97a	callq	__ZN7cocos2d6CCNodeC2Ev ## cocos2d::CCNode::CCNode()
000000000001f97f	movq	0x526d2(%rip), %rax
000000000001f986	addq	$0x10, %rax
000000000001f98a	movq	-0x10(%rbp), %rdi
000000000001f98e	movq	%rax, (%rdi)
000000000001f991	addq	$0x10, %rsp
000000000001f995	popq	%rbp
000000000001f996	retq
000000000001f997	nopw	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD1Ev:
000000000001f9a0	pushq	%rbp
000000000001f9a1	movq	%rsp, %rbp
000000000001f9a4	subq	$0x10, %rsp
000000000001f9a8	movq	%rdi, -0x8(%rbp)
000000000001f9ac	movq	-0x8(%rbp), %rdi
000000000001f9b0	callq	__ZN5Cacao14FLDialogHelperD2Ev ## Cacao::FLDialogHelper::~FLDialogHelper()
000000000001f9b5	addq	$0x10, %rsp
000000000001f9b9	popq	%rbp
000000000001f9ba	retq
000000000001f9bb	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD0Ev:
000000000001f9c0	pushq	%rbp
000000000001f9c1	movq	%rsp, %rbp
000000000001f9c4	subq	$0x10, %rsp
000000000001f9c8	movq	%rdi, -0x8(%rbp)
000000000001f9cc	movq	-0x8(%rbp), %rdi
000000000001f9d0	movq	%rdi, -0x10(%rbp)
000000000001f9d4	callq	__ZN5Cacao14FLDialogHelperD1Ev ## Cacao::FLDialogHelper::~FLDialogHelper()
000000000001f9d9	movq	-0x10(%rbp), %rdi
000000000001f9dd	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001f9e2	addq	$0x10, %rsp
000000000001f9e6	popq	%rbp
000000000001f9e7	retq
000000000001f9e8	nopl	(%rax,%rax)
__ZN5Cacao14FLDialogHelperD2Ev:
000000000001f9f0	pushq	%rbp
000000000001f9f1	movq	%rsp, %rbp
000000000001f9f4	subq	$0x10, %rsp
000000000001f9f8	movq	%rdi, -0x8(%rbp)
000000000001f9fc	movq	-0x8(%rbp), %rdi
000000000001fa00	callq	__ZN7cocos2d6CCNodeD2Ev ## cocos2d::CCNode::~CCNode()
000000000001fa05	addq	$0x10, %rsp
000000000001fa09	popq	%rbp
000000000001fa0a	retq
000000000001fa0b	nopl	(%rax,%rax)
__ZN5Cacao16FLDialogDelegateC2Ev:
000000000001fa10	pushq	%rbp
000000000001fa11	movq	%rsp, %rbp
000000000001fa14	leaq	__ZTVN5Cacao16FLDialogDelegateE(%rip), %rax ## vtable for Cacao::FLDialogDelegate
000000000001fa1b	addq	$0x10, %rax
000000000001fa1f	movq	%rdi, -0x8(%rbp)
000000000001fa23	movq	-0x8(%rbp), %rdi
000000000001fa27	movq	%rax, (%rdi)
000000000001fa2a	popq	%rbp
000000000001fa2b	retq
000000000001fa2c	nopl	(%rax)
__ZN5Cacao14EditorUIEditorC2Ev:
000000000001fa30	pushq	%rbp
000000000001fa31	movq	%rsp, %rbp
000000000001fa34	subq	$0x50, %rsp
000000000001fa38	movq	%rdi, -0x8(%rbp)
000000000001fa3c	movq	-0x8(%rbp), %rdi
000000000001fa40	movq	%rdi, -0x28(%rbp)
000000000001fa44	callq	__ZN7cocos2d6CCNodeC2Ev ## cocos2d::CCNode::CCNode()
000000000001fa49	movq	0x52600(%rip), %rdi
000000000001fa50	addq	$0x10, %rdi
000000000001fa54	movq	-0x28(%rbp), %rax
000000000001fa58	movq	%rdi, (%rax)
000000000001fa5b	addq	$0x130, %rax
000000000001fa61	movq	%rax, %rdi
000000000001fa64	movq	%rax, -0x30(%rbp)
000000000001fa68	callq	__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEC1Ev ## std::map<int, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::map()
000000000001fa6d	jmp	0x1fa72
000000000001fa72	movq	-0x28(%rbp), %rax
000000000001fa76	addq	$0x160, %rax
000000000001fa7c	leaq	-0x18(%rbp), %rcx
000000000001fa80	movq	%rcx, %rdi
000000000001fa83	movq	%rax, -0x38(%rbp)
000000000001fa87	movq	%rcx, -0x40(%rbp)
000000000001fa8b	callq	__ZNSaIiEC1Ev ## std::allocator<int>::allocator()
000000000001fa90	movq	-0x38(%rbp), %rdi
000000000001fa94	movq	-0x40(%rbp), %rsi
000000000001fa98	callq	__ZNSt6vectorIiSaIiEEC1ERKS0_ ## std::vector<int, std::allocator<int> >::vector(std::allocator<int> const&)
000000000001fa9d	jmp	0x1faa2
000000000001faa2	leaq	-0x18(%rbp), %rdi
000000000001faa6	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
000000000001faab	movq	-0x28(%rbp), %rdi
000000000001faaf	addq	$0x178, %rdi
000000000001fab6	leaq	-0x20(%rbp), %rax
000000000001faba	movq	%rdi, -0x48(%rbp)
000000000001fabe	movq	%rax, %rdi
000000000001fac1	movq	%rax, -0x50(%rbp)
000000000001fac5	callq	__ZNSaIiEC1Ev ## std::allocator<int>::allocator()
000000000001faca	movq	-0x48(%rbp), %rdi
000000000001face	movq	-0x50(%rbp), %rsi
000000000001fad2	callq	__ZNSt6vectorIiSaIiEEC1ERKS0_ ## std::vector<int, std::allocator<int> >::vector(std::allocator<int> const&)
000000000001fad7	jmp	0x1fadc
000000000001fadc	leaq	-0x20(%rbp), %rdi
000000000001fae0	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
000000000001fae5	movq	-0x28(%rbp), %rdi
000000000001fae9	addq	$0x190, %rdi
000000000001faf0	callq	__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEC1Ev ## std::map<int, void (*)(GameObject*, GJBaseGameLayer*), std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::map()
000000000001faf5	jmp	0x1fafa
000000000001fafa	addq	$0x50, %rsp
000000000001fafe	popq	%rbp
000000000001faff	retq
000000000001fb00	movl	%edx, %ecx
000000000001fb02	movq	%rax, -0x10(%rbp)
000000000001fb06	movl	%ecx, -0x14(%rbp)
000000000001fb09	jmp	0x1fb60
000000000001fb0e	movl	%edx, %ecx
000000000001fb10	movq	%rax, -0x10(%rbp)
000000000001fb14	movl	%ecx, -0x14(%rbp)
000000000001fb17	leaq	-0x18(%rbp), %rdi
000000000001fb1b	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
000000000001fb20	jmp	0x1fb57
000000000001fb25	movl	%edx, %ecx
000000000001fb27	movq	%rax, -0x10(%rbp)
000000000001fb2b	movl	%ecx, -0x14(%rbp)
000000000001fb2e	leaq	-0x20(%rbp), %rdi
000000000001fb32	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
000000000001fb37	jmp	0x1fb4e
000000000001fb3c	movl	%edx, %ecx
000000000001fb3e	movq	%rax, -0x10(%rbp)
000000000001fb42	movl	%ecx, -0x14(%rbp)
000000000001fb45	movq	-0x48(%rbp), %rdi
000000000001fb49	callq	__ZNSt6vectorIiSaIiEED1Ev ## std::vector<int, std::allocator<int> >::~vector()
000000000001fb4e	movq	-0x38(%rbp), %rdi
000000000001fb52	callq	__ZNSt6vectorIiSaIiEED1Ev ## std::vector<int, std::allocator<int> >::~vector()
000000000001fb57	movq	-0x30(%rbp), %rdi
000000000001fb5b	callq	__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEED1Ev ## std::map<int, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~map()
000000000001fb60	movq	-0x28(%rbp), %rax
000000000001fb64	movq	%rax, %rdi
000000000001fb67	callq	__ZN7cocos2d6CCNodeD2Ev ## cocos2d::CCNode::~CCNode()
000000000001fb6c	movq	-0x10(%rbp), %rdi
000000000001fb70	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001fb75	ud2
000000000001fb77	nopw	(%rax,%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEC1Ev:
000000000001fb80	pushq	%rbp
000000000001fb81	movq	%rsp, %rbp
000000000001fb84	subq	$0x10, %rsp
000000000001fb88	movq	%rdi, -0x8(%rbp)
000000000001fb8c	movq	-0x8(%rbp), %rdi
000000000001fb90	callq	__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEC2Ev ## std::map<int, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::map()
000000000001fb95	addq	$0x10, %rsp
000000000001fb99	popq	%rbp
000000000001fb9a	retq
000000000001fb9b	nopl	(%rax,%rax)
__ZNSaIiEC1Ev:
000000000001fba0	pushq	%rbp
000000000001fba1	movq	%rsp, %rbp
000000000001fba4	subq	$0x10, %rsp
000000000001fba8	movq	%rdi, -0x8(%rbp)
000000000001fbac	movq	-0x8(%rbp), %rdi
000000000001fbb0	callq	__ZNSaIiEC2Ev ## std::allocator<int>::allocator()
000000000001fbb5	addq	$0x10, %rsp
000000000001fbb9	popq	%rbp
000000000001fbba	retq
000000000001fbbb	nopl	(%rax,%rax)
__ZNSt6vectorIiSaIiEEC1ERKS0_:
000000000001fbc0	pushq	%rbp
000000000001fbc1	movq	%rsp, %rbp
000000000001fbc4	subq	$0x10, %rsp
000000000001fbc8	movq	%rdi, -0x8(%rbp)
000000000001fbcc	movq	%rsi, -0x10(%rbp)
000000000001fbd0	movq	-0x8(%rbp), %rdi
000000000001fbd4	movq	-0x10(%rbp), %rsi
000000000001fbd8	callq	__ZNSt6vectorIiSaIiEEC2ERKS0_ ## std::vector<int, std::allocator<int> >::vector(std::allocator<int> const&)
000000000001fbdd	addq	$0x10, %rsp
000000000001fbe1	popq	%rbp
000000000001fbe2	retq
000000000001fbe3	nopw	%cs:(%rax,%rax)
000000000001fbed	nopl	(%rax)
__ZNSaIiED1Ev:
000000000001fbf0	pushq	%rbp
000000000001fbf1	movq	%rsp, %rbp
000000000001fbf4	subq	$0x10, %rsp
000000000001fbf8	movq	%rdi, -0x8(%rbp)
000000000001fbfc	movq	-0x8(%rbp), %rdi
000000000001fc00	callq	__ZNSaIiED2Ev ## std::allocator<int>::~allocator()
000000000001fc05	addq	$0x10, %rsp
000000000001fc09	popq	%rbp
000000000001fc0a	retq
000000000001fc0b	nopl	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEC1Ev:
000000000001fc10	pushq	%rbp
000000000001fc11	movq	%rsp, %rbp
000000000001fc14	subq	$0x10, %rsp
000000000001fc18	movq	%rdi, -0x8(%rbp)
000000000001fc1c	movq	-0x8(%rbp), %rdi
000000000001fc20	callq	__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEC2Ev ## std::map<int, void (*)(GameObject*, GJBaseGameLayer*), std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::map()
000000000001fc25	addq	$0x10, %rsp
000000000001fc29	popq	%rbp
000000000001fc2a	retq
000000000001fc2b	nopl	(%rax,%rax)
__ZNSt6vectorIiSaIiEED1Ev:
000000000001fc30	pushq	%rbp
000000000001fc31	movq	%rsp, %rbp
000000000001fc34	subq	$0x10, %rsp
000000000001fc38	movq	%rdi, -0x8(%rbp)
000000000001fc3c	movq	-0x8(%rbp), %rdi
000000000001fc40	callq	__ZNSt6vectorIiSaIiEED2Ev ## std::vector<int, std::allocator<int> >::~vector()
000000000001fc45	addq	$0x10, %rsp
000000000001fc49	popq	%rbp
000000000001fc4a	retq
000000000001fc4b	nopl	(%rax,%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEED1Ev:
000000000001fc50	pushq	%rbp
000000000001fc51	movq	%rsp, %rbp
000000000001fc54	subq	$0x10, %rsp
000000000001fc58	movq	%rdi, -0x8(%rbp)
000000000001fc5c	movq	-0x8(%rbp), %rdi
000000000001fc60	callq	__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEED2Ev ## std::map<int, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~map()
000000000001fc65	addq	$0x10, %rsp
000000000001fc69	popq	%rbp
000000000001fc6a	retq
000000000001fc6b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditorD1Ev:
000000000001fc70	pushq	%rbp
000000000001fc71	movq	%rsp, %rbp
000000000001fc74	subq	$0x10, %rsp
000000000001fc78	movq	%rdi, -0x8(%rbp)
000000000001fc7c	movq	-0x8(%rbp), %rdi
000000000001fc80	callq	__ZN5Cacao14EditorUIEditorD2Ev ## Cacao::EditorUIEditor::~EditorUIEditor()
000000000001fc85	addq	$0x10, %rsp
000000000001fc89	popq	%rbp
000000000001fc8a	retq
000000000001fc8b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditorD0Ev:
000000000001fc90	pushq	%rbp
000000000001fc91	movq	%rsp, %rbp
000000000001fc94	subq	$0x10, %rsp
000000000001fc98	movq	%rdi, -0x8(%rbp)
000000000001fc9c	movq	-0x8(%rbp), %rdi
000000000001fca0	movq	%rdi, -0x10(%rbp)
000000000001fca4	callq	__ZN5Cacao14EditorUIEditorD1Ev ## Cacao::EditorUIEditor::~EditorUIEditor()
000000000001fca9	movq	-0x10(%rbp), %rdi
000000000001fcad	callq	0x2791e ## symbol stub for: __ZdlPv
000000000001fcb2	addq	$0x10, %rsp
000000000001fcb6	popq	%rbp
000000000001fcb7	retq
000000000001fcb8	nopl	(%rax,%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEEC2Ev:
000000000001fcc0	pushq	%rbp
000000000001fcc1	movq	%rsp, %rbp
000000000001fcc4	subq	$0x40, %rsp
000000000001fcc8	movq	%rdi, -0x8(%rbp)
000000000001fccc	movq	-0x8(%rbp), %rdi
000000000001fcd0	leaq	-0x18(%rbp), %rax
000000000001fcd4	movq	%rdi, -0x30(%rbp)
000000000001fcd8	movq	%rax, %rdi
000000000001fcdb	movq	%rax, -0x38(%rbp)
000000000001fcdf	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::allocator()
000000000001fce4	leaq	-0x10(%rbp), %rsi
000000000001fce8	movq	-0x30(%rbp), %rdi
000000000001fcec	movq	-0x38(%rbp), %rdx
000000000001fcf0	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EEC1ERKSA_RKSB_ ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree(std::less<int> const&, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&)
000000000001fcf5	jmp	0x1fcfa
000000000001fcfa	leaq	-0x18(%rbp), %rdi
000000000001fcfe	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
000000000001fd03	addq	$0x40, %rsp
000000000001fd07	popq	%rbp
000000000001fd08	retq
000000000001fd09	movl	%edx, %ecx
000000000001fd0b	movq	%rax, -0x20(%rbp)
000000000001fd0f	movl	%ecx, -0x24(%rbp)
000000000001fd12	leaq	-0x18(%rbp), %rdi
000000000001fd16	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
000000000001fd1b	movq	-0x20(%rbp), %rdi
000000000001fd1f	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001fd24	ud2
000000000001fd26	nopw	%cs:(%rax,%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC1Ev:
000000000001fd30	pushq	%rbp
000000000001fd31	movq	%rsp, %rbp
000000000001fd34	subq	$0x10, %rsp
000000000001fd38	movq	%rdi, -0x8(%rbp)
000000000001fd3c	movq	-0x8(%rbp), %rdi
000000000001fd40	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC2Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::allocator()
000000000001fd45	addq	$0x10, %rsp
000000000001fd49	popq	%rbp
000000000001fd4a	retq
000000000001fd4b	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EEC1ERKSA_RKSB_:
000000000001fd50	pushq	%rbp
000000000001fd51	movq	%rsp, %rbp
000000000001fd54	subq	$0x20, %rsp
000000000001fd58	movq	%rdi, -0x8(%rbp)
000000000001fd5c	movq	%rsi, -0x10(%rbp)
000000000001fd60	movq	%rdx, -0x18(%rbp)
000000000001fd64	movq	-0x8(%rbp), %rdi
000000000001fd68	movq	-0x10(%rbp), %rsi
000000000001fd6c	movq	-0x18(%rbp), %rdx
000000000001fd70	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EEC2ERKSA_RKSB_ ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree(std::less<int> const&, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&)
000000000001fd75	addq	$0x20, %rsp
000000000001fd79	popq	%rbp
000000000001fd7a	retq
000000000001fd7b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev:
000000000001fd80	pushq	%rbp
000000000001fd81	movq	%rsp, %rbp
000000000001fd84	subq	$0x10, %rsp
000000000001fd88	movq	%rdi, -0x8(%rbp)
000000000001fd8c	movq	-0x8(%rbp), %rdi
000000000001fd90	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED2Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
000000000001fd95	addq	$0x10, %rsp
000000000001fd99	popq	%rbp
000000000001fd9a	retq
000000000001fd9b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC2Ev:
000000000001fda0	pushq	%rbp
000000000001fda1	movq	%rsp, %rbp
000000000001fda4	subq	$0x10, %rsp
000000000001fda8	movq	%rdi, -0x8(%rbp)
000000000001fdac	movq	-0x8(%rbp), %rdi
000000000001fdb0	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEEC2Ev ## __gnu_cxx::new_allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::new_allocator()
000000000001fdb5	addq	$0x10, %rsp
000000000001fdb9	popq	%rbp
000000000001fdba	retq
000000000001fdbb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEEC2Ev:
000000000001fdc0	pushq	%rbp
000000000001fdc1	movq	%rsp, %rbp
000000000001fdc4	movq	%rdi, -0x8(%rbp)
000000000001fdc8	popq	%rbp
000000000001fdc9	retq
000000000001fdca	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EEC2ERKSA_RKSB_:
000000000001fdd0	pushq	%rbp
000000000001fdd1	movq	%rsp, %rbp
000000000001fdd4	subq	$0x40, %rsp
000000000001fdd8	movq	%rdi, -0x8(%rbp)
000000000001fddc	movq	%rsi, -0x10(%rbp)
000000000001fde0	movq	%rdx, -0x18(%rbp)
000000000001fde4	movq	-0x8(%rbp), %rdi
000000000001fde8	movq	-0x18(%rbp), %rsi
000000000001fdec	leaq	-0x20(%rbp), %rdx
000000000001fdf0	movq	%rdi, -0x38(%rbp)
000000000001fdf4	movq	%rdx, %rdi
000000000001fdf7	movq	%rdx, -0x40(%rbp)
000000000001fdfb	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC1IS6_EERKSaIT_E ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >(std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&)
000000000001fe00	movq	-0x10(%rbp), %rdx
000000000001fe04	movq	-0x38(%rbp), %rdi
000000000001fe08	movq	-0x40(%rbp), %rsi
000000000001fe0c	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EEC1ERKSaISt13_Rb_tree_nodeIS6_EERKSA_ ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree_impl<std::less<int>, false>::_Rb_tree_impl(std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&, std::less<int> const&)
000000000001fe11	jmp	0x1fe16
000000000001fe16	leaq	-0x20(%rbp), %rdi
000000000001fe1a	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED1Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~allocator()
000000000001fe1f	addq	$0x40, %rsp
000000000001fe23	popq	%rbp
000000000001fe24	retq
000000000001fe25	movl	%edx, %ecx
000000000001fe27	movq	%rax, -0x28(%rbp)
000000000001fe2b	movl	%ecx, -0x2c(%rbp)
000000000001fe2e	leaq	-0x20(%rbp), %rdi
000000000001fe32	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED1Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~allocator()
000000000001fe37	movq	-0x28(%rbp), %rdi
000000000001fe3b	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000001fe40	ud2
000000000001fe42	nopw	%cs:(%rax,%rax)
000000000001fe4c	nopl	(%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC1IS6_EERKSaIT_E:
000000000001fe50	pushq	%rbp
000000000001fe51	movq	%rsp, %rbp
000000000001fe54	subq	$0x10, %rsp
000000000001fe58	movq	%rdi, -0x8(%rbp)
000000000001fe5c	movq	%rsi, -0x10(%rbp)
000000000001fe60	movq	-0x8(%rbp), %rdi
000000000001fe64	movq	-0x10(%rbp), %rsi
000000000001fe68	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC2IS6_EERKSaIT_E ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >(std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&)
000000000001fe6d	addq	$0x10, %rsp
000000000001fe71	popq	%rbp
000000000001fe72	retq
000000000001fe73	nopw	%cs:(%rax,%rax)
000000000001fe7d	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EEC1ERKSaISt13_Rb_tree_nodeIS6_EERKSA_:
000000000001fe80	pushq	%rbp
000000000001fe81	movq	%rsp, %rbp
000000000001fe84	subq	$0x20, %rsp
000000000001fe88	movq	%rdi, -0x8(%rbp)
000000000001fe8c	movq	%rsi, -0x10(%rbp)
000000000001fe90	movq	%rdx, -0x18(%rbp)
000000000001fe94	movq	-0x8(%rbp), %rdi
000000000001fe98	movq	-0x10(%rbp), %rsi
000000000001fe9c	movq	-0x18(%rbp), %rdx
000000000001fea0	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EEC2ERKSaISt13_Rb_tree_nodeIS6_EERKSA_ ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree_impl<std::less<int>, false>::_Rb_tree_impl(std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&, std::less<int> const&)
000000000001fea5	addq	$0x20, %rsp
000000000001fea9	popq	%rbp
000000000001feaa	retq
000000000001feab	nopl	(%rax,%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED1Ev:
000000000001feb0	pushq	%rbp
000000000001feb1	movq	%rsp, %rbp
000000000001feb4	subq	$0x10, %rsp
000000000001feb8	movq	%rdi, -0x8(%rbp)
000000000001febc	movq	-0x8(%rbp), %rdi
000000000001fec0	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED2Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~allocator()
000000000001fec5	addq	$0x10, %rsp
000000000001fec9	popq	%rbp
000000000001feca	retq
000000000001fecb	nopl	(%rax,%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC2IS6_EERKSaIT_E:
000000000001fed0	pushq	%rbp
000000000001fed1	movq	%rsp, %rbp
000000000001fed4	subq	$0x10, %rsp
000000000001fed8	movq	%rdi, -0x8(%rbp)
000000000001fedc	movq	%rsi, -0x10(%rbp)
000000000001fee0	movq	-0x8(%rbp), %rsi
000000000001fee4	movq	%rsi, %rdi
000000000001fee7	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEEC2Ev ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::new_allocator()
000000000001feec	addq	$0x10, %rsp
000000000001fef0	popq	%rbp
000000000001fef1	retq
000000000001fef2	nopw	%cs:(%rax,%rax)
000000000001fefc	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEEC2Ev:
000000000001ff00	pushq	%rbp
000000000001ff01	movq	%rsp, %rbp
000000000001ff04	movq	%rdi, -0x8(%rbp)
000000000001ff08	popq	%rbp
000000000001ff09	retq
000000000001ff0a	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EEC2ERKSaISt13_Rb_tree_nodeIS6_EERKSA_:
000000000001ff10	pushq	%rbp
000000000001ff11	movq	%rsp, %rbp
000000000001ff14	subq	$0x30, %rsp
000000000001ff18	movq	%rdi, -0x8(%rbp)
000000000001ff1c	movq	%rsi, -0x10(%rbp)
000000000001ff20	movq	%rdx, -0x18(%rbp)
000000000001ff24	movq	-0x8(%rbp), %rdx
000000000001ff28	movq	%rdx, %rsi
000000000001ff2b	movq	-0x10(%rbp), %rdi
000000000001ff2f	movq	%rdi, -0x20(%rbp)
000000000001ff33	movq	%rsi, %rdi
000000000001ff36	movq	-0x20(%rbp), %rsi
000000000001ff3a	movq	%rdx, -0x28(%rbp)
000000000001ff3e	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC2ERKS8_ ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::allocator(std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&)
000000000001ff43	xorl	%esi, %esi
000000000001ff45	movq	-0x28(%rbp), %rdx
000000000001ff49	addq	$0x8, %rdx
000000000001ff4d	movq	%rdx, %rdi
000000000001ff50	movl	$0x20, %edx
000000000001ff55	callq	0x279cc ## symbol stub for: _memset
000000000001ff5a	movq	-0x28(%rbp), %rdx
000000000001ff5e	movq	$0x0, 0x28(%rdx)
000000000001ff66	movl	$0x0, 0x8(%rdx)
000000000001ff6d	movq	$0x0, 0x10(%rdx)
000000000001ff75	addq	$0x8, %rdx
000000000001ff79	movq	-0x28(%rbp), %rdi
000000000001ff7d	movq	%rdx, 0x18(%rdi)
000000000001ff81	addq	$0x8, %rdi
000000000001ff85	movq	-0x28(%rbp), %rdx
000000000001ff89	movq	%rdi, 0x20(%rdx)
000000000001ff8d	addq	$0x30, %rsp
000000000001ff91	popq	%rbp
000000000001ff92	retq
000000000001ff93	nopw	%cs:(%rax,%rax)
000000000001ff9d	nopl	(%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEEC2ERKS8_:
000000000001ffa0	pushq	%rbp
000000000001ffa1	movq	%rsp, %rbp
000000000001ffa4	subq	$0x20, %rsp
000000000001ffa8	movq	%rdi, -0x8(%rbp)
000000000001ffac	movq	%rsi, -0x10(%rbp)
000000000001ffb0	movq	-0x8(%rbp), %rsi
000000000001ffb4	movq	-0x10(%rbp), %rdi
000000000001ffb8	movq	%rdi, -0x18(%rbp)
000000000001ffbc	movq	%rsi, %rdi
000000000001ffbf	movq	-0x18(%rbp), %rsi
000000000001ffc3	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEEC2ERKSA_ ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::new_allocator(__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&)
000000000001ffc8	addq	$0x20, %rsp
000000000001ffcc	popq	%rbp
000000000001ffcd	retq
000000000001ffce	nop
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEEC2ERKSA_:
000000000001ffd0	pushq	%rbp
000000000001ffd1	movq	%rsp, %rbp
000000000001ffd4	movq	%rdi, -0x8(%rbp)
000000000001ffd8	movq	%rsi, -0x10(%rbp)
000000000001ffdc	popq	%rbp
000000000001ffdd	retq
000000000001ffde	nop
__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED2Ev:
000000000001ffe0	pushq	%rbp
000000000001ffe1	movq	%rsp, %rbp
000000000001ffe4	subq	$0x10, %rsp
000000000001ffe8	movq	%rdi, -0x8(%rbp)
000000000001ffec	movq	-0x8(%rbp), %rdi
000000000001fff0	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEED2Ev ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~new_allocator()
000000000001fff5	addq	$0x10, %rsp
000000000001fff9	popq	%rbp
000000000001fffa	retq
000000000001fffb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEED2Ev:
0000000000020000	pushq	%rbp
0000000000020001	movq	%rsp, %rbp
0000000000020004	movq	%rdi, -0x8(%rbp)
0000000000020008	popq	%rbp
0000000000020009	retq
000000000002000a	nopw	(%rax,%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED2Ev:
0000000000020010	pushq	%rbp
0000000000020011	movq	%rsp, %rbp
0000000000020014	subq	$0x10, %rsp
0000000000020018	movq	%rdi, -0x8(%rbp)
000000000002001c	movq	-0x8(%rbp), %rdi
0000000000020020	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEED2Ev ## __gnu_cxx::new_allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~new_allocator()
0000000000020025	addq	$0x10, %rsp
0000000000020029	popq	%rbp
000000000002002a	retq
000000000002002b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEED2Ev:
0000000000020030	pushq	%rbp
0000000000020031	movq	%rsp, %rbp
0000000000020034	movq	%rdi, -0x8(%rbp)
0000000000020038	popq	%rbp
0000000000020039	retq
000000000002003a	nopw	(%rax,%rax)
__ZNSaIiEC2Ev:
0000000000020040	pushq	%rbp
0000000000020041	movq	%rsp, %rbp
0000000000020044	subq	$0x10, %rsp
0000000000020048	movq	%rdi, -0x8(%rbp)
000000000002004c	movq	-0x8(%rbp), %rdi
0000000000020050	callq	__ZN9__gnu_cxx13new_allocatorIiEC2Ev ## __gnu_cxx::new_allocator<int>::new_allocator()
0000000000020055	addq	$0x10, %rsp
0000000000020059	popq	%rbp
000000000002005a	retq
000000000002005b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIiEC2Ev:
0000000000020060	pushq	%rbp
0000000000020061	movq	%rsp, %rbp
0000000000020064	movq	%rdi, -0x8(%rbp)
0000000000020068	popq	%rbp
0000000000020069	retq
000000000002006a	nopw	(%rax,%rax)
__ZNSt6vectorIiSaIiEEC2ERKS0_:
0000000000020070	pushq	%rbp
0000000000020071	movq	%rsp, %rbp
0000000000020074	subq	$0x20, %rsp
0000000000020078	movq	%rdi, -0x8(%rbp)
000000000002007c	movq	%rsi, -0x10(%rbp)
0000000000020080	movq	-0x8(%rbp), %rsi
0000000000020084	movq	-0x10(%rbp), %rdi
0000000000020088	movq	%rdi, -0x18(%rbp)
000000000002008c	movq	%rsi, %rdi
000000000002008f	movq	-0x18(%rbp), %rsi
0000000000020093	callq	__ZNSt12_Vector_baseIiSaIiEEC2ERKS0_ ## std::_Vector_base<int, std::allocator<int> >::_Vector_base(std::allocator<int> const&)
0000000000020098	addq	$0x20, %rsp
000000000002009c	popq	%rbp
000000000002009d	retq
000000000002009e	nop
__ZNSt12_Vector_baseIiSaIiEEC2ERKS0_:
00000000000200a0	pushq	%rbp
00000000000200a1	movq	%rsp, %rbp
00000000000200a4	subq	$0x10, %rsp
00000000000200a8	movq	%rdi, -0x8(%rbp)
00000000000200ac	movq	%rsi, -0x10(%rbp)
00000000000200b0	movq	-0x8(%rbp), %rdi
00000000000200b4	movq	-0x10(%rbp), %rsi
00000000000200b8	callq	__ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_ ## std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)
00000000000200bd	addq	$0x10, %rsp
00000000000200c1	popq	%rbp
00000000000200c2	retq
00000000000200c3	nopw	%cs:(%rax,%rax)
00000000000200cd	nopl	(%rax)
__ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_:
00000000000200d0	pushq	%rbp
00000000000200d1	movq	%rsp, %rbp
00000000000200d4	subq	$0x10, %rsp
00000000000200d8	movq	%rdi, -0x8(%rbp)
00000000000200dc	movq	%rsi, -0x10(%rbp)
00000000000200e0	movq	-0x8(%rbp), %rdi
00000000000200e4	movq	-0x10(%rbp), %rsi
00000000000200e8	callq	__ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2ERKS0_ ## std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)
00000000000200ed	addq	$0x10, %rsp
00000000000200f1	popq	%rbp
00000000000200f2	retq
00000000000200f3	nopw	%cs:(%rax,%rax)
00000000000200fd	nopl	(%rax)
__ZNSt12_Vector_baseIiSaIiEE12_Vector_implC2ERKS0_:
0000000000020100	pushq	%rbp
0000000000020101	movq	%rsp, %rbp
0000000000020104	subq	$0x20, %rsp
0000000000020108	movq	%rdi, -0x8(%rbp)
000000000002010c	movq	%rsi, -0x10(%rbp)
0000000000020110	movq	-0x8(%rbp), %rsi
0000000000020114	movq	%rsi, %rdi
0000000000020117	movq	-0x10(%rbp), %rax
000000000002011b	movq	%rsi, -0x18(%rbp)
000000000002011f	movq	%rax, %rsi
0000000000020122	callq	__ZNSaIiEC2ERKS_ ## std::allocator<int>::allocator(std::allocator<int> const&)
0000000000020127	movq	-0x18(%rbp), %rax
000000000002012b	movq	$0x0, (%rax)
0000000000020132	movq	$0x0, 0x8(%rax)
000000000002013a	movq	$0x0, 0x10(%rax)
0000000000020142	addq	$0x20, %rsp
0000000000020146	popq	%rbp
0000000000020147	retq
0000000000020148	nopl	(%rax,%rax)
__ZNSaIiEC2ERKS_:
0000000000020150	pushq	%rbp
0000000000020151	movq	%rsp, %rbp
0000000000020154	subq	$0x20, %rsp
0000000000020158	movq	%rdi, -0x8(%rbp)
000000000002015c	movq	%rsi, -0x10(%rbp)
0000000000020160	movq	-0x8(%rbp), %rsi
0000000000020164	movq	-0x10(%rbp), %rdi
0000000000020168	movq	%rdi, -0x18(%rbp)
000000000002016c	movq	%rsi, %rdi
000000000002016f	movq	-0x18(%rbp), %rsi
0000000000020173	callq	__ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_ ## __gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)
0000000000020178	addq	$0x20, %rsp
000000000002017c	popq	%rbp
000000000002017d	retq
000000000002017e	nop
__ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_:
0000000000020180	pushq	%rbp
0000000000020181	movq	%rsp, %rbp
0000000000020184	movq	%rdi, -0x8(%rbp)
0000000000020188	movq	%rsi, -0x10(%rbp)
000000000002018c	popq	%rbp
000000000002018d	retq
000000000002018e	nop
__ZNSaIiED2Ev:
0000000000020190	pushq	%rbp
0000000000020191	movq	%rsp, %rbp
0000000000020194	subq	$0x10, %rsp
0000000000020198	movq	%rdi, -0x8(%rbp)
000000000002019c	movq	-0x8(%rbp), %rdi
00000000000201a0	callq	__ZN9__gnu_cxx13new_allocatorIiED2Ev ## __gnu_cxx::new_allocator<int>::~new_allocator()
00000000000201a5	addq	$0x10, %rsp
00000000000201a9	popq	%rbp
00000000000201aa	retq
00000000000201ab	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIiED2Ev:
00000000000201b0	pushq	%rbp
00000000000201b1	movq	%rsp, %rbp
00000000000201b4	movq	%rdi, -0x8(%rbp)
00000000000201b8	popq	%rbp
00000000000201b9	retq
00000000000201ba	nopw	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEC2Ev:
00000000000201c0	pushq	%rbp
00000000000201c1	movq	%rsp, %rbp
00000000000201c4	subq	$0x40, %rsp
00000000000201c8	movq	%rdi, -0x8(%rbp)
00000000000201cc	movq	-0x8(%rbp), %rdi
00000000000201d0	leaq	-0x18(%rbp), %rax
00000000000201d4	movq	%rdi, -0x30(%rbp)
00000000000201d8	movq	%rax, %rdi
00000000000201db	movq	%rax, -0x38(%rbp)
00000000000201df	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::allocator()
00000000000201e4	leaq	-0x10(%rbp), %rsi
00000000000201e8	movq	-0x30(%rbp), %rdi
00000000000201ec	movq	-0x38(%rbp), %rdx
00000000000201f0	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EEC1ERKSC_RKSD_ ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree(std::less<int> const&, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&)
00000000000201f5	jmp	0x201fa
00000000000201fa	leaq	-0x18(%rbp), %rdi
00000000000201fe	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
0000000000020203	addq	$0x40, %rsp
0000000000020207	popq	%rbp
0000000000020208	retq
0000000000020209	movl	%edx, %ecx
000000000002020b	movq	%rax, -0x20(%rbp)
000000000002020f	movl	%ecx, -0x24(%rbp)
0000000000020212	leaq	-0x18(%rbp), %rdi
0000000000020216	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
000000000002021b	movq	-0x20(%rbp), %rdi
000000000002021f	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000020224	ud2
0000000000020226	nopw	%cs:(%rax,%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1Ev:
0000000000020230	pushq	%rbp
0000000000020231	movq	%rsp, %rbp
0000000000020234	subq	$0x10, %rsp
0000000000020238	movq	%rdi, -0x8(%rbp)
000000000002023c	movq	-0x8(%rbp), %rdi
0000000000020240	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::allocator()
0000000000020245	addq	$0x10, %rsp
0000000000020249	popq	%rbp
000000000002024a	retq
000000000002024b	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EEC1ERKSC_RKSD_:
0000000000020250	pushq	%rbp
0000000000020251	movq	%rsp, %rbp
0000000000020254	subq	$0x20, %rsp
0000000000020258	movq	%rdi, -0x8(%rbp)
000000000002025c	movq	%rsi, -0x10(%rbp)
0000000000020260	movq	%rdx, -0x18(%rbp)
0000000000020264	movq	-0x8(%rbp), %rdi
0000000000020268	movq	-0x10(%rbp), %rsi
000000000002026c	movq	-0x18(%rbp), %rdx
0000000000020270	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EEC2ERKSC_RKSD_ ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree(std::less<int> const&, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&)
0000000000020275	addq	$0x20, %rsp
0000000000020279	popq	%rbp
000000000002027a	retq
000000000002027b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev:
0000000000020280	pushq	%rbp
0000000000020281	movq	%rsp, %rbp
0000000000020284	subq	$0x10, %rsp
0000000000020288	movq	%rdi, -0x8(%rbp)
000000000002028c	movq	-0x8(%rbp), %rdi
0000000000020290	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED2Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
0000000000020295	addq	$0x10, %rsp
0000000000020299	popq	%rbp
000000000002029a	retq
000000000002029b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2Ev:
00000000000202a0	pushq	%rbp
00000000000202a1	movq	%rsp, %rbp
00000000000202a4	subq	$0x10, %rsp
00000000000202a8	movq	%rdi, -0x8(%rbp)
00000000000202ac	movq	-0x8(%rbp), %rdi
00000000000202b0	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2Ev ## __gnu_cxx::new_allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::new_allocator()
00000000000202b5	addq	$0x10, %rsp
00000000000202b9	popq	%rbp
00000000000202ba	retq
00000000000202bb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2Ev:
00000000000202c0	pushq	%rbp
00000000000202c1	movq	%rsp, %rbp
00000000000202c4	movq	%rdi, -0x8(%rbp)
00000000000202c8	popq	%rbp
00000000000202c9	retq
00000000000202ca	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EEC2ERKSC_RKSD_:
00000000000202d0	pushq	%rbp
00000000000202d1	movq	%rsp, %rbp
00000000000202d4	subq	$0x40, %rsp
00000000000202d8	movq	%rdi, -0x8(%rbp)
00000000000202dc	movq	%rsi, -0x10(%rbp)
00000000000202e0	movq	%rdx, -0x18(%rbp)
00000000000202e4	movq	-0x8(%rbp), %rdi
00000000000202e8	movq	-0x18(%rbp), %rsi
00000000000202ec	leaq	-0x20(%rbp), %rdx
00000000000202f0	movq	%rdi, -0x38(%rbp)
00000000000202f4	movq	%rdx, %rdi
00000000000202f7	movq	%rdx, -0x40(%rbp)
00000000000202fb	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC1IS8_EERKSaIT_E ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >(std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&)
0000000000020300	movq	-0x10(%rbp), %rdx
0000000000020304	movq	-0x38(%rbp), %rdi
0000000000020308	movq	-0x40(%rbp), %rsi
000000000002030c	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EEC1ERKSaISt13_Rb_tree_nodeIS8_EERKSC_ ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree_impl<std::less<int>, false>::_Rb_tree_impl(std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&, std::less<int> const&)
0000000000020311	jmp	0x20316
0000000000020316	leaq	-0x20(%rbp), %rdi
000000000002031a	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED1Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~allocator()
000000000002031f	addq	$0x40, %rsp
0000000000020323	popq	%rbp
0000000000020324	retq
0000000000020325	movl	%edx, %ecx
0000000000020327	movq	%rax, -0x28(%rbp)
000000000002032b	movl	%ecx, -0x2c(%rbp)
000000000002032e	leaq	-0x20(%rbp), %rdi
0000000000020332	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED1Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~allocator()
0000000000020337	movq	-0x28(%rbp), %rdi
000000000002033b	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000020340	ud2
0000000000020342	nopw	%cs:(%rax,%rax)
000000000002034c	nopl	(%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC1IS8_EERKSaIT_E:
0000000000020350	pushq	%rbp
0000000000020351	movq	%rsp, %rbp
0000000000020354	subq	$0x10, %rsp
0000000000020358	movq	%rdi, -0x8(%rbp)
000000000002035c	movq	%rsi, -0x10(%rbp)
0000000000020360	movq	-0x8(%rbp), %rdi
0000000000020364	movq	-0x10(%rbp), %rsi
0000000000020368	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2IS8_EERKSaIT_E ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >(std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&)
000000000002036d	addq	$0x10, %rsp
0000000000020371	popq	%rbp
0000000000020372	retq
0000000000020373	nopw	%cs:(%rax,%rax)
000000000002037d	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EEC1ERKSaISt13_Rb_tree_nodeIS8_EERKSC_:
0000000000020380	pushq	%rbp
0000000000020381	movq	%rsp, %rbp
0000000000020384	subq	$0x20, %rsp
0000000000020388	movq	%rdi, -0x8(%rbp)
000000000002038c	movq	%rsi, -0x10(%rbp)
0000000000020390	movq	%rdx, -0x18(%rbp)
0000000000020394	movq	-0x8(%rbp), %rdi
0000000000020398	movq	-0x10(%rbp), %rsi
000000000002039c	movq	-0x18(%rbp), %rdx
00000000000203a0	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EEC2ERKSaISt13_Rb_tree_nodeIS8_EERKSC_ ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree_impl<std::less<int>, false>::_Rb_tree_impl(std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&, std::less<int> const&)
00000000000203a5	addq	$0x20, %rsp
00000000000203a9	popq	%rbp
00000000000203aa	retq
00000000000203ab	nopl	(%rax,%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED1Ev:
00000000000203b0	pushq	%rbp
00000000000203b1	movq	%rsp, %rbp
00000000000203b4	subq	$0x10, %rsp
00000000000203b8	movq	%rdi, -0x8(%rbp)
00000000000203bc	movq	-0x8(%rbp), %rdi
00000000000203c0	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED2Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~allocator()
00000000000203c5	addq	$0x10, %rsp
00000000000203c9	popq	%rbp
00000000000203ca	retq
00000000000203cb	nopl	(%rax,%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2IS8_EERKSaIT_E:
00000000000203d0	pushq	%rbp
00000000000203d1	movq	%rsp, %rbp
00000000000203d4	subq	$0x10, %rsp
00000000000203d8	movq	%rdi, -0x8(%rbp)
00000000000203dc	movq	%rsi, -0x10(%rbp)
00000000000203e0	movq	-0x8(%rbp), %rsi
00000000000203e4	movq	%rsi, %rdi
00000000000203e7	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2Ev ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::new_allocator()
00000000000203ec	addq	$0x10, %rsp
00000000000203f0	popq	%rbp
00000000000203f1	retq
00000000000203f2	nopw	%cs:(%rax,%rax)
00000000000203fc	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2Ev:
0000000000020400	pushq	%rbp
0000000000020401	movq	%rsp, %rbp
0000000000020404	movq	%rdi, -0x8(%rbp)
0000000000020408	popq	%rbp
0000000000020409	retq
000000000002040a	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EEC2ERKSaISt13_Rb_tree_nodeIS8_EERKSC_:
0000000000020410	pushq	%rbp
0000000000020411	movq	%rsp, %rbp
0000000000020414	subq	$0x30, %rsp
0000000000020418	movq	%rdi, -0x8(%rbp)
000000000002041c	movq	%rsi, -0x10(%rbp)
0000000000020420	movq	%rdx, -0x18(%rbp)
0000000000020424	movq	-0x8(%rbp), %rdx
0000000000020428	movq	%rdx, %rsi
000000000002042b	movq	-0x10(%rbp), %rdi
000000000002042f	movq	%rdi, -0x20(%rbp)
0000000000020433	movq	%rsi, %rdi
0000000000020436	movq	-0x20(%rbp), %rsi
000000000002043a	movq	%rdx, -0x28(%rbp)
000000000002043e	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2ERKSA_ ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::allocator(std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&)
0000000000020443	xorl	%esi, %esi
0000000000020445	movq	-0x28(%rbp), %rdx
0000000000020449	addq	$0x8, %rdx
000000000002044d	movq	%rdx, %rdi
0000000000020450	movl	$0x20, %edx
0000000000020455	callq	0x279cc ## symbol stub for: _memset
000000000002045a	movq	-0x28(%rbp), %rdx
000000000002045e	movq	$0x0, 0x28(%rdx)
0000000000020466	movl	$0x0, 0x8(%rdx)
000000000002046d	movq	$0x0, 0x10(%rdx)
0000000000020475	addq	$0x8, %rdx
0000000000020479	movq	-0x28(%rbp), %rdi
000000000002047d	movq	%rdx, 0x18(%rdi)
0000000000020481	addq	$0x8, %rdi
0000000000020485	movq	-0x28(%rbp), %rdx
0000000000020489	movq	%rdi, 0x20(%rdx)
000000000002048d	addq	$0x30, %rsp
0000000000020491	popq	%rbp
0000000000020492	retq
0000000000020493	nopw	%cs:(%rax,%rax)
000000000002049d	nopl	(%rax)
__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2ERKSA_:
00000000000204a0	pushq	%rbp
00000000000204a1	movq	%rsp, %rbp
00000000000204a4	subq	$0x20, %rsp
00000000000204a8	movq	%rdi, -0x8(%rbp)
00000000000204ac	movq	%rsi, -0x10(%rbp)
00000000000204b0	movq	-0x8(%rbp), %rsi
00000000000204b4	movq	-0x10(%rbp), %rdi
00000000000204b8	movq	%rdi, -0x18(%rbp)
00000000000204bc	movq	%rsi, %rdi
00000000000204bf	movq	-0x18(%rbp), %rsi
00000000000204c3	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2ERKSC_ ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::new_allocator(__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&)
00000000000204c8	addq	$0x20, %rsp
00000000000204cc	popq	%rbp
00000000000204cd	retq
00000000000204ce	nop
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEEC2ERKSC_:
00000000000204d0	pushq	%rbp
00000000000204d1	movq	%rsp, %rbp
00000000000204d4	movq	%rdi, -0x8(%rbp)
00000000000204d8	movq	%rsi, -0x10(%rbp)
00000000000204dc	popq	%rbp
00000000000204dd	retq
00000000000204de	nop
__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED2Ev:
00000000000204e0	pushq	%rbp
00000000000204e1	movq	%rsp, %rbp
00000000000204e4	subq	$0x10, %rsp
00000000000204e8	movq	%rdi, -0x8(%rbp)
00000000000204ec	movq	-0x8(%rbp), %rdi
00000000000204f0	callq	__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED2Ev ## __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~new_allocator()
00000000000204f5	addq	$0x10, %rsp
00000000000204f9	popq	%rbp
00000000000204fa	retq
00000000000204fb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED2Ev:
0000000000020500	pushq	%rbp
0000000000020501	movq	%rsp, %rbp
0000000000020504	movq	%rdi, -0x8(%rbp)
0000000000020508	popq	%rbp
0000000000020509	retq
000000000002050a	nopw	(%rax,%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED2Ev:
0000000000020510	pushq	%rbp
0000000000020511	movq	%rsp, %rbp
0000000000020514	subq	$0x10, %rsp
0000000000020518	movq	%rdi, -0x8(%rbp)
000000000002051c	movq	-0x8(%rbp), %rdi
0000000000020520	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED2Ev ## __gnu_cxx::new_allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~new_allocator()
0000000000020525	addq	$0x10, %rsp
0000000000020529	popq	%rbp
000000000002052a	retq
000000000002052b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED2Ev:
0000000000020530	pushq	%rbp
0000000000020531	movq	%rsp, %rbp
0000000000020534	movq	%rdi, -0x8(%rbp)
0000000000020538	popq	%rbp
0000000000020539	retq
000000000002053a	nopw	(%rax,%rax)
__ZNSt6vectorIiSaIiEED2Ev:
0000000000020540	pushq	%rbp
0000000000020541	movq	%rsp, %rbp
0000000000020544	subq	$0x50, %rsp
0000000000020548	movq	%rdi, -0x8(%rbp)
000000000002054c	movq	-0x8(%rbp), %rdi
0000000000020550	movq	(%rdi), %rax
0000000000020553	movq	0x8(%rdi), %rsi
0000000000020557	movq	%rdi, -0x28(%rbp)
000000000002055b	movq	%rax, -0x30(%rbp)
000000000002055f	movq	%rsi, -0x38(%rbp)
0000000000020563	callq	0x2759a ## symbol stub for: __ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv
0000000000020568	movq	%rax, -0x40(%rbp)
000000000002056c	jmp	0x20571
0000000000020571	leaq	-0x10(%rbp), %rax
0000000000020575	movq	%rax, %rdi
0000000000020578	movq	-0x40(%rbp), %rsi
000000000002057c	movq	%rax, -0x48(%rbp)
0000000000020580	callq	__ZNSaIiEC1ERKS_ ## std::allocator<int>::allocator(std::allocator<int> const&)
0000000000020585	movq	-0x30(%rbp), %rdi
0000000000020589	movq	-0x38(%rbp), %rsi
000000000002058d	movq	-0x48(%rbp), %rdx
0000000000020591	callq	0x27906 ## symbol stub for: __ZSt8_DestroyIPiiEvT_S1_SaIT0_E
0000000000020596	jmp	0x2059b
000000000002059b	leaq	-0x10(%rbp), %rdi
000000000002059f	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
00000000000205a4	movq	-0x28(%rbp), %rdi
00000000000205a8	callq	__ZNSt12_Vector_baseIiSaIiEED2Ev ## std::_Vector_base<int, std::allocator<int> >::~_Vector_base()
00000000000205ad	addq	$0x50, %rsp
00000000000205b1	popq	%rbp
00000000000205b2	retq
00000000000205b3	movl	%edx, %ecx
00000000000205b5	movq	%rax, -0x18(%rbp)
00000000000205b9	movl	%ecx, -0x1c(%rbp)
00000000000205bc	jmp	0x205d3
00000000000205c1	movl	%edx, %ecx
00000000000205c3	movq	%rax, -0x18(%rbp)
00000000000205c7	movl	%ecx, -0x1c(%rbp)
00000000000205ca	leaq	-0x10(%rbp), %rdi
00000000000205ce	callq	__ZNSaIiED1Ev ## std::allocator<int>::~allocator()
00000000000205d3	movq	-0x28(%rbp), %rax
00000000000205d7	movq	%rax, %rdi
00000000000205da	callq	__ZNSt12_Vector_baseIiSaIiEED2Ev ## std::_Vector_base<int, std::allocator<int> >::~_Vector_base()
00000000000205df	movq	-0x18(%rbp), %rdi
00000000000205e3	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
00000000000205e8	nopl	(%rax,%rax)
__ZSt8_DestroyIPiiEvT_S1_SaIT0_E:
00000000000205f0	pushq	%rbp
00000000000205f1	movq	%rsp, %rbp
00000000000205f4	subq	$0x20, %rsp
00000000000205f8	movq	%rdi, -0x8(%rbp)
00000000000205fc	movq	%rsi, -0x10(%rbp)
0000000000020600	movq	-0x8(%rbp), %rdi
0000000000020604	movq	-0x10(%rbp), %rsi
0000000000020608	movq	%rdx, -0x18(%rbp)
000000000002060c	callq	0x27900 ## symbol stub for: __ZSt8_DestroyIPiEvT_S1_
0000000000020611	addq	$0x20, %rsp
0000000000020615	popq	%rbp
0000000000020616	retq
0000000000020617	nopw	(%rax,%rax)
__ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv:
0000000000020620	pushq	%rbp
0000000000020621	movq	%rsp, %rbp
0000000000020624	movq	%rdi, -0x8(%rbp)
0000000000020628	movq	-0x8(%rbp), %rdi
000000000002062c	movq	%rdi, %rax
000000000002062f	popq	%rbp
0000000000020630	retq
0000000000020631	nopw	%cs:(%rax,%rax)
000000000002063b	nopl	(%rax,%rax)
__ZNSaIiEC1ERKS_:
0000000000020640	pushq	%rbp
0000000000020641	movq	%rsp, %rbp
0000000000020644	subq	$0x10, %rsp
0000000000020648	movq	%rdi, -0x8(%rbp)
000000000002064c	movq	%rsi, -0x10(%rbp)
0000000000020650	movq	-0x8(%rbp), %rdi
0000000000020654	movq	-0x10(%rbp), %rsi
0000000000020658	callq	__ZNSaIiEC2ERKS_ ## std::allocator<int>::allocator(std::allocator<int> const&)
000000000002065d	addq	$0x10, %rsp
0000000000020661	popq	%rbp
0000000000020662	retq
0000000000020663	nopw	%cs:(%rax,%rax)
000000000002066d	nopl	(%rax)
__ZNSt12_Vector_baseIiSaIiEED2Ev:
0000000000020670	pushq	%rbp
0000000000020671	movq	%rsp, %rbp
0000000000020674	subq	$0x20, %rsp
0000000000020678	movq	%rdi, -0x8(%rbp)
000000000002067c	movq	-0x8(%rbp), %rdi
0000000000020680	movq	(%rdi), %rax
0000000000020683	movq	0x10(%rdi), %rcx
0000000000020687	subq	%rax, %rcx
000000000002068a	sarq	$0x2, %rcx
000000000002068e	movq	%rdi, -0x20(%rbp)
0000000000020692	movq	%rax, %rsi
0000000000020695	movq	%rcx, %rdx
0000000000020698	callq	0x27594 ## symbol stub for: __ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim
000000000002069d	jmp	0x206a2
00000000000206a2	movq	-0x20(%rbp), %rdi
00000000000206a6	callq	__ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev ## std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()
00000000000206ab	addq	$0x20, %rsp
00000000000206af	popq	%rbp
00000000000206b0	retq
00000000000206b1	movl	%edx, %ecx
00000000000206b3	movq	%rax, -0x10(%rbp)
00000000000206b7	movl	%ecx, -0x14(%rbp)
00000000000206ba	movq	-0x20(%rbp), %rdi
00000000000206be	callq	__ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev ## std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()
00000000000206c3	movq	-0x10(%rbp), %rdi
00000000000206c7	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
00000000000206cc	nopl	(%rax)
__ZSt8_DestroyIPiEvT_S1_:
00000000000206d0	pushq	%rbp
00000000000206d1	movq	%rsp, %rbp
00000000000206d4	subq	$0x20, %rsp
00000000000206d8	movq	%rdi, -0x8(%rbp)
00000000000206dc	movq	%rsi, -0x10(%rbp)
00000000000206e0	movq	-0x8(%rbp), %rdi
00000000000206e4	movq	-0x10(%rbp), %rsi
00000000000206e8	callq	0x277fe ## symbol stub for: __ZSt13__destroy_auxIPiEvT_S1_St11__true_type
00000000000206ed	addq	$0x20, %rsp
00000000000206f1	popq	%rbp
00000000000206f2	retq
00000000000206f3	nopw	%cs:(%rax,%rax)
00000000000206fd	nopl	(%rax)
__ZSt13__destroy_auxIPiEvT_S1_St11__true_type:
0000000000020700	pushq	%rbp
0000000000020701	movq	%rsp, %rbp
0000000000020704	movq	%rdi, -0x10(%rbp)
0000000000020708	movq	%rsi, -0x18(%rbp)
000000000002070c	popq	%rbp
000000000002070d	retq
000000000002070e	nop
__ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim:
0000000000020710	pushq	%rbp
0000000000020711	movq	%rsp, %rbp
0000000000020714	subq	$0x20, %rsp
0000000000020718	movq	%rdi, -0x8(%rbp)
000000000002071c	movq	%rsi, -0x10(%rbp)
0000000000020720	movq	%rdx, -0x18(%rbp)
0000000000020724	movq	-0x8(%rbp), %rdx
0000000000020728	cmpq	$0x0, -0x10(%rbp)
000000000002072d	movq	%rdx, -0x20(%rbp)
0000000000020731	je	0x2074b
0000000000020737	movq	-0x20(%rbp), %rax
000000000002073b	movq	-0x10(%rbp), %rsi
000000000002073f	movq	-0x18(%rbp), %rdx
0000000000020743	movq	%rax, %rdi
0000000000020746	callq	0x272d6 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim
000000000002074b	addq	$0x20, %rsp
000000000002074f	popq	%rbp
0000000000020750	retq
0000000000020751	nopw	%cs:(%rax,%rax)
000000000002075b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev:
0000000000020760	pushq	%rbp
0000000000020761	movq	%rsp, %rbp
0000000000020764	subq	$0x10, %rsp
0000000000020768	movq	%rdi, -0x8(%rbp)
000000000002076c	movq	-0x8(%rbp), %rdi
0000000000020770	callq	__ZNSt12_Vector_baseIiSaIiEE12_Vector_implD2Ev ## std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()
0000000000020775	addq	$0x10, %rsp
0000000000020779	popq	%rbp
000000000002077a	retq
000000000002077b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim:
0000000000020780	pushq	%rbp
0000000000020781	movq	%rsp, %rbp
0000000000020784	subq	$0x20, %rsp
0000000000020788	movq	%rdi, -0x8(%rbp)
000000000002078c	movq	%rsi, -0x10(%rbp)
0000000000020790	movq	%rdx, -0x18(%rbp)
0000000000020794	movq	-0x10(%rbp), %rdx
0000000000020798	movq	%rdx, %rdi
000000000002079b	callq	0x2791e ## symbol stub for: __ZdlPv
00000000000207a0	addq	$0x20, %rsp
00000000000207a4	popq	%rbp
00000000000207a5	retq
00000000000207a6	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseIiSaIiEE12_Vector_implD2Ev:
00000000000207b0	pushq	%rbp
00000000000207b1	movq	%rsp, %rbp
00000000000207b4	subq	$0x10, %rsp
00000000000207b8	movq	%rdi, -0x8(%rbp)
00000000000207bc	movq	-0x8(%rbp), %rdi
00000000000207c0	callq	__ZNSaIiED2Ev ## std::allocator<int>::~allocator()
00000000000207c5	addq	$0x10, %rsp
00000000000207c9	popq	%rbp
00000000000207ca	retq
00000000000207cb	nopl	(%rax,%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEED2Ev:
00000000000207d0	pushq	%rbp
00000000000207d1	movq	%rsp, %rbp
00000000000207d4	subq	$0x10, %rsp
00000000000207d8	movq	%rdi, -0x8(%rbp)
00000000000207dc	movq	-0x8(%rbp), %rdi
00000000000207e0	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EED1Ev ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~_Rb_tree()
00000000000207e5	addq	$0x10, %rsp
00000000000207e9	popq	%rbp
00000000000207ea	retq
00000000000207eb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EED1Ev:
00000000000207f0	pushq	%rbp
00000000000207f1	movq	%rsp, %rbp
00000000000207f4	subq	$0x10, %rsp
00000000000207f8	movq	%rdi, -0x8(%rbp)
00000000000207fc	movq	-0x8(%rbp), %rdi
0000000000020800	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EED2Ev ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~_Rb_tree()
0000000000020805	addq	$0x10, %rsp
0000000000020809	popq	%rbp
000000000002080a	retq
000000000002080b	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EED2Ev:
0000000000020810	pushq	%rbp
0000000000020811	movq	%rsp, %rbp
0000000000020814	subq	$0x30, %rsp
0000000000020818	movq	%rdi, -0x8(%rbp)
000000000002081c	movq	-0x8(%rbp), %rdi
0000000000020820	movq	%rdi, -0x20(%rbp)
0000000000020824	callq	0x277a4 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_beginEv
0000000000020829	movq	%rax, -0x28(%rbp)
000000000002082d	jmp	0x20832
0000000000020832	movq	-0x20(%rbp), %rdi
0000000000020836	movq	-0x28(%rbp), %rsi
000000000002083a	callq	0x277aa ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E
000000000002083f	jmp	0x20844
0000000000020844	movq	-0x20(%rbp), %rdi
0000000000020848	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EED1Ev ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
000000000002084d	addq	$0x30, %rsp
0000000000020851	popq	%rbp
0000000000020852	retq
0000000000020853	movl	%edx, %ecx
0000000000020855	movq	%rax, -0x10(%rbp)
0000000000020859	movl	%ecx, -0x14(%rbp)
000000000002085c	movq	-0x20(%rbp), %rdi
0000000000020860	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EED1Ev ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
0000000000020865	movq	-0x10(%rbp), %rdi
0000000000020869	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
000000000002086e	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E:
0000000000020870	pushq	%rbp
0000000000020871	movq	%rsp, %rbp
0000000000020874	subq	$0x20, %rsp
0000000000020878	movq	%rdi, -0x8(%rbp)
000000000002087c	movq	%rsi, -0x10(%rbp)
0000000000020880	movq	-0x8(%rbp), %rsi
0000000000020884	movq	%rsi, -0x20(%rbp)
0000000000020888	cmpq	$0x0, -0x10(%rbp)
000000000002088d	je	0x208d5
0000000000020893	movq	-0x10(%rbp), %rax
0000000000020897	movq	%rax, %rdi
000000000002089a	callq	0x277b0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base
000000000002089f	movq	-0x20(%rbp), %rdi
00000000000208a3	movq	%rax, %rsi
00000000000208a6	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
00000000000208ab	movq	-0x10(%rbp), %rax
00000000000208af	movq	%rax, %rdi
00000000000208b2	callq	0x2779e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base
00000000000208b7	movq	%rax, -0x18(%rbp)
00000000000208bb	movq	-0x10(%rbp), %rsi
00000000000208bf	movq	-0x20(%rbp), %rdi
00000000000208c3	callq	0x2776e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E
00000000000208c8	movq	-0x18(%rbp), %rax
00000000000208cc	movq	%rax, -0x10(%rbp)
00000000000208d0	jmp	0x20888
00000000000208d5	addq	$0x20, %rsp
00000000000208d9	popq	%rbp
00000000000208da	retq
00000000000208db	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_beginEv:
00000000000208e0	pushq	%rbp
00000000000208e1	movq	%rsp, %rbp
00000000000208e4	movq	%rdi, -0x8(%rbp)
00000000000208e8	movq	-0x8(%rbp), %rdi
00000000000208ec	movq	0x10(%rdi), %rdi
00000000000208f0	movq	%rdi, %rax
00000000000208f3	popq	%rbp
00000000000208f4	retq
00000000000208f5	nopw	%cs:(%rax,%rax)
00000000000208ff	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EED1Ev:
0000000000020900	pushq	%rbp
0000000000020901	movq	%rsp, %rbp
0000000000020904	subq	$0x10, %rsp
0000000000020908	movq	%rdi, -0x8(%rbp)
000000000002090c	movq	-0x8(%rbp), %rdi
0000000000020910	callq	__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EED2Ev ## std::_Rb_tree<int, std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::_Select1st<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
0000000000020915	addq	$0x10, %rsp
0000000000020919	popq	%rbp
000000000002091a	retq
000000000002091b	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base:
0000000000020920	pushq	%rbp
0000000000020921	movq	%rsp, %rbp
0000000000020924	movq	%rdi, -0x8(%rbp)
0000000000020928	movq	-0x8(%rbp), %rdi
000000000002092c	movq	0x18(%rdi), %rdi
0000000000020930	movq	%rdi, %rax
0000000000020933	popq	%rbp
0000000000020934	retq
0000000000020935	nopw	%cs:(%rax,%rax)
000000000002093f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base:
0000000000020940	pushq	%rbp
0000000000020941	movq	%rsp, %rbp
0000000000020944	movq	%rdi, -0x8(%rbp)
0000000000020948	movq	-0x8(%rbp), %rdi
000000000002094c	movq	0x10(%rdi), %rdi
0000000000020950	movq	%rdi, %rax
0000000000020953	popq	%rbp
0000000000020954	retq
0000000000020955	nopw	%cs:(%rax,%rax)
000000000002095f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E:
0000000000020960	pushq	%rbp
0000000000020961	movq	%rsp, %rbp
0000000000020964	subq	$0x40, %rsp
0000000000020968	movq	%rdi, -0x8(%rbp)
000000000002096c	movq	%rsi, -0x10(%rbp)
0000000000020970	movq	-0x8(%rbp), %rsi
0000000000020974	leaq	-0x18(%rbp), %rdi
0000000000020978	movq	%rdi, -0x30(%rbp)
000000000002097c	movq	%rsi, -0x38(%rbp)
0000000000020980	callq	0x27492 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13get_allocatorEv
0000000000020985	movq	-0x10(%rbp), %rsi
0000000000020989	addq	$0x20, %rsi
000000000002098d	movq	-0x30(%rbp), %rdi
0000000000020991	callq	0x272b8 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEE7destroyEPS7_
0000000000020996	jmp	0x2099b
000000000002099b	leaq	-0x18(%rbp), %rdi
000000000002099f	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
00000000000209a4	movq	-0x10(%rbp), %rsi
00000000000209a8	movq	-0x38(%rbp), %rdi
00000000000209ac	callq	0x27756 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E
00000000000209b1	addq	$0x40, %rsp
00000000000209b5	popq	%rbp
00000000000209b6	retq
00000000000209b7	movl	%edx, %ecx
00000000000209b9	movq	%rax, -0x20(%rbp)
00000000000209bd	movl	%ecx, -0x24(%rbp)
00000000000209c0	leaq	-0x18(%rbp), %rdi
00000000000209c4	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
00000000000209c9	movq	-0x20(%rbp), %rdi
00000000000209cd	callq	0x271b0 ## symbol stub for: __Unwind_Resume
00000000000209d2	ud2
00000000000209d4	nopw	%cs:(%rax,%rax)
00000000000209de	nop
__ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13get_allocatorEv:
00000000000209e0	pushq	%rbp
00000000000209e1	movq	%rsp, %rbp
00000000000209e4	subq	$0x20, %rsp
00000000000209e8	movq	%rdi, %rax
00000000000209eb	movq	%rsi, -0x8(%rbp)
00000000000209ef	movq	-0x8(%rbp), %rsi
00000000000209f3	movq	%rdi, -0x10(%rbp)
00000000000209f7	movq	%rsi, %rdi
00000000000209fa	movq	%rax, -0x18(%rbp)
00000000000209fe	callq	0x27498 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE21_M_get_Node_allocatorEv
0000000000020a03	movq	-0x10(%rbp), %rdi
0000000000020a07	movq	%rax, %rsi
0000000000020a0a	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC1ISt13_Rb_tree_nodeIS5_EEERKSaIT_E ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >(std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&)
0000000000020a0f	movq	-0x18(%rbp), %rax
0000000000020a13	addq	$0x20, %rsp
0000000000020a17	popq	%rbp
0000000000020a18	retq
0000000000020a19	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEE7destroyEPS7_:
0000000000020a20	pushq	%rbp
0000000000020a21	movq	%rsp, %rbp
0000000000020a24	subq	$0x10, %rsp
0000000000020a28	movq	%rdi, -0x8(%rbp)
0000000000020a2c	movq	%rsi, -0x10(%rbp)
0000000000020a30	movq	-0x10(%rbp), %rdi
0000000000020a34	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED1Ev ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::~pair()
0000000000020a39	addq	$0x10, %rsp
0000000000020a3d	popq	%rbp
0000000000020a3e	retq
0000000000020a3f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E:
0000000000020a40	pushq	%rbp
0000000000020a41	movq	%rsp, %rbp
0000000000020a44	subq	$0x20, %rsp
0000000000020a48	movq	%rdi, -0x8(%rbp)
0000000000020a4c	movq	%rsi, -0x10(%rbp)
0000000000020a50	movq	-0x8(%rbp), %rsi
0000000000020a54	movq	-0x10(%rbp), %rdi
0000000000020a58	movq	%rdi, -0x18(%rbp)
0000000000020a5c	movq	%rsi, %rdi
0000000000020a5f	movq	-0x18(%rbp), %rsi
0000000000020a63	movl	$0x1, %edx
0000000000020a68	callq	0x272a0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE10deallocateEPS9_m
0000000000020a6d	addq	$0x20, %rsp
0000000000020a71	popq	%rbp
0000000000020a72	retq
0000000000020a73	nopw	%cs:(%rax,%rax)
0000000000020a7d	nopl	(%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE21_M_get_Node_allocatorEv:
0000000000020a80	pushq	%rbp
0000000000020a81	movq	%rsp, %rbp
0000000000020a84	movq	%rdi, -0x8(%rbp)
0000000000020a88	movq	-0x8(%rbp), %rdi
0000000000020a8c	movq	%rdi, %rax
0000000000020a8f	popq	%rbp
0000000000020a90	retq
0000000000020a91	nopw	%cs:(%rax,%rax)
0000000000020a9b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC1ISt13_Rb_tree_nodeIS5_EEERKSaIT_E:
0000000000020aa0	pushq	%rbp
0000000000020aa1	movq	%rsp, %rbp
0000000000020aa4	subq	$0x10, %rsp
0000000000020aa8	movq	%rdi, -0x8(%rbp)
0000000000020aac	movq	%rsi, -0x10(%rbp)
0000000000020ab0	movq	-0x8(%rbp), %rdi
0000000000020ab4	movq	-0x10(%rbp), %rsi
0000000000020ab8	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC2ISt13_Rb_tree_nodeIS5_EEERKSaIT_E ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >(std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > > const&)
0000000000020abd	addq	$0x10, %rsp
0000000000020ac1	popq	%rbp
0000000000020ac2	retq
0000000000020ac3	nopw	%cs:(%rax,%rax)
0000000000020acd	nopl	(%rax)
__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEEC2ISt13_Rb_tree_nodeIS5_EEERKSaIT_E:
0000000000020ad0	pushq	%rbp
0000000000020ad1	movq	%rsp, %rbp
0000000000020ad4	subq	$0x10, %rsp
0000000000020ad8	movq	%rdi, -0x8(%rbp)
0000000000020adc	movq	%rsi, -0x10(%rbp)
0000000000020ae0	movq	-0x8(%rbp), %rsi
0000000000020ae4	movq	%rsi, %rdi
0000000000020ae7	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEEC2Ev ## __gnu_cxx::new_allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::new_allocator()
0000000000020aec	addq	$0x10, %rsp
0000000000020af0	popq	%rbp
0000000000020af1	retq
0000000000020af2	nopw	%cs:(%rax,%rax)
0000000000020afc	nopl	(%rax)
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED1Ev:
0000000000020b00	pushq	%rbp
0000000000020b01	movq	%rsp, %rbp
0000000000020b04	subq	$0x10, %rsp
0000000000020b08	movq	%rdi, -0x8(%rbp)
0000000000020b0c	movq	-0x8(%rbp), %rdi
0000000000020b10	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED2Ev ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::~pair()
0000000000020b15	addq	$0x10, %rsp
0000000000020b19	popq	%rbp
0000000000020b1a	retq
0000000000020b1b	nopl	(%rax,%rax)
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEED2Ev:
0000000000020b20	pushq	%rbp
0000000000020b21	movq	%rsp, %rbp
0000000000020b24	subq	$0x10, %rsp
0000000000020b28	movq	%rdi, -0x8(%rbp)
0000000000020b2c	movq	-0x8(%rbp), %rdi
0000000000020b30	addq	$0x8, %rdi
0000000000020b34	callq	__ZNSt6vectorISt4pairIiiESaIS1_EED1Ev ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
0000000000020b39	addq	$0x10, %rsp
0000000000020b3d	popq	%rbp
0000000000020b3e	retq
0000000000020b3f	nop
__ZNSt6vectorISt4pairIiiESaIS1_EED1Ev:
0000000000020b40	pushq	%rbp
0000000000020b41	movq	%rsp, %rbp
0000000000020b44	subq	$0x10, %rsp
0000000000020b48	movq	%rdi, -0x8(%rbp)
0000000000020b4c	movq	-0x8(%rbp), %rdi
0000000000020b50	callq	__ZNSt6vectorISt4pairIiiESaIS1_EED2Ev ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
0000000000020b55	addq	$0x10, %rsp
0000000000020b59	popq	%rbp
0000000000020b5a	retq
0000000000020b5b	nopl	(%rax,%rax)
__ZNSt6vectorISt4pairIiiESaIS1_EED2Ev:
0000000000020b60	pushq	%rbp
0000000000020b61	movq	%rsp, %rbp
0000000000020b64	subq	$0x50, %rsp
0000000000020b68	movq	%rdi, -0x8(%rbp)
0000000000020b6c	movq	-0x8(%rbp), %rdi
0000000000020b70	movq	(%rdi), %rax
0000000000020b73	movq	0x8(%rdi), %rsi
0000000000020b77	movq	%rdi, -0x28(%rbp)
0000000000020b7b	movq	%rax, -0x30(%rbp)
0000000000020b7f	movq	%rsi, -0x38(%rbp)
0000000000020b83	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
0000000000020b88	movq	%rax, -0x40(%rbp)
0000000000020b8c	jmp	0x20b91
0000000000020b91	leaq	-0x10(%rbp), %rax
0000000000020b95	movq	%rax, %rdi
0000000000020b98	movq	-0x40(%rbp), %rsi
0000000000020b9c	movq	%rax, -0x48(%rbp)
0000000000020ba0	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
0000000000020ba5	movq	-0x30(%rbp), %rdi
0000000000020ba9	movq	-0x38(%rbp), %rsi
0000000000020bad	movq	-0x48(%rbp), %rdx
0000000000020bb1	callq	0x278fa ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiES1_EvT_S3_SaIT0_E
0000000000020bb6	jmp	0x20bbb
0000000000020bbb	leaq	-0x10(%rbp), %rdi
0000000000020bbf	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000020bc4	movq	-0x28(%rbp), %rdi
0000000000020bc8	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EED2Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~_Vector_base()
0000000000020bcd	addq	$0x50, %rsp
0000000000020bd1	popq	%rbp
0000000000020bd2	retq
0000000000020bd3	movl	%edx, %ecx
0000000000020bd5	movq	%rax, -0x18(%rbp)
0000000000020bd9	movl	%ecx, -0x1c(%rbp)
0000000000020bdc	jmp	0x20bf3
0000000000020be1	movl	%edx, %ecx
0000000000020be3	movq	%rax, -0x18(%rbp)
0000000000020be7	movl	%ecx, -0x1c(%rbp)
0000000000020bea	leaq	-0x10(%rbp), %rdi
0000000000020bee	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000020bf3	movq	-0x28(%rbp), %rax
0000000000020bf7	movq	%rax, %rdi
0000000000020bfa	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EED2Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~_Vector_base()
0000000000020bff	movq	-0x18(%rbp), %rdi
0000000000020c03	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
0000000000020c08	nopl	(%rax,%rax)
__ZSt8_DestroyIPSt4pairIiiES1_EvT_S3_SaIT0_E:
0000000000020c10	pushq	%rbp
0000000000020c11	movq	%rsp, %rbp
0000000000020c14	subq	$0x20, %rsp
0000000000020c18	movq	%rdi, -0x8(%rbp)
0000000000020c1c	movq	%rsi, -0x10(%rbp)
0000000000020c20	movq	-0x8(%rbp), %rdi
0000000000020c24	movq	-0x10(%rbp), %rsi
0000000000020c28	movq	%rdx, -0x18(%rbp)
0000000000020c2c	callq	0x278f4 ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiEEvT_S3_
0000000000020c31	addq	$0x20, %rsp
0000000000020c35	popq	%rbp
0000000000020c36	retq
0000000000020c37	nopw	(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv:
0000000000020c40	pushq	%rbp
0000000000020c41	movq	%rsp, %rbp
0000000000020c44	movq	%rdi, -0x8(%rbp)
0000000000020c48	movq	-0x8(%rbp), %rdi
0000000000020c4c	movq	%rdi, %rax
0000000000020c4f	popq	%rbp
0000000000020c50	retq
0000000000020c51	nopw	%cs:(%rax,%rax)
0000000000020c5b	nopl	(%rax,%rax)
__ZNSaISt4pairIiiEEC1ERKS1_:
0000000000020c60	pushq	%rbp
0000000000020c61	movq	%rsp, %rbp
0000000000020c64	subq	$0x10, %rsp
0000000000020c68	movq	%rdi, -0x8(%rbp)
0000000000020c6c	movq	%rsi, -0x10(%rbp)
0000000000020c70	movq	-0x8(%rbp), %rdi
0000000000020c74	movq	-0x10(%rbp), %rsi
0000000000020c78	callq	__ZNSaISt4pairIiiEEC2ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
0000000000020c7d	addq	$0x10, %rsp
0000000000020c81	popq	%rbp
0000000000020c82	retq
0000000000020c83	nopw	%cs:(%rax,%rax)
0000000000020c8d	nopl	(%rax)
__ZNSaISt4pairIiiEED1Ev:
0000000000020c90	pushq	%rbp
0000000000020c91	movq	%rsp, %rbp
0000000000020c94	subq	$0x10, %rsp
0000000000020c98	movq	%rdi, -0x8(%rbp)
0000000000020c9c	movq	-0x8(%rbp), %rdi
0000000000020ca0	callq	__ZNSaISt4pairIiiEED2Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000020ca5	addq	$0x10, %rsp
0000000000020ca9	popq	%rbp
0000000000020caa	retq
0000000000020cab	nopl	(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EED2Ev:
0000000000020cb0	pushq	%rbp
0000000000020cb1	movq	%rsp, %rbp
0000000000020cb4	subq	$0x20, %rsp
0000000000020cb8	movq	%rdi, -0x8(%rbp)
0000000000020cbc	movq	-0x8(%rbp), %rdi
0000000000020cc0	movq	(%rdi), %rax
0000000000020cc3	movq	0x10(%rdi), %rcx
0000000000020cc7	subq	%rax, %rcx
0000000000020cca	sarq	$0x3, %rcx
0000000000020cce	movq	%rdi, -0x20(%rbp)
0000000000020cd2	movq	%rax, %rsi
0000000000020cd5	movq	%rcx, %rdx
0000000000020cd8	callq	0x27588 ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE13_M_deallocateEPS1_m
0000000000020cdd	jmp	0x20ce2
0000000000020ce2	movq	-0x20(%rbp), %rdi
0000000000020ce6	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD1Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::~_Vector_impl()
0000000000020ceb	addq	$0x20, %rsp
0000000000020cef	popq	%rbp
0000000000020cf0	retq
0000000000020cf1	movl	%edx, %ecx
0000000000020cf3	movq	%rax, -0x10(%rbp)
0000000000020cf7	movl	%ecx, -0x14(%rbp)
0000000000020cfa	movq	-0x20(%rbp), %rdi
0000000000020cfe	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD1Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::~_Vector_impl()
0000000000020d03	movq	-0x10(%rbp), %rdi
0000000000020d07	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
0000000000020d0c	nopl	(%rax)
__ZSt8_DestroyIPSt4pairIiiEEvT_S3_:
0000000000020d10	pushq	%rbp
0000000000020d11	movq	%rsp, %rbp
0000000000020d14	subq	$0x20, %rsp
0000000000020d18	movq	%rdi, -0x8(%rbp)
0000000000020d1c	movq	%rsi, -0x10(%rbp)
0000000000020d20	movq	-0x8(%rbp), %rdi
0000000000020d24	movq	-0x10(%rbp), %rsi
0000000000020d28	callq	0x277f8 ## symbol stub for: __ZSt13__destroy_auxIPSt4pairIiiEEvT_S3_St12__false_type
0000000000020d2d	addq	$0x20, %rsp
0000000000020d31	popq	%rbp
0000000000020d32	retq
0000000000020d33	nopw	%cs:(%rax,%rax)
0000000000020d3d	nopl	(%rax)
__ZSt13__destroy_auxIPSt4pairIiiEEvT_S3_St12__false_type:
0000000000020d40	pushq	%rbp
0000000000020d41	movq	%rsp, %rbp
0000000000020d44	subq	$0x20, %rsp
0000000000020d48	movq	%rdi, -0x10(%rbp)
0000000000020d4c	movq	%rsi, -0x18(%rbp)
0000000000020d50	movq	-0x10(%rbp), %rax
0000000000020d54	cmpq	-0x18(%rbp), %rax
0000000000020d58	je	0x20d78
0000000000020d5e	movq	-0x10(%rbp), %rdi
0000000000020d62	callq	0x2790c ## symbol stub for: __ZSt8_DestroyISt4pairIiiEEvPT_
0000000000020d67	movq	-0x10(%rbp), %rax
0000000000020d6b	addq	$0x8, %rax
0000000000020d6f	movq	%rax, -0x10(%rbp)
0000000000020d73	jmp	0x20d50
0000000000020d78	addq	$0x20, %rsp
0000000000020d7c	popq	%rbp
0000000000020d7d	retq
0000000000020d7e	nop
__ZSt8_DestroyISt4pairIiiEEvPT_:
0000000000020d80	pushq	%rbp
0000000000020d81	movq	%rsp, %rbp
0000000000020d84	movq	%rdi, -0x8(%rbp)
0000000000020d88	popq	%rbp
0000000000020d89	retq
0000000000020d8a	nopw	(%rax,%rax)
__ZNSaISt4pairIiiEEC2ERKS1_:
0000000000020d90	pushq	%rbp
0000000000020d91	movq	%rsp, %rbp
0000000000020d94	subq	$0x20, %rsp
0000000000020d98	movq	%rdi, -0x8(%rbp)
0000000000020d9c	movq	%rsi, -0x10(%rbp)
0000000000020da0	movq	-0x8(%rbp), %rsi
0000000000020da4	movq	-0x10(%rbp), %rdi
0000000000020da8	movq	%rdi, -0x18(%rbp)
0000000000020dac	movq	%rsi, %rdi
0000000000020daf	movq	-0x18(%rbp), %rsi
0000000000020db3	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2ERKS3_ ## __gnu_cxx::new_allocator<std::pair<int, int> >::new_allocator(__gnu_cxx::new_allocator<std::pair<int, int> > const&)
0000000000020db8	addq	$0x20, %rsp
0000000000020dbc	popq	%rbp
0000000000020dbd	retq
0000000000020dbe	nop
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2ERKS3_:
0000000000020dc0	pushq	%rbp
0000000000020dc1	movq	%rsp, %rbp
0000000000020dc4	movq	%rdi, -0x8(%rbp)
0000000000020dc8	movq	%rsi, -0x10(%rbp)
0000000000020dcc	popq	%rbp
0000000000020dcd	retq
0000000000020dce	nop
__ZNSaISt4pairIiiEED2Ev:
0000000000020dd0	pushq	%rbp
0000000000020dd1	movq	%rsp, %rbp
0000000000020dd4	subq	$0x10, %rsp
0000000000020dd8	movq	%rdi, -0x8(%rbp)
0000000000020ddc	movq	-0x8(%rbp), %rdi
0000000000020de0	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIiiEED2Ev ## __gnu_cxx::new_allocator<std::pair<int, int> >::~new_allocator()
0000000000020de5	addq	$0x10, %rsp
0000000000020de9	popq	%rbp
0000000000020dea	retq
0000000000020deb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEED2Ev:
0000000000020df0	pushq	%rbp
0000000000020df1	movq	%rsp, %rbp
0000000000020df4	movq	%rdi, -0x8(%rbp)
0000000000020df8	popq	%rbp
0000000000020df9	retq
0000000000020dfa	nopw	(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE13_M_deallocateEPS1_m:
0000000000020e00	pushq	%rbp
0000000000020e01	movq	%rsp, %rbp
0000000000020e04	subq	$0x20, %rsp
0000000000020e08	movq	%rdi, -0x8(%rbp)
0000000000020e0c	movq	%rsi, -0x10(%rbp)
0000000000020e10	movq	%rdx, -0x18(%rbp)
0000000000020e14	movq	-0x8(%rbp), %rdx
0000000000020e18	cmpq	$0x0, -0x10(%rbp)
0000000000020e1d	movq	%rdx, -0x20(%rbp)
0000000000020e21	je	0x20e3b
0000000000020e27	movq	-0x20(%rbp), %rax
0000000000020e2b	movq	-0x10(%rbp), %rsi
0000000000020e2f	movq	-0x18(%rbp), %rdx
0000000000020e33	movq	%rax, %rdi
0000000000020e36	callq	0x272c4 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIiiEE10deallocateEPS2_m
0000000000020e3b	addq	$0x20, %rsp
0000000000020e3f	popq	%rbp
0000000000020e40	retq
0000000000020e41	nopw	%cs:(%rax,%rax)
0000000000020e4b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD1Ev:
0000000000020e50	pushq	%rbp
0000000000020e51	movq	%rsp, %rbp
0000000000020e54	subq	$0x10, %rsp
0000000000020e58	movq	%rdi, -0x8(%rbp)
0000000000020e5c	movq	-0x8(%rbp), %rdi
0000000000020e60	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD2Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::~_Vector_impl()
0000000000020e65	addq	$0x10, %rsp
0000000000020e69	popq	%rbp
0000000000020e6a	retq
0000000000020e6b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEE10deallocateEPS2_m:
0000000000020e70	pushq	%rbp
0000000000020e71	movq	%rsp, %rbp
0000000000020e74	subq	$0x20, %rsp
0000000000020e78	movq	%rdi, -0x8(%rbp)
0000000000020e7c	movq	%rsi, -0x10(%rbp)
0000000000020e80	movq	%rdx, -0x18(%rbp)
0000000000020e84	movq	-0x10(%rbp), %rdx
0000000000020e88	movq	%rdx, %rdi
0000000000020e8b	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000020e90	addq	$0x20, %rsp
0000000000020e94	popq	%rbp
0000000000020e95	retq
0000000000020e96	nopw	%cs:(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD2Ev:
0000000000020ea0	pushq	%rbp
0000000000020ea1	movq	%rsp, %rbp
0000000000020ea4	subq	$0x10, %rsp
0000000000020ea8	movq	%rdi, -0x8(%rbp)
0000000000020eac	movq	-0x8(%rbp), %rdi
0000000000020eb0	callq	__ZNSaISt4pairIiiEED2Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000020eb5	addq	$0x10, %rsp
0000000000020eb9	popq	%rbp
0000000000020eba	retq
0000000000020ebb	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE10deallocateEPS9_m:
0000000000020ec0	pushq	%rbp
0000000000020ec1	movq	%rsp, %rbp
0000000000020ec4	subq	$0x20, %rsp
0000000000020ec8	movq	%rdi, -0x8(%rbp)
0000000000020ecc	movq	%rsi, -0x10(%rbp)
0000000000020ed0	movq	%rdx, -0x18(%rbp)
0000000000020ed4	movq	-0x10(%rbp), %rdx
0000000000020ed8	movq	%rdx, %rdi
0000000000020edb	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000020ee0	addq	$0x20, %rsp
0000000000020ee4	popq	%rbp
0000000000020ee5	retq
0000000000020ee6	nopw	%cs:(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13_Rb_tree_implISA_Lb0EED2Ev:
0000000000020ef0	pushq	%rbp
0000000000020ef1	movq	%rsp, %rbp
0000000000020ef4	subq	$0x10, %rsp
0000000000020ef8	movq	%rdi, -0x8(%rbp)
0000000000020efc	movq	-0x8(%rbp), %rdi
0000000000020f00	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEED2Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~allocator()
0000000000020f05	addq	$0x10, %rsp
0000000000020f09	popq	%rbp
0000000000020f0a	retq
0000000000020f0b	nopl	(%rax,%rax)
__ZN5Cacao14EditorUIEditorD2Ev:
0000000000020f10	pushq	%rbp
0000000000020f11	movq	%rsp, %rbp
0000000000020f14	subq	$0x10, %rsp
0000000000020f18	movq	0x51131(%rip), %rax
0000000000020f1f	addq	$0x10, %rax
0000000000020f23	movq	%rdi, -0x8(%rbp)
0000000000020f27	movq	-0x8(%rbp), %rdi
0000000000020f2b	movq	%rax, (%rdi)
0000000000020f2e	movq	%rdi, %rax
0000000000020f31	addq	$0x190, %rax
0000000000020f37	movq	%rdi, -0x10(%rbp)
0000000000020f3b	movq	%rax, %rdi
0000000000020f3e	callq	__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEED1Ev ## std::map<int, void (*)(GameObject*, GJBaseGameLayer*), std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~map()
0000000000020f43	movq	-0x10(%rbp), %rax
0000000000020f47	addq	$0x178, %rax
0000000000020f4d	movq	%rax, %rdi
0000000000020f50	callq	__ZNSt6vectorIiSaIiEED1Ev ## std::vector<int, std::allocator<int> >::~vector()
0000000000020f55	movq	-0x10(%rbp), %rax
0000000000020f59	addq	$0x160, %rax
0000000000020f5f	movq	%rax, %rdi
0000000000020f62	callq	__ZNSt6vectorIiSaIiEED1Ev ## std::vector<int, std::allocator<int> >::~vector()
0000000000020f67	movq	-0x10(%rbp), %rax
0000000000020f6b	addq	$0x130, %rax
0000000000020f71	movq	%rax, %rdi
0000000000020f74	callq	__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEED1Ev ## std::map<int, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > >::~map()
0000000000020f79	movq	-0x10(%rbp), %rax
0000000000020f7d	movq	%rax, %rdi
0000000000020f80	callq	__ZN7cocos2d6CCNodeD2Ev ## cocos2d::CCNode::~CCNode()
0000000000020f85	addq	$0x10, %rsp
0000000000020f89	popq	%rbp
0000000000020f8a	retq
0000000000020f8b	nopl	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEED1Ev:
0000000000020f90	pushq	%rbp
0000000000020f91	movq	%rsp, %rbp
0000000000020f94	subq	$0x10, %rsp
0000000000020f98	movq	%rdi, -0x8(%rbp)
0000000000020f9c	movq	-0x8(%rbp), %rdi
0000000000020fa0	callq	__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEED2Ev ## std::map<int, void (*)(GameObject*, GJBaseGameLayer*), std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~map()
0000000000020fa5	addq	$0x10, %rsp
0000000000020fa9	popq	%rbp
0000000000020faa	retq
0000000000020fab	nopl	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEED2Ev:
0000000000020fb0	pushq	%rbp
0000000000020fb1	movq	%rsp, %rbp
0000000000020fb4	subq	$0x10, %rsp
0000000000020fb8	movq	%rdi, -0x8(%rbp)
0000000000020fbc	movq	-0x8(%rbp), %rdi
0000000000020fc0	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EED1Ev ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~_Rb_tree()
0000000000020fc5	addq	$0x10, %rsp
0000000000020fc9	popq	%rbp
0000000000020fca	retq
0000000000020fcb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EED1Ev:
0000000000020fd0	pushq	%rbp
0000000000020fd1	movq	%rsp, %rbp
0000000000020fd4	subq	$0x10, %rsp
0000000000020fd8	movq	%rdi, -0x8(%rbp)
0000000000020fdc	movq	-0x8(%rbp), %rdi
0000000000020fe0	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~_Rb_tree()
0000000000020fe5	addq	$0x10, %rsp
0000000000020fe9	popq	%rbp
0000000000020fea	retq
0000000000020feb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev:
0000000000020ff0	pushq	%rbp
0000000000020ff1	movq	%rsp, %rbp
0000000000020ff4	subq	$0x30, %rsp
0000000000020ff8	movq	%rdi, -0x8(%rbp)
0000000000020ffc	movq	-0x8(%rbp), %rdi
0000000000021000	movq	%rdi, -0x20(%rbp)
0000000000021004	callq	0x27720 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv
0000000000021009	movq	%rax, -0x28(%rbp)
000000000002100d	jmp	0x21012
0000000000021012	movq	-0x20(%rbp), %rdi
0000000000021016	movq	-0x28(%rbp), %rsi
000000000002101a	callq	0x27726 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E
000000000002101f	jmp	0x21024
0000000000021024	movq	-0x20(%rbp), %rdi
0000000000021028	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EED1Ev ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
000000000002102d	addq	$0x30, %rsp
0000000000021031	popq	%rbp
0000000000021032	retq
0000000000021033	movl	%edx, %ecx
0000000000021035	movq	%rax, -0x10(%rbp)
0000000000021039	movl	%ecx, -0x14(%rbp)
000000000002103c	movq	-0x20(%rbp), %rdi
0000000000021040	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EED1Ev ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
0000000000021045	movq	-0x10(%rbp), %rdi
0000000000021049	callq	0x27948 ## symbol stub for: ___cxa_call_unexpected
000000000002104e	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E:
0000000000021050	pushq	%rbp
0000000000021051	movq	%rsp, %rbp
0000000000021054	subq	$0x20, %rsp
0000000000021058	movq	%rdi, -0x8(%rbp)
000000000002105c	movq	%rsi, -0x10(%rbp)
0000000000021060	movq	-0x8(%rbp), %rsi
0000000000021064	movq	%rsi, -0x20(%rbp)
0000000000021068	cmpq	$0x0, -0x10(%rbp)
000000000002106d	je	0x210b5
0000000000021073	movq	-0x10(%rbp), %rax
0000000000021077	movq	%rax, %rdi
000000000002107a	callq	0x27732 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base
000000000002107f	movq	-0x20(%rbp), %rdi
0000000000021083	movq	%rax, %rsi
0000000000021086	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
000000000002108b	movq	-0x10(%rbp), %rax
000000000002108f	movq	%rax, %rdi
0000000000021092	callq	0x2771a ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base
0000000000021097	movq	%rax, -0x18(%rbp)
000000000002109b	movq	-0x10(%rbp), %rsi
000000000002109f	movq	-0x20(%rbp), %rdi
00000000000210a3	callq	0x276e4 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E
00000000000210a8	movq	-0x18(%rbp), %rax
00000000000210ac	movq	%rax, -0x10(%rbp)
00000000000210b0	jmp	0x21068
00000000000210b5	addq	$0x20, %rsp
00000000000210b9	popq	%rbp
00000000000210ba	retq
00000000000210bb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv:
00000000000210c0	pushq	%rbp
00000000000210c1	movq	%rsp, %rbp
00000000000210c4	movq	%rdi, -0x8(%rbp)
00000000000210c8	movq	-0x8(%rbp), %rdi
00000000000210cc	movq	0x10(%rdi), %rdi
00000000000210d0	movq	%rdi, %rax
00000000000210d3	popq	%rbp
00000000000210d4	retq
00000000000210d5	nopw	%cs:(%rax,%rax)
00000000000210df	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EED1Ev:
00000000000210e0	pushq	%rbp
00000000000210e1	movq	%rsp, %rbp
00000000000210e4	subq	$0x10, %rsp
00000000000210e8	movq	%rdi, -0x8(%rbp)
00000000000210ec	movq	-0x8(%rbp), %rdi
00000000000210f0	callq	__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EED2Ev ## std::_Rb_tree<int, std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>, std::_Select1st<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, std::less<int>, std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::_Rb_tree_impl<std::less<int>, false>::~_Rb_tree_impl()
00000000000210f5	addq	$0x10, %rsp
00000000000210f9	popq	%rbp
00000000000210fa	retq
00000000000210fb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base:
0000000000021100	pushq	%rbp
0000000000021101	movq	%rsp, %rbp
0000000000021104	movq	%rdi, -0x8(%rbp)
0000000000021108	movq	-0x8(%rbp), %rdi
000000000002110c	movq	0x18(%rdi), %rdi
0000000000021110	movq	%rdi, %rax
0000000000021113	popq	%rbp
0000000000021114	retq
0000000000021115	nopw	%cs:(%rax,%rax)
000000000002111f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base:
0000000000021120	pushq	%rbp
0000000000021121	movq	%rsp, %rbp
0000000000021124	movq	%rdi, -0x8(%rbp)
0000000000021128	movq	-0x8(%rbp), %rdi
000000000002112c	movq	0x10(%rdi), %rdi
0000000000021130	movq	%rdi, %rax
0000000000021133	popq	%rbp
0000000000021134	retq
0000000000021135	nopw	%cs:(%rax,%rax)
000000000002113f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E:
0000000000021140	pushq	%rbp
0000000000021141	movq	%rsp, %rbp
0000000000021144	subq	$0x40, %rsp
0000000000021148	movq	%rdi, -0x8(%rbp)
000000000002114c	movq	%rsi, -0x10(%rbp)
0000000000021150	movq	-0x8(%rbp), %rsi
0000000000021154	leaq	-0x18(%rbp), %rdi
0000000000021158	movq	%rdi, -0x30(%rbp)
000000000002115c	movq	%rsi, -0x38(%rbp)
0000000000021160	callq	0x27462 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13get_allocatorEv
0000000000021165	movq	-0x10(%rbp), %rsi
0000000000021169	addq	$0x20, %rsi
000000000002116d	movq	-0x30(%rbp), %rdi
0000000000021171	callq	0x272ac ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEE7destroyEPS9_
0000000000021176	jmp	0x2117b
000000000002117b	leaq	-0x18(%rbp), %rdi
000000000002117f	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
0000000000021184	movq	-0x10(%rbp), %rsi
0000000000021188	movq	-0x38(%rbp), %rdi
000000000002118c	callq	0x276cc ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E
0000000000021191	addq	$0x40, %rsp
0000000000021195	popq	%rbp
0000000000021196	retq
0000000000021197	movl	%edx, %ecx
0000000000021199	movq	%rax, -0x20(%rbp)
000000000002119d	movl	%ecx, -0x24(%rbp)
00000000000211a0	leaq	-0x18(%rbp), %rdi
00000000000211a4	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
00000000000211a9	movq	-0x20(%rbp), %rdi
00000000000211ad	callq	0x271b0 ## symbol stub for: __Unwind_Resume
00000000000211b2	ud2
00000000000211b4	nopw	%cs:(%rax,%rax)
00000000000211be	nop
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13get_allocatorEv:
00000000000211c0	pushq	%rbp
00000000000211c1	movq	%rsp, %rbp
00000000000211c4	subq	$0x20, %rsp
00000000000211c8	movq	%rdi, %rax
00000000000211cb	movq	%rsi, -0x8(%rbp)
00000000000211cf	movq	-0x8(%rbp), %rsi
00000000000211d3	movq	%rdi, -0x10(%rbp)
00000000000211d7	movq	%rsi, %rdi
00000000000211da	movq	%rax, -0x18(%rbp)
00000000000211de	callq	0x27468 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE21_M_get_Node_allocatorEv
00000000000211e3	movq	-0x10(%rbp), %rdi
00000000000211e7	movq	%rax, %rsi
00000000000211ea	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1ISt13_Rb_tree_nodeIS7_EEERKSaIT_E ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >(std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&)
00000000000211ef	movq	-0x18(%rbp), %rax
00000000000211f3	addq	$0x20, %rsp
00000000000211f7	popq	%rbp
00000000000211f8	retq
00000000000211f9	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEE7destroyEPS9_:
0000000000021200	pushq	%rbp
0000000000021201	movq	%rsp, %rbp
0000000000021204	movq	%rdi, -0x8(%rbp)
0000000000021208	movq	%rsi, -0x10(%rbp)
000000000002120c	popq	%rbp
000000000002120d	retq
000000000002120e	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E:
0000000000021210	pushq	%rbp
0000000000021211	movq	%rsp, %rbp
0000000000021214	subq	$0x20, %rsp
0000000000021218	movq	%rdi, -0x8(%rbp)
000000000002121c	movq	%rsi, -0x10(%rbp)
0000000000021220	movq	-0x8(%rbp), %rsi
0000000000021224	movq	-0x10(%rbp), %rdi
0000000000021228	movq	%rdi, -0x18(%rbp)
000000000002122c	movq	%rsi, %rdi
000000000002122f	movq	-0x18(%rbp), %rsi
0000000000021233	movl	$0x1, %edx
0000000000021238	callq	0x27294 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE10deallocateEPSB_m
000000000002123d	addq	$0x20, %rsp
0000000000021241	popq	%rbp
0000000000021242	retq
0000000000021243	nopw	%cs:(%rax,%rax)
000000000002124d	nopl	(%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE21_M_get_Node_allocatorEv:
0000000000021250	pushq	%rbp
0000000000021251	movq	%rsp, %rbp
0000000000021254	movq	%rdi, -0x8(%rbp)
0000000000021258	movq	-0x8(%rbp), %rdi
000000000002125c	movq	%rdi, %rax
000000000002125f	popq	%rbp
0000000000021260	retq
0000000000021261	nopw	%cs:(%rax,%rax)
000000000002126b	nopl	(%rax,%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1ISt13_Rb_tree_nodeIS7_EEERKSaIT_E:
0000000000021270	pushq	%rbp
0000000000021271	movq	%rsp, %rbp
0000000000021274	subq	$0x10, %rsp
0000000000021278	movq	%rdi, -0x8(%rbp)
000000000002127c	movq	%rsi, -0x10(%rbp)
0000000000021280	movq	-0x8(%rbp), %rdi
0000000000021284	movq	-0x10(%rbp), %rsi
0000000000021288	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2ISt13_Rb_tree_nodeIS7_EEERKSaIT_E ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >(std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > > const&)
000000000002128d	addq	$0x10, %rsp
0000000000021291	popq	%rbp
0000000000021292	retq
0000000000021293	nopw	%cs:(%rax,%rax)
000000000002129d	nopl	(%rax)
__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2ISt13_Rb_tree_nodeIS7_EEERKSaIT_E:
00000000000212a0	pushq	%rbp
00000000000212a1	movq	%rsp, %rbp
00000000000212a4	subq	$0x10, %rsp
00000000000212a8	movq	%rdi, -0x8(%rbp)
00000000000212ac	movq	%rsi, -0x10(%rbp)
00000000000212b0	movq	-0x8(%rbp), %rsi
00000000000212b4	movq	%rsi, %rdi
00000000000212b7	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2Ev ## __gnu_cxx::new_allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::new_allocator()
00000000000212bc	addq	$0x10, %rsp
00000000000212c0	popq	%rbp
00000000000212c1	retq
00000000000212c2	nopw	%cs:(%rax,%rax)
00000000000212cc	nopl	(%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE10deallocateEPSB_m:
00000000000212d0	pushq	%rbp
00000000000212d1	movq	%rsp, %rbp
00000000000212d4	subq	$0x20, %rsp
00000000000212d8	movq	%rdi, -0x8(%rbp)
00000000000212dc	movq	%rsi, -0x10(%rbp)
00000000000212e0	movq	%rdx, -0x18(%rbp)
00000000000212e4	movq	-0x10(%rbp), %rdx
00000000000212e8	movq	%rdx, %rdi
00000000000212eb	callq	0x2791e ## symbol stub for: __ZdlPv
00000000000212f0	addq	$0x20, %rsp
00000000000212f4	popq	%rbp
00000000000212f5	retq
00000000000212f6	nopw	%cs:(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13_Rb_tree_implISC_Lb0EED2Ev:
0000000000021300	pushq	%rbp
0000000000021301	movq	%rsp, %rbp
0000000000021304	subq	$0x10, %rsp
0000000000021308	movq	%rdi, -0x8(%rbp)
000000000002130c	movq	-0x8(%rbp), %rdi
0000000000021310	callq	__ZNSaISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEED2Ev ## std::allocator<std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > >::~allocator()
0000000000021315	addq	$0x10, %rsp
0000000000021319	popq	%rbp
000000000002131a	retq
000000000002131b	nopl	(%rax,%rax)
__ZZN5Cacao14EditorUIEditor9applyBarsEvEN3$_08__invokeEP8EditorUI:
0000000000021320	pushq	%rbp
0000000000021321	movq	%rsp, %rbp
0000000000021324	subq	$0x10, %rsp
0000000000021328	movq	%rdi, -0x8(%rbp)
000000000002132c	movq	-0x8(%rbp), %rsi
0000000000021330	callq	__ZZN5Cacao14EditorUIEditor9applyBarsEvENK3$_0clEP8EditorUI ## Cacao::EditorUIEditor::applyBars()::$_0::operator()(EditorUI*) const
0000000000021335	addq	$0x10, %rsp
0000000000021339	popq	%rbp
000000000002133a	retq
000000000002133b	nopl	(%rax,%rax)
__ZZN5Cacao14EditorUIEditor9applyBarsEvENK3$_0clEP8EditorUI:
0000000000021340	pushq	%rbp
0000000000021341	movq	%rsp, %rbp
0000000000021344	subq	$0x100, %rsp
000000000002134b	movq	%rdi, -0x8(%rbp)
000000000002134f	movq	%rsi, -0x10(%rbp)
0000000000021353	movq	__ZN5Cacao14EditorUIEditor11barInstanceE(%rip), %rsi ## Cacao::EditorUIEditor::barInstance
000000000002135a	movq	%rsi, -0x18(%rbp)
000000000002135e	cmpq	$0x0, -0x18(%rbp)
0000000000021363	jne	0x21438
0000000000021369	movl	$0x10, %edi
000000000002136e	callq	0x27936 ## symbol stub for: ___cxa_allocate_exception
0000000000021373	movq	%rax, %rdi
0000000000021376	movb	$0x1, -0x35(%rbp)
000000000002137a	leaq	-0x28(%rbp), %rcx
000000000002137e	movq	%rdi, -0xb8(%rbp)
0000000000021385	movq	%rcx, %rdi
0000000000021388	movq	%rax, -0xc0(%rbp)
000000000002138f	movq	%rcx, -0xc8(%rbp)
0000000000021396	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
000000000002139b	leaq	0x4a1a7(%rip), %rsi ## literal pool for: "No editor ui editor instance found!"
00000000000213a2	leaq	-0x20(%rbp), %rdi
00000000000213a6	movq	-0xc8(%rbp), %rdx
00000000000213ad	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
00000000000213b2	jmp	0x213b7
00000000000213b7	leaq	-0x20(%rbp), %rsi
00000000000213bb	movq	-0xc0(%rbp), %rdi
00000000000213c2	callq	0x275b2 ## symbol stub for: __ZNSt13runtime_errorC1ERKSs
00000000000213c7	jmp	0x213cc
00000000000213cc	movb	$0x0, -0x35(%rbp)
00000000000213d0	movq	0x50c69(%rip), %rsi ## literal pool symbol address: __ZTISt13runtime_error
00000000000213d7	movq	0x50c32(%rip), %rdx ## literal pool symbol address: __ZNSt13runtime_errorD1Ev
00000000000213de	movq	-0xb8(%rbp), %rdi
00000000000213e5	callq	0x27960 ## symbol stub for: ___cxa_throw
00000000000213ea	jmp	0x2172b
00000000000213ef	movl	%edx, %ecx
00000000000213f1	movq	%rax, -0x30(%rbp)
00000000000213f5	movl	%ecx, -0x34(%rbp)
00000000000213f8	jmp	0x2140f
00000000000213fd	movl	%edx, %ecx
00000000000213ff	movq	%rax, -0x30(%rbp)
0000000000021403	movl	%ecx, -0x34(%rbp)
0000000000021406	leaq	-0x20(%rbp), %rdi
000000000002140a	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
000000000002140f	leaq	-0x28(%rbp), %rdi
0000000000021413	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
0000000000021418	testb	$0x1, -0x35(%rbp)
000000000002141c	jne	0x21427
0000000000021422	jmp	0x21433
0000000000021427	movq	-0xb8(%rbp), %rdi
000000000002142e	callq	0x27954 ## symbol stub for: ___cxa_free_exception
0000000000021433	jmp	0x21720
0000000000021438	movq	-0x18(%rbp), %rax
000000000002143c	movq	0x120(%rax), %rdi
0000000000021443	movq	%rdi, -0xd0(%rbp)
000000000002144a	callq	__Z7getBasev ## getBase()
000000000002144f	addq	$0xcb50, %rax
0000000000021455	movq	-0xd0(%rbp), %rdi
000000000002145c	movq	%rax, %rsi
000000000002145f	callq	__ZN12ModContainer11getOriginalEl ## ModContainer::getOriginal(long)
0000000000021464	movq	%rax, -0x40(%rbp)
0000000000021468	movq	-0x40(%rbp), %rax
000000000002146c	movq	-0x10(%rbp), %rdi
0000000000021470	callq	*%rax
0000000000021472	movq	-0x18(%rbp), %rax
0000000000021476	addq	$0x130, %rax
000000000002147c	movq	%rax, -0x48(%rbp)
0000000000021480	movq	-0x48(%rbp), %rdi
0000000000021484	callq	0x27624 ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE5beginEv
0000000000021489	movq	%rax, -0x50(%rbp)
000000000002148d	movq	-0x48(%rbp), %rdi
0000000000021491	callq	0x2761e ## symbol stub for: __ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE3endEv
0000000000021496	movq	%rax, -0x58(%rbp)
000000000002149a	leaq	-0x50(%rbp), %rdi
000000000002149e	leaq	-0x58(%rbp), %rsi
00000000000214a2	callq	0x27402 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEneERKS7_
00000000000214a7	testb	$0x1, %al
00000000000214a9	jne	0x214b4
00000000000214af	jmp	0x21717
00000000000214b4	leaq	-0x50(%rbp), %rdi
00000000000214b8	callq	0x273f6 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEdeEv
00000000000214bd	movq	%rax, -0x60(%rbp)
00000000000214c1	movq	-0x10(%rbp), %rdi
00000000000214c5	callq	0x2723a ## symbol stub for: __ZN8EditorUI9_editBarsEv
00000000000214ca	movq	(%rax), %rdi
00000000000214cd	callq	__ZNK7cocos2d7CCArray5countEv ## cocos2d::CCArray::count() const
00000000000214d2	movq	-0x60(%rbp), %rdi
00000000000214d6	cmpl	(%rdi), %eax
00000000000214d8	jbe	0x216fd
00000000000214de	movq	-0x10(%rbp), %rdi
00000000000214e2	callq	0x2723a ## symbol stub for: __ZN8EditorUI9_editBarsEv
00000000000214e7	movq	(%rax), %rdi
00000000000214ea	movq	-0x60(%rbp), %rax
00000000000214ee	movl	(%rax), %esi
00000000000214f0	callq	__ZN7cocos2d7CCArray13objectAtIndexEj ## cocos2d::CCArray::objectAtIndex(unsigned int)
00000000000214f5	movq	%rax, -0x68(%rbp)
00000000000214f9	callq	__ZN7cocos2d7CCArray6createEv ## cocos2d::CCArray::create()
00000000000214fe	movq	%rax, -0x70(%rbp)
0000000000021502	movl	$0x0, -0x7c(%rbp)
0000000000021509	movq	-0x68(%rbp), %rdi
000000000002150d	callq	0x271fe ## symbol stub for: __ZN13EditButtonBar12_objectSlotsEv
0000000000021512	cmpq	$0x0, (%rax)
0000000000021516	je	0x216e3
000000000002151c	movq	-0x68(%rbp), %rdi
0000000000021520	callq	0x271fe ## symbol stub for: __ZN13EditButtonBar12_objectSlotsEv
0000000000021525	movq	(%rax), %rax
0000000000021528	movq	0x28(%rax), %rax
000000000002152c	cmpl	$0x0, (%rax)
000000000002152f	jbe	0x216e3
0000000000021535	movq	-0x68(%rbp), %rdi
0000000000021539	callq	0x271fe ## symbol stub for: __ZN13EditButtonBar12_objectSlotsEv
000000000002153e	movq	(%rax), %rax
0000000000021541	movq	0x28(%rax), %rax
0000000000021545	movq	0x8(%rax), %rax
0000000000021549	movq	%rax, -0x88(%rbp)
0000000000021550	movq	-0x68(%rbp), %rdi
0000000000021554	callq	0x271fe ## symbol stub for: __ZN13EditButtonBar12_objectSlotsEv
0000000000021559	movq	(%rax), %rax
000000000002155c	movq	0x28(%rax), %rax
0000000000021560	movq	0x8(%rax), %rax
0000000000021564	movq	-0x68(%rbp), %rdi
0000000000021568	movq	%rax, -0xd8(%rbp)
000000000002156f	callq	0x271fe ## symbol stub for: __ZN13EditButtonBar12_objectSlotsEv
0000000000021574	movq	(%rax), %rax
0000000000021577	movq	0x28(%rax), %rax
000000000002157b	movl	(%rax), %ecx
000000000002157d	movl	%ecx, %eax
000000000002157f	shlq	$0x3, %rax
0000000000021583	movq	-0xd8(%rbp), %rdi
000000000002158a	addq	%rax, %rdi
000000000002158d	addq	$-0x8, %rdi
0000000000021591	movq	%rdi, -0x90(%rbp)
0000000000021598	xorl	%eax, %eax
000000000002159a	movb	%al, %cl
000000000002159c	movq	-0x88(%rbp), %rdx
00000000000215a3	cmpq	-0x90(%rbp), %rdx
00000000000215aa	movb	%cl, -0xd9(%rbp)
00000000000215b0	ja	0x215d1
00000000000215b6	movq	-0x88(%rbp), %rax
00000000000215bd	movq	(%rax), %rax
00000000000215c0	movq	%rax, -0x78(%rbp)
00000000000215c4	cmpq	$0x0, %rax
00000000000215c8	setne	%cl
00000000000215cb	movb	%cl, -0xd9(%rbp)
00000000000215d1	movb	-0xd9(%rbp), %al
00000000000215d7	testb	$0x1, %al
00000000000215d9	jne	0x215e4
00000000000215df	jmp	0x216de
00000000000215e4	movl	-0x7c(%rbp), %eax
00000000000215e7	addl	$0x1, %eax
00000000000215ea	movl	%eax, -0x7c(%rbp)
00000000000215ed	movq	-0x60(%rbp), %rcx
00000000000215f1	addq	$0x8, %rcx
00000000000215f5	movq	%rcx, -0x98(%rbp)
00000000000215fc	movq	-0x98(%rbp), %rdi
0000000000021603	callq	0x27456 ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE5beginEv
0000000000021608	movq	%rax, -0xa0(%rbp)
000000000002160f	movq	-0x98(%rbp), %rdi
0000000000021616	callq	0x2744a ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE3endEv
000000000002161b	movq	%rax, -0xa8(%rbp)
0000000000021622	leaq	-0xa0(%rbp), %rdi
0000000000021629	leaq	-0xa8(%rbp), %rsi
0000000000021630	callq	0x2733c ## symbol stub for: __ZN9__gnu_cxxneIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
0000000000021635	testb	$0x1, %al
0000000000021637	jne	0x21642
000000000002163d	jmp	0x216ba
0000000000021642	leaq	-0xa0(%rbp), %rdi
0000000000021649	callq	0x27390 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEdeEv
000000000002164e	movq	(%rax), %rax
0000000000021651	movq	%rax, -0xb0(%rbp)
0000000000021658	movl	-0x7c(%rbp), %ecx
000000000002165b	cmpl	-0xb0(%rbp), %ecx
0000000000021661	jne	0x2169d
0000000000021667	movq	-0x70(%rbp), %rdi
000000000002166b	movq	-0x10(%rbp), %rax
000000000002166f	movl	-0xac(%rbp), %esi
0000000000021675	movq	%rdi, -0xe8(%rbp)
000000000002167c	movq	%rax, %rdi
000000000002167f	movl	$0x4, %edx
0000000000021684	callq	__ZN8EditorUI12getCreateBtnEii ## EditorUI::getCreateBtn(int, int)
0000000000021689	movq	-0xe8(%rbp), %rdi
0000000000021690	movq	%rax, %rsi
0000000000021693	callq	__ZN7cocos2d7CCArray9addObjectEPNS_8CCObjectE ## cocos2d::CCArray::addObject(cocos2d::CCObject*)
0000000000021698	jmp	0x216ba
000000000002169d	jmp	0x216a2
00000000000216a2	leaq	-0xa0(%rbp), %rdi
00000000000216a9	callq	0x272f4 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEppEv
00000000000216ae	movq	%rax, -0xf0(%rbp)
00000000000216b5	jmp	0x21622
00000000000216ba	movq	-0x70(%rbp), %rdi
00000000000216be	movq	-0x78(%rbp), %rsi
00000000000216c2	callq	__ZN7cocos2d7CCArray9addObjectEPNS_8CCObjectE ## cocos2d::CCArray::addObject(cocos2d::CCObject*)
00000000000216c7	movq	-0x88(%rbp), %rax
00000000000216ce	addq	$0x8, %rax
00000000000216d2	movq	%rax, -0x88(%rbp)
00000000000216d9	jmp	0x21598
00000000000216de	jmp	0x216e3
00000000000216e3	xorl	%r8d, %r8d
00000000000216e6	movq	-0x68(%rbp), %rdi
00000000000216ea	movq	-0x70(%rbp), %rsi
00000000000216ee	movl	$0x6, %edx
00000000000216f3	movl	$0x2, %ecx
00000000000216f8	callq	__ZN13EditButtonBar13loadFromItemsEPN7cocos2d7CCArrayEiib ## EditButtonBar::loadFromItems(cocos2d::CCArray*, int, int, bool)
00000000000216fd	jmp	0x21702
0000000000021702	leaq	-0x50(%rbp), %rdi
0000000000021706	callq	0x275dc ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEppEv
000000000002170b	movq	%rax, -0xf8(%rbp)
0000000000021712	jmp	0x2149a
0000000000021717	addq	$0x100, %rsp
000000000002171e	popq	%rbp
000000000002171f	retq
0000000000021720	movq	-0x30(%rbp), %rdi
0000000000021724	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000021729	ud2
000000000002172b	ud2
000000000002172d	nopl	(%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE5beginEv:
0000000000021730	pushq	%rbp
0000000000021731	movq	%rsp, %rbp
0000000000021734	subq	$0x10, %rsp
0000000000021738	movq	%rdi, -0x10(%rbp)
000000000002173c	movq	-0x10(%rbp), %rdi
0000000000021740	callq	0x27786 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE5beginEv
0000000000021745	movq	%rax, -0x8(%rbp)
0000000000021749	movq	-0x8(%rbp), %rax
000000000002174d	addq	$0x10, %rsp
0000000000021751	popq	%rbp
0000000000021752	retq
0000000000021753	nopw	%cs:(%rax,%rax)
000000000002175d	nopl	(%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE3endEv:
0000000000021760	pushq	%rbp
0000000000021761	movq	%rsp, %rbp
0000000000021764	subq	$0x10, %rsp
0000000000021768	movq	%rdi, -0x10(%rbp)
000000000002176c	movq	-0x10(%rbp), %rdi
0000000000021770	callq	0x27780 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE3endEv
0000000000021775	movq	%rax, -0x8(%rbp)
0000000000021779	movq	-0x8(%rbp), %rax
000000000002177d	addq	$0x10, %rsp
0000000000021781	popq	%rbp
0000000000021782	retq
0000000000021783	nopw	%cs:(%rax,%rax)
000000000002178d	nopl	(%rax)
__ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEneERKS7_:
0000000000021790	pushq	%rbp
0000000000021791	movq	%rsp, %rbp
0000000000021794	movq	%rdi, -0x8(%rbp)
0000000000021798	movq	%rsi, -0x10(%rbp)
000000000002179c	movq	-0x8(%rbp), %rsi
00000000000217a0	movq	(%rsi), %rsi
00000000000217a3	movq	-0x10(%rbp), %rdi
00000000000217a7	cmpq	(%rdi), %rsi
00000000000217aa	setne	%al
00000000000217ad	andb	$0x1, %al
00000000000217af	movzbl	%al, %eax
00000000000217b2	popq	%rbp
00000000000217b3	retq
00000000000217b4	nopw	%cs:(%rax,%rax)
00000000000217be	nop
__ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEdeEv:
00000000000217c0	pushq	%rbp
00000000000217c1	movq	%rsp, %rbp
00000000000217c4	movq	%rdi, -0x8(%rbp)
00000000000217c8	movq	-0x8(%rbp), %rdi
00000000000217cc	movq	(%rdi), %rdi
00000000000217cf	addq	$0x20, %rdi
00000000000217d3	movq	%rdi, %rax
00000000000217d6	popq	%rbp
00000000000217d7	retq
00000000000217d8	nopl	(%rax,%rax)
__ZN8EditorUI9_editBarsEv:
00000000000217e0	pushq	%rbp
00000000000217e1	movq	%rsp, %rbp
00000000000217e4	movq	%rdi, -0x8(%rbp)
00000000000217e8	movq	-0x8(%rbp), %rdi
00000000000217ec	addq	$0x358, %rdi
00000000000217f3	movq	%rdi, %rax
00000000000217f6	popq	%rbp
00000000000217f7	retq
00000000000217f8	nopl	(%rax,%rax)
__ZN13EditButtonBar12_objectSlotsEv:
0000000000021800	pushq	%rbp
0000000000021801	movq	%rsp, %rbp
0000000000021804	movq	%rdi, -0x8(%rbp)
0000000000021808	movq	-0x8(%rbp), %rdi
000000000002180c	addq	$0x130, %rdi
0000000000021813	movq	%rdi, %rax
0000000000021816	popq	%rbp
0000000000021817	retq
0000000000021818	nopl	(%rax,%rax)
__ZNKSt6vectorISt4pairIiiESaIS1_EE5beginEv:
0000000000021820	pushq	%rbp
0000000000021821	movq	%rsp, %rbp
0000000000021824	subq	$0x20, %rsp
0000000000021828	movq	%rdi, -0x10(%rbp)
000000000002182c	movq	-0x10(%rbp), %rdi
0000000000021830	movq	(%rdi), %rdi
0000000000021833	movq	%rdi, -0x18(%rbp)
0000000000021837	leaq	-0x8(%rbp), %rdi
000000000002183b	leaq	-0x18(%rbp), %rsi
000000000002183f	callq	__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEC1ERKS4_ ## __gnu_cxx::__normal_iterator<std::pair<int, int> const*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int> const* const&)
0000000000021844	movq	-0x8(%rbp), %rax
0000000000021848	addq	$0x20, %rsp
000000000002184c	popq	%rbp
000000000002184d	retq
000000000002184e	nop
__ZNKSt6vectorISt4pairIiiESaIS1_EE3endEv:
0000000000021850	pushq	%rbp
0000000000021851	movq	%rsp, %rbp
0000000000021854	subq	$0x20, %rsp
0000000000021858	movq	%rdi, -0x10(%rbp)
000000000002185c	movq	-0x10(%rbp), %rdi
0000000000021860	movq	0x8(%rdi), %rdi
0000000000021864	movq	%rdi, -0x18(%rbp)
0000000000021868	leaq	-0x8(%rbp), %rdi
000000000002186c	leaq	-0x18(%rbp), %rsi
0000000000021870	callq	__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEC1ERKS4_ ## __gnu_cxx::__normal_iterator<std::pair<int, int> const*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int> const* const&)
0000000000021875	movq	-0x8(%rbp), %rax
0000000000021879	addq	$0x20, %rsp
000000000002187d	popq	%rbp
000000000002187e	retq
000000000002187f	nop
__ZN9__gnu_cxxneIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
0000000000021880	pushq	%rbp
0000000000021881	movq	%rsp, %rbp
0000000000021884	subq	$0x20, %rsp
0000000000021888	movq	%rdi, -0x8(%rbp)
000000000002188c	movq	%rsi, -0x10(%rbp)
0000000000021890	movq	-0x8(%rbp), %rdi
0000000000021894	callq	0x2738a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv
0000000000021899	movq	(%rax), %rax
000000000002189c	movq	-0x10(%rbp), %rdi
00000000000218a0	movq	%rax, -0x18(%rbp)
00000000000218a4	callq	0x2738a ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv
00000000000218a9	movq	-0x18(%rbp), %rsi
00000000000218ad	cmpq	(%rax), %rsi
00000000000218b0	setne	%cl
00000000000218b3	andb	$0x1, %cl
00000000000218b6	movzbl	%cl, %eax
00000000000218b9	addq	$0x20, %rsp
00000000000218bd	popq	%rbp
00000000000218be	retq
00000000000218bf	nop
__ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEdeEv:
00000000000218c0	pushq	%rbp
00000000000218c1	movq	%rsp, %rbp
00000000000218c4	movq	%rdi, -0x8(%rbp)
00000000000218c8	movq	-0x8(%rbp), %rdi
00000000000218cc	movq	(%rdi), %rax
00000000000218cf	popq	%rbp
00000000000218d0	retq
00000000000218d1	nopw	%cs:(%rax,%rax)
00000000000218db	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEppEv:
00000000000218e0	pushq	%rbp
00000000000218e1	movq	%rsp, %rbp
00000000000218e4	movq	%rdi, -0x8(%rbp)
00000000000218e8	movq	-0x8(%rbp), %rdi
00000000000218ec	movq	(%rdi), %rax
00000000000218ef	addq	$0x8, %rax
00000000000218f3	movq	%rax, (%rdi)
00000000000218f6	movq	%rdi, %rax
00000000000218f9	popq	%rbp
00000000000218fa	retq
00000000000218fb	nopl	(%rax,%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEppEv:
0000000000021900	pushq	%rbp
0000000000021901	movq	%rsp, %rbp
0000000000021904	subq	$0x10, %rsp
0000000000021908	movq	%rdi, -0x8(%rbp)
000000000002190c	movq	-0x8(%rbp), %rdi
0000000000021910	movq	(%rdi), %rax
0000000000021913	movq	%rdi, -0x10(%rbp)
0000000000021917	movq	%rax, %rdi
000000000002191a	callq	0x27822 ## symbol stub for: __ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
000000000002191f	movq	-0x10(%rbp), %rdi
0000000000021923	movq	%rax, (%rdi)
0000000000021926	movq	%rdi, %rax
0000000000021929	addq	$0x10, %rsp
000000000002192d	popq	%rbp
000000000002192e	retq
000000000002192f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE5beginEv:
0000000000021930	pushq	%rbp
0000000000021931	movq	%rsp, %rbp
0000000000021934	subq	$0x20, %rsp
0000000000021938	movq	%rdi, -0x10(%rbp)
000000000002193c	movq	-0x10(%rbp), %rdi
0000000000021940	movq	0x18(%rdi), %rdi
0000000000021944	leaq	-0x8(%rbp), %rax
0000000000021948	movq	%rdi, -0x18(%rbp)
000000000002194c	movq	%rax, %rdi
000000000002194f	movq	-0x18(%rbp), %rsi
0000000000021953	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
0000000000021958	movq	-0x8(%rbp), %rax
000000000002195c	addq	$0x20, %rsp
0000000000021960	popq	%rbp
0000000000021961	retq
0000000000021962	nopw	%cs:(%rax,%rax)
000000000002196c	nopl	(%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E:
0000000000021970	pushq	%rbp
0000000000021971	movq	%rsp, %rbp
0000000000021974	subq	$0x10, %rsp
0000000000021978	movq	%rdi, -0x8(%rbp)
000000000002197c	movq	%rsi, -0x10(%rbp)
0000000000021980	movq	-0x8(%rbp), %rdi
0000000000021984	movq	-0x10(%rbp), %rsi
0000000000021988	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC2EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
000000000002198d	addq	$0x10, %rsp
0000000000021991	popq	%rbp
0000000000021992	retq
0000000000021993	nopw	%cs:(%rax,%rax)
000000000002199d	nopl	(%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC2EPSt13_Rb_tree_nodeIS6_E:
00000000000219a0	pushq	%rbp
00000000000219a1	movq	%rsp, %rbp
00000000000219a4	movq	%rdi, -0x8(%rbp)
00000000000219a8	movq	%rsi, -0x10(%rbp)
00000000000219ac	movq	-0x8(%rbp), %rsi
00000000000219b0	movq	-0x10(%rbp), %rdi
00000000000219b4	movq	%rdi, (%rsi)
00000000000219b7	popq	%rbp
00000000000219b8	retq
00000000000219b9	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE3endEv:
00000000000219c0	pushq	%rbp
00000000000219c1	movq	%rsp, %rbp
00000000000219c4	subq	$0x20, %rsp
00000000000219c8	movq	%rdi, -0x10(%rbp)
00000000000219cc	movq	-0x10(%rbp), %rdi
00000000000219d0	addq	$0x8, %rdi
00000000000219d4	leaq	-0x8(%rbp), %rax
00000000000219d8	movq	%rdi, -0x18(%rbp)
00000000000219dc	movq	%rax, %rdi
00000000000219df	movq	-0x18(%rbp), %rsi
00000000000219e3	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
00000000000219e8	movq	-0x8(%rbp), %rax
00000000000219ec	addq	$0x20, %rsp
00000000000219f0	popq	%rbp
00000000000219f1	retq
00000000000219f2	nopw	%cs:(%rax,%rax)
00000000000219fc	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEC1ERKS4_:
0000000000021a00	pushq	%rbp
0000000000021a01	movq	%rsp, %rbp
0000000000021a04	subq	$0x10, %rsp
0000000000021a08	movq	%rdi, -0x8(%rbp)
0000000000021a0c	movq	%rsi, -0x10(%rbp)
0000000000021a10	movq	-0x8(%rbp), %rdi
0000000000021a14	movq	-0x10(%rbp), %rsi
0000000000021a18	callq	__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEC2ERKS4_ ## __gnu_cxx::__normal_iterator<std::pair<int, int> const*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int> const* const&)
0000000000021a1d	addq	$0x10, %rsp
0000000000021a21	popq	%rbp
0000000000021a22	retq
0000000000021a23	nopw	%cs:(%rax,%rax)
0000000000021a2d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEC2ERKS4_:
0000000000021a30	pushq	%rbp
0000000000021a31	movq	%rsp, %rbp
0000000000021a34	movq	%rdi, -0x8(%rbp)
0000000000021a38	movq	%rsi, -0x10(%rbp)
0000000000021a3c	movq	-0x8(%rbp), %rsi
0000000000021a40	movq	-0x10(%rbp), %rdi
0000000000021a44	movq	(%rdi), %rdi
0000000000021a47	movq	%rdi, (%rsi)
0000000000021a4a	popq	%rbp
0000000000021a4b	retq
0000000000021a4c	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv:
0000000000021a50	pushq	%rbp
0000000000021a51	movq	%rsp, %rbp
0000000000021a54	movq	%rdi, -0x8(%rbp)
0000000000021a58	movq	-0x8(%rbp), %rax
0000000000021a5c	popq	%rbp
0000000000021a5d	retq
0000000000021a5e	nop
__ZZN5Cacao14EditorUIEditor12applyObjectsEvEN3$_18__invokeEP10GameObject:
0000000000021a60	pushq	%rbp
0000000000021a61	movq	%rsp, %rbp
0000000000021a64	subq	$0x10, %rsp
0000000000021a68	movq	%rdi, -0x8(%rbp)
0000000000021a6c	movq	-0x8(%rbp), %rsi
0000000000021a70	callq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_1clEP10GameObject ## Cacao::EditorUIEditor::applyObjects()::$_1::operator()(GameObject*) const
0000000000021a75	addq	$0x10, %rsp
0000000000021a79	popq	%rbp
0000000000021a7a	retq
0000000000021a7b	nopl	(%rax,%rax)
__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_1clEP10GameObject:
0000000000021a80	pushq	%rbp
0000000000021a81	movq	%rsp, %rbp
0000000000021a84	subq	$0x90, %rsp
0000000000021a8b	movq	%rdi, -0x8(%rbp)
0000000000021a8f	movq	%rsi, -0x10(%rbp)
0000000000021a93	movq	__ZN5Cacao14EditorUIEditor14objectInstanceE(%rip), %rsi ## Cacao::EditorUIEditor::objectInstance
0000000000021a9a	movq	%rsi, -0x18(%rbp)
0000000000021a9e	cmpq	$0x0, -0x18(%rbp)
0000000000021aa3	jne	0x21b63
0000000000021aa9	movl	$0x10, %edi
0000000000021aae	callq	0x27936 ## symbol stub for: ___cxa_allocate_exception
0000000000021ab3	movq	%rax, %rdi
0000000000021ab6	movb	$0x1, -0x35(%rbp)
0000000000021aba	leaq	-0x28(%rbp), %rcx
0000000000021abe	movq	%rdi, -0x70(%rbp)
0000000000021ac2	movq	%rcx, %rdi
0000000000021ac5	movq	%rax, -0x78(%rbp)
0000000000021ac9	movq	%rcx, -0x80(%rbp)
0000000000021acd	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
0000000000021ad2	leaq	0x49a70(%rip), %rsi ## literal pool for: "No editor ui editor instance found!"
0000000000021ad9	leaq	-0x20(%rbp), %rdi
0000000000021add	movq	-0x80(%rbp), %rdx
0000000000021ae1	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
0000000000021ae6	jmp	0x21aeb
0000000000021aeb	leaq	-0x20(%rbp), %rsi
0000000000021aef	movq	-0x78(%rbp), %rdi
0000000000021af3	callq	0x275b2 ## symbol stub for: __ZNSt13runtime_errorC1ERKSs
0000000000021af8	jmp	0x21afd
0000000000021afd	movb	$0x0, -0x35(%rbp)
0000000000021b01	movq	0x50538(%rip), %rsi ## literal pool symbol address: __ZTISt13runtime_error
0000000000021b08	movq	0x50501(%rip), %rdx ## literal pool symbol address: __ZNSt13runtime_errorD1Ev
0000000000021b0f	movq	-0x70(%rbp), %rdi
0000000000021b13	callq	0x27960 ## symbol stub for: ___cxa_throw
0000000000021b18	jmp	0x21c59
0000000000021b1d	movl	%edx, %ecx
0000000000021b1f	movq	%rax, -0x30(%rbp)
0000000000021b23	movl	%ecx, -0x34(%rbp)
0000000000021b26	jmp	0x21b3d
0000000000021b2b	movl	%edx, %ecx
0000000000021b2d	movq	%rax, -0x30(%rbp)
0000000000021b31	movl	%ecx, -0x34(%rbp)
0000000000021b34	leaq	-0x20(%rbp), %rdi
0000000000021b38	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
0000000000021b3d	leaq	-0x28(%rbp), %rdi
0000000000021b41	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
0000000000021b46	testb	$0x1, -0x35(%rbp)
0000000000021b4a	jne	0x21b55
0000000000021b50	jmp	0x21b5e
0000000000021b55	movq	-0x70(%rbp), %rdi
0000000000021b59	callq	0x27954 ## symbol stub for: ___cxa_free_exception
0000000000021b5e	jmp	0x21c4e
0000000000021b63	movq	-0x18(%rbp), %rax
0000000000021b67	movq	0x120(%rax), %rdi
0000000000021b6e	movq	%rdi, -0x88(%rbp)
0000000000021b75	callq	__Z7getBasev ## getBase()
0000000000021b7a	addq	$0x2fbba0, %rax
0000000000021b80	movq	-0x88(%rbp), %rdi
0000000000021b87	movq	%rax, %rsi
0000000000021b8a	callq	__ZN12ModContainer11getOriginalEl ## ModContainer::getOriginal(long)
0000000000021b8f	movq	%rax, -0x40(%rbp)
0000000000021b93	movq	-0x10(%rbp), %rdi
0000000000021b97	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
0000000000021b9c	movl	(%rax), %ecx
0000000000021b9e	movl	%ecx, -0x44(%rbp)
0000000000021ba1	movq	-0x18(%rbp), %rax
0000000000021ba5	addq	$0x178, %rax
0000000000021bab	movq	%rax, %rdi
0000000000021bae	callq	0x276ba ## symbol stub for: __ZNSt6vectorIiSaIiEE5beginEv
0000000000021bb3	movq	%rax, -0x58(%rbp)
0000000000021bb7	movq	-0x18(%rbp), %rax
0000000000021bbb	addq	$0x178, %rax
0000000000021bc1	movq	%rax, %rdi
0000000000021bc4	callq	0x276b4 ## symbol stub for: __ZNSt6vectorIiSaIiEE3endEv
0000000000021bc9	movq	%rax, -0x60(%rbp)
0000000000021bcd	movq	-0x58(%rbp), %rdi
0000000000021bd1	movq	-0x60(%rbp), %rsi
0000000000021bd5	leaq	-0x44(%rbp), %rdx
0000000000021bd9	callq	0x278c4 ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_RKT0_
0000000000021bde	movq	%rax, -0x50(%rbp)
0000000000021be2	movq	-0x18(%rbp), %rax
0000000000021be6	addq	$0x178, %rax
0000000000021bec	movq	%rax, %rdi
0000000000021bef	callq	0x276b4 ## symbol stub for: __ZNSt6vectorIiSaIiEE3endEv
0000000000021bf4	movq	%rax, -0x68(%rbp)
0000000000021bf8	leaq	-0x50(%rbp), %rdi
0000000000021bfc	leaq	-0x68(%rbp), %rsi
0000000000021c00	callq	0x2734e ## symbol stub for: __ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
0000000000021c05	testb	$0x1, %al
0000000000021c07	jne	0x21c12
0000000000021c0d	jmp	0x21c21
0000000000021c12	movq	-0x10(%rbp), %rdi
0000000000021c16	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
0000000000021c1b	movl	$0x385, (%rax)
0000000000021c21	movq	-0x40(%rbp), %rax
0000000000021c25	movq	-0x10(%rbp), %rdi
0000000000021c29	callq	*%rax
0000000000021c2b	movl	-0x44(%rbp), %ecx
0000000000021c2e	movq	-0x10(%rbp), %rdi
0000000000021c32	movl	%ecx, -0x8c(%rbp)
0000000000021c38	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
0000000000021c3d	movl	-0x8c(%rbp), %ecx
0000000000021c43	movl	%ecx, (%rax)
0000000000021c45	addq	$0x90, %rsp
0000000000021c4c	popq	%rbp
0000000000021c4d	retq
0000000000021c4e	movq	-0x30(%rbp), %rdi
0000000000021c52	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000021c57	ud2
0000000000021c59	ud2
0000000000021c5b	nopl	(%rax,%rax)
__ZN10GameObject3_idEv:
0000000000021c60	pushq	%rbp
0000000000021c61	movq	%rsp, %rbp
0000000000021c64	movq	%rdi, -0x8(%rbp)
0000000000021c68	movq	-0x8(%rbp), %rdi
0000000000021c6c	addq	$0x3c4, %rdi
0000000000021c73	movq	%rdi, %rax
0000000000021c76	popq	%rbp
0000000000021c77	retq
0000000000021c78	nopl	(%rax,%rax)
__ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_:
0000000000021c80	pushq	%rbp
0000000000021c81	movq	%rsp, %rbp
0000000000021c84	subq	$0x20, %rsp
0000000000021c88	movq	%rdi, -0x8(%rbp)
0000000000021c8c	movq	%rsi, -0x10(%rbp)
0000000000021c90	movq	-0x8(%rbp), %rdi
0000000000021c94	callq	0x273ba ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
0000000000021c99	movq	(%rax), %rax
0000000000021c9c	movq	-0x10(%rbp), %rdi
0000000000021ca0	movq	%rax, -0x18(%rbp)
0000000000021ca4	callq	0x273ba ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
0000000000021ca9	movq	-0x18(%rbp), %rsi
0000000000021cad	cmpq	(%rax), %rsi
0000000000021cb0	setne	%cl
0000000000021cb3	andb	$0x1, %cl
0000000000021cb6	movzbl	%cl, %eax
0000000000021cb9	addq	$0x20, %rsp
0000000000021cbd	popq	%rbp
0000000000021cbe	retq
0000000000021cbf	nop
__ZSt4findIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_RKT0_:
0000000000021cc0	pushq	%rbp
0000000000021cc1	movq	%rsp, %rbp
0000000000021cc4	subq	$0x50, %rsp
0000000000021cc8	movq	%rdi, -0x10(%rbp)
0000000000021ccc	movq	%rsi, -0x18(%rbp)
0000000000021cd0	movq	%rdx, -0x20(%rbp)
0000000000021cd4	movq	-0x10(%rbp), %rdx
0000000000021cd8	movq	%rdx, -0x28(%rbp)
0000000000021cdc	movq	-0x18(%rbp), %rdx
0000000000021ce0	movq	%rdx, -0x30(%rbp)
0000000000021ce4	movq	-0x20(%rbp), %rdx
0000000000021ce8	leaq	-0x10(%rbp), %rdi
0000000000021cec	movq	%rdx, -0x48(%rbp)
0000000000021cf0	callq	0x2785e ## symbol stub for: __ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_
0000000000021cf5	movq	-0x28(%rbp), %rdi
0000000000021cf9	movq	-0x30(%rbp), %rsi
0000000000021cfd	movq	-0x48(%rbp), %rdx
0000000000021d01	callq	0x278ca ## symbol stub for: __ZSt6__findIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_RKT0_St26random_access_iterator_tag
0000000000021d06	movq	%rax, -0x8(%rbp)
0000000000021d0a	movq	-0x8(%rbp), %rax
0000000000021d0e	addq	$0x50, %rsp
0000000000021d12	popq	%rbp
0000000000021d13	retq
0000000000021d14	nopw	%cs:(%rax,%rax)
0000000000021d1e	nop
__ZNSt6vectorIiSaIiEE5beginEv:
0000000000021d20	pushq	%rbp
0000000000021d21	movq	%rsp, %rbp
0000000000021d24	subq	$0x20, %rsp
0000000000021d28	movq	%rdi, -0x10(%rbp)
0000000000021d2c	movq	-0x10(%rbp), %rdi
0000000000021d30	leaq	-0x8(%rbp), %rax
0000000000021d34	movq	%rdi, -0x18(%rbp)
0000000000021d38	movq	%rax, %rdi
0000000000021d3b	movq	-0x18(%rbp), %rsi
0000000000021d3f	callq	__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_ ## __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&)
0000000000021d44	movq	-0x8(%rbp), %rax
0000000000021d48	addq	$0x20, %rsp
0000000000021d4c	popq	%rbp
0000000000021d4d	retq
0000000000021d4e	nop
__ZNSt6vectorIiSaIiEE3endEv:
0000000000021d50	pushq	%rbp
0000000000021d51	movq	%rsp, %rbp
0000000000021d54	subq	$0x20, %rsp
0000000000021d58	movq	%rdi, -0x10(%rbp)
0000000000021d5c	movq	-0x10(%rbp), %rdi
0000000000021d60	addq	$0x8, %rdi
0000000000021d64	leaq	-0x8(%rbp), %rax
0000000000021d68	movq	%rdi, -0x18(%rbp)
0000000000021d6c	movq	%rax, %rdi
0000000000021d6f	movq	-0x18(%rbp), %rsi
0000000000021d73	callq	__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_ ## __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&)
0000000000021d78	movq	-0x8(%rbp), %rax
0000000000021d7c	addq	$0x20, %rsp
0000000000021d80	popq	%rbp
0000000000021d81	retq
0000000000021d82	nopw	%cs:(%rax,%rax)
0000000000021d8c	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv:
0000000000021d90	pushq	%rbp
0000000000021d91	movq	%rsp, %rbp
0000000000021d94	movq	%rdi, -0x8(%rbp)
0000000000021d98	movq	-0x8(%rbp), %rax
0000000000021d9c	popq	%rbp
0000000000021d9d	retq
0000000000021d9e	nop
__ZSt6__findIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_RKT0_St26random_access_iterator_tag:
0000000000021da0	pushq	%rbp
0000000000021da1	movq	%rsp, %rbp
0000000000021da4	subq	$0x80, %rsp
0000000000021dab	movq	%rdi, -0x10(%rbp)
0000000000021daf	movq	%rsi, -0x18(%rbp)
0000000000021db3	movq	%rdx, -0x28(%rbp)
0000000000021db7	leaq	-0x18(%rbp), %rdi
0000000000021dbb	leaq	-0x10(%rbp), %rsi
0000000000021dbf	callq	0x27336 ## symbol stub for: __ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_
0000000000021dc4	sarq	$0x2, %rax
0000000000021dc8	movq	%rax, -0x30(%rbp)
0000000000021dcc	cmpq	$0x0, -0x30(%rbp)
0000000000021dd1	jle	0x21eac
0000000000021dd7	leaq	-0x10(%rbp), %rdi
0000000000021ddb	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021de0	movl	(%rax), %ecx
0000000000021de2	movq	-0x28(%rbp), %rax
0000000000021de6	cmpl	(%rax), %ecx
0000000000021de8	jne	0x21dfb
0000000000021dee	movq	-0x10(%rbp), %rax
0000000000021df2	movq	%rax, -0x8(%rbp)
0000000000021df6	jmp	0x21f82
0000000000021dfb	leaq	-0x10(%rbp), %rdi
0000000000021dff	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021e04	leaq	-0x10(%rbp), %rdi
0000000000021e08	movq	%rax, -0x38(%rbp)
0000000000021e0c	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021e11	movl	(%rax), %ecx
0000000000021e13	movq	-0x28(%rbp), %rax
0000000000021e17	cmpl	(%rax), %ecx
0000000000021e19	jne	0x21e2c
0000000000021e1f	movq	-0x10(%rbp), %rax
0000000000021e23	movq	%rax, -0x8(%rbp)
0000000000021e27	jmp	0x21f82
0000000000021e2c	leaq	-0x10(%rbp), %rdi
0000000000021e30	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021e35	leaq	-0x10(%rbp), %rdi
0000000000021e39	movq	%rax, -0x40(%rbp)
0000000000021e3d	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021e42	movl	(%rax), %ecx
0000000000021e44	movq	-0x28(%rbp), %rax
0000000000021e48	cmpl	(%rax), %ecx
0000000000021e4a	jne	0x21e5d
0000000000021e50	movq	-0x10(%rbp), %rax
0000000000021e54	movq	%rax, -0x8(%rbp)
0000000000021e58	jmp	0x21f82
0000000000021e5d	leaq	-0x10(%rbp), %rdi
0000000000021e61	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021e66	leaq	-0x10(%rbp), %rdi
0000000000021e6a	movq	%rax, -0x48(%rbp)
0000000000021e6e	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021e73	movl	(%rax), %ecx
0000000000021e75	movq	-0x28(%rbp), %rax
0000000000021e79	cmpl	(%rax), %ecx
0000000000021e7b	jne	0x21e8e
0000000000021e81	movq	-0x10(%rbp), %rax
0000000000021e85	movq	%rax, -0x8(%rbp)
0000000000021e89	jmp	0x21f82
0000000000021e8e	leaq	-0x10(%rbp), %rdi
0000000000021e92	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021e97	movq	%rax, -0x50(%rbp)
0000000000021e9b	movq	-0x30(%rbp), %rax
0000000000021e9f	addq	$-0x1, %rax
0000000000021ea3	movq	%rax, -0x30(%rbp)
0000000000021ea7	jmp	0x21dcc
0000000000021eac	leaq	-0x18(%rbp), %rdi
0000000000021eb0	leaq	-0x10(%rbp), %rsi
0000000000021eb4	callq	0x27336 ## symbol stub for: __ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_
0000000000021eb9	movq	%rax, %rsi
0000000000021ebc	subq	$0x3, %rax
0000000000021ec0	movq	%rsi, -0x58(%rbp)
0000000000021ec4	movq	%rax, -0x60(%rbp)
0000000000021ec8	ja	0x21f7a
0000000000021ece	leaq	0xbb(%rip), %rax
0000000000021ed5	movq	-0x58(%rbp), %rcx
0000000000021ed9	movslq	(%rax,%rcx,4), %rdx
0000000000021edd	addq	%rax, %rdx
0000000000021ee0	jmpq	*%rdx
0000000000021ee2	leaq	-0x10(%rbp), %rdi
0000000000021ee6	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021eeb	movl	(%rax), %ecx
0000000000021eed	movq	-0x28(%rbp), %rax
0000000000021ef1	cmpl	(%rax), %ecx
0000000000021ef3	jne	0x21f06
0000000000021ef9	movq	-0x10(%rbp), %rax
0000000000021efd	movq	%rax, -0x8(%rbp)
0000000000021f01	jmp	0x21f82
0000000000021f06	leaq	-0x10(%rbp), %rdi
0000000000021f0a	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021f0f	movq	%rax, -0x68(%rbp)
0000000000021f13	leaq	-0x10(%rbp), %rdi
0000000000021f17	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021f1c	movl	(%rax), %ecx
0000000000021f1e	movq	-0x28(%rbp), %rax
0000000000021f22	cmpl	(%rax), %ecx
0000000000021f24	jne	0x21f37
0000000000021f2a	movq	-0x10(%rbp), %rax
0000000000021f2e	movq	%rax, -0x8(%rbp)
0000000000021f32	jmp	0x21f82
0000000000021f37	leaq	-0x10(%rbp), %rdi
0000000000021f3b	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021f40	movq	%rax, -0x70(%rbp)
0000000000021f44	leaq	-0x10(%rbp), %rdi
0000000000021f48	callq	0x273c0 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0000000000021f4d	movl	(%rax), %ecx
0000000000021f4f	movq	-0x28(%rbp), %rax
0000000000021f53	cmpl	(%rax), %ecx
0000000000021f55	jne	0x21f68
0000000000021f5b	movq	-0x10(%rbp), %rax
0000000000021f5f	movq	%rax, -0x8(%rbp)
0000000000021f63	jmp	0x21f82
0000000000021f68	leaq	-0x10(%rbp), %rdi
0000000000021f6c	callq	0x2731e ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000000000021f71	movq	%rax, -0x78(%rbp)
0000000000021f75	jmp	0x21f7a
0000000000021f7a	movq	-0x18(%rbp), %rax
0000000000021f7e	movq	%rax, -0x8(%rbp)
0000000000021f82	movq	-0x8(%rbp), %rax
0000000000021f86	addq	$0x80, %rsp
0000000000021f8d	popq	%rbp
0000000000021f8e	retq
0000000000021f8f	nop
0000000000021f90	inl	$0xff, %eax
0000000000021f92	.byte 0xff #bad opcode
0000000000021f93	pushq	-0x7c0001(%rdi,%rdi,8)
0000000000021f9a	.byte 0xff #bad opcode
0000000000021f9b	callq	*-0x1(%rdx)
0000000000021f9e	.byte 0xff #bad opcode
0000000000021f9f	callq	*0x48(%rbp)
__ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_:
0000000000021fa0	pushq	%rbp
0000000000021fa1	movq	%rsp, %rbp
0000000000021fa4	movq	%rdi, -0x10(%rbp)
0000000000021fa8	popq	%rbp
0000000000021fa9	retq
0000000000021faa	nopw	(%rax,%rax)
__ZN9__gnu_cxxmiIPiSt6vectorIiSaIiEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_:
0000000000021fb0	pushq	%rbp
0000000000021fb1	movq	%rsp, %rbp
0000000000021fb4	subq	$0x20, %rsp
0000000000021fb8	movq	%rdi, -0x8(%rbp)
0000000000021fbc	movq	%rsi, -0x10(%rbp)
0000000000021fc0	movq	-0x8(%rbp), %rdi
0000000000021fc4	callq	0x273ba ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
0000000000021fc9	movq	(%rax), %rax
0000000000021fcc	movq	-0x10(%rbp), %rdi
0000000000021fd0	movq	%rax, -0x18(%rbp)
0000000000021fd4	callq	0x273ba ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
0000000000021fd9	movq	(%rax), %rax
0000000000021fdc	movq	-0x18(%rbp), %rsi
0000000000021fe0	subq	%rax, %rsi
0000000000021fe3	sarq	$0x2, %rsi
0000000000021fe7	movq	%rsi, %rax
0000000000021fea	addq	$0x20, %rsp
0000000000021fee	popq	%rbp
0000000000021fef	retq
__ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv:
0000000000021ff0	pushq	%rbp
0000000000021ff1	movq	%rsp, %rbp
0000000000021ff4	movq	%rdi, -0x8(%rbp)
0000000000021ff8	movq	-0x8(%rbp), %rdi
0000000000021ffc	movq	(%rdi), %rax
0000000000021fff	popq	%rbp
0000000000022000	retq
0000000000022001	nopw	%cs:(%rax,%rax)
000000000002200b	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv:
0000000000022010	pushq	%rbp
0000000000022011	movq	%rsp, %rbp
0000000000022014	movq	%rdi, -0x8(%rbp)
0000000000022018	movq	-0x8(%rbp), %rdi
000000000002201c	movq	(%rdi), %rax
000000000002201f	addq	$0x4, %rax
0000000000022023	movq	%rax, (%rdi)
0000000000022026	movq	%rdi, %rax
0000000000022029	popq	%rbp
000000000002202a	retq
000000000002202b	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_:
0000000000022030	pushq	%rbp
0000000000022031	movq	%rsp, %rbp
0000000000022034	subq	$0x10, %rsp
0000000000022038	movq	%rdi, -0x8(%rbp)
000000000002203c	movq	%rsi, -0x10(%rbp)
0000000000022040	movq	-0x8(%rbp), %rdi
0000000000022044	movq	-0x10(%rbp), %rsi
0000000000022048	callq	__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_ ## __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&)
000000000002204d	addq	$0x10, %rsp
0000000000022051	popq	%rbp
0000000000022052	retq
0000000000022053	nopw	%cs:(%rax,%rax)
000000000002205d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC2ERKS1_:
0000000000022060	pushq	%rbp
0000000000022061	movq	%rsp, %rbp
0000000000022064	movq	%rdi, -0x8(%rbp)
0000000000022068	movq	%rsi, -0x10(%rbp)
000000000002206c	movq	-0x8(%rbp), %rsi
0000000000022070	movq	-0x10(%rbp), %rdi
0000000000022074	movq	(%rdi), %rdi
0000000000022077	movq	%rdi, (%rsi)
000000000002207a	popq	%rbp
000000000002207b	retq
000000000002207c	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor12applyObjectsEvEN3$_28__invokeEi:
0000000000022080	pushq	%rbp
0000000000022081	movq	%rsp, %rbp
0000000000022084	subq	$0x10, %rsp
0000000000022088	movl	%edi, -0x4(%rbp)
000000000002208b	movl	-0x4(%rbp), %esi
000000000002208e	callq	__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_2clEi ## Cacao::EditorUIEditor::applyObjects()::$_2::operator()(int) const
0000000000022093	addq	$0x10, %rsp
0000000000022097	popq	%rbp
0000000000022098	retq
0000000000022099	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor12applyObjectsEvENK3$_2clEi:
00000000000220a0	pushq	%rbp
00000000000220a1	movq	%rsp, %rbp
00000000000220a4	subq	$0xa0, %rsp
00000000000220ab	movq	%rdi, -0x10(%rbp)
00000000000220af	movl	%esi, -0x14(%rbp)
00000000000220b2	movq	__ZN5Cacao14EditorUIEditor14objectInstanceE(%rip), %rdi ## Cacao::EditorUIEditor::objectInstance
00000000000220b9	movq	%rdi, -0x20(%rbp)
00000000000220bd	cmpq	$0x0, -0x20(%rbp)
00000000000220c2	jne	0x2218e
00000000000220c8	movl	$0x10, %edi
00000000000220cd	callq	0x27936 ## symbol stub for: ___cxa_allocate_exception
00000000000220d2	movq	%rax, %rdi
00000000000220d5	movb	$0x1, -0x3d(%rbp)
00000000000220d9	leaq	-0x30(%rbp), %rcx
00000000000220dd	movq	%rdi, -0x80(%rbp)
00000000000220e1	movq	%rcx, %rdi
00000000000220e4	movq	%rax, -0x88(%rbp)
00000000000220eb	movq	%rcx, -0x90(%rbp)
00000000000220f2	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
00000000000220f7	leaq	0x4944b(%rip), %rsi ## literal pool for: "No editor ui editor instance found!"
00000000000220fe	leaq	-0x28(%rbp), %rdi
0000000000022102	movq	-0x90(%rbp), %rdx
0000000000022109	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000002210e	jmp	0x22113
0000000000022113	leaq	-0x28(%rbp), %rsi
0000000000022117	movq	-0x88(%rbp), %rdi
000000000002211e	callq	0x275b2 ## symbol stub for: __ZNSt13runtime_errorC1ERKSs
0000000000022123	jmp	0x22128
0000000000022128	movb	$0x0, -0x3d(%rbp)
000000000002212c	movq	0x4ff0d(%rip), %rsi ## literal pool symbol address: __ZTISt13runtime_error
0000000000022133	movq	0x4fed6(%rip), %rdx ## literal pool symbol address: __ZNSt13runtime_errorD1Ev
000000000002213a	movq	-0x80(%rbp), %rdi
000000000002213e	callq	0x27960 ## symbol stub for: ___cxa_throw
0000000000022143	jmp	0x2229c
0000000000022148	movl	%edx, %ecx
000000000002214a	movq	%rax, -0x38(%rbp)
000000000002214e	movl	%ecx, -0x3c(%rbp)
0000000000022151	jmp	0x22168
0000000000022156	movl	%edx, %ecx
0000000000022158	movq	%rax, -0x38(%rbp)
000000000002215c	movl	%ecx, -0x3c(%rbp)
000000000002215f	leaq	-0x28(%rbp), %rdi
0000000000022163	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
0000000000022168	leaq	-0x30(%rbp), %rdi
000000000002216c	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
0000000000022171	testb	$0x1, -0x3d(%rbp)
0000000000022175	jne	0x22180
000000000002217b	jmp	0x22189
0000000000022180	movq	-0x80(%rbp), %rdi
0000000000022184	callq	0x27954 ## symbol stub for: ___cxa_free_exception
0000000000022189	jmp	0x22291
000000000002218e	movq	-0x20(%rbp), %rax
0000000000022192	movq	0x120(%rax), %rdi
0000000000022199	movq	%rdi, -0x98(%rbp)
00000000000221a0	callq	__Z7getBasev ## getBase()
00000000000221a5	addq	$0x2f4ce0, %rax
00000000000221ab	movq	-0x98(%rbp), %rdi
00000000000221b2	movq	%rax, %rsi
00000000000221b5	callq	__ZN12ModContainer11getOriginalEl ## ModContainer::getOriginal(long)
00000000000221ba	movq	%rax, -0x48(%rbp)
00000000000221be	movq	-0x20(%rbp), %rax
00000000000221c2	addq	$0x160, %rax
00000000000221c8	movq	%rax, %rdi
00000000000221cb	callq	0x276ba ## symbol stub for: __ZNSt6vectorIiSaIiEE5beginEv
00000000000221d0	movq	%rax, -0x58(%rbp)
00000000000221d4	movq	-0x20(%rbp), %rax
00000000000221d8	addq	$0x160, %rax
00000000000221de	movq	%rax, %rdi
00000000000221e1	callq	0x276b4 ## symbol stub for: __ZNSt6vectorIiSaIiEE3endEv
00000000000221e6	movq	%rax, -0x60(%rbp)
00000000000221ea	movq	-0x58(%rbp), %rdi
00000000000221ee	movq	-0x60(%rbp), %rsi
00000000000221f2	leaq	-0x14(%rbp), %rdx
00000000000221f6	callq	0x278c4 ## symbol stub for: __ZSt4findIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_RKT0_
00000000000221fb	movq	%rax, -0x50(%rbp)
00000000000221ff	movq	-0x20(%rbp), %rax
0000000000022203	addq	$0x160, %rax
0000000000022209	movq	%rax, %rdi
000000000002220c	callq	0x276b4 ## symbol stub for: __ZNSt6vectorIiSaIiEE3endEv
0000000000022211	movq	%rax, -0x68(%rbp)
0000000000022215	leaq	-0x50(%rbp), %rdi
0000000000022219	leaq	-0x68(%rbp), %rsi
000000000002221d	callq	0x2734e ## symbol stub for: __ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
0000000000022222	testb	$0x1, %al
0000000000022224	jne	0x2222f
000000000002222a	jmp	0x22277
000000000002222f	callq	__ZN13ObjectToolbox11sharedStateEv ## ObjectToolbox::sharedState()
0000000000022234	movl	-0x14(%rbp), %esi
0000000000022237	movq	%rax, %rdi
000000000002223a	callq	__ZN13ObjectToolbox13intKeyToFrameEi ## ObjectToolbox::intKeyToFrame(int)
000000000002223f	movq	%rax, -0x70(%rbp)
0000000000022243	movq	-0x70(%rbp), %rdi
0000000000022247	callq	__ZN15LabelGameObject6createEPKc ## LabelGameObject::create(char const*)
000000000002224c	movq	%rax, -0x78(%rbp)
0000000000022250	movl	-0x14(%rbp), %esi
0000000000022253	movq	-0x78(%rbp), %rdi
0000000000022257	movl	%esi, -0x9c(%rbp)
000000000002225d	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
0000000000022262	movl	-0x9c(%rbp), %esi
0000000000022268	movl	%esi, (%rax)
000000000002226a	movq	-0x78(%rbp), %rax
000000000002226e	movq	%rax, -0x8(%rbp)
0000000000022272	jmp	0x22284
0000000000022277	movq	-0x48(%rbp), %rax
000000000002227b	movl	-0x14(%rbp), %edi
000000000002227e	callq	*%rax
0000000000022280	movq	%rax, -0x8(%rbp)
0000000000022284	movq	-0x8(%rbp), %rax
0000000000022288	addq	$0xa0, %rsp
000000000002228f	popq	%rbp
0000000000022290	retq
0000000000022291	movq	-0x38(%rbp), %rdi
0000000000022295	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000002229a	ud2
000000000002229c	ud2
000000000002229e	nop
__ZZN5Cacao14EditorUIEditor14applyCallbacksEvEN3$_38__invokeEP10GameObjectP15GJBaseGameLayer:
00000000000222a0	pushq	%rbp
00000000000222a1	movq	%rsp, %rbp
00000000000222a4	subq	$0x10, %rsp
00000000000222a8	movq	%rdi, -0x8(%rbp)
00000000000222ac	movq	%rsi, -0x10(%rbp)
00000000000222b0	movq	-0x8(%rbp), %rsi
00000000000222b4	movq	-0x10(%rbp), %rdx
00000000000222b8	callq	__ZZN5Cacao14EditorUIEditor14applyCallbacksEvENK3$_3clEP10GameObjectP15GJBaseGameLayer ## Cacao::EditorUIEditor::applyCallbacks()::$_3::operator()(GameObject*, GJBaseGameLayer*) const
00000000000222bd	addq	$0x10, %rsp
00000000000222c1	popq	%rbp
00000000000222c2	retq
00000000000222c3	nopw	%cs:(%rax,%rax)
00000000000222cd	nopl	(%rax)
__ZZN5Cacao14EditorUIEditor14applyCallbacksEvENK3$_3clEP10GameObjectP15GJBaseGameLayer:
00000000000222d0	pushq	%rbp
00000000000222d1	movq	%rsp, %rbp
00000000000222d4	subq	$0x80, %rsp
00000000000222db	movq	%rdi, -0x8(%rbp)
00000000000222df	movq	%rsi, -0x10(%rbp)
00000000000222e3	movq	%rdx, -0x18(%rbp)
00000000000222e7	movq	__ZN5Cacao14EditorUIEditor16callbackInstanceE(%rip), %rdx ## Cacao::EditorUIEditor::callbackInstance
00000000000222ee	movq	%rdx, -0x20(%rbp)
00000000000222f2	cmpq	$0x0, -0x20(%rbp)
00000000000222f7	jne	0x223b7
00000000000222fd	movl	$0x10, %edi
0000000000022302	callq	0x27936 ## symbol stub for: ___cxa_allocate_exception
0000000000022307	movq	%rax, %rdi
000000000002230a	movb	$0x1, -0x3d(%rbp)
000000000002230e	leaq	-0x30(%rbp), %rcx
0000000000022312	movq	%rdi, -0x50(%rbp)
0000000000022316	movq	%rcx, %rdi
0000000000022319	movq	%rax, -0x58(%rbp)
000000000002231d	movq	%rcx, -0x60(%rbp)
0000000000022321	callq	0x274f2 ## symbol stub for: __ZNSaIcEC1Ev
0000000000022326	leaq	0x4921c(%rip), %rsi ## literal pool for: "No editor ui editor instance found!"
000000000002232d	leaq	-0x28(%rbp), %rdi
0000000000022331	movq	-0x60(%rbp), %rdx
0000000000022335	callq	0x2750a ## symbol stub for: __ZNSsC1EPKcRKSaIcE
000000000002233a	jmp	0x2233f
000000000002233f	leaq	-0x28(%rbp), %rsi
0000000000022343	movq	-0x58(%rbp), %rdi
0000000000022347	callq	0x275b2 ## symbol stub for: __ZNSt13runtime_errorC1ERKSs
000000000002234c	jmp	0x22351
0000000000022351	movb	$0x0, -0x3d(%rbp)
0000000000022355	movq	0x4fce4(%rip), %rsi ## literal pool symbol address: __ZTISt13runtime_error
000000000002235c	movq	0x4fcad(%rip), %rdx ## literal pool symbol address: __ZNSt13runtime_errorD1Ev
0000000000022363	movq	-0x50(%rbp), %rdi
0000000000022367	callq	0x27960 ## symbol stub for: ___cxa_throw
000000000002236c	jmp	0x22465
0000000000022371	movl	%edx, %ecx
0000000000022373	movq	%rax, -0x38(%rbp)
0000000000022377	movl	%ecx, -0x3c(%rbp)
000000000002237a	jmp	0x22391
000000000002237f	movl	%edx, %ecx
0000000000022381	movq	%rax, -0x38(%rbp)
0000000000022385	movl	%ecx, -0x3c(%rbp)
0000000000022388	leaq	-0x28(%rbp), %rdi
000000000002238c	callq	0x27510 ## symbol stub for: __ZNSsD1Ev
0000000000022391	leaq	-0x30(%rbp), %rdi
0000000000022395	callq	0x274f8 ## symbol stub for: __ZNSaIcED1Ev
000000000002239a	testb	$0x1, -0x3d(%rbp)
000000000002239e	jne	0x223a9
00000000000223a4	jmp	0x223b2
00000000000223a9	movq	-0x50(%rbp), %rdi
00000000000223ad	callq	0x27954 ## symbol stub for: ___cxa_free_exception
00000000000223b2	jmp	0x2245a
00000000000223b7	movq	-0x20(%rbp), %rax
00000000000223bb	movq	0x120(%rax), %rdi
00000000000223c2	movq	%rdi, -0x68(%rbp)
00000000000223c6	callq	__Z7getBasev ## getBase()
00000000000223cb	addq	$0x2fbba0, %rax
00000000000223d1	movq	-0x68(%rbp), %rdi
00000000000223d5	movq	%rax, %rsi
00000000000223d8	callq	__ZN12ModContainer11getOriginalEl ## ModContainer::getOriginal(long)
00000000000223dd	movq	%rax, -0x48(%rbp)
00000000000223e1	movq	-0x20(%rbp), %rax
00000000000223e5	addq	$0x190, %rax
00000000000223eb	movq	-0x10(%rbp), %rdi
00000000000223ef	movq	%rax, -0x70(%rbp)
00000000000223f3	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
00000000000223f8	movq	-0x70(%rbp), %rdi
00000000000223fc	movq	%rax, %rsi
00000000000223ff	callq	0x2740e ## symbol stub for: __ZNKSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE5countERS9_
0000000000022404	cmpq	$0x0, %rax
0000000000022408	jbe	0x22443
000000000002240e	movq	-0x20(%rbp), %rax
0000000000022412	addq	$0x190, %rax
0000000000022418	movq	-0x10(%rbp), %rdi
000000000002241c	movq	%rax, -0x78(%rbp)
0000000000022420	callq	0x271b6 ## symbol stub for: __ZN10GameObject3_idEv
0000000000022425	movq	-0x78(%rbp), %rdi
0000000000022429	movq	%rax, %rsi
000000000002242c	callq	0x27612 ## symbol stub for: __ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEixERS9_
0000000000022431	movq	(%rax), %rax
0000000000022434	movq	-0x10(%rbp), %rdi
0000000000022438	movq	-0x18(%rbp), %rsi
000000000002243c	callq	*%rax
000000000002243e	jmp	0x22451
0000000000022443	movq	-0x48(%rbp), %rax
0000000000022447	movq	-0x10(%rbp), %rdi
000000000002244b	movq	-0x18(%rbp), %rsi
000000000002244f	callq	*%rax
0000000000022451	addq	$0x80, %rsp
0000000000022458	popq	%rbp
0000000000022459	retq
000000000002245a	movq	-0x38(%rbp), %rdi
000000000002245e	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000022463	ud2
0000000000022465	ud2
0000000000022467	nopw	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEEixERS9_:
0000000000022470	pushq	%rbp
0000000000022471	movq	%rsp, %rbp
0000000000022474	subq	$0x80, %rsp
000000000002247b	movq	%rdi, -0x8(%rbp)
000000000002247f	movq	%rsi, -0x10(%rbp)
0000000000022483	movq	-0x8(%rbp), %rsi
0000000000022487	movq	-0x10(%rbp), %rdi
000000000002248b	movq	%rdi, -0x60(%rbp)
000000000002248f	movq	%rsi, %rdi
0000000000022492	movq	-0x60(%rbp), %rax
0000000000022496	movq	%rsi, -0x68(%rbp)
000000000002249a	movq	%rax, %rsi
000000000002249d	callq	0x275fa ## symbol stub for: __ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE11lower_boundERS9_
00000000000224a2	movq	%rax, -0x18(%rbp)
00000000000224a6	movq	-0x68(%rbp), %rdi
00000000000224aa	callq	0x27600 ## symbol stub for: __ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE3endEv
00000000000224af	movq	%rax, -0x20(%rbp)
00000000000224b3	leaq	-0x18(%rbp), %rdi
00000000000224b7	leaq	-0x20(%rbp), %rsi
00000000000224bb	callq	0x273f0 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_
00000000000224c0	testb	$0x1, %al
00000000000224c2	movb	$0x1, %al
00000000000224c4	movb	%al, -0x69(%rbp)
00000000000224c7	jne	0x224fa
00000000000224cd	movq	-0x68(%rbp), %rdi
00000000000224d1	callq	0x27414 ## symbol stub for: __ZNKSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE8key_compEv
00000000000224d6	movq	-0x10(%rbp), %rsi
00000000000224da	leaq	-0x18(%rbp), %rdi
00000000000224de	movq	%rsi, -0x78(%rbp)
00000000000224e2	callq	0x273ea ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEdeEv
00000000000224e7	leaq	-0x28(%rbp), %rdi
00000000000224eb	movq	-0x78(%rbp), %rsi
00000000000224ef	movq	%rax, %rdx
00000000000224f2	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
00000000000224f7	movb	%al, -0x69(%rbp)
00000000000224fa	movb	-0x69(%rbp), %al
00000000000224fd	testb	$0x1, %al
00000000000224ff	jne	0x2250a
0000000000022505	jmp	0x22548
000000000002250a	movq	-0x18(%rbp), %rax
000000000002250e	movq	%rax, -0x40(%rbp)
0000000000022512	movq	-0x10(%rbp), %rsi
0000000000022516	movq	$0x0, -0x58(%rbp)
000000000002251e	leaq	-0x50(%rbp), %rdi
0000000000022522	leaq	-0x58(%rbp), %rdx
0000000000022526	callq	__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC1ERS0_RKS6_ ## std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>::pair(int const&, void (* const&)(GameObject*, GJBaseGameLayer*))
000000000002252b	movq	-0x40(%rbp), %rsi
000000000002252f	movq	-0x68(%rbp), %rdi
0000000000022533	leaq	-0x50(%rbp), %rdx
0000000000022537	callq	0x2760c ## symbol stub for: __ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE6insertESt17_Rb_tree_iteratorISA_ERKSA_
000000000002253c	movq	%rax, -0x38(%rbp)
0000000000022540	movq	-0x38(%rbp), %rax
0000000000022544	movq	%rax, -0x18(%rbp)
0000000000022548	leaq	-0x18(%rbp), %rdi
000000000002254c	callq	0x273ea ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEdeEv
0000000000022551	addq	$0x8, %rax
0000000000022555	addq	$0x80, %rsp
000000000002255c	popq	%rbp
000000000002255d	retq
000000000002255e	nop
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE11lower_boundERS9_:
0000000000022560	pushq	%rbp
0000000000022561	movq	%rsp, %rbp
0000000000022564	subq	$0x20, %rsp
0000000000022568	movq	%rdi, -0x10(%rbp)
000000000002256c	movq	%rsi, -0x18(%rbp)
0000000000022570	movq	-0x10(%rbp), %rdi
0000000000022574	movq	-0x18(%rbp), %rsi
0000000000022578	callq	0x276d2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11lower_boundERS1_
000000000002257d	movq	%rax, -0x8(%rbp)
0000000000022581	movq	-0x8(%rbp), %rax
0000000000022585	addq	$0x20, %rsp
0000000000022589	popq	%rbp
000000000002258a	retq
000000000002258b	nopl	(%rax,%rax)
__ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_:
0000000000022590	pushq	%rbp
0000000000022591	movq	%rsp, %rbp
0000000000022594	movq	%rdi, -0x8(%rbp)
0000000000022598	movq	%rsi, -0x10(%rbp)
000000000002259c	movq	-0x8(%rbp), %rsi
00000000000225a0	movq	(%rsi), %rsi
00000000000225a3	movq	-0x10(%rbp), %rdi
00000000000225a7	cmpq	(%rdi), %rsi
00000000000225aa	sete	%al
00000000000225ad	andb	$0x1, %al
00000000000225af	movzbl	%al, %eax
00000000000225b2	popq	%rbp
00000000000225b3	retq
00000000000225b4	nopw	%cs:(%rax,%rax)
00000000000225be	nop
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE3endEv:
00000000000225c0	pushq	%rbp
00000000000225c1	movq	%rsp, %rbp
00000000000225c4	subq	$0x10, %rsp
00000000000225c8	movq	%rdi, -0x10(%rbp)
00000000000225cc	movq	-0x10(%rbp), %rdi
00000000000225d0	callq	0x276f6 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv
00000000000225d5	movq	%rax, -0x8(%rbp)
00000000000225d9	movq	-0x8(%rbp), %rax
00000000000225dd	addq	$0x10, %rsp
00000000000225e1	popq	%rbp
00000000000225e2	retq
00000000000225e3	nopw	%cs:(%rax,%rax)
00000000000225ed	nopl	(%rax)
__ZNKSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE8key_compEv:
00000000000225f0	pushq	%rbp
00000000000225f1	movq	%rsp, %rbp
00000000000225f4	subq	$0x20, %rsp
00000000000225f8	movq	%rdi, -0x10(%rbp)
00000000000225fc	movq	-0x10(%rbp), %rdi
0000000000022600	callq	0x2748c ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8key_compEv
0000000000022605	addq	$0x20, %rsp
0000000000022609	popq	%rbp
000000000002260a	retq
000000000002260b	nopl	(%rax,%rax)
__ZNKSt4lessIiEclERKiS2_:
0000000000022610	pushq	%rbp
0000000000022611	movq	%rsp, %rbp
0000000000022614	movq	%rdi, -0x8(%rbp)
0000000000022618	movq	%rsi, -0x10(%rbp)
000000000002261c	movq	%rdx, -0x18(%rbp)
0000000000022620	movq	-0x10(%rbp), %rdx
0000000000022624	movl	(%rdx), %eax
0000000000022626	movq	-0x18(%rbp), %rdx
000000000002262a	cmpl	(%rdx), %eax
000000000002262c	setl	%cl
000000000002262f	andb	$0x1, %cl
0000000000022632	movzbl	%cl, %eax
0000000000022635	popq	%rbp
0000000000022636	retq
0000000000022637	nopw	(%rax,%rax)
__ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEdeEv:
0000000000022640	pushq	%rbp
0000000000022641	movq	%rsp, %rbp
0000000000022644	movq	%rdi, -0x8(%rbp)
0000000000022648	movq	-0x8(%rbp), %rdi
000000000002264c	movq	(%rdi), %rdi
000000000002264f	addq	$0x20, %rdi
0000000000022653	movq	%rdi, %rax
0000000000022656	popq	%rbp
0000000000022657	retq
0000000000022658	nopl	(%rax,%rax)
__ZNSt3mapIiPFvP10GameObjectP15GJBaseGameLayerESt4lessIiESaISt4pairIKiS5_EEE6insertESt17_Rb_tree_iteratorISA_ERKSA_:
0000000000022660	pushq	%rbp
0000000000022661	movq	%rsp, %rbp
0000000000022664	subq	$0x30, %rsp
0000000000022668	movq	%rsi, -0x10(%rbp)
000000000002266c	movq	%rdi, -0x18(%rbp)
0000000000022670	movq	%rdx, -0x20(%rbp)
0000000000022674	movq	-0x18(%rbp), %rdi
0000000000022678	movq	-0x10(%rbp), %rdx
000000000002267c	movq	%rdx, -0x28(%rbp)
0000000000022680	movq	-0x20(%rbp), %rdx
0000000000022684	movq	-0x28(%rbp), %rsi
0000000000022688	callq	0x276f0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueESt17_Rb_tree_iteratorIS8_ERKS8_
000000000002268d	movq	%rax, -0x8(%rbp)
0000000000022691	movq	-0x8(%rbp), %rax
0000000000022695	addq	$0x30, %rsp
0000000000022699	popq	%rbp
000000000002269a	retq
000000000002269b	nopl	(%rax,%rax)
__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC1ERS0_RKS6_:
00000000000226a0	pushq	%rbp
00000000000226a1	movq	%rsp, %rbp
00000000000226a4	subq	$0x20, %rsp
00000000000226a8	movq	%rdi, -0x8(%rbp)
00000000000226ac	movq	%rsi, -0x10(%rbp)
00000000000226b0	movq	%rdx, -0x18(%rbp)
00000000000226b4	movq	-0x8(%rbp), %rdi
00000000000226b8	movq	-0x10(%rbp), %rsi
00000000000226bc	movq	-0x18(%rbp), %rdx
00000000000226c0	callq	__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC2ERS0_RKS6_ ## std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)>::pair(int const&, void (* const&)(GameObject*, GJBaseGameLayer*))
00000000000226c5	addq	$0x20, %rsp
00000000000226c9	popq	%rbp
00000000000226ca	retq
00000000000226cb	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11lower_boundERS1_:
00000000000226d0	pushq	%rbp
00000000000226d1	movq	%rsp, %rbp
00000000000226d4	subq	$0x30, %rsp
00000000000226d8	movq	%rdi, -0x10(%rbp)
00000000000226dc	movq	%rsi, -0x18(%rbp)
00000000000226e0	movq	-0x10(%rbp), %rsi
00000000000226e4	movq	%rsi, %rdi
00000000000226e7	movq	%rsi, -0x30(%rbp)
00000000000226eb	callq	0x27720 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv
00000000000226f0	movq	%rax, -0x20(%rbp)
00000000000226f4	movq	-0x30(%rbp), %rdi
00000000000226f8	callq	0x27702 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv
00000000000226fd	movq	%rax, -0x28(%rbp)
0000000000022701	cmpq	$0x0, -0x20(%rbp)
0000000000022706	je	0x2275f
000000000002270c	movq	-0x20(%rbp), %rdi
0000000000022710	callq	0x27708 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E
0000000000022715	movq	-0x18(%rbp), %rdx
0000000000022719	movq	-0x30(%rbp), %rdi
000000000002271d	movq	%rax, %rsi
0000000000022720	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022725	testb	$0x1, %al
0000000000022727	jne	0x2274a
000000000002272d	movq	-0x20(%rbp), %rax
0000000000022731	movq	%rax, -0x28(%rbp)
0000000000022735	movq	-0x20(%rbp), %rax
0000000000022739	movq	%rax, %rdi
000000000002273c	callq	0x2771a ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base
0000000000022741	movq	%rax, -0x20(%rbp)
0000000000022745	jmp	0x2275a
000000000002274a	movq	-0x20(%rbp), %rax
000000000002274e	movq	%rax, %rdi
0000000000022751	callq	0x27732 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000022756	movq	%rax, -0x20(%rbp)
000000000002275a	jmp	0x22701
000000000002275f	movq	-0x28(%rbp), %rsi
0000000000022763	leaq	-0x8(%rbp), %rdi
0000000000022767	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
000000000002276c	movq	-0x8(%rbp), %rax
0000000000022770	addq	$0x30, %rsp
0000000000022774	popq	%rbp
0000000000022775	retq
0000000000022776	nopw	%cs:(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv:
0000000000022780	pushq	%rbp
0000000000022781	movq	%rsp, %rbp
0000000000022784	movq	%rdi, -0x8(%rbp)
0000000000022788	movq	-0x8(%rbp), %rdi
000000000002278c	addq	$0x8, %rdi
0000000000022790	movq	%rdi, %rax
0000000000022793	popq	%rbp
0000000000022794	retq
0000000000022795	nopw	%cs:(%rax,%rax)
000000000002279f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E:
00000000000227a0	pushq	%rbp
00000000000227a1	movq	%rsp, %rbp
00000000000227a4	subq	$0x10, %rsp
00000000000227a8	movq	%rdi, -0x8(%rbp)
00000000000227ac	movq	-0x8(%rbp), %rdi
00000000000227b0	callq	0x27738 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_valueEPKSt13_Rb_tree_nodeIS8_E
00000000000227b5	leaq	-0x10(%rbp), %rdi
00000000000227b9	movq	%rax, %rsi
00000000000227bc	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
00000000000227c1	addq	$0x10, %rsp
00000000000227c5	popq	%rbp
00000000000227c6	retq
00000000000227c7	nopw	(%rax,%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E:
00000000000227d0	pushq	%rbp
00000000000227d1	movq	%rsp, %rbp
00000000000227d4	subq	$0x10, %rsp
00000000000227d8	movq	%rdi, -0x8(%rbp)
00000000000227dc	movq	%rsi, -0x10(%rbp)
00000000000227e0	movq	-0x8(%rbp), %rdi
00000000000227e4	movq	-0x10(%rbp), %rsi
00000000000227e8	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
00000000000227ed	addq	$0x10, %rsp
00000000000227f1	popq	%rbp
00000000000227f2	retq
00000000000227f3	nopw	%cs:(%rax,%rax)
00000000000227fd	nopl	(%rax)
__ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_:
0000000000022800	pushq	%rbp
0000000000022801	movq	%rsp, %rbp
0000000000022804	movq	%rdi, -0x8(%rbp)
0000000000022808	movq	%rsi, -0x10(%rbp)
000000000002280c	movq	-0x10(%rbp), %rax
0000000000022810	popq	%rbp
0000000000022811	retq
0000000000022812	nopw	%cs:(%rax,%rax)
000000000002281c	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_valueEPKSt13_Rb_tree_nodeIS8_E:
0000000000022820	pushq	%rbp
0000000000022821	movq	%rsp, %rbp
0000000000022824	movq	%rdi, -0x8(%rbp)
0000000000022828	movq	-0x8(%rbp), %rdi
000000000002282c	addq	$0x20, %rdi
0000000000022830	movq	%rdi, %rax
0000000000022833	popq	%rbp
0000000000022834	retq
0000000000022835	nopw	%cs:(%rax,%rax)
000000000002283f	nop
__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2EPSt13_Rb_tree_nodeIS8_E:
0000000000022840	pushq	%rbp
0000000000022841	movq	%rsp, %rbp
0000000000022844	movq	%rdi, -0x8(%rbp)
0000000000022848	movq	%rsi, -0x10(%rbp)
000000000002284c	movq	-0x8(%rbp), %rsi
0000000000022850	movq	-0x10(%rbp), %rdi
0000000000022854	movq	%rdi, (%rsi)
0000000000022857	popq	%rbp
0000000000022858	retq
0000000000022859	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv:
0000000000022860	pushq	%rbp
0000000000022861	movq	%rsp, %rbp
0000000000022864	subq	$0x20, %rsp
0000000000022868	movq	%rdi, -0x10(%rbp)
000000000002286c	movq	-0x10(%rbp), %rdi
0000000000022870	addq	$0x8, %rdi
0000000000022874	leaq	-0x8(%rbp), %rax
0000000000022878	movq	%rdi, -0x18(%rbp)
000000000002287c	movq	%rax, %rdi
000000000002287f	movq	-0x18(%rbp), %rsi
0000000000022883	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
0000000000022888	movq	-0x8(%rbp), %rax
000000000002288c	addq	$0x20, %rsp
0000000000022890	popq	%rbp
0000000000022891	retq
0000000000022892	nopw	%cs:(%rax,%rax)
000000000002289c	nopl	(%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8key_compEv:
00000000000228a0	pushq	%rbp
00000000000228a1	movq	%rsp, %rbp
00000000000228a4	movq	%rdi, -0x10(%rbp)
00000000000228a8	popq	%rbp
00000000000228a9	retq
00000000000228aa	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueESt17_Rb_tree_iteratorIS8_ERKS8_:
00000000000228b0	pushq	%rbp
00000000000228b1	movq	%rsp, %rbp
00000000000228b4	subq	$0xe0, %rsp
00000000000228bb	movq	%rsi, -0x10(%rbp)
00000000000228bf	movq	%rdi, -0x18(%rbp)
00000000000228c3	movq	%rdx, -0x20(%rbp)
00000000000228c7	movq	-0x18(%rbp), %rdx
00000000000228cb	movq	-0x10(%rbp), %rsi
00000000000228cf	movq	%rdx, %rdi
00000000000228d2	movq	%rdx, -0x90(%rbp)
00000000000228d9	movq	%rsi, -0x98(%rbp)
00000000000228e0	callq	0x27702 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv
00000000000228e5	movq	-0x98(%rbp), %rdx
00000000000228ec	cmpq	%rax, %rdx
00000000000228ef	jne	0x229bc
00000000000228f5	movq	-0x90(%rbp), %rdi
00000000000228fc	callq	0x2747a ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE4sizeEv
0000000000022901	xorl	%ecx, %ecx
0000000000022903	movb	%cl, %dl
0000000000022905	cmpq	$0x0, %rax
0000000000022909	movb	%dl, -0x99(%rbp)
000000000002290f	jbe	0x22959
0000000000022915	movq	-0x90(%rbp), %rdi
000000000002291c	callq	0x276d8 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_rightmostEv
0000000000022921	movq	(%rax), %rdi
0000000000022924	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022929	movq	-0x20(%rbp), %rsi
000000000002292d	leaq	-0x28(%rbp), %rdi
0000000000022931	movq	%rax, -0xa8(%rbp)
0000000000022938	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
000000000002293d	movq	-0x90(%rbp), %rdi
0000000000022944	movq	-0xa8(%rbp), %rsi
000000000002294b	movq	%rax, %rdx
000000000002294e	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022953	movb	%al, -0x99(%rbp)
0000000000022959	movb	-0x99(%rbp), %al
000000000002295f	testb	$0x1, %al
0000000000022961	jne	0x2296c
0000000000022967	jmp	0x22998
000000000002296c	movq	-0x90(%rbp), %rdi
0000000000022973	callq	0x276d8 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_rightmostEv
0000000000022978	xorl	%ecx, %ecx
000000000002297a	movl	%ecx, %esi
000000000002297c	movq	(%rax), %rdx
000000000002297f	movq	-0x20(%rbp), %rcx
0000000000022983	movq	-0x90(%rbp), %rdi
000000000002298a	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
000000000002298f	movq	%rax, -0x8(%rbp)
0000000000022993	jmp	0x22c9b
0000000000022998	movq	-0x20(%rbp), %rsi
000000000002299c	movq	-0x90(%rbp), %rdi
00000000000229a3	callq	0x276ea ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueERKS8_
00000000000229a8	movq	%rax, -0x38(%rbp)
00000000000229ac	movb	%dl, -0x30(%rbp)
00000000000229af	movq	-0x38(%rbp), %rax
00000000000229b3	movq	%rax, -0x8(%rbp)
00000000000229b7	jmp	0x22c9b
00000000000229bc	movq	-0x20(%rbp), %rsi
00000000000229c0	leaq	-0x40(%rbp), %rdi
00000000000229c4	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
00000000000229c9	movq	-0x10(%rbp), %rdi
00000000000229cd	movq	%rax, -0xb0(%rbp)
00000000000229d4	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
00000000000229d9	movq	-0x90(%rbp), %rdi
00000000000229e0	movq	-0xb0(%rbp), %rsi
00000000000229e7	movq	%rax, %rdx
00000000000229ea	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
00000000000229ef	testb	$0x1, %al
00000000000229f1	jne	0x229fc
00000000000229f7	jmp	0x22b31
00000000000229fc	movq	-0x10(%rbp), %rax
0000000000022a00	movq	%rax, -0x48(%rbp)
0000000000022a04	movq	-0x10(%rbp), %rax
0000000000022a08	movq	-0x90(%rbp), %rdi
0000000000022a0f	movq	%rax, -0xb8(%rbp)
0000000000022a16	callq	0x276c6 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_leftmostEv
0000000000022a1b	movq	-0xb8(%rbp), %rdi
0000000000022a22	cmpq	(%rax), %rdi
0000000000022a25	jne	0x22a70
0000000000022a2b	movq	-0x90(%rbp), %rdi
0000000000022a32	callq	0x276c6 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_leftmostEv
0000000000022a37	movq	(%rax), %rsi
0000000000022a3a	movq	-0x90(%rbp), %rdi
0000000000022a41	movq	%rsi, -0xc0(%rbp)
0000000000022a48	callq	0x276c6 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_leftmostEv
0000000000022a4d	movq	(%rax), %rdx
0000000000022a50	movq	-0x20(%rbp), %rcx
0000000000022a54	movq	-0x90(%rbp), %rdi
0000000000022a5b	movq	-0xc0(%rbp), %rsi
0000000000022a62	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022a67	movq	%rax, -0x8(%rbp)
0000000000022a6b	jmp	0x22c9b
0000000000022a70	leaq	-0x48(%rbp), %rdi
0000000000022a74	callq	0x275ca ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEmmEv
0000000000022a79	movq	(%rax), %rdi
0000000000022a7c	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022a81	movq	-0x20(%rbp), %rsi
0000000000022a85	leaq	-0x50(%rbp), %rdi
0000000000022a89	movq	%rax, -0xc8(%rbp)
0000000000022a90	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022a95	movq	-0x90(%rbp), %rdi
0000000000022a9c	movq	-0xc8(%rbp), %rsi
0000000000022aa3	movq	%rax, %rdx
0000000000022aa6	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022aab	testb	$0x1, %al
0000000000022aad	jne	0x22ab8
0000000000022ab3	jmp	0x22b0d
0000000000022ab8	movq	-0x48(%rbp), %rdi
0000000000022abc	callq	0x27732 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000022ac1	cmpq	$0x0, %rax
0000000000022ac5	jne	0x22aec
0000000000022acb	xorl	%eax, %eax
0000000000022acd	movl	%eax, %esi
0000000000022acf	movq	-0x48(%rbp), %rdx
0000000000022ad3	movq	-0x20(%rbp), %rcx
0000000000022ad7	movq	-0x90(%rbp), %rdi
0000000000022ade	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022ae3	movq	%rax, -0x8(%rbp)
0000000000022ae7	jmp	0x22c9b
0000000000022aec	movq	-0x10(%rbp), %rsi
0000000000022af0	movq	-0x10(%rbp), %rdx
0000000000022af4	movq	-0x20(%rbp), %rcx
0000000000022af8	movq	-0x90(%rbp), %rdi
0000000000022aff	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022b04	movq	%rax, -0x8(%rbp)
0000000000022b08	jmp	0x22c9b
0000000000022b0d	movq	-0x20(%rbp), %rsi
0000000000022b11	movq	-0x90(%rbp), %rdi
0000000000022b18	callq	0x276ea ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueERKS8_
0000000000022b1d	movq	%rax, -0x60(%rbp)
0000000000022b21	movb	%dl, -0x58(%rbp)
0000000000022b24	movq	-0x60(%rbp), %rax
0000000000022b28	movq	%rax, -0x8(%rbp)
0000000000022b2c	jmp	0x22c9b
0000000000022b31	movq	-0x10(%rbp), %rdi
0000000000022b35	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022b3a	movq	-0x20(%rbp), %rsi
0000000000022b3e	leaq	-0x68(%rbp), %rdi
0000000000022b42	movq	%rax, -0xd0(%rbp)
0000000000022b49	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022b4e	movq	-0x90(%rbp), %rdi
0000000000022b55	movq	-0xd0(%rbp), %rsi
0000000000022b5c	movq	%rax, %rdx
0000000000022b5f	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022b64	testb	$0x1, %al
0000000000022b66	jne	0x22b71
0000000000022b6c	jmp	0x22c93
0000000000022b71	movq	-0x10(%rbp), %rax
0000000000022b75	movq	%rax, -0x70(%rbp)
0000000000022b79	movq	-0x10(%rbp), %rax
0000000000022b7d	movq	-0x90(%rbp), %rdi
0000000000022b84	movq	%rax, -0xd8(%rbp)
0000000000022b8b	callq	0x276d8 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_rightmostEv
0000000000022b90	movq	-0xd8(%rbp), %rdi
0000000000022b97	cmpq	(%rax), %rdi
0000000000022b9a	jne	0x22bcc
0000000000022ba0	movq	-0x90(%rbp), %rdi
0000000000022ba7	callq	0x276d8 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_rightmostEv
0000000000022bac	xorl	%ecx, %ecx
0000000000022bae	movl	%ecx, %esi
0000000000022bb0	movq	(%rax), %rdx
0000000000022bb3	movq	-0x20(%rbp), %rcx
0000000000022bb7	movq	-0x90(%rbp), %rdi
0000000000022bbe	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022bc3	movq	%rax, -0x8(%rbp)
0000000000022bc7	jmp	0x22c9b
0000000000022bcc	movq	-0x20(%rbp), %rsi
0000000000022bd0	leaq	-0x78(%rbp), %rdi
0000000000022bd4	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022bd9	leaq	-0x70(%rbp), %rdi
0000000000022bdd	movq	%rax, -0xe0(%rbp)
0000000000022be4	callq	0x275d0 ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEppEv
0000000000022be9	movq	(%rax), %rdi
0000000000022bec	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022bf1	movq	-0x90(%rbp), %rdi
0000000000022bf8	movq	-0xe0(%rbp), %rsi
0000000000022bff	movq	%rax, %rdx
0000000000022c02	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022c07	testb	$0x1, %al
0000000000022c09	jne	0x22c14
0000000000022c0f	jmp	0x22c69
0000000000022c14	movq	-0x10(%rbp), %rdi
0000000000022c18	callq	0x27732 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000022c1d	cmpq	$0x0, %rax
0000000000022c21	jne	0x22c48
0000000000022c27	xorl	%eax, %eax
0000000000022c29	movl	%eax, %esi
0000000000022c2b	movq	-0x10(%rbp), %rdx
0000000000022c2f	movq	-0x20(%rbp), %rcx
0000000000022c33	movq	-0x90(%rbp), %rdi
0000000000022c3a	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022c3f	movq	%rax, -0x8(%rbp)
0000000000022c43	jmp	0x22c9b
0000000000022c48	movq	-0x70(%rbp), %rsi
0000000000022c4c	movq	-0x70(%rbp), %rdx
0000000000022c50	movq	-0x20(%rbp), %rcx
0000000000022c54	movq	-0x90(%rbp), %rdi
0000000000022c5b	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022c60	movq	%rax, -0x8(%rbp)
0000000000022c64	jmp	0x22c9b
0000000000022c69	movq	-0x20(%rbp), %rsi
0000000000022c6d	movq	-0x90(%rbp), %rdi
0000000000022c74	callq	0x276ea ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueERKS8_
0000000000022c79	movq	%rax, -0x88(%rbp)
0000000000022c80	movb	%dl, -0x80(%rbp)
0000000000022c83	movq	-0x88(%rbp), %rax
0000000000022c8a	movq	%rax, -0x8(%rbp)
0000000000022c8e	jmp	0x22c9b
0000000000022c93	movq	-0x10(%rbp), %rax
0000000000022c97	movq	%rax, -0x8(%rbp)
0000000000022c9b	movq	-0x8(%rbp), %rax
0000000000022c9f	addq	$0xe0, %rsp
0000000000022ca6	popq	%rbp
0000000000022ca7	retq
0000000000022ca8	nopl	(%rax,%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE4sizeEv:
0000000000022cb0	pushq	%rbp
0000000000022cb1	movq	%rsp, %rbp
0000000000022cb4	movq	%rdi, -0x8(%rbp)
0000000000022cb8	movq	-0x8(%rbp), %rdi
0000000000022cbc	movq	0x28(%rdi), %rax
0000000000022cc0	popq	%rbp
0000000000022cc1	retq
0000000000022cc2	nopw	%cs:(%rax,%rax)
0000000000022ccc	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base:
0000000000022cd0	pushq	%rbp
0000000000022cd1	movq	%rsp, %rbp
0000000000022cd4	subq	$0x10, %rsp
0000000000022cd8	movq	%rdi, -0x8(%rbp)
0000000000022cdc	movq	-0x8(%rbp), %rdi
0000000000022ce0	callq	0x2773e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_valueEPKSt18_Rb_tree_node_base
0000000000022ce5	leaq	-0x10(%rbp), %rdi
0000000000022ce9	movq	%rax, %rsi
0000000000022cec	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022cf1	addq	$0x10, %rsp
0000000000022cf5	popq	%rbp
0000000000022cf6	retq
0000000000022cf7	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_rightmostEv:
0000000000022d00	pushq	%rbp
0000000000022d01	movq	%rsp, %rbp
0000000000022d04	movq	%rdi, -0x8(%rbp)
0000000000022d08	movq	-0x8(%rbp), %rdi
0000000000022d0c	addq	$0x8, %rdi
0000000000022d10	addq	$0x18, %rdi
0000000000022d14	movq	%rdi, %rax
0000000000022d17	popq	%rbp
0000000000022d18	retq
0000000000022d19	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_:
0000000000022d20	pushq	%rbp
0000000000022d21	movq	%rsp, %rbp
0000000000022d24	subq	$0x60, %rsp
0000000000022d28	movq	%rdi, -0x10(%rbp)
0000000000022d2c	movq	%rsi, -0x18(%rbp)
0000000000022d30	movq	%rdx, -0x20(%rbp)
0000000000022d34	movq	%rcx, -0x28(%rbp)
0000000000022d38	movq	-0x10(%rbp), %rcx
0000000000022d3c	cmpq	$0x0, -0x18(%rbp)
0000000000022d41	movb	$0x1, %al
0000000000022d43	movq	%rcx, -0x40(%rbp)
0000000000022d47	movb	%al, -0x41(%rbp)
0000000000022d4a	jne	0x22da0
0000000000022d50	movq	-0x20(%rbp), %rax
0000000000022d54	movq	-0x40(%rbp), %rdi
0000000000022d58	movq	%rax, -0x50(%rbp)
0000000000022d5c	callq	0x27702 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv
0000000000022d61	movq	-0x50(%rbp), %rdi
0000000000022d65	cmpq	%rax, %rdi
0000000000022d68	movb	$0x1, %cl
0000000000022d6a	movb	%cl, -0x41(%rbp)
0000000000022d6d	je	0x22da0
0000000000022d73	movq	-0x28(%rbp), %rsi
0000000000022d77	leaq	-0x30(%rbp), %rdi
0000000000022d7b	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022d80	movq	-0x20(%rbp), %rdi
0000000000022d84	movq	%rax, -0x58(%rbp)
0000000000022d88	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022d8d	movq	-0x40(%rbp), %rdi
0000000000022d91	movq	-0x58(%rbp), %rsi
0000000000022d95	movq	%rax, %rdx
0000000000022d98	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022d9d	movb	%al, -0x41(%rbp)
0000000000022da0	movb	-0x41(%rbp), %al
0000000000022da3	andb	$0x1, %al
0000000000022da5	movb	%al, -0x29(%rbp)
0000000000022da8	movq	-0x28(%rbp), %rsi
0000000000022dac	movq	-0x40(%rbp), %rdi
0000000000022db0	callq	0x276de ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE14_M_create_nodeERKS8_
0000000000022db5	movq	%rax, -0x38(%rbp)
0000000000022db9	movb	-0x29(%rbp), %cl
0000000000022dbc	movq	-0x38(%rbp), %rax
0000000000022dc0	movq	-0x20(%rbp), %rdx
0000000000022dc4	movq	-0x40(%rbp), %rsi
0000000000022dc8	addq	$0x8, %rsi
0000000000022dcc	andb	$0x1, %cl
0000000000022dcf	movzbl	%cl, %edi
0000000000022dd2	movq	%rsi, -0x60(%rbp)
0000000000022dd6	movq	%rax, %rsi
0000000000022dd9	movq	-0x60(%rbp), %rcx
0000000000022ddd	callq	0x278a0 ## symbol stub for: __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
0000000000022de2	movq	-0x40(%rbp), %rax
0000000000022de6	movq	0x28(%rax), %rcx
0000000000022dea	addq	$0x1, %rcx
0000000000022dee	movq	%rcx, 0x28(%rax)
0000000000022df2	movq	-0x38(%rbp), %rsi
0000000000022df6	leaq	-0x8(%rbp), %rdi
0000000000022dfa	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
0000000000022dff	movq	-0x8(%rbp), %rax
0000000000022e03	addq	$0x60, %rsp
0000000000022e07	popq	%rbp
0000000000022e08	retq
0000000000022e09	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE16_M_insert_uniqueERKS8_:
0000000000022e10	pushq	%rbp
0000000000022e11	movq	%rsp, %rbp
0000000000022e14	subq	$0xa0, %rsp
0000000000022e1b	movq	%rdi, -0x18(%rbp)
0000000000022e1f	movq	%rsi, -0x20(%rbp)
0000000000022e23	movq	-0x18(%rbp), %rsi
0000000000022e27	movq	%rsi, %rdi
0000000000022e2a	movq	%rsi, -0x70(%rbp)
0000000000022e2e	callq	0x27720 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv
0000000000022e33	movq	%rax, -0x28(%rbp)
0000000000022e37	movq	-0x70(%rbp), %rdi
0000000000022e3b	callq	0x27702 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv
0000000000022e40	movq	%rax, -0x30(%rbp)
0000000000022e44	movb	$0x1, -0x31(%rbp)
0000000000022e48	cmpq	$0x0, -0x28(%rbp)
0000000000022e4d	je	0x22ec6
0000000000022e53	movq	-0x28(%rbp), %rax
0000000000022e57	movq	%rax, -0x30(%rbp)
0000000000022e5b	movq	-0x20(%rbp), %rsi
0000000000022e5f	leaq	-0x38(%rbp), %rdi
0000000000022e63	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022e68	movq	-0x28(%rbp), %rdi
0000000000022e6c	movq	%rax, -0x78(%rbp)
0000000000022e70	callq	0x27708 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E
0000000000022e75	movq	-0x70(%rbp), %rdi
0000000000022e79	movq	-0x78(%rbp), %rsi
0000000000022e7d	movq	%rax, %rdx
0000000000022e80	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022e85	andb	$0x1, %al
0000000000022e87	movb	%al, -0x31(%rbp)
0000000000022e8a	testb	$0x1, -0x31(%rbp)
0000000000022e8e	je	0x22ea9
0000000000022e94	movq	-0x28(%rbp), %rax
0000000000022e98	movq	%rax, %rdi
0000000000022e9b	callq	0x2771a ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base
0000000000022ea0	movq	%rax, -0x80(%rbp)
0000000000022ea4	jmp	0x22eb9
0000000000022ea9	movq	-0x28(%rbp), %rax
0000000000022ead	movq	%rax, %rdi
0000000000022eb0	callq	0x27732 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000022eb5	movq	%rax, -0x80(%rbp)
0000000000022eb9	movq	-0x80(%rbp), %rax
0000000000022ebd	movq	%rax, -0x28(%rbp)
0000000000022ec1	jmp	0x22e48
0000000000022ec6	movq	-0x30(%rbp), %rsi
0000000000022eca	leaq	-0x40(%rbp), %rdi
0000000000022ece	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
0000000000022ed3	testb	$0x1, -0x31(%rbp)
0000000000022ed7	je	0x22f60
0000000000022edd	movq	-0x70(%rbp), %rdi
0000000000022ee1	callq	0x276fc ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE5beginEv
0000000000022ee6	movq	%rax, -0x48(%rbp)
0000000000022eea	leaq	-0x40(%rbp), %rdi
0000000000022eee	leaq	-0x48(%rbp), %rsi
0000000000022ef2	callq	0x273f0 ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_
0000000000022ef7	testb	$0x1, %al
0000000000022ef9	jne	0x22f04
0000000000022eff	jmp	0x22f4b
0000000000022f04	movq	-0x28(%rbp), %rax
0000000000022f08	movq	-0x30(%rbp), %rcx
0000000000022f0c	movq	-0x20(%rbp), %rdx
0000000000022f10	movq	-0x70(%rbp), %rdi
0000000000022f14	movq	%rax, %rsi
0000000000022f17	movq	%rdx, -0x88(%rbp)
0000000000022f1e	movq	%rcx, %rdx
0000000000022f21	movq	-0x88(%rbp), %rcx
0000000000022f28	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022f2d	movq	%rax, -0x50(%rbp)
0000000000022f31	movb	$0x1, -0x51(%rbp)
0000000000022f35	leaq	-0x10(%rbp), %rdi
0000000000022f39	leaq	-0x50(%rbp), %rsi
0000000000022f3d	leaq	-0x51(%rbp), %rdx
0000000000022f41	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC1ERKS9_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&, bool const&)
0000000000022f46	jmp	0x22ff9
0000000000022f4b	leaq	-0x40(%rbp), %rdi
0000000000022f4f	callq	0x275ca ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEmmEv
0000000000022f54	movq	%rax, -0x90(%rbp)
0000000000022f5b	jmp	0x22f60
0000000000022f60	movq	-0x40(%rbp), %rdi
0000000000022f64	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000022f69	movq	-0x20(%rbp), %rsi
0000000000022f6d	leaq	-0x58(%rbp), %rdi
0000000000022f71	movq	%rax, -0x98(%rbp)
0000000000022f78	callq	0x273c6 ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEclERKS8_
0000000000022f7d	movq	-0x70(%rbp), %rdi
0000000000022f81	movq	-0x98(%rbp), %rsi
0000000000022f88	movq	%rax, %rdx
0000000000022f8b	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000022f90	testb	$0x1, %al
0000000000022f92	jne	0x22f9d
0000000000022f98	jmp	0x22fe4
0000000000022f9d	movq	-0x28(%rbp), %rax
0000000000022fa1	movq	-0x30(%rbp), %rcx
0000000000022fa5	movq	-0x20(%rbp), %rdx
0000000000022fa9	movq	-0x70(%rbp), %rdi
0000000000022fad	movq	%rax, %rsi
0000000000022fb0	movq	%rdx, -0xa0(%rbp)
0000000000022fb7	movq	%rcx, %rdx
0000000000022fba	movq	-0xa0(%rbp), %rcx
0000000000022fc1	callq	0x27744 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE9_M_insertEPSt18_Rb_tree_node_baseSG_RKS8_
0000000000022fc6	movq	%rax, -0x60(%rbp)
0000000000022fca	movb	$0x1, -0x61(%rbp)
0000000000022fce	leaq	-0x10(%rbp), %rdi
0000000000022fd2	leaq	-0x60(%rbp), %rsi
0000000000022fd6	leaq	-0x61(%rbp), %rdx
0000000000022fda	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC1ERKS9_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&, bool const&)
0000000000022fdf	jmp	0x22ff9
0000000000022fe4	movb	$0x0, -0x62(%rbp)
0000000000022fe8	leaq	-0x10(%rbp), %rdi
0000000000022fec	leaq	-0x40(%rbp), %rsi
0000000000022ff0	leaq	-0x62(%rbp), %rdx
0000000000022ff4	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC1ERKS9_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&, bool const&)
0000000000022ff9	movq	-0x10(%rbp), %rax
0000000000022ffd	movb	-0x8(%rbp), %dl
0000000000023000	addq	$0xa0, %rsp
0000000000023007	popq	%rbp
0000000000023008	retq
0000000000023009	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_leftmostEv:
0000000000023010	pushq	%rbp
0000000000023011	movq	%rsp, %rbp
0000000000023014	movq	%rdi, -0x8(%rbp)
0000000000023018	movq	-0x8(%rbp), %rdi
000000000002301c	addq	$0x8, %rdi
0000000000023020	addq	$0x10, %rdi
0000000000023024	movq	%rdi, %rax
0000000000023027	popq	%rbp
0000000000023028	retq
0000000000023029	nopl	(%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEmmEv:
0000000000023030	pushq	%rbp
0000000000023031	movq	%rsp, %rbp
0000000000023034	subq	$0x10, %rsp
0000000000023038	movq	%rdi, -0x8(%rbp)
000000000002303c	movq	-0x8(%rbp), %rdi
0000000000023040	movq	(%rdi), %rax
0000000000023043	movq	%rdi, -0x10(%rbp)
0000000000023047	movq	%rax, %rdi
000000000002304a	callq	0x2781c ## symbol stub for: __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
000000000002304f	movq	-0x10(%rbp), %rdi
0000000000023053	movq	%rax, (%rdi)
0000000000023056	movq	%rdi, %rax
0000000000023059	addq	$0x10, %rsp
000000000002305d	popq	%rbp
000000000002305e	retq
000000000002305f	nop
__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEppEv:
0000000000023060	pushq	%rbp
0000000000023061	movq	%rsp, %rbp
0000000000023064	subq	$0x10, %rsp
0000000000023068	movq	%rdi, -0x8(%rbp)
000000000002306c	movq	-0x8(%rbp), %rdi
0000000000023070	movq	(%rdi), %rax
0000000000023073	movq	%rdi, -0x10(%rbp)
0000000000023077	movq	%rax, %rdi
000000000002307a	callq	0x27822 ## symbol stub for: __ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
000000000002307f	movq	-0x10(%rbp), %rdi
0000000000023083	movq	%rax, (%rdi)
0000000000023086	movq	%rdi, %rax
0000000000023089	addq	$0x10, %rsp
000000000002308d	popq	%rbp
000000000002308e	retq
000000000002308f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_valueEPKSt18_Rb_tree_node_base:
0000000000023090	pushq	%rbp
0000000000023091	movq	%rsp, %rbp
0000000000023094	movq	%rdi, -0x8(%rbp)
0000000000023098	movq	-0x8(%rbp), %rdi
000000000002309c	addq	$0x20, %rdi
00000000000230a0	movq	%rdi, %rax
00000000000230a3	popq	%rbp
00000000000230a4	retq
00000000000230a5	nopw	%cs:(%rax,%rax)
00000000000230af	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE14_M_create_nodeERKS8_:
00000000000230b0	pushq	%rbp
00000000000230b1	movq	%rsp, %rbp
00000000000230b4	subq	$0x50, %rsp
00000000000230b8	movq	%rdi, -0x8(%rbp)
00000000000230bc	movq	%rsi, -0x10(%rbp)
00000000000230c0	movq	-0x8(%rbp), %rsi
00000000000230c4	movq	%rsi, %rdi
00000000000230c7	movq	%rsi, -0x38(%rbp)
00000000000230cb	callq	0x276c0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_get_nodeEv
00000000000230d0	movq	%rax, -0x18(%rbp)
00000000000230d4	leaq	-0x20(%rbp), %rdi
00000000000230d8	movq	-0x38(%rbp), %rsi
00000000000230dc	callq	0x27462 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE13get_allocatorEv
00000000000230e1	jmp	0x230e6
00000000000230e6	movq	-0x18(%rbp), %rax
00000000000230ea	addq	$0x20, %rax
00000000000230ee	movq	-0x10(%rbp), %rdx
00000000000230f2	leaq	-0x20(%rbp), %rdi
00000000000230f6	movq	%rax, %rsi
00000000000230f9	callq	0x272b2 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEE9constructEPS9_RKS9_
00000000000230fe	jmp	0x23103
0000000000023103	leaq	-0x20(%rbp), %rdi
0000000000023107	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
000000000002310c	jmp	0x23172
0000000000023111	movl	%edx, %ecx
0000000000023113	movq	%rax, -0x28(%rbp)
0000000000023117	movl	%ecx, -0x2c(%rbp)
000000000002311a	jmp	0x23131
000000000002311f	movl	%edx, %ecx
0000000000023121	movq	%rax, -0x28(%rbp)
0000000000023125	movl	%ecx, -0x2c(%rbp)
0000000000023128	leaq	-0x20(%rbp), %rdi
000000000002312c	callq	__ZNSaISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEED1Ev ## std::allocator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::~allocator()
0000000000023131	movq	-0x28(%rbp), %rdi
0000000000023135	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
000000000002313a	movq	-0x18(%rbp), %rsi
000000000002313e	movq	-0x38(%rbp), %rdi
0000000000023142	movq	%rax, -0x40(%rbp)
0000000000023146	callq	0x276cc ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E
000000000002314b	jmp	0x23150
0000000000023150	callq	0x2795a ## symbol stub for: ___cxa_rethrow
0000000000023155	jmp	0x23193
000000000002315a	movl	%edx, %ecx
000000000002315c	movq	%rax, -0x28(%rbp)
0000000000023160	movl	%ecx, -0x2c(%rbp)
0000000000023163	callq	0x2794e ## symbol stub for: ___cxa_end_catch
0000000000023168	jmp	0x2316d
000000000002316d	jmp	0x2317c
0000000000023172	movq	-0x18(%rbp), %rax
0000000000023176	addq	$0x50, %rsp
000000000002317a	popq	%rbp
000000000002317b	retq
000000000002317c	movq	-0x28(%rbp), %rdi
0000000000023180	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000023185	ud2
0000000000023187	movq	%rax, %rdi
000000000002318a	movq	%rdx, -0x48(%rbp)
000000000002318e	callq	___clang_call_terminate
0000000000023193	ud2
0000000000023195	nopw	%cs:(%rax,%rax)
000000000002319f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE11_M_get_nodeEv:
00000000000231a0	pushq	%rbp
00000000000231a1	movq	%rsp, %rbp
00000000000231a4	subq	$0x10, %rsp
00000000000231a8	xorl	%eax, %eax
00000000000231aa	movl	%eax, %edx
00000000000231ac	movq	%rdi, -0x8(%rbp)
00000000000231b0	movq	-0x8(%rbp), %rdi
00000000000231b4	movl	$0x1, %esi
00000000000231b9	callq	0x2729a ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE8allocateEmPKv
00000000000231be	addq	$0x10, %rsp
00000000000231c2	popq	%rbp
00000000000231c3	retq
00000000000231c4	nopw	%cs:(%rax,%rax)
00000000000231ce	nop
__ZN9__gnu_cxx13new_allocatorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEE9constructEPS9_RKS9_:
00000000000231d0	pushq	%rbp
00000000000231d1	movq	%rsp, %rbp
00000000000231d4	movq	%rdi, -0x8(%rbp)
00000000000231d8	movq	%rsi, -0x10(%rbp)
00000000000231dc	movq	%rdx, -0x18(%rbp)
00000000000231e0	movq	-0x10(%rbp), %rdx
00000000000231e4	movq	-0x18(%rbp), %rsi
00000000000231e8	movq	(%rsi), %rdi
00000000000231eb	movq	%rdi, (%rdx)
00000000000231ee	movq	0x8(%rsi), %rsi
00000000000231f2	movq	%rsi, 0x8(%rdx)
00000000000231f6	popq	%rbp
00000000000231f7	retq
00000000000231f8	nopl	(%rax,%rax)
___clang_call_terminate:
0000000000023200	pushq	%rax
0000000000023201	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
0000000000023206	movq	%rax, (%rsp)
000000000002320a	callq	0x27912 ## symbol stub for: __ZSt9terminatev
000000000002320f	nop
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE8allocateEmPKv:
0000000000023210	pushq	%rbp
0000000000023211	movq	%rsp, %rbp
0000000000023214	subq	$0x20, %rsp
0000000000023218	movq	%rdi, -0x8(%rbp)
000000000002321c	movq	%rsi, -0x10(%rbp)
0000000000023220	movq	%rdx, -0x18(%rbp)
0000000000023224	movq	-0x8(%rbp), %rdi
0000000000023228	movq	-0x10(%rbp), %rdx
000000000002322c	movq	%rdx, -0x20(%rbp)
0000000000023230	callq	0x2736c ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE8max_sizeEv
0000000000023235	movq	-0x20(%rbp), %rdx
0000000000023239	cmpq	%rax, %rdx
000000000002323c	jbe	0x23247
0000000000023242	callq	0x27816 ## symbol stub for: __ZSt17__throw_bad_allocv
0000000000023247	imulq	$0x30, -0x10(%rbp), %rdi
000000000002324c	callq	0x27924 ## symbol stub for: __Znwm
0000000000023251	addq	$0x20, %rsp
0000000000023255	popq	%rbp
0000000000023256	retq
0000000000023257	nopw	(%rax,%rax)
__ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEE8max_sizeEv:
0000000000023260	pushq	%rbp
0000000000023261	movq	%rsp, %rbp
0000000000023264	movq	%rdi, -0x8(%rbp)
0000000000023268	movabsq	$0x555555555555555, %rax
0000000000023272	popq	%rbp
0000000000023273	retq
0000000000023274	nopw	%cs:(%rax,%rax)
000000000002327e	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE5beginEv:
0000000000023280	pushq	%rbp
0000000000023281	movq	%rsp, %rbp
0000000000023284	subq	$0x20, %rsp
0000000000023288	movq	%rdi, -0x10(%rbp)
000000000002328c	movq	-0x10(%rbp), %rdi
0000000000023290	movq	0x18(%rdi), %rdi
0000000000023294	leaq	-0x8(%rbp), %rax
0000000000023298	movq	%rdi, -0x18(%rbp)
000000000002329c	movq	%rax, %rdi
000000000002329f	movq	-0x18(%rbp), %rsi
00000000000232a3	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >*)
00000000000232a8	movq	-0x8(%rbp), %rax
00000000000232ac	addq	$0x20, %rsp
00000000000232b0	popq	%rbp
00000000000232b1	retq
00000000000232b2	nopw	%cs:(%rax,%rax)
00000000000232bc	nopl	(%rax)
__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC1ERKS9_RKb:
00000000000232c0	pushq	%rbp
00000000000232c1	movq	%rsp, %rbp
00000000000232c4	subq	$0x20, %rsp
00000000000232c8	movq	%rdi, -0x8(%rbp)
00000000000232cc	movq	%rsi, -0x10(%rbp)
00000000000232d0	movq	%rdx, -0x18(%rbp)
00000000000232d4	movq	-0x8(%rbp), %rdi
00000000000232d8	movq	-0x10(%rbp), %rsi
00000000000232dc	movq	-0x18(%rbp), %rdx
00000000000232e0	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC2ERKS9_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const&, bool const&)
00000000000232e5	addq	$0x20, %rsp
00000000000232e9	popq	%rbp
00000000000232ea	retq
00000000000232eb	nopl	(%rax,%rax)
__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiPFvP10GameObjectP15GJBaseGameLayerEEEbEC2ERKS9_RKb:
00000000000232f0	pushq	%rbp
00000000000232f1	movq	%rsp, %rbp
00000000000232f4	movq	%rdi, -0x8(%rbp)
00000000000232f8	movq	%rsi, -0x10(%rbp)
00000000000232fc	movq	%rdx, -0x18(%rbp)
0000000000023300	movq	-0x8(%rbp), %rdx
0000000000023304	movq	-0x10(%rbp), %rsi
0000000000023308	movq	(%rsi), %rsi
000000000002330b	movq	%rsi, (%rdx)
000000000002330e	movq	-0x18(%rbp), %rsi
0000000000023312	movb	(%rsi), %al
0000000000023314	andb	$0x1, %al
0000000000023316	movb	%al, 0x8(%rdx)
0000000000023319	popq	%rbp
000000000002331a	retq
000000000002331b	nopl	(%rax,%rax)
__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC2ERS0_RKS6_:
0000000000023320	pushq	%rbp
0000000000023321	movq	%rsp, %rbp
0000000000023324	movq	%rdi, -0x8(%rbp)
0000000000023328	movq	%rsi, -0x10(%rbp)
000000000002332c	movq	%rdx, -0x18(%rbp)
0000000000023330	movq	-0x8(%rbp), %rdx
0000000000023334	movq	-0x10(%rbp), %rsi
0000000000023338	movl	(%rsi), %eax
000000000002333a	movl	%eax, (%rdx)
000000000002333c	movq	-0x18(%rbp), %rsi
0000000000023340	movq	(%rsi), %rsi
0000000000023343	movq	%rsi, 0x8(%rdx)
0000000000023347	popq	%rbp
0000000000023348	retq
0000000000023349	nopl	(%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE11lower_boundERS7_:
0000000000023350	pushq	%rbp
0000000000023351	movq	%rsp, %rbp
0000000000023354	subq	$0x20, %rsp
0000000000023358	movq	%rdi, -0x10(%rbp)
000000000002335c	movq	%rsi, -0x18(%rbp)
0000000000023360	movq	-0x10(%rbp), %rdi
0000000000023364	movq	-0x18(%rbp), %rsi
0000000000023368	callq	0x2775c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11lower_boundERS1_
000000000002336d	movq	%rax, -0x8(%rbp)
0000000000023371	movq	-0x8(%rbp), %rax
0000000000023375	addq	$0x20, %rsp
0000000000023379	popq	%rbp
000000000002337a	retq
000000000002337b	nopl	(%rax,%rax)
__ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEeqERKS7_:
0000000000023380	pushq	%rbp
0000000000023381	movq	%rsp, %rbp
0000000000023384	movq	%rdi, -0x8(%rbp)
0000000000023388	movq	%rsi, -0x10(%rbp)
000000000002338c	movq	-0x8(%rbp), %rsi
0000000000023390	movq	(%rsi), %rsi
0000000000023393	movq	-0x10(%rbp), %rdi
0000000000023397	cmpq	(%rdi), %rsi
000000000002339a	sete	%al
000000000002339d	andb	$0x1, %al
000000000002339f	movzbl	%al, %eax
00000000000233a2	popq	%rbp
00000000000233a3	retq
00000000000233a4	nopw	%cs:(%rax,%rax)
00000000000233ae	nop
__ZNKSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE8key_compEv:
00000000000233b0	pushq	%rbp
00000000000233b1	movq	%rsp, %rbp
00000000000233b4	subq	$0x20, %rsp
00000000000233b8	movq	%rdi, -0x10(%rbp)
00000000000233bc	movq	-0x10(%rbp), %rdi
00000000000233c0	callq	0x274a4 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8key_compEv
00000000000233c5	addq	$0x20, %rsp
00000000000233c9	popq	%rbp
00000000000233ca	retq
00000000000233cb	nopl	(%rax,%rax)
__ZNSt3mapIiSt6vectorISt4pairIiiESaIS2_EESt4lessIiESaIS1_IKiS4_EEE6insertESt17_Rb_tree_iteratorIS8_ERKS8_:
00000000000233d0	pushq	%rbp
00000000000233d1	movq	%rsp, %rbp
00000000000233d4	subq	$0x30, %rsp
00000000000233d8	movq	%rsi, -0x10(%rbp)
00000000000233dc	movq	%rdi, -0x18(%rbp)
00000000000233e0	movq	%rdx, -0x20(%rbp)
00000000000233e4	movq	-0x18(%rbp), %rdi
00000000000233e8	movq	-0x10(%rbp), %rdx
00000000000233ec	movq	%rdx, -0x28(%rbp)
00000000000233f0	movq	-0x20(%rbp), %rdx
00000000000233f4	movq	-0x28(%rbp), %rsi
00000000000233f8	callq	0x2777a ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueESt17_Rb_tree_iteratorIS6_ERKS6_
00000000000233fd	movq	%rax, -0x8(%rbp)
0000000000023401	movq	-0x8(%rbp), %rax
0000000000023405	addq	$0x30, %rsp
0000000000023409	popq	%rbp
000000000002340a	retq
000000000002340b	nopl	(%rax,%rax)
__ZNSaISt4pairIiiEEC1Ev:
0000000000023410	pushq	%rbp
0000000000023411	movq	%rsp, %rbp
0000000000023414	subq	$0x10, %rsp
0000000000023418	movq	%rdi, -0x8(%rbp)
000000000002341c	movq	-0x8(%rbp), %rdi
0000000000023420	callq	__ZNSaISt4pairIiiEEC2Ev ## std::allocator<std::pair<int, int> >::allocator()
0000000000023425	addq	$0x10, %rsp
0000000000023429	popq	%rbp
000000000002342a	retq
000000000002342b	nopl	(%rax,%rax)
__ZNSt6vectorISt4pairIiiESaIS1_EEC1ERKS2_:
0000000000023430	pushq	%rbp
0000000000023431	movq	%rsp, %rbp
0000000000023434	subq	$0x10, %rsp
0000000000023438	movq	%rdi, -0x8(%rbp)
000000000002343c	movq	%rsi, -0x10(%rbp)
0000000000023440	movq	-0x8(%rbp), %rdi
0000000000023444	movq	-0x10(%rbp), %rsi
0000000000023448	callq	__ZNSt6vectorISt4pairIiiESaIS1_EEC2ERKS2_ ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector(std::allocator<std::pair<int, int> > const&)
000000000002344d	addq	$0x10, %rsp
0000000000023451	popq	%rbp
0000000000023452	retq
0000000000023453	nopw	%cs:(%rax,%rax)
000000000002345d	nopl	(%rax)
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC1ERS0_RKS4_:
0000000000023460	pushq	%rbp
0000000000023461	movq	%rsp, %rbp
0000000000023464	subq	$0x20, %rsp
0000000000023468	movq	%rdi, -0x8(%rbp)
000000000002346c	movq	%rsi, -0x10(%rbp)
0000000000023470	movq	%rdx, -0x18(%rbp)
0000000000023474	movq	-0x8(%rbp), %rdi
0000000000023478	movq	-0x10(%rbp), %rsi
000000000002347c	movq	-0x18(%rbp), %rdx
0000000000023480	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC2ERS0_RKS4_ ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::pair(int const&, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&)
0000000000023485	addq	$0x20, %rsp
0000000000023489	popq	%rbp
000000000002348a	retq
000000000002348b	nopl	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11lower_boundERS1_:
0000000000023490	pushq	%rbp
0000000000023491	movq	%rsp, %rbp
0000000000023494	subq	$0x30, %rsp
0000000000023498	movq	%rdi, -0x10(%rbp)
000000000002349c	movq	%rsi, -0x18(%rbp)
00000000000234a0	movq	-0x10(%rbp), %rsi
00000000000234a4	movq	%rsi, %rdi
00000000000234a7	movq	%rsi, -0x30(%rbp)
00000000000234ab	callq	0x277a4 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_beginEv
00000000000234b0	movq	%rax, -0x20(%rbp)
00000000000234b4	movq	-0x30(%rbp), %rdi
00000000000234b8	callq	0x2778c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_M_endEv
00000000000234bd	movq	%rax, -0x28(%rbp)
00000000000234c1	cmpq	$0x0, -0x20(%rbp)
00000000000234c6	je	0x2351f
00000000000234cc	movq	-0x20(%rbp), %rdi
00000000000234d0	callq	0x27792 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E
00000000000234d5	movq	-0x18(%rbp), %rdx
00000000000234d9	movq	-0x30(%rbp), %rdi
00000000000234dd	movq	%rax, %rsi
00000000000234e0	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
00000000000234e5	testb	$0x1, %al
00000000000234e7	jne	0x2350a
00000000000234ed	movq	-0x20(%rbp), %rax
00000000000234f1	movq	%rax, -0x28(%rbp)
00000000000234f5	movq	-0x20(%rbp), %rax
00000000000234f9	movq	%rax, %rdi
00000000000234fc	callq	0x2779e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base
0000000000023501	movq	%rax, -0x20(%rbp)
0000000000023505	jmp	0x2351a
000000000002350a	movq	-0x20(%rbp), %rax
000000000002350e	movq	%rax, %rdi
0000000000023511	callq	0x277b0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000023516	movq	%rax, -0x20(%rbp)
000000000002351a	jmp	0x234c1
000000000002351f	movq	-0x28(%rbp), %rsi
0000000000023523	leaq	-0x8(%rbp), %rdi
0000000000023527	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
000000000002352c	movq	-0x8(%rbp), %rax
0000000000023530	addq	$0x30, %rsp
0000000000023534	popq	%rbp
0000000000023535	retq
0000000000023536	nopw	%cs:(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_M_endEv:
0000000000023540	pushq	%rbp
0000000000023541	movq	%rsp, %rbp
0000000000023544	movq	%rdi, -0x8(%rbp)
0000000000023548	movq	-0x8(%rbp), %rdi
000000000002354c	addq	$0x8, %rdi
0000000000023550	movq	%rdi, %rax
0000000000023553	popq	%rbp
0000000000023554	retq
0000000000023555	nopw	%cs:(%rax,%rax)
000000000002355f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E:
0000000000023560	pushq	%rbp
0000000000023561	movq	%rsp, %rbp
0000000000023564	subq	$0x10, %rsp
0000000000023568	movq	%rdi, -0x8(%rbp)
000000000002356c	movq	-0x8(%rbp), %rdi
0000000000023570	callq	0x277b6 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_valueEPKSt13_Rb_tree_nodeIS6_E
0000000000023575	leaq	-0x10(%rbp), %rdi
0000000000023579	movq	%rax, %rsi
000000000002357c	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023581	addq	$0x10, %rsp
0000000000023585	popq	%rbp
0000000000023586	retq
0000000000023587	nopw	(%rax,%rax)
__ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_:
0000000000023590	pushq	%rbp
0000000000023591	movq	%rsp, %rbp
0000000000023594	movq	%rdi, -0x8(%rbp)
0000000000023598	movq	%rsi, -0x10(%rbp)
000000000002359c	movq	-0x10(%rbp), %rax
00000000000235a0	popq	%rbp
00000000000235a1	retq
00000000000235a2	nopw	%cs:(%rax,%rax)
00000000000235ac	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_valueEPKSt13_Rb_tree_nodeIS6_E:
00000000000235b0	pushq	%rbp
00000000000235b1	movq	%rsp, %rbp
00000000000235b4	movq	%rdi, -0x8(%rbp)
00000000000235b8	movq	-0x8(%rbp), %rdi
00000000000235bc	addq	$0x20, %rdi
00000000000235c0	movq	%rdi, %rax
00000000000235c3	popq	%rbp
00000000000235c4	retq
00000000000235c5	nopw	%cs:(%rax,%rax)
00000000000235cf	nop
__ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8key_compEv:
00000000000235d0	pushq	%rbp
00000000000235d1	movq	%rsp, %rbp
00000000000235d4	movq	%rdi, -0x10(%rbp)
00000000000235d8	popq	%rbp
00000000000235d9	retq
00000000000235da	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueESt17_Rb_tree_iteratorIS6_ERKS6_:
00000000000235e0	pushq	%rbp
00000000000235e1	movq	%rsp, %rbp
00000000000235e4	subq	$0xe0, %rsp
00000000000235eb	movq	%rsi, -0x10(%rbp)
00000000000235ef	movq	%rdi, -0x18(%rbp)
00000000000235f3	movq	%rdx, -0x20(%rbp)
00000000000235f7	movq	-0x18(%rbp), %rdx
00000000000235fb	movq	-0x10(%rbp), %rsi
00000000000235ff	movq	%rdx, %rdi
0000000000023602	movq	%rdx, -0x90(%rbp)
0000000000023609	movq	%rsi, -0x98(%rbp)
0000000000023610	callq	0x2778c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_M_endEv
0000000000023615	movq	-0x98(%rbp), %rdx
000000000002361c	cmpq	%rax, %rdx
000000000002361f	jne	0x236ec
0000000000023625	movq	-0x90(%rbp), %rdi
000000000002362c	callq	0x2749e ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE4sizeEv
0000000000023631	xorl	%ecx, %ecx
0000000000023633	movb	%cl, %dl
0000000000023635	cmpq	$0x0, %rax
0000000000023639	movb	%dl, -0x99(%rbp)
000000000002363f	jbe	0x23689
0000000000023645	movq	-0x90(%rbp), %rdi
000000000002364c	callq	0x27762 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE12_M_rightmostEv
0000000000023651	movq	(%rax), %rdi
0000000000023654	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000023659	movq	-0x20(%rbp), %rsi
000000000002365d	leaq	-0x28(%rbp), %rdi
0000000000023661	movq	%rax, -0xa8(%rbp)
0000000000023668	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
000000000002366d	movq	-0x90(%rbp), %rdi
0000000000023674	movq	-0xa8(%rbp), %rsi
000000000002367b	movq	%rax, %rdx
000000000002367e	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023683	movb	%al, -0x99(%rbp)
0000000000023689	movb	-0x99(%rbp), %al
000000000002368f	testb	$0x1, %al
0000000000023691	jne	0x2369c
0000000000023697	jmp	0x236c8
000000000002369c	movq	-0x90(%rbp), %rdi
00000000000236a3	callq	0x27762 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE12_M_rightmostEv
00000000000236a8	xorl	%ecx, %ecx
00000000000236aa	movl	%ecx, %esi
00000000000236ac	movq	(%rax), %rdx
00000000000236af	movq	-0x20(%rbp), %rcx
00000000000236b3	movq	-0x90(%rbp), %rdi
00000000000236ba	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
00000000000236bf	movq	%rax, -0x8(%rbp)
00000000000236c3	jmp	0x239cb
00000000000236c8	movq	-0x20(%rbp), %rsi
00000000000236cc	movq	-0x90(%rbp), %rdi
00000000000236d3	callq	0x27774 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueERKS6_
00000000000236d8	movq	%rax, -0x38(%rbp)
00000000000236dc	movb	%dl, -0x30(%rbp)
00000000000236df	movq	-0x38(%rbp), %rax
00000000000236e3	movq	%rax, -0x8(%rbp)
00000000000236e7	jmp	0x239cb
00000000000236ec	movq	-0x20(%rbp), %rsi
00000000000236f0	leaq	-0x40(%rbp), %rdi
00000000000236f4	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
00000000000236f9	movq	-0x10(%rbp), %rdi
00000000000236fd	movq	%rax, -0xb0(%rbp)
0000000000023704	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000023709	movq	-0x90(%rbp), %rdi
0000000000023710	movq	-0xb0(%rbp), %rsi
0000000000023717	movq	%rax, %rdx
000000000002371a	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
000000000002371f	testb	$0x1, %al
0000000000023721	jne	0x2372c
0000000000023727	jmp	0x23861
000000000002372c	movq	-0x10(%rbp), %rax
0000000000023730	movq	%rax, -0x48(%rbp)
0000000000023734	movq	-0x10(%rbp), %rax
0000000000023738	movq	-0x90(%rbp), %rdi
000000000002373f	movq	%rax, -0xb8(%rbp)
0000000000023746	callq	0x27750 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_leftmostEv
000000000002374b	movq	-0xb8(%rbp), %rdi
0000000000023752	cmpq	(%rax), %rdi
0000000000023755	jne	0x237a0
000000000002375b	movq	-0x90(%rbp), %rdi
0000000000023762	callq	0x27750 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_leftmostEv
0000000000023767	movq	(%rax), %rsi
000000000002376a	movq	-0x90(%rbp), %rdi
0000000000023771	movq	%rsi, -0xc0(%rbp)
0000000000023778	callq	0x27750 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_leftmostEv
000000000002377d	movq	(%rax), %rdx
0000000000023780	movq	-0x20(%rbp), %rcx
0000000000023784	movq	-0x90(%rbp), %rdi
000000000002378b	movq	-0xc0(%rbp), %rsi
0000000000023792	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023797	movq	%rax, -0x8(%rbp)
000000000002379b	jmp	0x239cb
00000000000237a0	leaq	-0x48(%rbp), %rdi
00000000000237a4	callq	0x275d6 ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEmmEv
00000000000237a9	movq	(%rax), %rdi
00000000000237ac	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
00000000000237b1	movq	-0x20(%rbp), %rsi
00000000000237b5	leaq	-0x50(%rbp), %rdi
00000000000237b9	movq	%rax, -0xc8(%rbp)
00000000000237c0	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
00000000000237c5	movq	-0x90(%rbp), %rdi
00000000000237cc	movq	-0xc8(%rbp), %rsi
00000000000237d3	movq	%rax, %rdx
00000000000237d6	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
00000000000237db	testb	$0x1, %al
00000000000237dd	jne	0x237e8
00000000000237e3	jmp	0x2383d
00000000000237e8	movq	-0x48(%rbp), %rdi
00000000000237ec	callq	0x277b0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base
00000000000237f1	cmpq	$0x0, %rax
00000000000237f5	jne	0x2381c
00000000000237fb	xorl	%eax, %eax
00000000000237fd	movl	%eax, %esi
00000000000237ff	movq	-0x48(%rbp), %rdx
0000000000023803	movq	-0x20(%rbp), %rcx
0000000000023807	movq	-0x90(%rbp), %rdi
000000000002380e	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023813	movq	%rax, -0x8(%rbp)
0000000000023817	jmp	0x239cb
000000000002381c	movq	-0x10(%rbp), %rsi
0000000000023820	movq	-0x10(%rbp), %rdx
0000000000023824	movq	-0x20(%rbp), %rcx
0000000000023828	movq	-0x90(%rbp), %rdi
000000000002382f	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023834	movq	%rax, -0x8(%rbp)
0000000000023838	jmp	0x239cb
000000000002383d	movq	-0x20(%rbp), %rsi
0000000000023841	movq	-0x90(%rbp), %rdi
0000000000023848	callq	0x27774 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueERKS6_
000000000002384d	movq	%rax, -0x60(%rbp)
0000000000023851	movb	%dl, -0x58(%rbp)
0000000000023854	movq	-0x60(%rbp), %rax
0000000000023858	movq	%rax, -0x8(%rbp)
000000000002385c	jmp	0x239cb
0000000000023861	movq	-0x10(%rbp), %rdi
0000000000023865	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
000000000002386a	movq	-0x20(%rbp), %rsi
000000000002386e	leaq	-0x68(%rbp), %rdi
0000000000023872	movq	%rax, -0xd0(%rbp)
0000000000023879	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
000000000002387e	movq	-0x90(%rbp), %rdi
0000000000023885	movq	-0xd0(%rbp), %rsi
000000000002388c	movq	%rax, %rdx
000000000002388f	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023894	testb	$0x1, %al
0000000000023896	jne	0x238a1
000000000002389c	jmp	0x239c3
00000000000238a1	movq	-0x10(%rbp), %rax
00000000000238a5	movq	%rax, -0x70(%rbp)
00000000000238a9	movq	-0x10(%rbp), %rax
00000000000238ad	movq	-0x90(%rbp), %rdi
00000000000238b4	movq	%rax, -0xd8(%rbp)
00000000000238bb	callq	0x27762 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE12_M_rightmostEv
00000000000238c0	movq	-0xd8(%rbp), %rdi
00000000000238c7	cmpq	(%rax), %rdi
00000000000238ca	jne	0x238fc
00000000000238d0	movq	-0x90(%rbp), %rdi
00000000000238d7	callq	0x27762 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE12_M_rightmostEv
00000000000238dc	xorl	%ecx, %ecx
00000000000238de	movl	%ecx, %esi
00000000000238e0	movq	(%rax), %rdx
00000000000238e3	movq	-0x20(%rbp), %rcx
00000000000238e7	movq	-0x90(%rbp), %rdi
00000000000238ee	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
00000000000238f3	movq	%rax, -0x8(%rbp)
00000000000238f7	jmp	0x239cb
00000000000238fc	movq	-0x20(%rbp), %rsi
0000000000023900	leaq	-0x78(%rbp), %rdi
0000000000023904	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023909	leaq	-0x70(%rbp), %rdi
000000000002390d	movq	%rax, -0xe0(%rbp)
0000000000023914	callq	0x275dc ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEppEv
0000000000023919	movq	(%rax), %rdi
000000000002391c	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000023921	movq	-0x90(%rbp), %rdi
0000000000023928	movq	-0xe0(%rbp), %rsi
000000000002392f	movq	%rax, %rdx
0000000000023932	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023937	testb	$0x1, %al
0000000000023939	jne	0x23944
000000000002393f	jmp	0x23999
0000000000023944	movq	-0x10(%rbp), %rdi
0000000000023948	callq	0x277b0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base
000000000002394d	cmpq	$0x0, %rax
0000000000023951	jne	0x23978
0000000000023957	xorl	%eax, %eax
0000000000023959	movl	%eax, %esi
000000000002395b	movq	-0x10(%rbp), %rdx
000000000002395f	movq	-0x20(%rbp), %rcx
0000000000023963	movq	-0x90(%rbp), %rdi
000000000002396a	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
000000000002396f	movq	%rax, -0x8(%rbp)
0000000000023973	jmp	0x239cb
0000000000023978	movq	-0x70(%rbp), %rsi
000000000002397c	movq	-0x70(%rbp), %rdx
0000000000023980	movq	-0x20(%rbp), %rcx
0000000000023984	movq	-0x90(%rbp), %rdi
000000000002398b	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023990	movq	%rax, -0x8(%rbp)
0000000000023994	jmp	0x239cb
0000000000023999	movq	-0x20(%rbp), %rsi
000000000002399d	movq	-0x90(%rbp), %rdi
00000000000239a4	callq	0x27774 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueERKS6_
00000000000239a9	movq	%rax, -0x88(%rbp)
00000000000239b0	movb	%dl, -0x80(%rbp)
00000000000239b3	movq	-0x88(%rbp), %rax
00000000000239ba	movq	%rax, -0x8(%rbp)
00000000000239be	jmp	0x239cb
00000000000239c3	movq	-0x10(%rbp), %rax
00000000000239c7	movq	%rax, -0x8(%rbp)
00000000000239cb	movq	-0x8(%rbp), %rax
00000000000239cf	addq	$0xe0, %rsp
00000000000239d6	popq	%rbp
00000000000239d7	retq
00000000000239d8	nopl	(%rax,%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE4sizeEv:
00000000000239e0	pushq	%rbp
00000000000239e1	movq	%rsp, %rbp
00000000000239e4	movq	%rdi, -0x8(%rbp)
00000000000239e8	movq	-0x8(%rbp), %rdi
00000000000239ec	movq	0x28(%rdi), %rax
00000000000239f0	popq	%rbp
00000000000239f1	retq
00000000000239f2	nopw	%cs:(%rax,%rax)
00000000000239fc	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base:
0000000000023a00	pushq	%rbp
0000000000023a01	movq	%rsp, %rbp
0000000000023a04	subq	$0x10, %rsp
0000000000023a08	movq	%rdi, -0x8(%rbp)
0000000000023a0c	movq	-0x8(%rbp), %rdi
0000000000023a10	callq	0x277bc ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_valueEPKSt18_Rb_tree_node_base
0000000000023a15	leaq	-0x10(%rbp), %rdi
0000000000023a19	movq	%rax, %rsi
0000000000023a1c	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023a21	addq	$0x10, %rsp
0000000000023a25	popq	%rbp
0000000000023a26	retq
0000000000023a27	nopw	(%rax,%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE12_M_rightmostEv:
0000000000023a30	pushq	%rbp
0000000000023a31	movq	%rsp, %rbp
0000000000023a34	movq	%rdi, -0x8(%rbp)
0000000000023a38	movq	-0x8(%rbp), %rdi
0000000000023a3c	addq	$0x8, %rdi
0000000000023a40	addq	$0x18, %rdi
0000000000023a44	movq	%rdi, %rax
0000000000023a47	popq	%rbp
0000000000023a48	retq
0000000000023a49	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_:
0000000000023a50	pushq	%rbp
0000000000023a51	movq	%rsp, %rbp
0000000000023a54	subq	$0x60, %rsp
0000000000023a58	movq	%rdi, -0x10(%rbp)
0000000000023a5c	movq	%rsi, -0x18(%rbp)
0000000000023a60	movq	%rdx, -0x20(%rbp)
0000000000023a64	movq	%rcx, -0x28(%rbp)
0000000000023a68	movq	-0x10(%rbp), %rcx
0000000000023a6c	cmpq	$0x0, -0x18(%rbp)
0000000000023a71	movb	$0x1, %al
0000000000023a73	movq	%rcx, -0x40(%rbp)
0000000000023a77	movb	%al, -0x41(%rbp)
0000000000023a7a	jne	0x23ad0
0000000000023a80	movq	-0x20(%rbp), %rax
0000000000023a84	movq	-0x40(%rbp), %rdi
0000000000023a88	movq	%rax, -0x50(%rbp)
0000000000023a8c	callq	0x2778c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_M_endEv
0000000000023a91	movq	-0x50(%rbp), %rdi
0000000000023a95	cmpq	%rax, %rdi
0000000000023a98	movb	$0x1, %cl
0000000000023a9a	movb	%cl, -0x41(%rbp)
0000000000023a9d	je	0x23ad0
0000000000023aa3	movq	-0x28(%rbp), %rsi
0000000000023aa7	leaq	-0x30(%rbp), %rdi
0000000000023aab	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023ab0	movq	-0x20(%rbp), %rdi
0000000000023ab4	movq	%rax, -0x58(%rbp)
0000000000023ab8	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000023abd	movq	-0x40(%rbp), %rdi
0000000000023ac1	movq	-0x58(%rbp), %rsi
0000000000023ac5	movq	%rax, %rdx
0000000000023ac8	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023acd	movb	%al, -0x41(%rbp)
0000000000023ad0	movb	-0x41(%rbp), %al
0000000000023ad3	andb	$0x1, %al
0000000000023ad5	movb	%al, -0x29(%rbp)
0000000000023ad8	movq	-0x28(%rbp), %rsi
0000000000023adc	movq	-0x40(%rbp), %rdi
0000000000023ae0	callq	0x27768 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE14_M_create_nodeERKS6_
0000000000023ae5	movq	%rax, -0x38(%rbp)
0000000000023ae9	movb	-0x29(%rbp), %cl
0000000000023aec	movq	-0x38(%rbp), %rax
0000000000023af0	movq	-0x20(%rbp), %rdx
0000000000023af4	movq	-0x40(%rbp), %rsi
0000000000023af8	addq	$0x8, %rsi
0000000000023afc	andb	$0x1, %cl
0000000000023aff	movzbl	%cl, %edi
0000000000023b02	movq	%rsi, -0x60(%rbp)
0000000000023b06	movq	%rax, %rsi
0000000000023b09	movq	-0x60(%rbp), %rcx
0000000000023b0d	callq	0x278a0 ## symbol stub for: __ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
0000000000023b12	movq	-0x40(%rbp), %rax
0000000000023b16	movq	0x28(%rax), %rcx
0000000000023b1a	addq	$0x1, %rcx
0000000000023b1e	movq	%rcx, 0x28(%rax)
0000000000023b22	movq	-0x38(%rbp), %rsi
0000000000023b26	leaq	-0x8(%rbp), %rdi
0000000000023b2a	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
0000000000023b2f	movq	-0x8(%rbp), %rax
0000000000023b33	addq	$0x60, %rsp
0000000000023b37	popq	%rbp
0000000000023b38	retq
0000000000023b39	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE16_M_insert_uniqueERKS6_:
0000000000023b40	pushq	%rbp
0000000000023b41	movq	%rsp, %rbp
0000000000023b44	subq	$0xa0, %rsp
0000000000023b4b	movq	%rdi, -0x18(%rbp)
0000000000023b4f	movq	%rsi, -0x20(%rbp)
0000000000023b53	movq	-0x18(%rbp), %rsi
0000000000023b57	movq	%rsi, %rdi
0000000000023b5a	movq	%rsi, -0x70(%rbp)
0000000000023b5e	callq	0x277a4 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_M_beginEv
0000000000023b63	movq	%rax, -0x28(%rbp)
0000000000023b67	movq	-0x70(%rbp), %rdi
0000000000023b6b	callq	0x2778c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_M_endEv
0000000000023b70	movq	%rax, -0x30(%rbp)
0000000000023b74	movb	$0x1, -0x31(%rbp)
0000000000023b78	cmpq	$0x0, -0x28(%rbp)
0000000000023b7d	je	0x23bf6
0000000000023b83	movq	-0x28(%rbp), %rax
0000000000023b87	movq	%rax, -0x30(%rbp)
0000000000023b8b	movq	-0x20(%rbp), %rsi
0000000000023b8f	leaq	-0x38(%rbp), %rdi
0000000000023b93	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023b98	movq	-0x28(%rbp), %rdi
0000000000023b9c	movq	%rax, -0x78(%rbp)
0000000000023ba0	callq	0x27792 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E
0000000000023ba5	movq	-0x70(%rbp), %rdi
0000000000023ba9	movq	-0x78(%rbp), %rsi
0000000000023bad	movq	%rax, %rdx
0000000000023bb0	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023bb5	andb	$0x1, %al
0000000000023bb7	movb	%al, -0x31(%rbp)
0000000000023bba	testb	$0x1, -0x31(%rbp)
0000000000023bbe	je	0x23bd9
0000000000023bc4	movq	-0x28(%rbp), %rax
0000000000023bc8	movq	%rax, %rdi
0000000000023bcb	callq	0x2779e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base
0000000000023bd0	movq	%rax, -0x80(%rbp)
0000000000023bd4	jmp	0x23be9
0000000000023bd9	movq	-0x28(%rbp), %rax
0000000000023bdd	movq	%rax, %rdi
0000000000023be0	callq	0x277b0 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base
0000000000023be5	movq	%rax, -0x80(%rbp)
0000000000023be9	movq	-0x80(%rbp), %rax
0000000000023bed	movq	%rax, -0x28(%rbp)
0000000000023bf1	jmp	0x23b78
0000000000023bf6	movq	-0x30(%rbp), %rsi
0000000000023bfa	leaq	-0x40(%rbp), %rdi
0000000000023bfe	callq	__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEC1EPSt13_Rb_tree_nodeIS6_E ## std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >*)
0000000000023c03	testb	$0x1, -0x31(%rbp)
0000000000023c07	je	0x23c90
0000000000023c0d	movq	-0x70(%rbp), %rdi
0000000000023c11	callq	0x27786 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE5beginEv
0000000000023c16	movq	%rax, -0x48(%rbp)
0000000000023c1a	leaq	-0x40(%rbp), %rdi
0000000000023c1e	leaq	-0x48(%rbp), %rsi
0000000000023c22	callq	0x273fc ## symbol stub for: __ZNKSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEeqERKS7_
0000000000023c27	testb	$0x1, %al
0000000000023c29	jne	0x23c34
0000000000023c2f	jmp	0x23c7b
0000000000023c34	movq	-0x28(%rbp), %rax
0000000000023c38	movq	-0x30(%rbp), %rcx
0000000000023c3c	movq	-0x20(%rbp), %rdx
0000000000023c40	movq	-0x70(%rbp), %rdi
0000000000023c44	movq	%rax, %rsi
0000000000023c47	movq	%rdx, -0x88(%rbp)
0000000000023c4e	movq	%rcx, %rdx
0000000000023c51	movq	-0x88(%rbp), %rcx
0000000000023c58	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023c5d	movq	%rax, -0x50(%rbp)
0000000000023c61	movb	$0x1, -0x51(%rbp)
0000000000023c65	leaq	-0x10(%rbp), %rdi
0000000000023c69	leaq	-0x50(%rbp), %rsi
0000000000023c6d	leaq	-0x51(%rbp), %rdx
0000000000023c71	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC1ERKS7_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&, bool const&)
0000000000023c76	jmp	0x23d29
0000000000023c7b	leaq	-0x40(%rbp), %rdi
0000000000023c7f	callq	0x275d6 ## symbol stub for: __ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEmmEv
0000000000023c84	movq	%rax, -0x90(%rbp)
0000000000023c8b	jmp	0x23c90
0000000000023c90	movq	-0x40(%rbp), %rdi
0000000000023c94	callq	0x27798 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000023c99	movq	-0x20(%rbp), %rsi
0000000000023c9d	leaq	-0x58(%rbp), %rdi
0000000000023ca1	movq	%rax, -0x98(%rbp)
0000000000023ca8	callq	0x273cc ## symbol stub for: __ZNKSt10_Select1stISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEclERKS6_
0000000000023cad	movq	-0x70(%rbp), %rdi
0000000000023cb1	movq	-0x98(%rbp), %rsi
0000000000023cb8	movq	%rax, %rdx
0000000000023cbb	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000023cc0	testb	$0x1, %al
0000000000023cc2	jne	0x23ccd
0000000000023cc8	jmp	0x23d14
0000000000023ccd	movq	-0x28(%rbp), %rax
0000000000023cd1	movq	-0x30(%rbp), %rcx
0000000000023cd5	movq	-0x20(%rbp), %rdx
0000000000023cd9	movq	-0x70(%rbp), %rdi
0000000000023cdd	movq	%rax, %rsi
0000000000023ce0	movq	%rdx, -0xa0(%rbp)
0000000000023ce7	movq	%rcx, %rdx
0000000000023cea	movq	-0xa0(%rbp), %rcx
0000000000023cf1	callq	0x277c2 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE9_M_insertEPSt18_Rb_tree_node_baseSE_RKS6_
0000000000023cf6	movq	%rax, -0x60(%rbp)
0000000000023cfa	movb	$0x1, -0x61(%rbp)
0000000000023cfe	leaq	-0x10(%rbp), %rdi
0000000000023d02	leaq	-0x60(%rbp), %rsi
0000000000023d06	leaq	-0x61(%rbp), %rdx
0000000000023d0a	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC1ERKS7_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&, bool const&)
0000000000023d0f	jmp	0x23d29
0000000000023d14	movb	$0x0, -0x62(%rbp)
0000000000023d18	leaq	-0x10(%rbp), %rdi
0000000000023d1c	leaq	-0x40(%rbp), %rsi
0000000000023d20	leaq	-0x62(%rbp), %rdx
0000000000023d24	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC1ERKS7_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&, bool const&)
0000000000023d29	movq	-0x10(%rbp), %rax
0000000000023d2d	movb	-0x8(%rbp), %dl
0000000000023d30	addq	$0xa0, %rsp
0000000000023d37	popq	%rbp
0000000000023d38	retq
0000000000023d39	nopl	(%rax)
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_leftmostEv:
0000000000023d40	pushq	%rbp
0000000000023d41	movq	%rsp, %rbp
0000000000023d44	movq	%rdi, -0x8(%rbp)
0000000000023d48	movq	-0x8(%rbp), %rdi
0000000000023d4c	addq	$0x8, %rdi
0000000000023d50	addq	$0x10, %rdi
0000000000023d54	movq	%rdi, %rax
0000000000023d57	popq	%rbp
0000000000023d58	retq
0000000000023d59	nopl	(%rax)
__ZNSt17_Rb_tree_iteratorISt4pairIKiSt6vectorIS0_IiiESaIS3_EEEEmmEv:
0000000000023d60	pushq	%rbp
0000000000023d61	movq	%rsp, %rbp
0000000000023d64	subq	$0x10, %rsp
0000000000023d68	movq	%rdi, -0x8(%rbp)
0000000000023d6c	movq	-0x8(%rbp), %rdi
0000000000023d70	movq	(%rdi), %rax
0000000000023d73	movq	%rdi, -0x10(%rbp)
0000000000023d77	movq	%rax, %rdi
0000000000023d7a	callq	0x2781c ## symbol stub for: __ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
0000000000023d7f	movq	-0x10(%rbp), %rdi
0000000000023d83	movq	%rax, (%rdi)
0000000000023d86	movq	%rdi, %rax
0000000000023d89	addq	$0x10, %rsp
0000000000023d8d	popq	%rbp
0000000000023d8e	retq
0000000000023d8f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE8_S_valueEPKSt18_Rb_tree_node_base:
0000000000023d90	pushq	%rbp
0000000000023d91	movq	%rsp, %rbp
0000000000023d94	movq	%rdi, -0x8(%rbp)
0000000000023d98	movq	-0x8(%rbp), %rdi
0000000000023d9c	addq	$0x20, %rdi
0000000000023da0	movq	%rdi, %rax
0000000000023da3	popq	%rbp
0000000000023da4	retq
0000000000023da5	nopw	%cs:(%rax,%rax)
0000000000023daf	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE14_M_create_nodeERKS6_:
0000000000023db0	pushq	%rbp
0000000000023db1	movq	%rsp, %rbp
0000000000023db4	subq	$0x50, %rsp
0000000000023db8	movq	%rdi, -0x8(%rbp)
0000000000023dbc	movq	%rsi, -0x10(%rbp)
0000000000023dc0	movq	-0x8(%rbp), %rsi
0000000000023dc4	movq	%rsi, %rdi
0000000000023dc7	movq	%rsi, -0x38(%rbp)
0000000000023dcb	callq	0x2774a ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_get_nodeEv
0000000000023dd0	movq	%rax, -0x18(%rbp)
0000000000023dd4	leaq	-0x20(%rbp), %rdi
0000000000023dd8	movq	-0x38(%rbp), %rsi
0000000000023ddc	callq	0x27492 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE13get_allocatorEv
0000000000023de1	jmp	0x23de6
0000000000023de6	movq	-0x18(%rbp), %rax
0000000000023dea	addq	$0x20, %rax
0000000000023dee	movq	-0x10(%rbp), %rdx
0000000000023df2	leaq	-0x20(%rbp), %rdi
0000000000023df6	movq	%rax, %rsi
0000000000023df9	callq	0x272be ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEE9constructEPS7_RKS7_
0000000000023dfe	jmp	0x23e03
0000000000023e03	leaq	-0x20(%rbp), %rdi
0000000000023e07	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
0000000000023e0c	jmp	0x23e72
0000000000023e11	movl	%edx, %ecx
0000000000023e13	movq	%rax, -0x28(%rbp)
0000000000023e17	movl	%ecx, -0x2c(%rbp)
0000000000023e1a	jmp	0x23e31
0000000000023e1f	movl	%edx, %ecx
0000000000023e21	movq	%rax, -0x28(%rbp)
0000000000023e25	movl	%ecx, -0x2c(%rbp)
0000000000023e28	leaq	-0x20(%rbp), %rdi
0000000000023e2c	callq	__ZNSaISt4pairIKiSt6vectorIS_IiiESaIS2_EEEED1Ev ## std::allocator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >::~allocator()
0000000000023e31	movq	-0x28(%rbp), %rdi
0000000000023e35	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
0000000000023e3a	movq	-0x18(%rbp), %rsi
0000000000023e3e	movq	-0x38(%rbp), %rdi
0000000000023e42	movq	%rax, -0x40(%rbp)
0000000000023e46	callq	0x27756 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E
0000000000023e4b	jmp	0x23e50
0000000000023e50	callq	0x2795a ## symbol stub for: ___cxa_rethrow
0000000000023e55	jmp	0x23e93
0000000000023e5a	movl	%edx, %ecx
0000000000023e5c	movq	%rax, -0x28(%rbp)
0000000000023e60	movl	%ecx, -0x2c(%rbp)
0000000000023e63	callq	0x2794e ## symbol stub for: ___cxa_end_catch
0000000000023e68	jmp	0x23e6d
0000000000023e6d	jmp	0x23e7c
0000000000023e72	movq	-0x18(%rbp), %rax
0000000000023e76	addq	$0x50, %rsp
0000000000023e7a	popq	%rbp
0000000000023e7b	retq
0000000000023e7c	movq	-0x28(%rbp), %rdi
0000000000023e80	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000023e85	ud2
0000000000023e87	movq	%rax, %rdi
0000000000023e8a	movq	%rdx, -0x48(%rbp)
0000000000023e8e	callq	___clang_call_terminate
0000000000023e93	ud2
0000000000023e95	nopw	%cs:(%rax,%rax)
0000000000023e9f	nop
__ZNSt8_Rb_treeIiSt4pairIKiSt6vectorIS0_IiiESaIS3_EEESt10_Select1stIS6_ESt4lessIiESaIS6_EE11_M_get_nodeEv:
0000000000023ea0	pushq	%rbp
0000000000023ea1	movq	%rsp, %rbp
0000000000023ea4	subq	$0x10, %rsp
0000000000023ea8	xorl	%eax, %eax
0000000000023eaa	movl	%eax, %edx
0000000000023eac	movq	%rdi, -0x8(%rbp)
0000000000023eb0	movq	-0x8(%rbp), %rdi
0000000000023eb4	movl	$0x1, %esi
0000000000023eb9	callq	0x272a6 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE8allocateEmPKv
0000000000023ebe	addq	$0x10, %rsp
0000000000023ec2	popq	%rbp
0000000000023ec3	retq
0000000000023ec4	nopw	%cs:(%rax,%rax)
0000000000023ece	nop
__ZN9__gnu_cxx13new_allocatorISt4pairIKiSt6vectorIS1_IiiESaIS4_EEEE9constructEPS7_RKS7_:
0000000000023ed0	pushq	%rbp
0000000000023ed1	movq	%rsp, %rbp
0000000000023ed4	subq	$0x20, %rsp
0000000000023ed8	movq	%rdi, -0x8(%rbp)
0000000000023edc	movq	%rsi, -0x10(%rbp)
0000000000023ee0	movq	%rdx, -0x18(%rbp)
0000000000023ee4	movq	-0x10(%rbp), %rdx
0000000000023ee8	movq	-0x18(%rbp), %rsi
0000000000023eec	movq	%rdx, %rdi
0000000000023eef	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC1ERKS5_ ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::pair(std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > const&)
0000000000023ef4	addq	$0x20, %rsp
0000000000023ef8	popq	%rbp
0000000000023ef9	retq
0000000000023efa	nopw	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE8allocateEmPKv:
0000000000023f00	pushq	%rbp
0000000000023f01	movq	%rsp, %rbp
0000000000023f04	subq	$0x20, %rsp
0000000000023f08	movq	%rdi, -0x8(%rbp)
0000000000023f0c	movq	%rsi, -0x10(%rbp)
0000000000023f10	movq	%rdx, -0x18(%rbp)
0000000000023f14	movq	-0x8(%rbp), %rdi
0000000000023f18	movq	-0x10(%rbp), %rdx
0000000000023f1c	movq	%rdx, -0x20(%rbp)
0000000000023f20	callq	0x27372 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE8max_sizeEv
0000000000023f25	movq	-0x20(%rbp), %rdx
0000000000023f29	cmpq	%rax, %rdx
0000000000023f2c	jbe	0x23f37
0000000000023f32	callq	0x27816 ## symbol stub for: __ZSt17__throw_bad_allocv
0000000000023f37	movq	-0x10(%rbp), %rax
0000000000023f3b	shlq	$0x6, %rax
0000000000023f3f	movq	%rax, %rdi
0000000000023f42	callq	0x27924 ## symbol stub for: __Znwm
0000000000023f47	addq	$0x20, %rsp
0000000000023f4b	popq	%rbp
0000000000023f4c	retq
0000000000023f4d	nopl	(%rax)
__ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiSt6vectorIS2_IiiESaIS5_EEEEE8max_sizeEv:
0000000000023f50	pushq	%rbp
0000000000023f51	movq	%rsp, %rbp
0000000000023f54	movq	%rdi, -0x8(%rbp)
0000000000023f58	movabsq	$0x3ffffffffffffff, %rax
0000000000023f62	popq	%rbp
0000000000023f63	retq
0000000000023f64	nopw	%cs:(%rax,%rax)
0000000000023f6e	nop
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC1ERKS5_:
0000000000023f70	pushq	%rbp
0000000000023f71	movq	%rsp, %rbp
0000000000023f74	subq	$0x10, %rsp
0000000000023f78	movq	%rdi, -0x8(%rbp)
0000000000023f7c	movq	%rsi, -0x10(%rbp)
0000000000023f80	movq	-0x8(%rbp), %rdi
0000000000023f84	movq	-0x10(%rbp), %rsi
0000000000023f88	callq	__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC2ERKS5_ ## std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::pair(std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > const&)
0000000000023f8d	addq	$0x10, %rsp
0000000000023f91	popq	%rbp
0000000000023f92	retq
0000000000023f93	nopw	%cs:(%rax,%rax)
0000000000023f9d	nopl	(%rax)
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC2ERKS5_:
0000000000023fa0	pushq	%rbp
0000000000023fa1	movq	%rsp, %rbp
0000000000023fa4	subq	$0x20, %rsp
0000000000023fa8	movq	%rdi, -0x8(%rbp)
0000000000023fac	movq	%rsi, -0x10(%rbp)
0000000000023fb0	movq	-0x8(%rbp), %rsi
0000000000023fb4	movq	-0x10(%rbp), %rdi
0000000000023fb8	movl	(%rdi), %eax
0000000000023fba	movl	%eax, (%rsi)
0000000000023fbc	addq	$0x8, %rsi
0000000000023fc0	movq	-0x10(%rbp), %rdi
0000000000023fc4	addq	$0x8, %rdi
0000000000023fc8	movq	%rdi, -0x18(%rbp)
0000000000023fcc	movq	%rsi, %rdi
0000000000023fcf	movq	-0x18(%rbp), %rsi
0000000000023fd3	callq	__ZNSt6vectorISt4pairIiiESaIS1_EEC1ERKS3_ ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector(std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&)
0000000000023fd8	addq	$0x20, %rsp
0000000000023fdc	popq	%rbp
0000000000023fdd	retq
0000000000023fde	nop
__ZNSt6vectorISt4pairIiiESaIS1_EEC1ERKS3_:
0000000000023fe0	pushq	%rbp
0000000000023fe1	movq	%rsp, %rbp
0000000000023fe4	subq	$0x10, %rsp
0000000000023fe8	movq	%rdi, -0x8(%rbp)
0000000000023fec	movq	%rsi, -0x10(%rbp)
0000000000023ff0	movq	-0x8(%rbp), %rdi
0000000000023ff4	movq	-0x10(%rbp), %rsi
0000000000023ff8	callq	__ZNSt6vectorISt4pairIiiESaIS1_EEC2ERKS3_ ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector(std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&)
0000000000023ffd	addq	$0x10, %rsp
0000000000024001	popq	%rbp
0000000000024002	retq
0000000000024003	nopw	%cs:(%rax,%rax)
000000000002400d	nopl	(%rax)
__ZNSt6vectorISt4pairIiiESaIS1_EEC2ERKS3_:
0000000000024010	pushq	%rbp
0000000000024011	movq	%rsp, %rbp
0000000000024014	subq	$0x80, %rsp
000000000002401b	movq	%rdi, -0x8(%rbp)
000000000002401f	movq	%rsi, -0x10(%rbp)
0000000000024023	movq	-0x8(%rbp), %rsi
0000000000024027	movq	-0x10(%rbp), %rdi
000000000002402b	movq	%rsi, -0x40(%rbp)
000000000002402f	callq	0x27450 ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE4sizeEv
0000000000024034	movq	-0x10(%rbp), %rdi
0000000000024038	movq	%rax, -0x48(%rbp)
000000000002403c	callq	0x273e4 ## symbol stub for: __ZNKSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
0000000000024041	movq	-0x40(%rbp), %rdi
0000000000024045	movq	-0x48(%rbp), %rsi
0000000000024049	movq	%rax, %rdx
000000000002404c	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EEC2EmRKS2_ ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_base(unsigned long, std::allocator<std::pair<int, int> > const&)
0000000000024051	movq	-0x10(%rbp), %rdi
0000000000024055	callq	0x27456 ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE5beginEv
000000000002405a	movq	%rax, -0x50(%rbp)
000000000002405e	jmp	0x24063
0000000000024063	movq	-0x50(%rbp), %rax
0000000000024067	movq	%rax, -0x18(%rbp)
000000000002406b	movq	-0x10(%rbp), %rdi
000000000002406f	callq	0x2744a ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE3endEv
0000000000024074	movq	%rax, -0x58(%rbp)
0000000000024078	jmp	0x2407d
000000000002407d	movq	-0x58(%rbp), %rax
0000000000024081	movq	%rax, -0x30(%rbp)
0000000000024085	movq	-0x40(%rbp), %rcx
0000000000024089	movq	(%rcx), %rdx
000000000002408c	movq	%rcx, %rdi
000000000002408f	movq	%rdx, -0x60(%rbp)
0000000000024093	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
0000000000024098	movq	%rax, -0x68(%rbp)
000000000002409c	jmp	0x240a1
00000000000240a1	leaq	-0x38(%rbp), %rax
00000000000240a5	movq	%rax, %rdi
00000000000240a8	movq	-0x68(%rbp), %rsi
00000000000240ac	movq	%rax, -0x70(%rbp)
00000000000240b0	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
00000000000240b5	movq	-0x18(%rbp), %rdi
00000000000240b9	movq	-0x30(%rbp), %rsi
00000000000240bd	movq	-0x60(%rbp), %rdx
00000000000240c1	movq	-0x70(%rbp), %rcx
00000000000240c5	callq	0x2786a ## symbol stub for: __ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_SaIT1_E
00000000000240ca	movq	%rax, -0x78(%rbp)
00000000000240ce	jmp	0x240d3
00000000000240d3	movq	-0x40(%rbp), %rax
00000000000240d7	movq	-0x78(%rbp), %rcx
00000000000240db	movq	%rcx, 0x8(%rax)
00000000000240df	leaq	-0x38(%rbp), %rdi
00000000000240e3	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
00000000000240e8	addq	$0x80, %rsp
00000000000240ef	popq	%rbp
00000000000240f0	retq
00000000000240f1	movl	%edx, %ecx
00000000000240f3	movq	%rax, -0x20(%rbp)
00000000000240f7	movl	%ecx, -0x24(%rbp)
00000000000240fa	jmp	0x24111
00000000000240ff	movl	%edx, %ecx
0000000000024101	movq	%rax, -0x20(%rbp)
0000000000024105	movl	%ecx, -0x24(%rbp)
0000000000024108	leaq	-0x38(%rbp), %rdi
000000000002410c	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000024111	movq	-0x40(%rbp), %rax
0000000000024115	movq	%rax, %rdi
0000000000024118	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EED2Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~_Vector_base()
000000000002411d	movq	-0x20(%rbp), %rdi
0000000000024121	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000024126	ud2
0000000000024128	nopl	(%rax,%rax)
__ZNKSt6vectorISt4pairIiiESaIS1_EE4sizeEv:
0000000000024130	pushq	%rbp
0000000000024131	movq	%rsp, %rbp
0000000000024134	movq	%rdi, -0x8(%rbp)
0000000000024138	movq	-0x8(%rbp), %rdi
000000000002413c	movq	0x8(%rdi), %rax
0000000000024140	movq	(%rdi), %rdi
0000000000024143	subq	%rdi, %rax
0000000000024146	sarq	$0x3, %rax
000000000002414a	popq	%rbp
000000000002414b	retq
000000000002414c	nopl	(%rax)
__ZNKSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv:
0000000000024150	pushq	%rbp
0000000000024151	movq	%rsp, %rbp
0000000000024154	movq	%rdi, -0x8(%rbp)
0000000000024158	movq	-0x8(%rbp), %rdi
000000000002415c	movq	%rdi, %rax
000000000002415f	popq	%rbp
0000000000024160	retq
0000000000024161	nopw	%cs:(%rax,%rax)
000000000002416b	nopl	(%rax,%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EEC2EmRKS2_:
0000000000024170	pushq	%rbp
0000000000024171	movq	%rsp, %rbp
0000000000024174	subq	$0x40, %rsp
0000000000024178	movq	%rdi, -0x8(%rbp)
000000000002417c	movq	%rsi, -0x10(%rbp)
0000000000024180	movq	%rdx, -0x18(%rbp)
0000000000024184	movq	-0x8(%rbp), %rdx
0000000000024188	movq	-0x18(%rbp), %rsi
000000000002418c	movq	%rdx, %rdi
000000000002418f	movq	%rdx, -0x30(%rbp)
0000000000024193	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implC1ERKS2_ ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<int, int> > const&)
0000000000024198	cmpq	$0x0, -0x10(%rbp)
000000000002419d	je	0x241f9
00000000000241a3	movq	-0x10(%rbp), %rsi
00000000000241a7	movq	-0x30(%rbp), %rdi
00000000000241ab	callq	0x27582 ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE11_M_allocateEm
00000000000241b0	movq	%rax, -0x38(%rbp)
00000000000241b4	jmp	0x241b9
00000000000241b9	movq	-0x30(%rbp), %rax
00000000000241bd	movq	-0x38(%rbp), %rcx
00000000000241c1	movq	%rcx, (%rax)
00000000000241c4	movq	(%rax), %rdx
00000000000241c7	movq	%rdx, 0x8(%rax)
00000000000241cb	movq	(%rax), %rdx
00000000000241ce	movq	-0x10(%rbp), %rsi
00000000000241d2	shlq	$0x3, %rsi
00000000000241d6	addq	%rsi, %rdx
00000000000241d9	movq	%rdx, 0x10(%rax)
00000000000241dd	jmp	0x241f9
00000000000241e2	movl	%edx, %ecx
00000000000241e4	movq	%rax, -0x20(%rbp)
00000000000241e8	movl	%ecx, -0x24(%rbp)
00000000000241eb	movq	-0x30(%rbp), %rdi
00000000000241ef	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implD1Ev ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::~_Vector_impl()
00000000000241f4	jmp	0x241ff
00000000000241f9	addq	$0x40, %rsp
00000000000241fd	popq	%rbp
00000000000241fe	retq
00000000000241ff	movq	-0x20(%rbp), %rdi
0000000000024203	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000024208	ud2
000000000002420a	nopw	(%rax,%rax)
__ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_SaIT1_E:
0000000000024210	pushq	%rbp
0000000000024211	movq	%rsp, %rbp
0000000000024214	subq	$0x30, %rsp
0000000000024218	movq	%rdi, -0x8(%rbp)
000000000002421c	movq	%rsi, -0x10(%rbp)
0000000000024220	movq	%rdx, -0x18(%rbp)
0000000000024224	movq	-0x8(%rbp), %rdx
0000000000024228	movq	%rdx, -0x20(%rbp)
000000000002422c	movq	-0x10(%rbp), %rdx
0000000000024230	movq	%rdx, -0x28(%rbp)
0000000000024234	movq	-0x18(%rbp), %rdx
0000000000024238	movq	-0x20(%rbp), %rdi
000000000002423c	movq	-0x28(%rbp), %rsi
0000000000024240	movq	%rcx, -0x30(%rbp)
0000000000024244	callq	0x27828 ## symbol stub for: __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_
0000000000024249	addq	$0x30, %rsp
000000000002424d	popq	%rbp
000000000002424e	retq
000000000002424f	nop
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implC1ERKS2_:
0000000000024250	pushq	%rbp
0000000000024251	movq	%rsp, %rbp
0000000000024254	subq	$0x10, %rsp
0000000000024258	movq	%rdi, -0x8(%rbp)
000000000002425c	movq	%rsi, -0x10(%rbp)
0000000000024260	movq	-0x8(%rbp), %rdi
0000000000024264	movq	-0x10(%rbp), %rsi
0000000000024268	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implC2ERKS2_ ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<int, int> > const&)
000000000002426d	addq	$0x10, %rsp
0000000000024271	popq	%rbp
0000000000024272	retq
0000000000024273	nopw	%cs:(%rax,%rax)
000000000002427d	nopl	(%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE11_M_allocateEm:
0000000000024280	pushq	%rbp
0000000000024281	movq	%rsp, %rbp
0000000000024284	subq	$0x20, %rsp
0000000000024288	xorl	%eax, %eax
000000000002428a	movl	%eax, %edx
000000000002428c	movq	%rdi, -0x8(%rbp)
0000000000024290	movq	%rsi, -0x10(%rbp)
0000000000024294	movq	-0x8(%rbp), %rsi
0000000000024298	movq	-0x10(%rbp), %rdi
000000000002429c	movq	%rdi, -0x18(%rbp)
00000000000242a0	movq	%rsi, %rdi
00000000000242a3	movq	-0x18(%rbp), %rsi
00000000000242a7	callq	0x272ca ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIiiEE8allocateEmPKv
00000000000242ac	addq	$0x20, %rsp
00000000000242b0	popq	%rbp
00000000000242b1	retq
00000000000242b2	nopw	%cs:(%rax,%rax)
00000000000242bc	nopl	(%rax)
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implC2ERKS2_:
00000000000242c0	pushq	%rbp
00000000000242c1	movq	%rsp, %rbp
00000000000242c4	subq	$0x20, %rsp
00000000000242c8	movq	%rdi, -0x8(%rbp)
00000000000242cc	movq	%rsi, -0x10(%rbp)
00000000000242d0	movq	-0x8(%rbp), %rsi
00000000000242d4	movq	%rsi, %rdi
00000000000242d7	movq	-0x10(%rbp), %rax
00000000000242db	movq	%rsi, -0x18(%rbp)
00000000000242df	movq	%rax, %rsi
00000000000242e2	callq	__ZNSaISt4pairIiiEEC2ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
00000000000242e7	movq	-0x18(%rbp), %rax
00000000000242eb	movq	$0x0, (%rax)
00000000000242f2	movq	$0x0, 0x8(%rax)
00000000000242fa	movq	$0x0, 0x10(%rax)
0000000000024302	addq	$0x20, %rsp
0000000000024306	popq	%rbp
0000000000024307	retq
0000000000024308	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEE8allocateEmPKv:
0000000000024310	pushq	%rbp
0000000000024311	movq	%rsp, %rbp
0000000000024314	subq	$0x20, %rsp
0000000000024318	movq	%rdi, -0x8(%rbp)
000000000002431c	movq	%rsi, -0x10(%rbp)
0000000000024320	movq	%rdx, -0x18(%rbp)
0000000000024324	movq	-0x8(%rbp), %rdi
0000000000024328	movq	-0x10(%rbp), %rdx
000000000002432c	movq	%rdx, -0x20(%rbp)
0000000000024330	callq	0x27378 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv
0000000000024335	movq	-0x20(%rbp), %rdx
0000000000024339	cmpq	%rax, %rdx
000000000002433c	jbe	0x24347
0000000000024342	callq	0x27816 ## symbol stub for: __ZSt17__throw_bad_allocv
0000000000024347	movq	-0x10(%rbp), %rax
000000000002434b	shlq	$0x3, %rax
000000000002434f	movq	%rax, %rdi
0000000000024352	callq	0x27924 ## symbol stub for: __Znwm
0000000000024357	addq	$0x20, %rsp
000000000002435b	popq	%rbp
000000000002435c	retq
000000000002435d	nopl	(%rax)
__ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv:
0000000000024360	pushq	%rbp
0000000000024361	movq	%rsp, %rbp
0000000000024364	movq	%rdi, -0x8(%rbp)
0000000000024368	movabsq	$0x1fffffffffffffff, %rax
0000000000024372	popq	%rbp
0000000000024373	retq
0000000000024374	nopw	%cs:(%rax,%rax)
000000000002437e	nop
__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:
0000000000024380	pushq	%rbp
0000000000024381	movq	%rsp, %rbp
0000000000024384	subq	$0x30, %rsp
0000000000024388	movq	%rdi, -0x8(%rbp)
000000000002438c	movq	%rsi, -0x10(%rbp)
0000000000024390	movq	%rdx, -0x18(%rbp)
0000000000024394	movq	-0x8(%rbp), %rdx
0000000000024398	movq	%rdx, -0x20(%rbp)
000000000002439c	movq	-0x10(%rbp), %rdx
00000000000243a0	movq	%rdx, -0x28(%rbp)
00000000000243a4	movq	-0x18(%rbp), %rdx
00000000000243a8	movq	-0x20(%rbp), %rdi
00000000000243ac	movq	-0x28(%rbp), %rsi
00000000000243b0	callq	0x27882 ## symbol stub for: __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_St12__false_type
00000000000243b5	addq	$0x30, %rsp
00000000000243b9	popq	%rbp
00000000000243ba	retq
00000000000243bb	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_St12__false_type:
00000000000243c0	pushq	%rbp
00000000000243c1	movq	%rsp, %rbp
00000000000243c4	subq	$0x70, %rsp
00000000000243c8	movq	%rdi, -0x8(%rbp)
00000000000243cc	movq	%rsi, -0x10(%rbp)
00000000000243d0	movq	%rdx, -0x20(%rbp)
00000000000243d4	movq	-0x20(%rbp), %rdx
00000000000243d8	movq	%rdx, -0x28(%rbp)
00000000000243dc	leaq	-0x8(%rbp), %rdi
00000000000243e0	leaq	-0x10(%rbp), %rsi
00000000000243e4	callq	0x2733c ## symbol stub for: __ZN9__gnu_cxxneIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
00000000000243e9	movb	%al, -0x35(%rbp)
00000000000243ec	jmp	0x243f1
00000000000243f1	movb	-0x35(%rbp), %al
00000000000243f4	testb	$0x1, %al
00000000000243f6	jne	0x24401
00000000000243fc	jmp	0x2448a
0000000000024401	movq	-0x28(%rbp), %rdi
0000000000024405	leaq	-0x8(%rbp), %rax
0000000000024409	movq	%rdi, -0x40(%rbp)
000000000002440d	movq	%rax, %rdi
0000000000024410	callq	0x27390 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEdeEv
0000000000024415	movq	%rax, -0x48(%rbp)
0000000000024419	jmp	0x2441e
000000000002441e	movq	-0x40(%rbp), %rdi
0000000000024422	movq	-0x48(%rbp), %rsi
0000000000024426	callq	0x277da ## symbol stub for: __ZSt10_ConstructISt4pairIiiES1_EvPT_RKT0_
000000000002442b	jmp	0x24430
0000000000024430	jmp	0x24435
0000000000024435	leaq	-0x8(%rbp), %rdi
0000000000024439	callq	0x272f4 ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiiESt6vectorIS2_SaIS2_EEEppEv
000000000002443e	movq	%rax, -0x50(%rbp)
0000000000024442	jmp	0x24447
0000000000024447	movq	-0x28(%rbp), %rax
000000000002444b	addq	$0x8, %rax
000000000002444f	movq	%rax, -0x28(%rbp)
0000000000024453	jmp	0x243dc
0000000000024458	movl	%edx, %ecx
000000000002445a	movq	%rax, -0x30(%rbp)
000000000002445e	movl	%ecx, -0x34(%rbp)
0000000000024461	movq	-0x30(%rbp), %rdi
0000000000024465	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
000000000002446a	movq	-0x20(%rbp), %rdi
000000000002446e	movq	-0x28(%rbp), %rsi
0000000000024472	movq	%rax, -0x58(%rbp)
0000000000024476	callq	0x278f4 ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiEEvT_S3_
000000000002447b	jmp	0x24480
0000000000024480	callq	0x2795a ## symbol stub for: ___cxa_rethrow
0000000000024485	jmp	0x244d0
000000000002448a	movq	-0x28(%rbp), %rax
000000000002448e	movq	%rax, -0x60(%rbp)
0000000000024492	jmp	0x244af
0000000000024497	movl	%edx, %ecx
0000000000024499	movq	%rax, -0x30(%rbp)
000000000002449d	movl	%ecx, -0x34(%rbp)
00000000000244a0	callq	0x2794e ## symbol stub for: ___cxa_end_catch
00000000000244a5	jmp	0x244aa
00000000000244aa	jmp	0x244b9
00000000000244af	movq	-0x60(%rbp), %rax
00000000000244b3	addq	$0x70, %rsp
00000000000244b7	popq	%rbp
00000000000244b8	retq
00000000000244b9	movq	-0x30(%rbp), %rdi
00000000000244bd	callq	0x271b0 ## symbol stub for: __Unwind_Resume
00000000000244c2	ud2
00000000000244c4	movq	%rax, %rdi
00000000000244c7	movq	%rdx, -0x68(%rbp)
00000000000244cb	callq	___clang_call_terminate
00000000000244d0	ud2
00000000000244d2	nopw	%cs:(%rax,%rax)
00000000000244dc	nopl	(%rax)
__ZSt10_ConstructISt4pairIiiES1_EvPT_RKT0_:
00000000000244e0	pushq	%rbp
00000000000244e1	movq	%rsp, %rbp
00000000000244e4	movq	%rdi, -0x8(%rbp)
00000000000244e8	movq	%rsi, -0x10(%rbp)
00000000000244ec	movq	-0x8(%rbp), %rsi
00000000000244f0	movq	-0x10(%rbp), %rdi
00000000000244f4	movq	(%rdi), %rdi
00000000000244f7	movq	%rdi, (%rsi)
00000000000244fa	popq	%rbp
00000000000244fb	retq
00000000000244fc	nopl	(%rax)
__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC1ERKS7_RKb:
0000000000024500	pushq	%rbp
0000000000024501	movq	%rsp, %rbp
0000000000024504	subq	$0x20, %rsp
0000000000024508	movq	%rdi, -0x8(%rbp)
000000000002450c	movq	%rsi, -0x10(%rbp)
0000000000024510	movq	%rdx, -0x18(%rbp)
0000000000024514	movq	-0x8(%rbp), %rdi
0000000000024518	movq	-0x10(%rbp), %rsi
000000000002451c	movq	-0x18(%rbp), %rdx
0000000000024520	callq	__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC2ERKS7_RKb ## std::pair<std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > >, bool>::pair(std::_Rb_tree_iterator<std::pair<int const, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > > > const&, bool const&)
0000000000024525	addq	$0x20, %rsp
0000000000024529	popq	%rbp
000000000002452a	retq
000000000002452b	nopl	(%rax,%rax)
__ZNSt4pairISt17_Rb_tree_iteratorIS_IKiSt6vectorIS_IiiESaIS3_EEEEbEC2ERKS7_RKb:
0000000000024530	pushq	%rbp
0000000000024531	movq	%rsp, %rbp
0000000000024534	movq	%rdi, -0x8(%rbp)
0000000000024538	movq	%rsi, -0x10(%rbp)
000000000002453c	movq	%rdx, -0x18(%rbp)
0000000000024540	movq	-0x8(%rbp), %rdx
0000000000024544	movq	-0x10(%rbp), %rsi
0000000000024548	movq	(%rsi), %rsi
000000000002454b	movq	%rsi, (%rdx)
000000000002454e	movq	-0x18(%rbp), %rsi
0000000000024552	movb	(%rsi), %al
0000000000024554	andb	$0x1, %al
0000000000024556	movb	%al, 0x8(%rdx)
0000000000024559	popq	%rbp
000000000002455a	retq
000000000002455b	nopl	(%rax,%rax)
__ZNSaISt4pairIiiEEC2Ev:
0000000000024560	pushq	%rbp
0000000000024561	movq	%rsp, %rbp
0000000000024564	subq	$0x10, %rsp
0000000000024568	movq	%rdi, -0x8(%rbp)
000000000002456c	movq	-0x8(%rbp), %rdi
0000000000024570	callq	__ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2Ev ## __gnu_cxx::new_allocator<std::pair<int, int> >::new_allocator()
0000000000024575	addq	$0x10, %rsp
0000000000024579	popq	%rbp
000000000002457a	retq
000000000002457b	nopl	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2Ev:
0000000000024580	pushq	%rbp
0000000000024581	movq	%rsp, %rbp
0000000000024584	movq	%rdi, -0x8(%rbp)
0000000000024588	popq	%rbp
0000000000024589	retq
000000000002458a	nopw	(%rax,%rax)
__ZNSt6vectorISt4pairIiiESaIS1_EEC2ERKS2_:
0000000000024590	pushq	%rbp
0000000000024591	movq	%rsp, %rbp
0000000000024594	subq	$0x20, %rsp
0000000000024598	movq	%rdi, -0x8(%rbp)
000000000002459c	movq	%rsi, -0x10(%rbp)
00000000000245a0	movq	-0x8(%rbp), %rsi
00000000000245a4	movq	-0x10(%rbp), %rdi
00000000000245a8	movq	%rdi, -0x18(%rbp)
00000000000245ac	movq	%rsi, %rdi
00000000000245af	movq	-0x18(%rbp), %rsi
00000000000245b3	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EEC2ERKS2_ ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_base(std::allocator<std::pair<int, int> > const&)
00000000000245b8	addq	$0x20, %rsp
00000000000245bc	popq	%rbp
00000000000245bd	retq
00000000000245be	nop
__ZNSt12_Vector_baseISt4pairIiiESaIS1_EEC2ERKS2_:
00000000000245c0	pushq	%rbp
00000000000245c1	movq	%rsp, %rbp
00000000000245c4	subq	$0x10, %rsp
00000000000245c8	movq	%rdi, -0x8(%rbp)
00000000000245cc	movq	%rsi, -0x10(%rbp)
00000000000245d0	movq	-0x8(%rbp), %rdi
00000000000245d4	movq	-0x10(%rbp), %rsi
00000000000245d8	callq	__ZNSt12_Vector_baseISt4pairIiiESaIS1_EE12_Vector_implC1ERKS2_ ## std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<int, int> > const&)
00000000000245dd	addq	$0x10, %rsp
00000000000245e1	popq	%rbp
00000000000245e2	retq
00000000000245e3	nopw	%cs:(%rax,%rax)
00000000000245ed	nopl	(%rax)
__ZNSt4pairIKiSt6vectorIS_IiiESaIS2_EEEC2ERS0_RKS4_:
00000000000245f0	pushq	%rbp
00000000000245f1	movq	%rsp, %rbp
00000000000245f4	subq	$0x20, %rsp
00000000000245f8	movq	%rdi, -0x8(%rbp)
00000000000245fc	movq	%rsi, -0x10(%rbp)
0000000000024600	movq	%rdx, -0x18(%rbp)
0000000000024604	movq	-0x8(%rbp), %rdx
0000000000024608	movq	-0x10(%rbp), %rsi
000000000002460c	movl	(%rsi), %eax
000000000002460e	movl	%eax, (%rdx)
0000000000024610	addq	$0x8, %rdx
0000000000024614	movq	-0x18(%rbp), %rsi
0000000000024618	movq	%rdx, %rdi
000000000002461b	callq	__ZNSt6vectorISt4pairIiiESaIS1_EEC1ERKS3_ ## std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::vector(std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > const&)
0000000000024620	addq	$0x20, %rsp
0000000000024624	popq	%rbp
0000000000024625	retq
0000000000024626	nopw	%cs:(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructEPS2_RKS2_:
0000000000024630	pushq	%rbp
0000000000024631	movq	%rsp, %rbp
0000000000024634	movq	%rdi, -0x8(%rbp)
0000000000024638	movq	%rsi, -0x10(%rbp)
000000000002463c	movq	%rdx, -0x18(%rbp)
0000000000024640	movq	-0x10(%rbp), %rdx
0000000000024644	movq	-0x18(%rbp), %rsi
0000000000024648	movq	(%rsi), %rsi
000000000002464b	movq	%rsi, (%rdx)
000000000002464e	popq	%rbp
000000000002464f	retq
__ZNSt6vectorISt4pairIiiESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
0000000000024650	pushq	%rbp
0000000000024651	movq	%rsp, %rbp
0000000000024654	subq	$0x140, %rsp
000000000002465b	movq	%rsi, -0x8(%rbp)
000000000002465f	movq	%rdi, -0x10(%rbp)
0000000000024663	movq	%rdx, -0x18(%rbp)
0000000000024667	movq	-0x10(%rbp), %rdx
000000000002466b	movq	0x8(%rdx), %rsi
000000000002466f	cmpq	0x10(%rdx), %rsi
0000000000024673	movq	%rdx, -0x70(%rbp)
0000000000024677	je	0x246f5
000000000002467d	movq	-0x70(%rbp), %rax
0000000000024681	movq	-0x70(%rbp), %rcx
0000000000024685	movq	0x8(%rcx), %rsi
0000000000024689	movq	0x8(%rcx), %rdx
000000000002468d	addq	$-0x8, %rdx
0000000000024691	movq	%rax, %rdi
0000000000024694	callq	0x272d0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructEPS2_RKS2_
0000000000024699	movq	-0x70(%rbp), %rax
000000000002469d	movq	0x8(%rax), %rcx
00000000000246a1	addq	$0x8, %rcx
00000000000246a5	movq	%rcx, 0x8(%rax)
00000000000246a9	movq	-0x18(%rbp), %rcx
00000000000246ad	movq	(%rcx), %rcx
00000000000246b0	movq	%rcx, -0x20(%rbp)
00000000000246b4	leaq	-0x8(%rbp), %rdi
00000000000246b8	callq	0x273ae ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv
00000000000246bd	movq	(%rax), %rdi
00000000000246c0	movq	-0x70(%rbp), %rax
00000000000246c4	movq	0x8(%rax), %rcx
00000000000246c8	addq	$-0x10, %rcx
00000000000246cc	movq	0x8(%rax), %rdx
00000000000246d0	addq	$-0x8, %rdx
00000000000246d4	movq	%rcx, %rsi
00000000000246d7	callq	0x27810 ## symbol stub for: __ZSt13copy_backwardIPSt4pairIiiES2_ET0_T_S4_S3_
00000000000246dc	leaq	-0x8(%rbp), %rdi
00000000000246e0	movq	%rax, -0x78(%rbp)
00000000000246e4	callq	0x273b4 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEdeEv
00000000000246e9	movq	-0x20(%rbp), %rcx
00000000000246ed	movq	%rcx, (%rax)
00000000000246f0	jmp	0x24aeb
00000000000246f5	movq	-0x70(%rbp), %rdi
00000000000246f9	callq	0x27450 ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE4sizeEv
00000000000246fe	movq	%rax, -0x28(%rbp)
0000000000024702	movq	-0x28(%rbp), %rax
0000000000024706	movq	-0x70(%rbp), %rdi
000000000002470a	movq	%rax, -0x80(%rbp)
000000000002470e	callq	0x2745c ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE8max_sizeEv
0000000000024713	movq	-0x80(%rbp), %rdi
0000000000024717	cmpq	%rax, %rdi
000000000002471a	jne	0x2472c
0000000000024720	leaq	0x46e46(%rip), %rdi ## literal pool for: "vector::_M_insert_aux"
0000000000024727	callq	0x27864 ## symbol stub for: __ZSt20__throw_length_errorPKc
000000000002472c	cmpq	$0x0, -0x28(%rbp)
0000000000024731	je	0x2474b
0000000000024737	movq	-0x28(%rbp), %rax
000000000002473b	shlq	$0x1, %rax
000000000002473f	movq	%rax, -0x88(%rbp)
0000000000024746	jmp	0x2475c
000000000002474b	movl	$0x1, %eax
0000000000024750	movq	%rax, -0x88(%rbp)
0000000000024757	jmp	0x2475c
000000000002475c	movq	-0x88(%rbp), %rax
0000000000024763	movq	%rax, -0x30(%rbp)
0000000000024767	movq	-0x30(%rbp), %rax
000000000002476b	cmpq	-0x28(%rbp), %rax
000000000002476f	jae	0x24782
0000000000024775	movq	-0x70(%rbp), %rdi
0000000000024779	callq	0x2745c ## symbol stub for: __ZNKSt6vectorISt4pairIiiESaIS1_EE8max_sizeEv
000000000002477e	movq	%rax, -0x30(%rbp)
0000000000024782	movq	-0x30(%rbp), %rsi
0000000000024786	movq	-0x70(%rbp), %rdi
000000000002478a	callq	0x27582 ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE11_M_allocateEm
000000000002478f	movq	%rax, -0x38(%rbp)
0000000000024793	movq	-0x38(%rbp), %rax
0000000000024797	movq	%rax, -0x40(%rbp)
000000000002479b	movq	-0x70(%rbp), %rax
000000000002479f	movq	(%rax), %rdi
00000000000247a2	leaq	-0x8(%rbp), %rsi
00000000000247a6	movq	%rdi, -0x90(%rbp)
00000000000247ad	movq	%rsi, %rdi
00000000000247b0	callq	0x273ae ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv
00000000000247b5	movq	%rax, -0x98(%rbp)
00000000000247bc	jmp	0x247c1
00000000000247c1	movq	-0x98(%rbp), %rax
00000000000247c8	movq	(%rax), %rsi
00000000000247cb	movq	-0x38(%rbp), %rdx
00000000000247cf	movq	-0x70(%rbp), %rdi
00000000000247d3	movq	%rsi, -0xa0(%rbp)
00000000000247da	movq	%rdx, -0xa8(%rbp)
00000000000247e1	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
00000000000247e6	movq	%rax, -0xb0(%rbp)
00000000000247ed	jmp	0x247f2
00000000000247f2	leaq	-0x50(%rbp), %rax
00000000000247f6	movq	%rax, %rdi
00000000000247f9	movq	-0xb0(%rbp), %rsi
0000000000024800	movq	%rax, -0xb8(%rbp)
0000000000024807	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
000000000002480c	movq	-0x90(%rbp), %rdi
0000000000024813	movq	-0xa0(%rbp), %rsi
000000000002481a	movq	-0xa8(%rbp), %rdx
0000000000024821	movq	-0xb8(%rbp), %rcx
0000000000024828	callq	0x2787c ## symbol stub for: __ZSt22__uninitialized_copy_aIPSt4pairIiiES2_S1_ET0_T_S4_S3_SaIT1_E
000000000002482d	movq	%rax, -0xc0(%rbp)
0000000000024834	jmp	0x24839
0000000000024839	movq	-0xc0(%rbp), %rax
0000000000024840	movq	%rax, -0x40(%rbp)
0000000000024844	leaq	-0x50(%rbp), %rdi
0000000000024848	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
000000000002484d	movq	-0x40(%rbp), %rsi
0000000000024851	movq	-0x18(%rbp), %rdx
0000000000024855	movq	-0x70(%rbp), %rdi
0000000000024859	callq	0x272d0 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructEPS2_RKS2_
000000000002485e	jmp	0x24863
0000000000024863	movq	-0x40(%rbp), %rax
0000000000024867	addq	$0x8, %rax
000000000002486b	movq	%rax, -0x40(%rbp)
000000000002486f	leaq	-0x8(%rbp), %rdi
0000000000024873	callq	0x273ae ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv
0000000000024878	movq	%rax, -0xc8(%rbp)
000000000002487f	jmp	0x24884
0000000000024884	movq	-0xc8(%rbp), %rax
000000000002488b	movq	(%rax), %rdi
000000000002488e	movq	-0x70(%rbp), %rcx
0000000000024892	movq	0x8(%rcx), %rsi
0000000000024896	movq	-0x40(%rbp), %rdx
000000000002489a	movq	%rdi, -0xd0(%rbp)
00000000000248a1	movq	%rcx, %rdi
00000000000248a4	movq	%rsi, -0xd8(%rbp)
00000000000248ab	movq	%rdx, -0xe0(%rbp)
00000000000248b2	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
00000000000248b7	movq	%rax, -0xe8(%rbp)
00000000000248be	jmp	0x248c3
00000000000248c3	leaq	-0x58(%rbp), %rax
00000000000248c7	movq	%rax, %rdi
00000000000248ca	movq	-0xe8(%rbp), %rsi
00000000000248d1	movq	%rax, -0xf0(%rbp)
00000000000248d8	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
00000000000248dd	movq	-0xd0(%rbp), %rdi
00000000000248e4	movq	-0xd8(%rbp), %rsi
00000000000248eb	movq	-0xe0(%rbp), %rdx
00000000000248f2	movq	-0xf0(%rbp), %rcx
00000000000248f9	callq	0x2787c ## symbol stub for: __ZSt22__uninitialized_copy_aIPSt4pairIiiES2_S1_ET0_T_S4_S3_SaIT1_E
00000000000248fe	movq	%rax, -0xf8(%rbp)
0000000000024905	jmp	0x2490a
000000000002490a	movq	-0xf8(%rbp), %rax
0000000000024911	movq	%rax, -0x40(%rbp)
0000000000024915	leaq	-0x58(%rbp), %rdi
0000000000024919	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
000000000002491e	jmp	0x24a29
0000000000024923	movl	%edx, %ecx
0000000000024925	movq	%rax, -0x48(%rbp)
0000000000024929	movl	%ecx, -0x4c(%rbp)
000000000002492c	jmp	0x2495a
0000000000024931	movl	%edx, %ecx
0000000000024933	movq	%rax, -0x48(%rbp)
0000000000024937	movl	%ecx, -0x4c(%rbp)
000000000002493a	leaq	-0x50(%rbp), %rdi
000000000002493e	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000024943	jmp	0x2495a
0000000000024948	movl	%edx, %ecx
000000000002494a	movq	%rax, -0x48(%rbp)
000000000002494e	movl	%ecx, -0x4c(%rbp)
0000000000024951	leaq	-0x58(%rbp), %rdi
0000000000024955	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
000000000002495a	movq	-0x48(%rbp), %rdi
000000000002495e	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
0000000000024963	movq	-0x38(%rbp), %rdi
0000000000024967	movq	-0x40(%rbp), %rsi
000000000002496b	movq	-0x70(%rbp), %rcx
000000000002496f	movq	%rdi, -0x100(%rbp)
0000000000024976	movq	%rcx, %rdi
0000000000024979	movq	%rax, -0x108(%rbp)
0000000000024980	movq	%rsi, -0x110(%rbp)
0000000000024987	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
000000000002498c	movq	%rax, -0x118(%rbp)
0000000000024993	jmp	0x24998
0000000000024998	leaq	-0x60(%rbp), %rax
000000000002499c	movq	%rax, %rdi
000000000002499f	movq	-0x118(%rbp), %rsi
00000000000249a6	movq	%rax, -0x120(%rbp)
00000000000249ad	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
00000000000249b2	movq	-0x100(%rbp), %rdi
00000000000249b9	movq	-0x110(%rbp), %rsi
00000000000249c0	movq	-0x120(%rbp), %rdx
00000000000249c7	callq	0x278fa ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiES1_EvT_S3_SaIT0_E
00000000000249cc	jmp	0x249d1
00000000000249d1	leaq	-0x60(%rbp), %rdi
00000000000249d5	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
00000000000249da	movq	-0x38(%rbp), %rsi
00000000000249de	movq	-0x30(%rbp), %rdx
00000000000249e2	movq	-0x70(%rbp), %rdi
00000000000249e6	callq	0x27588 ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE13_M_deallocateEPS1_m
00000000000249eb	jmp	0x249f0
00000000000249f0	callq	0x2795a ## symbol stub for: ___cxa_rethrow
00000000000249f5	jmp	0x24b0e
00000000000249fa	movl	%edx, %ecx
00000000000249fc	movq	%rax, -0x48(%rbp)
0000000000024a00	movl	%ecx, -0x4c(%rbp)
0000000000024a03	jmp	0x24a1a
0000000000024a08	movl	%edx, %ecx
0000000000024a0a	movq	%rax, -0x48(%rbp)
0000000000024a0e	movl	%ecx, -0x4c(%rbp)
0000000000024a11	leaq	-0x60(%rbp), %rdi
0000000000024a15	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000024a1a	callq	0x2794e ## symbol stub for: ___cxa_end_catch
0000000000024a1f	jmp	0x24a24
0000000000024a24	jmp	0x24af4
0000000000024a29	movq	-0x70(%rbp), %rax
0000000000024a2d	movq	(%rax), %rdi
0000000000024a30	movq	0x8(%rax), %rsi
0000000000024a34	movq	%rdi, -0x128(%rbp)
0000000000024a3b	movq	%rax, %rdi
0000000000024a3e	movq	%rsi, -0x130(%rbp)
0000000000024a45	callq	0x2758e ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
0000000000024a4a	leaq	-0x68(%rbp), %rsi
0000000000024a4e	movq	%rsi, %rdi
0000000000024a51	movq	%rsi, -0x138(%rbp)
0000000000024a58	movq	%rax, %rsi
0000000000024a5b	callq	__ZNSaISt4pairIiiEEC1ERKS1_ ## std::allocator<std::pair<int, int> >::allocator(std::allocator<std::pair<int, int> > const&)
0000000000024a60	movq	-0x128(%rbp), %rdi
0000000000024a67	movq	-0x130(%rbp), %rsi
0000000000024a6e	movq	-0x138(%rbp), %rdx
0000000000024a75	callq	0x278fa ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiES1_EvT_S3_SaIT0_E
0000000000024a7a	jmp	0x24a7f
0000000000024a7f	leaq	-0x68(%rbp), %rdi
0000000000024a83	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000024a88	movq	-0x70(%rbp), %rdi
0000000000024a8c	movq	-0x70(%rbp), %rax
0000000000024a90	movq	(%rax), %rsi
0000000000024a93	movq	0x10(%rax), %rcx
0000000000024a97	movq	(%rax), %rdx
0000000000024a9a	subq	%rdx, %rcx
0000000000024a9d	sarq	$0x3, %rcx
0000000000024aa1	movq	%rcx, %rdx
0000000000024aa4	callq	0x27588 ## symbol stub for: __ZNSt12_Vector_baseISt4pairIiiESaIS1_EE13_M_deallocateEPS1_m
0000000000024aa9	movq	-0x38(%rbp), %rax
0000000000024aad	movq	-0x70(%rbp), %rcx
0000000000024ab1	movq	%rax, (%rcx)
0000000000024ab4	movq	-0x40(%rbp), %rax
0000000000024ab8	movq	%rax, 0x8(%rcx)
0000000000024abc	movq	-0x38(%rbp), %rax
0000000000024ac0	movq	-0x30(%rbp), %rdx
0000000000024ac4	shlq	$0x3, %rdx
0000000000024ac8	addq	%rdx, %rax
0000000000024acb	movq	%rax, 0x10(%rcx)
0000000000024acf	jmp	0x24aeb
0000000000024ad4	movl	%edx, %ecx
0000000000024ad6	movq	%rax, -0x48(%rbp)
0000000000024ada	movl	%ecx, -0x4c(%rbp)
0000000000024add	leaq	-0x68(%rbp), %rdi
0000000000024ae1	callq	__ZNSaISt4pairIiiEED1Ev ## std::allocator<std::pair<int, int> >::~allocator()
0000000000024ae6	jmp	0x24af4
0000000000024aeb	addq	$0x140, %rsp
0000000000024af2	popq	%rbp
0000000000024af3	retq
0000000000024af4	movq	-0x48(%rbp), %rdi
0000000000024af8	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000024afd	ud2
0000000000024aff	movq	%rax, %rdi
0000000000024b02	movq	%rdx, -0x140(%rbp)
0000000000024b09	callq	___clang_call_terminate
0000000000024b0e	ud2
__ZNSt6vectorISt4pairIiiESaIS1_EE3endEv:
0000000000024b10	pushq	%rbp
0000000000024b11	movq	%rsp, %rbp
0000000000024b14	subq	$0x20, %rsp
0000000000024b18	movq	%rdi, -0x10(%rbp)
0000000000024b1c	movq	-0x10(%rbp), %rdi
0000000000024b20	addq	$0x8, %rdi
0000000000024b24	leaq	-0x8(%rbp), %rax
0000000000024b28	movq	%rdi, -0x18(%rbp)
0000000000024b2c	movq	%rax, %rdi
0000000000024b2f	movq	-0x18(%rbp), %rsi
0000000000024b33	callq	__ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEC1ERKS3_ ## __gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int>* const&)
0000000000024b38	movq	-0x8(%rbp), %rax
0000000000024b3c	addq	$0x20, %rsp
0000000000024b40	popq	%rbp
0000000000024b41	retq
0000000000024b42	nopw	%cs:(%rax,%rax)
0000000000024b4c	nopl	(%rax)
__ZSt13copy_backwardIPSt4pairIiiES2_ET0_T_S4_S3_:
0000000000024b50	pushq	%rbp
0000000000024b51	movq	%rsp, %rbp
0000000000024b54	subq	$0x20, %rsp
0000000000024b58	movq	%rdi, -0x8(%rbp)
0000000000024b5c	movq	%rsi, -0x10(%rbp)
0000000000024b60	movq	%rdx, -0x18(%rbp)
0000000000024b64	movb	$0x0, -0x19(%rbp)
0000000000024b68	movb	$0x0, -0x1a(%rbp)
0000000000024b6c	movq	-0x8(%rbp), %rdi
0000000000024b70	movq	-0x10(%rbp), %rsi
0000000000024b74	movq	-0x18(%rbp), %rdx
0000000000024b78	callq	0x275e8 ## symbol stub for: __ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPSt4pairIiiES4_EET0_T_S6_S5_
0000000000024b7d	addq	$0x20, %rsp
0000000000024b81	popq	%rbp
0000000000024b82	retq
0000000000024b83	nopw	%cs:(%rax,%rax)
0000000000024b8d	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEE4baseEv:
0000000000024b90	pushq	%rbp
0000000000024b91	movq	%rsp, %rbp
0000000000024b94	movq	%rdi, -0x8(%rbp)
0000000000024b98	movq	-0x8(%rbp), %rax
0000000000024b9c	popq	%rbp
0000000000024b9d	retq
0000000000024b9e	nop
__ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEdeEv:
0000000000024ba0	pushq	%rbp
0000000000024ba1	movq	%rsp, %rbp
0000000000024ba4	movq	%rdi, -0x8(%rbp)
0000000000024ba8	movq	-0x8(%rbp), %rdi
0000000000024bac	movq	(%rdi), %rax
0000000000024baf	popq	%rbp
0000000000024bb0	retq
0000000000024bb1	nopw	%cs:(%rax,%rax)
0000000000024bbb	nopl	(%rax,%rax)
__ZNKSt6vectorISt4pairIiiESaIS1_EE8max_sizeEv:
0000000000024bc0	pushq	%rbp
0000000000024bc1	movq	%rsp, %rbp
0000000000024bc4	subq	$0x10, %rsp
0000000000024bc8	movq	%rdi, -0x8(%rbp)
0000000000024bcc	movq	-0x8(%rbp), %rdi
0000000000024bd0	callq	0x273e4 ## symbol stub for: __ZNKSt12_Vector_baseISt4pairIiiESaIS1_EE19_M_get_Tp_allocatorEv
0000000000024bd5	movq	%rax, %rdi
0000000000024bd8	callq	0x27378 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv
0000000000024bdd	addq	$0x10, %rsp
0000000000024be1	popq	%rbp
0000000000024be2	retq
0000000000024be3	nopw	%cs:(%rax,%rax)
0000000000024bed	nopl	(%rax)
__ZSt22__uninitialized_copy_aIPSt4pairIiiES2_S1_ET0_T_S4_S3_SaIT1_E:
0000000000024bf0	pushq	%rbp
0000000000024bf1	movq	%rsp, %rbp
0000000000024bf4	subq	$0x20, %rsp
0000000000024bf8	movq	%rdi, -0x8(%rbp)
0000000000024bfc	movq	%rsi, -0x10(%rbp)
0000000000024c00	movq	%rdx, -0x18(%rbp)
0000000000024c04	movq	-0x8(%rbp), %rdi
0000000000024c08	movq	-0x10(%rbp), %rsi
0000000000024c0c	movq	-0x18(%rbp), %rdx
0000000000024c10	movq	%rcx, -0x20(%rbp)
0000000000024c14	callq	0x27840 ## symbol stub for: __ZSt18uninitialized_copyIPSt4pairIiiES2_ET0_T_S4_S3_
0000000000024c19	addq	$0x20, %rsp
0000000000024c1d	popq	%rbp
0000000000024c1e	retq
0000000000024c1f	nop
__ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPSt4pairIiiES4_EET0_T_S6_S5_:
0000000000024c20	pushq	%rbp
0000000000024c21	movq	%rsp, %rbp
0000000000024c24	subq	$0x20, %rsp
0000000000024c28	movq	%rdi, -0x8(%rbp)
0000000000024c2c	movq	%rsi, -0x10(%rbp)
0000000000024c30	movq	%rdx, -0x18(%rbp)
0000000000024c34	movq	-0x8(%rbp), %rdi
0000000000024c38	movq	-0x10(%rbp), %rsi
0000000000024c3c	movq	-0x18(%rbp), %rdx
0000000000024c40	callq	0x27852 ## symbol stub for: __ZSt19__copy_backward_auxIPSt4pairIiiES2_ET0_T_S4_S3_
0000000000024c45	addq	$0x20, %rsp
0000000000024c49	popq	%rbp
0000000000024c4a	retq
0000000000024c4b	nopl	(%rax,%rax)
__ZSt19__copy_backward_auxIPSt4pairIiiES2_ET0_T_S4_S3_:
0000000000024c50	pushq	%rbp
0000000000024c51	movq	%rsp, %rbp
0000000000024c54	subq	$0x20, %rsp
0000000000024c58	movq	%rdi, -0x8(%rbp)
0000000000024c5c	movq	%rsi, -0x10(%rbp)
0000000000024c60	movq	%rdx, -0x18(%rbp)
0000000000024c64	movb	$0x0, -0x19(%rbp)
0000000000024c68	movq	-0x8(%rbp), %rdi
0000000000024c6c	movq	-0x10(%rbp), %rsi
0000000000024c70	movq	-0x18(%rbp), %rdx
0000000000024c74	callq	0x275b8 ## symbol stub for: __ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE8__copy_bIPSt4pairIiiES5_EET0_T_S7_S6_
0000000000024c79	addq	$0x20, %rsp
0000000000024c7d	popq	%rbp
0000000000024c7e	retq
0000000000024c7f	nop
__ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE8__copy_bIPSt4pairIiiES5_EET0_T_S7_S6_:
0000000000024c80	pushq	%rbp
0000000000024c81	movq	%rsp, %rbp
0000000000024c84	movq	%rdi, -0x8(%rbp)
0000000000024c88	movq	%rsi, -0x10(%rbp)
0000000000024c8c	movq	%rdx, -0x18(%rbp)
0000000000024c90	movq	-0x10(%rbp), %rdx
0000000000024c94	movq	-0x8(%rbp), %rsi
0000000000024c98	subq	%rsi, %rdx
0000000000024c9b	sarq	$0x3, %rdx
0000000000024c9f	movq	%rdx, -0x20(%rbp)
0000000000024ca3	cmpq	$0x0, -0x20(%rbp)
0000000000024ca8	jle	0x24ce5
0000000000024cae	movq	-0x10(%rbp), %rax
0000000000024cb2	movq	%rax, %rcx
0000000000024cb5	addq	$-0x8, %rcx
0000000000024cb9	movq	%rcx, -0x10(%rbp)
0000000000024cbd	movq	-0x18(%rbp), %rcx
0000000000024cc1	movq	%rcx, %rdx
0000000000024cc4	addq	$-0x8, %rdx
0000000000024cc8	movq	%rdx, -0x18(%rbp)
0000000000024ccc	movq	-0x8(%rax), %rax
0000000000024cd0	movq	%rax, -0x8(%rcx)
0000000000024cd4	movq	-0x20(%rbp), %rax
0000000000024cd8	addq	$-0x1, %rax
0000000000024cdc	movq	%rax, -0x20(%rbp)
0000000000024ce0	jmp	0x24ca3
0000000000024ce5	movq	-0x18(%rbp), %rax
0000000000024ce9	popq	%rbp
0000000000024cea	retq
0000000000024ceb	nopl	(%rax,%rax)
__ZSt18uninitialized_copyIPSt4pairIiiES2_ET0_T_S4_S3_:
0000000000024cf0	pushq	%rbp
0000000000024cf1	movq	%rsp, %rbp
0000000000024cf4	subq	$0x20, %rsp
0000000000024cf8	movq	%rdi, -0x8(%rbp)
0000000000024cfc	movq	%rsi, -0x10(%rbp)
0000000000024d00	movq	%rdx, -0x18(%rbp)
0000000000024d04	movq	-0x8(%rbp), %rdi
0000000000024d08	movq	-0x10(%rbp), %rsi
0000000000024d0c	movq	-0x18(%rbp), %rdx
0000000000024d10	callq	0x2789a ## symbol stub for: __ZSt24__uninitialized_copy_auxIPSt4pairIiiES2_ET0_T_S4_S3_St12__false_type
0000000000024d15	addq	$0x20, %rsp
0000000000024d19	popq	%rbp
0000000000024d1a	retq
0000000000024d1b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIPSt4pairIiiES2_ET0_T_S4_S3_St12__false_type:
0000000000024d20	pushq	%rbp
0000000000024d21	movq	%rsp, %rbp
0000000000024d24	subq	$0x50, %rsp
0000000000024d28	movq	%rdi, -0x10(%rbp)
0000000000024d2c	movq	%rsi, -0x18(%rbp)
0000000000024d30	movq	%rdx, -0x20(%rbp)
0000000000024d34	movq	-0x20(%rbp), %rdx
0000000000024d38	movq	%rdx, -0x28(%rbp)
0000000000024d3c	movq	-0x10(%rbp), %rax
0000000000024d40	cmpq	-0x18(%rbp), %rax
0000000000024d44	je	0x24db0
0000000000024d4a	movq	-0x28(%rbp), %rdi
0000000000024d4e	movq	-0x10(%rbp), %rsi
0000000000024d52	callq	0x277da ## symbol stub for: __ZSt10_ConstructISt4pairIiiES1_EvPT_RKT0_
0000000000024d57	jmp	0x24d5c
0000000000024d5c	jmp	0x24d61
0000000000024d61	movq	-0x10(%rbp), %rax
0000000000024d65	addq	$0x8, %rax
0000000000024d69	movq	%rax, -0x10(%rbp)
0000000000024d6d	movq	-0x28(%rbp), %rax
0000000000024d71	addq	$0x8, %rax
0000000000024d75	movq	%rax, -0x28(%rbp)
0000000000024d79	jmp	0x24d3c
0000000000024d7e	movl	%edx, %ecx
0000000000024d80	movq	%rax, -0x30(%rbp)
0000000000024d84	movl	%ecx, -0x34(%rbp)
0000000000024d87	movq	-0x30(%rbp), %rdi
0000000000024d8b	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
0000000000024d90	movq	-0x20(%rbp), %rdi
0000000000024d94	movq	-0x28(%rbp), %rsi
0000000000024d98	movq	%rax, -0x40(%rbp)
0000000000024d9c	callq	0x278f4 ## symbol stub for: __ZSt8_DestroyIPSt4pairIiiEEvT_S3_
0000000000024da1	jmp	0x24da6
0000000000024da6	callq	0x2795a ## symbol stub for: ___cxa_rethrow
0000000000024dab	jmp	0x24df6
0000000000024db0	movq	-0x28(%rbp), %rax
0000000000024db4	movq	%rax, -0x48(%rbp)
0000000000024db8	jmp	0x24dd5
0000000000024dbd	movl	%edx, %ecx
0000000000024dbf	movq	%rax, -0x30(%rbp)
0000000000024dc3	movl	%ecx, -0x34(%rbp)
0000000000024dc6	callq	0x2794e ## symbol stub for: ___cxa_end_catch
0000000000024dcb	jmp	0x24dd0
0000000000024dd0	jmp	0x24ddf
0000000000024dd5	movq	-0x48(%rbp), %rax
0000000000024dd9	addq	$0x50, %rsp
0000000000024ddd	popq	%rbp
0000000000024dde	retq
0000000000024ddf	movq	-0x30(%rbp), %rdi
0000000000024de3	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000024de8	ud2
0000000000024dea	movq	%rax, %rdi
0000000000024ded	movq	%rdx, -0x50(%rbp)
0000000000024df1	callq	___clang_call_terminate
0000000000024df6	ud2
0000000000024df8	nopl	(%rax,%rax)
__ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEC1ERKS3_:
0000000000024e00	pushq	%rbp
0000000000024e01	movq	%rsp, %rbp
0000000000024e04	subq	$0x10, %rsp
0000000000024e08	movq	%rdi, -0x8(%rbp)
0000000000024e0c	movq	%rsi, -0x10(%rbp)
0000000000024e10	movq	-0x8(%rbp), %rdi
0000000000024e14	movq	-0x10(%rbp), %rsi
0000000000024e18	callq	__ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEC2ERKS3_ ## __gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >::__normal_iterator(std::pair<int, int>* const&)
0000000000024e1d	addq	$0x10, %rsp
0000000000024e21	popq	%rbp
0000000000024e22	retq
0000000000024e23	nopw	%cs:(%rax,%rax)
0000000000024e2d	nopl	(%rax)
__ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiiESt6vectorIS2_SaIS2_EEEC2ERKS3_:
0000000000024e30	pushq	%rbp
0000000000024e31	movq	%rsp, %rbp
0000000000024e34	movq	%rdi, -0x8(%rbp)
0000000000024e38	movq	%rsi, -0x10(%rbp)
0000000000024e3c	movq	-0x8(%rbp), %rsi
0000000000024e40	movq	-0x10(%rbp), %rdi
0000000000024e44	movq	(%rdi), %rdi
0000000000024e47	movq	%rdi, (%rsi)
0000000000024e4a	popq	%rbp
0000000000024e4b	retq
0000000000024e4c	nopl	(%rax)
__ZNSt4pairIiiEC2ERKiS2_:
0000000000024e50	pushq	%rbp
0000000000024e51	movq	%rsp, %rbp
0000000000024e54	movq	%rdi, -0x8(%rbp)
0000000000024e58	movq	%rsi, -0x10(%rbp)
0000000000024e5c	movq	%rdx, -0x18(%rbp)
0000000000024e60	movq	-0x8(%rbp), %rdx
0000000000024e64	movq	-0x10(%rbp), %rsi
0000000000024e68	movl	(%rsi), %eax
0000000000024e6a	movl	%eax, (%rdx)
0000000000024e6c	movq	-0x18(%rbp), %rsi
0000000000024e70	movl	(%rsi), %eax
0000000000024e72	movl	%eax, 0x4(%rdx)
0000000000024e75	popq	%rbp
0000000000024e76	retq
0000000000024e77	nopw	(%rax,%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE4findERS1_:
0000000000024e80	pushq	%rbp
0000000000024e81	movq	%rsp, %rbp
0000000000024e84	subq	$0x50, %rsp
0000000000024e88	movq	%rdi, -0x10(%rbp)
0000000000024e8c	movq	%rsi, -0x18(%rbp)
0000000000024e90	movq	-0x10(%rbp), %rsi
0000000000024e94	movq	%rsi, %rdi
0000000000024e97	movq	%rsi, -0x40(%rbp)
0000000000024e9b	callq	0x27486 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv
0000000000024ea0	movq	%rax, -0x20(%rbp)
0000000000024ea4	movq	-0x40(%rbp), %rdi
0000000000024ea8	callq	0x27480 ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv
0000000000024ead	movq	%rax, -0x28(%rbp)
0000000000024eb1	cmpq	$0x0, -0x20(%rbp)
0000000000024eb6	je	0x24f0f
0000000000024ebc	movq	-0x20(%rbp), %rdi
0000000000024ec0	callq	0x27708 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E
0000000000024ec5	movq	-0x18(%rbp), %rdx
0000000000024ec9	movq	-0x40(%rbp), %rdi
0000000000024ecd	movq	%rax, %rsi
0000000000024ed0	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000024ed5	testb	$0x1, %al
0000000000024ed7	jne	0x24efa
0000000000024edd	movq	-0x20(%rbp), %rax
0000000000024ee1	movq	%rax, -0x28(%rbp)
0000000000024ee5	movq	-0x20(%rbp), %rax
0000000000024ee9	movq	%rax, %rdi
0000000000024eec	callq	0x27714 ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPKSt18_Rb_tree_node_base
0000000000024ef1	movq	%rax, -0x20(%rbp)
0000000000024ef5	jmp	0x24f0a
0000000000024efa	movq	-0x20(%rbp), %rax
0000000000024efe	movq	%rax, %rdi
0000000000024f01	callq	0x2772c ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPKSt18_Rb_tree_node_base
0000000000024f06	movq	%rax, -0x20(%rbp)
0000000000024f0a	jmp	0x24eb1
0000000000024f0f	movq	-0x28(%rbp), %rsi
0000000000024f13	leaq	-0x30(%rbp), %rdi
0000000000024f17	callq	__ZNSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPKSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_const_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_const_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const*)
0000000000024f1c	movq	-0x40(%rbp), %rdi
0000000000024f20	callq	0x2746e ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv
0000000000024f25	movq	%rax, -0x38(%rbp)
0000000000024f29	leaq	-0x30(%rbp), %rdi
0000000000024f2d	leaq	-0x38(%rbp), %rsi
0000000000024f31	callq	0x27408 ## symbol stub for: __ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_
0000000000024f36	testb	$0x1, %al
0000000000024f38	jne	0x24f6c
0000000000024f3e	movq	-0x18(%rbp), %rsi
0000000000024f42	movq	-0x30(%rbp), %rdi
0000000000024f46	movq	%rsi, -0x48(%rbp)
0000000000024f4a	callq	0x2770e ## symbol stub for: __ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base
0000000000024f4f	movq	-0x40(%rbp), %rdi
0000000000024f53	movq	-0x48(%rbp), %rsi
0000000000024f57	movq	%rax, %rdx
0000000000024f5a	callq	0x27420 ## symbol stub for: __ZNKSt4lessIiEclERKiS2_
0000000000024f5f	testb	$0x1, %al
0000000000024f61	jne	0x24f6c
0000000000024f67	jmp	0x24f7e
0000000000024f6c	movq	-0x40(%rbp), %rdi
0000000000024f70	callq	0x2746e ## symbol stub for: __ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv
0000000000024f75	movq	%rax, -0x8(%rbp)
0000000000024f79	jmp	0x24f86
0000000000024f7e	movq	-0x30(%rbp), %rax
0000000000024f82	movq	%rax, -0x8(%rbp)
0000000000024f86	movq	-0x8(%rbp), %rax
0000000000024f8a	addq	$0x50, %rsp
0000000000024f8e	popq	%rbp
0000000000024f8f	retq
__ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEeqERKS9_:
0000000000024f90	pushq	%rbp
0000000000024f91	movq	%rsp, %rbp
0000000000024f94	movq	%rdi, -0x8(%rbp)
0000000000024f98	movq	%rsi, -0x10(%rbp)
0000000000024f9c	movq	-0x8(%rbp), %rsi
0000000000024fa0	movq	(%rsi), %rsi
0000000000024fa3	movq	-0x10(%rbp), %rdi
0000000000024fa7	cmpq	(%rdi), %rsi
0000000000024faa	sete	%al
0000000000024fad	andb	$0x1, %al
0000000000024faf	movzbl	%al, %eax
0000000000024fb2	popq	%rbp
0000000000024fb3	retq
0000000000024fb4	nopw	%cs:(%rax,%rax)
0000000000024fbe	nop
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE3endEv:
0000000000024fc0	pushq	%rbp
0000000000024fc1	movq	%rsp, %rbp
0000000000024fc4	subq	$0x20, %rsp
0000000000024fc8	movq	%rdi, -0x10(%rbp)
0000000000024fcc	movq	-0x10(%rbp), %rdi
0000000000024fd0	addq	$0x8, %rdi
0000000000024fd4	leaq	-0x8(%rbp), %rax
0000000000024fd8	movq	%rdi, -0x18(%rbp)
0000000000024fdc	movq	%rax, %rdi
0000000000024fdf	movq	-0x18(%rbp), %rsi
0000000000024fe3	callq	__ZNSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPKSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_const_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_const_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const*)
0000000000024fe8	movq	-0x8(%rbp), %rax
0000000000024fec	addq	$0x20, %rsp
0000000000024ff0	popq	%rbp
0000000000024ff1	retq
0000000000024ff2	nopw	%cs:(%rax,%rax)
0000000000024ffc	nopl	(%rax)
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_beginEv:
0000000000025000	pushq	%rbp
0000000000025001	movq	%rsp, %rbp
0000000000025004	movq	%rdi, -0x8(%rbp)
0000000000025008	movq	-0x8(%rbp), %rdi
000000000002500c	movq	0x10(%rdi), %rdi
0000000000025010	movq	%rdi, %rax
0000000000025013	popq	%rbp
0000000000025014	retq
0000000000025015	nopw	%cs:(%rax,%rax)
000000000002501f	nop
__ZNKSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE6_M_endEv:
0000000000025020	pushq	%rbp
0000000000025021	movq	%rsp, %rbp
0000000000025024	movq	%rdi, -0x8(%rbp)
0000000000025028	movq	-0x8(%rbp), %rdi
000000000002502c	addq	$0x8, %rdi
0000000000025030	movq	%rdi, %rax
0000000000025033	popq	%rbp
0000000000025034	retq
0000000000025035	nopw	%cs:(%rax,%rax)
000000000002503f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE7_S_leftEPKSt18_Rb_tree_node_base:
0000000000025040	pushq	%rbp
0000000000025041	movq	%rsp, %rbp
0000000000025044	movq	%rdi, -0x8(%rbp)
0000000000025048	movq	-0x8(%rbp), %rdi
000000000002504c	movq	0x10(%rdi), %rdi
0000000000025050	movq	%rdi, %rax
0000000000025053	popq	%rbp
0000000000025054	retq
0000000000025055	nopw	%cs:(%rax,%rax)
000000000002505f	nop
__ZNSt8_Rb_treeIiSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_S_rightEPKSt18_Rb_tree_node_base:
0000000000025060	pushq	%rbp
0000000000025061	movq	%rsp, %rbp
0000000000025064	movq	%rdi, -0x8(%rbp)
0000000000025068	movq	-0x8(%rbp), %rdi
000000000002506c	movq	0x18(%rdi), %rdi
0000000000025070	movq	%rdi, %rax
0000000000025073	popq	%rbp
0000000000025074	retq
0000000000025075	nopw	%cs:(%rax,%rax)
000000000002507f	nop
__ZNSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC1EPKSt13_Rb_tree_nodeIS8_E:
0000000000025080	pushq	%rbp
0000000000025081	movq	%rsp, %rbp
0000000000025084	subq	$0x10, %rsp
0000000000025088	movq	%rdi, -0x8(%rbp)
000000000002508c	movq	%rsi, -0x10(%rbp)
0000000000025090	movq	-0x8(%rbp), %rdi
0000000000025094	movq	-0x10(%rbp), %rsi
0000000000025098	callq	__ZNSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2EPKSt13_Rb_tree_nodeIS8_E ## std::_Rb_tree_const_iterator<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> >::_Rb_tree_const_iterator(std::_Rb_tree_node<std::pair<int const, void (*)(GameObject*, GJBaseGameLayer*)> > const*)
000000000002509d	addq	$0x10, %rsp
00000000000250a1	popq	%rbp
00000000000250a2	retq
00000000000250a3	nopw	%cs:(%rax,%rax)
00000000000250ad	nopl	(%rax)
__ZNSt23_Rb_tree_const_iteratorISt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEEC2EPKSt13_Rb_tree_nodeIS8_E:
00000000000250b0	pushq	%rbp
00000000000250b1	movq	%rsp, %rbp
00000000000250b4	movq	%rdi, -0x8(%rbp)
00000000000250b8	movq	%rsi, -0x10(%rbp)
00000000000250bc	movq	-0x8(%rbp), %rsi
00000000000250c0	movq	-0x10(%rbp), %rdi
00000000000250c4	movq	%rdi, (%rsi)
00000000000250c7	popq	%rbp
00000000000250c8	retq
00000000000250c9	nopl	(%rax)
__ZNSt4pairIiPFvP10GameObjectP15GJBaseGameLayerEEC2ERKiRKS5_:
00000000000250d0	pushq	%rbp
00000000000250d1	movq	%rsp, %rbp
00000000000250d4	movq	%rdi, -0x8(%rbp)
00000000000250d8	movq	%rsi, -0x10(%rbp)
00000000000250dc	movq	%rdx, -0x18(%rbp)
00000000000250e0	movq	-0x8(%rbp), %rdx
00000000000250e4	movq	-0x10(%rbp), %rsi
00000000000250e8	movl	(%rsi), %eax
00000000000250ea	movl	%eax, (%rdx)
00000000000250ec	movq	-0x18(%rbp), %rsi
00000000000250f0	movq	(%rsi), %rsi
00000000000250f3	movq	%rsi, 0x8(%rdx)
00000000000250f7	popq	%rbp
00000000000250f8	retq
00000000000250f9	nopl	(%rax)
__ZNSt4pairIKiPFvP10GameObjectP15GJBaseGameLayerEEC2IiS6_EERKS_IT_T0_E:
0000000000025100	pushq	%rbp
0000000000025101	movq	%rsp, %rbp
0000000000025104	movq	%rdi, -0x8(%rbp)
0000000000025108	movq	%rsi, -0x10(%rbp)
000000000002510c	movq	-0x8(%rbp), %rsi
0000000000025110	movq	-0x10(%rbp), %rdi
0000000000025114	movl	(%rdi), %eax
0000000000025116	movl	%eax, (%rsi)
0000000000025118	movq	-0x10(%rbp), %rdi
000000000002511c	movq	0x8(%rdi), %rdi
0000000000025120	movq	%rdi, 0x8(%rsi)
0000000000025124	popq	%rbp
0000000000025125	retq
0000000000025126	nopw	%cs:(%rax,%rax)
__ZNSt6vectorIP13BaseContainerSaIS1_EE9push_backERKS1_:
0000000000025130	pushq	%rbp
0000000000025131	movq	%rsp, %rbp
0000000000025134	subq	$0x20, %rsp
0000000000025138	movq	%rdi, -0x8(%rbp)
000000000002513c	movq	%rsi, -0x10(%rbp)
0000000000025140	movq	-0x8(%rbp), %rsi
0000000000025144	movq	0x8(%rsi), %rdi
0000000000025148	cmpq	0x10(%rsi), %rdi
000000000002514c	movq	%rsi, -0x20(%rbp)
0000000000025150	je	0x25183
0000000000025156	movq	-0x20(%rbp), %rax
000000000002515a	movq	-0x20(%rbp), %rcx
000000000002515e	movq	0x8(%rcx), %rsi
0000000000025162	movq	-0x10(%rbp), %rdx
0000000000025166	movq	%rax, %rdi
0000000000025169	callq	0x2727c ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
000000000002516e	movq	-0x20(%rbp), %rax
0000000000025172	movq	0x8(%rax), %rcx
0000000000025176	addq	$0x8, %rcx
000000000002517a	movq	%rcx, 0x8(%rax)
000000000002517e	jmp	0x251a1
0000000000025183	movq	-0x20(%rbp), %rdi
0000000000025187	callq	0x27678 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv
000000000002518c	movq	%rax, -0x18(%rbp)
0000000000025190	movq	-0x10(%rbp), %rdx
0000000000025194	movq	-0x18(%rbp), %rsi
0000000000025198	movq	-0x20(%rbp), %rdi
000000000002519c	callq	0x27672 ## symbol stub for: __ZNSt6vectorIP13BaseContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
00000000000251a1	addq	$0x20, %rsp
00000000000251a5	popq	%rbp
00000000000251a6	retq
00000000000251a7	nopw	(%rax,%rax)
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_:
00000000000251b0	pushq	%rbp
00000000000251b1	movq	%rsp, %rbp
00000000000251b4	movq	%rdi, -0x8(%rbp)
00000000000251b8	movq	%rsi, -0x10(%rbp)
00000000000251bc	movq	%rdx, -0x18(%rbp)
00000000000251c0	movq	-0x10(%rbp), %rdx
00000000000251c4	movq	-0x18(%rbp), %rsi
00000000000251c8	movq	(%rsi), %rsi
00000000000251cb	movq	%rsi, (%rdx)
00000000000251ce	popq	%rbp
00000000000251cf	retq
__ZNSt6vectorIP13BaseContainerSaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
00000000000251d0	pushq	%rbp
00000000000251d1	movq	%rsp, %rbp
00000000000251d4	subq	$0x150, %rsp
00000000000251db	movq	%rsi, -0x8(%rbp)
00000000000251df	movq	%rdi, -0x10(%rbp)
00000000000251e3	movq	%rdx, -0x18(%rbp)
00000000000251e7	movq	-0x10(%rbp), %rdx
00000000000251eb	movq	0x8(%rdx), %rsi
00000000000251ef	cmpq	0x10(%rdx), %rsi
00000000000251f3	movq	%rdx, -0x70(%rbp)
00000000000251f7	je	0x2527d
00000000000251fd	movq	-0x70(%rbp), %rax
0000000000025201	movq	-0x70(%rbp), %rcx
0000000000025205	movq	0x8(%rcx), %rsi
0000000000025209	movq	0x8(%rcx), %rdx
000000000002520d	addq	$-0x8, %rdx
0000000000025211	movq	%rax, %rdi
0000000000025214	callq	0x2727c ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
0000000000025219	movq	-0x70(%rbp), %rax
000000000002521d	movq	0x8(%rax), %rcx
0000000000025221	addq	$0x8, %rcx
0000000000025225	movq	%rcx, 0x8(%rax)
0000000000025229	movq	-0x18(%rbp), %rcx
000000000002522d	movq	(%rcx), %rcx
0000000000025230	movq	%rcx, -0x20(%rbp)
0000000000025234	leaq	-0x8(%rbp), %rdi
0000000000025238	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
000000000002523d	movq	(%rax), %rdi
0000000000025240	movq	-0x70(%rbp), %rax
0000000000025244	movq	0x8(%rax), %rcx
0000000000025248	addq	$-0x10, %rcx
000000000002524c	movq	0x8(%rax), %rdx
0000000000025250	addq	$-0x8, %rdx
0000000000025254	movq	%rcx, %rsi
0000000000025257	callq	0x2780a ## symbol stub for: __ZSt13copy_backwardIPP13BaseContainerS2_ET0_T_S4_S3_
000000000002525c	movq	-0x20(%rbp), %rcx
0000000000025260	leaq	-0x8(%rbp), %rdi
0000000000025264	movq	%rax, -0x78(%rbp)
0000000000025268	movq	%rcx, -0x80(%rbp)
000000000002526c	callq	0x273a8 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv
0000000000025271	movq	-0x80(%rbp), %rcx
0000000000025275	movq	%rcx, (%rax)
0000000000025278	jmp	0x25679
000000000002527d	movq	-0x70(%rbp), %rdi
0000000000025281	callq	0x2743e ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE4sizeEv
0000000000025286	movq	%rax, -0x28(%rbp)
000000000002528a	movq	-0x28(%rbp), %rax
000000000002528e	movq	-0x70(%rbp), %rdi
0000000000025292	movq	%rax, -0x88(%rbp)
0000000000025299	callq	0x27444 ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv
000000000002529e	movq	-0x88(%rbp), %rdi
00000000000252a5	cmpq	%rax, %rdi
00000000000252a8	jne	0x252ba
00000000000252ae	leaq	0x462b8(%rip), %rdi ## literal pool for: "vector::_M_insert_aux"
00000000000252b5	callq	0x27864 ## symbol stub for: __ZSt20__throw_length_errorPKc
00000000000252ba	cmpq	$0x0, -0x28(%rbp)
00000000000252bf	je	0x252d9
00000000000252c5	movq	-0x28(%rbp), %rax
00000000000252c9	shlq	$0x1, %rax
00000000000252cd	movq	%rax, -0x90(%rbp)
00000000000252d4	jmp	0x252ea
00000000000252d9	movl	$0x1, %eax
00000000000252de	movq	%rax, -0x90(%rbp)
00000000000252e5	jmp	0x252ea
00000000000252ea	movq	-0x90(%rbp), %rax
00000000000252f1	movq	%rax, -0x30(%rbp)
00000000000252f5	movq	-0x30(%rbp), %rax
00000000000252f9	cmpq	-0x28(%rbp), %rax
00000000000252fd	jae	0x25310
0000000000025303	movq	-0x70(%rbp), %rdi
0000000000025307	callq	0x27444 ## symbol stub for: __ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv
000000000002530c	movq	%rax, -0x30(%rbp)
0000000000025310	movq	-0x30(%rbp), %rsi
0000000000025314	movq	-0x70(%rbp), %rdi
0000000000025318	callq	0x2754c ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE11_M_allocateEm
000000000002531d	movq	%rax, -0x38(%rbp)
0000000000025321	movq	-0x38(%rbp), %rax
0000000000025325	movq	%rax, -0x40(%rbp)
0000000000025329	movq	-0x70(%rbp), %rax
000000000002532d	movq	(%rax), %rdi
0000000000025330	leaq	-0x8(%rbp), %rsi
0000000000025334	movq	%rdi, -0x98(%rbp)
000000000002533b	movq	%rsi, %rdi
000000000002533e	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000025343	movq	%rax, -0xa0(%rbp)
000000000002534a	jmp	0x2534f
000000000002534f	movq	-0xa0(%rbp), %rax
0000000000025356	movq	(%rax), %rsi
0000000000025359	movq	-0x38(%rbp), %rdx
000000000002535d	movq	-0x70(%rbp), %rdi
0000000000025361	movq	%rsi, -0xa8(%rbp)
0000000000025368	movq	%rdx, -0xb0(%rbp)
000000000002536f	callq	0x27570 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
0000000000025374	movq	%rax, -0xb8(%rbp)
000000000002537b	jmp	0x25380
0000000000025380	leaq	-0x50(%rbp), %rax
0000000000025384	movq	%rax, %rdi
0000000000025387	movq	-0xb8(%rbp), %rsi
000000000002538e	movq	%rax, -0xc0(%rbp)
0000000000025395	callq	0x274ce ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000002539a	movq	-0x98(%rbp), %rdi
00000000000253a1	movq	-0xa8(%rbp), %rsi
00000000000253a8	movq	-0xb0(%rbp), %rdx
00000000000253af	movq	-0xc0(%rbp), %rcx
00000000000253b6	callq	0x27876 ## symbol stub for: __ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E
00000000000253bb	movq	%rax, -0xc8(%rbp)
00000000000253c2	jmp	0x253c7
00000000000253c7	movq	-0xc8(%rbp), %rax
00000000000253ce	movq	%rax, -0x40(%rbp)
00000000000253d2	leaq	-0x50(%rbp), %rdi
00000000000253d6	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000253db	movq	-0x40(%rbp), %rsi
00000000000253df	movq	-0x18(%rbp), %rdx
00000000000253e3	movq	-0x70(%rbp), %rdi
00000000000253e7	callq	0x2727c ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE9constructEPS2_RKS2_
00000000000253ec	jmp	0x253f1
00000000000253f1	movq	-0x40(%rbp), %rax
00000000000253f5	addq	$0x8, %rax
00000000000253f9	movq	%rax, -0x40(%rbp)
00000000000253fd	leaq	-0x8(%rbp), %rdi
0000000000025401	callq	0x273a2 ## symbol stub for: __ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv
0000000000025406	movq	%rax, -0xd0(%rbp)
000000000002540d	jmp	0x25412
0000000000025412	movq	-0xd0(%rbp), %rax
0000000000025419	movq	(%rax), %rdi
000000000002541c	movq	-0x70(%rbp), %rcx
0000000000025420	movq	0x8(%rcx), %rsi
0000000000025424	movq	-0x40(%rbp), %rdx
0000000000025428	movq	%rdi, -0xd8(%rbp)
000000000002542f	movq	%rcx, %rdi
0000000000025432	movq	%rsi, -0xe0(%rbp)
0000000000025439	movq	%rdx, -0xe8(%rbp)
0000000000025440	callq	0x27570 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
0000000000025445	movq	%rax, -0xf0(%rbp)
000000000002544c	jmp	0x25451
0000000000025451	leaq	-0x58(%rbp), %rax
0000000000025455	movq	%rax, %rdi
0000000000025458	movq	-0xf0(%rbp), %rsi
000000000002545f	movq	%rax, -0xf8(%rbp)
0000000000025466	callq	0x274ce ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
000000000002546b	movq	-0xd8(%rbp), %rdi
0000000000025472	movq	-0xe0(%rbp), %rsi
0000000000025479	movq	-0xe8(%rbp), %rdx
0000000000025480	movq	-0xf8(%rbp), %rcx
0000000000025487	callq	0x27876 ## symbol stub for: __ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E
000000000002548c	movq	%rax, -0x100(%rbp)
0000000000025493	jmp	0x25498
0000000000025498	movq	-0x100(%rbp), %rax
000000000002549f	movq	%rax, -0x40(%rbp)
00000000000254a3	leaq	-0x58(%rbp), %rdi
00000000000254a7	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000254ac	jmp	0x255b7
00000000000254b1	movl	%edx, %ecx
00000000000254b3	movq	%rax, -0x48(%rbp)
00000000000254b7	movl	%ecx, -0x4c(%rbp)
00000000000254ba	jmp	0x254e8
00000000000254bf	movl	%edx, %ecx
00000000000254c1	movq	%rax, -0x48(%rbp)
00000000000254c5	movl	%ecx, -0x4c(%rbp)
00000000000254c8	leaq	-0x50(%rbp), %rdi
00000000000254cc	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000254d1	jmp	0x254e8
00000000000254d6	movl	%edx, %ecx
00000000000254d8	movq	%rax, -0x48(%rbp)
00000000000254dc	movl	%ecx, -0x4c(%rbp)
00000000000254df	leaq	-0x58(%rbp), %rdi
00000000000254e3	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000254e8	movq	-0x48(%rbp), %rdi
00000000000254ec	callq	0x27942 ## symbol stub for: ___cxa_begin_catch
00000000000254f1	movq	-0x38(%rbp), %rdi
00000000000254f5	movq	-0x40(%rbp), %rsi
00000000000254f9	movq	-0x70(%rbp), %rcx
00000000000254fd	movq	%rdi, -0x108(%rbp)
0000000000025504	movq	%rcx, %rdi
0000000000025507	movq	%rax, -0x110(%rbp)
000000000002550e	movq	%rsi, -0x118(%rbp)
0000000000025515	callq	0x27570 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
000000000002551a	movq	%rax, -0x120(%rbp)
0000000000025521	jmp	0x25526
0000000000025526	leaq	-0x60(%rbp), %rax
000000000002552a	movq	%rax, %rdi
000000000002552d	movq	-0x120(%rbp), %rsi
0000000000025534	movq	%rax, -0x128(%rbp)
000000000002553b	callq	0x274ce ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
0000000000025540	movq	-0x108(%rbp), %rdi
0000000000025547	movq	-0x118(%rbp), %rsi
000000000002554e	movq	-0x128(%rbp), %rdx
0000000000025555	callq	0x278e8 ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E
000000000002555a	jmp	0x2555f
000000000002555f	leaq	-0x60(%rbp), %rdi
0000000000025563	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000025568	movq	-0x38(%rbp), %rsi
000000000002556c	movq	-0x30(%rbp), %rdx
0000000000025570	movq	-0x70(%rbp), %rdi
0000000000025574	callq	0x2756a ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000025579	jmp	0x2557e
000000000002557e	callq	0x2795a ## symbol stub for: ___cxa_rethrow
0000000000025583	jmp	0x2569c
0000000000025588	movl	%edx, %ecx
000000000002558a	movq	%rax, -0x48(%rbp)
000000000002558e	movl	%ecx, -0x4c(%rbp)
0000000000025591	jmp	0x255a8
0000000000025596	movl	%edx, %ecx
0000000000025598	movq	%rax, -0x48(%rbp)
000000000002559c	movl	%ecx, -0x4c(%rbp)
000000000002559f	leaq	-0x60(%rbp), %rdi
00000000000255a3	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
00000000000255a8	callq	0x2794e ## symbol stub for: ___cxa_end_catch
00000000000255ad	jmp	0x255b2
00000000000255b2	jmp	0x25682
00000000000255b7	movq	-0x70(%rbp), %rax
00000000000255bb	movq	(%rax), %rdi
00000000000255be	movq	0x8(%rax), %rsi
00000000000255c2	movq	%rdi, -0x130(%rbp)
00000000000255c9	movq	%rax, %rdi
00000000000255cc	movq	%rsi, -0x138(%rbp)
00000000000255d3	callq	0x27570 ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
00000000000255d8	leaq	-0x68(%rbp), %rsi
00000000000255dc	movq	%rsi, %rdi
00000000000255df	movq	%rsi, -0x140(%rbp)
00000000000255e6	movq	%rax, %rsi
00000000000255e9	callq	0x274ce ## symbol stub for: __ZNSaIP13BaseContainerEC1ERKS1_
00000000000255ee	movq	-0x130(%rbp), %rdi
00000000000255f5	movq	-0x138(%rbp), %rsi
00000000000255fc	movq	-0x140(%rbp), %rdx
0000000000025603	callq	0x278e8 ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E
0000000000025608	jmp	0x2560d
000000000002560d	leaq	-0x68(%rbp), %rdi
0000000000025611	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000025616	movq	-0x70(%rbp), %rdi
000000000002561a	movq	-0x70(%rbp), %rax
000000000002561e	movq	(%rax), %rsi
0000000000025621	movq	0x10(%rax), %rcx
0000000000025625	movq	(%rax), %rdx
0000000000025628	subq	%rdx, %rcx
000000000002562b	sarq	$0x3, %rcx
000000000002562f	movq	%rcx, %rdx
0000000000025632	callq	0x2756a ## symbol stub for: __ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m
0000000000025637	movq	-0x38(%rbp), %rax
000000000002563b	movq	-0x70(%rbp), %rcx
000000000002563f	movq	%rax, (%rcx)
0000000000025642	movq	-0x40(%rbp), %rax
0000000000025646	movq	%rax, 0x8(%rcx)
000000000002564a	movq	-0x38(%rbp), %rax
000000000002564e	movq	-0x30(%rbp), %rdx
0000000000025652	shlq	$0x3, %rdx
0000000000025656	addq	%rdx, %rax
0000000000025659	movq	%rax, 0x10(%rcx)
000000000002565d	jmp	0x25679
0000000000025662	movl	%edx, %ecx
0000000000025664	movq	%rax, -0x48(%rbp)
0000000000025668	movl	%ecx, -0x4c(%rbp)
000000000002566b	leaq	-0x68(%rbp), %rdi
000000000002566f	callq	0x274e6 ## symbol stub for: __ZNSaIP13BaseContainerED1Ev
0000000000025674	jmp	0x25682
0000000000025679	addq	$0x150, %rsp
0000000000025680	popq	%rbp
0000000000025681	retq
0000000000025682	movq	-0x48(%rbp), %rdi
0000000000025686	callq	0x271b0 ## symbol stub for: __Unwind_Resume
000000000002568b	ud2
000000000002568d	movq	%rax, %rdi
0000000000025690	movq	%rdx, -0x148(%rbp)
0000000000025697	callq	___clang_call_terminate
000000000002569c	ud2
000000000002569e	nop
__ZNSt6vectorIP13BaseContainerSaIS1_EE3endEv:
00000000000256a0	pushq	%rbp
00000000000256a1	movq	%rsp, %rbp
00000000000256a4	subq	$0x20, %rsp
00000000000256a8	movq	%rdi, -0x10(%rbp)
00000000000256ac	movq	-0x10(%rbp), %rdi
00000000000256b0	addq	$0x8, %rdi
00000000000256b4	leaq	-0x8(%rbp), %rax
00000000000256b8	movq	%rdi, -0x18(%rbp)
00000000000256bc	movq	%rax, %rdi
00000000000256bf	movq	-0x18(%rbp), %rsi
00000000000256c3	callq	0x2730c ## symbol stub for: __ZN9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEC1ERKS3_
00000000000256c8	movq	-0x8(%rbp), %rax
00000000000256cc	addq	$0x20, %rsp
00000000000256d0	popq	%rbp
00000000000256d1	retq
00000000000256d2	nopw	%cs:(%rax,%rax)
00000000000256dc	nopl	(%rax)
__ZSt13copy_backwardIPP13BaseContainerS2_ET0_T_S4_S3_:
00000000000256e0	pushq	%rbp
00000000000256e1	movq	%rsp, %rbp
00000000000256e4	subq	$0x20, %rsp
00000000000256e8	movq	%rdi, -0x8(%rbp)
00000000000256ec	movq	%rsi, -0x10(%rbp)
00000000000256f0	movq	%rdx, -0x18(%rbp)
00000000000256f4	movb	$0x0, -0x19(%rbp)
00000000000256f8	movb	$0x0, -0x1a(%rbp)
00000000000256fc	movq	-0x8(%rbp), %rdi
0000000000025700	movq	-0x10(%rbp), %rsi
0000000000025704	movq	-0x18(%rbp), %rdx
0000000000025708	callq	0x275e2 ## symbol stub for: __ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPP13BaseContainerS4_EET0_T_S6_S5_
000000000002570d	addq	$0x20, %rsp
0000000000025711	popq	%rbp
0000000000025712	retq
0000000000025713	nopw	%cs:(%rax,%rax)
000000000002571d	nopl	(%rax)
__ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEE4baseEv:
0000000000025720	pushq	%rbp
0000000000025721	movq	%rsp, %rbp
0000000000025724	movq	%rdi, -0x8(%rbp)
0000000000025728	movq	-0x8(%rbp), %rax
000000000002572c	popq	%rbp
000000000002572d	retq
000000000002572e	nop
__ZNK9__gnu_cxx17__normal_iteratorIPP13BaseContainerSt6vectorIS2_SaIS2_EEEdeEv:
0000000000025730	pushq	%rbp
0000000000025731	movq	%rsp, %rbp
0000000000025734	movq	%rdi, -0x8(%rbp)
0000000000025738	movq	-0x8(%rbp), %rdi
000000000002573c	movq	(%rdi), %rax
000000000002573f	popq	%rbp
0000000000025740	retq
0000000000025741	nopw	%cs:(%rax,%rax)
000000000002574b	nopl	(%rax,%rax)
__ZNKSt6vectorIP13BaseContainerSaIS1_EE4sizeEv:
0000000000025750	pushq	%rbp
0000000000025751	movq	%rsp, %rbp
0000000000025754	movq	%rdi, -0x8(%rbp)
0000000000025758	movq	-0x8(%rbp), %rdi
000000000002575c	movq	0x8(%rdi), %rax
0000000000025760	movq	(%rdi), %rdi
0000000000025763	subq	%rdi, %rax
0000000000025766	sarq	$0x3, %rax
000000000002576a	popq	%rbp
000000000002576b	retq
000000000002576c	nopl	(%rax)
__ZNKSt6vectorIP13BaseContainerSaIS1_EE8max_sizeEv:
0000000000025770	pushq	%rbp
0000000000025771	movq	%rsp, %rbp
0000000000025774	subq	$0x10, %rsp
0000000000025778	movq	%rdi, -0x8(%rbp)
000000000002577c	movq	-0x8(%rbp), %rdi
0000000000025780	callq	0x273de ## symbol stub for: __ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv
0000000000025785	movq	%rax, %rdi
0000000000025788	callq	0x27366 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv
000000000002578d	addq	$0x10, %rsp
0000000000025791	popq	%rbp
0000000000025792	retq
0000000000025793	nopw	%cs:(%rax,%rax)
000000000002579d	nopl	(%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE11_M_allocateEm:
00000000000257a0	pushq	%rbp
00000000000257a1	movq	%rsp, %rbp
00000000000257a4	subq	$0x20, %rsp
00000000000257a8	xorl	%eax, %eax
00000000000257aa	movl	%eax, %edx
00000000000257ac	movq	%rdi, -0x8(%rbp)
00000000000257b0	movq	%rsi, -0x10(%rbp)
00000000000257b4	movq	-0x8(%rbp), %rsi
00000000000257b8	movq	-0x10(%rbp), %rdi
00000000000257bc	movq	%rdi, -0x18(%rbp)
00000000000257c0	movq	%rsi, %rdi
00000000000257c3	movq	-0x18(%rbp), %rsi
00000000000257c7	callq	0x27276 ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE8allocateEmPKv
00000000000257cc	addq	$0x20, %rsp
00000000000257d0	popq	%rbp
00000000000257d1	retq
00000000000257d2	nopw	%cs:(%rax,%rax)
00000000000257dc	nopl	(%rax)
__ZSt22__uninitialized_copy_aIPP13BaseContainerS2_S1_ET0_T_S4_S3_SaIT1_E:
00000000000257e0	pushq	%rbp
00000000000257e1	movq	%rsp, %rbp
00000000000257e4	subq	$0x20, %rsp
00000000000257e8	movq	%rdi, -0x8(%rbp)
00000000000257ec	movq	%rsi, -0x10(%rbp)
00000000000257f0	movq	%rdx, -0x18(%rbp)
00000000000257f4	movq	-0x8(%rbp), %rdi
00000000000257f8	movq	-0x10(%rbp), %rsi
00000000000257fc	movq	-0x18(%rbp), %rdx
0000000000025800	movq	%rcx, -0x20(%rbp)
0000000000025804	callq	0x2783a ## symbol stub for: __ZSt18uninitialized_copyIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000025809	addq	$0x20, %rsp
000000000002580d	popq	%rbp
000000000002580e	retq
000000000002580f	nop
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv:
0000000000025810	pushq	%rbp
0000000000025811	movq	%rsp, %rbp
0000000000025814	movq	%rdi, -0x8(%rbp)
0000000000025818	movq	-0x8(%rbp), %rdi
000000000002581c	movq	%rdi, %rax
000000000002581f	popq	%rbp
0000000000025820	retq
0000000000025821	nopw	%cs:(%rax,%rax)
000000000002582b	nopl	(%rax,%rax)
__ZSt8_DestroyIPP13BaseContainerS1_EvT_S3_SaIT0_E:
0000000000025830	pushq	%rbp
0000000000025831	movq	%rsp, %rbp
0000000000025834	subq	$0x20, %rsp
0000000000025838	movq	%rdi, -0x8(%rbp)
000000000002583c	movq	%rsi, -0x10(%rbp)
0000000000025840	movq	-0x8(%rbp), %rdi
0000000000025844	movq	-0x10(%rbp), %rsi
0000000000025848	movq	%rdx, -0x18(%rbp)
000000000002584c	callq	0x278e2 ## symbol stub for: __ZSt8_DestroyIPP13BaseContainerEvT_S3_
0000000000025851	addq	$0x20, %rsp
0000000000025855	popq	%rbp
0000000000025856	retq
0000000000025857	nopw	(%rax,%rax)
__ZNSt12_Vector_baseIP13BaseContainerSaIS1_EE13_M_deallocateEPS1_m:
0000000000025860	pushq	%rbp
0000000000025861	movq	%rsp, %rbp
0000000000025864	subq	$0x20, %rsp
0000000000025868	movq	%rdi, -0x8(%rbp)
000000000002586c	movq	%rsi, -0x10(%rbp)
0000000000025870	movq	%rdx, -0x18(%rbp)
0000000000025874	movq	-0x8(%rbp), %rdx
0000000000025878	cmpq	$0x0, -0x10(%rbp)
000000000002587d	movq	%rdx, -0x20(%rbp)
0000000000025881	je	0x2589b
0000000000025887	movq	-0x20(%rbp), %rax
000000000002588b	movq	-0x10(%rbp), %rsi
000000000002588f	movq	-0x18(%rbp), %rdx
0000000000025893	movq	%rax, %rdi
0000000000025896	callq	0x2726a ## symbol stub for: __ZN9__gnu_cxx13new_allocatorIP13BaseContainerE10deallocateEPS2_m
000000000002589b	addq	$0x20, %rsp
000000000002589f	popq	%rbp
00000000000258a0	retq
00000000000258a1	nopw	%cs:(%rax,%rax)
00000000000258ab	nopl	(%rax,%rax)
__ZNSt22__copy_backward_normalILb0ELb0EE10__copy_b_nIPP13BaseContainerS4_EET0_T_S6_S5_:
00000000000258b0	pushq	%rbp
00000000000258b1	movq	%rsp, %rbp
00000000000258b4	subq	$0x20, %rsp
00000000000258b8	movq	%rdi, -0x8(%rbp)
00000000000258bc	movq	%rsi, -0x10(%rbp)
00000000000258c0	movq	%rdx, -0x18(%rbp)
00000000000258c4	movq	-0x8(%rbp), %rdi
00000000000258c8	movq	-0x10(%rbp), %rsi
00000000000258cc	movq	-0x18(%rbp), %rdx
00000000000258d0	callq	0x2784c ## symbol stub for: __ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_
00000000000258d5	addq	$0x20, %rsp
00000000000258d9	popq	%rbp
00000000000258da	retq
00000000000258db	nopl	(%rax,%rax)
__ZSt19__copy_backward_auxIPP13BaseContainerS2_ET0_T_S4_S3_:
00000000000258e0	pushq	%rbp
00000000000258e1	movq	%rsp, %rbp
00000000000258e4	subq	$0x20, %rsp
00000000000258e8	movq	%rdi, -0x8(%rbp)
00000000000258ec	movq	%rsi, -0x10(%rbp)
00000000000258f0	movq	%rdx, -0x18(%rbp)
00000000000258f4	movb	$0x1, -0x19(%rbp)
00000000000258f8	movq	-0x8(%rbp), %rdi
00000000000258fc	movq	-0x10(%rbp), %rsi
0000000000025900	movq	-0x18(%rbp), %rdx
0000000000025904	callq	0x275c4 ## symbol stub for: __ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE8__copy_bIP13BaseContainerEEPT_PKS5_S8_S6_
0000000000025909	addq	$0x20, %rsp
000000000002590d	popq	%rbp
000000000002590e	retq
000000000002590f	nop
__ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE8__copy_bIP13BaseContainerEEPT_PKS5_S8_S6_:
0000000000025910	pushq	%rbp
0000000000025911	movq	%rsp, %rbp
0000000000025914	subq	$0x40, %rsp
0000000000025918	xorl	%eax, %eax
000000000002591a	movl	%eax, %ecx
000000000002591c	movq	%rdi, -0x8(%rbp)
0000000000025920	movq	%rsi, -0x10(%rbp)
0000000000025924	movq	%rdx, -0x18(%rbp)
0000000000025928	movq	-0x10(%rbp), %rdx
000000000002592c	movq	-0x8(%rbp), %rsi
0000000000025930	subq	%rsi, %rdx
0000000000025933	sarq	$0x3, %rdx
0000000000025937	movq	%rdx, -0x20(%rbp)
000000000002593b	movq	-0x18(%rbp), %rdx
000000000002593f	movq	%rcx, %rsi
0000000000025942	subq	-0x20(%rbp), %rsi
0000000000025946	shlq	$0x3, %rsi
000000000002594a	addq	%rsi, %rdx
000000000002594d	movq	-0x8(%rbp), %rsi
0000000000025951	movq	-0x20(%rbp), %rdi
0000000000025955	shlq	$0x3, %rdi
0000000000025959	movq	%rdi, -0x28(%rbp)
000000000002595d	movq	%rdx, %rdi
0000000000025960	movq	-0x28(%rbp), %rdx
0000000000025964	movq	%rcx, -0x30(%rbp)
0000000000025968	callq	0x279c6 ## symbol stub for: _memmove
000000000002596d	movq	-0x18(%rbp), %rcx
0000000000025971	movq	-0x30(%rbp), %rdx
0000000000025975	subq	-0x20(%rbp), %rdx
0000000000025979	shlq	$0x3, %rdx
000000000002597d	addq	%rdx, %rcx
0000000000025980	movq	%rax, -0x38(%rbp)
0000000000025984	movq	%rcx, %rax
0000000000025987	addq	$0x40, %rsp
000000000002598b	popq	%rbp
000000000002598c	retq
000000000002598d	nopl	(%rax)
__ZNKSt12_Vector_baseIP13BaseContainerSaIS1_EE19_M_get_Tp_allocatorEv:
0000000000025990	pushq	%rbp
0000000000025991	movq	%rsp, %rbp
0000000000025994	movq	%rdi, -0x8(%rbp)
0000000000025998	movq	-0x8(%rbp), %rdi
000000000002599c	movq	%rdi, %rax
000000000002599f	popq	%rbp
00000000000259a0	retq
00000000000259a1	nopw	%cs:(%rax,%rax)
00000000000259ab	nopl	(%rax,%rax)
__ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv:
00000000000259b0	pushq	%rbp
00000000000259b1	movq	%rsp, %rbp
00000000000259b4	movq	%rdi, -0x8(%rbp)
00000000000259b8	movabsq	$0x1fffffffffffffff, %rax
00000000000259c2	popq	%rbp
00000000000259c3	retq
00000000000259c4	nopw	%cs:(%rax,%rax)
00000000000259ce	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE8allocateEmPKv:
00000000000259d0	pushq	%rbp
00000000000259d1	movq	%rsp, %rbp
00000000000259d4	subq	$0x20, %rsp
00000000000259d8	movq	%rdi, -0x8(%rbp)
00000000000259dc	movq	%rsi, -0x10(%rbp)
00000000000259e0	movq	%rdx, -0x18(%rbp)
00000000000259e4	movq	-0x8(%rbp), %rdi
00000000000259e8	movq	-0x10(%rbp), %rdx
00000000000259ec	movq	%rdx, -0x20(%rbp)
00000000000259f0	callq	0x27366 ## symbol stub for: __ZNK9__gnu_cxx13new_allocatorIP13BaseContainerE8max_sizeEv
00000000000259f5	movq	-0x20(%rbp), %rdx
00000000000259f9	cmpq	%rax, %rdx
00000000000259fc	jbe	0x25a07
0000000000025a02	callq	0x27816 ## symbol stub for: __ZSt17__throw_bad_allocv
0000000000025a07	movq	-0x10(%rbp), %rax
0000000000025a0b	shlq	$0x3, %rax
0000000000025a0f	movq	%rax, %rdi
0000000000025a12	callq	0x27924 ## symbol stub for: __Znwm
0000000000025a17	addq	$0x20, %rsp
0000000000025a1b	popq	%rbp
0000000000025a1c	retq
0000000000025a1d	nopl	(%rax)
__ZSt18uninitialized_copyIPP13BaseContainerS2_ET0_T_S4_S3_:
0000000000025a20	pushq	%rbp
0000000000025a21	movq	%rsp, %rbp
0000000000025a24	subq	$0x20, %rsp
0000000000025a28	movq	%rdi, -0x8(%rbp)
0000000000025a2c	movq	%rsi, -0x10(%rbp)
0000000000025a30	movq	%rdx, -0x18(%rbp)
0000000000025a34	movq	-0x8(%rbp), %rdi
0000000000025a38	movq	-0x10(%rbp), %rsi
0000000000025a3c	movq	-0x18(%rbp), %rdx
0000000000025a40	callq	0x27894 ## symbol stub for: __ZSt24__uninitialized_copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_St11__true_type
0000000000025a45	addq	$0x20, %rsp
0000000000025a49	popq	%rbp
0000000000025a4a	retq
0000000000025a4b	nopl	(%rax,%rax)
__ZSt24__uninitialized_copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_St11__true_type:
0000000000025a50	pushq	%rbp
0000000000025a51	movq	%rsp, %rbp
0000000000025a54	subq	$0x20, %rsp
0000000000025a58	movq	%rdi, -0x10(%rbp)
0000000000025a5c	movq	%rsi, -0x18(%rbp)
0000000000025a60	movq	%rdx, -0x20(%rbp)
0000000000025a64	movq	-0x10(%rbp), %rdi
0000000000025a68	movq	-0x18(%rbp), %rsi
0000000000025a6c	movq	-0x20(%rbp), %rdx
0000000000025a70	callq	0x278b2 ## symbol stub for: __ZSt4copyIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000025a75	addq	$0x20, %rsp
0000000000025a79	popq	%rbp
0000000000025a7a	retq
0000000000025a7b	nopl	(%rax,%rax)
__ZSt4copyIPP13BaseContainerS2_ET0_T_S4_S3_:
0000000000025a80	pushq	%rbp
0000000000025a81	movq	%rsp, %rbp
0000000000025a84	subq	$0x20, %rsp
0000000000025a88	movq	%rdi, -0x8(%rbp)
0000000000025a8c	movq	%rsi, -0x10(%rbp)
0000000000025a90	movq	%rdx, -0x18(%rbp)
0000000000025a94	movb	$0x0, -0x19(%rbp)
0000000000025a98	movb	$0x0, -0x1a(%rbp)
0000000000025a9c	movq	-0x8(%rbp), %rdi
0000000000025aa0	movq	-0x10(%rbp), %rsi
0000000000025aa4	movq	-0x18(%rbp), %rdx
0000000000025aa8	callq	0x275a0 ## symbol stub for: __ZNSt13__copy_normalILb0ELb0EE8__copy_nIPP13BaseContainerS4_EET0_T_S6_S5_
0000000000025aad	addq	$0x20, %rsp
0000000000025ab1	popq	%rbp
0000000000025ab2	retq
0000000000025ab3	nopw	%cs:(%rax,%rax)
0000000000025abd	nopl	(%rax)
__ZNSt13__copy_normalILb0ELb0EE8__copy_nIPP13BaseContainerS4_EET0_T_S6_S5_:
0000000000025ac0	pushq	%rbp
0000000000025ac1	movq	%rsp, %rbp
0000000000025ac4	subq	$0x20, %rsp
0000000000025ac8	movq	%rdi, -0x8(%rbp)
0000000000025acc	movq	%rsi, -0x10(%rbp)
0000000000025ad0	movq	%rdx, -0x18(%rbp)
0000000000025ad4	movq	-0x8(%rbp), %rdi
0000000000025ad8	movq	-0x10(%rbp), %rsi
0000000000025adc	movq	-0x18(%rbp), %rdx
0000000000025ae0	callq	0x277e6 ## symbol stub for: __ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_
0000000000025ae5	addq	$0x20, %rsp
0000000000025ae9	popq	%rbp
0000000000025aea	retq
0000000000025aeb	nopl	(%rax,%rax)
__ZSt10__copy_auxIPP13BaseContainerS2_ET0_T_S4_S3_:
0000000000025af0	pushq	%rbp
0000000000025af1	movq	%rsp, %rbp
0000000000025af4	subq	$0x20, %rsp
0000000000025af8	movq	%rdi, -0x8(%rbp)
0000000000025afc	movq	%rsi, -0x10(%rbp)
0000000000025b00	movq	%rdx, -0x18(%rbp)
0000000000025b04	movb	$0x1, -0x19(%rbp)
0000000000025b08	movq	-0x8(%rbp), %rdi
0000000000025b0c	movq	-0x10(%rbp), %rsi
0000000000025b10	movq	-0x18(%rbp), %rdx
0000000000025b14	callq	0x2763c ## symbol stub for: __ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP13BaseContainerEEPT_PKS5_S8_S6_
0000000000025b19	addq	$0x20, %rsp
0000000000025b1d	popq	%rbp
0000000000025b1e	retq
0000000000025b1f	nop
__ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIP13BaseContainerEEPT_PKS5_S8_S6_:
0000000000025b20	pushq	%rbp
0000000000025b21	movq	%rsp, %rbp
0000000000025b24	subq	$0x30, %rsp
0000000000025b28	movq	%rdi, -0x8(%rbp)
0000000000025b2c	movq	%rsi, -0x10(%rbp)
0000000000025b30	movq	%rdx, -0x18(%rbp)
0000000000025b34	movq	-0x18(%rbp), %rdx
0000000000025b38	movq	-0x8(%rbp), %rsi
0000000000025b3c	movq	-0x10(%rbp), %rdi
0000000000025b40	movq	-0x8(%rbp), %rax
0000000000025b44	subq	%rax, %rdi
0000000000025b47	sarq	$0x3, %rdi
0000000000025b4b	shlq	$0x3, %rdi
0000000000025b4f	movq	%rdi, -0x20(%rbp)
0000000000025b53	movq	%rdx, %rdi
0000000000025b56	movq	-0x20(%rbp), %rdx
0000000000025b5a	callq	0x279c6 ## symbol stub for: _memmove
0000000000025b5f	movq	-0x18(%rbp), %rdx
0000000000025b63	movq	-0x10(%rbp), %rsi
0000000000025b67	movq	-0x8(%rbp), %rdi
0000000000025b6b	subq	%rdi, %rsi
0000000000025b6e	sarq	$0x3, %rsi
0000000000025b72	shlq	$0x3, %rsi
0000000000025b76	addq	%rsi, %rdx
0000000000025b79	movq	%rax, -0x28(%rbp)
0000000000025b7d	movq	%rdx, %rax
0000000000025b80	addq	$0x30, %rsp
0000000000025b84	popq	%rbp
0000000000025b85	retq
0000000000025b86	nopw	%cs:(%rax,%rax)
__ZSt8_DestroyIPP13BaseContainerEvT_S3_:
0000000000025b90	pushq	%rbp
0000000000025b91	movq	%rsp, %rbp
0000000000025b94	subq	$0x20, %rsp
0000000000025b98	movq	%rdi, -0x8(%rbp)
0000000000025b9c	movq	%rsi, -0x10(%rbp)
0000000000025ba0	movq	-0x8(%rbp), %rdi
0000000000025ba4	movq	-0x10(%rbp), %rsi
0000000000025ba8	callq	0x277f2 ## symbol stub for: __ZSt13__destroy_auxIPP13BaseContainerEvT_S3_St11__true_type
0000000000025bad	addq	$0x20, %rsp
0000000000025bb1	popq	%rbp
0000000000025bb2	retq
0000000000025bb3	nopw	%cs:(%rax,%rax)
0000000000025bbd	nopl	(%rax)
__ZSt13__destroy_auxIPP13BaseContainerEvT_S3_St11__true_type:
0000000000025bc0	pushq	%rbp
0000000000025bc1	movq	%rsp, %rbp
0000000000025bc4	movq	%rdi, -0x10(%rbp)
0000000000025bc8	movq	%rsi, -0x18(%rbp)
0000000000025bcc	popq	%rbp
0000000000025bcd	retq
0000000000025bce	nop
__ZN9__gnu_cxx13new_allocatorIP13BaseContainerE10deallocateEPS2_m:
0000000000025bd0	pushq	%rbp
0000000000025bd1	movq	%rsp, %rbp
0000000000025bd4	subq	$0x20, %rsp
0000000000025bd8	movq	%rdi, -0x8(%rbp)
0000000000025bdc	movq	%rsi, -0x10(%rbp)
0000000000025be0	movq	%rdx, -0x18(%rbp)
0000000000025be4	movq	-0x10(%rbp), %rdx
0000000000025be8	movq	%rdx, %rdi
0000000000025beb	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000025bf0	addq	$0x20, %rsp
0000000000025bf4	popq	%rbp
0000000000025bf5	retq
0000000000025bf6	nopw	%cs:(%rax,%rax)
___cxx_global_var_init:
0000000000025c00	pushq	%rbp
0000000000025c01	movq	%rsp, %rbp
0000000000025c04	subq	$0x10, %rsp
0000000000025c08	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
0000000000025c0f	callq	0x277c8 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
0000000000025c14	movq	0x4c405(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
0000000000025c1b	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
0000000000025c22	leaq	-0x25c29(%rip), %rdx
0000000000025c29	callq	0x2793c ## symbol stub for: ___cxa_atexit
0000000000025c2e	movl	%eax, -0x4(%rbp)
0000000000025c31	addq	$0x10, %rsp
0000000000025c35	popq	%rbp
0000000000025c36	retq
0000000000025c37	nopw	(%rax,%rax)
___cxx_global_var_init.1:
0000000000025c40	pushq	%rbp
0000000000025c41	movq	%rsp, %rbp
0000000000025c44	subq	$0x10, %rsp
0000000000025c48	leaq	__ZN7cocos2dL11CCPointZeroE(%rip), %rdi ## cocos2d::CCPointZero
0000000000025c4f	xorps	%xmm0, %xmm0
0000000000025c52	movss	%xmm0, -0x4(%rbp)
0000000000025c57	movss	-0x4(%rbp), %xmm1
0000000000025c5c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000025c61	addq	$0x10, %rsp
0000000000025c65	popq	%rbp
0000000000025c66	retq
0000000000025c67	nopw	(%rax,%rax)
___cxx_global_var_init.2:
0000000000025c70	pushq	%rbp
0000000000025c71	movq	%rsp, %rbp
0000000000025c74	subq	$0x10, %rsp
0000000000025c78	leaq	__ZN7cocos2dL10CCSizeZeroE(%rip), %rdi ## cocos2d::CCSizeZero
0000000000025c7f	xorps	%xmm0, %xmm0
0000000000025c82	movss	%xmm0, -0x4(%rbp)
0000000000025c87	movss	-0x4(%rbp), %xmm1
0000000000025c8c	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
0000000000025c91	addq	$0x10, %rsp
0000000000025c95	popq	%rbp
0000000000025c96	retq
0000000000025c97	nopw	(%rax,%rax)
___cxx_global_var_init.3:
0000000000025ca0	pushq	%rbp
0000000000025ca1	movq	%rsp, %rbp
0000000000025ca4	subq	$0x10, %rsp
0000000000025ca8	leaq	__ZN7cocos2dL10CCRectZeroE(%rip), %rdi ## cocos2d::CCRectZero
0000000000025caf	xorps	%xmm0, %xmm0
0000000000025cb2	movss	%xmm0, -0x4(%rbp)
0000000000025cb7	movss	-0x4(%rbp), %xmm1
0000000000025cbc	movss	-0x4(%rbp), %xmm2
0000000000025cc1	movss	-0x4(%rbp), %xmm3
0000000000025cc6	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
0000000000025ccb	addq	$0x10, %rsp
0000000000025ccf	popq	%rbp
0000000000025cd0	retq
0000000000025cd1	nopw	%cs:(%rax,%rax)
0000000000025cdb	nopl	(%rax,%rax)
___cxx_global_var_init.4:
0000000000025ce0	pushq	%rbp
0000000000025ce1	movq	%rsp, %rbp
0000000000025ce4	leaq	__ZN7cocos2d2uiL10MarginZeroE(%rip), %rdi ## cocos2d::ui::MarginZero
0000000000025ceb	callq	__ZN7cocos2d2ui6MarginC1Ev ## cocos2d::ui::Margin::Margin()
0000000000025cf0	popq	%rbp
0000000000025cf1	retq
0000000000025cf2	nopw	%cs:(%rax,%rax)
0000000000025cfc	nopl	(%rax)
__GLOBAL__sub_I_Cacao.cpp:
0000000000025d00	pushq	%rbp
0000000000025d01	movq	%rsp, %rbp
0000000000025d04	callq	___cxx_global_var_init
0000000000025d09	callq	___cxx_global_var_init.1
0000000000025d0e	callq	___cxx_global_var_init.2
0000000000025d13	callq	___cxx_global_var_init.3
0000000000025d18	callq	___cxx_global_var_init.4
0000000000025d1d	popq	%rbp
0000000000025d1e	retq
0000000000025d1f	nop
__Z14renderCustomUIPN7cocos2d6CCNodeES1_:
0000000000025d20	pushq	%rbp
0000000000025d21	movq	%rsp, %rbp
0000000000025d24	pushq	%rbx
0000000000025d25	subq	$0x368, %rsp
0000000000025d2c	movq	%rdi, -0x10(%rbp)
0000000000025d30	movq	%rsi, -0x18(%rbp)
0000000000025d34	callq	__ZN7cocos2d10CCDirector14sharedDirectorEv ## cocos2d::CCDirector::sharedDirector()
0000000000025d39	leaq	-0x20(%rbp), %rdi
0000000000025d3d	movq	%rax, %rsi
0000000000025d40	callq	__ZN7cocos2d10CCDirector10getWinSizeEv ## cocos2d::CCDirector::getWinSize()
0000000000025d45	movss	-0x20(%rbp), %xmm0
0000000000025d4a	movss	0x42bfe(%rip), %xmm1
0000000000025d52	divss	%xmm1, %xmm0
0000000000025d56	movss	%xmm0, -0x24(%rbp)
0000000000025d5b	movss	-0x1c(%rbp), %xmm0
0000000000025d60	divss	%xmm1, %xmm0
0000000000025d64	movss	%xmm0, -0x28(%rbp)
0000000000025d69	leaq	0x45813(%rip), %rdi ## literal pool for: "New X: "
0000000000025d70	leaq	0x45814(%rip), %rax ## literal pool for: "goldFont.fnt"
0000000000025d77	movq	%rax, %rsi
0000000000025d7a	movq	%rax, -0x1c8(%rbp)
0000000000025d81	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
0000000000025d86	movq	%rax, -0x30(%rbp)
0000000000025d8a	movq	-0x30(%rbp), %rax
0000000000025d8e	movq	(%rax), %rsi
0000000000025d91	movq	0xa0(%rsi), %rsi
0000000000025d98	movss	0x42cb0(%rip), %xmm0
0000000000025da0	movq	%rax, %rdi
0000000000025da3	movss	%xmm0, -0x1cc(%rbp)
0000000000025dab	callq	*%rsi
0000000000025dad	movss	-0x24(%rbp), %xmm0
0000000000025db2	cvtss2sd	%xmm0, %xmm0
0000000000025db6	movsd	0x42c32(%rip), %xmm1
0000000000025dbe	addsd	%xmm1, %xmm0
0000000000025dc2	cvtsd2ss	%xmm0, %xmm0
0000000000025dc6	movss	-0x28(%rbp), %xmm1
0000000000025dcb	cvtss2sd	%xmm1, %xmm1
0000000000025dcf	movsd	0x42c21(%rip), %xmm2
0000000000025dd7	addsd	%xmm2, %xmm1
0000000000025ddb	cvtsd2ss	%xmm1, %xmm1
0000000000025ddf	leaq	-0x38(%rbp), %rax
0000000000025de3	movq	%rax, %rdi
0000000000025de6	movsd	%xmm2, -0x1d8(%rbp)
0000000000025dee	movq	%rax, -0x1e0(%rbp)
0000000000025df5	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000025dfa	movq	-0x30(%rbp), %rax
0000000000025dfe	movq	-0x18(%rbp), %rsi
0000000000025e02	leaq	-0x40(%rbp), %rdi
0000000000025e06	movq	%rdi, -0x1e8(%rbp)
0000000000025e0d	movq	-0x1e0(%rbp), %rdx
0000000000025e14	movq	%rax, -0x1f0(%rbp)
0000000000025e1b	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
0000000000025e20	movq	-0x1f0(%rbp), %rax
0000000000025e27	movq	(%rax), %rdx
0000000000025e2a	movq	0xb8(%rdx), %rdx
0000000000025e31	movq	%rax, %rdi
0000000000025e34	movq	-0x1e8(%rbp), %rsi
0000000000025e3b	callq	*%rdx
0000000000025e3d	movq	-0x18(%rbp), %rax
0000000000025e41	movq	-0x30(%rbp), %rsi
0000000000025e45	movq	(%rax), %rdx
0000000000025e48	movq	0x1b8(%rdx), %rdx
0000000000025e4f	movq	%rax, %rdi
0000000000025e52	callq	*%rdx
0000000000025e54	leaq	0x4573d(%rip), %rdi ## literal pool for: "New Y:"
0000000000025e5b	movq	-0x1c8(%rbp), %rsi
0000000000025e62	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
0000000000025e67	movq	%rax, -0x48(%rbp)
0000000000025e6b	movq	-0x48(%rbp), %rax
0000000000025e6f	movq	(%rax), %rdx
0000000000025e72	movq	0xa0(%rdx), %rdx
0000000000025e79	movq	%rax, %rdi
0000000000025e7c	movss	-0x1cc(%rbp), %xmm0
0000000000025e84	callq	*%rdx
0000000000025e86	movss	-0x24(%rbp), %xmm0
0000000000025e8b	cvtss2sd	%xmm0, %xmm0
0000000000025e8f	movsd	0x42b69(%rip), %xmm1
0000000000025e97	addsd	%xmm1, %xmm0
0000000000025e9b	cvtsd2ss	%xmm0, %xmm0
0000000000025e9f	movss	-0x28(%rbp), %xmm1
0000000000025ea4	cvtss2sd	%xmm1, %xmm1
0000000000025ea8	movsd	-0x1d8(%rbp), %xmm2
0000000000025eb0	addsd	%xmm2, %xmm1
0000000000025eb4	cvtsd2ss	%xmm1, %xmm1
0000000000025eb8	leaq	-0x50(%rbp), %rax
0000000000025ebc	movq	%rax, %rdi
0000000000025ebf	movq	%rax, -0x1f8(%rbp)
0000000000025ec6	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000025ecb	movq	-0x48(%rbp), %rax
0000000000025ecf	movq	-0x18(%rbp), %rsi
0000000000025ed3	leaq	-0x58(%rbp), %rdx
0000000000025ed7	movq	%rdx, %rdi
0000000000025eda	movq	-0x1f8(%rbp), %rcx
0000000000025ee1	movq	%rdx, -0x200(%rbp)
0000000000025ee8	movq	%rcx, %rdx
0000000000025eeb	movq	%rax, -0x208(%rbp)
0000000000025ef2	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
0000000000025ef7	movq	-0x208(%rbp), %rax
0000000000025efe	movq	(%rax), %rcx
0000000000025f01	movq	0xb8(%rcx), %rcx
0000000000025f08	movq	%rax, %rdi
0000000000025f0b	movq	-0x200(%rbp), %rsi
0000000000025f12	callq	*%rcx
0000000000025f14	movq	-0x18(%rbp), %rax
0000000000025f18	movq	-0x48(%rbp), %rsi
0000000000025f1c	movq	(%rax), %rcx
0000000000025f1f	movq	0x1b8(%rcx), %rcx
0000000000025f26	movq	%rax, %rdi
0000000000025f29	callq	*%rcx
0000000000025f2b	leaq	0x4566d(%rip), %rdi ## literal pool for: "Teleport Trigger"
0000000000025f32	movq	-0x1c8(%rbp), %rsi
0000000000025f39	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
0000000000025f3e	movq	%rax, -0x60(%rbp)
0000000000025f42	movq	-0x60(%rbp), %rax
0000000000025f46	movq	(%rax), %rcx
0000000000025f49	movq	0xa0(%rcx), %rcx
0000000000025f50	movss	0x42afc(%rip), %xmm0
0000000000025f58	movq	%rax, %rdi
0000000000025f5b	callq	*%rcx
0000000000025f5d	movss	-0x24(%rbp), %xmm0
0000000000025f62	cvtss2sd	%xmm0, %xmm0
0000000000025f66	xorps	%xmm1, %xmm1
0000000000025f69	addsd	%xmm1, %xmm0
0000000000025f6d	cvtsd2ss	%xmm0, %xmm0
0000000000025f71	movss	-0x28(%rbp), %xmm1
0000000000025f76	cvtss2sd	%xmm1, %xmm1
0000000000025f7a	movsd	0x42a86(%rip), %xmm2
0000000000025f82	addsd	%xmm2, %xmm1
0000000000025f86	cvtsd2ss	%xmm1, %xmm1
0000000000025f8a	leaq	-0x68(%rbp), %rax
0000000000025f8e	movq	%rax, %rdi
0000000000025f91	movq	%rax, -0x210(%rbp)
0000000000025f98	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000025f9d	movq	-0x60(%rbp), %rax
0000000000025fa1	movq	-0x18(%rbp), %rsi
0000000000025fa5	leaq	-0x70(%rbp), %rcx
0000000000025fa9	movq	%rcx, %rdi
0000000000025fac	movq	-0x210(%rbp), %rdx
0000000000025fb3	movq	%rax, -0x218(%rbp)
0000000000025fba	movq	%rcx, -0x220(%rbp)
0000000000025fc1	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
0000000000025fc6	movq	-0x218(%rbp), %rax
0000000000025fcd	movq	(%rax), %rcx
0000000000025fd0	movq	0xb8(%rcx), %rcx
0000000000025fd7	movq	%rax, %rdi
0000000000025fda	movq	-0x220(%rbp), %rsi
0000000000025fe1	callq	*%rcx
0000000000025fe3	movq	-0x18(%rbp), %rax
0000000000025fe7	movq	-0x60(%rbp), %rsi
0000000000025feb	movq	(%rax), %rcx
0000000000025fee	movq	0x1b8(%rcx), %rcx
0000000000025ff5	movq	%rax, %rdi
0000000000025ff8	callq	*%rcx
0000000000025ffa	leaq	0x455af(%rip), %rax ## literal pool for: "square02b_small.png"
0000000000026001	movq	%rax, %rdi
0000000000026004	movq	%rax, -0x228(%rbp)
000000000002600b	callq	__ZN7cocos2d9extension14CCScale9Sprite6createEPKc ## cocos2d::extension::CCScale9Sprite::create(char const*)
0000000000026010	movq	%rax, -0x78(%rbp)
0000000000026014	leaq	0x455a9(%rip), %rax ## literal pool for: "0"
000000000002601b	leaq	0x4551e(%rip), %rcx ## literal pool for: "Thonburi"
0000000000026022	leaq	0x4550b(%rip), %rdx ## literal pool for: "bigFont.fnt"
0000000000026029	movss	0x42927(%rip), %xmm0
0000000000026031	movss	0x42a1f(%rip), %xmm1
0000000000026039	movl	$0x18, %r8d
000000000002603f	movss	%xmm0, -0x22c(%rbp)
0000000000026047	movss	%xmm1, -0x230(%rbp)
000000000002604f	movq	%rax, %rdi
0000000000026052	movq	%rcx, %rsi
0000000000026055	movq	%rdx, -0x238(%rbp)
000000000002605c	movl	%r8d, %edx
000000000002605f	movq	-0x238(%rbp), %r9
0000000000026066	movq	%rcx, -0x240(%rbp)
000000000002606d	movq	%r9, %rcx
0000000000026070	movq	%rax, -0x248(%rbp)
0000000000026077	movl	%r8d, -0x24c(%rbp)
000000000002607e	callq	__ZN15CCTextInputNode6createEffPKcS1_iS1_ ## CCTextInputNode::create(float, float, char const*, char const*, int, char const*)
0000000000026083	movq	%rax, -0x80(%rbp)
0000000000026087	movq	-0x78(%rbp), %rax
000000000002608b	movq	(%rax), %rcx
000000000002608e	movq	0x368(%rcx), %rcx
0000000000026095	movl	$0x64, %edx
000000000002609a	movq	%rax, %rdi
000000000002609d	movl	%edx, %esi
000000000002609f	movl	%edx, -0x250(%rbp)
00000000000260a5	callq	*%rcx
00000000000260a7	movq	-0x78(%rbp), %rax
00000000000260ab	xorl	%edx, %edx
00000000000260ad	movl	%edx, %edi
00000000000260af	movl	%edx, %esi
00000000000260b1	movl	%edx, -0x254(%rbp)
00000000000260b7	movq	%rax, -0x260(%rbp)
00000000000260be	callq	__ZN7cocos2dL4ccc3Ehhh ## cocos2d::ccc3(unsigned char, unsigned char, unsigned char)
00000000000260c3	movw	%ax, %r10w
00000000000260c7	movw	%r10w, -0x8c(%rbp)
00000000000260cf	shrl	$0x10, %eax
00000000000260d2	movb	%al, %r11b
00000000000260d5	movb	%r11b, -0x8a(%rbp)
00000000000260dc	movb	-0x8a(%rbp), %r11b
00000000000260e3	movb	%r11b, -0x86(%rbp)
00000000000260ea	movw	-0x8c(%rbp), %r10w
00000000000260f2	movw	%r10w, -0x88(%rbp)
00000000000260fa	movq	-0x260(%rbp), %rcx
0000000000026101	movq	(%rcx), %r9
0000000000026104	movq	0x398(%r9), %r9
000000000002610b	leaq	-0x88(%rbp), %rsi
0000000000026112	movq	%rcx, %rdi
0000000000026115	callq	*%r9
0000000000026118	movq	-0x78(%rbp), %rcx
000000000002611c	leaq	-0x98(%rbp), %rsi
0000000000026123	movss	0x42931(%rip), %xmm0
000000000002612b	movss	0x4292d(%rip), %xmm1
0000000000026133	movq	%rsi, %rdi
0000000000026136	movss	%xmm0, -0x264(%rbp)
000000000002613e	movss	%xmm1, -0x268(%rbp)
0000000000026146	movq	%rcx, -0x270(%rbp)
000000000002614d	movq	%rsi, -0x278(%rbp)
0000000000026154	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
0000000000026159	movq	-0x270(%rbp), %rcx
0000000000026160	movq	(%rcx), %rsi
0000000000026163	movq	0x130(%rsi), %rsi
000000000002616a	movq	%rcx, %rdi
000000000002616d	movq	-0x278(%rbp), %r9
0000000000026174	movq	%rsi, -0x280(%rbp)
000000000002617b	movq	%r9, %rsi
000000000002617e	movq	-0x280(%rbp), %rbx
0000000000026185	callq	*%rbx
0000000000026187	movss	-0x24(%rbp), %xmm0
000000000002618c	cvtss2sd	%xmm0, %xmm0
0000000000026190	movsd	0x42878(%rip), %xmm1
0000000000026198	addsd	%xmm1, %xmm0
000000000002619c	cvtsd2ss	%xmm0, %xmm0
00000000000261a0	movss	-0x28(%rbp), %xmm1
00000000000261a5	cvtss2sd	%xmm1, %xmm1
00000000000261a9	movsd	-0x1d8(%rbp), %xmm2
00000000000261b1	addsd	%xmm2, %xmm1
00000000000261b5	cvtsd2ss	%xmm1, %xmm1
00000000000261b9	leaq	-0xa0(%rbp), %rcx
00000000000261c0	movq	%rcx, %rdi
00000000000261c3	movq	%rcx, -0x288(%rbp)
00000000000261ca	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
00000000000261cf	movq	-0x80(%rbp), %rcx
00000000000261d3	movq	(%rcx), %rsi
00000000000261d6	movq	0xb8(%rsi), %rsi
00000000000261dd	movq	%rcx, %rdi
00000000000261e0	movq	-0x288(%rbp), %rcx
00000000000261e7	movq	%rsi, -0x290(%rbp)
00000000000261ee	movq	%rcx, %rsi
00000000000261f1	movq	-0x290(%rbp), %r9
00000000000261f8	callq	*%r9
00000000000261fb	movq	-0x78(%rbp), %rcx
00000000000261ff	movq	(%rcx), %rsi
0000000000026202	movq	0xb8(%rsi), %rsi
0000000000026209	movq	%rcx, %rdi
000000000002620c	movq	-0x288(%rbp), %rcx
0000000000026213	movq	%rsi, -0x298(%rbp)
000000000002621a	movq	%rcx, %rsi
000000000002621d	movq	-0x298(%rbp), %r9
0000000000026224	callq	*%r9
0000000000026227	movq	-0x80(%rbp), %rdi
000000000002622b	movss	0x42831(%rip), %xmm0
0000000000026233	movss	%xmm0, -0x29c(%rbp)
000000000002623b	callq	__ZN15CCTextInputNode16setMaxLabelScaleEf ## CCTextInputNode::setMaxLabelScale(float)
0000000000026240	movq	-0x18(%rbp), %rcx
0000000000026244	movq	-0x78(%rbp), %rsi
0000000000026248	movq	(%rcx), %rdi
000000000002624b	movq	0x1b8(%rdi), %rdi
0000000000026252	movq	%rdi, -0x2a8(%rbp)
0000000000026259	movq	%rcx, %rdi
000000000002625c	movq	-0x2a8(%rbp), %rcx
0000000000026263	callq	*%rcx
0000000000026265	movq	-0x18(%rbp), %rcx
0000000000026269	movq	-0x80(%rbp), %rsi
000000000002626d	movq	(%rcx), %rdi
0000000000026270	movq	0x1b8(%rdi), %rdi
0000000000026277	movq	%rdi, -0x2b0(%rbp)
000000000002627e	movq	%rcx, %rdi
0000000000026281	movq	-0x2b0(%rbp), %rcx
0000000000026288	callq	*%rcx
000000000002628a	callq	__ZN7cocos2d6CCMenu6createEv ## cocos2d::CCMenu::create()
000000000002628f	movq	%rax, -0xa8(%rbp)
0000000000026296	leaq	0x45329(%rip), %rdi ## literal pool for: "OK"
000000000002629d	movl	$0x2f, %esi
00000000000262a2	movss	0x426ce(%rip), %xmm0
00000000000262aa	movl	$0x1, %edx
00000000000262af	movl	%edx, -0x2b4(%rbp)
00000000000262b5	movl	-0x2b4(%rbp), %ecx
00000000000262bb	callq	__ZN12ButtonSprite6createEPKciifb ## ButtonSprite::create(char const*, int, int, float, bool)
00000000000262c0	movq	%rax, -0xb0(%rbp)
00000000000262c7	leaq	-0xc0(%rbp), %rdi
00000000000262ce	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_0cvPFvPvPNS_8CCObjectEEEv ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_0::operator void (*)(void*, cocos2d::CCObject*)() const
00000000000262d3	movq	%rax, -0xb8(%rbp)
00000000000262da	movq	-0xb0(%rbp), %rax
00000000000262e1	movq	-0x10(%rbp), %rdx
00000000000262e5	movq	-0xb8(%rbp), %rdi
00000000000262ec	movq	-0xb0(%rbp), %r9
00000000000262f3	movq	%r9, -0xd0(%rbp)
00000000000262fa	movq	%rdi, -0xd8(%rbp)
0000000000026301	movq	-0xd8(%rbp), %rcx
0000000000026308	movq	-0xd0(%rbp), %r8
000000000002630f	movq	%rax, %rdi
0000000000026312	movq	%rax, %rsi
0000000000026315	callq	__ZN21CCMenuItemSpriteExtra6createEPN7cocos2d6CCNodeES2_PNS0_8CCObjectEMS3_FvS4_E ## CCMenuItemSpriteExtra::create(cocos2d::CCNode*, cocos2d::CCNode*, cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
000000000002631a	movq	%rax, -0xc8(%rbp)
0000000000026321	movq	-0xa8(%rbp), %rax
0000000000026328	movq	-0xc8(%rbp), %rsi
000000000002632f	movq	(%rax), %rcx
0000000000026332	movq	0x1b8(%rcx), %rcx
0000000000026339	movq	%rax, %rdi
000000000002633c	callq	*%rcx
000000000002633e	movq	-0xb0(%rbp), %rax
0000000000026345	movq	(%rax), %rcx
0000000000026348	movq	0xa0(%rcx), %rcx
000000000002634f	movss	0x42711(%rip), %xmm0
0000000000026357	movq	%rax, %rdi
000000000002635a	callq	*%rcx
000000000002635c	movq	-0x18(%rbp), %rax
0000000000026360	movq	-0xa8(%rbp), %rsi
0000000000026367	movq	(%rax), %rcx
000000000002636a	movq	0x1b8(%rcx), %rcx
0000000000026371	movq	%rax, %rdi
0000000000026374	callq	*%rcx
0000000000026376	movss	-0x24(%rbp), %xmm0
000000000002637b	cvtss2sd	%xmm0, %xmm0
000000000002637f	movsd	0x42691(%rip), %xmm1
0000000000026387	addsd	%xmm1, %xmm0
000000000002638b	cvtsd2ss	%xmm0, %xmm0
000000000002638f	movss	-0x28(%rbp), %xmm1
0000000000026394	cvtss2sd	%xmm1, %xmm1
0000000000026398	movsd	0x42680(%rip), %xmm2
00000000000263a0	addsd	%xmm2, %xmm1
00000000000263a4	cvtsd2ss	%xmm1, %xmm1
00000000000263a8	leaq	-0xe0(%rbp), %rax
00000000000263af	movq	%rax, %rdi
00000000000263b2	movq	%rax, -0x2c0(%rbp)
00000000000263b9	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
00000000000263be	movq	-0xa8(%rbp), %rax
00000000000263c5	movq	(%rax), %rcx
00000000000263c8	movq	0xb8(%rcx), %rcx
00000000000263cf	movq	%rax, %rdi
00000000000263d2	movq	-0x2c0(%rbp), %rsi
00000000000263d9	callq	*%rcx
00000000000263db	movq	-0x228(%rbp), %rdi
00000000000263e2	callq	__ZN7cocos2d9extension14CCScale9Sprite6createEPKc ## cocos2d::extension::CCScale9Sprite::create(char const*)
00000000000263e7	movq	%rax, -0xe8(%rbp)
00000000000263ee	movss	-0x22c(%rbp), %xmm0
00000000000263f6	movss	-0x230(%rbp), %xmm1
00000000000263fe	movq	-0x248(%rbp), %rdi
0000000000026405	movq	-0x240(%rbp), %rsi
000000000002640c	movl	-0x24c(%rbp), %edx
0000000000026412	movq	-0x238(%rbp), %rcx
0000000000026419	callq	__ZN15CCTextInputNode6createEffPKcS1_iS1_ ## CCTextInputNode::create(float, float, char const*, char const*, int, char const*)
000000000002641e	movq	%rax, -0xf0(%rbp)
0000000000026425	movq	-0xe8(%rbp), %rax
000000000002642c	movq	(%rax), %rcx
000000000002642f	movq	0x368(%rcx), %rcx
0000000000026436	movq	%rax, %rdi
0000000000026439	movl	-0x250(%rbp), %esi
000000000002643f	callq	*%rcx
0000000000026441	movq	-0xe8(%rbp), %rax
0000000000026448	movl	-0x254(%rbp), %edi
000000000002644e	movl	-0x254(%rbp), %esi
0000000000026454	movl	-0x254(%rbp), %edx
000000000002645a	movq	%rax, -0x2c8(%rbp)
0000000000026461	callq	__ZN7cocos2dL4ccc3Ehhh ## cocos2d::ccc3(unsigned char, unsigned char, unsigned char)
0000000000026466	movw	%ax, %r10w
000000000002646a	movw	%r10w, -0xfc(%rbp)
0000000000026472	shrl	$0x10, %eax
0000000000026475	movb	%al, %r11b
0000000000026478	movb	%r11b, -0xfa(%rbp)
000000000002647f	movb	-0xfa(%rbp), %r11b
0000000000026486	movb	%r11b, -0xf6(%rbp)
000000000002648d	movw	-0xfc(%rbp), %r10w
0000000000026495	movw	%r10w, -0xf8(%rbp)
000000000002649d	movq	-0x2c8(%rbp), %rcx
00000000000264a4	movq	(%rcx), %r8
00000000000264a7	movq	0x398(%r8), %r8
00000000000264ae	leaq	-0xf8(%rbp), %rsi
00000000000264b5	movq	%rcx, %rdi
00000000000264b8	callq	*%r8
00000000000264bb	movq	-0xe8(%rbp), %rcx
00000000000264c2	leaq	-0x108(%rbp), %rsi
00000000000264c9	movq	%rsi, %rdi
00000000000264cc	movss	-0x264(%rbp), %xmm0
00000000000264d4	movss	-0x268(%rbp), %xmm1
00000000000264dc	movq	%rcx, -0x2d0(%rbp)
00000000000264e3	movq	%rsi, -0x2d8(%rbp)
00000000000264ea	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
00000000000264ef	movq	-0x2d0(%rbp), %rcx
00000000000264f6	movq	(%rcx), %rsi
00000000000264f9	movq	0x130(%rsi), %rsi
0000000000026500	movq	%rcx, %rdi
0000000000026503	movq	-0x2d8(%rbp), %r8
000000000002650a	movq	%rsi, -0x2e0(%rbp)
0000000000026511	movq	%r8, %rsi
0000000000026514	movq	-0x2e0(%rbp), %r9
000000000002651b	callq	*%r9
000000000002651e	movss	-0x24(%rbp), %xmm0
0000000000026523	cvtss2sd	%xmm0, %xmm0
0000000000026527	movsd	0x424f9(%rip), %xmm1
000000000002652f	addsd	%xmm1, %xmm0
0000000000026533	cvtsd2ss	%xmm0, %xmm0
0000000000026537	movss	-0x28(%rbp), %xmm1
000000000002653c	cvtss2sd	%xmm1, %xmm1
0000000000026540	movsd	-0x1d8(%rbp), %xmm2
0000000000026548	addsd	%xmm2, %xmm1
000000000002654c	cvtsd2ss	%xmm1, %xmm1
0000000000026550	leaq	-0x110(%rbp), %rcx
0000000000026557	movq	%rcx, %rdi
000000000002655a	movq	%rcx, -0x2e8(%rbp)
0000000000026561	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000026566	movq	-0xf0(%rbp), %rcx
000000000002656d	movq	(%rcx), %rsi
0000000000026570	movq	0xb8(%rsi), %rsi
0000000000026577	movq	%rcx, %rdi
000000000002657a	movq	-0x2e8(%rbp), %rcx
0000000000026581	movq	%rsi, -0x2f0(%rbp)
0000000000026588	movq	%rcx, %rsi
000000000002658b	movq	-0x2f0(%rbp), %r8
0000000000026592	callq	*%r8
0000000000026595	movq	-0xe8(%rbp), %rcx
000000000002659c	movq	(%rcx), %rsi
000000000002659f	movq	0xb8(%rsi), %rsi
00000000000265a6	movq	%rcx, %rdi
00000000000265a9	movq	-0x2e8(%rbp), %rcx
00000000000265b0	movq	%rsi, -0x2f8(%rbp)
00000000000265b7	movq	%rcx, %rsi
00000000000265ba	movq	-0x2f8(%rbp), %r8
00000000000265c1	callq	*%r8
00000000000265c4	movq	-0xf0(%rbp), %rdi
00000000000265cb	movss	-0x29c(%rbp), %xmm0
00000000000265d3	callq	__ZN15CCTextInputNode16setMaxLabelScaleEf ## CCTextInputNode::setMaxLabelScale(float)
00000000000265d8	movq	-0x18(%rbp), %rcx
00000000000265dc	movq	-0xe8(%rbp), %rsi
00000000000265e3	movq	(%rcx), %rdi
00000000000265e6	movq	0x1b8(%rdi), %rdi
00000000000265ed	movq	%rdi, -0x300(%rbp)
00000000000265f4	movq	%rcx, %rdi
00000000000265f7	movq	-0x300(%rbp), %rcx
00000000000265fe	callq	*%rcx
0000000000026600	movq	-0x18(%rbp), %rcx
0000000000026604	movq	-0xf0(%rbp), %rsi
000000000002660b	movq	(%rcx), %rdi
000000000002660e	movq	0x1b8(%rdi), %rdi
0000000000026615	movq	%rdi, -0x308(%rbp)
000000000002661c	movq	%rcx, %rdi
000000000002661f	movq	-0x308(%rbp), %rcx
0000000000026626	callq	*%rcx
0000000000026628	callq	__ZN7cocos2d6CCMenu6createEv ## cocos2d::CCMenu::create()
000000000002662d	movq	%rax, -0x118(%rbp)
0000000000026634	movq	-0x18(%rbp), %rax
0000000000026638	movq	-0x118(%rbp), %rsi
000000000002663f	movq	(%rax), %rcx
0000000000026642	movq	0x1b8(%rcx), %rcx
0000000000026649	movq	%rax, %rdi
000000000002664c	callq	*%rcx
000000000002664e	movss	-0x24(%rbp), %xmm0
0000000000026653	cvtss2sd	%xmm0, %xmm0
0000000000026657	movsd	0x423d1(%rip), %xmm1
000000000002665f	addsd	%xmm1, %xmm0
0000000000026663	cvtsd2ss	%xmm0, %xmm0
0000000000026667	movss	-0x28(%rbp), %xmm2
000000000002666c	cvtss2sd	%xmm2, %xmm2
0000000000026670	movsd	0x423c0(%rip), %xmm3
0000000000026678	addsd	%xmm3, %xmm2
000000000002667c	cvtsd2ss	%xmm2, %xmm2
0000000000026680	leaq	-0x120(%rbp), %rax
0000000000026687	movq	%rax, %rdi
000000000002668a	movsd	%xmm1, -0x310(%rbp)
0000000000026692	movaps	%xmm2, %xmm1
0000000000026695	movq	%rax, -0x318(%rbp)
000000000002669c	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
00000000000266a1	movq	-0x118(%rbp), %rax
00000000000266a8	movq	-0x18(%rbp), %rsi
00000000000266ac	leaq	-0x128(%rbp), %rcx
00000000000266b3	movq	%rcx, %rdi
00000000000266b6	movq	-0x318(%rbp), %rdx
00000000000266bd	movq	%rax, -0x320(%rbp)
00000000000266c4	movq	%rcx, -0x328(%rbp)
00000000000266cb	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
00000000000266d0	movq	-0x320(%rbp), %rax
00000000000266d7	movq	(%rax), %rcx
00000000000266da	movq	0xb8(%rcx), %rcx
00000000000266e1	movq	%rax, %rdi
00000000000266e4	movq	-0x328(%rbp), %rsi
00000000000266eb	callq	*%rcx
00000000000266ed	leaq	-0x138(%rbp), %rdi
00000000000266f4	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_1cvPFvPvPNS_8CCObjectEEEv ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_1::operator void (*)(void*, cocos2d::CCObject*)() const
00000000000266f9	movq	%rax, -0x130(%rbp)
0000000000026700	movq	-0x10(%rbp), %rdi
0000000000026704	movq	-0x130(%rbp), %rax
000000000002670b	movq	-0x128(%rbp), %rcx
0000000000026712	movq	%rcx, -0x148(%rbp)
0000000000026719	movq	%rax, -0x150(%rbp)
0000000000026720	movq	-0x150(%rbp), %rsi
0000000000026727	movq	-0x148(%rbp), %rdx
000000000002672e	callq	__ZN5Cacao13createTogglerEPN7cocos2d8CCObjectEMS1_FvS2_E ## Cacao::createToggler(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
0000000000026733	movq	%rax, -0x140(%rbp)
000000000002673a	movq	-0x140(%rbp), %rax
0000000000026741	movq	(%rax), %rcx
0000000000026744	movq	0xa0(%rcx), %rcx
000000000002674b	movss	0x422f9(%rip), %xmm0
0000000000026753	movq	%rax, %rdi
0000000000026756	callq	*%rcx
0000000000026758	movq	-0x118(%rbp), %rax
000000000002675f	movq	-0x140(%rbp), %rsi
0000000000026766	movq	(%rax), %rcx
0000000000026769	movq	0x1b8(%rcx), %rcx
0000000000026770	movq	%rax, %rdi
0000000000026773	callq	*%rcx
0000000000026775	callq	__ZN7cocos2d6CCMenu6createEv ## cocos2d::CCMenu::create()
000000000002677a	movq	%rax, -0x158(%rbp)
0000000000026781	movq	-0x18(%rbp), %rax
0000000000026785	movq	-0x158(%rbp), %rsi
000000000002678c	movq	(%rax), %rcx
000000000002678f	movq	0x1b8(%rcx), %rcx
0000000000026796	movq	%rax, %rdi
0000000000026799	callq	*%rcx
000000000002679b	movss	-0x24(%rbp), %xmm0
00000000000267a0	cvtss2sd	%xmm0, %xmm0
00000000000267a4	movsd	-0x310(%rbp), %xmm1
00000000000267ac	addsd	%xmm1, %xmm0
00000000000267b0	cvtsd2ss	%xmm0, %xmm0
00000000000267b4	movss	-0x28(%rbp), %xmm2
00000000000267b9	cvtss2sd	%xmm2, %xmm2
00000000000267bd	movsd	0x4227b(%rip), %xmm3
00000000000267c5	addsd	%xmm3, %xmm2
00000000000267c9	cvtsd2ss	%xmm2, %xmm1
00000000000267cd	leaq	-0x160(%rbp), %rax
00000000000267d4	movq	%rax, %rdi
00000000000267d7	movq	%rax, -0x330(%rbp)
00000000000267de	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
00000000000267e3	movq	-0x158(%rbp), %rax
00000000000267ea	movq	-0x18(%rbp), %rsi
00000000000267ee	leaq	-0x168(%rbp), %rcx
00000000000267f5	movq	%rcx, %rdi
00000000000267f8	movq	-0x330(%rbp), %rdx
00000000000267ff	movq	%rax, -0x338(%rbp)
0000000000026806	movq	%rcx, -0x340(%rbp)
000000000002680d	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
0000000000026812	movq	-0x338(%rbp), %rax
0000000000026819	movq	(%rax), %rcx
000000000002681c	movq	0xb8(%rcx), %rcx
0000000000026823	movq	%rax, %rdi
0000000000026826	movq	-0x340(%rbp), %rsi
000000000002682d	callq	*%rcx
000000000002682f	leaq	-0x178(%rbp), %rdi
0000000000026836	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_2cvPFvPvPNS_8CCObjectEEEv ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_2::operator void (*)(void*, cocos2d::CCObject*)() const
000000000002683b	movq	%rax, -0x170(%rbp)
0000000000026842	movq	-0x10(%rbp), %rdi
0000000000026846	movq	-0x170(%rbp), %rax
000000000002684d	movq	-0x168(%rbp), %rcx
0000000000026854	movq	%rcx, -0x188(%rbp)
000000000002685b	movq	%rax, -0x190(%rbp)
0000000000026862	movq	-0x190(%rbp), %rsi
0000000000026869	movq	-0x188(%rbp), %rdx
0000000000026870	callq	__ZN5Cacao13createTogglerEPN7cocos2d8CCObjectEMS1_FvS2_E ## Cacao::createToggler(cocos2d::CCObject*, void (cocos2d::CCObject::*)(cocos2d::CCObject*))
0000000000026875	movss	0x421cf(%rip), %xmm0
000000000002687d	movq	%rax, -0x180(%rbp)
0000000000026884	movq	-0x180(%rbp), %rax
000000000002688b	movq	%rax, %rcx
000000000002688e	movq	(%rax), %rax
0000000000026891	movq	%rcx, %rdi
0000000000026894	callq	*0xa0(%rax)
000000000002689a	movq	-0x158(%rbp), %rax
00000000000268a1	movq	-0x180(%rbp), %rcx
00000000000268a8	movq	(%rax), %rdx
00000000000268ab	movq	%rax, %rdi
00000000000268ae	movq	%rcx, %rsi
00000000000268b1	callq	*0x1b8(%rdx)
00000000000268b7	leaq	0x44d0b(%rip), %rdi ## literal pool for: "Spawn Triggered"
00000000000268be	leaq	0x44c6f(%rip), %rsi ## literal pool for: "bigFont.fnt"
00000000000268c5	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
00000000000268ca	movss	0x42176(%rip), %xmm0
00000000000268d2	movq	%rax, -0x198(%rbp)
00000000000268d9	movq	-0x198(%rbp), %rax
00000000000268e0	movq	(%rax), %rcx
00000000000268e3	movq	%rax, %rdi
00000000000268e6	callq	*0xa0(%rcx)
00000000000268ec	movsd	0x420ec(%rip), %xmm0
00000000000268f4	movsd	0x420ec(%rip), %xmm1
00000000000268fc	movss	-0x24(%rbp), %xmm2
0000000000026901	cvtss2sd	%xmm2, %xmm2
0000000000026905	addsd	%xmm2, %xmm1
0000000000026909	cvtsd2ss	%xmm1, %xmm1
000000000002690d	movss	-0x28(%rbp), %xmm2
0000000000026912	cvtss2sd	%xmm2, %xmm2
0000000000026916	addsd	%xmm2, %xmm0
000000000002691a	cvtsd2ss	%xmm0, %xmm0
000000000002691e	leaq	-0x1a0(%rbp), %rdi
0000000000026925	movss	%xmm0, -0x344(%rbp)
000000000002692d	movaps	%xmm1, %xmm0
0000000000026930	movss	-0x344(%rbp), %xmm1
0000000000026938	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
000000000002693d	movq	-0x198(%rbp), %rax
0000000000026944	movq	%rax, %rcx
0000000000026947	movq	-0x18(%rbp), %rsi
000000000002694b	leaq	-0x1a8(%rbp), %rdi
0000000000026952	leaq	-0x1a0(%rbp), %rdx
0000000000026959	movq	%rax, -0x350(%rbp)
0000000000026960	movq	%rcx, -0x358(%rbp)
0000000000026967	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
000000000002696c	movq	-0x350(%rbp), %rax
0000000000026973	movq	(%rax), %rcx
0000000000026976	movq	-0x358(%rbp), %rdi
000000000002697d	leaq	-0x1a8(%rbp), %rsi
0000000000026984	callq	*0xb8(%rcx)
000000000002698a	movq	-0x18(%rbp), %rax
000000000002698e	movq	-0x198(%rbp), %rcx
0000000000026995	movq	(%rax), %rdx
0000000000026998	movq	%rax, %rdi
000000000002699b	movq	%rcx, %rsi
000000000002699e	callq	*0x1b8(%rdx)
00000000000269a4	leaq	0x44c2e(%rip), %rdi ## literal pool for: "Touch Triggered"
00000000000269ab	leaq	0x44b82(%rip), %rsi ## literal pool for: "bigFont.fnt"
00000000000269b2	callq	__ZN7cocos2d13CCLabelBMFont6createEPKcS2_ ## cocos2d::CCLabelBMFont::create(char const*, char const*)
00000000000269b7	movss	0x42089(%rip), %xmm0
00000000000269bf	movq	%rax, -0x1b0(%rbp)
00000000000269c6	movq	-0x1b0(%rbp), %rax
00000000000269cd	movq	(%rax), %rcx
00000000000269d0	movq	%rax, %rdi
00000000000269d3	callq	*0xa0(%rcx)
00000000000269d9	movsd	0x41fef(%rip), %xmm0
00000000000269e1	movsd	0x41fef(%rip), %xmm1
00000000000269e9	movss	-0x24(%rbp), %xmm2
00000000000269ee	cvtss2sd	%xmm2, %xmm2
00000000000269f2	addsd	%xmm2, %xmm1
00000000000269f6	cvtsd2ss	%xmm1, %xmm1
00000000000269fa	movss	-0x28(%rbp), %xmm2
00000000000269ff	cvtss2sd	%xmm2, %xmm2
0000000000026a03	addsd	%xmm2, %xmm0
0000000000026a07	cvtsd2ss	%xmm0, %xmm0
0000000000026a0b	leaq	-0x1b8(%rbp), %rdi
0000000000026a12	movss	%xmm0, -0x35c(%rbp)
0000000000026a1a	movaps	%xmm1, %xmm0
0000000000026a1d	movss	-0x35c(%rbp), %xmm1
0000000000026a25	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
0000000000026a2a	movq	-0x1b0(%rbp), %rax
0000000000026a31	movq	%rax, %rcx
0000000000026a34	movq	-0x18(%rbp), %rsi
0000000000026a38	leaq	-0x1c0(%rbp), %rdi
0000000000026a3f	leaq	-0x1b8(%rbp), %rdx
0000000000026a46	movq	%rax, -0x368(%rbp)
0000000000026a4d	movq	%rcx, -0x370(%rbp)
0000000000026a54	callq	__ZN7cocos2d6CCNode18convertToNodeSpaceERKNS_7CCPointE ## cocos2d::CCNode::convertToNodeSpace(cocos2d::CCPoint const&)
0000000000026a59	movq	-0x368(%rbp), %rax
0000000000026a60	movq	(%rax), %rcx
0000000000026a63	movq	-0x370(%rbp), %rdi
0000000000026a6a	leaq	-0x1c0(%rbp), %rsi
0000000000026a71	callq	*0xb8(%rcx)
0000000000026a77	movq	-0x18(%rbp), %rax
0000000000026a7b	movq	-0x1b0(%rbp), %rcx
0000000000026a82	movq	(%rax), %rdx
0000000000026a85	movq	%rax, %rdi
0000000000026a88	movq	%rcx, %rsi
0000000000026a8b	callq	*0x1b8(%rdx)
0000000000026a91	addq	$0x368, %rsp
0000000000026a98	popq	%rbx
0000000000026a99	popq	%rbp
0000000000026a9a	retq
0000000000026a9b	nopl	(%rax,%rax)
__ZN7cocos2dL4ccc3Ehhh:
0000000000026aa0	pushq	%rbp
0000000000026aa1	movq	%rsp, %rbp
0000000000026aa4	movb	%dl, %al
0000000000026aa6	movb	%sil, %cl
0000000000026aa9	movb	%dil, %r8b
0000000000026aac	movb	%r8b, -0x9(%rbp)
0000000000026ab0	movb	%cl, -0xa(%rbp)
0000000000026ab3	movb	%al, -0xb(%rbp)
0000000000026ab6	movb	-0x9(%rbp), %al
0000000000026ab9	movb	%al, -0x8(%rbp)
0000000000026abc	movb	-0xa(%rbp), %al
0000000000026abf	movb	%al, -0x7(%rbp)
0000000000026ac2	movb	-0xb(%rbp), %al
0000000000026ac5	movb	%al, -0x6(%rbp)
0000000000026ac8	movb	-0x6(%rbp), %al
0000000000026acb	movb	%al, -0xe(%rbp)
0000000000026ace	movw	-0x8(%rbp), %r9w
0000000000026ad3	movw	%r9w, -0x10(%rbp)
0000000000026ad8	movzbl	-0xe(%rbp), %edx
0000000000026adc	shll	$0x10, %edx
0000000000026adf	movzwl	-0x10(%rbp), %esi
0000000000026ae3	orl	%edx, %esi
0000000000026ae5	movl	%esi, %eax
0000000000026ae7	popq	%rbp
0000000000026ae8	retq
0000000000026ae9	nopl	(%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_0cvPFvPvPNS_8CCObjectEEEv:
0000000000026af0	pushq	%rbp
0000000000026af1	movq	%rsp, %rbp
0000000000026af4	movq	%rdi, -0x8(%rbp)
0000000000026af8	leaq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_08__invokeEPvPNS_8CCObjectE(%rip), %rax ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_0::__invoke(void*, cocos2d::CCObject*)
0000000000026aff	popq	%rbp
0000000000026b00	retq
0000000000026b01	nopw	%cs:(%rax,%rax)
0000000000026b0b	nopl	(%rax,%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_1cvPFvPvPNS_8CCObjectEEEv:
0000000000026b10	pushq	%rbp
0000000000026b11	movq	%rsp, %rbp
0000000000026b14	movq	%rdi, -0x8(%rbp)
0000000000026b18	leaq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_18__invokeEPvPNS_8CCObjectE(%rip), %rax ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_1::__invoke(void*, cocos2d::CCObject*)
0000000000026b1f	popq	%rbp
0000000000026b20	retq
0000000000026b21	nopw	%cs:(%rax,%rax)
0000000000026b2b	nopl	(%rax,%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_2cvPFvPvPNS_8CCObjectEEEv:
0000000000026b30	pushq	%rbp
0000000000026b31	movq	%rsp, %rbp
0000000000026b34	movq	%rdi, -0x8(%rbp)
0000000000026b38	leaq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_28__invokeEPvPNS_8CCObjectE(%rip), %rax ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_2::__invoke(void*, cocos2d::CCObject*)
0000000000026b3f	popq	%rbp
0000000000026b40	retq
0000000000026b41	nopw	%cs:(%rax,%rax)
0000000000026b4b	nopl	(%rax,%rax)
__Z6injectv:
0000000000026b50	pushq	%rbp
0000000000026b51	movq	%rsp, %rbp
0000000000026b54	subq	$0x40, %rsp
0000000000026b58	movl	$0x20, %edi
0000000000026b5d	callq	0x27924 ## symbol stub for: __Znwm
0000000000026b62	movq	%rax, %rdi
0000000000026b65	movq	%rax, %rcx
0000000000026b68	leaq	0x44a7a(%rip), %rsi ## literal pool for: "Swag"
0000000000026b6f	movq	%rdi, -0x28(%rbp)
0000000000026b73	movq	%rax, %rdi
0000000000026b76	movq	%rcx, -0x30(%rbp)
0000000000026b7a	callq	__ZN12ModContainerC1EPKc ## ModContainer::ModContainer(char const*)
0000000000026b7f	jmp	0x26b84
0000000000026b84	movq	-0x30(%rbp), %rax
0000000000026b88	movq	%rax, _m(%rip)
0000000000026b8f	callq	__Z7getBasev ## getBase()
0000000000026b94	addq	$0x122ab0, %rax
0000000000026b9a	movq	%rax, -0x18(%rbp)
0000000000026b9e	movq	_m(%rip), %rdi
0000000000026ba5	movq	%rdi, -0x38(%rbp)
0000000000026ba9	callq	__Z7getBasev ## getBase()
0000000000026bae	addq	$0x60ac58, %rax
0000000000026bb4	leaq	-0x18(%rbp), %rdi
0000000000026bb8	movq	-0x38(%rbp), %rcx
0000000000026bbc	movq	%rdi, -0x40(%rbp)
0000000000026bc0	movq	%rcx, %rdi
0000000000026bc3	movq	%rax, %rsi
0000000000026bc6	movl	$0x8, %edx
0000000000026bcb	movq	-0x40(%rbp), %rcx
0000000000026bcf	callq	__ZN12ModContainer13registerWriteElmPc ## ModContainer::registerWrite(long, unsigned long, char*)
0000000000026bd4	leaq	-0x20(%rbp), %rdi
0000000000026bd8	callq	__ZZ6injectvENK3$_3cvPFvvEEv ## inject()::$_3::operator void (*)()() const
0000000000026bdd	movq	%rax, %rdi
0000000000026be0	callq	0x2722e ## symbol stub for: __ZN5Cacao16scheduleFunctionIPFvvEEEvT_
0000000000026be5	movq	_m(%rip), %rdi
0000000000026bec	callq	__ZN12ModContainer6enableEv ## ModContainer::enable()
0000000000026bf1	addq	$0x40, %rsp
0000000000026bf5	popq	%rbp
0000000000026bf6	retq
0000000000026bf7	movl	%edx, %ecx
0000000000026bf9	movq	%rax, -0x8(%rbp)
0000000000026bfd	movl	%ecx, -0xc(%rbp)
0000000000026c00	movq	-0x28(%rbp), %rdi
0000000000026c04	callq	0x2791e ## symbol stub for: __ZdlPv
0000000000026c09	movq	-0x8(%rbp), %rdi
0000000000026c0d	callq	0x271b0 ## symbol stub for: __Unwind_Resume
0000000000026c12	ud2
0000000000026c14	nopw	%cs:(%rax,%rax)
0000000000026c1e	nop
__ZN5Cacao16scheduleFunctionIPFvvEEEvT_:
0000000000026c20	pushq	%rbp
0000000000026c21	movq	%rsp, %rbp
0000000000026c24	subq	$0x50, %rsp
0000000000026c28	xorl	%eax, %eax
0000000000026c2a	movq	%rdi, -0x8(%rbp)
0000000000026c2e	movl	%eax, -0x1c(%rbp)
0000000000026c31	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000026c36	movq	(%rax), %rdi
0000000000026c39	movq	0x300(%rdi), %rdi
0000000000026c40	movq	%rdi, -0x28(%rbp)
0000000000026c44	movq	%rax, %rdi
0000000000026c47	movq	-0x28(%rbp), %rax
0000000000026c4b	callq	*%rax
0000000000026c4d	movq	-0x8(%rbp), %rdi
0000000000026c51	movq	(%rbp), %rcx
0000000000026c55	movq	%rax, -0x30(%rbp)
0000000000026c59	movq	%rdi, -0x38(%rbp)
0000000000026c5d	movq	%rcx, -0x40(%rbp)
0000000000026c61	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000026c66	movq	-0x40(%rbp), %rcx
0000000000026c6a	movq	%rcx, -0x10(%rbp)
0000000000026c6e	movq	-0x38(%rbp), %rcx
0000000000026c72	movq	%rcx, -0x18(%rbp)
0000000000026c76	movq	-0x18(%rbp), %rsi
0000000000026c7a	movq	-0x10(%rbp), %rdx
0000000000026c7e	movq	-0x30(%rbp), %rdi
0000000000026c82	movq	%rax, %rcx
0000000000026c85	xorps	%xmm0, %xmm0
0000000000026c88	movss	%xmm0, -0x44(%rbp)
0000000000026c8d	movl	-0x1c(%rbp), %r8d
0000000000026c91	movss	-0x44(%rbp), %xmm1
0000000000026c96	movl	-0x1c(%rbp), %r9d
0000000000026c9a	callq	__ZN7cocos2d11CCScheduler16scheduleSelectorEMNS_8CCObjectEFvfEPS1_fjfb ## cocos2d::CCScheduler::scheduleSelector(void (cocos2d::CCObject::*)(float), cocos2d::CCObject*, float, unsigned int, float, bool)
0000000000026c9f	addq	$0x50, %rsp
0000000000026ca3	popq	%rbp
0000000000026ca4	retq
0000000000026ca5	nopw	%cs:(%rax,%rax)
0000000000026caf	nop
__ZZ6injectvENK3$_3cvPFvvEEv:
0000000000026cb0	pushq	%rbp
0000000000026cb1	movq	%rsp, %rbp
0000000000026cb4	movq	%rdi, -0x8(%rbp)
0000000000026cb8	leaq	__ZZ6injectvEN3$_38__invokeEv(%rip), %rax ## inject()::$_3::__invoke()
0000000000026cbf	popq	%rbp
0000000000026cc0	retq
0000000000026cc1	nopw	%cs:(%rax,%rax)
0000000000026ccb	nopl	(%rax,%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_08__invokeEPvPNS_8CCObjectE:
0000000000026cd0	pushq	%rbp
0000000000026cd1	movq	%rsp, %rbp
0000000000026cd4	subq	$0x10, %rsp
0000000000026cd8	movq	%rdi, -0x8(%rbp)
0000000000026cdc	movq	%rsi, -0x10(%rbp)
0000000000026ce0	movq	-0x8(%rbp), %rsi
0000000000026ce4	movq	-0x10(%rbp), %rdx
0000000000026ce8	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_0clEPvPNS_8CCObjectE ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_0::operator()(void*, cocos2d::CCObject*) const
0000000000026ced	addq	$0x10, %rsp
0000000000026cf1	popq	%rbp
0000000000026cf2	retq
0000000000026cf3	nopw	%cs:(%rax,%rax)
0000000000026cfd	nopl	(%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_0clEPvPNS_8CCObjectE:
0000000000026d00	pushq	%rbp
0000000000026d01	movq	%rsp, %rbp
0000000000026d04	subq	$0x20, %rsp
0000000000026d08	movq	%rdi, -0x8(%rbp)
0000000000026d0c	movq	%rsi, -0x10(%rbp)
0000000000026d10	movq	%rdx, -0x18(%rbp)
0000000000026d14	leaq	0x448d3(%rip), %rdi ## literal pool for: "idrsJ_EI_dqw\n"
0000000000026d1b	movb	$0x0, %al
0000000000026d1d	callq	0x279d2 ## symbol stub for: _printf
0000000000026d22	movl	%eax, -0x1c(%rbp)
0000000000026d25	addq	$0x20, %rsp
0000000000026d29	popq	%rbp
0000000000026d2a	retq
0000000000026d2b	nopl	(%rax,%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_18__invokeEPvPNS_8CCObjectE:
0000000000026d30	pushq	%rbp
0000000000026d31	movq	%rsp, %rbp
0000000000026d34	subq	$0x10, %rsp
0000000000026d38	movq	%rdi, -0x8(%rbp)
0000000000026d3c	movq	%rsi, -0x10(%rbp)
0000000000026d40	movq	-0x8(%rbp), %rsi
0000000000026d44	movq	-0x10(%rbp), %rdx
0000000000026d48	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_1clEPvPNS_8CCObjectE ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_1::operator()(void*, cocos2d::CCObject*) const
0000000000026d4d	addq	$0x10, %rsp
0000000000026d51	popq	%rbp
0000000000026d52	retq
0000000000026d53	nopw	%cs:(%rax,%rax)
0000000000026d5d	nopl	(%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_1clEPvPNS_8CCObjectE:
0000000000026d60	pushq	%rbp
0000000000026d61	movq	%rsp, %rbp
0000000000026d64	subq	$0x20, %rsp
0000000000026d68	movq	%rdi, -0x8(%rbp)
0000000000026d6c	movq	%rsi, -0x10(%rbp)
0000000000026d70	movq	%rdx, -0x18(%rbp)
0000000000026d74	leaq	0x44881(%rip), %rdi ## literal pool for: "idYNY_S5_BJA\n"
0000000000026d7b	movb	$0x0, %al
0000000000026d7d	callq	0x279d2 ## symbol stub for: _printf
0000000000026d82	movl	%eax, -0x1c(%rbp)
0000000000026d85	addq	$0x20, %rsp
0000000000026d89	popq	%rbp
0000000000026d8a	retq
0000000000026d8b	nopl	(%rax,%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_EN3$_28__invokeEPvPNS_8CCObjectE:
0000000000026d90	pushq	%rbp
0000000000026d91	movq	%rsp, %rbp
0000000000026d94	subq	$0x10, %rsp
0000000000026d98	movq	%rdi, -0x8(%rbp)
0000000000026d9c	movq	%rsi, -0x10(%rbp)
0000000000026da0	movq	-0x8(%rbp), %rsi
0000000000026da4	movq	-0x10(%rbp), %rdx
0000000000026da8	callq	__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_2clEPvPNS_8CCObjectE ## renderCustomUI(cocos2d::CCNode*, cocos2d::CCNode*)::$_2::operator()(void*, cocos2d::CCObject*) const
0000000000026dad	addq	$0x10, %rsp
0000000000026db1	popq	%rbp
0000000000026db2	retq
0000000000026db3	nopw	%cs:(%rax,%rax)
0000000000026dbd	nopl	(%rax)
__ZZ14renderCustomUIPN7cocos2d6CCNodeES1_ENK3$_2clEPvPNS_8CCObjectE:
0000000000026dc0	pushq	%rbp
0000000000026dc1	movq	%rsp, %rbp
0000000000026dc4	subq	$0x20, %rsp
0000000000026dc8	movq	%rdi, -0x8(%rbp)
0000000000026dcc	movq	%rsi, -0x10(%rbp)
0000000000026dd0	movq	%rdx, -0x18(%rbp)
0000000000026dd4	leaq	0x4482f(%rip), %rdi ## literal pool for: "idQWC_uD_9bH\n"
0000000000026ddb	movb	$0x0, %al
0000000000026ddd	callq	0x279d2 ## symbol stub for: _printf
0000000000026de2	movl	%eax, -0x1c(%rbp)
0000000000026de5	addq	$0x20, %rsp
0000000000026de9	popq	%rbp
0000000000026dea	retq
0000000000026deb	nopl	(%rax,%rax)
__ZZ6injectvEN3$_38__invokeEv:
0000000000026df0	pushq	%rbp
0000000000026df1	movq	%rsp, %rbp
0000000000026df4	callq	__ZZ6injectvENK3$_3clEv ## inject()::$_3::operator()() const
0000000000026df9	popq	%rbp
0000000000026dfa	retq
0000000000026dfb	nopl	(%rax,%rax)
__ZZ6injectvENK3$_3clEv:
0000000000026e00	pushq	%rbp
0000000000026e01	movq	%rsp, %rbp
0000000000026e04	subq	$0x40, %rsp
0000000000026e08	movq	%rdi, -0x8(%rbp)
0000000000026e0c	callq	__ZN11GJGameLevel6createEv ## GJGameLevel::create()
0000000000026e11	movq	%rax, -0x10(%rbp)
0000000000026e15	movq	-0x10(%rbp), %rdi
0000000000026e19	callq	0x271c2 ## symbol stub for: __ZN11GJGameLevel12_levelStringEv
0000000000026e1e	movq	%rax, %rdi
0000000000026e21	leaq	0x447f0(%rip), %rsi ## literal pool for: "kS38,1_40_2_125_3_255_11_255_12_255_13_255_4_-1_6_1000_7_1_15_1_18_0_8_1|1_0_2_102_3_255_11_255_12_255_13_255_4_-1_6_1001_7_1_15_1_18_0_8_1|1_0_2_102_3_255_11_255_12_255_13_255_4_-1_6_1009_7_1_15_1_18_0_8_1|1_255_2_255_3_255_11_255_12_255_13_255_4_-1_6_1002_5_1_7_1_15_1_18_0_8_1|1_0_2_255_3_125_11_255_12_255_13_255_4_-1_6_1005_5_1_7_1_15_1_18_0_8_1|1_0_2_255_3_125_11_255_12_255_13_255_4_-1_6_1006_5_1_7_1_15_1_18_0_8_1|1_0_2_0_3_0_11_255_12_255_13_255_4_-1_6_3_7_1_15_1_18_0_8_1|,kA13,0,kA15,0,kA16,0,kA14,,kA6,1,kA7,0,kA17,0,kA18,0,kS39,0,kA2,0,kA3,0,kA8,0,kA4,0,kA9,0,kA10,0,kA11,0;1,1,2,2000,3,4000"
0000000000026e28	callq	0x27516 ## symbol stub for: __ZNSsaSEPKc
0000000000026e2d	movq	-0x10(%rbp), %rdi
0000000000026e31	movq	%rax, -0x28(%rbp)
0000000000026e35	callq	__ZN9PlayLayer6createEP11GJGameLevel ## PlayLayer::create(GJGameLevel*)
0000000000026e3a	movq	%rax, -0x18(%rbp)
0000000000026e3e	movq	-0x18(%rbp), %rax
0000000000026e42	movq	%rax, -0x30(%rbp)
0000000000026e46	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000026e4b	movq	%rax, %rdi
0000000000026e4e	callq	0x271c8 ## symbol stub for: __ZN11GameManager10_playLayerEv
0000000000026e53	movq	-0x30(%rbp), %rsi
0000000000026e57	movq	%rsi, (%rax)
0000000000026e5a	callq	__ZN11AppDelegate3getEv ## AppDelegate::get()
0000000000026e5f	movq	%rax, %rdi
0000000000026e62	callq	0x271bc ## symbol stub for: __ZN11AppDelegate13_runningSceneEv
0000000000026e67	movq	(%rax), %rax
0000000000026e6a	movq	%rax, %rsi
0000000000026e6d	movq	-0x18(%rbp), %rdi
0000000000026e71	movq	(%rax), %rax
0000000000026e74	movq	%rdi, -0x38(%rbp)
0000000000026e78	movq	%rsi, %rdi
0000000000026e7b	movq	-0x38(%rbp), %rsi
0000000000026e7f	callq	*0x1b8(%rax)
0000000000026e85	movl	$0x0, -0x1c(%rbp)
0000000000026e8c	cmpl	$0x3e8, -0x1c(%rbp)
0000000000026e93	jge	0x26ebb
0000000000026e99	movss	0x41bcf(%rip), %xmm0
0000000000026ea1	movq	-0x18(%rbp), %rax
0000000000026ea5	movq	%rax, %rdi
0000000000026ea8	callq	__ZN7cocos2d6CCNode6updateEf ## cocos2d::CCNode::update(float)
0000000000026ead	movl	-0x1c(%rbp), %eax
0000000000026eb0	addl	$0x1, %eax
0000000000026eb3	movl	%eax, -0x1c(%rbp)
0000000000026eb6	jmp	0x26e8c
0000000000026ebb	leaq	-0x20(%rbp), %rdi
0000000000026ebf	callq	__ZZZ6injectvENK3$_3clEvENKUlvE_cvPFvvEEv ## inject()::$_3::operator()() const::'lambda'()::operator void (*)()() const
0000000000026ec4	movss	0x41ba0(%rip), %xmm0
0000000000026ecc	movq	%rax, %rdi
0000000000026ecf	callq	0x27234 ## symbol stub for: __ZN5Cacao16scheduleFunctionIPFvvEEEvT_f
0000000000026ed4	addq	$0x40, %rsp
0000000000026ed8	popq	%rbp
0000000000026ed9	retq
0000000000026eda	nopw	(%rax,%rax)
__ZN11GJGameLevel12_levelStringEv:
0000000000026ee0	pushq	%rbp
0000000000026ee1	movq	%rsp, %rbp
0000000000026ee4	movq	%rdi, -0x8(%rbp)
0000000000026ee8	movq	-0x8(%rbp), %rdi
0000000000026eec	addq	$0x148, %rdi
0000000000026ef3	movq	%rdi, %rax
0000000000026ef6	popq	%rbp
0000000000026ef7	retq
0000000000026ef8	nopl	(%rax,%rax)
__ZN11GameManager10_playLayerEv:
0000000000026f00	pushq	%rbp
0000000000026f01	movq	%rsp, %rbp
0000000000026f04	movq	%rdi, -0x8(%rbp)
0000000000026f08	movq	-0x8(%rbp), %rdi
0000000000026f0c	addq	$0x180, %rdi
0000000000026f13	movq	%rdi, %rax
0000000000026f16	popq	%rbp
0000000000026f17	retq
0000000000026f18	nopl	(%rax,%rax)
__ZN11AppDelegate13_runningSceneEv:
0000000000026f20	pushq	%rbp
0000000000026f21	movq	%rsp, %rbp
0000000000026f24	movq	%rdi, -0x8(%rbp)
0000000000026f28	movq	-0x8(%rbp), %rdi
0000000000026f2c	addq	$0x28, %rdi
0000000000026f30	movq	%rdi, %rax
0000000000026f33	popq	%rbp
0000000000026f34	retq
0000000000026f35	nopw	%cs:(%rax,%rax)
0000000000026f3f	nop
__ZN5Cacao16scheduleFunctionIPFvvEEEvT_f:
0000000000026f40	pushq	%rbp
0000000000026f41	movq	%rsp, %rbp
0000000000026f44	subq	$0x50, %rsp
0000000000026f48	xorl	%eax, %eax
0000000000026f4a	movq	%rdi, -0x8(%rbp)
0000000000026f4e	movss	%xmm0, -0xc(%rbp)
0000000000026f53	movl	%eax, -0x24(%rbp)
0000000000026f56	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000026f5b	movq	(%rax), %rdi
0000000000026f5e	movq	0x300(%rdi), %rdi
0000000000026f65	movq	%rdi, -0x30(%rbp)
0000000000026f69	movq	%rax, %rdi
0000000000026f6c	movq	-0x30(%rbp), %rax
0000000000026f70	callq	*%rax
0000000000026f72	movq	-0x8(%rbp), %rdi
0000000000026f76	movq	(%rbp), %rcx
0000000000026f7a	movq	%rax, -0x38(%rbp)
0000000000026f7e	movq	%rdi, -0x40(%rbp)
0000000000026f82	movq	%rcx, -0x48(%rbp)
0000000000026f86	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000026f8b	movss	-0xc(%rbp), %xmm1
0000000000026f90	movq	-0x48(%rbp), %rcx
0000000000026f94	movq	%rcx, -0x18(%rbp)
0000000000026f98	movq	-0x40(%rbp), %rcx
0000000000026f9c	movq	%rcx, -0x20(%rbp)
0000000000026fa0	movq	-0x20(%rbp), %rsi
0000000000026fa4	movq	-0x18(%rbp), %rdx
0000000000026fa8	movq	-0x38(%rbp), %rdi
0000000000026fac	movq	%rax, %rcx
0000000000026faf	xorps	%xmm0, %xmm0
0000000000026fb2	movl	-0x24(%rbp), %r8d
0000000000026fb6	movl	-0x24(%rbp), %r9d
0000000000026fba	callq	__ZN7cocos2d11CCScheduler16scheduleSelectorEMNS_8CCObjectEFvfEPS1_fjfb ## cocos2d::CCScheduler::scheduleSelector(void (cocos2d::CCObject::*)(float), cocos2d::CCObject*, float, unsigned int, float, bool)
0000000000026fbf	addq	$0x50, %rsp
0000000000026fc3	popq	%rbp
0000000000026fc4	retq
0000000000026fc5	nopw	%cs:(%rax,%rax)
0000000000026fcf	nop
__ZZZ6injectvENK3$_3clEvENKUlvE_cvPFvvEEv:
0000000000026fd0	pushq	%rbp
0000000000026fd1	movq	%rsp, %rbp
0000000000026fd4	movq	%rdi, -0x8(%rbp)
0000000000026fd8	leaq	__ZZZ6injectvENK3$_3clEvENUlvE_8__invokeEv(%rip), %rax ## inject()::$_3::operator()() const::'lambda'()::__invoke()
0000000000026fdf	popq	%rbp
0000000000026fe0	retq
0000000000026fe1	nopw	%cs:(%rax,%rax)
0000000000026feb	nopl	(%rax,%rax)
__ZZZ6injectvENK3$_3clEvENUlvE_8__invokeEv:
0000000000026ff0	pushq	%rbp
0000000000026ff1	movq	%rsp, %rbp
0000000000026ff4	callq	__ZZZ6injectvENK3$_3clEvENKUlvE_clEv ## inject()::$_3::operator()() const::'lambda'()::operator()() const
0000000000026ff9	popq	%rbp
0000000000026ffa	retq
0000000000026ffb	nopl	(%rax,%rax)
__ZZZ6injectvENK3$_3clEvENKUlvE_clEv:
0000000000027000	pushq	%rbp
0000000000027001	movq	%rsp, %rbp
0000000000027004	subq	$0x10, %rsp
0000000000027008	movq	%rdi, -0x8(%rbp)
000000000002700c	callq	__ZN11GameManager11sharedStateEv ## GameManager::sharedState()
0000000000027011	movq	%rax, %rdi
0000000000027014	callq	0x271c8 ## symbol stub for: __ZN11GameManager10_playLayerEv
0000000000027019	movq	(%rax), %rax
000000000002701c	movq	%rax, %rdi
000000000002701f	callq	0x27210 ## symbol stub for: __ZN15GJBaseGameLayer8_player1Ev
0000000000027024	movq	(%rax), %rdi
0000000000027027	callq	0x271f2 ## symbol stub for: __ZN12PlayerObject5_xPosEv
000000000002702c	movss	(%rax), %xmm0
0000000000027030	cvtss2sd	%xmm0, %xmm0
0000000000027034	leaq	0x4483a(%rip), %rdi ## literal pool for: "hello from main thread, player1's xpos is %f\n"
000000000002703b	movb	$0x1, %al
000000000002703d	callq	0x279d2 ## symbol stub for: _printf
0000000000027042	movl	%eax, -0xc(%rbp)
0000000000027045	addq	$0x10, %rsp
0000000000027049	popq	%rbp
000000000002704a	retq
000000000002704b	nopl	(%rax,%rax)
__ZN15GJBaseGameLayer8_player1Ev:
0000000000027050	pushq	%rbp
0000000000027051	movq	%rsp, %rbp
0000000000027054	movq	%rdi, -0x8(%rbp)
0000000000027058	movq	-0x8(%rbp), %rdi
000000000002705c	addq	$0x380, %rdi
0000000000027063	movq	%rdi, %rax
0000000000027066	popq	%rbp
0000000000027067	retq
0000000000027068	nopl	(%rax,%rax)
__ZN12PlayerObject5_xPosEv:
0000000000027070	pushq	%rbp
0000000000027071	movq	%rsp, %rbp
0000000000027074	movq	%rdi, -0x8(%rbp)
0000000000027078	movq	-0x8(%rbp), %rdi
000000000002707c	addq	$0x7c8, %rdi
0000000000027083	movq	%rdi, %rax
0000000000027086	popq	%rbp
0000000000027087	retq
0000000000027088	nop
0000000000027089	nop
000000000002708a	nop
000000000002708b	nop
000000000002708c	nop
000000000002708d	nop
000000000002708e	nop
000000000002708f	nop
___cxx_global_var_init:
0000000000027090	pushq	%rbp
0000000000027091	movq	%rsp, %rbp
0000000000027094	subq	$0x10, %rsp
0000000000027098	leaq	__ZStL8__ioinit(%rip), %rdi ## std::__ioinit
000000000002709f	callq	0x277c8 ## symbol stub for: __ZNSt8ios_base4InitC1Ev
00000000000270a4	movq	0x4af75(%rip), %rdi ## literal pool symbol address: __ZNSt8ios_base4InitD1Ev
00000000000270ab	leaq	__ZStL8__ioinit(%rip), %rsi ## std::__ioinit
00000000000270b2	leaq	-0x270b9(%rip), %rdx
00000000000270b9	callq	0x2793c ## symbol stub for: ___cxa_atexit
00000000000270be	movl	%eax, -0x4(%rbp)
00000000000270c1	addq	$0x10, %rsp
00000000000270c5	popq	%rbp
00000000000270c6	retq
00000000000270c7	nopw	(%rax,%rax)
___cxx_global_var_init.1:
00000000000270d0	pushq	%rbp
00000000000270d1	movq	%rsp, %rbp
00000000000270d4	subq	$0x10, %rsp
00000000000270d8	leaq	__ZN7cocos2dL11CCPointZeroE(%rip), %rdi ## cocos2d::CCPointZero
00000000000270df	xorps	%xmm0, %xmm0
00000000000270e2	movss	%xmm0, -0x4(%rbp)
00000000000270e7	movss	-0x4(%rbp), %xmm1
00000000000270ec	callq	__ZN7cocos2d7CCPointC1Eff ## cocos2d::CCPoint::CCPoint(float, float)
00000000000270f1	addq	$0x10, %rsp
00000000000270f5	popq	%rbp
00000000000270f6	retq
00000000000270f7	nopw	(%rax,%rax)
___cxx_global_var_init.2:
0000000000027100	pushq	%rbp
0000000000027101	movq	%rsp, %rbp
0000000000027104	subq	$0x10, %rsp
0000000000027108	leaq	__ZN7cocos2dL10CCSizeZeroE(%rip), %rdi ## cocos2d::CCSizeZero
000000000002710f	xorps	%xmm0, %xmm0
0000000000027112	movss	%xmm0, -0x4(%rbp)
0000000000027117	movss	-0x4(%rbp), %xmm1
000000000002711c	callq	__ZN7cocos2d6CCSizeC1Eff ## cocos2d::CCSize::CCSize(float, float)
0000000000027121	addq	$0x10, %rsp
0000000000027125	popq	%rbp
0000000000027126	retq
0000000000027127	nopw	(%rax,%rax)
___cxx_global_var_init.3:
0000000000027130	pushq	%rbp
0000000000027131	movq	%rsp, %rbp
0000000000027134	subq	$0x10, %rsp
0000000000027138	leaq	__ZN7cocos2dL10CCRectZeroE(%rip), %rdi ## cocos2d::CCRectZero
000000000002713f	xorps	%xmm0, %xmm0
0000000000027142	movss	%xmm0, -0x4(%rbp)
0000000000027147	movss	-0x4(%rbp), %xmm1
000000000002714c	movss	-0x4(%rbp), %xmm2
0000000000027151	movss	-0x4(%rbp), %xmm3
0000000000027156	callq	__ZN7cocos2d6CCRectC1Effff ## cocos2d::CCRect::CCRect(float, float, float, float)
000000000002715b	addq	$0x10, %rsp
000000000002715f	popq	%rbp
0000000000027160	retq
0000000000027161	nopw	%cs:(%rax,%rax)
000000000002716b	nopl	(%rax,%rax)
___cxx_global_var_init.4:
0000000000027170	pushq	%rbp
0000000000027171	movq	%rsp, %rbp
0000000000027174	leaq	__ZN7cocos2d2uiL10MarginZeroE(%rip), %rdi ## cocos2d::ui::MarginZero
000000000002717b	callq	__ZN7cocos2d2ui6MarginC1Ev ## cocos2d::ui::Margin::Margin()
0000000000027180	popq	%rbp
0000000000027181	retq
0000000000027182	nopw	%cs:(%rax,%rax)
000000000002718c	nopl	(%rax)
__GLOBAL__sub_I_headless.cpp:
0000000000027190	pushq	%rbp
0000000000027191	movq	%rsp, %rbp
0000000000027194	callq	___cxx_global_var_init
0000000000027199	callq	___cxx_global_var_init.1
000000000002719e	callq	___cxx_global_var_init.2
00000000000271a3	callq	___cxx_global_var_init.3
00000000000271a8	callq	___cxx_global_var_init.4
00000000000271ad	popq	%rbp
00000000000271ae	retq
